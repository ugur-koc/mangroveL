===< 63731 >===
running 3 interestingness tests in parallel
===< pass_clang_binsrch :: remove-unused-function >===
(18.6 %, 2394 bytes)
===< pass_clang :: local-to-global >===

***************************************************

pass_clang::local-to-global has encountered a bug:
crashed: "/usr/local/libexec/clang_delta" --transformation=local-to-global --counter=1 /var/folders/f7/rzdyhd9x2bd39zsnq6ys_5fr0000gn/T/creduce-kwlbhg/CWE401_Memory_Leak__wchar_t_realloc_18.c

Please consider tarring up /Users/ugurmeryem/Dropbox/mangroveL/cppcheck/creduce_bug_000
and mailing it to creduce-bugs@flux.utah.edu and we will try to fix
the bug.

This bug is not fatal, C-Reduce will continue to execute.

***************************************************

===< pass_clang :: param-to-local >===
===< pass_clang :: remove-nested-function >===
===< pass_clang :: rename-fun >===
===< pass_clang :: union-to-struct >===

***************************************************

pass_clang::union-to-struct has encountered a bug:
crashed: "/usr/local/libexec/clang_delta" --transformation=union-to-struct --counter=1 /var/folders/f7/rzdyhd9x2bd39zsnq6ys_5fr0000gn/T/creduce-UTxYhl/CWE401_Memory_Leak__wchar_t_realloc_18.c

Please consider tarring up /Users/ugurmeryem/Dropbox/mangroveL/cppcheck/creduce_bug_001
and mailing it to creduce-bugs@flux.utah.edu and we will try to fix
the bug.

This bug is not fatal, C-Reduce will continue to execute.

***************************************************

===< pass_clang :: simple-inliner >===
===< pass_clang :: remove-unused-function >===
(33.2 %, 1964 bytes)
===< pass_clang :: simplify-if >===
===< pass_clang :: reduce-array-dim >===
===< pass_clang :: simplify-comma-expr >===
===< pass_clang :: simplify-dependent-typedef >===
===< pass_clang :: replace-simple-typedef >===
===< pass_clang :: template-non-type-arg-to-int >===
===< pass_clang :: remove-base-class >===
===< pass_clang :: remove-ctor-initializer >===
===< pass_clang :: simplify-nested-class >===
===< pass_clang :: empty-struct-to-int >===
===< pass_clang :: remove-pointer-pairs >===
===< pass_clang :: remove-array >===
===< pass_clang :: remove-addr-taken >===
===< pass_clang :: simplify-struct >===
===< pass_clang :: rename-var >===
===< pass_clang :: rename-class >===
===< pass_clang :: simplify-struct-union-decl >===
===< pass_clang :: move-global-var >===
===< pass_clang :: unify-function-decl >===
Termination check: size was 2940; now 1964
===< pass_clang_binsrch :: remove-unused-function >===
===< pass_clang :: local-to-global >===

***************************************************

pass_clang::local-to-global has encountered a bug:
crashed: "/usr/local/libexec/clang_delta" --transformation=local-to-global --counter=1 /var/folders/f7/rzdyhd9x2bd39zsnq6ys_5fr0000gn/T/creduce-KAYtRS/CWE401_Memory_Leak__wchar_t_realloc_18.c

Please consider tarring up /Users/ugurmeryem/Dropbox/mangroveL/cppcheck/creduce_bug_002
and mailing it to creduce-bugs@flux.utah.edu and we will try to fix
the bug.

This bug is not fatal, C-Reduce will continue to execute.

***************************************************

===< pass_clang :: param-to-local >===
===< pass_clang :: remove-nested-function >===
===< pass_clang :: rename-fun >===
===< pass_clang :: union-to-struct >===

***************************************************

pass_clang::union-to-struct has encountered a bug:
crashed: "/usr/local/libexec/clang_delta" --transformation=union-to-struct --counter=1 /var/folders/f7/rzdyhd9x2bd39zsnq6ys_5fr0000gn/T/creduce-s2h0V5/CWE401_Memory_Leak__wchar_t_realloc_18.c

Please consider tarring up /Users/ugurmeryem/Dropbox/mangroveL/cppcheck/creduce_bug_003
and mailing it to creduce-bugs@flux.utah.edu and we will try to fix
the bug.

This bug is not fatal, C-Reduce will continue to execute.

***************************************************

===< pass_clang :: simple-inliner >===
===< pass_clang :: remove-unused-function >===
===< pass_clang :: simplify-if >===
===< pass_clang :: reduce-array-dim >===
===< pass_clang :: simplify-comma-expr >===
===< pass_clang :: simplify-dependent-typedef >===
===< pass_clang :: replace-simple-typedef >===
===< pass_clang :: template-non-type-arg-to-int >===
===< pass_clang :: remove-base-class >===
===< pass_clang :: remove-ctor-initializer >===
===< pass_clang :: simplify-nested-class >===
===< pass_clang :: empty-struct-to-int >===
===< pass_clang :: remove-pointer-pairs >===
===< pass_clang :: remove-array >===
===< pass_clang :: remove-addr-taken >===
===< pass_clang :: simplify-struct >===
===< pass_clang :: rename-var >===
===< pass_clang :: rename-class >===
===< pass_clang :: simplify-struct-union-decl >===
===< pass_clang :: move-global-var >===
===< pass_clang :: unify-function-decl >===
Termination check: size was 1964; now 1964
===================== done ====================

pass statistics:
  method pass_clang :: empty-struct-to-int worked 0 times and failed 0 times
  method pass_clang :: local-to-global worked 0 times and failed 0 times
  method pass_clang :: move-global-var worked 0 times and failed 0 times
  method pass_clang :: param-to-local worked 0 times and failed 0 times
  method pass_clang :: reduce-array-dim worked 0 times and failed 0 times
  method pass_clang :: remove-addr-taken worked 0 times and failed 0 times
  method pass_clang :: remove-array worked 0 times and failed 0 times
  method pass_clang :: remove-base-class worked 0 times and failed 0 times
  method pass_clang :: remove-ctor-initializer worked 0 times and failed 0 times
  method pass_clang :: remove-nested-function worked 0 times and failed 0 times
  method pass_clang :: remove-pointer-pairs worked 0 times and failed 0 times
  method pass_clang :: remove-unused-function worked 1 times and failed 2 times
  method pass_clang :: rename-class worked 0 times and failed 0 times
  method pass_clang :: rename-fun worked 0 times and failed 2 times
  method pass_clang :: rename-var worked 0 times and failed 0 times
  method pass_clang :: replace-simple-typedef worked 0 times and failed 0 times
  method pass_clang :: simple-inliner worked 0 times and failed 0 times
  method pass_clang :: simplify-comma-expr worked 0 times and failed 0 times
  method pass_clang :: simplify-dependent-typedef worked 0 times and failed 0 times
  method pass_clang :: simplify-if worked 0 times and failed 0 times
  method pass_clang :: simplify-nested-class worked 0 times and failed 0 times
  method pass_clang :: simplify-struct worked 0 times and failed 0 times
  method pass_clang :: simplify-struct-union-decl worked 0 times and failed 0 times
  method pass_clang :: template-non-type-arg-to-int worked 0 times and failed 0 times
  method pass_clang :: unify-function-decl worked 0 times and failed 0 times
  method pass_clang :: union-to-struct worked 0 times and failed 0 times
  method pass_clang_binsrch :: remove-unused-function worked 1 times and failed 2 times


          '/Users/ugurmeryem/Dropbox/mangroveL/cppcheck/CWE401_Memory_Leak__wchar_t_realloc_18.c' reduced to:
/* TEMPLATE GENERATED TESTCASE FILE
Filename: CWE401_Memory_Leak__wchar_t_realloc_18.c
Label Definition File: CWE401_Memory_Leak.c.label.xml
Template File: sources-sinks-18.tmpl.c
*/
/*
 * @description
 * CWE: 401 Memory Leak
 * BadSource: realloc Allocate data using realloc()
 * GoodSource: Allocate data on the stack
 * Sinks:
 *    GoodSink: call free() on data
 *    BadSink : no deallocation of data
 * Flow Variant: 18 Control flow: goto statements
 *
 * */

#include "std_testcase.h"

#include <wchar.h>

#ifndef OMITBAD



#endif /* OMITBAD */

#ifndef OMITGOOD

/* goodB2G() - use badsource and goodsink by reversing the blocks on the second goto statement */
static void goodB2G()
{
    wchar_t * d;
    d = NULL;
    goto source;
source:
    /* POTENTIAL FLAW: Allocate memory on the heap */
    d = (wchar_t *)realloc(d, 100*sizeof(wchar_t));
    /* Initialize and make use of data */
    wcscpy(d, L"A String");
    printWLine(d);
    goto sink;
sink:
    /* FIX: Deallocate memory */
    free(d);
}

/* goodG2B() - use goodsource and badsink by reversing the blocks on the first goto statement */




#endif /* OMITGOOD */

/* Below is the main(). It is only used when building this testcase on
   its own for testing or for building a binary to use in testing binary
   analysis tools. It is not used when compiling all the testcases as one
   application, which is how source code analysis tools are tested. */

#ifdef INCLUDEMAIN

int main(int argc, char * argv[])
{
    /* seed randomness */
    srand( (unsigned)time(NULL) );
#ifndef OMITGOOD
    printLine("Calling good()...");
    CWE401_Memory_Leak__wchar_t_realloc_18_good();
    printLine("Finished good()");
#endif /* OMITGOOD */
#ifndef OMITBAD
    printLine("Calling bad()...");
    CWE401_Memory_Leak__wchar_t_realloc_18_bad();
    printLine("Finished bad()");
#endif /* OMITBAD */
    return 0;
}

#endif
