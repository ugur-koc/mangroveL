pass_clang :: replace-callexpr123 --> ( 
 
 1
)
pass_clang :: remove-nested-function45 --> (
 
 
 1
)
pass_balanced :: curly274 --> (
    foo() {             int * p = malloc(  sizeof(int));                 ;                           free(p);         	             free(p);          }               main() {          }
 
 0
)
264391 --> (
 
 
 1
)
pass_clang :: simplify-if126 --> (
 
 
 1
)
pass_clang :: remove-ctor-initializer59 --> (
 
 
 1
)
pass_clang :: callexpr-to-value26 --> (
              int * p = (int *)malloc(10 * sizeof(int));             int r = rand() % 10;             free(p);             free(p);
 
 0
)
pass_clang :: replace-simple-typedef87 --> (
 
 
 1
)
pass_clang :: reduce-class-template-param130 --> (
 
 
 1
)
pass_clang :: remove-pointer96 --> (
 
 
 1
)
pass_unifdef :: 03 --> (
 
 
 1
)
pass_clang :: replace-callexpr27 --> (
 
 
 1
)
pass_clang :: remove-trivial-base-template131 --> (
 
 
 1
)
pass_clang :: remove-unused-function22 --> (
  void foo() {             int * p = (int *)malloc(10 * sizeof(int));             int r = rand() % 10;             if (r>10){             free(p);         	}             free(p);          }
 
 0
)
pass_includes :: 02 --> (
  #include <stdlib.h> #include <stdio.h> #include <stdio.h>
 
 1
)
pass_clang :: rename-class150 --> (
 
 
 1
)
pass_indent :: regular104 --> (
    foo() {             int * p = malloc(  sizeof(int))                 ;                           free(p);         	             free(p);          }                main() {          }  
 
 1
)
pass_clang :: remove-unused-enum-member82 --> (
 
 
 1
)
pass_clang :: combine-local-var153 --> (
 
 
 1
)
pass_lines :: 213 --> (
        int * p = (int *)malloc(10 * sizeof(int));       int r = rand() % 10;       if (r>10){    	}       free(p);    }       int main() {    } void foo() {       int * p = (int *)malloc(10 * sizeof(int));       int r = rand() % 10;       if (r>10){        free(p);    	}       free(p);    }       int main() {    }    	}       free(p);    }       int main() {    } void foo() {       int * p = (int *)malloc(10 * sizeof(int));       int r = rand() % 10;       if (r>10){        free(p); void foo() {       int * p = (int *)malloc(10 * sizeof(int));       int r = rand() % 10;       if (r>10){        free(p);       int main() {    }       free(p);    }        free(p);    	}       int r = rand() % 10;       if (r>10){ void foo() {       int * p = (int *)malloc(10 * sizeof(int)); void foo() {       int * p = (int *)malloc(10 * sizeof(int));    }       int main() {    }       free(p);    	}        free(p); void foo() {        int * p = (int *)malloc(10 * sizeof(int));        int r = rand() % 10;        if (r>10){         free(p);     	}        free(p);     }        int main() {     } void foo() {        int * p = (int *)malloc(10 * sizeof(int));        int r = rand() % 10;        if (r>10){         free(p);     	}        free(p);     }        int main() {     }     	}        free(p);     }        int main() {     } void foo() {        int * p = (int *)malloc(10 * sizeof(int));        int r = rand() % 10;        if (r>10){         free(p); void foo() {        int * p = (int *)malloc(10 * sizeof(int));        int r = rand() % 10;        if (r>10){         free(p);        int main() {     }        free(p);     }         free(p);     	}        int r = rand() % 10;        if (r>10){ void foo() {        int * p = (int *)malloc(10 * sizeof(int)); void foo() {        int * p = (int *)malloc(10 * sizeof(int));     }        int main() {     }        free(p);     	}         free(p);        if (r>10){        int r = rand() % 10;        int * p = (int *)malloc(10 * sizeof(int)); void foo() { void foo() {
 
 0
)
pass_lines :: 212 --> (
       int * p = (int *)malloc(10 * sizeof(int));      int r = rand() % 10;      if (r>10){       free(p);   	}      free(p);   }      int main() {   } void foo() {      int * p = (int *)malloc(10 * sizeof(int));      int r = rand() % 10;      if (r>10){       free(p);   	}      free(p);   }      int main() {   }      if (r>10){       free(p);   	}      free(p);   }      int main() {   } void foo() {      int * p = (int *)malloc(10 * sizeof(int));      int r = rand() % 10;      if (r>10){       free(p);   	}      free(p);      int main() {   }      free(p);   }      int r = rand() % 10;      if (r>10){       free(p);   	} void foo() {      int * p = (int *)malloc(10 * sizeof(int)); void foo() {      int * p = (int *)malloc(10 * sizeof(int));   }      int main() {   }      free(p); void foo() {       int * p = (int *)malloc(10 * sizeof(int));       int r = rand() % 10;       if (r>10){        free(p);    	}       free(p);    }       int main() {    } void foo() {       int * p = (int *)malloc(10 * sizeof(int));       int r = rand() % 10;       if (r>10){        free(p);    	}       free(p);    }       int main() {    }    	}       free(p);    }       int main() {    } void foo() {       int * p = (int *)malloc(10 * sizeof(int));       int r = rand() % 10;       if (r>10){        free(p); void foo() {       int * p = (int *)malloc(10 * sizeof(int));       int r = rand() % 10;       if (r>10){        free(p);       int main() {    }       free(p);    }        free(p);    	}       int r = rand() % 10;       if (r>10){ void foo() {       int * p = (int *)malloc(10 * sizeof(int)); void foo() {       int * p = (int *)malloc(10 * sizeof(int));    }       int main() {    }       free(p);    	}        free(p);       if (r>10){       int r = rand() % 10;       int * p = (int *)malloc(10 * sizeof(int)); void foo() { void foo() {
 
 0
)
pass_clang :: param-to-global44 --> (
 
 
 1
)
pass_clang :: simplify-dependent-typedef128 --> (
 
 
 1
)
pass_clang :: aggregate-to-scalar42 --> (
 
 
 1
)
pass_clang :: remove-base-class93 --> (
 
 
 1
)
pass_clang :: reduce-pointer-level48 --> (
              int * p = malloc(10 * sizeof(int));             free(p);             free(p);
 
 0
)
pass_clang :: simplify-nested-class134 --> (
 
 
 1
)
pass_clang :: simplify-callexpr52 --> (
              int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             free(p);             free(p);
 
 0
)
pass_clang :: remove-namespace41 --> (
 
 
 1
)
pass_clang :: param-to-local78 --> (
 
 
 1
)
pass_clang :: copy-propagation121 --> (
 
 
 1
)
pass_clang :: local-to-global43 --> (
   void foo() {             int * p = malloc(10 * sizeof(int));             free(p);             free(p);  void foo() {             int r = rand() % 10;             if (r>10)
 
 0
)
pass_clex :: rm-toks-2111 --> (
  foo() { foo() { foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p); }   free(p); } main() {} } main() {} main() {} main() {} main() {} main() {} main() {}
 
 0
)
pass_clang :: remove-trivial-base-template92 --> (
 
 
 1
)
pass_lines :: 110 --> (
  void foo() {    int * p = (int *)malloc(10 * sizeof(int));    int r = rand() % 10;    if (r>10){       free(p);   	}    free(p);    printf("Done!\n"); }    int main() {    foo();    return 0; } void foo() {    int * p = (int *)malloc(10 * sizeof(int));    int r = rand() % 10;    if (r>10){       free(p);   	}    free(p);    printf("Done!\n"); }    int main() {    foo();    return 0; } void foo() {    int * p = (int *)malloc(10 * sizeof(int));    int r = rand() % 10;    if (r>10){       free(p);   	}    free(p);    printf("Done!\n"); }    int main() {    foo();    return 0; } void foo() {    int * p = (int *)malloc(10 * sizeof(int));    int r = rand() % 10;    if (r>10){       free(p);   	}    free(p);    printf("Done!\n"); }    int main() {    foo();    return 0; } void foo() {    int * p = (int *)malloc(10 * sizeof(int));    int r = rand() % 10;    if (r>10){       free(p);   	}    free(p);    printf("Done!\n"); }    int main() {    foo();    return 0; }    int main() {    foo();    return 0; } void foo() {    int * p = (int *)malloc(10 * sizeof(int));    int r = rand() % 10;    if (r>10){       free(p);   	}    free(p);    printf("Done!\n"); } void foo() {    int * p = (int *)malloc(10 * sizeof(int));    int r = rand() % 10;    if (r>10){       free(p);   	}    free(p);    printf("Done!\n"); } void foo() {     int * p = (int *)malloc(10 * sizeof(int));     int r = rand() % 10;     if (r>10){       free(p);   	}     free(p);     printf("Done!\n");  }     int main() {     foo();     return 0;  } void foo() {     int * p = (int *)malloc(10 * sizeof(int));     int r = rand() % 10;     if (r>10){       free(p);   	}     free(p);     printf("Done!\n");  }     int main() {     foo();     return 0;  }  }     int main() {     foo();     return 0;  }     int * p = (int *)malloc(10 * sizeof(int));     int r = rand() % 10;     if (r>10){       free(p);   	}     free(p);     printf("Done!\n"); void foo() {     int * p = (int *)malloc(10 * sizeof(int));     int r = rand() % 10;     if (r>10){       free(p);   	}     free(p);     return 0;  }     int main() {     foo();     printf("Done!\n");  }     if (r>10){       free(p);   	}     free(p);     int * p = (int *)malloc(10 * sizeof(int));     int r = rand() % 10; void foo() {     int * p = (int *)malloc(10 * sizeof(int));  }     return 0;     foo();     int main() {  }     printf("Done!\n");  }     foo();     int main() {  }     printf("Done!\n");     free(p);  }     int main() {  }     printf("Done!\n");     free(p);     if (r>10){       free(p);   	}     int r = rand() % 10;     int * p = (int *)malloc(10 * sizeof(int));  }     free(p);     if (r>10){       free(p);   	}     int r = rand() % 10;     int * p = (int *)malloc(10 * sizeof(int)); void foo() { void foo() {
 
 0
)
pass_lines :: 111 --> (
      int * p = (int *)malloc(10 * sizeof(int));     int r = rand() % 10;     if (r>10){       free(p);   	}     free(p);  }     int main() {  } void foo() {     int * p = (int *)malloc(10 * sizeof(int));     int r = rand() % 10;     if (r>10){       free(p);   	}     free(p);  }     int main() {  }     free(p);  }     int main() {  } void foo() {     int * p = (int *)malloc(10 * sizeof(int));     int r = rand() % 10;     if (r>10){       free(p);   	} void foo() {     int * p = (int *)malloc(10 * sizeof(int));     int r = rand() % 10;     if (r>10){       free(p);   	}     int main() {  }     free(p);  }     int r = rand() % 10;     if (r>10){       free(p);   	} void foo() {     int * p = (int *)malloc(10 * sizeof(int)); void foo() {     int * p = (int *)malloc(10 * sizeof(int));  }     int main() {  } void foo() {      int * p = (int *)malloc(10 * sizeof(int));      int r = rand() % 10;      if (r>10){       free(p);   	}      free(p);   }      int main() {   } void foo() {      int * p = (int *)malloc(10 * sizeof(int));      int r = rand() % 10;      if (r>10){       free(p);   	}      free(p);   }      int main() {   }      free(p);   }      int main() {   } void foo() {      int * p = (int *)malloc(10 * sizeof(int));      int r = rand() % 10;      if (r>10){       free(p);   	} void foo() {      int * p = (int *)malloc(10 * sizeof(int));      int r = rand() % 10;      if (r>10){       free(p);   	}      int main() {   }      free(p);   }      int r = rand() % 10;      if (r>10){       free(p);   	} void foo() {      int * p = (int *)malloc(10 * sizeof(int)); void foo() {      int * p = (int *)malloc(10 * sizeof(int));   }      int main() {   }      free(p);      if (r>10){       free(p);   	}      int r = rand() % 10;      int * p = (int *)malloc(10 * sizeof(int)); void foo() { void foo() {
 
 0
)
pass_ternary :: b72 --> (
 
 
 1
)
pass_clang :: simplify-if85 --> (
 
 
 1
)
pass_lines :: 119 --> (
  void foo() {          int * p = (int *)malloc(10 * sizeof(int));          int r = rand() % 10;          if (r>10){           free(p);       	}          free(p);       }           int main() {       } void foo() {          int * p = (int *)malloc(10 * sizeof(int));          int r = rand() % 10;          if (r>10){           free(p);       	}          free(p);       }           int main() {       } void foo() {          int * p = (int *)malloc(10 * sizeof(int));          int r = rand() % 10;          if (r>10){           free(p);       	}          free(p);       }           int main() {       } void foo() {          int * p = (int *)malloc(10 * sizeof(int));          int r = rand() % 10;          if (r>10){           free(p);       	}          free(p);       }           int main() {       } void foo() {          int * p = (int *)malloc(10 * sizeof(int));          int r = rand() % 10;          if (r>10){           free(p);       	}          free(p);       }           int main() {       }           int main() {       } void foo() {          int * p = (int *)malloc(10 * sizeof(int));          int r = rand() % 10;          if (r>10){           free(p);       	}          free(p);       } void foo() {          int * p = (int *)malloc(10 * sizeof(int));          int r = rand() % 10;          if (r>10){           free(p);       	}          free(p);       } void foo() {           int * p = (int *)malloc(10 * sizeof(int));           int r = rand() % 10;           if (r>10){           free(p);       	}           free(p);        }            int main() {        } void foo() {           int * p = (int *)malloc(10 * sizeof(int));           int r = rand() % 10;           if (r>10){           free(p);       	}           free(p);        }            int main() {        }           free(p);        }            int main() {        } void foo() {           int * p = (int *)malloc(10 * sizeof(int));           int r = rand() % 10;           if (r>10){           free(p);       	} void foo() {           int * p = (int *)malloc(10 * sizeof(int));           int r = rand() % 10;           if (r>10){           free(p);       	}            int main() {        }           free(p);        }           int r = rand() % 10;           if (r>10){           free(p);       	} void foo() {           int * p = (int *)malloc(10 * sizeof(int)); void foo() {           int * p = (int *)malloc(10 * sizeof(int));        }            int main() {        }           free(p);           if (r>10){           free(p);       	}           int r = rand() % 10;           int * p = (int *)malloc(10 * sizeof(int)); void foo() { void foo() {
 
 0
)
pass_clang_binsrch :: replace-function-def-with-decl16 --> (
  void foo() {          int * p = (int *)malloc(10 * sizeof(int));          int r = rand() % 10;          if (r>10){           free(p);       	}          free(p);       }          int main() {       }
 
 0
)
pass_lines :: 1015 --> (
          int * p = (int *)malloc(10 * sizeof(int));         int r = rand() % 10;         if (r>10){      	}         free(p);      }         int main() {      } void foo() {         int * p = (int *)malloc(10 * sizeof(int));         int r = rand() % 10;         if (r>10){          free(p);      	}         free(p);      }         int main() {      }      	}         free(p);      }         int main() {      } void foo() {         int * p = (int *)malloc(10 * sizeof(int));         int r = rand() % 10;         if (r>10){          free(p); void foo() {         int * p = (int *)malloc(10 * sizeof(int));         int r = rand() % 10;         if (r>10){          free(p);         int main() {      }         free(p);      }          free(p);      	}         int r = rand() % 10;         if (r>10){ void foo() {         int * p = (int *)malloc(10 * sizeof(int)); void foo() {         int * p = (int *)malloc(10 * sizeof(int));      }         int main() {      }         free(p);      	}          free(p); void foo() {          int * p = (int *)malloc(10 * sizeof(int));          int r = rand() % 10;          if (r>10){           free(p);       	}          free(p);       }          int main() {       } void foo() {          int * p = (int *)malloc(10 * sizeof(int));          int r = rand() % 10;          if (r>10){           free(p);       	}          free(p);       }          int main() {       }       	}          free(p);       }          int main() {       } void foo() {          int * p = (int *)malloc(10 * sizeof(int));          int r = rand() % 10;          if (r>10){           free(p); void foo() {          int * p = (int *)malloc(10 * sizeof(int));          int r = rand() % 10;          if (r>10){           free(p);          int main() {       }          free(p);       }           free(p);       	}          int r = rand() % 10;          if (r>10){ void foo() {          int * p = (int *)malloc(10 * sizeof(int)); void foo() {          int * p = (int *)malloc(10 * sizeof(int));       }          int main() {       }          free(p);       	}           free(p);          if (r>10){          int r = rand() % 10;          int * p = (int *)malloc(10 * sizeof(int)); void foo() { void foo() {
 
 0
)
pass_lines :: 1014 --> (
         int * p = (int *)malloc(10 * sizeof(int));        int r = rand() % 10;        if (r>10){     	}        free(p);     }        int main() {     } void foo() {        int * p = (int *)malloc(10 * sizeof(int));        int r = rand() % 10;        if (r>10){         free(p);     	}        free(p);     }        int main() {     }     	}        free(p);     }        int main() {     } void foo() {        int * p = (int *)malloc(10 * sizeof(int));        int r = rand() % 10;        if (r>10){         free(p); void foo() {        int * p = (int *)malloc(10 * sizeof(int));        int r = rand() % 10;        if (r>10){         free(p);        int main() {     }        free(p);     }         free(p);     	}        int r = rand() % 10;        if (r>10){ void foo() {        int * p = (int *)malloc(10 * sizeof(int)); void foo() {        int * p = (int *)malloc(10 * sizeof(int));     }        int main() {     }        free(p);     	} void foo() {         int * p = (int *)malloc(10 * sizeof(int));         int r = rand() % 10;         if (r>10){          free(p);      	}         free(p);      }         int main() {      } void foo() {         int * p = (int *)malloc(10 * sizeof(int));         int r = rand() % 10;         if (r>10){          free(p);      	}         free(p);      }         int main() {      }      	}         free(p);      }         int main() {      } void foo() {         int * p = (int *)malloc(10 * sizeof(int));         int r = rand() % 10;         if (r>10){          free(p); void foo() {         int * p = (int *)malloc(10 * sizeof(int));         int r = rand() % 10;         if (r>10){          free(p);         int main() {      }         free(p);      }          free(p);      	}         int r = rand() % 10;         if (r>10){ void foo() {         int * p = (int *)malloc(10 * sizeof(int)); void foo() {         int * p = (int *)malloc(10 * sizeof(int));      }         int main() {      }         free(p);      	}          free(p);         if (r>10){         int r = rand() % 10;         int * p = (int *)malloc(10 * sizeof(int)); void foo() { void foo() {
 
 0
)
pass_comments :: 0140 --> (
 
 
 1
)
pass_clang :: simple-inliner119 --> (
 
 
 1
)
pass_clang :: rename-fun147 --> (
  foo() {   int *p = malloc(sizeof(int));   free(p);   free(p);
 
 0
)
pass_clex :: delete-string158 --> (
 
 
 1
)
pass_peep :: a100 --> (
    foo() {             int * p = malloc(  sizeof(int));                 ;                           free(p);         	             free(p);          }   foo() {             int * p = malloc(  sizeof(int));                 ;                           free(p);         	             free(p);          }   foo() {             int * p = malloc(  sizeof(int));                 ;                           free(p);         	             free(p);          }   foo() {             int * p = malloc(  sizeof(int));                 ;                           free(p);         	             free(p);          }   foo() {             int * p = malloc(  sizeof(int));                 ;                           free(p);         	             free(p);          }   foo() {             int * p = malloc(  sizeof(int));                 ;                           free(p);         	             free(p);          }   foo() {             int * p = malloc(  sizeof(int));                 ;                           free(p);         	             free(p);          }   foo() {             int * p = malloc(  sizeof(int))                 ;                           free(p);         	             free(p);          }   foo() {             int * p = malloc(  sizeof(int))                 ;                           free(p);         	             free(p);          }   foo() {             int * p = malloc(  sizeof(int))                 ;                           free(p);         	             free(p);          }   foo() {             int * p = malloc(  sizeof(int))                 ;                           free(p);         	             free(p);          }   foo() {             int * p = malloc(  sizeof(int))                 ;                           free(p);         	             free(p);          }                main() {          }                main() {          }
 
 0
)
pass_balanced :: curly23 --> (
  void foo() {             int * p = (int *)malloc(10 * sizeof(int));             int r = rand() % 10;             if (r>10){             free(p);         	}             free(p);          } void foo() {             if (r>10){             free(p);         	} void foo() {              int main() {          }
 
 0
)
pass_clang :: remove-unresolved-base58 --> (
 
 
 1
)
pass_clang :: rename-cxx-method151 --> (
 
 
 1
)
pass_clang :: reduce-array-dim54 --> (
 
 
 1
)
pass_clang :: copy-propagation49 --> (
 
 
 1
)
pass_balanced :: parens39 --> (
  void foo() { void foo() {             int * p = (int *)malloc(10 * sizeof(int)); void foo() {             int * p = (int *)malloc(10 * sizeof(int)); void foo() {             int * p = (int *)malloc(10 * sizeof(int)); void foo() {             int r = rand() % 10; void foo() {             if (r>10){ void foo() {             free(p); void foo() {             free(p);             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             if (r>10){             free(p);             free(p);              int main() {
 
 0
)
pass_clex :: rm-toks-7145 --> (
  foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   free(p);   int *p = malloc(sizeof(int));   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p); }   free(p);   free(p); } main() {}   free(p); } main() {}   free(p); } main() {}   free(p); } main() {}   free(p); } main() {}   free(p); } main() {} } main() {} main() {} main() {} main() {} main() {} main() {}
 
 0
)
pass_clang :: simplify-comma-expr86 --> (
 
 
 1
)
pass_ints :: b102 --> (
 
 
 1
)
pass_lines :: 1021 --> (
             int * p = (int *)malloc(10 * sizeof(int));            int r = rand() % 10;            if (r>10){            free(p);        	}            free(p);         }             int main() {         } void foo() {            int * p = (int *)malloc(10 * sizeof(int));            int r = rand() % 10;            if (r>10){            free(p);        	}            free(p);         }             int main() {         }        	}            free(p);         }             int main() {         } void foo() {            int * p = (int *)malloc(10 * sizeof(int));            int r = rand() % 10;            if (r>10){            free(p); void foo() {            int * p = (int *)malloc(10 * sizeof(int));            int r = rand() % 10;            if (r>10){            free(p);             int main() {         }            free(p);         }        	}            free(p);            int r = rand() % 10;            if (r>10){ void foo() {            int * p = (int *)malloc(10 * sizeof(int)); void foo() {            int * p = (int *)malloc(10 * sizeof(int));         }             int main() {         }            free(p);        	}            free(p); void foo() {             int * p = (int *)malloc(10 * sizeof(int));             int r = rand() % 10;             if (r>10){             free(p);         	}             free(p);          }              int main() {          } void foo() {             int * p = (int *)malloc(10 * sizeof(int));             int r = rand() % 10;             if (r>10){             free(p);         	}             free(p);          }              int main() {          }         	}             free(p);          }              int main() {          } void foo() {             int * p = (int *)malloc(10 * sizeof(int));             int r = rand() % 10;             if (r>10){             free(p); void foo() {             int * p = (int *)malloc(10 * sizeof(int));             int r = rand() % 10;             if (r>10){             free(p);              int main() {          }             free(p);          }         	}             free(p);             int r = rand() % 10;             if (r>10){ void foo() {             int * p = (int *)malloc(10 * sizeof(int)); void foo() {             int * p = (int *)malloc(10 * sizeof(int));          }              int main() {          }             free(p);         	}             free(p);             if (r>10){             int r = rand() % 10;             int * p = (int *)malloc(10 * sizeof(int)); void foo() { void foo() {
 
 0
)
pass_clang :: remove-nested-function79 --> (
 
 
 1
)
pass_lines :: 0157 --> (
  foo() {   int *p = malloc(sizeof(int));   free(p);   free(p); } main() {} foo() {   int *p = malloc(sizeof(int)); main() {} }   free(p);   free(p); foo() {   int *p = malloc(sizeof(int));   free(p);   free(p); }  main() {} foo() {   int *p = malloc(sizeof(int));   free(p);   free(p); }  main() {}  main() {} foo() {   int *p = malloc(sizeof(int));   free(p);   free(p); } foo() {   int *p = malloc(sizeof(int));   free(p);   free(p); }
 
 0
)
pass_clang :: replace-callexpr81 --> (
 
 
 1
)
pass_clex :: rm-toks-13143 --> (
  foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   free(p);   int *p = malloc(sizeof(int));   free(p);   free(p);   int *p = malloc(sizeof(int));   free(p);   free(p);   int *p = malloc(sizeof(int));   free(p);   free(p);   int *p = malloc(sizeof(int));   free(p);   free(p);   int *p = malloc(sizeof(int));   free(p);   free(p); }   int *p = malloc(sizeof(int));   free(p);   free(p); } main() {}   int *p = malloc(sizeof(int));   free(p);   free(p); } main() {}   free(p);   free(p); } main() {}   free(p);   free(p); } main() {}   free(p);   free(p); } main() {}   free(p);   free(p); } main() {}   free(p);   free(p); } main() {}   free(p); } main() {}   free(p); } main() {}   free(p); } main() {}   free(p); } main() {}   free(p); } main() {} } main() {} main() {} main() {} main() {} main() {} main() {}
 
 0
)
pass_clang :: remove-unused-var31 --> (
 
 
 1
)
pass_clang :: remove-unused-function124 --> (
  foo() {   int *p = malloc(sizeof(int));   free(p);   free(p); }
 
 0
)
pass_clang :: remove-pointer60 --> (
 
 
 1
)
pass_balanced :: curly325 --> (
 
 
 1
)
pass_clex :: rm-toks-5109 --> (
  foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p); }   free(p); } main() {}   free(p); } main() {}   free(p); } main() {}   free(p); } main() {} main() {} main() {} main() {} main() {} main() {} main() {}
 
 0
)
pass_balanced :: curly-only40 --> (
   void foo() {          }             if (r>10){         	}              int main() {          }              int main() {          }
 
 0
)
pass_clang :: simplify-nested-class95 --> (
 
 
 1
)
pass_clang :: instantiate-template-type-param-to-int90 --> (
 
 
 1
)
pass_clang :: remove-base-class132 --> (
 
 
 1
)
pass_clang :: remove-enum-member-value83 --> (
 
 
 1
)
pass_balanced :: parens-only76 --> (
    foo() {             int * p = malloc(  sizeof(int));             int * p = malloc(  sizeof(int));              free(p);             free(p);               main() {
 
 0
)
pass_balanced :: curly-only115 --> (
  foo() { } foo() { main() {}
 
 0
)
pass_clang :: combine-global-var152 --> (
 
 
 1
)
pass_clang :: remove-unused-var84 --> (
 
 
 1
)
pass_lines :: 09 --> (
    int main() {    foo();    return 0; } void foo() {    int * p = (int *)malloc(10 * sizeof(int));    int r = rand() % 10;    if (r>10){       free(p);   	}    free(p);    printf("Done!\n"); }   int main() {    foo();    return 0; }   int main() {    foo();    return 0; } void foo() {    int * p = (int *)malloc(10 * sizeof(int));    int r = rand() % 10;    if (r>10){       free(p);   	}    free(p);    printf("Done!\n"); } void foo() {    int * p = (int *)malloc(10 * sizeof(int));    int r = rand() % 10;    if (r>10){       free(p);   	}    free(p);    printf("Done!\n"); } void foo() {    int * p = (int *)malloc(10 * sizeof(int));    int r = rand() % 10;    if (r>10){       free(p);   	}    free(p);    printf("Done!\n"); }    int main() {    foo();    return 0; } void foo() {    int * p = (int *)malloc(10 * sizeof(int));    int r = rand() % 10;    if (r>10){       free(p);   	}    free(p);    printf("Done!\n"); }    int main() {    foo();    return 0; }    int main() {    foo();    return 0; } void foo() {    int * p = (int *)malloc(10 * sizeof(int));    int r = rand() % 10;    if (r>10){       free(p);   	}    free(p);    printf("Done!\n"); } void foo() {    int * p = (int *)malloc(10 * sizeof(int));    int r = rand() % 10;    if (r>10){       free(p);   	}    free(p);    printf("Done!\n"); }
 
 0
)
pass_lines :: 08 --> (
  void foo() {    int * p = (int *)malloc(10 * sizeof(int));    int r = rand() % 10;    if (r>10){       free(p);   	}    free(p);    printf("Done!\n"); }  int main() {    foo();    return 0; }  void foo() {    int * p = (int *)malloc(10 * sizeof(int)); }     return 0;    foo(); void foo() {    int * p = (int *)malloc(10 * sizeof(int));    int r = rand() % 10;    if (r>10){       free(p);   	}    free(p);    printf("Done!\n"); }   int main() {    foo();    return 0; } void foo() {    int * p = (int *)malloc(10 * sizeof(int));    int r = rand() % 10;    if (r>10){       free(p);   	}    free(p);    printf("Done!\n"); }   int main() {    foo();    return 0; }   int main() {    foo();    return 0; } void foo() {    int * p = (int *)malloc(10 * sizeof(int));    int r = rand() % 10;    if (r>10){       free(p);   	}    free(p);    printf("Done!\n"); } void foo() {    int * p = (int *)malloc(10 * sizeof(int));    int r = rand() % 10;    if (r>10){       free(p);   	}    free(p);    printf("Done!\n"); }
 
 0
)
pass_clang :: remove-pointer-pairs61 --> (
 
 
 1
)
pass_clang :: replace-class-with-base-template-spec94 --> (
 
 
 1
)
pass_clang :: replace-dependent-name64 --> (
 
 
 1
)
pass_lines :: 018 --> (
  void foo() {          int * p = (int *)malloc(10 * sizeof(int));          int r = rand() % 10;          if (r>10){           free(p);       	}          free(p);       }          int main() {       } void foo() {          int * p = (int *)malloc(10 * sizeof(int));       }          int main() {       }          free(p);       	}           free(p); void foo() {          int * p = (int *)malloc(10 * sizeof(int));          int r = rand() % 10;          if (r>10){           free(p);       	}          free(p);       }           int main() {       } void foo() {          int * p = (int *)malloc(10 * sizeof(int));          int r = rand() % 10;          if (r>10){           free(p);       	}          free(p);       }           int main() {       }           int main() {       } void foo() {          int * p = (int *)malloc(10 * sizeof(int));          int r = rand() % 10;          if (r>10){           free(p);       	}          free(p);       } void foo() {          int * p = (int *)malloc(10 * sizeof(int));          int r = rand() % 10;          if (r>10){           free(p);       	}          free(p);       }
 
 0
)
pass_clex :: rm-tok-pattern-471 --> (
   void foo() {  void foo() {  void foo() {  void foo() {  void foo() {  void foo() {  void foo() {  void foo() {  void foo() {  void foo() {  void foo() {  void foo() {  void foo() {  void foo() {  void foo() {  void foo() {  void foo() {   foo() {   foo() {   foo() {   foo() {   foo() {   foo() {   foo() {   foo() {   foo() {   foo() {   foo() {   foo() {   foo() {             int * p = malloc(10 * sizeof(int));   foo() {             int * p = malloc(10 * sizeof(int));   foo() {             int * p = malloc(10 * sizeof(int));   foo() {             int * p = malloc(10 * sizeof(int));   foo() {   foo() {   foo() {             int * p = malloc(10 * sizeof(int));   foo() {             int * p = malloc(10 * sizeof(int));   foo() {             int * p = malloc(10 * sizeof(int));   foo() {             int * p = malloc(10 * sizeof(int));   foo() {             int * p = malloc(10 * sizeof(int));   foo() {             int * p = malloc(10 * sizeof(int));   foo() {   foo() {             int * p = malloc(10 * sizeof(int));   foo() {             int * p = malloc(10 * sizeof(int));   foo() {             int * p = malloc(10 * sizeof(int));   foo() {             int * p = malloc(10 * sizeof(int));   foo() {             int * p = malloc(10 * sizeof(int));   foo() {             int * p = malloc(10 * sizeof(int));   foo() {             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(  sizeof(int));             int * p = malloc(  sizeof(int));             int * p = malloc(  sizeof(int));             int * p = malloc(  sizeof(int));             int * p = malloc(  sizeof(int));             int * p = malloc(  sizeof(int));             int * p = malloc(  sizeof(int));             int * p = malloc(  sizeof(int));             int * p = malloc(  sizeof(int));             int * p = malloc(  sizeof(int));             int * p = malloc(  sizeof(int));             int * p = malloc(  sizeof(int));             int * p = malloc(  sizeof(int));             int * p = malloc(  sizeof(int));             int * p = malloc(  sizeof(int));             int * p = malloc(  sizeof(int));             int * p = malloc(  sizeof(int));             int * p = malloc(  sizeof(int));             int * p = malloc(  sizeof(int));             int * p = malloc(  sizeof(int));             int * p = malloc(  sizeof(int));             int * p = malloc(  sizeof(int));             int * p = malloc(  sizeof(int));             int * p = malloc(  sizeof(int));             int * p = malloc(  sizeof(int));             int * p = malloc(  sizeof(int));             int * p = malloc(  sizeof(int));             int * p = malloc(  sizeof(int));             int r = rand() ;             int * p = malloc(  sizeof(int));             int r = rand() ;             int * p = malloc(  sizeof(int));             int r = rand() ;             int * p = malloc(  sizeof(int));             int r = rand() ;             int * p = malloc(  sizeof(int));             int * p = malloc(  sizeof(int));             int * p = malloc(  sizeof(int));             int r = rand() ;             int * p = malloc(  sizeof(int));             int r = rand() ;             int * p = malloc(  sizeof(int));             int r = rand() ;             int * p = malloc(  sizeof(int));             int r = rand() ;             int * p = malloc(  sizeof(int));             int r = rand() ;             int * p = malloc(  sizeof(int));             int r = rand() ;             int * p = malloc(  sizeof(int));             int * p = malloc(  sizeof(int));             int r = rand() ;             int * p = malloc(  sizeof(int));             int r = rand() ;             int * p = malloc(  sizeof(int));             int r = rand() ;             int * p = malloc(  sizeof(int));             int r = rand() ;             int * p = malloc(  sizeof(int));             int r = rand() ;             int * p = malloc(  sizeof(int));             int r = rand() ;             int * p = malloc(  sizeof(int));             int r = rand() ;             int r = rand() ;             int r = rand() ;             int r = rand() ;             int r = rand() ;             int r = rand() ;             int r = rand() ;             int r = rand() ;             int r = rand() ;             int r = rand() ;             int r = rand() ;             int r = rand() ;             int r = rand() ;             int r = rand() ;             int r = rand() ;             int r = rand() ;                rand() ;                rand() ;                rand() ;                rand() ;                rand() ;                rand() ;                rand() ;                rand() ;                rand() ;                rand() ;              free(p);                rand() ;              free(p);                 ;              free(p);                 ;              free(p);                 ;              free(p);                 ;              free(p);                 ;              free(p);              free(p);              free(p);              free(p);              free(p);              free(p);              free(p);              free(p);              free(p);              free(p);              free(p);              free(p);              free(p);              free(p);              free(p);              free(p);              free(p);              free(p);              free(p);              free(p);              free(p);              free(p);             free(p);              free(p);             free(p);              free(p);             free(p);              free(p);             free(p);              free(p);              free(p);              free(p);             free(p);              free(p);             free(p);              free(p);             free(p);              free(p);             free(p);              free(p);             free(p);              free(p);             free(p);              free(p);              free(p);             free(p);              free(p);             free(p);              free(p);             free(p);              free(p);             free(p);              free(p);             free(p);              free(p);             free(p);              free(p);             free(p);             free(p);             free(p);             free(p);             free(p);             free(p);             free(p);             free(p);             free(p);             free(p);             free(p);             free(p);             free(p);             free(p);             free(p);             free(p);             free(p);             free(p);             free(p);             free(p);             free(p);             free(p);          }             free(p);          }             free(p);          }             free(p);          }             free(p);             free(p);             free(p);          }             free(p);          }             free(p);              int main() {             free(p);              int main() {             free(p);          }              int main() {             free(p);          }              int main() {             free(p);             free(p);          }             free(p);              int main() {             free(p);          }              int main() {             free(p);              int main() {             free(p);          }              int main() {             free(p);              int main() {             free(p);          }              int main() {          }          }              int main() {          }              int main() {          }              int main() {          }              int main() {          }              int main() {          }              int main() {          }              int main() {              int main() {              int main() {              int main() {              int main() {              int main() {              int main() {              int main() {              int main() {              int main() {              int main() {              int main() {              int main() {              int main() {              int main() {              int main() {              int main() {               main() {               main() {               main() {               main() {               main() {               main() {               main() {               main() {               main() {               main() {               main() {               main() {               main() {          }               main() {          }               main() {          }               main() {          }               main() {               main() {               main() {          }               main() {          }               main() {               main() {               main() {          }               main() {          }               main() {               main() {          }               main() {               main() {          }               main() {               main() {          }               main() {               main() {          }          }          }          }          }          }          }          }          }
 
 0
)
pass_unifdef :: 065 --> (
 
 
 1
)
pass_clang :: rename-param148 --> (
 
 
 1
)
pass_clang :: simplify-recursive-template-instantiation138 --> (
 
 
 1
)
pass_clang :: replace-dependent-typedef88 --> (
 
 
 1
)
pass_lines :: 1139 --> (
    int *p = malloc(sizeof(int));   free(p);   free(p); main() {} foo() {   int *p = malloc(sizeof(int));   free(p);   free(p); } main() {}   free(p); } main() {} foo() {   int *p = malloc(sizeof(int));   free(p); foo() {   int *p = malloc(sizeof(int));   free(p); main() {} }   free(p);   free(p); foo() {    int *p = malloc(sizeof(int));    free(p);    free(p);  }  main() { } foo() {    int *p = malloc(sizeof(int));    free(p);    free(p);  }  main() { }  }  main() { }    int *p = malloc(sizeof(int));    free(p);    free(p); foo() {    int *p = malloc(sizeof(int));    free(p); }  main() {  }    free(p);    free(p);    int *p = malloc(sizeof(int)); foo() { foo() {
 
 0
)
pass_special :: b33 --> (
 
 
 1
)
pass_lines :: 220 --> (
            int * p = (int *)malloc(10 * sizeof(int));           int r = rand() % 10;           if (r>10){           free(p);       	}           free(p);        }            int main() {        } void foo() {           int * p = (int *)malloc(10 * sizeof(int));           int r = rand() % 10;           if (r>10){           free(p);       	}           free(p);        }            int main() {        }           if (r>10){           free(p);       	}           free(p);        }            int main() {        } void foo() {           int * p = (int *)malloc(10 * sizeof(int));           int r = rand() % 10;           if (r>10){           free(p);       	}           free(p);            int main() {        }           free(p);        }           int r = rand() % 10;           if (r>10){           free(p);       	} void foo() {           int * p = (int *)malloc(10 * sizeof(int)); void foo() {           int * p = (int *)malloc(10 * sizeof(int));        }            int main() {        }           free(p); void foo() {            int * p = (int *)malloc(10 * sizeof(int));            int r = rand() % 10;            if (r>10){            free(p);        	}            free(p);         }             int main() {         } void foo() {            int * p = (int *)malloc(10 * sizeof(int));            int r = rand() % 10;            if (r>10){            free(p);        	}            free(p);         }             int main() {         }        	}            free(p);         }             int main() {         } void foo() {            int * p = (int *)malloc(10 * sizeof(int));            int r = rand() % 10;            if (r>10){            free(p); void foo() {            int * p = (int *)malloc(10 * sizeof(int));            int r = rand() % 10;            if (r>10){            free(p);             int main() {         }            free(p);         }        	}            free(p);            int r = rand() % 10;            if (r>10){ void foo() {            int * p = (int *)malloc(10 * sizeof(int)); void foo() {            int * p = (int *)malloc(10 * sizeof(int));         }             int main() {         }            free(p);        	}            free(p);            if (r>10){            int r = rand() % 10;            int * p = (int *)malloc(10 * sizeof(int)); void foo() { void foo() {
 
 0
)
pass_clang :: remove-array137 --> (
 
 
 1
)
pass_clex :: rm-toks-1568 --> (
   void foo() {             int * p = malloc(10 * sizeof(int));  void foo() {             int * p = malloc(10 * sizeof(int));  void foo() {             int * p = malloc(10 * sizeof(int));  void foo() {             int * p = malloc(10 * sizeof(int));  void foo() {             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             r>10;             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             r>10;             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             r>10;             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             r>10;             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             r>10;                           free(p);             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             r>10;                           free(p);             int r = rand() % 10;             r>10;                           free(p);             int r = rand() % 10;             r>10;                           free(p);             int r = rand() % 10;             r>10;                           free(p);             int r = rand() % 10;             r>10;                           free(p);         	             free(p);             int r = rand() % 10;             r>10;                           free(p);         	             free(p);             int r = rand() % 10;             r>10;                           free(p);         	             free(p);             int r = rand() % 10;             r>10;                           free(p);         	             free(p);             int r = rand() % 10;             r>10;                           free(p);         	             free(p);             int r = rand() % 10;             r>10;                           free(p);         	             free(p);          }             r>10;                           free(p);         	             free(p);          }              int main() {             r>10;                           free(p);         	             free(p);          }              int main() {             r>10;                           free(p);         	             free(p);          }              int main() {             r>10;                           free(p);         	             free(p);          }              int main() {              free(p);         	             free(p);          }              int main() {              free(p);         	             free(p);          }              int main() {          }              free(p);         	             free(p);          }              int main() {          }                free(p);         	             free(p);          }              int main() {          }                free(p);         	             free(p);          }              int main() {          }               free(p);          }              int main() {          }               free(p);          }              int main() {          }               free(p);          }              int main() {          }               free(p);          }              int main() {          }               free(p);          }              int main() {          }            }              int main() {          }                int main() {          }                int main() {          }                int main() {          }                int main() {          }                int main() {          }            }  
 
 0
)
pass_clang_binsrch :: remove-unused-function7 --> (
  void bar() {    printf("Done!\n"); }
 
 1
)
pass_balanced :: curly237 --> (
  void foo() {             int * p = (int *)malloc(10 * sizeof(int));             int r = rand() % 10;             if (r>10){             free(p);         	}             free(p);          } void foo() {             if (r>10){             free(p);         	} void foo() {              int main() {          }
 
 0
)
pass_clang :: template-arg-to-int91 --> (
 
 
 1
)
pass_balanced :: curly338 --> (
 
 
 1
)
pass_clang :: replace-undefined-function63 --> (
 
 
 1
)
pass_clang_binsrch :: remove-unused-function17 --> (
  void foo() {          int * p = (int *)malloc(10 * sizeof(int));          int r = rand() % 10;          if (r>10){           free(p);       	}          free(p);       }
 
 0
)
pass_clang :: reduce-pointer-level120 --> (
    int *p = malloc(sizeof(int));   free(p);   free(p);
 
 0
)
pass_clang_binsrch :: replace-function-def-with-decl6 --> (
  void foo() {    int * p = (int *)malloc(10 * sizeof(int));    int r = rand() % 10;    if (r>10){       free(p);   	}    free(p);    printf("Done!\n"); } void bar() {    printf("Done!\n"); } int main() {    foo();    return 0; } 
 
 0
)
pass_clang :: callexpr-to-value122 --> (
    int *p = malloc(sizeof(int));   free(p);   free(p);
 
 0
)
pass_clex :: rm-toks-12106 --> (
  foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   free(p);   int *p = malloc(sizeof(int));   free(p);   free(p);   int *p = malloc(sizeof(int));   free(p);   free(p);   int *p = malloc(sizeof(int));   free(p);   free(p);   int *p = malloc(sizeof(int));   free(p);   free(p);   int *p = malloc(sizeof(int));   free(p);   free(p); }   int *p = malloc(sizeof(int));   free(p);   free(p); } main() {}   free(p);   free(p); } main() {}   free(p);   free(p); } main() {}   free(p);   free(p); } main() {}   free(p);   free(p); } main() {}   free(p);   free(p); } main() {}   free(p); } main() {}   free(p); } main() {}   free(p); } main() {}   free(p); } main() {}   free(p); } main() {} } main() {} main() {} main() {} main() {} main() {} main() {}
 
 0
)
pass_clang :: replace-simple-typedef56 --> (
 
 
 1
)
pass_clex :: rm-toks-14142 --> (
  foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int));   free(p); foo() {   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   free(p);   int *p = malloc(sizeof(int));   free(p);   free(p);   int *p = malloc(sizeof(int));   free(p);   free(p);   int *p = malloc(sizeof(int));   free(p);   free(p);   int *p = malloc(sizeof(int));   free(p);   free(p);   int *p = malloc(sizeof(int));   free(p);   free(p); }   int *p = malloc(sizeof(int));   free(p);   free(p); } main() {}   int *p = malloc(sizeof(int));   free(p);   free(p); } main() {}   int *p = malloc(sizeof(int));   free(p);   free(p); } main() {}   free(p);   free(p); } main() {}   free(p);   free(p); } main() {}   free(p);   free(p); } main() {}   free(p);   free(p); } main() {}   free(p);   free(p); } main() {}   free(p); } main() {}   free(p); } main() {}   free(p); } main() {}   free(p); } main() {}   free(p); } main() {} } main() {} main() {} main() {} main() {} main() {} main() {}
 
 0
)
pass_special :: a32 --> (
 
 
 1
)
pass_balanced :: curly3113 --> (
 
 
 1
)
pass_clang :: remove-unused-outer-class135 --> (
 
 
 1
)
pass_clex :: rm-toks-670 --> (
   void foo() {             int * p = malloc(10 * sizeof(int));  void foo() {             int * p = malloc(10 * sizeof(int));  void foo() {             int * p = malloc(10 * sizeof(int));  void foo() {             int * p = malloc(10 * sizeof(int));  void foo() {             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             int r = rand() % 10;             int r = rand() % 10;             int r = rand() % 10;             int r = rand() % 10;             r>10;             int r = rand() % 10;             r>10;             int r = rand() % 10;             r>10;             int r = rand() % 10;             r>10;             int r = rand() % 10;             r>10;                           free(p);             int r = rand() % 10;             r>10;                           free(p);             r>10;                           free(p);             r>10;                           free(p);             int r = rand() ;                           free(p);         	             free(p);              free(p);         	             free(p);              free(p);         	             free(p);              free(p);         	             free(p);              free(p);         	             free(p);              free(p);         	             free(p);          }             free(p);          }              int main() {             free(p);          }              int main() {             free(p);          }              int main() {             free(p);          }              int main() {             free(p);          }              int main() {              int main() {          }              int main() {          }                int main() {          }                int main() {          }                int main() {          }                int main() {          }            }  
 
 0
)
pass_lines :: 099 --> (
    foo() {             int * p = malloc(  sizeof(int));                 ;                           free(p);         	             free(p);          }               main() {          }     foo() {             int * p = malloc(  sizeof(int));            }               main() {          }             free(p);         	   foo() {             int * p = malloc(  sizeof(int));                 ;                           free(p);         	             free(p);          }                main() {          }   foo() {             int * p = malloc(  sizeof(int));                 ;                           free(p);         	             free(p);          }                main() {          }                main() {          }   foo() {             int * p = malloc(  sizeof(int));                 ;                           free(p);         	             free(p);          }   foo() {             int * p = malloc(  sizeof(int));                 ;                           free(p);         	             free(p);          }
 
 0
)
pass_ternary :: b36 --> (
 
 
 1
)
pass_special :: c34 --> (
 
 
 1
)
pass_clex :: rm-toks-2146 --> (
  foo() { foo() { foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p); }   free(p); } main() {} } main() {} main() {} main() {} main() {} main() {} main() {}
 
 0
)
pass_balanced :: curly224 --> (
  void foo() {             int * p = (int *)malloc(10 * sizeof(int));             int r = rand() % 10;             if (r>10){             free(p);         	}             free(p);          } void foo() {             if (r>10){             free(p);         	} void foo() {              int main() {          }
 
 0
)
pass_clang :: simplify-if53 --> (
              if (r>10)             free(p);
 
 1
)
pass_clang :: remove-unused-enum-member125 --> (
 
 
 1
)
pass_indent :: regular141 --> (
     int *p = malloc(sizeof(int));    free(p);    free(p);  }  main() {
 
 1
)
pass_balanced :: parens114 --> (
  foo() { foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int)); foo() {   free(p); foo() {   free(p); foo() { main() {}
 
 0
)
pass_clang :: replace-callexpr51 --> (
 
 
 1
)
pass_balanced :: curly73 --> (
    foo() {             int * p = malloc(  sizeof(int));                 ;                           free(p);         	             free(p);          }               main() {          }
 
 0
)
pass_clang :: remove-enum-member-value30 --> (
 
 
 1
)
pass_clex :: rm-toks-769 --> (
   void foo() {             int * p = malloc(10 * sizeof(int));  void foo() {             int * p = malloc(10 * sizeof(int));  void foo() {             int * p = malloc(10 * sizeof(int));  void foo() {             int * p = malloc(10 * sizeof(int));  void foo() {             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             int r = rand() % 10;             int r = rand() % 10;             int r = rand() % 10;             r>10;             int r = rand() % 10;             r>10;             int r = rand() % 10;             r>10;             int r = rand() % 10;             r>10;             int r = rand() % 10;             r>10;                           free(p);             int r = rand() % 10;             r>10;                           free(p);             int r = rand() % 10;             r>10;                           free(p);             r>10;                           free(p);             r>10;                           free(p);             r>10;                           free(p);         	             free(p);             r>10;                           free(p);         	             free(p);              free(p);         	             free(p);              free(p);         	             free(p);              free(p);         	             free(p);              free(p);         	             free(p);          }              free(p);         	             free(p);          }              int main() {             free(p);          }              int main() {             free(p);          }              int main() {             free(p);          }              int main() {             free(p);          }              int main() {             free(p);          }              int main() {          }          }              int main() {          }                int main() {          }                int main() {          }                int main() {          }                int main() {          }                int main() {          }            }  
 
 0
)
pass_clex :: rm-toks-11144 --> (
  foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   free(p);   int *p = malloc(sizeof(int));   free(p);   free(p);   int *p = malloc(sizeof(int));   free(p);   free(p);   int *p = malloc(sizeof(int));   free(p);   free(p);   int *p = malloc(sizeof(int));   free(p);   free(p);   int *p = malloc(sizeof(int));   free(p);   free(p); }   free(p);   free(p); } main() {}   free(p);   free(p); } main() {}   free(p);   free(p); } main() {}   free(p);   free(p); } main() {}   free(p);   free(p); } main() {}   free(p); } main() {}   free(p); } main() {}   free(p); } main() {}   free(p); } main() {}   free(p); } main() {} } main() {} main() {} main() {} main() {} main() {} main() {}
 
 0
)
pass_clang :: instantiate-template-type-param-to-int129 --> (
 
 
 1
)
pass_clang :: empty-struct-to-int136 --> (
 
 
 1
)
pass_comments :: 04 --> (
      //bar(); }
 
 1
)
pass_include_includes :: 035 --> (
 
 
 1
)
pass_clex :: rm-toks-7108 --> (
  foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   free(p);   int *p = malloc(sizeof(int));   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p); }   free(p);   free(p); } main() {}   free(p); } main() {}   free(p); } main() {}   free(p); } main() {}   free(p); } main() {}   free(p); } main() {} } main() {} main() {} main() {} main() {} main() {} main() {}
 
 0
)
pass_clang :: move-global-var155 --> (
 
 
 1
)
pass_balanced :: parens75 --> (
    foo() {             int * p = malloc(  sizeof(int));             int * p = malloc(  sizeof(int));              free(p);             free(p);               main() {
 
 0
)
pass_clang :: simplify-comma-expr127 --> (
 
 
 1
)
pass_clang :: instantiate-template-param57 --> (
 
 
 1
)
pass_clang :: param-to-global117 --> (
 
 
 1
)
pass_clang :: simple-inliner47 --> (
 
 
 1
)
pass_clex :: rm-tok-pattern-4112 --> (
  foo() { foo() { foo() { foo() { foo() { foo() { foo() { foo() { foo() { foo() { foo() { foo() { foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int)); foo() { foo() { foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int)); foo() { foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p); }   free(p); }   free(p); }   free(p); }   free(p);   free(p);   free(p); }   free(p); }   free(p); main() {}   free(p); main() {}   free(p); } main() {}   free(p); } main() {}   free(p);   free(p); }   free(p); main() {}   free(p); } main() {}   free(p); main() {}   free(p); } main() {}   free(p); main() {}   free(p); } main() {} } } main() {} } main() {} } main() {} } main() {} } main() {} } main() {} } main() {} main() {} main() {} main() {} main() {} main() {} main() {} main() {} main() {} main() {} main() {} main() {} main() {} main() {} main() {} main() {} main() {} main() {} main() {} main() {} main() {} main() {} main() {} main() {} main() {} main() {} main() {} main() {} main() {} main() {} main() {} main() {} main() {} main() {} main() {} main() {} main() {} main() {} main() {} main() {} main() {}
 
 0
)
pass_clang :: return-void80 --> (
 
 
 1
)
pass_clang :: simplify-struct-union-decl154 --> (
 
 
 1
)
pass_clang :: remove-array97 --> (
 
 
 1
)
pass_clang :: remove-unused-enum-member29 --> (
 
 
 1
)
pass_clang :: union-to-struct46 --> (
 
 
 1
)
pass_ints :: c66 --> (
 
 
 1
)
pass_clang :: unify-function-decl156 --> (
 
 
 1
)
pass_clex :: rm-toks-3110 --> (
  foo() { foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p);   free(p); }   free(p); } main() {}   free(p); } main() {} } main() {} main() {} main() {} main() {} main() {} main() {}
 
 0
)
pass_clang :: replace-class-with-base-template-spec133 --> (
 
 
 1
)
pass_ints :: e103 --> (
 
 
 1
)
pass_clang :: simplify-struct62 --> (
 
 
 1
)
pass_balanced :: parens-only116 --> (
  foo() { foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int)); foo() {   free(p); foo() {   free(p); foo() { main() {}
 
 0
)
pass_clang :: remove-nested-function118 --> (
 
 
 1
)
pass_special :: c101 --> (
 
 
 1
)
pass_clang :: simplify-callexpr28 --> (
              int * p = (int *)malloc(10 * sizeof(int));             int r = rand() % 10;             free(p);             free(p);
 
 0
)
pass_balanced :: angles-only77 --> (
 
 
 1
)
pass_blank :: 05 --> (
         
 
 1
)
pass_clang :: rename-var149 --> (
 
 
 1
)
pass_clex :: rm-toks-1667 --> (
   void foo() {             int * p = malloc(10 * sizeof(int));  void foo() {             int * p = malloc(10 * sizeof(int));  void foo() {             int * p = malloc(10 * sizeof(int));  void foo() {             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;  void foo() {             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             r>10;             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             r>10;             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             r>10;             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             r>10;             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             r>10;                           free(p);             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             r>10;                           free(p);             int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             r>10;                           free(p);             int r = rand() % 10;             r>10;                           free(p);             int r = rand() % 10;             r>10;                           free(p);             int r = rand() % 10;             r>10;                           free(p);         	             free(p);             int r = rand() % 10;             r>10;                           free(p);         	             free(p);             int r = rand() % 10;             r>10;                           free(p);         	             free(p);             int r = rand() % 10;             r>10;                           free(p);         	             free(p);             int r = rand() % 10;             r>10;                           free(p);         	             free(p);             int r = rand() % 10;             r>10;                           free(p);         	             free(p);          }             int r = rand() % 10;             r>10;                           free(p);         	             free(p);          }              int main() {             r>10;                           free(p);         	             free(p);          }              int main() {             r>10;                           free(p);         	             free(p);          }              int main() {             r>10;                           free(p);         	             free(p);          }              int main() {             r>10;                           free(p);         	             free(p);          }              int main() {              free(p);         	             free(p);          }              int main() {          }              free(p);         	             free(p);          }              int main() {          }                free(p);         	             free(p);          }              int main() {          }                free(p);         	             free(p);          }              int main() {          }                free(p);         	             free(p);          }              int main() {          }               free(p);          }              int main() {          }               free(p);          }              int main() {          }               free(p);          }              int main() {          }               free(p);          }              int main() {          }               free(p);          }              int main() {          }            }              int main() {          }                int main() {          }                int main() {          }                int main() {          }                int main() {          }                int main() {          }            }  
 
 0
)
pass_clang :: simplify-struct98 --> (
 
 
 1
)
pass_clex :: rm-toks-9107 --> (
  foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   free(p);   int *p = malloc(sizeof(int));   free(p);   free(p);   int *p = malloc(sizeof(int));   free(p);   free(p);   int *p = malloc(sizeof(int));   free(p);   free(p);   free(p);   free(p);   free(p);   free(p); }   free(p);   free(p); } main() {}   free(p);   free(p); } main() {}   free(p);   free(p); } main() {}   free(p); } main() {}   free(p); } main() {}   free(p); } main() {}   free(p); } main() {}   free(p); } main() {} } main() {} main() {} main() {} main() {} main() {} main() {}
 
 0
)
pass_clang :: simplify-comma-expr55 --> (
 
 
 1
)
pass_clex :: rm-toks-13105 --> (
  foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int)); foo() {   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   int *p = malloc(sizeof(int));   free(p);   free(p);   int *p = malloc(sizeof(int));   free(p);   free(p);   int *p = malloc(sizeof(int));   free(p);   free(p);   int *p = malloc(sizeof(int));   free(p);   free(p);   int *p = malloc(sizeof(int));   free(p);   free(p);   int *p = malloc(sizeof(int));   free(p);   free(p); }   int *p = malloc(sizeof(int));   free(p);   free(p); } main() {}   int *p = malloc(sizeof(int));   free(p);   free(p); } main() {}   free(p);   free(p); } main() {}   free(p);   free(p); } main() {}   free(p);   free(p); } main() {}   free(p);   free(p); } main() {}   free(p);   free(p); } main() {}   free(p); } main() {}   free(p); } main() {}   free(p); } main() {}   free(p); } main() {}   free(p); } main() {} } main() {} main() {} main() {} main() {} main() {} main() {}
 
 0
)
pass_clang :: remove-unused-field89 --> (
 
 
 1
)
pass_clang :: callexpr-to-value50 --> (
              int * p = malloc(10 * sizeof(int));             int r = rand() % 10;             free(p);             free(p);
 
 0
)
