void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_01_vhx ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } }  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
static void uxbG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ;  WARNINGLINE fprintf ( stdout , data ) ; }  static void uxbB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } }  fprintf ( stdout , " %s\n " , data ) ; } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_01_uxb ( ) { uxbG2B ( ) ; uxbB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_02_llr ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void hvjB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void hvjB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void hvjG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void hvjG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  strcpy ( data , " STRING " ) ; } if ( N ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_02_hvj ( ) { hvjB2G1 ( ) ; hvjB2G2 ( ) ; hvjG2B1 ( ) ; hvjG2B2 ( ) ; } CWE134 goodpositive
static void zjbB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void zjbB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void zjbG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N ) {  fprintf ( stdout , data ) ; } }  static void zjbG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  strcpy ( data , " STRING " ) ; } if ( N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_02_zjb ( ) { zjbB2G1 ( ) ; zjbB2G2 ( ) ; zjbG2B1 ( ) ; zjbG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_03_jff ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void hgiB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void hgiB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void hgiG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void hgiG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) {  strcpy ( data , " STRING " ) ; } if ( N = = N ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_03_hgi ( ) { hgiB2G1 ( ) ; hgiB2G2 ( ) ; hgiG2B1 ( ) ; hgiG2B2 ( ) ; } CWE134 goodpositive
static void vgsB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void vgsB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void vgsG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N = = N ) {  fprintf ( stdout , data ) ; } }  static void vgsG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) {  strcpy ( data , " STRING " ) ; } if ( N = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_03_vgs ( ) { vgsB2G1 ( ) ; vgsB2G2 ( ) ; vgsG2B1 ( ) ; vgsG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_04_czo ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_TRUE ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void zoqB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void zoqB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_TRUE ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void zoqG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void zoqG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_04_zoq ( ) { zoqB2G1 ( ) ; zoqB2G2 ( ) ; zoqG2B1 ( ) ; zoqG2B2 ( ) ; } CWE134 goodpositive
static void txjB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void txjB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_TRUE ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void txjG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) {  fprintf ( stdout , data ) ; } }  static void txjG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_04_txj ( ) { txjB2G1 ( ) ; txjB2G2 ( ) ; txjG2B1 ( ) ; txjG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_05_hdk ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticTrue ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void raoB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void raoB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticTrue ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void raoG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void raoG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_05_rao ( ) { raoB2G1 ( ) ; raoB2G2 ( ) ; raoG2B1 ( ) ; raoG2B2 ( ) ; } CWE134 goodpositive
static void xpzB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void xpzB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticTrue ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void xpzG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) {  fprintf ( stdout , data ) ; } }  static void xpzG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_05_xpz ( ) { xpzB2G1 ( ) ; xpzB2G2 ( ) ; xpzG2B1 ( ) ; xpzG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_06_xfw ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_FIVE = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void xnaB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void xnaB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_FIVE = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void xnaG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void xnaG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_06_xna ( ) { xnaB2G1 ( ) ; xnaB2G2 ( ) ; xnaG2B1 ( ) ; xnaG2B2 ( ) ; } CWE134 goodpositive
static void vbxB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void vbxB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_FIVE = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void vbxG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) {  fprintf ( stdout , data ) ; } }  static void vbxG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_06_vbx ( ) { vbxB2G1 ( ) ; vbxB2G2 ( ) ; vbxG2B1 ( ) ; vbxG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_07_yty ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticFive = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void rtqB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void rtqB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticFive = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void rtqG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void rtqG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_07_rtq ( ) { rtqB2G1 ( ) ; rtqB2G2 ( ) ; rtqG2B1 ( ) ; rtqG2B2 ( ) ; } CWE134 goodpositive
static void sedB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void sedB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticFive = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void sedG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) {  fprintf ( stdout , data ) ; } }  static void sedG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_07_sed ( ) { sedB2G1 ( ) ; sedB2G2 ( ) ; sedG2B1 ( ) ; sedG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_08_qsy ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticReturnsTrue ( ) ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void ksaB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void ksaB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticReturnsTrue ( ) ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void ksaG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void ksaG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_08_ksa ( ) { ksaB2G1 ( ) ; ksaB2G2 ( ) ; ksaG2B1 ( ) ; ksaG2B2 ( ) ; } CWE134 goodpositive
static void anaB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void anaB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticReturnsTrue ( ) ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void anaG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) {  fprintf ( stdout , data ) ; } }  static void anaG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_08_ana ( ) { anaB2G1 ( ) ; anaB2G2 ( ) ; anaG2B1 ( ) ; anaG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_09_pme ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_TRUE ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void goqB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void goqB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_TRUE ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void goqG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void goqG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_09_goq ( ) { goqB2G1 ( ) ; goqB2G2 ( ) ; goqG2B1 ( ) ; goqG2B2 ( ) ; } CWE134 goodpositive
static void uegB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void uegB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_TRUE ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void uegG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) {  fprintf ( stdout , data ) ; } }  static void uegG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_09_ueg ( ) { uegB2G1 ( ) ; uegB2G2 ( ) ; uegG2B1 ( ) ; uegG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_10_eqh ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalTrue ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void zaeB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void zaeB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalTrue ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void zaeG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void zaeG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_10_zae ( ) { zaeB2G1 ( ) ; zaeB2G2 ( ) ; zaeG2B1 ( ) ; zaeG2B2 ( ) ; } CWE134 goodpositive
static void satB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void satB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalTrue ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void satG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) {  fprintf ( stdout , data ) ; } }  static void satG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_10_sat ( ) { satB2G1 ( ) ; satB2G2 ( ) ; satG2B1 ( ) ; satG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_11_erm ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalReturnsTrue ( ) ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void qhvB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void qhvB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalReturnsTrue ( ) ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void qhvG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void qhvG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_11_qhv ( ) { qhvB2G1 ( ) ; qhvB2G2 ( ) ; qhvG2B1 ( ) ; qhvG2B2 ( ) ; } CWE134 goodpositive
static void nviB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void nviB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalReturnsTrue ( ) ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void nviG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) {  fprintf ( stdout , data ) ; } }  static void nviG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_11_nvi ( ) { nviB2G1 ( ) ; nviB2G2 ( ) ; nviG2B1 ( ) ; nviG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_12_uau ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) {  WARNINGLINE fprintf ( stdout , data ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } } CWE134 badpositive
static void mpjB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } else { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalReturnsTrueOrFalse ( ) ) {  fprintf ( stdout , " %s\n " , data ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void mpjG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) {  strcpy ( data , " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) {  WARNINGLINE fprintf ( stdout , data ) ; } else {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_12_mpj ( ) { mpjB2G ( ) ; mpjG2B ( ) ; } CWE134 goodpositive
static void ffsB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } else { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalReturnsTrueOrFalse ( ) ) {  fprintf ( stdout , " %s\n " , data ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void ffsG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) {  strcpy ( data , " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) {  fprintf ( stdout , data ) ; } else {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_12_ffs ( ) { ffsB2G ( ) ; ffsG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_13_xwb ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_FIVE = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void hpkB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void hpkB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_FIVE = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void hpkG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void hpkG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_13_hpk ( ) { hpkB2G1 ( ) ; hpkB2G2 ( ) ; hpkG2B1 ( ) ; hpkG2B2 ( ) ; } CWE134 goodpositive
static void dqkB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void dqkB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_FIVE = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void dqkG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) {  fprintf ( stdout , data ) ; } }  static void dqkG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_13_dqk ( ) { dqkB2G1 ( ) ; dqkB2G2 ( ) ; dqkG2B1 ( ) ; dqkG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_14_gjq ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalFive = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void ryuB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void ryuB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalFive = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void ryuG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void ryuG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_14_ryu ( ) { ryuB2G1 ( ) ; ryuB2G2 ( ) ; ryuG2B1 ( ) ; ryuG2B2 ( ) ; } CWE134 goodpositive
static void watB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void watB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalFive = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void watG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) {  fprintf ( stdout , data ) ; } }  static void watG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_14_wat ( ) { watB2G1 ( ) ; watB2G2 ( ) ; watG2B1 ( ) ; watG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_15_mfd ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  WARNINGLINE fprintf ( stdout , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } } CWE134 badpositive
static void nqrB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printLine ( " STRING " ) ; break ; default:  fprintf ( stdout , " %s\n " , data ) ; break ; } }  static void nqrB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  fprintf ( stdout , " %s\n " , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } }  static void nqrG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  printLine ( " STRING " ) ; break ; default:  strcpy ( data , " STRING " ) ; break ; } switch ( N ) { case 7:  WARNINGLINE fprintf ( stdout , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } }  static void nqrG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  strcpy ( data , " STRING " ) ; break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  fprintf ( stdout , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_15_nqr ( ) { nqrB2G1 ( ) ; nqrB2G2 ( ) ; nqrG2B1 ( ) ; nqrG2B2 ( ) ; } CWE134 goodpositive
static void aobB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printLine ( " STRING " ) ; break ; default:  fprintf ( stdout , " %s\n " , data ) ; break ; } }  static void aobB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  fprintf ( stdout , " %s\n " , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } }  static void aobG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  printLine ( " STRING " ) ; break ; default:  strcpy ( data , " STRING " ) ; break ; } switch ( N ) { case 7:  fprintf ( stdout , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } }  static void aobG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  strcpy ( data , " STRING " ) ; break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  WARNINGLINE fprintf ( stdout , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_15_aob ( ) { aobB2G1 ( ) ; aobB2G2 ( ) ; aobG2B1 ( ) ; aobG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_16_rjr ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; } while ( N ) {  WARNINGLINE fprintf ( stdout , data ) ; break ; } } CWE134 badpositive
static void ogcB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; } while ( N ) {  fprintf ( stdout , " %s\n " , data ) ; break ; } }  static void ogcG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) {  strcpy ( data , " STRING " ) ; break ; } while ( N ) {  WARNINGLINE fprintf ( stdout , data ) ; break ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_16_ogc ( ) { ogcB2G ( ) ; ogcG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_17_aay ( ) { int i , j ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( i = N ; i < N ; i + + ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } for ( j = N ; j < N ; j + + ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void pnhB2G ( ) { int i , k ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( i = N ; i < N ; i + + ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } for ( k = N ; k < N ; k + + ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void pnhG2B ( ) { int h , j ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( h = N ; h < N ; h + + ) {  strcpy ( data , " STRING " ) ; } for ( j = N ; j < N ; j + + ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_17_pnh ( ) { pnhB2G ( ) ; pnhG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_18_giz ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source: { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } goto sink ; sink:  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
static void aubB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source: { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } goto sink ; sink:  fprintf ( stdout , " %s\n " , data ) ; }  static void aubG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source:  strcpy ( data , " STRING " ) ; goto sink ; sink:  WARNINGLINE fprintf ( stdout , data ) ; } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_18_aub ( ) { aubB2G ( ) ; aubG2B ( ) ; } CWE134 goodpositive
static int vjnStatic = N ; static void vjnSink ( char * data ) { if ( vjnStatic ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_21_vjn ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } vjnStatic = N ;  vjnSink ( data ) ; } CWE134 badpositive
static int ezvB2G1Static = N ; static int ezvB2G2Static = N ; static int ezvG2BStatic = N ;  static void ezvB2G1Sink ( char * data ) { if ( ezvB2G1Static ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } } static void ezvB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } ezvB2G1Static = N ;  ezvB2G1Sink ( data ) ; }  static void ezvB2G2Sink ( char * data ) { if ( ezvB2G2Static ) {  fprintf ( stdout , " %s\n " , data ) ; } } static void ezvB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } ezvB2G2Static = N ;  ezvB2G2Sink ( data ) ; }  static void ezvG2BSink ( char * data ) { if ( ezvG2BStatic ) {  WARNINGLINE fprintf ( stdout , data ) ; } } static void ezvG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; ezvG2BStatic = N ;  ezvG2BSink ( data ) ; } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_21_ezv ( ) { ezvB2G1 ( ) ; ezvB2G2 ( ) ; ezvG2B ( ) ; } CWE134 goodpositive
extern int CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_22_scnGlobal ; void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_22_scnSink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_22_scnGlobal ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
extern int CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_22_cooB2G1Global ; extern int CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_22_cooB2G2Global ; extern int CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_22_cooG2BGlobal ;  void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_22_cooB2G1Sink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_22_cooB2G1Global ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_22_cooB2G2Sink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_22_cooB2G2Global ) {  fprintf ( stdout , " %s\n " , data ) ; } }  void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_22_cooG2BSink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_22_cooG2BGlobal ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_31_kcw ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } { char * dataCopy = data ; char * data = dataCopy ;  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void zffG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; { char * dataCopy = data ; char * data = dataCopy ;  WARNINGLINE fprintf ( stdout , data ) ; } }  static void zffB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } { char * dataCopy = data ; char * data = dataCopy ;  fprintf ( stdout , " %s\n " , data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_31_zff ( ) { zffG2B ( ) ; zffB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_32_ssb ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } * dataPtr1 = data ; } { char * data = * dataPtr2 ;  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void vqwG2B ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ;  strcpy ( data , " STRING " ) ; * dataPtr1 = data ; } { char * data = * dataPtr2 ;  WARNINGLINE fprintf ( stdout , data ) ; } }  static void vqwB2G ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } * dataPtr1 = data ; } { char * data = * dataPtr2 ;  fprintf ( stdout , " %s\n " , data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_32_vqw ( ) { vqwG2B ( ) ; vqwB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_34_fjt ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ;  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void nozG2B ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ;  WARNINGLINE fprintf ( stdout , data ) ; } }  static void nozB2G ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ;  fprintf ( stdout , " %s\n " , data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_34_noz ( ) { nozG2B ( ) ; nozB2G ( ) ; } CWE134 goodpositive
static void jhoSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_41_jho ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } jhoSink ( data ) ; } CWE134 badpositive
static void umxG2BSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } static void umxG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; umxG2BSink ( data ) ; }  static void umxB2GSink ( char * data ) {  fprintf ( stdout , " %s\n " , data ) ; } static void umxB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } umxB2GSink ( data ) ; } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_41_umx ( ) { umxB2G ( ) ; umxG2B ( ) ; } CWE134 goodpositive
static char * xsiSource ( char * data ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } return data ; } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_42_xsi ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = xsiSource ( data ) ;  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
static char * sasG2BSource ( char * data ) {  strcpy ( data , " STRING " ) ; return data ; } static void sasG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = sasG2BSource ( data ) ;  WARNINGLINE fprintf ( stdout , data ) ; }  static char * sasB2GSource ( char * data ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } return data ; } static void sasB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = sasB2GSource ( data ) ;  fprintf ( stdout , " %s\n " , data ) ; } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_42_sas ( ) { sasB2G ( ) ; sasG2B ( ) ; } CWE134 goodpositive
static void udxSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_44_udx ( ) { char * data ;  void ( * funcPtr ) ( char * ) = udxSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } }  funcPtr ( data ) ; } CWE134 badpositive
static void rxpG2BSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } static void rxpG2B ( ) { char * data ; void ( * funcPtr ) ( char * ) = rxpG2BSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; funcPtr ( data ) ; }  static void rxpB2GSink ( char * data ) {  fprintf ( stdout , " %s\n " , data ) ; } static void rxpB2G ( ) { char * data ; void ( * funcPtr ) ( char * ) = rxpB2GSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } funcPtr ( data ) ; } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_44_rxp ( ) { rxpG2B ( ) ; rxpB2G ( ) ; } CWE134 goodpositive
static void mjoSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_45_mjoData ;  WARNINGLINE fprintf ( stdout , data ) ; } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_45_mjo ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_45_mjoData = data ; mjoSink ( ) ; } CWE134 badpositive
static void xmmG2BSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_45_xmmG2BData ;  WARNINGLINE fprintf ( stdout , data ) ; } static void xmmG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_45_xmmG2BData = data ; xmmG2BSink ( ) ; }  static void xmmB2GSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_45_xmmB2GData ;  fprintf ( stdout , " %s\n " , data ) ; } static void xmmB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_45_xmmB2GData = data ; xmmB2GSink ( ) ; } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_45_xmm ( ) { xmmG2B ( ) ; xmmB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_51b_fyhSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_51b_niwG2BSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_51b_niwB2GSink ( char * data ) {  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_52c_ytmSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_52c_sutG2BSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_52c_sutB2GSink ( char * data ) {  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_53d_sekSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_53d_pzlG2BSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_53d_pzlB2GSink ( char * data ) {  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_54e_mfpSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_54e_ramG2BSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_54e_ramB2GSink ( char * data ) {  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
char * CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_61b_jfgSource ( char * data ) ; void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_61_jfg ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_61b_jfgSource ( data ) ;  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
char * CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_61b_bcuG2BSource ( char * data ) ; static void bcuG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_61b_bcuG2BSource ( data ) ;  WARNINGLINE fprintf ( stdout , data ) ; }  char * CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_61b_bcuB2GSource ( char * data ) ; static void bcuB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_61b_bcuB2GSource ( data ) ;  fprintf ( stdout , " %s\n " , data ) ; } void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_61_bcu ( ) { bcuG2B ( ) ; bcuB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_63b_kxoSink ( char * * dataPtr ) { char * data = * dataPtr ;  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_63b_rcrG2BSink ( char * * dataPtr ) { char * data = * dataPtr ;  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_63b_rcrB2GSink ( char * * dataPtr ) { char * data = * dataPtr ;  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_64b_zudSink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ;  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_64b_urnG2BSink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ;  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_64b_urnB2GSink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ;  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_65b_lftSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_65b_qfwG2BSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_65b_qfwB2GSink ( char * data ) {  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_66b_pqmSink ( char * dataArray [ ] ) {  char * data = dataArray [ N ] ;  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_66b_llkG2BSink ( char * dataArray [ ] ) { char * data = dataArray [ N ] ;  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_66b_llkB2GSink ( char * dataArray [ ] ) { char * data = dataArray [ N ] ;  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_67b_itfSink ( CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_67_structType myStruct ) { char * data = myStruct.structFirst ;  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_67b_fqlG2BSink ( CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_67_structType myStruct ) { char * data = myStruct.structFirst ;  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_67b_fqlB2GSink ( CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_67_structType myStruct ) { char * data = myStruct.structFirst ;  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_68b_zzpSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_68_zzpData ;  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_68b_efnG2BSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_68_efnG2BData ;  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_68b_efnB2GSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_connect_socket_fprintf_68_efnB2GData ;  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_01_lao ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } }  WARNINGLINE printf ( data ) ; } CWE134 badpositive
static void hpxG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ;  WARNINGLINE printf ( data ) ; }  static void hpxB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } }  printf ( " %s\n " , data ) ; } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_01_hpx ( ) { hpxG2B ( ) ; hpxB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_02_gsy ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void ktwB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void ktwB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N ) {  printf ( " %s\n " , data ) ; } }  static void ktwG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N ) {  WARNINGLINE printf ( data ) ; } }  static void ktwG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  strcpy ( data , " STRING " ) ; } if ( N ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_02_ktw ( ) { ktwB2G1 ( ) ; ktwB2G2 ( ) ; ktwG2B1 ( ) ; ktwG2B2 ( ) ; } CWE134 goodpositive
static void pdxB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void pdxB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N ) {  printf ( " %s\n " , data ) ; } }  static void pdxG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N ) {  printf ( data ) ; } }  static void pdxG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  strcpy ( data , " STRING " ) ; } if ( N ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_02_pdx ( ) { pdxB2G1 ( ) ; pdxB2G2 ( ) ; pdxG2B1 ( ) ; pdxG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_03_owe ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N = = N ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void rfpB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void rfpB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N = = N ) {  printf ( " %s\n " , data ) ; } }  static void rfpG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N = = N ) {  WARNINGLINE printf ( data ) ; } }  static void rfpG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) {  strcpy ( data , " STRING " ) ; } if ( N = = N ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_03_rfp ( ) { rfpB2G1 ( ) ; rfpB2G2 ( ) ; rfpG2B1 ( ) ; rfpG2B2 ( ) ; } CWE134 goodpositive
static void omgB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void omgB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N = = N ) {  printf ( " %s\n " , data ) ; } }  static void omgG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N = = N ) {  printf ( data ) ; } }  static void omgG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) {  strcpy ( data , " STRING " ) ; } if ( N = = N ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_03_omg ( ) { omgB2G1 ( ) ; omgB2G2 ( ) ; omgG2B1 ( ) ; omgG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_04_fme ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_TRUE ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void jnmB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void jnmB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_TRUE ) {  printf ( " %s\n " , data ) ; } }  static void jnmG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) {  WARNINGLINE printf ( data ) ; } }  static void jnmG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_04_jnm ( ) { jnmB2G1 ( ) ; jnmB2G2 ( ) ; jnmG2B1 ( ) ; jnmG2B2 ( ) ; } CWE134 goodpositive
static void zegB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void zegB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_TRUE ) {  printf ( " %s\n " , data ) ; } }  static void zegG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) {  printf ( data ) ; } }  static void zegG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_04_zeg ( ) { zegB2G1 ( ) ; zegB2G2 ( ) ; zegG2B1 ( ) ; zegG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_05_lax ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticTrue ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void sfmB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void sfmB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticTrue ) {  printf ( " %s\n " , data ) ; } }  static void sfmG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) {  WARNINGLINE printf ( data ) ; } }  static void sfmG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_05_sfm ( ) { sfmB2G1 ( ) ; sfmB2G2 ( ) ; sfmG2B1 ( ) ; sfmG2B2 ( ) ; } CWE134 goodpositive
static void bfsB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void bfsB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticTrue ) {  printf ( " %s\n " , data ) ; } }  static void bfsG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) {  printf ( data ) ; } }  static void bfsG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_05_bfs ( ) { bfsB2G1 ( ) ; bfsB2G2 ( ) ; bfsG2B1 ( ) ; bfsG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_06_ezc ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_FIVE = = N ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void ryiB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void ryiB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_FIVE = = N ) {  printf ( " %s\n " , data ) ; } }  static void ryiG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) {  WARNINGLINE printf ( data ) ; } }  static void ryiG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_06_ryi ( ) { ryiB2G1 ( ) ; ryiB2G2 ( ) ; ryiG2B1 ( ) ; ryiG2B2 ( ) ; } CWE134 goodpositive
static void cwfB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void cwfB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_FIVE = = N ) {  printf ( " %s\n " , data ) ; } }  static void cwfG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) {  printf ( data ) ; } }  static void cwfG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_06_cwf ( ) { cwfB2G1 ( ) ; cwfB2G2 ( ) ; cwfG2B1 ( ) ; cwfG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_07_wqg ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticFive = = N ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void aoqB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void aoqB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticFive = = N ) {  printf ( " %s\n " , data ) ; } }  static void aoqG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) {  WARNINGLINE printf ( data ) ; } }  static void aoqG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_07_aoq ( ) { aoqB2G1 ( ) ; aoqB2G2 ( ) ; aoqG2B1 ( ) ; aoqG2B2 ( ) ; } CWE134 goodpositive
static void siwB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void siwB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticFive = = N ) {  printf ( " %s\n " , data ) ; } }  static void siwG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) {  printf ( data ) ; } }  static void siwG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_07_siw ( ) { siwB2G1 ( ) ; siwB2G2 ( ) ; siwG2B1 ( ) ; siwG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_08_xka ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticReturnsTrue ( ) ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void yryB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void yryB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticReturnsTrue ( ) ) {  printf ( " %s\n " , data ) ; } }  static void yryG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) {  WARNINGLINE printf ( data ) ; } }  static void yryG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_08_yry ( ) { yryB2G1 ( ) ; yryB2G2 ( ) ; yryG2B1 ( ) ; yryG2B2 ( ) ; } CWE134 goodpositive
static void xhcB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void xhcB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticReturnsTrue ( ) ) {  printf ( " %s\n " , data ) ; } }  static void xhcG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) {  printf ( data ) ; } }  static void xhcG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_08_xhc ( ) { xhcB2G1 ( ) ; xhcB2G2 ( ) ; xhcG2B1 ( ) ; xhcG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_09_fig ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_TRUE ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void queB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void queB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_TRUE ) {  printf ( " %s\n " , data ) ; } }  static void queG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) {  WARNINGLINE printf ( data ) ; } }  static void queG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_09_que ( ) { queB2G1 ( ) ; queB2G2 ( ) ; queG2B1 ( ) ; queG2B2 ( ) ; } CWE134 goodpositive
static void silB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void silB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_TRUE ) {  printf ( " %s\n " , data ) ; } }  static void silG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) {  printf ( data ) ; } }  static void silG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_09_sil ( ) { silB2G1 ( ) ; silB2G2 ( ) ; silG2B1 ( ) ; silG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_10_fls ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalTrue ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void ovmB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void ovmB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalTrue ) {  printf ( " %s\n " , data ) ; } }  static void ovmG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) {  WARNINGLINE printf ( data ) ; } }  static void ovmG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_10_ovm ( ) { ovmB2G1 ( ) ; ovmB2G2 ( ) ; ovmG2B1 ( ) ; ovmG2B2 ( ) ; } CWE134 goodpositive
static void ubyB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void ubyB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalTrue ) {  printf ( " %s\n " , data ) ; } }  static void ubyG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) {  printf ( data ) ; } }  static void ubyG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_10_uby ( ) { ubyB2G1 ( ) ; ubyB2G2 ( ) ; ubyG2B1 ( ) ; ubyG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_11_hkw ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalReturnsTrue ( ) ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void jszB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void jszB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalReturnsTrue ( ) ) {  printf ( " %s\n " , data ) ; } }  static void jszG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) {  WARNINGLINE printf ( data ) ; } }  static void jszG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_11_jsz ( ) { jszB2G1 ( ) ; jszB2G2 ( ) ; jszG2B1 ( ) ; jszG2B2 ( ) ; } CWE134 goodpositive
static void obrB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void obrB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalReturnsTrue ( ) ) {  printf ( " %s\n " , data ) ; } }  static void obrG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) {  printf ( data ) ; } }  static void obrG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_11_obr ( ) { obrB2G1 ( ) ; obrB2G2 ( ) ; obrG2B1 ( ) ; obrG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_12_yad ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) {  WARNINGLINE printf ( data ) ; } else {  printf ( " %s\n " , data ) ; } } CWE134 badpositive
static void bibB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } else { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalReturnsTrueOrFalse ( ) ) {  printf ( " %s\n " , data ) ; } else {  printf ( " %s\n " , data ) ; } }  static void bibG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) {  strcpy ( data , " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) {  WARNINGLINE printf ( data ) ; } else {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_12_bib ( ) { bibB2G ( ) ; bibG2B ( ) ; } CWE134 goodpositive
static void tkwB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } else { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalReturnsTrueOrFalse ( ) ) {  printf ( " %s\n " , data ) ; } else {  printf ( " %s\n " , data ) ; } }  static void tkwG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) {  strcpy ( data , " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) {  printf ( data ) ; } else {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_12_tkw ( ) { tkwB2G ( ) ; tkwG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_13_ubw ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_FIVE = = N ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void wipB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void wipB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_FIVE = = N ) {  printf ( " %s\n " , data ) ; } }  static void wipG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) {  WARNINGLINE printf ( data ) ; } }  static void wipG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_13_wip ( ) { wipB2G1 ( ) ; wipB2G2 ( ) ; wipG2B1 ( ) ; wipG2B2 ( ) ; } CWE134 goodpositive
static void ubeB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void ubeB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_FIVE = = N ) {  printf ( " %s\n " , data ) ; } }  static void ubeG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) {  printf ( data ) ; } }  static void ubeG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_13_ube ( ) { ubeB2G1 ( ) ; ubeB2G2 ( ) ; ubeG2B1 ( ) ; ubeG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_14_mow ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalFive = = N ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void fgeB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void fgeB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalFive = = N ) {  printf ( " %s\n " , data ) ; } }  static void fgeG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) {  WARNINGLINE printf ( data ) ; } }  static void fgeG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_14_fge ( ) { fgeB2G1 ( ) ; fgeB2G2 ( ) ; fgeG2B1 ( ) ; fgeG2B2 ( ) ; } CWE134 goodpositive
static void ihlB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void ihlB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalFive = = N ) {  printf ( " %s\n " , data ) ; } }  static void ihlG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) {  printf ( data ) ; } }  static void ihlG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_14_ihl ( ) { ihlB2G1 ( ) ; ihlB2G2 ( ) ; ihlG2B1 ( ) ; ihlG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_15_bac ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  WARNINGLINE printf ( data ) ; break ; default:  printLine ( " STRING " ) ; break ; } } CWE134 badpositive
static void cuuB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printLine ( " STRING " ) ; break ; default:  printf ( " %s\n " , data ) ; break ; } }  static void cuuB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printf ( " %s\n " , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } }  static void cuuG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  printLine ( " STRING " ) ; break ; default:  strcpy ( data , " STRING " ) ; break ; } switch ( N ) { case 7:  WARNINGLINE printf ( data ) ; break ; default:  printLine ( " STRING " ) ; break ; } }  static void cuuG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  strcpy ( data , " STRING " ) ; break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printf ( data ) ; break ; default:  printLine ( " STRING " ) ; break ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_15_cuu ( ) { cuuB2G1 ( ) ; cuuB2G2 ( ) ; cuuG2B1 ( ) ; cuuG2B2 ( ) ; } CWE134 goodpositive
static void oevB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printLine ( " STRING " ) ; break ; default:  printf ( " %s\n " , data ) ; break ; } }  static void oevB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printf ( " %s\n " , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } }  static void oevG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  printLine ( " STRING " ) ; break ; default:  strcpy ( data , " STRING " ) ; break ; } switch ( N ) { case 7:  printf ( data ) ; break ; default:  printLine ( " STRING " ) ; break ; } }  static void oevG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  strcpy ( data , " STRING " ) ; break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  WARNINGLINE printf ( data ) ; break ; default:  printLine ( " STRING " ) ; break ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_15_oev ( ) { oevB2G1 ( ) ; oevB2G2 ( ) ; oevG2B1 ( ) ; oevG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_16_vzn ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; } while ( N ) {  WARNINGLINE printf ( data ) ; break ; } } CWE134 badpositive
static void zidB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; } while ( N ) {  printf ( " %s\n " , data ) ; break ; } }  static void zidG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) {  strcpy ( data , " STRING " ) ; break ; } while ( N ) {  WARNINGLINE printf ( data ) ; break ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_16_zid ( ) { zidB2G ( ) ; zidG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_17_knj ( ) { int i , j ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( i = N ; i < N ; i + + ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } for ( j = N ; j < N ; j + + ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void mhtB2G ( ) { int i , k ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( i = N ; i < N ; i + + ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } for ( k = N ; k < N ; k + + ) {  printf ( " %s\n " , data ) ; } }  static void mhtG2B ( ) { int h , j ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( h = N ; h < N ; h + + ) {  strcpy ( data , " STRING " ) ; } for ( j = N ; j < N ; j + + ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_17_mht ( ) { mhtB2G ( ) ; mhtG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_18_iyn ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source: { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } goto sink ; sink:  WARNINGLINE printf ( data ) ; } CWE134 badpositive
static void ffmB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source: { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } goto sink ; sink:  printf ( " %s\n " , data ) ; }  static void ffmG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source:  strcpy ( data , " STRING " ) ; goto sink ; sink:  WARNINGLINE printf ( data ) ; } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_18_ffm ( ) { ffmB2G ( ) ; ffmG2B ( ) ; } CWE134 goodpositive
static int mibStatic = N ; static void mibSink ( char * data ) { if ( mibStatic ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_21_mib ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } mibStatic = N ;  mibSink ( data ) ; } CWE134 badpositive
static int giwB2G1Static = N ; static int giwB2G2Static = N ; static int giwG2BStatic = N ;  static void giwB2G1Sink ( char * data ) { if ( giwB2G1Static ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } } static void giwB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } giwB2G1Static = N ;  giwB2G1Sink ( data ) ; }  static void giwB2G2Sink ( char * data ) { if ( giwB2G2Static ) {  printf ( " %s\n " , data ) ; } } static void giwB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } giwB2G2Static = N ;  giwB2G2Sink ( data ) ; }  static void giwG2BSink ( char * data ) { if ( giwG2BStatic ) {  WARNINGLINE printf ( data ) ; } } static void giwG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; giwG2BStatic = N ;  giwG2BSink ( data ) ; } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_21_giw ( ) { giwB2G1 ( ) ; giwB2G2 ( ) ; giwG2B ( ) ; } CWE134 goodpositive
extern int CWE134_Uncontrolled_Format_String__char_connect_socket_printf_22_zsgGlobal ; void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_22_zsgSink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_connect_socket_printf_22_zsgGlobal ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
extern int CWE134_Uncontrolled_Format_String__char_connect_socket_printf_22_tmdB2G1Global ; extern int CWE134_Uncontrolled_Format_String__char_connect_socket_printf_22_tmdB2G2Global ; extern int CWE134_Uncontrolled_Format_String__char_connect_socket_printf_22_tmdG2BGlobal ;  void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_22_tmdB2G1Sink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_connect_socket_printf_22_tmdB2G1Global ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_22_tmdB2G2Sink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_connect_socket_printf_22_tmdB2G2Global ) {  printf ( " %s\n " , data ) ; } }  void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_22_tmdG2BSink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_connect_socket_printf_22_tmdG2BGlobal ) {  WARNINGLINE printf ( data ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_31_ryq ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } { char * dataCopy = data ; char * data = dataCopy ;  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void regG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; { char * dataCopy = data ; char * data = dataCopy ;  WARNINGLINE printf ( data ) ; } }  static void regB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } { char * dataCopy = data ; char * data = dataCopy ;  printf ( " %s\n " , data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_31_reg ( ) { regG2B ( ) ; regB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_32_bbo ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } * dataPtr1 = data ; } { char * data = * dataPtr2 ;  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void krsG2B ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ;  strcpy ( data , " STRING " ) ; * dataPtr1 = data ; } { char * data = * dataPtr2 ;  WARNINGLINE printf ( data ) ; } }  static void krsB2G ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } * dataPtr1 = data ; } { char * data = * dataPtr2 ;  printf ( " %s\n " , data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_32_krs ( ) { krsG2B ( ) ; krsB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_34_wpn ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_connect_socket_printf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ;  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void bbxG2B ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_connect_socket_printf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ;  WARNINGLINE printf ( data ) ; } }  static void bbxB2G ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_connect_socket_printf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ;  printf ( " %s\n " , data ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_34_bbx ( ) { bbxG2B ( ) ; bbxB2G ( ) ; } CWE134 goodpositive
static void bpiSink ( char * data ) {  WARNINGLINE printf ( data ) ; } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_41_bpi ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } bpiSink ( data ) ; } CWE134 badpositive
static void czmG2BSink ( char * data ) {  WARNINGLINE printf ( data ) ; } static void czmG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; czmG2BSink ( data ) ; }  static void czmB2GSink ( char * data ) {  printf ( " %s\n " , data ) ; } static void czmB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } czmB2GSink ( data ) ; } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_41_czm ( ) { czmB2G ( ) ; czmG2B ( ) ; } CWE134 goodpositive
static char * esoSource ( char * data ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } return data ; } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_42_eso ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = esoSource ( data ) ;  WARNINGLINE printf ( data ) ; } CWE134 badpositive
static char * fyuG2BSource ( char * data ) {  strcpy ( data , " STRING " ) ; return data ; } static void fyuG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = fyuG2BSource ( data ) ;  WARNINGLINE printf ( data ) ; }  static char * fyuB2GSource ( char * data ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } return data ; } static void fyuB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = fyuB2GSource ( data ) ;  printf ( " %s\n " , data ) ; } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_42_fyu ( ) { fyuB2G ( ) ; fyuG2B ( ) ; } CWE134 goodpositive
static void evgSink ( char * data ) {  WARNINGLINE printf ( data ) ; } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_44_evg ( ) { char * data ;  void ( * funcPtr ) ( char * ) = evgSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } }  funcPtr ( data ) ; } CWE134 badpositive
static void ikmG2BSink ( char * data ) {  WARNINGLINE printf ( data ) ; } static void ikmG2B ( ) { char * data ; void ( * funcPtr ) ( char * ) = ikmG2BSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; funcPtr ( data ) ; }  static void ikmB2GSink ( char * data ) {  printf ( " %s\n " , data ) ; } static void ikmB2G ( ) { char * data ; void ( * funcPtr ) ( char * ) = ikmB2GSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } funcPtr ( data ) ; } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_44_ikm ( ) { ikmG2B ( ) ; ikmB2G ( ) ; } CWE134 goodpositive
static void jmoSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_connect_socket_printf_45_jmoData ;  WARNINGLINE printf ( data ) ; } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_45_jmo ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } CWE134_Uncontrolled_Format_String__char_connect_socket_printf_45_jmoData = data ; jmoSink ( ) ; } CWE134 badpositive
static void jktG2BSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_connect_socket_printf_45_jktG2BData ;  WARNINGLINE printf ( data ) ; } static void jktG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; CWE134_Uncontrolled_Format_String__char_connect_socket_printf_45_jktG2BData = data ; jktG2BSink ( ) ; }  static void jktB2GSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_connect_socket_printf_45_jktB2GData ;  printf ( " %s\n " , data ) ; } static void jktB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } CWE134_Uncontrolled_Format_String__char_connect_socket_printf_45_jktB2GData = data ; jktB2GSink ( ) ; } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_45_jkt ( ) { jktG2B ( ) ; jktB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_51b_ucuSink ( char * data ) {  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_51b_kuvG2BSink ( char * data ) {  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_51b_kuvB2GSink ( char * data ) {  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_52c_yhySink ( char * data ) {  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_52c_lpgG2BSink ( char * data ) {  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_52c_lpgB2GSink ( char * data ) {  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_53d_kgfSink ( char * data ) {  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_53d_hjeG2BSink ( char * data ) {  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_53d_hjeB2GSink ( char * data ) {  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_54e_nxnSink ( char * data ) {  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_54e_ykmG2BSink ( char * data ) {  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_54e_ykmB2GSink ( char * data ) {  printf ( " %s\n " , data ) ; } CWE134 goodpositive
char * CWE134_Uncontrolled_Format_String__char_connect_socket_printf_61b_lgeSource ( char * data ) ; void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_61_lge ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_connect_socket_printf_61b_lgeSource ( data ) ;  WARNINGLINE printf ( data ) ; } CWE134 badpositive
char * CWE134_Uncontrolled_Format_String__char_connect_socket_printf_61b_cbhG2BSource ( char * data ) ; static void cbhG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_connect_socket_printf_61b_cbhG2BSource ( data ) ;  WARNINGLINE printf ( data ) ; }  char * CWE134_Uncontrolled_Format_String__char_connect_socket_printf_61b_cbhB2GSource ( char * data ) ; static void cbhB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_connect_socket_printf_61b_cbhB2GSource ( data ) ;  printf ( " %s\n " , data ) ; } void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_61_cbh ( ) { cbhG2B ( ) ; cbhB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_63b_gqpSink ( char * * dataPtr ) { char * data = * dataPtr ;  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_63b_iuhG2BSink ( char * * dataPtr ) { char * data = * dataPtr ;  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_63b_iuhB2GSink ( char * * dataPtr ) { char * data = * dataPtr ;  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_64b_nnySink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ;  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_64b_wnuG2BSink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ;  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_64b_wnuB2GSink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ;  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_65b_frrSink ( char * data ) {  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_65b_doiG2BSink ( char * data ) {  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_65b_doiB2GSink ( char * data ) {  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_66b_enqSink ( char * dataArray [ ] ) {  char * data = dataArray [ N ] ;  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_66b_xwnG2BSink ( char * dataArray [ ] ) { char * data = dataArray [ N ] ;  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_66b_xwnB2GSink ( char * dataArray [ ] ) { char * data = dataArray [ N ] ;  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_67b_hghSink ( CWE134_Uncontrolled_Format_String__char_connect_socket_printf_67_structType myStruct ) { char * data = myStruct.structFirst ;  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_67b_mejG2BSink ( CWE134_Uncontrolled_Format_String__char_connect_socket_printf_67_structType myStruct ) { char * data = myStruct.structFirst ;  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_67b_mejB2GSink ( CWE134_Uncontrolled_Format_String__char_connect_socket_printf_67_structType myStruct ) { char * data = myStruct.structFirst ;  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_68b_etbSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_connect_socket_printf_68_etbData ;  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_68b_bjxG2BSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_connect_socket_printf_68_bjxG2BData ;  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_connect_socket_printf_68b_bjxB2GSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_connect_socket_printf_68_bjxB2GData ;  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_01_qwq ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
static void dmxG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  static void dmxB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_01_dmx ( ) { dmxG2B ( ) ; dmxB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_02_fne ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void umlB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void umlB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void umlG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void umlG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  strcpy ( data , " STRING " ) ; } if ( N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_02_uml ( ) { umlB2G1 ( ) ; umlB2G2 ( ) ; umlG2B1 ( ) ; umlG2B2 ( ) ; } CWE134 goodpositive
static void gmiB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void gmiB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void gmiG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void gmiG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  strcpy ( data , " STRING " ) ; } if ( N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_02_gmi ( ) { gmiB2G1 ( ) ; gmiB2G2 ( ) ; gmiG2B1 ( ) ; gmiG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_03_mvf ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void btqB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void btqB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void btqG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void btqG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) {  strcpy ( data , " STRING " ) ; } if ( N = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_03_btq ( ) { btqB2G1 ( ) ; btqB2G2 ( ) ; btqG2B1 ( ) ; btqG2B2 ( ) ; } CWE134 goodpositive
static void hlyB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void hlyB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void hlyG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void hlyG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) {  strcpy ( data , " STRING " ) ; } if ( N = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_03_hly ( ) { hlyB2G1 ( ) ; hlyB2G2 ( ) ; hlyG2B1 ( ) ; hlyG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_04_dgu ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void xyuB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void xyuB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void xyuG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void xyuG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_04_xyu ( ) { xyuB2G1 ( ) ; xyuB2G2 ( ) ; xyuG2B1 ( ) ; xyuG2B2 ( ) ; } CWE134 goodpositive
static void ldfB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void ldfB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void ldfG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void ldfG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_04_ldf ( ) { ldfB2G1 ( ) ; ldfB2G2 ( ) ; ldfG2B1 ( ) ; ldfG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_05_eku ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticTrue ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void aufB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticFalse ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void aufB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticTrue ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void aufG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void aufG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_05_auf ( ) { aufB2G1 ( ) ; aufB2G2 ( ) ; aufG2B1 ( ) ; aufG2B2 ( ) ; } CWE134 goodpositive
static void mqzB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticFalse ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void mqzB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticTrue ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void mqzG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void mqzG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_05_mqz ( ) { mqzB2G1 ( ) ; mqzB2G2 ( ) ; mqzG2B1 ( ) ; mqzG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_06_vlv ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void szkB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void szkB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void szkG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void szkG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_06_szk ( ) { szkB2G1 ( ) ; szkB2G2 ( ) ; szkG2B1 ( ) ; szkG2B2 ( ) ; } CWE134 goodpositive
static void djpB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void djpB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void djpG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void djpG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_06_djp ( ) { djpB2G1 ( ) ; djpB2G2 ( ) ; djpG2B1 ( ) ; djpG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_07_uvi ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticFive = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void enqB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void enqB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticFive = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void enqG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void enqG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_07_enq ( ) { enqB2G1 ( ) ; enqB2G2 ( ) ; enqG2B1 ( ) ; enqG2B2 ( ) ; } CWE134 goodpositive
static void upkB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void upkB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticFive = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void upkG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void upkG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_07_upk ( ) { upkB2G1 ( ) ; upkB2G2 ( ) ; upkG2B1 ( ) ; upkG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_08_fdg ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void sxyB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void sxyB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void sxyG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void sxyG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_08_sxy ( ) { sxyB2G1 ( ) ; sxyB2G2 ( ) ; sxyG2B1 ( ) ; sxyG2B2 ( ) ; } CWE134 goodpositive
static void pwrB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void pwrB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void pwrG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void pwrG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_08_pwr ( ) { pwrB2G1 ( ) ; pwrB2G2 ( ) ; pwrG2B1 ( ) ; pwrG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_09_pxe ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void uuoB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void uuoB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void uuoG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void uuoG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_09_uuo ( ) { uuoB2G1 ( ) ; uuoB2G2 ( ) ; uuoG2B1 ( ) ; uuoG2B2 ( ) ; } CWE134 goodpositive
static void czaB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void czaB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void czaG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void czaG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_09_cza ( ) { czaB2G1 ( ) ; czaB2G2 ( ) ; czaG2B1 ( ) ; czaG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_10_jez ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalTrue ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void aneB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalFalse ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void aneB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalTrue ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void aneG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void aneG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_10_ane ( ) { aneB2G1 ( ) ; aneB2G2 ( ) ; aneG2B1 ( ) ; aneG2B2 ( ) ; } CWE134 goodpositive
static void zbzB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalFalse ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void zbzB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalTrue ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void zbzG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void zbzG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_10_zbz ( ) { zbzB2G1 ( ) ; zbzB2G2 ( ) ; zbzG2B1 ( ) ; zbzG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_11_kqs ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void xguB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void xguB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void xguG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void xguG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_11_xgu ( ) { xguB2G1 ( ) ; xguB2G2 ( ) ; xguG2B1 ( ) ; xguG2B2 ( ) ; } CWE134 goodpositive
static void fplB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void fplB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void fplG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void fplG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_11_fpl ( ) { fplB2G1 ( ) ; fplB2G2 ( ) ; fplG2B1 ( ) ; fplG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_12_oax ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void bbdB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } else { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalReturnsTrueOrFalse ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void bbdG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) {  strcpy ( data , " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_12_bbd ( ) { bbdB2G ( ) ; bbdG2B ( ) ; } CWE134 goodpositive
static void asyB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } else { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalReturnsTrueOrFalse ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void asyG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) {  strcpy ( data , " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } else { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_12_asy ( ) { asyB2G ( ) ; asyG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_13_eel ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void aczB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void aczB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void aczG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void aczG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_13_acz ( ) { aczB2G1 ( ) ; aczB2G2 ( ) ; aczG2B1 ( ) ; aczG2B2 ( ) ; } CWE134 goodpositive
static void kbdB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void kbdB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void kbdG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void kbdG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_13_kbd ( ) { kbdB2G1 ( ) ; kbdB2G2 ( ) ; kbdG2B1 ( ) ; kbdG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_14_ggh ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalFive = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void jefB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void jefB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalFive = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void jefG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void jefG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_14_jef ( ) { jefB2G1 ( ) ; jefB2G2 ( ) ; jefG2B1 ( ) ; jefG2B2 ( ) ; } CWE134 goodpositive
static void taeB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void taeB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalFive = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void taeG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void taeG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_14_tae ( ) { taeB2G1 ( ) ; taeB2G2 ( ) ; taeG2B1 ( ) ; taeG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_15_fnv ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7: { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } break ; default:  printLine ( " STRING " ) ; break ; } } CWE134 badpositive
static void eawB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printLine ( " STRING " ) ; break ; default: { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } break ; } }  static void eawB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7: { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } break ; default:  printLine ( " STRING " ) ; break ; } }  static void eawG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  printLine ( " STRING " ) ; break ; default:  strcpy ( data , " STRING " ) ; break ; } switch ( N ) { case 7: { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } break ; default:  printLine ( " STRING " ) ; break ; } }  static void eawG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  strcpy ( data , " STRING " ) ; break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7: { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } break ; default:  printLine ( " STRING " ) ; break ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_15_eaw ( ) { eawB2G1 ( ) ; eawB2G2 ( ) ; eawG2B1 ( ) ; eawG2B2 ( ) ; } CWE134 goodpositive
static void ntyB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printLine ( " STRING " ) ; break ; default: { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } break ; } }  static void ntyB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7: { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } break ; default:  printLine ( " STRING " ) ; break ; } }  static void ntyG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  printLine ( " STRING " ) ; break ; default:  strcpy ( data , " STRING " ) ; break ; } switch ( N ) { case 7: { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } break ; default:  printLine ( " STRING " ) ; break ; } }  static void ntyG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  strcpy ( data , " STRING " ) ; break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7: { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } break ; default:  printLine ( " STRING " ) ; break ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_15_nty ( ) { ntyB2G1 ( ) ; ntyB2G2 ( ) ; ntyG2B1 ( ) ; ntyG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_16_ovb ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; } while ( N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } break ; } } CWE134 badpositive
static void lntB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; } while ( N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } break ; } }  static void lntG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) {  strcpy ( data , " STRING " ) ; break ; } while ( N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } break ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_16_lnt ( ) { lntB2G ( ) ; lntG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_17_qfo ( ) { int i , j ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( i = N ; i < N ; i + + ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } for ( j = N ; j < N ; j + + ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void nukB2G ( ) { int i , k ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( i = N ; i < N ; i + + ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } for ( k = N ; k < N ; k + + ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void nukG2B ( ) { int h , j ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( h = N ; h < N ; h + + ) {  strcpy ( data , " STRING " ) ; } for ( j = N ; j < N ; j + + ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_17_nuk ( ) { nukB2G ( ) ; nukG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_18_kwe ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source: { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } goto sink ; sink: { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
static void ijsB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source: { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } goto sink ; sink: { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } }  static void ijsG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source:  strcpy ( data , " STRING " ) ; goto sink ; sink: { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_18_ijs ( ) { ijsB2G ( ) ; ijsG2B ( ) ; } CWE134 goodpositive
static int qbfStatic = N ; static void qbfSink ( char * data ) { if ( qbfStatic ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_21_qbf ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } qbfStatic = N ;  qbfSink ( data ) ; } CWE134 badpositive
static int adzB2G1Static = N ; static int adzB2G2Static = N ; static int adzG2BStatic = N ;  static void adzB2G1Sink ( char * data ) { if ( adzB2G1Static ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } } static void adzB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } adzB2G1Static = N ;  adzB2G1Sink ( data ) ; }  static void adzB2G2Sink ( char * data ) { if ( adzB2G2Static ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } } static void adzB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } adzB2G2Static = N ;  adzB2G2Sink ( data ) ; }  static void adzG2BSink ( char * data ) { if ( adzG2BStatic ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } static void adzG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; adzG2BStatic = N ;  adzG2BSink ( data ) ; } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_21_adz ( ) { adzB2G1 ( ) ; adzB2G2 ( ) ; adzG2B ( ) ; } CWE134 goodpositive
extern int CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_22_kdyGlobal ; void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_22_kdySink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_22_kdyGlobal ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
extern int CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_22_rqkB2G1Global ; extern int CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_22_rqkB2G2Global ; extern int CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_22_rqkG2BGlobal ;  void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_22_rqkB2G1Sink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_22_rqkB2G1Global ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_22_rqkB2G2Sink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_22_rqkB2G2Global ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_22_rqkG2BSink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_22_rqkG2BGlobal ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_31_ebj ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } { char * dataCopy = data ; char * data = dataCopy ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void orkG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; { char * dataCopy = data ; char * data = dataCopy ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void orkB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } { char * dataCopy = data ; char * data = dataCopy ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_31_ork ( ) { orkG2B ( ) ; orkB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_32_mdg ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void lqiG2B ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ;  strcpy ( data , " STRING " ) ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void lqiB2G ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_32_lqi ( ) { lqiG2B ( ) ; lqiB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_34_ggr ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void qywG2B ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void qywB2G ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_34_qyw ( ) { qywG2B ( ) ; qywB2G ( ) ; } CWE134 goodpositive
static void ejxSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_41_ejx ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } ejxSink ( data ) ; } CWE134 badpositive
static void fszG2BSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } static void fszG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; fszG2BSink ( data ) ; }  static void fszB2GSink ( char * data ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } static void fszB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } fszB2GSink ( data ) ; } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_41_fsz ( ) { fszB2G ( ) ; fszG2B ( ) ; } CWE134 goodpositive
static char * ngvSource ( char * data ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } return data ; } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_42_ngv ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = ngvSource ( data ) ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
static char * yzvG2BSource ( char * data ) {  strcpy ( data , " STRING " ) ; return data ; } static void yzvG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = yzvG2BSource ( data ) ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  static char * yzvB2GSource ( char * data ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } return data ; } static void yzvB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = yzvB2GSource ( data ) ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_42_yzv ( ) { yzvB2G ( ) ; yzvG2B ( ) ; } CWE134 goodpositive
static void rupSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_44_rup ( ) { char * data ;  void ( * funcPtr ) ( char * ) = rupSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } }  funcPtr ( data ) ; } CWE134 badpositive
static void nxkG2BSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } static void nxkG2B ( ) { char * data ; void ( * funcPtr ) ( char * ) = nxkG2BSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; funcPtr ( data ) ; }  static void nxkB2GSink ( char * data ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } static void nxkB2G ( ) { char * data ; void ( * funcPtr ) ( char * ) = nxkB2GSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } funcPtr ( data ) ; } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_44_nxk ( ) { nxkG2B ( ) ; nxkB2G ( ) ; } CWE134 goodpositive
static void ypxSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_45_ypxData ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_45_ypx ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_45_ypxData = data ; ypxSink ( ) ; } CWE134 badpositive
static void hdlG2BSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_45_hdlG2BData ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } static void hdlG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_45_hdlG2BData = data ; hdlG2BSink ( ) ; }  static void hdlB2GSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_45_hdlB2GData ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } static void hdlB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; }   recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( connectSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_45_hdlB2GData = data ; hdlB2GSink ( ) ; } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_45_hdl ( ) { hdlG2B ( ) ; hdlB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_51b_rbxSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_51b_xodG2BSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_51b_xodB2GSink ( char * data ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_52c_jazSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_52c_cynG2BSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_52c_cynB2GSink ( char * data ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_53d_hmeSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_53d_ryaG2BSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_53d_ryaB2GSink ( char * data ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_54e_rggSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_54e_civG2BSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_54e_civB2GSink ( char * data ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
char * CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_61b_rxuSource ( char * data ) ; void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_61_rxu ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_61b_rxuSource ( data ) ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
char * CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_61b_qjfG2BSource ( char * data ) ; static void qjfG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_61b_qjfG2BSource ( data ) ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  char * CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_61b_qjfB2GSource ( char * data ) ; static void qjfB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_61b_qjfB2GSource ( data ) ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_61_qjf ( ) { qjfG2B ( ) ; qjfB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_63b_bjjSink ( char * * dataPtr ) { char * data = * dataPtr ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_63b_byiG2BSink ( char * * dataPtr ) { char * data = * dataPtr ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_63b_byiB2GSink ( char * * dataPtr ) { char * data = * dataPtr ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_64b_xleSink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_64b_jpuG2BSink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_64b_jpuB2GSink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_65b_llaSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_65b_aejG2BSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_65b_aejB2GSink ( char * data ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_66b_ugnSink ( char * dataArray [ ] ) {  char * data = dataArray [ N ] ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_66b_nhiG2BSink ( char * dataArray [ ] ) { char * data = dataArray [ N ] ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_66b_nhiB2GSink ( char * dataArray [ ] ) { char * data = dataArray [ N ] ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_67b_jboSink ( CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_67_structType myStruct ) { char * data = myStruct.structFirst ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_67b_ckgG2BSink ( CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_67_structType myStruct ) { char * data = myStruct.structFirst ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_67b_ckgB2GSink ( CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_67_structType myStruct ) { char * data = myStruct.structFirst ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_68b_jgpSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_68_jgpData ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_68b_eijG2BSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_68_eijG2BData ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_68b_eijB2GSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_connect_socket_snprintf_68_eijB2GData ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_fprintf_01_yoz ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } }  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
static void nizG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ;  WARNINGLINE fprintf ( stdout , data ) ; }  static void nizB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } }  fprintf ( stdout , " %s\n " , data ) ; } void CWE134_Uncontrolled_Format_String__char_console_fprintf_01_niz ( ) { nizG2B ( ) ; nizB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_fprintf_02_snd ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void naaB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void naaB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void naaG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void naaG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  strcpy ( data , " STRING " ) ; } if ( N ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_fprintf_02_naa ( ) { naaB2G1 ( ) ; naaB2G2 ( ) ; naaG2B1 ( ) ; naaG2B2 ( ) ; } CWE134 goodpositive
static void jxxB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void jxxB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void jxxG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N ) {  fprintf ( stdout , data ) ; } }  static void jxxG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  strcpy ( data , " STRING " ) ; } if ( N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_fprintf_02_jxx ( ) { jxxB2G1 ( ) ; jxxB2G2 ( ) ; jxxG2B1 ( ) ; jxxG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_fprintf_03_yvg ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( N = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void zfiB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void zfiB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( N = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void zfiG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void zfiG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) {  strcpy ( data , " STRING " ) ; } if ( N = = N ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_fprintf_03_zfi ( ) { zfiB2G1 ( ) ; zfiB2G2 ( ) ; zfiG2B1 ( ) ; zfiG2B2 ( ) ; } CWE134 goodpositive
static void zjhB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void zjhB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( N = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void zjhG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N = = N ) {  fprintf ( stdout , data ) ; } }  static void zjhG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) {  strcpy ( data , " STRING " ) ; } if ( N = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_fprintf_03_zjh ( ) { zjhB2G1 ( ) ; zjhB2G2 ( ) ; zjhG2B1 ( ) ; zjhG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_fprintf_04_rqg ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( STATIC_CONST_TRUE ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void ldkB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void ldkB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( STATIC_CONST_TRUE ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void ldkG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void ldkG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_fprintf_04_ldk ( ) { ldkB2G1 ( ) ; ldkB2G2 ( ) ; ldkG2B1 ( ) ; ldkG2B2 ( ) ; } CWE134 goodpositive
static void fhpB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void fhpB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( STATIC_CONST_TRUE ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void fhpG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) {  fprintf ( stdout , data ) ; } }  static void fhpG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_fprintf_04_fhp ( ) { fhpB2G1 ( ) ; fhpB2G2 ( ) ; fhpG2B1 ( ) ; fhpG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_fprintf_05_guf ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticTrue ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void pxtB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void pxtB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticTrue ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void pxtG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void pxtG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_fprintf_05_pxt ( ) { pxtB2G1 ( ) ; pxtB2G2 ( ) ; pxtG2B1 ( ) ; pxtG2B2 ( ) ; } CWE134 goodpositive
static void wihB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void wihB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticTrue ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void wihG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) {  fprintf ( stdout , data ) ; } }  static void wihG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_fprintf_05_wih ( ) { wihB2G1 ( ) ; wihB2G2 ( ) ; wihG2B1 ( ) ; wihG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_fprintf_06_ufo ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( STATIC_CONST_FIVE = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void ztdB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void ztdB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( STATIC_CONST_FIVE = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void ztdG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void ztdG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_fprintf_06_ztd ( ) { ztdB2G1 ( ) ; ztdB2G2 ( ) ; ztdG2B1 ( ) ; ztdG2B2 ( ) ; } CWE134 goodpositive
static void nmaB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void nmaB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( STATIC_CONST_FIVE = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void nmaG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) {  fprintf ( stdout , data ) ; } }  static void nmaG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_fprintf_06_nma ( ) { nmaB2G1 ( ) ; nmaB2G2 ( ) ; nmaG2B1 ( ) ; nmaG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_fprintf_07_xqk ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticFive = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void qpwB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void qpwB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticFive = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void qpwG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void qpwG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_fprintf_07_qpw ( ) { qpwB2G1 ( ) ; qpwB2G2 ( ) ; qpwG2B1 ( ) ; qpwG2B2 ( ) ; } CWE134 goodpositive
static void bnjB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void bnjB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticFive = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void bnjG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) {  fprintf ( stdout , data ) ; } }  static void bnjG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_fprintf_07_bnj ( ) { bnjB2G1 ( ) ; bnjB2G2 ( ) ; bnjG2B1 ( ) ; bnjG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_fprintf_08_gjw ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticReturnsTrue ( ) ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void zeiB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void zeiB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticReturnsTrue ( ) ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void zeiG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void zeiG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_fprintf_08_zei ( ) { zeiB2G1 ( ) ; zeiB2G2 ( ) ; zeiG2B1 ( ) ; zeiG2B2 ( ) ; } CWE134 goodpositive
static void fvnB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void fvnB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticReturnsTrue ( ) ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void fvnG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) {  fprintf ( stdout , data ) ; } }  static void fvnG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_fprintf_08_fvn ( ) { fvnB2G1 ( ) ; fvnB2G2 ( ) ; fvnG2B1 ( ) ; fvnG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_fprintf_09_jtm ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( GLOBAL_CONST_TRUE ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void ipqB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void ipqB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( GLOBAL_CONST_TRUE ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void ipqG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void ipqG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_fprintf_09_ipq ( ) { ipqB2G1 ( ) ; ipqB2G2 ( ) ; ipqG2B1 ( ) ; ipqG2B2 ( ) ; } CWE134 goodpositive
static void jyfB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void jyfB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( GLOBAL_CONST_TRUE ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void jyfG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) {  fprintf ( stdout , data ) ; } }  static void jyfG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_fprintf_09_jyf ( ) { jyfB2G1 ( ) ; jyfB2G2 ( ) ; jyfG2B1 ( ) ; jyfG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_fprintf_10_hfn ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalTrue ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void dkzB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void dkzB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalTrue ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void dkzG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void dkzG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_fprintf_10_dkz ( ) { dkzB2G1 ( ) ; dkzB2G2 ( ) ; dkzG2B1 ( ) ; dkzG2B2 ( ) ; } CWE134 goodpositive
static void sycB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void sycB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalTrue ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void sycG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) {  fprintf ( stdout , data ) ; } }  static void sycG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_fprintf_10_syc ( ) { sycB2G1 ( ) ; sycB2G2 ( ) ; sycG2B1 ( ) ; sycG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_fprintf_11_wvk ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalReturnsTrue ( ) ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void jybB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void jybB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalReturnsTrue ( ) ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void jybG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void jybG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_fprintf_11_jyb ( ) { jybB2G1 ( ) ; jybB2G2 ( ) ; jybG2B1 ( ) ; jybG2B2 ( ) ; } CWE134 goodpositive
static void ooyB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void ooyB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalReturnsTrue ( ) ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void ooyG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) {  fprintf ( stdout , data ) ; } }  static void ooyG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_fprintf_11_ooy ( ) { ooyB2G1 ( ) ; ooyB2G2 ( ) ; ooyG2B1 ( ) ; ooyG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_fprintf_12_ixj ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) {  WARNINGLINE fprintf ( stdout , data ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } } CWE134 badpositive
static void mvgB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } else { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalReturnsTrueOrFalse ( ) ) {  fprintf ( stdout , " %s\n " , data ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void mvgG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) {  strcpy ( data , " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) {  WARNINGLINE fprintf ( stdout , data ) ; } else {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_fprintf_12_mvg ( ) { mvgB2G ( ) ; mvgG2B ( ) ; } CWE134 goodpositive
static void rerB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } else { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalReturnsTrueOrFalse ( ) ) {  fprintf ( stdout , " %s\n " , data ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void rerG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) {  strcpy ( data , " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) {  fprintf ( stdout , data ) ; } else {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_fprintf_12_rer ( ) { rerB2G ( ) ; rerG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_fprintf_13_tty ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( GLOBAL_CONST_FIVE = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void vxeB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void vxeB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( GLOBAL_CONST_FIVE = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void vxeG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void vxeG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_fprintf_13_vxe ( ) { vxeB2G1 ( ) ; vxeB2G2 ( ) ; vxeG2B1 ( ) ; vxeG2B2 ( ) ; } CWE134 goodpositive
static void zqaB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void zqaB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( GLOBAL_CONST_FIVE = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void zqaG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) {  fprintf ( stdout , data ) ; } }  static void zqaG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_fprintf_13_zqa ( ) { zqaB2G1 ( ) ; zqaB2G2 ( ) ; zqaG2B1 ( ) ; zqaG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_fprintf_14_kdp ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalFive = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void axjB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void axjB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalFive = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void axjG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void axjG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_fprintf_14_axj ( ) { axjB2G1 ( ) ; axjB2G2 ( ) ; axjG2B1 ( ) ; axjG2B2 ( ) ; } CWE134 goodpositive
static void pyrB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void pyrB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalFive = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void pyrG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) {  fprintf ( stdout , data ) ; } }  static void pyrG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_fprintf_14_pyr ( ) { pyrB2G1 ( ) ; pyrB2G2 ( ) ; pyrG2B1 ( ) ; pyrG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_fprintf_15_klf ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  WARNINGLINE fprintf ( stdout , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } } CWE134 badpositive
static void hiqB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printLine ( " STRING " ) ; break ; default:  fprintf ( stdout , " %s\n " , data ) ; break ; } }  static void hiqB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  fprintf ( stdout , " %s\n " , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } }  static void hiqG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  printLine ( " STRING " ) ; break ; default:  strcpy ( data , " STRING " ) ; break ; } switch ( N ) { case 7:  WARNINGLINE fprintf ( stdout , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } }  static void hiqG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  strcpy ( data , " STRING " ) ; break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  fprintf ( stdout , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } } void CWE134_Uncontrolled_Format_String__char_console_fprintf_15_hiq ( ) { hiqB2G1 ( ) ; hiqB2G2 ( ) ; hiqG2B1 ( ) ; hiqG2B2 ( ) ; } CWE134 goodpositive
static void drzB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printLine ( " STRING " ) ; break ; default:  fprintf ( stdout , " %s\n " , data ) ; break ; } }  static void drzB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  fprintf ( stdout , " %s\n " , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } }  static void drzG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  printLine ( " STRING " ) ; break ; default:  strcpy ( data , " STRING " ) ; break ; } switch ( N ) { case 7:  fprintf ( stdout , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } }  static void drzG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  strcpy ( data , " STRING " ) ; break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  WARNINGLINE fprintf ( stdout , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } } void CWE134_Uncontrolled_Format_String__char_console_fprintf_15_drz ( ) { drzB2G1 ( ) ; drzB2G2 ( ) ; drzG2B1 ( ) ; drzG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_fprintf_16_mpc ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } break ; } while ( N ) {  WARNINGLINE fprintf ( stdout , data ) ; break ; } } CWE134 badpositive
static void lxhB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } break ; } while ( N ) {  fprintf ( stdout , " %s\n " , data ) ; break ; } }  static void lxhG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) {  strcpy ( data , " STRING " ) ; break ; } while ( N ) {  WARNINGLINE fprintf ( stdout , data ) ; break ; } } void CWE134_Uncontrolled_Format_String__char_console_fprintf_16_lxh ( ) { lxhB2G ( ) ; lxhG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_fprintf_17_agw ( ) { int i , j ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( i = N ; i < N ; i + + ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } for ( j = N ; j < N ; j + + ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void uszB2G ( ) { int i , k ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( i = N ; i < N ; i + + ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } for ( k = N ; k < N ; k + + ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void uszG2B ( ) { int h , j ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( h = N ; h < N ; h + + ) {  strcpy ( data , " STRING " ) ; } for ( j = N ; j < N ; j + + ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_fprintf_17_usz ( ) { uszB2G ( ) ; uszG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_fprintf_18_pzh ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source: {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } goto sink ; sink:  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
static void ldzB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source: {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } goto sink ; sink:  fprintf ( stdout , " %s\n " , data ) ; }  static void ldzG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source:  strcpy ( data , " STRING " ) ; goto sink ; sink:  WARNINGLINE fprintf ( stdout , data ) ; } void CWE134_Uncontrolled_Format_String__char_console_fprintf_18_ldz ( ) { ldzB2G ( ) ; ldzG2B ( ) ; } CWE134 goodpositive
static int xiyStatic = N ; static void xiySink ( char * data ) { if ( xiyStatic ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_fprintf_21_xiy ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } xiyStatic = N ;  xiySink ( data ) ; } CWE134 badpositive
static int ptcB2G1Static = N ; static int ptcB2G2Static = N ; static int ptcG2BStatic = N ;  static void ptcB2G1Sink ( char * data ) { if ( ptcB2G1Static ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } } static void ptcB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } ptcB2G1Static = N ;  ptcB2G1Sink ( data ) ; }  static void ptcB2G2Sink ( char * data ) { if ( ptcB2G2Static ) {  fprintf ( stdout , " %s\n " , data ) ; } } static void ptcB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } ptcB2G2Static = N ;  ptcB2G2Sink ( data ) ; }  static void ptcG2BSink ( char * data ) { if ( ptcG2BStatic ) {  WARNINGLINE fprintf ( stdout , data ) ; } } static void ptcG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; ptcG2BStatic = N ;  ptcG2BSink ( data ) ; } void CWE134_Uncontrolled_Format_String__char_console_fprintf_21_ptc ( ) { ptcB2G1 ( ) ; ptcB2G2 ( ) ; ptcG2B ( ) ; } CWE134 goodpositive
extern int CWE134_Uncontrolled_Format_String__char_console_fprintf_22_jhzGlobal ; void CWE134_Uncontrolled_Format_String__char_console_fprintf_22_jhzSink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_console_fprintf_22_jhzGlobal ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
extern int CWE134_Uncontrolled_Format_String__char_console_fprintf_22_rraB2G1Global ; extern int CWE134_Uncontrolled_Format_String__char_console_fprintf_22_rraB2G2Global ; extern int CWE134_Uncontrolled_Format_String__char_console_fprintf_22_rraG2BGlobal ;  void CWE134_Uncontrolled_Format_String__char_console_fprintf_22_rraB2G1Sink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_console_fprintf_22_rraB2G1Global ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  void CWE134_Uncontrolled_Format_String__char_console_fprintf_22_rraB2G2Sink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_console_fprintf_22_rraB2G2Global ) {  fprintf ( stdout , " %s\n " , data ) ; } }  void CWE134_Uncontrolled_Format_String__char_console_fprintf_22_rraG2BSink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_console_fprintf_22_rraG2BGlobal ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_fprintf_31_vvs ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } { char * dataCopy = data ; char * data = dataCopy ;  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void hoiG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; { char * dataCopy = data ; char * data = dataCopy ;  WARNINGLINE fprintf ( stdout , data ) ; } }  static void hoiB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } { char * dataCopy = data ; char * data = dataCopy ;  fprintf ( stdout , " %s\n " , data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_fprintf_31_hoi ( ) { hoiG2B ( ) ; hoiB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_fprintf_32_rym ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } * dataPtr1 = data ; } { char * data = * dataPtr2 ;  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void julG2B ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ;  strcpy ( data , " STRING " ) ; * dataPtr1 = data ; } { char * data = * dataPtr2 ;  WARNINGLINE fprintf ( stdout , data ) ; } }  static void julB2G ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } * dataPtr1 = data ; } { char * data = * dataPtr2 ;  fprintf ( stdout , " %s\n " , data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_fprintf_32_jul ( ) { julG2B ( ) ; julB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_fprintf_34_ywg ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_console_fprintf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ;  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void volG2B ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_console_fprintf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ;  WARNINGLINE fprintf ( stdout , data ) ; } }  static void volB2G ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_console_fprintf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ;  fprintf ( stdout , " %s\n " , data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_fprintf_34_vol ( ) { volG2B ( ) ; volB2G ( ) ; } CWE134 goodpositive
static void qivSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } void CWE134_Uncontrolled_Format_String__char_console_fprintf_41_qiv ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } qivSink ( data ) ; } CWE134 badpositive
static void xdsG2BSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } static void xdsG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; xdsG2BSink ( data ) ; }  static void xdsB2GSink ( char * data ) {  fprintf ( stdout , " %s\n " , data ) ; } static void xdsB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } xdsB2GSink ( data ) ; } void CWE134_Uncontrolled_Format_String__char_console_fprintf_41_xds ( ) { xdsB2G ( ) ; xdsG2B ( ) ; } CWE134 goodpositive
static char * dtjSource ( char * data ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } return data ; } void CWE134_Uncontrolled_Format_String__char_console_fprintf_42_dtj ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = dtjSource ( data ) ;  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
static char * dyaG2BSource ( char * data ) {  strcpy ( data , " STRING " ) ; return data ; } static void dyaG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = dyaG2BSource ( data ) ;  WARNINGLINE fprintf ( stdout , data ) ; }  static char * dyaB2GSource ( char * data ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } return data ; } static void dyaB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = dyaB2GSource ( data ) ;  fprintf ( stdout , " %s\n " , data ) ; } void CWE134_Uncontrolled_Format_String__char_console_fprintf_42_dya ( ) { dyaB2G ( ) ; dyaG2B ( ) ; } CWE134 goodpositive
static void xttSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } void CWE134_Uncontrolled_Format_String__char_console_fprintf_44_xtt ( ) { char * data ;  void ( * funcPtr ) ( char * ) = xttSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } }  funcPtr ( data ) ; } CWE134 badpositive
static void dytG2BSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } static void dytG2B ( ) { char * data ; void ( * funcPtr ) ( char * ) = dytG2BSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; funcPtr ( data ) ; }  static void dytB2GSink ( char * data ) {  fprintf ( stdout , " %s\n " , data ) ; } static void dytB2G ( ) { char * data ; void ( * funcPtr ) ( char * ) = dytB2GSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } funcPtr ( data ) ; } void CWE134_Uncontrolled_Format_String__char_console_fprintf_44_dyt ( ) { dytG2B ( ) ; dytB2G ( ) ; } CWE134 goodpositive
static void crhSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_console_fprintf_45_crhData ;  WARNINGLINE fprintf ( stdout , data ) ; } void CWE134_Uncontrolled_Format_String__char_console_fprintf_45_crh ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } CWE134_Uncontrolled_Format_String__char_console_fprintf_45_crhData = data ; crhSink ( ) ; } CWE134 badpositive
static void hakG2BSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_console_fprintf_45_hakG2BData ;  WARNINGLINE fprintf ( stdout , data ) ; } static void hakG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; CWE134_Uncontrolled_Format_String__char_console_fprintf_45_hakG2BData = data ; hakG2BSink ( ) ; }  static void hakB2GSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_console_fprintf_45_hakB2GData ;  fprintf ( stdout , " %s\n " , data ) ; } static void hakB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } CWE134_Uncontrolled_Format_String__char_console_fprintf_45_hakB2GData = data ; hakB2GSink ( ) ; } void CWE134_Uncontrolled_Format_String__char_console_fprintf_45_hak ( ) { hakG2B ( ) ; hakB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_fprintf_51b_glySink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_console_fprintf_51b_eezG2BSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_console_fprintf_51b_eezB2GSink ( char * data ) {  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_fprintf_52c_gdfSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_console_fprintf_52c_fakG2BSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_console_fprintf_52c_fakB2GSink ( char * data ) {  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_fprintf_53d_mgwSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_console_fprintf_53d_aaaG2BSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_console_fprintf_53d_aaaB2GSink ( char * data ) {  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_fprintf_54e_husSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_console_fprintf_54e_gzwG2BSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_console_fprintf_54e_gzwB2GSink ( char * data ) {  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
char * CWE134_Uncontrolled_Format_String__char_console_fprintf_61b_fbpSource ( char * data ) ; void CWE134_Uncontrolled_Format_String__char_console_fprintf_61_fbp ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_console_fprintf_61b_fbpSource ( data ) ;  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
char * CWE134_Uncontrolled_Format_String__char_console_fprintf_61b_gjiG2BSource ( char * data ) ; static void gjiG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_console_fprintf_61b_gjiG2BSource ( data ) ;  WARNINGLINE fprintf ( stdout , data ) ; }  char * CWE134_Uncontrolled_Format_String__char_console_fprintf_61b_gjiB2GSource ( char * data ) ; static void gjiB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_console_fprintf_61b_gjiB2GSource ( data ) ;  fprintf ( stdout , " %s\n " , data ) ; } void CWE134_Uncontrolled_Format_String__char_console_fprintf_61_gji ( ) { gjiG2B ( ) ; gjiB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_fprintf_63b_kulSink ( char * * dataPtr ) { char * data = * dataPtr ;  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_console_fprintf_63b_qsrG2BSink ( char * * dataPtr ) { char * data = * dataPtr ;  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_console_fprintf_63b_qsrB2GSink ( char * * dataPtr ) { char * data = * dataPtr ;  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_fprintf_64b_xduSink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ;  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_console_fprintf_64b_qxkG2BSink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ;  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_console_fprintf_64b_qxkB2GSink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ;  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_fprintf_65b_xnvSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_console_fprintf_65b_nqoG2BSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_console_fprintf_65b_nqoB2GSink ( char * data ) {  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_fprintf_66b_fwhSink ( char * dataArray [ ] ) {  char * data = dataArray [ N ] ;  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_console_fprintf_66b_theG2BSink ( char * dataArray [ ] ) { char * data = dataArray [ N ] ;  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_console_fprintf_66b_theB2GSink ( char * dataArray [ ] ) { char * data = dataArray [ N ] ;  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_fprintf_67b_rijSink ( CWE134_Uncontrolled_Format_String__char_console_fprintf_67_structType myStruct ) { char * data = myStruct.structFirst ;  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_console_fprintf_67b_cdfG2BSink ( CWE134_Uncontrolled_Format_String__char_console_fprintf_67_structType myStruct ) { char * data = myStruct.structFirst ;  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_console_fprintf_67b_cdfB2GSink ( CWE134_Uncontrolled_Format_String__char_console_fprintf_67_structType myStruct ) { char * data = myStruct.structFirst ;  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_fprintf_68b_ninSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_console_fprintf_68_ninData ;  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_console_fprintf_68b_eisG2BSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_console_fprintf_68_eisG2BData ;  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_console_fprintf_68b_eisB2GSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_console_fprintf_68_eisB2GData ;  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_printf_01_wqb ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } }  WARNINGLINE printf ( data ) ; } CWE134 badpositive
static void jduG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ;  WARNINGLINE printf ( data ) ; }  static void jduB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } }  printf ( " %s\n " , data ) ; } void CWE134_Uncontrolled_Format_String__char_console_printf_01_jdu ( ) { jduG2B ( ) ; jduB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_printf_02_gqj ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( N ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void ohmB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void ohmB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( N ) {  printf ( " %s\n " , data ) ; } }  static void ohmG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N ) {  WARNINGLINE printf ( data ) ; } }  static void ohmG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  strcpy ( data , " STRING " ) ; } if ( N ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_printf_02_ohm ( ) { ohmB2G1 ( ) ; ohmB2G2 ( ) ; ohmG2B1 ( ) ; ohmG2B2 ( ) ; } CWE134 goodpositive
static void turB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void turB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( N ) {  printf ( " %s\n " , data ) ; } }  static void turG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N ) {  printf ( data ) ; } }  static void turG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  strcpy ( data , " STRING " ) ; } if ( N ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_printf_02_tur ( ) { turB2G1 ( ) ; turB2G2 ( ) ; turG2B1 ( ) ; turG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_printf_03_sto ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( N = = N ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void rnkB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void rnkB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( N = = N ) {  printf ( " %s\n " , data ) ; } }  static void rnkG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N = = N ) {  WARNINGLINE printf ( data ) ; } }  static void rnkG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) {  strcpy ( data , " STRING " ) ; } if ( N = = N ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_printf_03_rnk ( ) { rnkB2G1 ( ) ; rnkB2G2 ( ) ; rnkG2B1 ( ) ; rnkG2B2 ( ) ; } CWE134 goodpositive
static void lexB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void lexB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( N = = N ) {  printf ( " %s\n " , data ) ; } }  static void lexG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N = = N ) {  printf ( data ) ; } }  static void lexG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) {  strcpy ( data , " STRING " ) ; } if ( N = = N ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_printf_03_lex ( ) { lexB2G1 ( ) ; lexB2G2 ( ) ; lexG2B1 ( ) ; lexG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_printf_04_bqw ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( STATIC_CONST_TRUE ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void coaB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void coaB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( STATIC_CONST_TRUE ) {  printf ( " %s\n " , data ) ; } }  static void coaG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) {  WARNINGLINE printf ( data ) ; } }  static void coaG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_printf_04_coa ( ) { coaB2G1 ( ) ; coaB2G2 ( ) ; coaG2B1 ( ) ; coaG2B2 ( ) ; } CWE134 goodpositive
static void zacB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void zacB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( STATIC_CONST_TRUE ) {  printf ( " %s\n " , data ) ; } }  static void zacG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) {  printf ( data ) ; } }  static void zacG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_printf_04_zac ( ) { zacB2G1 ( ) ; zacB2G2 ( ) ; zacG2B1 ( ) ; zacG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_printf_05_pxz ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticTrue ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void imyB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void imyB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticTrue ) {  printf ( " %s\n " , data ) ; } }  static void imyG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) {  WARNINGLINE printf ( data ) ; } }  static void imyG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_printf_05_imy ( ) { imyB2G1 ( ) ; imyB2G2 ( ) ; imyG2B1 ( ) ; imyG2B2 ( ) ; } CWE134 goodpositive
static void wclB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void wclB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticTrue ) {  printf ( " %s\n " , data ) ; } }  static void wclG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) {  printf ( data ) ; } }  static void wclG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_printf_05_wcl ( ) { wclB2G1 ( ) ; wclB2G2 ( ) ; wclG2B1 ( ) ; wclG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_printf_06_lnd ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( STATIC_CONST_FIVE = = N ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void qxlB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void qxlB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( STATIC_CONST_FIVE = = N ) {  printf ( " %s\n " , data ) ; } }  static void qxlG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) {  WARNINGLINE printf ( data ) ; } }  static void qxlG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_printf_06_qxl ( ) { qxlB2G1 ( ) ; qxlB2G2 ( ) ; qxlG2B1 ( ) ; qxlG2B2 ( ) ; } CWE134 goodpositive
static void kciB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void kciB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( STATIC_CONST_FIVE = = N ) {  printf ( " %s\n " , data ) ; } }  static void kciG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) {  printf ( data ) ; } }  static void kciG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_printf_06_kci ( ) { kciB2G1 ( ) ; kciB2G2 ( ) ; kciG2B1 ( ) ; kciG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_printf_07_plw ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticFive = = N ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void lwqB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void lwqB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticFive = = N ) {  printf ( " %s\n " , data ) ; } }  static void lwqG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) {  WARNINGLINE printf ( data ) ; } }  static void lwqG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_printf_07_lwq ( ) { lwqB2G1 ( ) ; lwqB2G2 ( ) ; lwqG2B1 ( ) ; lwqG2B2 ( ) ; } CWE134 goodpositive
static void rtbB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void rtbB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticFive = = N ) {  printf ( " %s\n " , data ) ; } }  static void rtbG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) {  printf ( data ) ; } }  static void rtbG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_printf_07_rtb ( ) { rtbB2G1 ( ) ; rtbB2G2 ( ) ; rtbG2B1 ( ) ; rtbG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_printf_08_xqt ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticReturnsTrue ( ) ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void gqoB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void gqoB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticReturnsTrue ( ) ) {  printf ( " %s\n " , data ) ; } }  static void gqoG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) {  WARNINGLINE printf ( data ) ; } }  static void gqoG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_printf_08_gqo ( ) { gqoB2G1 ( ) ; gqoB2G2 ( ) ; gqoG2B1 ( ) ; gqoG2B2 ( ) ; } CWE134 goodpositive
static void tftB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void tftB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticReturnsTrue ( ) ) {  printf ( " %s\n " , data ) ; } }  static void tftG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) {  printf ( data ) ; } }  static void tftG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_printf_08_tft ( ) { tftB2G1 ( ) ; tftB2G2 ( ) ; tftG2B1 ( ) ; tftG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_printf_09_glt ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( GLOBAL_CONST_TRUE ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void jhmB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void jhmB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( GLOBAL_CONST_TRUE ) {  printf ( " %s\n " , data ) ; } }  static void jhmG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) {  WARNINGLINE printf ( data ) ; } }  static void jhmG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_printf_09_jhm ( ) { jhmB2G1 ( ) ; jhmB2G2 ( ) ; jhmG2B1 ( ) ; jhmG2B2 ( ) ; } CWE134 goodpositive
static void oykB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void oykB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( GLOBAL_CONST_TRUE ) {  printf ( " %s\n " , data ) ; } }  static void oykG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) {  printf ( data ) ; } }  static void oykG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_printf_09_oyk ( ) { oykB2G1 ( ) ; oykB2G2 ( ) ; oykG2B1 ( ) ; oykG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_printf_10_wvp ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalTrue ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void vxpB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void vxpB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalTrue ) {  printf ( " %s\n " , data ) ; } }  static void vxpG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) {  WARNINGLINE printf ( data ) ; } }  static void vxpG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_printf_10_vxp ( ) { vxpB2G1 ( ) ; vxpB2G2 ( ) ; vxpG2B1 ( ) ; vxpG2B2 ( ) ; } CWE134 goodpositive
static void bfsB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void bfsB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalTrue ) {  printf ( " %s\n " , data ) ; } }  static void bfsG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) {  printf ( data ) ; } }  static void bfsG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_printf_10_bfs ( ) { bfsB2G1 ( ) ; bfsB2G2 ( ) ; bfsG2B1 ( ) ; bfsG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_printf_11_emh ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalReturnsTrue ( ) ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void mqxB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void mqxB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalReturnsTrue ( ) ) {  printf ( " %s\n " , data ) ; } }  static void mqxG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) {  WARNINGLINE printf ( data ) ; } }  static void mqxG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_printf_11_mqx ( ) { mqxB2G1 ( ) ; mqxB2G2 ( ) ; mqxG2B1 ( ) ; mqxG2B2 ( ) ; } CWE134 goodpositive
static void shqB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void shqB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalReturnsTrue ( ) ) {  printf ( " %s\n " , data ) ; } }  static void shqG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) {  printf ( data ) ; } }  static void shqG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_printf_11_shq ( ) { shqB2G1 ( ) ; shqB2G2 ( ) ; shqG2B1 ( ) ; shqG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_printf_12_joj ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) {  WARNINGLINE printf ( data ) ; } else {  printf ( " %s\n " , data ) ; } } CWE134 badpositive
static void bgjB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } else { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalReturnsTrueOrFalse ( ) ) {  printf ( " %s\n " , data ) ; } else {  printf ( " %s\n " , data ) ; } }  static void bgjG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) {  strcpy ( data , " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) {  WARNINGLINE printf ( data ) ; } else {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_printf_12_bgj ( ) { bgjB2G ( ) ; bgjG2B ( ) ; } CWE134 goodpositive
static void fuwB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } else { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalReturnsTrueOrFalse ( ) ) {  printf ( " %s\n " , data ) ; } else {  printf ( " %s\n " , data ) ; } }  static void fuwG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) {  strcpy ( data , " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) {  printf ( data ) ; } else {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_printf_12_fuw ( ) { fuwB2G ( ) ; fuwG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_printf_13_tuk ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( GLOBAL_CONST_FIVE = = N ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void ymbB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void ymbB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( GLOBAL_CONST_FIVE = = N ) {  printf ( " %s\n " , data ) ; } }  static void ymbG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) {  WARNINGLINE printf ( data ) ; } }  static void ymbG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_printf_13_ymb ( ) { ymbB2G1 ( ) ; ymbB2G2 ( ) ; ymbG2B1 ( ) ; ymbG2B2 ( ) ; } CWE134 goodpositive
static void tcxB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void tcxB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( GLOBAL_CONST_FIVE = = N ) {  printf ( " %s\n " , data ) ; } }  static void tcxG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) {  printf ( data ) ; } }  static void tcxG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_printf_13_tcx ( ) { tcxB2G1 ( ) ; tcxB2G2 ( ) ; tcxG2B1 ( ) ; tcxG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_printf_14_ptm ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalFive = = N ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void nrdB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void nrdB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalFive = = N ) {  printf ( " %s\n " , data ) ; } }  static void nrdG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) {  WARNINGLINE printf ( data ) ; } }  static void nrdG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_printf_14_nrd ( ) { nrdB2G1 ( ) ; nrdB2G2 ( ) ; nrdG2B1 ( ) ; nrdG2B2 ( ) ; } CWE134 goodpositive
static void voaB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void voaB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalFive = = N ) {  printf ( " %s\n " , data ) ; } }  static void voaG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) {  printf ( data ) ; } }  static void voaG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_printf_14_voa ( ) { voaB2G1 ( ) ; voaB2G2 ( ) ; voaG2B1 ( ) ; voaG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_printf_15_kpi ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  WARNINGLINE printf ( data ) ; break ; default:  printLine ( " STRING " ) ; break ; } } CWE134 badpositive
static void cxnB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printLine ( " STRING " ) ; break ; default:  printf ( " %s\n " , data ) ; break ; } }  static void cxnB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printf ( " %s\n " , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } }  static void cxnG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  printLine ( " STRING " ) ; break ; default:  strcpy ( data , " STRING " ) ; break ; } switch ( N ) { case 7:  WARNINGLINE printf ( data ) ; break ; default:  printLine ( " STRING " ) ; break ; } }  static void cxnG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  strcpy ( data , " STRING " ) ; break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printf ( data ) ; break ; default:  printLine ( " STRING " ) ; break ; } } void CWE134_Uncontrolled_Format_String__char_console_printf_15_cxn ( ) { cxnB2G1 ( ) ; cxnB2G2 ( ) ; cxnG2B1 ( ) ; cxnG2B2 ( ) ; } CWE134 goodpositive
static void xjiB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printLine ( " STRING " ) ; break ; default:  printf ( " %s\n " , data ) ; break ; } }  static void xjiB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printf ( " %s\n " , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } }  static void xjiG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  printLine ( " STRING " ) ; break ; default:  strcpy ( data , " STRING " ) ; break ; } switch ( N ) { case 7:  printf ( data ) ; break ; default:  printLine ( " STRING " ) ; break ; } }  static void xjiG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  strcpy ( data , " STRING " ) ; break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  WARNINGLINE printf ( data ) ; break ; default:  printLine ( " STRING " ) ; break ; } } void CWE134_Uncontrolled_Format_String__char_console_printf_15_xji ( ) { xjiB2G1 ( ) ; xjiB2G2 ( ) ; xjiG2B1 ( ) ; xjiG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_printf_16_gru ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } break ; } while ( N ) {  WARNINGLINE printf ( data ) ; break ; } } CWE134 badpositive
static void bejB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } break ; } while ( N ) {  printf ( " %s\n " , data ) ; break ; } }  static void bejG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) {  strcpy ( data , " STRING " ) ; break ; } while ( N ) {  WARNINGLINE printf ( data ) ; break ; } } void CWE134_Uncontrolled_Format_String__char_console_printf_16_bej ( ) { bejB2G ( ) ; bejG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_printf_17_wyy ( ) { int i , j ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( i = N ; i < N ; i + + ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } for ( j = N ; j < N ; j + + ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void dtzB2G ( ) { int i , k ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( i = N ; i < N ; i + + ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } for ( k = N ; k < N ; k + + ) {  printf ( " %s\n " , data ) ; } }  static void dtzG2B ( ) { int h , j ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( h = N ; h < N ; h + + ) {  strcpy ( data , " STRING " ) ; } for ( j = N ; j < N ; j + + ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_printf_17_dtz ( ) { dtzB2G ( ) ; dtzG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_printf_18_lux ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source: {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } goto sink ; sink:  WARNINGLINE printf ( data ) ; } CWE134 badpositive
static void lmoB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source: {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } goto sink ; sink:  printf ( " %s\n " , data ) ; }  static void lmoG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source:  strcpy ( data , " STRING " ) ; goto sink ; sink:  WARNINGLINE printf ( data ) ; } void CWE134_Uncontrolled_Format_String__char_console_printf_18_lmo ( ) { lmoB2G ( ) ; lmoG2B ( ) ; } CWE134 goodpositive
static int zlwStatic = N ; static void zlwSink ( char * data ) { if ( zlwStatic ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_printf_21_zlw ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } zlwStatic = N ;  zlwSink ( data ) ; } CWE134 badpositive
static int saqB2G1Static = N ; static int saqB2G2Static = N ; static int saqG2BStatic = N ;  static void saqB2G1Sink ( char * data ) { if ( saqB2G1Static ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } } static void saqB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } saqB2G1Static = N ;  saqB2G1Sink ( data ) ; }  static void saqB2G2Sink ( char * data ) { if ( saqB2G2Static ) {  printf ( " %s\n " , data ) ; } } static void saqB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } saqB2G2Static = N ;  saqB2G2Sink ( data ) ; }  static void saqG2BSink ( char * data ) { if ( saqG2BStatic ) {  WARNINGLINE printf ( data ) ; } } static void saqG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; saqG2BStatic = N ;  saqG2BSink ( data ) ; } void CWE134_Uncontrolled_Format_String__char_console_printf_21_saq ( ) { saqB2G1 ( ) ; saqB2G2 ( ) ; saqG2B ( ) ; } CWE134 goodpositive
extern int CWE134_Uncontrolled_Format_String__char_console_printf_22_uxoGlobal ; void CWE134_Uncontrolled_Format_String__char_console_printf_22_uxoSink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_console_printf_22_uxoGlobal ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
extern int CWE134_Uncontrolled_Format_String__char_console_printf_22_ynqB2G1Global ; extern int CWE134_Uncontrolled_Format_String__char_console_printf_22_ynqB2G2Global ; extern int CWE134_Uncontrolled_Format_String__char_console_printf_22_ynqG2BGlobal ;  void CWE134_Uncontrolled_Format_String__char_console_printf_22_ynqB2G1Sink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_console_printf_22_ynqB2G1Global ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  void CWE134_Uncontrolled_Format_String__char_console_printf_22_ynqB2G2Sink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_console_printf_22_ynqB2G2Global ) {  printf ( " %s\n " , data ) ; } }  void CWE134_Uncontrolled_Format_String__char_console_printf_22_ynqG2BSink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_console_printf_22_ynqG2BGlobal ) {  WARNINGLINE printf ( data ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_printf_31_kxf ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } { char * dataCopy = data ; char * data = dataCopy ;  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void nlnG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; { char * dataCopy = data ; char * data = dataCopy ;  WARNINGLINE printf ( data ) ; } }  static void nlnB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } { char * dataCopy = data ; char * data = dataCopy ;  printf ( " %s\n " , data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_printf_31_nln ( ) { nlnG2B ( ) ; nlnB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_printf_32_zcu ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } * dataPtr1 = data ; } { char * data = * dataPtr2 ;  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void nnaG2B ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ;  strcpy ( data , " STRING " ) ; * dataPtr1 = data ; } { char * data = * dataPtr2 ;  WARNINGLINE printf ( data ) ; } }  static void nnaB2G ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } * dataPtr1 = data ; } { char * data = * dataPtr2 ;  printf ( " %s\n " , data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_printf_32_nna ( ) { nnaG2B ( ) ; nnaB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_printf_34_fnk ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_console_printf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ;  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void oljG2B ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_console_printf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ;  WARNINGLINE printf ( data ) ; } }  static void oljB2G ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_console_printf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ;  printf ( " %s\n " , data ) ; } } void CWE134_Uncontrolled_Format_String__char_console_printf_34_olj ( ) { oljG2B ( ) ; oljB2G ( ) ; } CWE134 goodpositive
static void qjzSink ( char * data ) {  WARNINGLINE printf ( data ) ; } void CWE134_Uncontrolled_Format_String__char_console_printf_41_qjz ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } qjzSink ( data ) ; } CWE134 badpositive
static void pydG2BSink ( char * data ) {  WARNINGLINE printf ( data ) ; } static void pydG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; pydG2BSink ( data ) ; }  static void pydB2GSink ( char * data ) {  printf ( " %s\n " , data ) ; } static void pydB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } pydB2GSink ( data ) ; } void CWE134_Uncontrolled_Format_String__char_console_printf_41_pyd ( ) { pydB2G ( ) ; pydG2B ( ) ; } CWE134 goodpositive
static char * qyjSource ( char * data ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } return data ; } void CWE134_Uncontrolled_Format_String__char_console_printf_42_qyj ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = qyjSource ( data ) ;  WARNINGLINE printf ( data ) ; } CWE134 badpositive
static char * grgG2BSource ( char * data ) {  strcpy ( data , " STRING " ) ; return data ; } static void grgG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = grgG2BSource ( data ) ;  WARNINGLINE printf ( data ) ; }  static char * grgB2GSource ( char * data ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } return data ; } static void grgB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = grgB2GSource ( data ) ;  printf ( " %s\n " , data ) ; } void CWE134_Uncontrolled_Format_String__char_console_printf_42_grg ( ) { grgB2G ( ) ; grgG2B ( ) ; } CWE134 goodpositive
static void qugSink ( char * data ) {  WARNINGLINE printf ( data ) ; } void CWE134_Uncontrolled_Format_String__char_console_printf_44_qug ( ) { char * data ;  void ( * funcPtr ) ( char * ) = qugSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } }  funcPtr ( data ) ; } CWE134 badpositive
static void xwuG2BSink ( char * data ) {  WARNINGLINE printf ( data ) ; } static void xwuG2B ( ) { char * data ; void ( * funcPtr ) ( char * ) = xwuG2BSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; funcPtr ( data ) ; }  static void xwuB2GSink ( char * data ) {  printf ( " %s\n " , data ) ; } static void xwuB2G ( ) { char * data ; void ( * funcPtr ) ( char * ) = xwuB2GSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } funcPtr ( data ) ; } void CWE134_Uncontrolled_Format_String__char_console_printf_44_xwu ( ) { xwuG2B ( ) ; xwuB2G ( ) ; } CWE134 goodpositive
static void enxSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_console_printf_45_enxData ;  WARNINGLINE printf ( data ) ; } void CWE134_Uncontrolled_Format_String__char_console_printf_45_enx ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } CWE134_Uncontrolled_Format_String__char_console_printf_45_enxData = data ; enxSink ( ) ; } CWE134 badpositive
static void aeiG2BSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_console_printf_45_aeiG2BData ;  WARNINGLINE printf ( data ) ; } static void aeiG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; CWE134_Uncontrolled_Format_String__char_console_printf_45_aeiG2BData = data ; aeiG2BSink ( ) ; }  static void aeiB2GSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_console_printf_45_aeiB2GData ;  printf ( " %s\n " , data ) ; } static void aeiB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } CWE134_Uncontrolled_Format_String__char_console_printf_45_aeiB2GData = data ; aeiB2GSink ( ) ; } void CWE134_Uncontrolled_Format_String__char_console_printf_45_aei ( ) { aeiG2B ( ) ; aeiB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_printf_51b_sitSink ( char * data ) {  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_console_printf_51b_hnwG2BSink ( char * data ) {  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_console_printf_51b_hnwB2GSink ( char * data ) {  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_printf_52c_xrqSink ( char * data ) {  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_console_printf_52c_kboG2BSink ( char * data ) {  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_console_printf_52c_kboB2GSink ( char * data ) {  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_printf_53d_rqzSink ( char * data ) {  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_console_printf_53d_codG2BSink ( char * data ) {  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_console_printf_53d_codB2GSink ( char * data ) {  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_printf_54e_qdeSink ( char * data ) {  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_console_printf_54e_baaG2BSink ( char * data ) {  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_console_printf_54e_baaB2GSink ( char * data ) {  printf ( " %s\n " , data ) ; } CWE134 goodpositive
char * CWE134_Uncontrolled_Format_String__char_console_printf_61b_wddSource ( char * data ) ; void CWE134_Uncontrolled_Format_String__char_console_printf_61_wdd ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_console_printf_61b_wddSource ( data ) ;  WARNINGLINE printf ( data ) ; } CWE134 badpositive
char * CWE134_Uncontrolled_Format_String__char_console_printf_61b_lymG2BSource ( char * data ) ; static void lymG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_console_printf_61b_lymG2BSource ( data ) ;  WARNINGLINE printf ( data ) ; }  char * CWE134_Uncontrolled_Format_String__char_console_printf_61b_lymB2GSource ( char * data ) ; static void lymB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_console_printf_61b_lymB2GSource ( data ) ;  printf ( " %s\n " , data ) ; } void CWE134_Uncontrolled_Format_String__char_console_printf_61_lym ( ) { lymG2B ( ) ; lymB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_printf_63b_gnjSink ( char * * dataPtr ) { char * data = * dataPtr ;  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_console_printf_63b_sglG2BSink ( char * * dataPtr ) { char * data = * dataPtr ;  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_console_printf_63b_sglB2GSink ( char * * dataPtr ) { char * data = * dataPtr ;  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_printf_64b_pquSink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ;  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_console_printf_64b_ntfG2BSink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ;  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_console_printf_64b_ntfB2GSink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ;  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_printf_65b_qyiSink ( char * data ) {  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_console_printf_65b_vmaG2BSink ( char * data ) {  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_console_printf_65b_vmaB2GSink ( char * data ) {  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_printf_66b_lmdSink ( char * dataArray [ ] ) {  char * data = dataArray [ N ] ;  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_console_printf_66b_hoaG2BSink ( char * dataArray [ ] ) { char * data = dataArray [ N ] ;  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_console_printf_66b_hoaB2GSink ( char * dataArray [ ] ) { char * data = dataArray [ N ] ;  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_printf_67b_lebSink ( CWE134_Uncontrolled_Format_String__char_console_printf_67_structType myStruct ) { char * data = myStruct.structFirst ;  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_console_printf_67b_rfhG2BSink ( CWE134_Uncontrolled_Format_String__char_console_printf_67_structType myStruct ) { char * data = myStruct.structFirst ;  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_console_printf_67b_rfhB2GSink ( CWE134_Uncontrolled_Format_String__char_console_printf_67_structType myStruct ) { char * data = myStruct.structFirst ;  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_printf_68b_afpSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_console_printf_68_afpData ;  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_console_printf_68b_bsxG2BSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_console_printf_68_bsxG2BData ;  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_console_printf_68b_bsxB2GSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_console_printf_68_bsxB2GData ;  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_snprintf_01_aji ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
static void lstG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  static void lstB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } void CWE134_Uncontrolled_Format_String__char_console_snprintf_01_lst ( ) { lstG2B ( ) ; lstB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_snprintf_02_kar ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void lphB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void lphB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void lphG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void lphG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  strcpy ( data , " STRING " ) ; } if ( N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_console_snprintf_02_lph ( ) { lphB2G1 ( ) ; lphB2G2 ( ) ; lphG2B1 ( ) ; lphG2B2 ( ) ; } CWE134 goodpositive
static void blpB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void blpB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void blpG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void blpG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  strcpy ( data , " STRING " ) ; } if ( N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_console_snprintf_02_blp ( ) { blpB2G1 ( ) ; blpB2G2 ( ) ; blpG2B1 ( ) ; blpG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_snprintf_03_clc ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( N = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void lspB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( N ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void lspB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( N = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void lspG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void lspG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) {  strcpy ( data , " STRING " ) ; } if ( N = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_console_snprintf_03_lsp ( ) { lspB2G1 ( ) ; lspB2G2 ( ) ; lspG2B1 ( ) ; lspG2B2 ( ) ; } CWE134 goodpositive
static void vvqB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( N ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void vvqB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( N = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void vvqG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void vvqG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) {  strcpy ( data , " STRING " ) ; } if ( N = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_console_snprintf_03_vvq ( ) { vvqB2G1 ( ) ; vvqB2G2 ( ) ; vvqG2B1 ( ) ; vvqG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_snprintf_04_knu ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( STATIC_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void mkaB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void mkaB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( STATIC_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void mkaG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void mkaG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_console_snprintf_04_mka ( ) { mkaB2G1 ( ) ; mkaB2G2 ( ) ; mkaG2B1 ( ) ; mkaG2B2 ( ) ; } CWE134 goodpositive
static void fsbB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void fsbB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( STATIC_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void fsbG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void fsbG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_console_snprintf_04_fsb ( ) { fsbB2G1 ( ) ; fsbB2G2 ( ) ; fsbG2B1 ( ) ; fsbG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_snprintf_05_ruk ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticTrue ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void wsnB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticFalse ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void wsnB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticTrue ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void wsnG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void wsnG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_console_snprintf_05_wsn ( ) { wsnB2G1 ( ) ; wsnB2G2 ( ) ; wsnG2B1 ( ) ; wsnG2B2 ( ) ; } CWE134 goodpositive
static void lvxB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticFalse ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void lvxB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticTrue ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void lvxG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void lvxG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_console_snprintf_05_lvx ( ) { lvxB2G1 ( ) ; lvxB2G2 ( ) ; lvxG2B1 ( ) ; lvxG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_snprintf_06_gqp ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( STATIC_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void iruB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void iruB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( STATIC_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void iruG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void iruG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_console_snprintf_06_iru ( ) { iruB2G1 ( ) ; iruB2G2 ( ) ; iruG2B1 ( ) ; iruG2B2 ( ) ; } CWE134 goodpositive
static void sjwB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void sjwB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( STATIC_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void sjwG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void sjwG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_console_snprintf_06_sjw ( ) { sjwB2G1 ( ) ; sjwB2G2 ( ) ; sjwG2B1 ( ) ; sjwG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_snprintf_07_uau ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticFive = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void redB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void redB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticFive = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void redG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void redG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_console_snprintf_07_red ( ) { redB2G1 ( ) ; redB2G2 ( ) ; redG2B1 ( ) ; redG2B2 ( ) ; } CWE134 goodpositive
static void jogB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void jogB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticFive = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void jogG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void jogG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_console_snprintf_07_jog ( ) { jogB2G1 ( ) ; jogB2G2 ( ) ; jogG2B1 ( ) ; jogG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_snprintf_08_ojr ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void onkB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void onkB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void onkG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void onkG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_console_snprintf_08_onk ( ) { onkB2G1 ( ) ; onkB2G2 ( ) ; onkG2B1 ( ) ; onkG2B2 ( ) ; } CWE134 goodpositive
static void pbfB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void pbfB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( staticReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void pbfG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void pbfG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_console_snprintf_08_pbf ( ) { pbfB2G1 ( ) ; pbfB2G2 ( ) ; pbfG2B1 ( ) ; pbfG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_snprintf_09_yfx ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( GLOBAL_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void ijaB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void ijaB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( GLOBAL_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void ijaG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void ijaG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_console_snprintf_09_ija ( ) { ijaB2G1 ( ) ; ijaB2G2 ( ) ; ijaG2B1 ( ) ; ijaG2B2 ( ) ; } CWE134 goodpositive
static void qznB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void qznB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( GLOBAL_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void qznG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void qznG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_console_snprintf_09_qzn ( ) { qznB2G1 ( ) ; qznB2G2 ( ) ; qznG2B1 ( ) ; qznG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_snprintf_10_kon ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalTrue ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void kgwB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalFalse ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void kgwB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalTrue ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void kgwG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void kgwG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_console_snprintf_10_kgw ( ) { kgwB2G1 ( ) ; kgwB2G2 ( ) ; kgwG2B1 ( ) ; kgwG2B2 ( ) ; } CWE134 goodpositive
static void uxtB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalFalse ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void uxtB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalTrue ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void uxtG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void uxtG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_console_snprintf_10_uxt ( ) { uxtB2G1 ( ) ; uxtB2G2 ( ) ; uxtG2B1 ( ) ; uxtG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_snprintf_11_iup ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void epsB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void epsB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void epsG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void epsG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_console_snprintf_11_eps ( ) { epsB2G1 ( ) ; epsB2G2 ( ) ; epsG2B1 ( ) ; epsG2B2 ( ) ; } CWE134 goodpositive
static void epdB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void epdB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void epdG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void epdG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_console_snprintf_11_epd ( ) { epdB2G1 ( ) ; epdB2G2 ( ) ; epdG2B1 ( ) ; epdG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_snprintf_12_ccy ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void wdyB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } else { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalReturnsTrueOrFalse ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void wdyG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) {  strcpy ( data , " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_console_snprintf_12_wdy ( ) { wdyB2G ( ) ; wdyG2B ( ) ; } CWE134 goodpositive
static void dqsB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } else { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalReturnsTrueOrFalse ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void dqsG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) {  strcpy ( data , " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } else { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_console_snprintf_12_dqs ( ) { dqsB2G ( ) ; dqsG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_snprintf_13_kkd ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( GLOBAL_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void yjiB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void yjiB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( GLOBAL_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void yjiG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void yjiG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_console_snprintf_13_yji ( ) { yjiB2G1 ( ) ; yjiB2G2 ( ) ; yjiG2B1 ( ) ; yjiG2B2 ( ) ; } CWE134 goodpositive
static void geiB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void geiB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( GLOBAL_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void geiG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void geiG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_console_snprintf_13_gei ( ) { geiB2G1 ( ) ; geiB2G2 ( ) ; geiG2B1 ( ) ; geiG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_snprintf_14_fwl ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalFive = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void ombB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void ombB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalFive = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void ombG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void ombG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_console_snprintf_14_omb ( ) { ombB2G1 ( ) ; ombB2G2 ( ) ; ombG2B1 ( ) ; ombG2B2 ( ) ; } CWE134 goodpositive
static void aprB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void aprB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } if ( globalFive = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void aprG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void aprG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_console_snprintf_14_apr ( ) { aprB2G1 ( ) ; aprB2G2 ( ) ; aprG2B1 ( ) ; aprG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_snprintf_15_xvr ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7: { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } break ; default:  printLine ( " STRING " ) ; break ; } } CWE134 badpositive
static void wgyB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printLine ( " STRING " ) ; break ; default: { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } break ; } }  static void wgyB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7: { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } break ; default:  printLine ( " STRING " ) ; break ; } }  static void wgyG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  printLine ( " STRING " ) ; break ; default:  strcpy ( data , " STRING " ) ; break ; } switch ( N ) { case 7: { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } break ; default:  printLine ( " STRING " ) ; break ; } }  static void wgyG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  strcpy ( data , " STRING " ) ; break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7: { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } break ; default:  printLine ( " STRING " ) ; break ; } } void CWE134_Uncontrolled_Format_String__char_console_snprintf_15_wgy ( ) { wgyB2G1 ( ) ; wgyB2G2 ( ) ; wgyG2B1 ( ) ; wgyG2B2 ( ) ; } CWE134 goodpositive
static void alwB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printLine ( " STRING " ) ; break ; default: { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } break ; } }  static void alwB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7: { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } break ; default:  printLine ( " STRING " ) ; break ; } }  static void alwG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  printLine ( " STRING " ) ; break ; default:  strcpy ( data , " STRING " ) ; break ; } switch ( N ) { case 7: { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } break ; default:  printLine ( " STRING " ) ; break ; } }  static void alwG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  strcpy ( data , " STRING " ) ; break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7: { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } break ; default:  printLine ( " STRING " ) ; break ; } } void CWE134_Uncontrolled_Format_String__char_console_snprintf_15_alw ( ) { alwB2G1 ( ) ; alwB2G2 ( ) ; alwG2B1 ( ) ; alwG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_snprintf_16_bow ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } break ; } while ( N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } break ; } } CWE134 badpositive
static void fxtB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } break ; } while ( N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } break ; } }  static void fxtG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) {  strcpy ( data , " STRING " ) ; break ; } while ( N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } break ; } } void CWE134_Uncontrolled_Format_String__char_console_snprintf_16_fxt ( ) { fxtB2G ( ) ; fxtG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_snprintf_17_nkq ( ) { int i , j ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( i = N ; i < N ; i + + ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } for ( j = N ; j < N ; j + + ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void odcB2G ( ) { int i , k ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( i = N ; i < N ; i + + ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } } for ( k = N ; k < N ; k + + ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void odcG2B ( ) { int h , j ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( h = N ; h < N ; h + + ) {  strcpy ( data , " STRING " ) ; } for ( j = N ; j < N ; j + + ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_console_snprintf_17_odc ( ) { odcB2G ( ) ; odcG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_snprintf_18_cek ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source: {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } goto sink ; sink: { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
static void dywB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source: {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } goto sink ; sink: { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } }  static void dywG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source:  strcpy ( data , " STRING " ) ; goto sink ; sink: { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } void CWE134_Uncontrolled_Format_String__char_console_snprintf_18_dyw ( ) { dywB2G ( ) ; dywG2B ( ) ; } CWE134 goodpositive
static int pebStatic = N ; static void pebSink ( char * data ) { if ( pebStatic ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_console_snprintf_21_peb ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } pebStatic = N ;  pebSink ( data ) ; } CWE134 badpositive
static int xevB2G1Static = N ; static int xevB2G2Static = N ; static int xevG2BStatic = N ;  static void xevB2G1Sink ( char * data ) { if ( xevB2G1Static ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } } static void xevB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } xevB2G1Static = N ;  xevB2G1Sink ( data ) ; }  static void xevB2G2Sink ( char * data ) { if ( xevB2G2Static ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } } static void xevB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } xevB2G2Static = N ;  xevB2G2Sink ( data ) ; }  static void xevG2BSink ( char * data ) { if ( xevG2BStatic ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } static void xevG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; xevG2BStatic = N ;  xevG2BSink ( data ) ; } void CWE134_Uncontrolled_Format_String__char_console_snprintf_21_xev ( ) { xevB2G1 ( ) ; xevB2G2 ( ) ; xevG2B ( ) ; } CWE134 goodpositive
extern int CWE134_Uncontrolled_Format_String__char_console_snprintf_22_gnfGlobal ; void CWE134_Uncontrolled_Format_String__char_console_snprintf_22_gnfSink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_console_snprintf_22_gnfGlobal ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
extern int CWE134_Uncontrolled_Format_String__char_console_snprintf_22_kgtB2G1Global ; extern int CWE134_Uncontrolled_Format_String__char_console_snprintf_22_kgtB2G2Global ; extern int CWE134_Uncontrolled_Format_String__char_console_snprintf_22_kgtG2BGlobal ;  void CWE134_Uncontrolled_Format_String__char_console_snprintf_22_kgtB2G1Sink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_console_snprintf_22_kgtB2G1Global ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  void CWE134_Uncontrolled_Format_String__char_console_snprintf_22_kgtB2G2Sink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_console_snprintf_22_kgtB2G2Global ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  void CWE134_Uncontrolled_Format_String__char_console_snprintf_22_kgtG2BSink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_console_snprintf_22_kgtG2BGlobal ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_snprintf_31_ksw ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } { char * dataCopy = data ; char * data = dataCopy ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void mxdG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; { char * dataCopy = data ; char * data = dataCopy ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void mxdB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } { char * dataCopy = data ; char * data = dataCopy ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_console_snprintf_31_mxd ( ) { mxdG2B ( ) ; mxdB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_snprintf_32_fwn ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void awtG2B ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ;  strcpy ( data , " STRING " ) ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void awtB2G ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_console_snprintf_32_awt ( ) { awtG2B ( ) ; awtB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_snprintf_34_xli ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_console_snprintf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void wpwG2B ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_console_snprintf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void wpwB2G ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_console_snprintf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_console_snprintf_34_wpw ( ) { wpwG2B ( ) ; wpwB2G ( ) ; } CWE134 goodpositive
static void ixxSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } void CWE134_Uncontrolled_Format_String__char_console_snprintf_41_ixx ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } ixxSink ( data ) ; } CWE134 badpositive
static void tdkG2BSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } static void tdkG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; tdkG2BSink ( data ) ; }  static void tdkB2GSink ( char * data ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } static void tdkB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } tdkB2GSink ( data ) ; } void CWE134_Uncontrolled_Format_String__char_console_snprintf_41_tdk ( ) { tdkB2G ( ) ; tdkG2B ( ) ; } CWE134 goodpositive
static char * lmoSource ( char * data ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } return data ; } void CWE134_Uncontrolled_Format_String__char_console_snprintf_42_lmo ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = lmoSource ( data ) ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
static char * hglG2BSource ( char * data ) {  strcpy ( data , " STRING " ) ; return data ; } static void hglG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = hglG2BSource ( data ) ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  static char * hglB2GSource ( char * data ) { {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } return data ; } static void hglB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = hglB2GSource ( data ) ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } void CWE134_Uncontrolled_Format_String__char_console_snprintf_42_hgl ( ) { hglB2G ( ) ; hglG2B ( ) ; } CWE134 goodpositive
static void qvqSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } void CWE134_Uncontrolled_Format_String__char_console_snprintf_44_qvq ( ) { char * data ;  void ( * funcPtr ) ( char * ) = qvqSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } }  funcPtr ( data ) ; } CWE134 badpositive
static void igzG2BSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } static void igzG2B ( ) { char * data ; void ( * funcPtr ) ( char * ) = igzG2BSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; funcPtr ( data ) ; }  static void igzB2GSink ( char * data ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } static void igzB2G ( ) { char * data ; void ( * funcPtr ) ( char * ) = igzB2GSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } funcPtr ( data ) ; } void CWE134_Uncontrolled_Format_String__char_console_snprintf_44_igz ( ) { igzG2B ( ) ; igzB2G ( ) ; } CWE134 goodpositive
static void fquSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_console_snprintf_45_fquData ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } void CWE134_Uncontrolled_Format_String__char_console_snprintf_45_fqu ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } CWE134_Uncontrolled_Format_String__char_console_snprintf_45_fquData = data ; fquSink ( ) ; } CWE134 badpositive
static void qoyG2BSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_console_snprintf_45_qoyG2BData ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } static void qoyG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; CWE134_Uncontrolled_Format_String__char_console_snprintf_45_qoyG2BData = data ; qoyG2BSink ( ) ; }  static void qoyB2GSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_console_snprintf_45_qoyB2GData ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } static void qoyB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ;  if ( N - dataLen > N ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , stdin ) ! = NULL ) {  dataLen = strlen ( data ) ; if ( dataLen > N & & data [ dataLen - N ] = = ' \n ' ) { data [ dataLen - N ] = ' \0 ' ; } } else { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } } } CWE134_Uncontrolled_Format_String__char_console_snprintf_45_qoyB2GData = data ; qoyB2GSink ( ) ; } void CWE134_Uncontrolled_Format_String__char_console_snprintf_45_qoy ( ) { qoyG2B ( ) ; qoyB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_snprintf_51b_lgfSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_console_snprintf_51b_ayzG2BSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_console_snprintf_51b_ayzB2GSink ( char * data ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_snprintf_52c_pouSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_console_snprintf_52c_dlcG2BSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_console_snprintf_52c_dlcB2GSink ( char * data ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_snprintf_53d_jthSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_console_snprintf_53d_mrrG2BSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_console_snprintf_53d_mrrB2GSink ( char * data ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_snprintf_54e_qudSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_console_snprintf_54e_aztG2BSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_console_snprintf_54e_aztB2GSink ( char * data ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
char * CWE134_Uncontrolled_Format_String__char_console_snprintf_61b_kjpSource ( char * data ) ; void CWE134_Uncontrolled_Format_String__char_console_snprintf_61_kjp ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_console_snprintf_61b_kjpSource ( data ) ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
char * CWE134_Uncontrolled_Format_String__char_console_snprintf_61b_zgoG2BSource ( char * data ) ; static void zgoG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_console_snprintf_61b_zgoG2BSource ( data ) ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  char * CWE134_Uncontrolled_Format_String__char_console_snprintf_61b_zgoB2GSource ( char * data ) ; static void zgoB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_console_snprintf_61b_zgoB2GSource ( data ) ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } void CWE134_Uncontrolled_Format_String__char_console_snprintf_61_zgo ( ) { zgoG2B ( ) ; zgoB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_snprintf_63b_eepSink ( char * * dataPtr ) { char * data = * dataPtr ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_console_snprintf_63b_sncG2BSink ( char * * dataPtr ) { char * data = * dataPtr ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_console_snprintf_63b_sncB2GSink ( char * * dataPtr ) { char * data = * dataPtr ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_snprintf_64b_dqpSink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_console_snprintf_64b_bcwG2BSink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_console_snprintf_64b_bcwB2GSink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_snprintf_65b_anjSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_console_snprintf_65b_jotG2BSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_console_snprintf_65b_jotB2GSink ( char * data ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_snprintf_66b_alnSink ( char * dataArray [ ] ) {  char * data = dataArray [ N ] ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_console_snprintf_66b_xmoG2BSink ( char * dataArray [ ] ) { char * data = dataArray [ N ] ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_console_snprintf_66b_xmoB2GSink ( char * dataArray [ ] ) { char * data = dataArray [ N ] ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_snprintf_67b_glkSink ( CWE134_Uncontrolled_Format_String__char_console_snprintf_67_structType myStruct ) { char * data = myStruct.structFirst ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_console_snprintf_67b_bpwG2BSink ( CWE134_Uncontrolled_Format_String__char_console_snprintf_67_structType myStruct ) { char * data = myStruct.structFirst ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_console_snprintf_67b_bpwB2GSink ( CWE134_Uncontrolled_Format_String__char_console_snprintf_67_structType myStruct ) { char * data = myStruct.structFirst ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_console_snprintf_68b_zacSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_console_snprintf_68_zacData ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_console_snprintf_68b_cywG2BSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_console_snprintf_68_cywG2BData ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_console_snprintf_68b_cywB2GSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_console_snprintf_68_cywB2GData ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_fprintf_01_kns ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } }  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
static void fgtG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ;  WARNINGLINE fprintf ( stdout , data ) ; }  static void fgtB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } }  fprintf ( stdout , " %s\n " , data ) ; } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_01_fgt ( ) { fgtG2B ( ) ; fgtB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_fprintf_02_aet ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void hmgB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void hmgB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void hmgG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void hmgG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  strcpy ( data , " STRING " ) ; } if ( N ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_02_hmg ( ) { hmgB2G1 ( ) ; hmgB2G2 ( ) ; hmgG2B1 ( ) ; hmgG2B2 ( ) ; } CWE134 goodpositive
static void auqB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void auqB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void auqG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N ) {  fprintf ( stdout , data ) ; } }  static void auqG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  strcpy ( data , " STRING " ) ; } if ( N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_02_auq ( ) { auqB2G1 ( ) ; auqB2G2 ( ) ; auqG2B1 ( ) ; auqG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_fprintf_03_rri ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( N = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void fxiB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void fxiB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( N = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void fxiG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void fxiG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) {  strcpy ( data , " STRING " ) ; } if ( N = = N ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_03_fxi ( ) { fxiB2G1 ( ) ; fxiB2G2 ( ) ; fxiG2B1 ( ) ; fxiG2B2 ( ) ; } CWE134 goodpositive
static void qtvB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void qtvB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( N = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void qtvG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N = = N ) {  fprintf ( stdout , data ) ; } }  static void qtvG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) {  strcpy ( data , " STRING " ) ; } if ( N = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_03_qtv ( ) { qtvB2G1 ( ) ; qtvB2G2 ( ) ; qtvG2B1 ( ) ; qtvG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_fprintf_04_ato ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( STATIC_CONST_TRUE ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void ituB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void ituB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( STATIC_CONST_TRUE ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void ituG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void ituG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_04_itu ( ) { ituB2G1 ( ) ; ituB2G2 ( ) ; ituG2B1 ( ) ; ituG2B2 ( ) ; } CWE134 goodpositive
static void utvB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void utvB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( STATIC_CONST_TRUE ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void utvG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) {  fprintf ( stdout , data ) ; } }  static void utvG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_04_utv ( ) { utvB2G1 ( ) ; utvB2G2 ( ) ; utvG2B1 ( ) ; utvG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_fprintf_05_rss ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticTrue ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void bgpB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void bgpB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticTrue ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void bgpG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void bgpG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_05_bgp ( ) { bgpB2G1 ( ) ; bgpB2G2 ( ) ; bgpG2B1 ( ) ; bgpG2B2 ( ) ; } CWE134 goodpositive
static void pztB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void pztB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticTrue ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void pztG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) {  fprintf ( stdout , data ) ; } }  static void pztG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_05_pzt ( ) { pztB2G1 ( ) ; pztB2G2 ( ) ; pztG2B1 ( ) ; pztG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_fprintf_06_sbz ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( STATIC_CONST_FIVE = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void pucB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void pucB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( STATIC_CONST_FIVE = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void pucG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void pucG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_06_puc ( ) { pucB2G1 ( ) ; pucB2G2 ( ) ; pucG2B1 ( ) ; pucG2B2 ( ) ; } CWE134 goodpositive
static void ocbB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void ocbB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( STATIC_CONST_FIVE = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void ocbG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) {  fprintf ( stdout , data ) ; } }  static void ocbG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_06_ocb ( ) { ocbB2G1 ( ) ; ocbB2G2 ( ) ; ocbG2B1 ( ) ; ocbG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_fprintf_07_tui ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticFive = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void zgdB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void zgdB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticFive = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void zgdG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void zgdG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_07_zgd ( ) { zgdB2G1 ( ) ; zgdB2G2 ( ) ; zgdG2B1 ( ) ; zgdG2B2 ( ) ; } CWE134 goodpositive
static void rcnB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void rcnB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticFive = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void rcnG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) {  fprintf ( stdout , data ) ; } }  static void rcnG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_07_rcn ( ) { rcnB2G1 ( ) ; rcnB2G2 ( ) ; rcnG2B1 ( ) ; rcnG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_fprintf_08_trr ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticReturnsTrue ( ) ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void qhuB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void qhuB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticReturnsTrue ( ) ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void qhuG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void qhuG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_08_qhu ( ) { qhuB2G1 ( ) ; qhuB2G2 ( ) ; qhuG2B1 ( ) ; qhuG2B2 ( ) ; } CWE134 goodpositive
static void dukB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void dukB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticReturnsTrue ( ) ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void dukG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) {  fprintf ( stdout , data ) ; } }  static void dukG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_08_duk ( ) { dukB2G1 ( ) ; dukB2G2 ( ) ; dukG2B1 ( ) ; dukG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_fprintf_09_anm ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( GLOBAL_CONST_TRUE ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void tldB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void tldB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( GLOBAL_CONST_TRUE ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void tldG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void tldG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_09_tld ( ) { tldB2G1 ( ) ; tldB2G2 ( ) ; tldG2B1 ( ) ; tldG2B2 ( ) ; } CWE134 goodpositive
static void lluB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void lluB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( GLOBAL_CONST_TRUE ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void lluG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) {  fprintf ( stdout , data ) ; } }  static void lluG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_09_llu ( ) { lluB2G1 ( ) ; lluB2G2 ( ) ; lluG2B1 ( ) ; lluG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_fprintf_10_sve ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalTrue ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void qhsB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void qhsB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalTrue ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void qhsG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void qhsG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_10_qhs ( ) { qhsB2G1 ( ) ; qhsB2G2 ( ) ; qhsG2B1 ( ) ; qhsG2B2 ( ) ; } CWE134 goodpositive
static void hdxB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void hdxB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalTrue ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void hdxG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) {  fprintf ( stdout , data ) ; } }  static void hdxG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_10_hdx ( ) { hdxB2G1 ( ) ; hdxB2G2 ( ) ; hdxG2B1 ( ) ; hdxG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_fprintf_11_eae ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalReturnsTrue ( ) ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void sxhB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void sxhB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalReturnsTrue ( ) ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void sxhG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void sxhG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_11_sxh ( ) { sxhB2G1 ( ) ; sxhB2G2 ( ) ; sxhG2B1 ( ) ; sxhG2B2 ( ) ; } CWE134 goodpositive
static void yjzB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void yjzB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalReturnsTrue ( ) ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void yjzG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) {  fprintf ( stdout , data ) ; } }  static void yjzG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_11_yjz ( ) { yjzB2G1 ( ) ; yjzB2G2 ( ) ; yjzG2B1 ( ) ; yjzG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_fprintf_12_olg ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) {  WARNINGLINE fprintf ( stdout , data ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } } CWE134 badpositive
static void hnoB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } else { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalReturnsTrueOrFalse ( ) ) {  fprintf ( stdout , " %s\n " , data ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void hnoG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) {  strcpy ( data , " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) {  WARNINGLINE fprintf ( stdout , data ) ; } else {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_12_hno ( ) { hnoB2G ( ) ; hnoG2B ( ) ; } CWE134 goodpositive
static void gbeB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } else { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalReturnsTrueOrFalse ( ) ) {  fprintf ( stdout , " %s\n " , data ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void gbeG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) {  strcpy ( data , " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) {  fprintf ( stdout , data ) ; } else {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_12_gbe ( ) { gbeB2G ( ) ; gbeG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_fprintf_13_awi ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( GLOBAL_CONST_FIVE = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void yfqB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void yfqB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( GLOBAL_CONST_FIVE = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void yfqG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void yfqG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_13_yfq ( ) { yfqB2G1 ( ) ; yfqB2G2 ( ) ; yfqG2B1 ( ) ; yfqG2B2 ( ) ; } CWE134 goodpositive
static void zekB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void zekB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( GLOBAL_CONST_FIVE = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void zekG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) {  fprintf ( stdout , data ) ; } }  static void zekG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_13_zek ( ) { zekB2G1 ( ) ; zekB2G2 ( ) ; zekG2B1 ( ) ; zekG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_fprintf_14_gti ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalFive = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void mczB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void mczB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalFive = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void mczG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void mczG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_14_mcz ( ) { mczB2G1 ( ) ; mczB2G2 ( ) ; mczG2B1 ( ) ; mczG2B2 ( ) ; } CWE134 goodpositive
static void sumB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void sumB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalFive = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void sumG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) {  fprintf ( stdout , data ) ; } }  static void sumG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_14_sum ( ) { sumB2G1 ( ) ; sumB2G2 ( ) ; sumG2B1 ( ) ; sumG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_fprintf_15_gav ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  WARNINGLINE fprintf ( stdout , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } } CWE134 badpositive
static void yesB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printLine ( " STRING " ) ; break ; default:  fprintf ( stdout , " %s\n " , data ) ; break ; } }  static void yesB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  fprintf ( stdout , " %s\n " , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } }  static void yesG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  printLine ( " STRING " ) ; break ; default:  strcpy ( data , " STRING " ) ; break ; } switch ( N ) { case 7:  WARNINGLINE fprintf ( stdout , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } }  static void yesG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  strcpy ( data , " STRING " ) ; break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  fprintf ( stdout , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_15_yes ( ) { yesB2G1 ( ) ; yesB2G2 ( ) ; yesG2B1 ( ) ; yesG2B2 ( ) ; } CWE134 goodpositive
static void sqqB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printLine ( " STRING " ) ; break ; default:  fprintf ( stdout , " %s\n " , data ) ; break ; } }  static void sqqB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  fprintf ( stdout , " %s\n " , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } }  static void sqqG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  printLine ( " STRING " ) ; break ; default:  strcpy ( data , " STRING " ) ; break ; } switch ( N ) { case 7:  fprintf ( stdout , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } }  static void sqqG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  strcpy ( data , " STRING " ) ; break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  WARNINGLINE fprintf ( stdout , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_15_sqq ( ) { sqqB2G1 ( ) ; sqqB2G2 ( ) ; sqqG2B1 ( ) ; sqqG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_fprintf_16_wff ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } break ; } while ( N ) {  WARNINGLINE fprintf ( stdout , data ) ; break ; } } CWE134 badpositive
static void wjxB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } break ; } while ( N ) {  fprintf ( stdout , " %s\n " , data ) ; break ; } }  static void wjxG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) {  strcpy ( data , " STRING " ) ; break ; } while ( N ) {  WARNINGLINE fprintf ( stdout , data ) ; break ; } } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_16_wjx ( ) { wjxB2G ( ) ; wjxG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_fprintf_17_rxf ( ) { int i , j ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( i = N ; i < N ; i + + ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } for ( j = N ; j < N ; j + + ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void tdfB2G ( ) { int i , k ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( i = N ; i < N ; i + + ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } for ( k = N ; k < N ; k + + ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void tdfG2B ( ) { int h , j ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( h = N ; h < N ; h + + ) {  strcpy ( data , " STRING " ) ; } for ( j = N ; j < N ; j + + ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_17_tdf ( ) { tdfB2G ( ) ; tdfG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_fprintf_18_ogq ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source: {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } goto sink ; sink:  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
static void azcB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source: {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } goto sink ; sink:  fprintf ( stdout , " %s\n " , data ) ; }  static void azcG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source:  strcpy ( data , " STRING " ) ; goto sink ; sink:  WARNINGLINE fprintf ( stdout , data ) ; } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_18_azc ( ) { azcB2G ( ) ; azcG2B ( ) ; } CWE134 goodpositive
static int vhpStatic = N ; static void vhpSink ( char * data ) { if ( vhpStatic ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_21_vhp ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } vhpStatic = N ;  vhpSink ( data ) ; } CWE134 badpositive
static int dzyB2G1Static = N ; static int dzyB2G2Static = N ; static int dzyG2BStatic = N ;  static void dzyB2G1Sink ( char * data ) { if ( dzyB2G1Static ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } } static void dzyB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } dzyB2G1Static = N ;  dzyB2G1Sink ( data ) ; }  static void dzyB2G2Sink ( char * data ) { if ( dzyB2G2Static ) {  fprintf ( stdout , " %s\n " , data ) ; } } static void dzyB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } dzyB2G2Static = N ;  dzyB2G2Sink ( data ) ; }  static void dzyG2BSink ( char * data ) { if ( dzyG2BStatic ) {  WARNINGLINE fprintf ( stdout , data ) ; } } static void dzyG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; dzyG2BStatic = N ;  dzyG2BSink ( data ) ; } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_21_dzy ( ) { dzyB2G1 ( ) ; dzyB2G2 ( ) ; dzyG2B ( ) ; } CWE134 goodpositive
extern int CWE134_Uncontrolled_Format_String__char_environment_fprintf_22_dqwGlobal ; void CWE134_Uncontrolled_Format_String__char_environment_fprintf_22_dqwSink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_environment_fprintf_22_dqwGlobal ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
extern int CWE134_Uncontrolled_Format_String__char_environment_fprintf_22_jeyB2G1Global ; extern int CWE134_Uncontrolled_Format_String__char_environment_fprintf_22_jeyB2G2Global ; extern int CWE134_Uncontrolled_Format_String__char_environment_fprintf_22_jeyG2BGlobal ;  void CWE134_Uncontrolled_Format_String__char_environment_fprintf_22_jeyB2G1Sink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_environment_fprintf_22_jeyB2G1Global ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  void CWE134_Uncontrolled_Format_String__char_environment_fprintf_22_jeyB2G2Sink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_environment_fprintf_22_jeyB2G2Global ) {  fprintf ( stdout , " %s\n " , data ) ; } }  void CWE134_Uncontrolled_Format_String__char_environment_fprintf_22_jeyG2BSink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_environment_fprintf_22_jeyG2BGlobal ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_fprintf_31_oow ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } { char * dataCopy = data ; char * data = dataCopy ;  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void twkG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; { char * dataCopy = data ; char * data = dataCopy ;  WARNINGLINE fprintf ( stdout , data ) ; } }  static void twkB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } { char * dataCopy = data ; char * data = dataCopy ;  fprintf ( stdout , " %s\n " , data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_31_twk ( ) { twkG2B ( ) ; twkB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_fprintf_32_pht ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } * dataPtr1 = data ; } { char * data = * dataPtr2 ;  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void benG2B ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ;  strcpy ( data , " STRING " ) ; * dataPtr1 = data ; } { char * data = * dataPtr2 ;  WARNINGLINE fprintf ( stdout , data ) ; } }  static void benB2G ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } * dataPtr1 = data ; } { char * data = * dataPtr2 ;  fprintf ( stdout , " %s\n " , data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_32_ben ( ) { benG2B ( ) ; benB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_fprintf_34_qzg ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_environment_fprintf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ;  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void niuG2B ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_environment_fprintf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ;  WARNINGLINE fprintf ( stdout , data ) ; } }  static void niuB2G ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_environment_fprintf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ;  fprintf ( stdout , " %s\n " , data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_34_niu ( ) { niuG2B ( ) ; niuB2G ( ) ; } CWE134 goodpositive
static void utvSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_41_utv ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } utvSink ( data ) ; } CWE134 badpositive
static void bgyG2BSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } static void bgyG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; bgyG2BSink ( data ) ; }  static void bgyB2GSink ( char * data ) {  fprintf ( stdout , " %s\n " , data ) ; } static void bgyB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } bgyB2GSink ( data ) ; } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_41_bgy ( ) { bgyB2G ( ) ; bgyG2B ( ) ; } CWE134 goodpositive
static char * nbcSource ( char * data ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } return data ; } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_42_nbc ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = nbcSource ( data ) ;  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
static char * dqdG2BSource ( char * data ) {  strcpy ( data , " STRING " ) ; return data ; } static void dqdG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = dqdG2BSource ( data ) ;  WARNINGLINE fprintf ( stdout , data ) ; }  static char * dqdB2GSource ( char * data ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } return data ; } static void dqdB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = dqdB2GSource ( data ) ;  fprintf ( stdout , " %s\n " , data ) ; } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_42_dqd ( ) { dqdB2G ( ) ; dqdG2B ( ) ; } CWE134 goodpositive
static void lbrSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_44_lbr ( ) { char * data ;  void ( * funcPtr ) ( char * ) = lbrSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } }  funcPtr ( data ) ; } CWE134 badpositive
static void ydeG2BSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } static void ydeG2B ( ) { char * data ; void ( * funcPtr ) ( char * ) = ydeG2BSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; funcPtr ( data ) ; }  static void ydeB2GSink ( char * data ) {  fprintf ( stdout , " %s\n " , data ) ; } static void ydeB2G ( ) { char * data ; void ( * funcPtr ) ( char * ) = ydeB2GSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } funcPtr ( data ) ; } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_44_yde ( ) { ydeG2B ( ) ; ydeB2G ( ) ; } CWE134 goodpositive
static void wfaSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_environment_fprintf_45_wfaData ;  WARNINGLINE fprintf ( stdout , data ) ; } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_45_wfa ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } CWE134_Uncontrolled_Format_String__char_environment_fprintf_45_wfaData = data ; wfaSink ( ) ; } CWE134 badpositive
static void xhiG2BSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_environment_fprintf_45_xhiG2BData ;  WARNINGLINE fprintf ( stdout , data ) ; } static void xhiG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; CWE134_Uncontrolled_Format_String__char_environment_fprintf_45_xhiG2BData = data ; xhiG2BSink ( ) ; }  static void xhiB2GSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_environment_fprintf_45_xhiB2GData ;  fprintf ( stdout , " %s\n " , data ) ; } static void xhiB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } CWE134_Uncontrolled_Format_String__char_environment_fprintf_45_xhiB2GData = data ; xhiB2GSink ( ) ; } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_45_xhi ( ) { xhiG2B ( ) ; xhiB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_fprintf_51b_uekSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_environment_fprintf_51b_rdaG2BSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_environment_fprintf_51b_rdaB2GSink ( char * data ) {  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_fprintf_52c_wfeSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_environment_fprintf_52c_gsjG2BSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_environment_fprintf_52c_gsjB2GSink ( char * data ) {  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_fprintf_53d_qlzSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_environment_fprintf_53d_orbG2BSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_environment_fprintf_53d_orbB2GSink ( char * data ) {  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_fprintf_54e_zmiSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_environment_fprintf_54e_bzsG2BSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_environment_fprintf_54e_bzsB2GSink ( char * data ) {  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
char * CWE134_Uncontrolled_Format_String__char_environment_fprintf_61b_znaSource ( char * data ) ; void CWE134_Uncontrolled_Format_String__char_environment_fprintf_61_zna ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_environment_fprintf_61b_znaSource ( data ) ;  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
char * CWE134_Uncontrolled_Format_String__char_environment_fprintf_61b_smkG2BSource ( char * data ) ; static void smkG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_environment_fprintf_61b_smkG2BSource ( data ) ;  WARNINGLINE fprintf ( stdout , data ) ; }  char * CWE134_Uncontrolled_Format_String__char_environment_fprintf_61b_smkB2GSource ( char * data ) ; static void smkB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_environment_fprintf_61b_smkB2GSource ( data ) ;  fprintf ( stdout , " %s\n " , data ) ; } void CWE134_Uncontrolled_Format_String__char_environment_fprintf_61_smk ( ) { smkG2B ( ) ; smkB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_fprintf_63b_zguSink ( char * * dataPtr ) { char * data = * dataPtr ;  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_environment_fprintf_63b_gydG2BSink ( char * * dataPtr ) { char * data = * dataPtr ;  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_environment_fprintf_63b_gydB2GSink ( char * * dataPtr ) { char * data = * dataPtr ;  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_fprintf_64b_jwgSink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ;  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_environment_fprintf_64b_azsG2BSink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ;  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_environment_fprintf_64b_azsB2GSink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ;  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_fprintf_65b_cddSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_environment_fprintf_65b_fehG2BSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_environment_fprintf_65b_fehB2GSink ( char * data ) {  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_fprintf_66b_nqpSink ( char * dataArray [ ] ) {  char * data = dataArray [ N ] ;  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_environment_fprintf_66b_estG2BSink ( char * dataArray [ ] ) { char * data = dataArray [ N ] ;  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_environment_fprintf_66b_estB2GSink ( char * dataArray [ ] ) { char * data = dataArray [ N ] ;  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_fprintf_67b_lfgSink ( CWE134_Uncontrolled_Format_String__char_environment_fprintf_67_structType myStruct ) { char * data = myStruct.structFirst ;  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_environment_fprintf_67b_wngG2BSink ( CWE134_Uncontrolled_Format_String__char_environment_fprintf_67_structType myStruct ) { char * data = myStruct.structFirst ;  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_environment_fprintf_67b_wngB2GSink ( CWE134_Uncontrolled_Format_String__char_environment_fprintf_67_structType myStruct ) { char * data = myStruct.structFirst ;  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_fprintf_68b_ndkSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_environment_fprintf_68_ndkData ;  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_environment_fprintf_68b_nguG2BSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_environment_fprintf_68_nguG2BData ;  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_environment_fprintf_68b_nguB2GSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_environment_fprintf_68_nguB2GData ;  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_printf_01_siz ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } }  WARNINGLINE printf ( data ) ; } CWE134 badpositive
static void dofG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ;  WARNINGLINE printf ( data ) ; }  static void dofB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } }  printf ( " %s\n " , data ) ; } void CWE134_Uncontrolled_Format_String__char_environment_printf_01_dof ( ) { dofG2B ( ) ; dofB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_printf_02_ghh ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( N ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void xuwB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void xuwB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( N ) {  printf ( " %s\n " , data ) ; } }  static void xuwG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N ) {  WARNINGLINE printf ( data ) ; } }  static void xuwG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  strcpy ( data , " STRING " ) ; } if ( N ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_printf_02_xuw ( ) { xuwB2G1 ( ) ; xuwB2G2 ( ) ; xuwG2B1 ( ) ; xuwG2B2 ( ) ; } CWE134 goodpositive
static void retB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void retB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( N ) {  printf ( " %s\n " , data ) ; } }  static void retG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N ) {  printf ( data ) ; } }  static void retG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  strcpy ( data , " STRING " ) ; } if ( N ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_printf_02_ret ( ) { retB2G1 ( ) ; retB2G2 ( ) ; retG2B1 ( ) ; retG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_printf_03_uuj ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( N = = N ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void zqfB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void zqfB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( N = = N ) {  printf ( " %s\n " , data ) ; } }  static void zqfG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N = = N ) {  WARNINGLINE printf ( data ) ; } }  static void zqfG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) {  strcpy ( data , " STRING " ) ; } if ( N = = N ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_printf_03_zqf ( ) { zqfB2G1 ( ) ; zqfB2G2 ( ) ; zqfG2B1 ( ) ; zqfG2B2 ( ) ; } CWE134 goodpositive
static void glpB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void glpB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( N = = N ) {  printf ( " %s\n " , data ) ; } }  static void glpG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N = = N ) {  printf ( data ) ; } }  static void glpG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) {  strcpy ( data , " STRING " ) ; } if ( N = = N ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_printf_03_glp ( ) { glpB2G1 ( ) ; glpB2G2 ( ) ; glpG2B1 ( ) ; glpG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_printf_04_wuy ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( STATIC_CONST_TRUE ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void jpkB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void jpkB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( STATIC_CONST_TRUE ) {  printf ( " %s\n " , data ) ; } }  static void jpkG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) {  WARNINGLINE printf ( data ) ; } }  static void jpkG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_printf_04_jpk ( ) { jpkB2G1 ( ) ; jpkB2G2 ( ) ; jpkG2B1 ( ) ; jpkG2B2 ( ) ; } CWE134 goodpositive
static void uzbB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void uzbB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( STATIC_CONST_TRUE ) {  printf ( " %s\n " , data ) ; } }  static void uzbG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) {  printf ( data ) ; } }  static void uzbG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_printf_04_uzb ( ) { uzbB2G1 ( ) ; uzbB2G2 ( ) ; uzbG2B1 ( ) ; uzbG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_printf_05_hfp ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticTrue ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void kheB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void kheB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticTrue ) {  printf ( " %s\n " , data ) ; } }  static void kheG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) {  WARNINGLINE printf ( data ) ; } }  static void kheG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_printf_05_khe ( ) { kheB2G1 ( ) ; kheB2G2 ( ) ; kheG2B1 ( ) ; kheG2B2 ( ) ; } CWE134 goodpositive
static void svbB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void svbB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticTrue ) {  printf ( " %s\n " , data ) ; } }  static void svbG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) {  printf ( data ) ; } }  static void svbG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_printf_05_svb ( ) { svbB2G1 ( ) ; svbB2G2 ( ) ; svbG2B1 ( ) ; svbG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_printf_06_joo ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( STATIC_CONST_FIVE = = N ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void csvB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void csvB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( STATIC_CONST_FIVE = = N ) {  printf ( " %s\n " , data ) ; } }  static void csvG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) {  WARNINGLINE printf ( data ) ; } }  static void csvG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_printf_06_csv ( ) { csvB2G1 ( ) ; csvB2G2 ( ) ; csvG2B1 ( ) ; csvG2B2 ( ) ; } CWE134 goodpositive
static void fkeB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void fkeB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( STATIC_CONST_FIVE = = N ) {  printf ( " %s\n " , data ) ; } }  static void fkeG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) {  printf ( data ) ; } }  static void fkeG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_printf_06_fke ( ) { fkeB2G1 ( ) ; fkeB2G2 ( ) ; fkeG2B1 ( ) ; fkeG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_printf_07_dah ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticFive = = N ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void ejiB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void ejiB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticFive = = N ) {  printf ( " %s\n " , data ) ; } }  static void ejiG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) {  WARNINGLINE printf ( data ) ; } }  static void ejiG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_printf_07_eji ( ) { ejiB2G1 ( ) ; ejiB2G2 ( ) ; ejiG2B1 ( ) ; ejiG2B2 ( ) ; } CWE134 goodpositive
static void rpcB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void rpcB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticFive = = N ) {  printf ( " %s\n " , data ) ; } }  static void rpcG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) {  printf ( data ) ; } }  static void rpcG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_printf_07_rpc ( ) { rpcB2G1 ( ) ; rpcB2G2 ( ) ; rpcG2B1 ( ) ; rpcG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_printf_08_kto ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticReturnsTrue ( ) ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void roeB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void roeB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticReturnsTrue ( ) ) {  printf ( " %s\n " , data ) ; } }  static void roeG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) {  WARNINGLINE printf ( data ) ; } }  static void roeG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_printf_08_roe ( ) { roeB2G1 ( ) ; roeB2G2 ( ) ; roeG2B1 ( ) ; roeG2B2 ( ) ; } CWE134 goodpositive
static void qhcB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void qhcB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticReturnsTrue ( ) ) {  printf ( " %s\n " , data ) ; } }  static void qhcG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) {  printf ( data ) ; } }  static void qhcG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_printf_08_qhc ( ) { qhcB2G1 ( ) ; qhcB2G2 ( ) ; qhcG2B1 ( ) ; qhcG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_printf_09_lel ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( GLOBAL_CONST_TRUE ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void jflB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void jflB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( GLOBAL_CONST_TRUE ) {  printf ( " %s\n " , data ) ; } }  static void jflG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) {  WARNINGLINE printf ( data ) ; } }  static void jflG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_printf_09_jfl ( ) { jflB2G1 ( ) ; jflB2G2 ( ) ; jflG2B1 ( ) ; jflG2B2 ( ) ; } CWE134 goodpositive
static void vmvB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void vmvB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( GLOBAL_CONST_TRUE ) {  printf ( " %s\n " , data ) ; } }  static void vmvG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) {  printf ( data ) ; } }  static void vmvG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_printf_09_vmv ( ) { vmvB2G1 ( ) ; vmvB2G2 ( ) ; vmvG2B1 ( ) ; vmvG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_printf_10_bqm ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalTrue ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void yzfB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void yzfB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalTrue ) {  printf ( " %s\n " , data ) ; } }  static void yzfG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) {  WARNINGLINE printf ( data ) ; } }  static void yzfG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_printf_10_yzf ( ) { yzfB2G1 ( ) ; yzfB2G2 ( ) ; yzfG2B1 ( ) ; yzfG2B2 ( ) ; } CWE134 goodpositive
static void ncuB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void ncuB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalTrue ) {  printf ( " %s\n " , data ) ; } }  static void ncuG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) {  printf ( data ) ; } }  static void ncuG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_printf_10_ncu ( ) { ncuB2G1 ( ) ; ncuB2G2 ( ) ; ncuG2B1 ( ) ; ncuG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_printf_11_tfs ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalReturnsTrue ( ) ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void dmfB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void dmfB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalReturnsTrue ( ) ) {  printf ( " %s\n " , data ) ; } }  static void dmfG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) {  WARNINGLINE printf ( data ) ; } }  static void dmfG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_printf_11_dmf ( ) { dmfB2G1 ( ) ; dmfB2G2 ( ) ; dmfG2B1 ( ) ; dmfG2B2 ( ) ; } CWE134 goodpositive
static void psvB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void psvB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalReturnsTrue ( ) ) {  printf ( " %s\n " , data ) ; } }  static void psvG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) {  printf ( data ) ; } }  static void psvG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_printf_11_psv ( ) { psvB2G1 ( ) ; psvB2G2 ( ) ; psvG2B1 ( ) ; psvG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_printf_12_aon ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) {  WARNINGLINE printf ( data ) ; } else {  printf ( " %s\n " , data ) ; } } CWE134 badpositive
static void ckfB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } else { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalReturnsTrueOrFalse ( ) ) {  printf ( " %s\n " , data ) ; } else {  printf ( " %s\n " , data ) ; } }  static void ckfG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) {  strcpy ( data , " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) {  WARNINGLINE printf ( data ) ; } else {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_printf_12_ckf ( ) { ckfB2G ( ) ; ckfG2B ( ) ; } CWE134 goodpositive
static void zaqB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } else { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalReturnsTrueOrFalse ( ) ) {  printf ( " %s\n " , data ) ; } else {  printf ( " %s\n " , data ) ; } }  static void zaqG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) {  strcpy ( data , " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) {  printf ( data ) ; } else {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_printf_12_zaq ( ) { zaqB2G ( ) ; zaqG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_printf_13_pge ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( GLOBAL_CONST_FIVE = = N ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void ybvB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void ybvB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( GLOBAL_CONST_FIVE = = N ) {  printf ( " %s\n " , data ) ; } }  static void ybvG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) {  WARNINGLINE printf ( data ) ; } }  static void ybvG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_printf_13_ybv ( ) { ybvB2G1 ( ) ; ybvB2G2 ( ) ; ybvG2B1 ( ) ; ybvG2B2 ( ) ; } CWE134 goodpositive
static void bpbB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void bpbB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( GLOBAL_CONST_FIVE = = N ) {  printf ( " %s\n " , data ) ; } }  static void bpbG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) {  printf ( data ) ; } }  static void bpbG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_printf_13_bpb ( ) { bpbB2G1 ( ) ; bpbB2G2 ( ) ; bpbG2B1 ( ) ; bpbG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_printf_14_byo ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalFive = = N ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void tpnB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void tpnB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalFive = = N ) {  printf ( " %s\n " , data ) ; } }  static void tpnG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) {  WARNINGLINE printf ( data ) ; } }  static void tpnG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_printf_14_tpn ( ) { tpnB2G1 ( ) ; tpnB2G2 ( ) ; tpnG2B1 ( ) ; tpnG2B2 ( ) ; } CWE134 goodpositive
static void bnbB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void bnbB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalFive = = N ) {  printf ( " %s\n " , data ) ; } }  static void bnbG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) {  printf ( data ) ; } }  static void bnbG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_printf_14_bnb ( ) { bnbB2G1 ( ) ; bnbB2G2 ( ) ; bnbG2B1 ( ) ; bnbG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_printf_15_yih ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  WARNINGLINE printf ( data ) ; break ; default:  printLine ( " STRING " ) ; break ; } } CWE134 badpositive
static void bnkB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printLine ( " STRING " ) ; break ; default:  printf ( " %s\n " , data ) ; break ; } }  static void bnkB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printf ( " %s\n " , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } }  static void bnkG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  printLine ( " STRING " ) ; break ; default:  strcpy ( data , " STRING " ) ; break ; } switch ( N ) { case 7:  WARNINGLINE printf ( data ) ; break ; default:  printLine ( " STRING " ) ; break ; } }  static void bnkG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  strcpy ( data , " STRING " ) ; break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printf ( data ) ; break ; default:  printLine ( " STRING " ) ; break ; } } void CWE134_Uncontrolled_Format_String__char_environment_printf_15_bnk ( ) { bnkB2G1 ( ) ; bnkB2G2 ( ) ; bnkG2B1 ( ) ; bnkG2B2 ( ) ; } CWE134 goodpositive
static void tpsB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printLine ( " STRING " ) ; break ; default:  printf ( " %s\n " , data ) ; break ; } }  static void tpsB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printf ( " %s\n " , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } }  static void tpsG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  printLine ( " STRING " ) ; break ; default:  strcpy ( data , " STRING " ) ; break ; } switch ( N ) { case 7:  printf ( data ) ; break ; default:  printLine ( " STRING " ) ; break ; } }  static void tpsG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  strcpy ( data , " STRING " ) ; break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  WARNINGLINE printf ( data ) ; break ; default:  printLine ( " STRING " ) ; break ; } } void CWE134_Uncontrolled_Format_String__char_environment_printf_15_tps ( ) { tpsB2G1 ( ) ; tpsB2G2 ( ) ; tpsG2B1 ( ) ; tpsG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_printf_16_hxm ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } break ; } while ( N ) {  WARNINGLINE printf ( data ) ; break ; } } CWE134 badpositive
static void oliB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } break ; } while ( N ) {  printf ( " %s\n " , data ) ; break ; } }  static void oliG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) {  strcpy ( data , " STRING " ) ; break ; } while ( N ) {  WARNINGLINE printf ( data ) ; break ; } } void CWE134_Uncontrolled_Format_String__char_environment_printf_16_oli ( ) { oliB2G ( ) ; oliG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_printf_17_ynl ( ) { int i , j ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( i = N ; i < N ; i + + ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } for ( j = N ; j < N ; j + + ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void ybnB2G ( ) { int i , k ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( i = N ; i < N ; i + + ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } for ( k = N ; k < N ; k + + ) {  printf ( " %s\n " , data ) ; } }  static void ybnG2B ( ) { int h , j ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( h = N ; h < N ; h + + ) {  strcpy ( data , " STRING " ) ; } for ( j = N ; j < N ; j + + ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_printf_17_ybn ( ) { ybnB2G ( ) ; ybnG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_printf_18_lcj ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source: {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } goto sink ; sink:  WARNINGLINE printf ( data ) ; } CWE134 badpositive
static void jpqB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source: {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } goto sink ; sink:  printf ( " %s\n " , data ) ; }  static void jpqG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source:  strcpy ( data , " STRING " ) ; goto sink ; sink:  WARNINGLINE printf ( data ) ; } void CWE134_Uncontrolled_Format_String__char_environment_printf_18_jpq ( ) { jpqB2G ( ) ; jpqG2B ( ) ; } CWE134 goodpositive
static int tkaStatic = N ; static void tkaSink ( char * data ) { if ( tkaStatic ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_printf_21_tka ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } tkaStatic = N ;  tkaSink ( data ) ; } CWE134 badpositive
static int kvrB2G1Static = N ; static int kvrB2G2Static = N ; static int kvrG2BStatic = N ;  static void kvrB2G1Sink ( char * data ) { if ( kvrB2G1Static ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } } static void kvrB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } kvrB2G1Static = N ;  kvrB2G1Sink ( data ) ; }  static void kvrB2G2Sink ( char * data ) { if ( kvrB2G2Static ) {  printf ( " %s\n " , data ) ; } } static void kvrB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } kvrB2G2Static = N ;  kvrB2G2Sink ( data ) ; }  static void kvrG2BSink ( char * data ) { if ( kvrG2BStatic ) {  WARNINGLINE printf ( data ) ; } } static void kvrG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; kvrG2BStatic = N ;  kvrG2BSink ( data ) ; } void CWE134_Uncontrolled_Format_String__char_environment_printf_21_kvr ( ) { kvrB2G1 ( ) ; kvrB2G2 ( ) ; kvrG2B ( ) ; } CWE134 goodpositive
extern int CWE134_Uncontrolled_Format_String__char_environment_printf_22_ykyGlobal ; void CWE134_Uncontrolled_Format_String__char_environment_printf_22_ykySink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_environment_printf_22_ykyGlobal ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
extern int CWE134_Uncontrolled_Format_String__char_environment_printf_22_mniB2G1Global ; extern int CWE134_Uncontrolled_Format_String__char_environment_printf_22_mniB2G2Global ; extern int CWE134_Uncontrolled_Format_String__char_environment_printf_22_mniG2BGlobal ;  void CWE134_Uncontrolled_Format_String__char_environment_printf_22_mniB2G1Sink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_environment_printf_22_mniB2G1Global ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  void CWE134_Uncontrolled_Format_String__char_environment_printf_22_mniB2G2Sink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_environment_printf_22_mniB2G2Global ) {  printf ( " %s\n " , data ) ; } }  void CWE134_Uncontrolled_Format_String__char_environment_printf_22_mniG2BSink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_environment_printf_22_mniG2BGlobal ) {  WARNINGLINE printf ( data ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_printf_31_ffa ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } { char * dataCopy = data ; char * data = dataCopy ;  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void eafG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; { char * dataCopy = data ; char * data = dataCopy ;  WARNINGLINE printf ( data ) ; } }  static void eafB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } { char * dataCopy = data ; char * data = dataCopy ;  printf ( " %s\n " , data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_printf_31_eaf ( ) { eafG2B ( ) ; eafB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_printf_32_vmt ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } * dataPtr1 = data ; } { char * data = * dataPtr2 ;  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void kitG2B ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ;  strcpy ( data , " STRING " ) ; * dataPtr1 = data ; } { char * data = * dataPtr2 ;  WARNINGLINE printf ( data ) ; } }  static void kitB2G ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } * dataPtr1 = data ; } { char * data = * dataPtr2 ;  printf ( " %s\n " , data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_printf_32_kit ( ) { kitG2B ( ) ; kitB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_printf_34_ifs ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_environment_printf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ;  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void dsuG2B ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_environment_printf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ;  WARNINGLINE printf ( data ) ; } }  static void dsuB2G ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_environment_printf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ;  printf ( " %s\n " , data ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_printf_34_dsu ( ) { dsuG2B ( ) ; dsuB2G ( ) ; } CWE134 goodpositive
static void mlpSink ( char * data ) {  WARNINGLINE printf ( data ) ; } void CWE134_Uncontrolled_Format_String__char_environment_printf_41_mlp ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } mlpSink ( data ) ; } CWE134 badpositive
static void cyeG2BSink ( char * data ) {  WARNINGLINE printf ( data ) ; } static void cyeG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; cyeG2BSink ( data ) ; }  static void cyeB2GSink ( char * data ) {  printf ( " %s\n " , data ) ; } static void cyeB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } cyeB2GSink ( data ) ; } void CWE134_Uncontrolled_Format_String__char_environment_printf_41_cye ( ) { cyeB2G ( ) ; cyeG2B ( ) ; } CWE134 goodpositive
static char * fcySource ( char * data ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } return data ; } void CWE134_Uncontrolled_Format_String__char_environment_printf_42_fcy ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = fcySource ( data ) ;  WARNINGLINE printf ( data ) ; } CWE134 badpositive
static char * zxzG2BSource ( char * data ) {  strcpy ( data , " STRING " ) ; return data ; } static void zxzG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = zxzG2BSource ( data ) ;  WARNINGLINE printf ( data ) ; }  static char * zxzB2GSource ( char * data ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } return data ; } static void zxzB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = zxzB2GSource ( data ) ;  printf ( " %s\n " , data ) ; } void CWE134_Uncontrolled_Format_String__char_environment_printf_42_zxz ( ) { zxzB2G ( ) ; zxzG2B ( ) ; } CWE134 goodpositive
static void jluSink ( char * data ) {  WARNINGLINE printf ( data ) ; } void CWE134_Uncontrolled_Format_String__char_environment_printf_44_jlu ( ) { char * data ;  void ( * funcPtr ) ( char * ) = jluSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } }  funcPtr ( data ) ; } CWE134 badpositive
static void svmG2BSink ( char * data ) {  WARNINGLINE printf ( data ) ; } static void svmG2B ( ) { char * data ; void ( * funcPtr ) ( char * ) = svmG2BSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; funcPtr ( data ) ; }  static void svmB2GSink ( char * data ) {  printf ( " %s\n " , data ) ; } static void svmB2G ( ) { char * data ; void ( * funcPtr ) ( char * ) = svmB2GSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } funcPtr ( data ) ; } void CWE134_Uncontrolled_Format_String__char_environment_printf_44_svm ( ) { svmG2B ( ) ; svmB2G ( ) ; } CWE134 goodpositive
static void fgkSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_environment_printf_45_fgkData ;  WARNINGLINE printf ( data ) ; } void CWE134_Uncontrolled_Format_String__char_environment_printf_45_fgk ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } CWE134_Uncontrolled_Format_String__char_environment_printf_45_fgkData = data ; fgkSink ( ) ; } CWE134 badpositive
static void zowG2BSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_environment_printf_45_zowG2BData ;  WARNINGLINE printf ( data ) ; } static void zowG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; CWE134_Uncontrolled_Format_String__char_environment_printf_45_zowG2BData = data ; zowG2BSink ( ) ; }  static void zowB2GSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_environment_printf_45_zowB2GData ;  printf ( " %s\n " , data ) ; } static void zowB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } CWE134_Uncontrolled_Format_String__char_environment_printf_45_zowB2GData = data ; zowB2GSink ( ) ; } void CWE134_Uncontrolled_Format_String__char_environment_printf_45_zow ( ) { zowG2B ( ) ; zowB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_printf_51b_fqjSink ( char * data ) {  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_environment_printf_51b_wtiG2BSink ( char * data ) {  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_environment_printf_51b_wtiB2GSink ( char * data ) {  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_printf_52c_cjsSink ( char * data ) {  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_environment_printf_52c_jplG2BSink ( char * data ) {  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_environment_printf_52c_jplB2GSink ( char * data ) {  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_printf_53d_eoiSink ( char * data ) {  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_environment_printf_53d_zngG2BSink ( char * data ) {  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_environment_printf_53d_zngB2GSink ( char * data ) {  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_printf_54e_nlqSink ( char * data ) {  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_environment_printf_54e_yyoG2BSink ( char * data ) {  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_environment_printf_54e_yyoB2GSink ( char * data ) {  printf ( " %s\n " , data ) ; } CWE134 goodpositive
char * CWE134_Uncontrolled_Format_String__char_environment_printf_61b_pgjSource ( char * data ) ; void CWE134_Uncontrolled_Format_String__char_environment_printf_61_pgj ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_environment_printf_61b_pgjSource ( data ) ;  WARNINGLINE printf ( data ) ; } CWE134 badpositive
char * CWE134_Uncontrolled_Format_String__char_environment_printf_61b_untG2BSource ( char * data ) ; static void untG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_environment_printf_61b_untG2BSource ( data ) ;  WARNINGLINE printf ( data ) ; }  char * CWE134_Uncontrolled_Format_String__char_environment_printf_61b_untB2GSource ( char * data ) ; static void untB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_environment_printf_61b_untB2GSource ( data ) ;  printf ( " %s\n " , data ) ; } void CWE134_Uncontrolled_Format_String__char_environment_printf_61_unt ( ) { untG2B ( ) ; untB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_printf_63b_mpwSink ( char * * dataPtr ) { char * data = * dataPtr ;  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_environment_printf_63b_suhG2BSink ( char * * dataPtr ) { char * data = * dataPtr ;  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_environment_printf_63b_suhB2GSink ( char * * dataPtr ) { char * data = * dataPtr ;  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_printf_64b_fluSink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ;  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_environment_printf_64b_lteG2BSink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ;  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_environment_printf_64b_lteB2GSink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ;  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_printf_65b_fqtSink ( char * data ) {  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_environment_printf_65b_bdoG2BSink ( char * data ) {  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_environment_printf_65b_bdoB2GSink ( char * data ) {  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_printf_66b_fuwSink ( char * dataArray [ ] ) {  char * data = dataArray [ N ] ;  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_environment_printf_66b_azoG2BSink ( char * dataArray [ ] ) { char * data = dataArray [ N ] ;  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_environment_printf_66b_azoB2GSink ( char * dataArray [ ] ) { char * data = dataArray [ N ] ;  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_printf_67b_fgjSink ( CWE134_Uncontrolled_Format_String__char_environment_printf_67_structType myStruct ) { char * data = myStruct.structFirst ;  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_environment_printf_67b_zfwG2BSink ( CWE134_Uncontrolled_Format_String__char_environment_printf_67_structType myStruct ) { char * data = myStruct.structFirst ;  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_environment_printf_67b_zfwB2GSink ( CWE134_Uncontrolled_Format_String__char_environment_printf_67_structType myStruct ) { char * data = myStruct.structFirst ;  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_printf_68b_eyvSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_environment_printf_68_eyvData ;  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_environment_printf_68b_juwG2BSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_environment_printf_68_juwG2BData ;  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_environment_printf_68b_juwB2GSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_environment_printf_68_juwB2GData ;  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_snprintf_01_ork ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
static void yifG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  static void yifB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_01_yif ( ) { yifG2B ( ) ; yifB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_snprintf_02_pxl ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void rwhB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void rwhB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void rwhG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void rwhG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  strcpy ( data , " STRING " ) ; } if ( N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_02_rwh ( ) { rwhB2G1 ( ) ; rwhB2G2 ( ) ; rwhG2B1 ( ) ; rwhG2B2 ( ) ; } CWE134 goodpositive
static void rfcB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void rfcB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void rfcG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void rfcG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  strcpy ( data , " STRING " ) ; } if ( N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_02_rfc ( ) { rfcB2G1 ( ) ; rfcB2G2 ( ) ; rfcG2B1 ( ) ; rfcG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_snprintf_03_umf ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( N = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void rumB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( N ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void rumB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( N = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void rumG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void rumG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) {  strcpy ( data , " STRING " ) ; } if ( N = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_03_rum ( ) { rumB2G1 ( ) ; rumB2G2 ( ) ; rumG2B1 ( ) ; rumG2B2 ( ) ; } CWE134 goodpositive
static void cjgB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( N ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void cjgB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( N = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void cjgG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void cjgG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) {  strcpy ( data , " STRING " ) ; } if ( N = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_03_cjg ( ) { cjgB2G1 ( ) ; cjgB2G2 ( ) ; cjgG2B1 ( ) ; cjgG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_snprintf_04_gfo ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( STATIC_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void ubtB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void ubtB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( STATIC_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void ubtG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void ubtG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_04_ubt ( ) { ubtB2G1 ( ) ; ubtB2G2 ( ) ; ubtG2B1 ( ) ; ubtG2B2 ( ) ; } CWE134 goodpositive
static void thkB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void thkB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( STATIC_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void thkG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void thkG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_04_thk ( ) { thkB2G1 ( ) ; thkB2G2 ( ) ; thkG2B1 ( ) ; thkG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_snprintf_05_qze ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticTrue ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void pagB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticFalse ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void pagB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticTrue ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void pagG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void pagG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_05_pag ( ) { pagB2G1 ( ) ; pagB2G2 ( ) ; pagG2B1 ( ) ; pagG2B2 ( ) ; } CWE134 goodpositive
static void emvB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticFalse ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void emvB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticTrue ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void emvG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void emvG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_05_emv ( ) { emvB2G1 ( ) ; emvB2G2 ( ) ; emvG2B1 ( ) ; emvG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_snprintf_06_emd ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( STATIC_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void kuyB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void kuyB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( STATIC_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void kuyG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void kuyG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_06_kuy ( ) { kuyB2G1 ( ) ; kuyB2G2 ( ) ; kuyG2B1 ( ) ; kuyG2B2 ( ) ; } CWE134 goodpositive
static void ifwB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void ifwB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( STATIC_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void ifwG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void ifwG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_06_ifw ( ) { ifwB2G1 ( ) ; ifwB2G2 ( ) ; ifwG2B1 ( ) ; ifwG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_snprintf_07_evc ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticFive = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void yehB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void yehB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticFive = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void yehG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void yehG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_07_yeh ( ) { yehB2G1 ( ) ; yehB2G2 ( ) ; yehG2B1 ( ) ; yehG2B2 ( ) ; } CWE134 goodpositive
static void rklB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void rklB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticFive = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void rklG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void rklG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_07_rkl ( ) { rklB2G1 ( ) ; rklB2G2 ( ) ; rklG2B1 ( ) ; rklG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_snprintf_08_yvi ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void dzeB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void dzeB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void dzeG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void dzeG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_08_dze ( ) { dzeB2G1 ( ) ; dzeB2G2 ( ) ; dzeG2B1 ( ) ; dzeG2B2 ( ) ; } CWE134 goodpositive
static void usrB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void usrB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( staticReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void usrG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void usrG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_08_usr ( ) { usrB2G1 ( ) ; usrB2G2 ( ) ; usrG2B1 ( ) ; usrG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_snprintf_09_mmx ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( GLOBAL_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void bwuB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void bwuB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( GLOBAL_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void bwuG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void bwuG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_09_bwu ( ) { bwuB2G1 ( ) ; bwuB2G2 ( ) ; bwuG2B1 ( ) ; bwuG2B2 ( ) ; } CWE134 goodpositive
static void cwvB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void cwvB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( GLOBAL_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void cwvG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void cwvG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_09_cwv ( ) { cwvB2G1 ( ) ; cwvB2G2 ( ) ; cwvG2B1 ( ) ; cwvG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_snprintf_10_vdv ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalTrue ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void ajiB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalFalse ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void ajiB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalTrue ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void ajiG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void ajiG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_10_aji ( ) { ajiB2G1 ( ) ; ajiB2G2 ( ) ; ajiG2B1 ( ) ; ajiG2B2 ( ) ; } CWE134 goodpositive
static void kybB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalFalse ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void kybB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalTrue ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void kybG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void kybG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_10_kyb ( ) { kybB2G1 ( ) ; kybB2G2 ( ) ; kybG2B1 ( ) ; kybG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_snprintf_11_abu ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void zwoB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void zwoB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void zwoG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void zwoG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_11_zwo ( ) { zwoB2G1 ( ) ; zwoB2G2 ( ) ; zwoG2B1 ( ) ; zwoG2B2 ( ) ; } CWE134 goodpositive
static void paiB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void paiB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void paiG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void paiG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_11_pai ( ) { paiB2G1 ( ) ; paiB2G2 ( ) ; paiG2B1 ( ) ; paiG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_snprintf_12_xdb ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void czgB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } else { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalReturnsTrueOrFalse ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void czgG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) {  strcpy ( data , " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_12_czg ( ) { czgB2G ( ) ; czgG2B ( ) ; } CWE134 goodpositive
static void hnaB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } else { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalReturnsTrueOrFalse ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void hnaG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) {  strcpy ( data , " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } else { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_12_hna ( ) { hnaB2G ( ) ; hnaG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_snprintf_13_kcj ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( GLOBAL_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void dyoB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void dyoB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( GLOBAL_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void dyoG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void dyoG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_13_dyo ( ) { dyoB2G1 ( ) ; dyoB2G2 ( ) ; dyoG2B1 ( ) ; dyoG2B2 ( ) ; } CWE134 goodpositive
static void lwpB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void lwpB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( GLOBAL_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void lwpG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void lwpG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_13_lwp ( ) { lwpB2G1 ( ) ; lwpB2G2 ( ) ; lwpG2B1 ( ) ; lwpG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_snprintf_14_xba ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalFive = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void fihB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void fihB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalFive = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void fihG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void fihG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_14_fih ( ) { fihB2G1 ( ) ; fihB2G2 ( ) ; fihG2B1 ( ) ; fihG2B2 ( ) ; } CWE134 goodpositive
static void hxvB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void hxvB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } if ( globalFive = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void hxvG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void hxvG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_14_hxv ( ) { hxvB2G1 ( ) ; hxvB2G2 ( ) ; hxvG2B1 ( ) ; hxvG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_snprintf_15_maa ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7: { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } break ; default:  printLine ( " STRING " ) ; break ; } } CWE134 badpositive
static void ancB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printLine ( " STRING " ) ; break ; default: { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } break ; } }  static void ancB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7: { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } break ; default:  printLine ( " STRING " ) ; break ; } }  static void ancG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  printLine ( " STRING " ) ; break ; default:  strcpy ( data , " STRING " ) ; break ; } switch ( N ) { case 7: { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } break ; default:  printLine ( " STRING " ) ; break ; } }  static void ancG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  strcpy ( data , " STRING " ) ; break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7: { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } break ; default:  printLine ( " STRING " ) ; break ; } } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_15_anc ( ) { ancB2G1 ( ) ; ancB2G2 ( ) ; ancG2B1 ( ) ; ancG2B2 ( ) ; } CWE134 goodpositive
static void vdpB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printLine ( " STRING " ) ; break ; default: { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } break ; } }  static void vdpB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7: { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } break ; default:  printLine ( " STRING " ) ; break ; } }  static void vdpG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  printLine ( " STRING " ) ; break ; default:  strcpy ( data , " STRING " ) ; break ; } switch ( N ) { case 7: { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } break ; default:  printLine ( " STRING " ) ; break ; } }  static void vdpG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  strcpy ( data , " STRING " ) ; break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7: { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } break ; default:  printLine ( " STRING " ) ; break ; } } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_15_vdp ( ) { vdpB2G1 ( ) ; vdpB2G2 ( ) ; vdpG2B1 ( ) ; vdpG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_snprintf_16_rzw ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } break ; } while ( N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } break ; } } CWE134 badpositive
static void rbpB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } break ; } while ( N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } break ; } }  static void rbpG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) {  strcpy ( data , " STRING " ) ; break ; } while ( N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } break ; } } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_16_rbp ( ) { rbpB2G ( ) ; rbpG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_snprintf_17_idp ( ) { int i , j ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( i = N ; i < N ; i + + ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } for ( j = N ; j < N ; j + + ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void upfB2G ( ) { int i , k ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( i = N ; i < N ; i + + ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } } for ( k = N ; k < N ; k + + ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void upfG2B ( ) { int h , j ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( h = N ; h < N ; h + + ) {  strcpy ( data , " STRING " ) ; } for ( j = N ; j < N ; j + + ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_17_upf ( ) { upfB2G ( ) ; upfG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_snprintf_18_fka ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source: {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } goto sink ; sink: { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
static void qhhB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source: {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } goto sink ; sink: { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } }  static void qhhG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source:  strcpy ( data , " STRING " ) ; goto sink ; sink: { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_18_qhh ( ) { qhhB2G ( ) ; qhhG2B ( ) ; } CWE134 goodpositive
static int tepStatic = N ; static void tepSink ( char * data ) { if ( tepStatic ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_21_tep ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } tepStatic = N ;  tepSink ( data ) ; } CWE134 badpositive
static int wwvB2G1Static = N ; static int wwvB2G2Static = N ; static int wwvG2BStatic = N ;  static void wwvB2G1Sink ( char * data ) { if ( wwvB2G1Static ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } } static void wwvB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } wwvB2G1Static = N ;  wwvB2G1Sink ( data ) ; }  static void wwvB2G2Sink ( char * data ) { if ( wwvB2G2Static ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } } static void wwvB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } wwvB2G2Static = N ;  wwvB2G2Sink ( data ) ; }  static void wwvG2BSink ( char * data ) { if ( wwvG2BStatic ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } static void wwvG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; wwvG2BStatic = N ;  wwvG2BSink ( data ) ; } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_21_wwv ( ) { wwvB2G1 ( ) ; wwvB2G2 ( ) ; wwvG2B ( ) ; } CWE134 goodpositive
extern int CWE134_Uncontrolled_Format_String__char_environment_snprintf_22_qqiGlobal ; void CWE134_Uncontrolled_Format_String__char_environment_snprintf_22_qqiSink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_environment_snprintf_22_qqiGlobal ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
extern int CWE134_Uncontrolled_Format_String__char_environment_snprintf_22_xbqB2G1Global ; extern int CWE134_Uncontrolled_Format_String__char_environment_snprintf_22_xbqB2G2Global ; extern int CWE134_Uncontrolled_Format_String__char_environment_snprintf_22_xbqG2BGlobal ;  void CWE134_Uncontrolled_Format_String__char_environment_snprintf_22_xbqB2G1Sink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_environment_snprintf_22_xbqB2G1Global ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  void CWE134_Uncontrolled_Format_String__char_environment_snprintf_22_xbqB2G2Sink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_environment_snprintf_22_xbqB2G2Global ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  void CWE134_Uncontrolled_Format_String__char_environment_snprintf_22_xbqG2BSink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_environment_snprintf_22_xbqG2BGlobal ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_snprintf_31_qpv ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } { char * dataCopy = data ; char * data = dataCopy ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void nulG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; { char * dataCopy = data ; char * data = dataCopy ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void nulB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } { char * dataCopy = data ; char * data = dataCopy ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_31_nul ( ) { nulG2B ( ) ; nulB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_snprintf_32_nwf ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void jpcG2B ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ;  strcpy ( data , " STRING " ) ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void jpcB2G ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_32_jpc ( ) { jpcG2B ( ) ; jpcB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_snprintf_34_aev ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_environment_snprintf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void cinG2B ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_environment_snprintf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void cinB2G ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_environment_snprintf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_34_cin ( ) { cinG2B ( ) ; cinB2G ( ) ; } CWE134 goodpositive
static void qsnSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_41_qsn ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } qsnSink ( data ) ; } CWE134 badpositive
static void xidG2BSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } static void xidG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; xidG2BSink ( data ) ; }  static void xidB2GSink ( char * data ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } static void xidB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } xidB2GSink ( data ) ; } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_41_xid ( ) { xidB2G ( ) ; xidG2B ( ) ; } CWE134 goodpositive
static char * daySource ( char * data ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } return data ; } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_42_day ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = daySource ( data ) ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
static char * bzoG2BSource ( char * data ) {  strcpy ( data , " STRING " ) ; return data ; } static void bzoG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = bzoG2BSource ( data ) ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  static char * bzoB2GSource ( char * data ) { {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } return data ; } static void bzoB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = bzoB2GSource ( data ) ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_42_bzo ( ) { bzoB2G ( ) ; bzoG2B ( ) ; } CWE134 goodpositive
static void wrtSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_44_wrt ( ) { char * data ;  void ( * funcPtr ) ( char * ) = wrtSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } }  funcPtr ( data ) ; } CWE134 badpositive
static void sheG2BSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } static void sheG2B ( ) { char * data ; void ( * funcPtr ) ( char * ) = sheG2BSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; funcPtr ( data ) ; }  static void sheB2GSink ( char * data ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } static void sheB2G ( ) { char * data ; void ( * funcPtr ) ( char * ) = sheB2GSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } funcPtr ( data ) ; } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_44_she ( ) { sheG2B ( ) ; sheB2G ( ) ; } CWE134 goodpositive
static void jjwSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_environment_snprintf_45_jjwData ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_45_jjw ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } CWE134_Uncontrolled_Format_String__char_environment_snprintf_45_jjwData = data ; jjwSink ( ) ; } CWE134 badpositive
static void raeG2BSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_environment_snprintf_45_raeG2BData ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } static void raeG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; CWE134_Uncontrolled_Format_String__char_environment_snprintf_45_raeG2BData = data ; raeG2BSink ( ) ; }  static void raeB2GSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_environment_snprintf_45_raeB2GData ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } static void raeB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ;  if ( environment ! = NULL ) {  strncat ( data + dataLen , environment , N - dataLen - N ) ; } } CWE134_Uncontrolled_Format_String__char_environment_snprintf_45_raeB2GData = data ; raeB2GSink ( ) ; } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_45_rae ( ) { raeG2B ( ) ; raeB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_snprintf_51b_bmbSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_environment_snprintf_51b_bizG2BSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_environment_snprintf_51b_bizB2GSink ( char * data ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_snprintf_52c_aovSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_environment_snprintf_52c_sbmG2BSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_environment_snprintf_52c_sbmB2GSink ( char * data ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_snprintf_53d_shfSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_environment_snprintf_53d_nlnG2BSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_environment_snprintf_53d_nlnB2GSink ( char * data ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_snprintf_54e_cyhSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_environment_snprintf_54e_hagG2BSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_environment_snprintf_54e_hagB2GSink ( char * data ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
char * CWE134_Uncontrolled_Format_String__char_environment_snprintf_61b_shoSource ( char * data ) ; void CWE134_Uncontrolled_Format_String__char_environment_snprintf_61_sho ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_environment_snprintf_61b_shoSource ( data ) ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
char * CWE134_Uncontrolled_Format_String__char_environment_snprintf_61b_wgwG2BSource ( char * data ) ; static void wgwG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_environment_snprintf_61b_wgwG2BSource ( data ) ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  char * CWE134_Uncontrolled_Format_String__char_environment_snprintf_61b_wgwB2GSource ( char * data ) ; static void wgwB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_environment_snprintf_61b_wgwB2GSource ( data ) ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } void CWE134_Uncontrolled_Format_String__char_environment_snprintf_61_wgw ( ) { wgwG2B ( ) ; wgwB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_snprintf_63b_oseSink ( char * * dataPtr ) { char * data = * dataPtr ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_environment_snprintf_63b_dplG2BSink ( char * * dataPtr ) { char * data = * dataPtr ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_environment_snprintf_63b_dplB2GSink ( char * * dataPtr ) { char * data = * dataPtr ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_snprintf_64b_zruSink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_environment_snprintf_64b_pqqG2BSink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_environment_snprintf_64b_pqqB2GSink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_snprintf_65b_qbjSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_environment_snprintf_65b_tqmG2BSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_environment_snprintf_65b_tqmB2GSink ( char * data ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_snprintf_66b_njbSink ( char * dataArray [ ] ) {  char * data = dataArray [ N ] ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_environment_snprintf_66b_nzaG2BSink ( char * dataArray [ ] ) { char * data = dataArray [ N ] ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_environment_snprintf_66b_nzaB2GSink ( char * dataArray [ ] ) { char * data = dataArray [ N ] ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_snprintf_67b_jjdSink ( CWE134_Uncontrolled_Format_String__char_environment_snprintf_67_structType myStruct ) { char * data = myStruct.structFirst ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_environment_snprintf_67b_hefG2BSink ( CWE134_Uncontrolled_Format_String__char_environment_snprintf_67_structType myStruct ) { char * data = myStruct.structFirst ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_environment_snprintf_67b_hefB2GSink ( CWE134_Uncontrolled_Format_String__char_environment_snprintf_67_structType myStruct ) { char * data = myStruct.structFirst ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_environment_snprintf_68b_yupSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_environment_snprintf_68_yupData ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_environment_snprintf_68b_xkqG2BSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_environment_snprintf_68_xkqG2BData ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_environment_snprintf_68b_xkqB2GSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_environment_snprintf_68_xkqB2GData ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_fprintf_01_jah ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } }  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
static void bpiG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ;  WARNINGLINE fprintf ( stdout , data ) ; }  static void bpiB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } }  fprintf ( stdout , " %s\n " , data ) ; } void CWE134_Uncontrolled_Format_String__char_file_fprintf_01_bpi ( ) { bpiG2B ( ) ; bpiB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_fprintf_02_fbf ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void bmlB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void bmlB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void bmlG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void bmlG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  strcpy ( data , " STRING " ) ; } if ( N ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_fprintf_02_bml ( ) { bmlB2G1 ( ) ; bmlB2G2 ( ) ; bmlG2B1 ( ) ; bmlG2B2 ( ) ; } CWE134 goodpositive
static void jodB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void jodB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void jodG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N ) {  fprintf ( stdout , data ) ; } }  static void jodG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  strcpy ( data , " STRING " ) ; } if ( N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_fprintf_02_jod ( ) { jodB2G1 ( ) ; jodB2G2 ( ) ; jodG2B1 ( ) ; jodG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_fprintf_03_vrn ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( N = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void uxeB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void uxeB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( N = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void uxeG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void uxeG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) {  strcpy ( data , " STRING " ) ; } if ( N = = N ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_fprintf_03_uxe ( ) { uxeB2G1 ( ) ; uxeB2G2 ( ) ; uxeG2B1 ( ) ; uxeG2B2 ( ) ; } CWE134 goodpositive
static void nmsB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void nmsB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( N = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void nmsG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N = = N ) {  fprintf ( stdout , data ) ; } }  static void nmsG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) {  strcpy ( data , " STRING " ) ; } if ( N = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_fprintf_03_nms ( ) { nmsB2G1 ( ) ; nmsB2G2 ( ) ; nmsG2B1 ( ) ; nmsG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_fprintf_04_ewa ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( STATIC_CONST_TRUE ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void vjvB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void vjvB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( STATIC_CONST_TRUE ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void vjvG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void vjvG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_fprintf_04_vjv ( ) { vjvB2G1 ( ) ; vjvB2G2 ( ) ; vjvG2B1 ( ) ; vjvG2B2 ( ) ; } CWE134 goodpositive
static void hcqB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void hcqB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( STATIC_CONST_TRUE ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void hcqG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) {  fprintf ( stdout , data ) ; } }  static void hcqG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_fprintf_04_hcq ( ) { hcqB2G1 ( ) ; hcqB2G2 ( ) ; hcqG2B1 ( ) ; hcqG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_fprintf_05_mjw ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticTrue ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void kwiB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void kwiB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticTrue ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void kwiG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void kwiG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_fprintf_05_kwi ( ) { kwiB2G1 ( ) ; kwiB2G2 ( ) ; kwiG2B1 ( ) ; kwiG2B2 ( ) ; } CWE134 goodpositive
static void zkwB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void zkwB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticTrue ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void zkwG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) {  fprintf ( stdout , data ) ; } }  static void zkwG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_fprintf_05_zkw ( ) { zkwB2G1 ( ) ; zkwB2G2 ( ) ; zkwG2B1 ( ) ; zkwG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_fprintf_06_vaj ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( STATIC_CONST_FIVE = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void idqB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void idqB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( STATIC_CONST_FIVE = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void idqG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void idqG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_fprintf_06_idq ( ) { idqB2G1 ( ) ; idqB2G2 ( ) ; idqG2B1 ( ) ; idqG2B2 ( ) ; } CWE134 goodpositive
static void iveB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void iveB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( STATIC_CONST_FIVE = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void iveG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) {  fprintf ( stdout , data ) ; } }  static void iveG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_fprintf_06_ive ( ) { iveB2G1 ( ) ; iveB2G2 ( ) ; iveG2B1 ( ) ; iveG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_fprintf_07_mgy ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticFive = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void cdlB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void cdlB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticFive = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void cdlG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void cdlG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_fprintf_07_cdl ( ) { cdlB2G1 ( ) ; cdlB2G2 ( ) ; cdlG2B1 ( ) ; cdlG2B2 ( ) ; } CWE134 goodpositive
static void henB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void henB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticFive = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void henG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) {  fprintf ( stdout , data ) ; } }  static void henG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_fprintf_07_hen ( ) { henB2G1 ( ) ; henB2G2 ( ) ; henG2B1 ( ) ; henG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_fprintf_08_rzu ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticReturnsTrue ( ) ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void nzhB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void nzhB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticReturnsTrue ( ) ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void nzhG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void nzhG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_fprintf_08_nzh ( ) { nzhB2G1 ( ) ; nzhB2G2 ( ) ; nzhG2B1 ( ) ; nzhG2B2 ( ) ; } CWE134 goodpositive
static void wvrB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void wvrB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticReturnsTrue ( ) ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void wvrG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) {  fprintf ( stdout , data ) ; } }  static void wvrG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_fprintf_08_wvr ( ) { wvrB2G1 ( ) ; wvrB2G2 ( ) ; wvrG2B1 ( ) ; wvrG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_fprintf_09_bes ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( GLOBAL_CONST_TRUE ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void tqqB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void tqqB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( GLOBAL_CONST_TRUE ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void tqqG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void tqqG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_fprintf_09_tqq ( ) { tqqB2G1 ( ) ; tqqB2G2 ( ) ; tqqG2B1 ( ) ; tqqG2B2 ( ) ; } CWE134 goodpositive
static void osiB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void osiB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( GLOBAL_CONST_TRUE ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void osiG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) {  fprintf ( stdout , data ) ; } }  static void osiG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_fprintf_09_osi ( ) { osiB2G1 ( ) ; osiB2G2 ( ) ; osiG2B1 ( ) ; osiG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_fprintf_10_vfp ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalTrue ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void fldB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void fldB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalTrue ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void fldG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void fldG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_fprintf_10_fld ( ) { fldB2G1 ( ) ; fldB2G2 ( ) ; fldG2B1 ( ) ; fldG2B2 ( ) ; } CWE134 goodpositive
static void gmpB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void gmpB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalTrue ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void gmpG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) {  fprintf ( stdout , data ) ; } }  static void gmpG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_fprintf_10_gmp ( ) { gmpB2G1 ( ) ; gmpB2G2 ( ) ; gmpG2B1 ( ) ; gmpG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_fprintf_11_hik ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalReturnsTrue ( ) ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void ghcB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void ghcB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalReturnsTrue ( ) ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void ghcG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void ghcG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_fprintf_11_ghc ( ) { ghcB2G1 ( ) ; ghcB2G2 ( ) ; ghcG2B1 ( ) ; ghcG2B2 ( ) ; } CWE134 goodpositive
static void yqbB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void yqbB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalReturnsTrue ( ) ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void yqbG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) {  fprintf ( stdout , data ) ; } }  static void yqbG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_fprintf_11_yqb ( ) { yqbB2G1 ( ) ; yqbB2G2 ( ) ; yqbG2B1 ( ) ; yqbG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_fprintf_12_nrj ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) {  WARNINGLINE fprintf ( stdout , data ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } } CWE134 badpositive
static void egqB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } else { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalReturnsTrueOrFalse ( ) ) {  fprintf ( stdout , " %s\n " , data ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void egqG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) {  strcpy ( data , " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) {  WARNINGLINE fprintf ( stdout , data ) ; } else {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_fprintf_12_egq ( ) { egqB2G ( ) ; egqG2B ( ) ; } CWE134 goodpositive
static void hgxB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } else { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalReturnsTrueOrFalse ( ) ) {  fprintf ( stdout , " %s\n " , data ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void hgxG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) {  strcpy ( data , " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) {  fprintf ( stdout , data ) ; } else {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_fprintf_12_hgx ( ) { hgxB2G ( ) ; hgxG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_fprintf_13_ore ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( GLOBAL_CONST_FIVE = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void zxkB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void zxkB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( GLOBAL_CONST_FIVE = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void zxkG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void zxkG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_fprintf_13_zxk ( ) { zxkB2G1 ( ) ; zxkB2G2 ( ) ; zxkG2B1 ( ) ; zxkG2B2 ( ) ; } CWE134 goodpositive
static void rylB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void rylB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( GLOBAL_CONST_FIVE = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void rylG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) {  fprintf ( stdout , data ) ; } }  static void rylG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_fprintf_13_ryl ( ) { rylB2G1 ( ) ; rylB2G2 ( ) ; rylG2B1 ( ) ; rylG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_fprintf_14_how ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalFive = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void sygB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void sygB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalFive = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void sygG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void sygG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_fprintf_14_syg ( ) { sygB2G1 ( ) ; sygB2G2 ( ) ; sygG2B1 ( ) ; sygG2B2 ( ) ; } CWE134 goodpositive
static void zbbB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void zbbB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalFive = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void zbbG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) {  fprintf ( stdout , data ) ; } }  static void zbbG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_fprintf_14_zbb ( ) { zbbB2G1 ( ) ; zbbB2G2 ( ) ; zbbG2B1 ( ) ; zbbG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_fprintf_15_hol ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  WARNINGLINE fprintf ( stdout , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } } CWE134 badpositive
static void fxwB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printLine ( " STRING " ) ; break ; default:  fprintf ( stdout , " %s\n " , data ) ; break ; } }  static void fxwB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  fprintf ( stdout , " %s\n " , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } }  static void fxwG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  printLine ( " STRING " ) ; break ; default:  strcpy ( data , " STRING " ) ; break ; } switch ( N ) { case 7:  WARNINGLINE fprintf ( stdout , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } }  static void fxwG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  strcpy ( data , " STRING " ) ; break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  fprintf ( stdout , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } } void CWE134_Uncontrolled_Format_String__char_file_fprintf_15_fxw ( ) { fxwB2G1 ( ) ; fxwB2G2 ( ) ; fxwG2B1 ( ) ; fxwG2B2 ( ) ; } CWE134 goodpositive
static void odtB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printLine ( " STRING " ) ; break ; default:  fprintf ( stdout , " %s\n " , data ) ; break ; } }  static void odtB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  fprintf ( stdout , " %s\n " , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } }  static void odtG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  printLine ( " STRING " ) ; break ; default:  strcpy ( data , " STRING " ) ; break ; } switch ( N ) { case 7:  fprintf ( stdout , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } }  static void odtG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  strcpy ( data , " STRING " ) ; break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  WARNINGLINE fprintf ( stdout , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } } void CWE134_Uncontrolled_Format_String__char_file_fprintf_15_odt ( ) { odtB2G1 ( ) ; odtB2G2 ( ) ; odtG2B1 ( ) ; odtG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_fprintf_16_xqe ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } break ; } while ( N ) {  WARNINGLINE fprintf ( stdout , data ) ; break ; } } CWE134 badpositive
static void fnjB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } break ; } while ( N ) {  fprintf ( stdout , " %s\n " , data ) ; break ; } }  static void fnjG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) {  strcpy ( data , " STRING " ) ; break ; } while ( N ) {  WARNINGLINE fprintf ( stdout , data ) ; break ; } } void CWE134_Uncontrolled_Format_String__char_file_fprintf_16_fnj ( ) { fnjB2G ( ) ; fnjG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_fprintf_17_uma ( ) { int i , j ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( i = N ; i < N ; i + + ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } for ( j = N ; j < N ; j + + ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void julB2G ( ) { int i , k ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( i = N ; i < N ; i + + ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } for ( k = N ; k < N ; k + + ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void julG2B ( ) { int h , j ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( h = N ; h < N ; h + + ) {  strcpy ( data , " STRING " ) ; } for ( j = N ; j < N ; j + + ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_fprintf_17_jul ( ) { julB2G ( ) ; julG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_fprintf_18_dky ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source: {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } goto sink ; sink:  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
static void jvdB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source: {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } goto sink ; sink:  fprintf ( stdout , " %s\n " , data ) ; }  static void jvdG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source:  strcpy ( data , " STRING " ) ; goto sink ; sink:  WARNINGLINE fprintf ( stdout , data ) ; } void CWE134_Uncontrolled_Format_String__char_file_fprintf_18_jvd ( ) { jvdB2G ( ) ; jvdG2B ( ) ; } CWE134 goodpositive
static int zbuStatic = N ; static void zbuSink ( char * data ) { if ( zbuStatic ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_fprintf_21_zbu ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } zbuStatic = N ;  zbuSink ( data ) ; } CWE134 badpositive
static int ykeB2G1Static = N ; static int ykeB2G2Static = N ; static int ykeG2BStatic = N ;  static void ykeB2G1Sink ( char * data ) { if ( ykeB2G1Static ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } } static void ykeB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } ykeB2G1Static = N ;  ykeB2G1Sink ( data ) ; }  static void ykeB2G2Sink ( char * data ) { if ( ykeB2G2Static ) {  fprintf ( stdout , " %s\n " , data ) ; } } static void ykeB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } ykeB2G2Static = N ;  ykeB2G2Sink ( data ) ; }  static void ykeG2BSink ( char * data ) { if ( ykeG2BStatic ) {  WARNINGLINE fprintf ( stdout , data ) ; } } static void ykeG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; ykeG2BStatic = N ;  ykeG2BSink ( data ) ; } void CWE134_Uncontrolled_Format_String__char_file_fprintf_21_yke ( ) { ykeB2G1 ( ) ; ykeB2G2 ( ) ; ykeG2B ( ) ; } CWE134 goodpositive
extern int CWE134_Uncontrolled_Format_String__char_file_fprintf_22_yxxGlobal ; void CWE134_Uncontrolled_Format_String__char_file_fprintf_22_yxxSink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_file_fprintf_22_yxxGlobal ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
extern int CWE134_Uncontrolled_Format_String__char_file_fprintf_22_xopB2G1Global ; extern int CWE134_Uncontrolled_Format_String__char_file_fprintf_22_xopB2G2Global ; extern int CWE134_Uncontrolled_Format_String__char_file_fprintf_22_xopG2BGlobal ;  void CWE134_Uncontrolled_Format_String__char_file_fprintf_22_xopB2G1Sink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_file_fprintf_22_xopB2G1Global ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  void CWE134_Uncontrolled_Format_String__char_file_fprintf_22_xopB2G2Sink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_file_fprintf_22_xopB2G2Global ) {  fprintf ( stdout , " %s\n " , data ) ; } }  void CWE134_Uncontrolled_Format_String__char_file_fprintf_22_xopG2BSink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_file_fprintf_22_xopG2BGlobal ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_fprintf_31_ocv ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } { char * dataCopy = data ; char * data = dataCopy ;  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void rcaG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; { char * dataCopy = data ; char * data = dataCopy ;  WARNINGLINE fprintf ( stdout , data ) ; } }  static void rcaB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } { char * dataCopy = data ; char * data = dataCopy ;  fprintf ( stdout , " %s\n " , data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_fprintf_31_rca ( ) { rcaG2B ( ) ; rcaB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_fprintf_32_giw ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } * dataPtr1 = data ; } { char * data = * dataPtr2 ;  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void mdlG2B ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ;  strcpy ( data , " STRING " ) ; * dataPtr1 = data ; } { char * data = * dataPtr2 ;  WARNINGLINE fprintf ( stdout , data ) ; } }  static void mdlB2G ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } * dataPtr1 = data ; } { char * data = * dataPtr2 ;  fprintf ( stdout , " %s\n " , data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_fprintf_32_mdl ( ) { mdlG2B ( ) ; mdlB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_fprintf_34_vib ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_file_fprintf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ;  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void karG2B ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_file_fprintf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ;  WARNINGLINE fprintf ( stdout , data ) ; } }  static void karB2G ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_file_fprintf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ;  fprintf ( stdout , " %s\n " , data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_fprintf_34_kar ( ) { karG2B ( ) ; karB2G ( ) ; } CWE134 goodpositive
static void efwSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } void CWE134_Uncontrolled_Format_String__char_file_fprintf_41_efw ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } efwSink ( data ) ; } CWE134 badpositive
static void vkrG2BSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } static void vkrG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; vkrG2BSink ( data ) ; }  static void vkrB2GSink ( char * data ) {  fprintf ( stdout , " %s\n " , data ) ; } static void vkrB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } vkrB2GSink ( data ) ; } void CWE134_Uncontrolled_Format_String__char_file_fprintf_41_vkr ( ) { vkrB2G ( ) ; vkrG2B ( ) ; } CWE134 goodpositive
static char * xjdSource ( char * data ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } return data ; } void CWE134_Uncontrolled_Format_String__char_file_fprintf_42_xjd ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = xjdSource ( data ) ;  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
static char * qlsG2BSource ( char * data ) {  strcpy ( data , " STRING " ) ; return data ; } static void qlsG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = qlsG2BSource ( data ) ;  WARNINGLINE fprintf ( stdout , data ) ; }  static char * qlsB2GSource ( char * data ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } return data ; } static void qlsB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = qlsB2GSource ( data ) ;  fprintf ( stdout , " %s\n " , data ) ; } void CWE134_Uncontrolled_Format_String__char_file_fprintf_42_qls ( ) { qlsB2G ( ) ; qlsG2B ( ) ; } CWE134 goodpositive
static void ewjSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } void CWE134_Uncontrolled_Format_String__char_file_fprintf_44_ewj ( ) { char * data ;  void ( * funcPtr ) ( char * ) = ewjSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } }  funcPtr ( data ) ; } CWE134 badpositive
static void jgdG2BSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } static void jgdG2B ( ) { char * data ; void ( * funcPtr ) ( char * ) = jgdG2BSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; funcPtr ( data ) ; }  static void jgdB2GSink ( char * data ) {  fprintf ( stdout , " %s\n " , data ) ; } static void jgdB2G ( ) { char * data ; void ( * funcPtr ) ( char * ) = jgdB2GSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } funcPtr ( data ) ; } void CWE134_Uncontrolled_Format_String__char_file_fprintf_44_jgd ( ) { jgdG2B ( ) ; jgdB2G ( ) ; } CWE134 goodpositive
static void xscSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_file_fprintf_45_xscData ;  WARNINGLINE fprintf ( stdout , data ) ; } void CWE134_Uncontrolled_Format_String__char_file_fprintf_45_xsc ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } CWE134_Uncontrolled_Format_String__char_file_fprintf_45_xscData = data ; xscSink ( ) ; } CWE134 badpositive
static void cyiG2BSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_file_fprintf_45_cyiG2BData ;  WARNINGLINE fprintf ( stdout , data ) ; } static void cyiG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; CWE134_Uncontrolled_Format_String__char_file_fprintf_45_cyiG2BData = data ; cyiG2BSink ( ) ; }  static void cyiB2GSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_file_fprintf_45_cyiB2GData ;  fprintf ( stdout , " %s\n " , data ) ; } static void cyiB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } CWE134_Uncontrolled_Format_String__char_file_fprintf_45_cyiB2GData = data ; cyiB2GSink ( ) ; } void CWE134_Uncontrolled_Format_String__char_file_fprintf_45_cyi ( ) { cyiG2B ( ) ; cyiB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_fprintf_51b_afuSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_file_fprintf_51b_yojG2BSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_file_fprintf_51b_yojB2GSink ( char * data ) {  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_fprintf_52c_uxiSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_file_fprintf_52c_jsjG2BSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_file_fprintf_52c_jsjB2GSink ( char * data ) {  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_fprintf_53d_oknSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_file_fprintf_53d_mkgG2BSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_file_fprintf_53d_mkgB2GSink ( char * data ) {  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_fprintf_54e_zidSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_file_fprintf_54e_clgG2BSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_file_fprintf_54e_clgB2GSink ( char * data ) {  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
char * CWE134_Uncontrolled_Format_String__char_file_fprintf_61b_laeSource ( char * data ) ; void CWE134_Uncontrolled_Format_String__char_file_fprintf_61_lae ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_file_fprintf_61b_laeSource ( data ) ;  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
char * CWE134_Uncontrolled_Format_String__char_file_fprintf_61b_oudG2BSource ( char * data ) ; static void oudG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_file_fprintf_61b_oudG2BSource ( data ) ;  WARNINGLINE fprintf ( stdout , data ) ; }  char * CWE134_Uncontrolled_Format_String__char_file_fprintf_61b_oudB2GSource ( char * data ) ; static void oudB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_file_fprintf_61b_oudB2GSource ( data ) ;  fprintf ( stdout , " %s\n " , data ) ; } void CWE134_Uncontrolled_Format_String__char_file_fprintf_61_oud ( ) { oudG2B ( ) ; oudB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_fprintf_63b_wbbSink ( char * * dataPtr ) { char * data = * dataPtr ;  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_file_fprintf_63b_hfbG2BSink ( char * * dataPtr ) { char * data = * dataPtr ;  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_file_fprintf_63b_hfbB2GSink ( char * * dataPtr ) { char * data = * dataPtr ;  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_fprintf_64b_jvvSink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ;  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_file_fprintf_64b_vixG2BSink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ;  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_file_fprintf_64b_vixB2GSink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ;  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_fprintf_65b_htwSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_file_fprintf_65b_qhbG2BSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_file_fprintf_65b_qhbB2GSink ( char * data ) {  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_fprintf_66b_vlpSink ( char * dataArray [ ] ) {  char * data = dataArray [ N ] ;  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_file_fprintf_66b_vgyG2BSink ( char * dataArray [ ] ) { char * data = dataArray [ N ] ;  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_file_fprintf_66b_vgyB2GSink ( char * dataArray [ ] ) { char * data = dataArray [ N ] ;  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_fprintf_67b_ouySink ( CWE134_Uncontrolled_Format_String__char_file_fprintf_67_structType myStruct ) { char * data = myStruct.structFirst ;  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_file_fprintf_67b_vrdG2BSink ( CWE134_Uncontrolled_Format_String__char_file_fprintf_67_structType myStruct ) { char * data = myStruct.structFirst ;  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_file_fprintf_67b_vrdB2GSink ( CWE134_Uncontrolled_Format_String__char_file_fprintf_67_structType myStruct ) { char * data = myStruct.structFirst ;  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_fprintf_68b_lwnSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_file_fprintf_68_lwnData ;  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_file_fprintf_68b_syuG2BSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_file_fprintf_68_syuG2BData ;  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_file_fprintf_68b_syuB2GSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_file_fprintf_68_syuB2GData ;  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_printf_01_vic ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } }  WARNINGLINE printf ( data ) ; } CWE134 badpositive
static void stnG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ;  WARNINGLINE printf ( data ) ; }  static void stnB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } }  printf ( " %s\n " , data ) ; } void CWE134_Uncontrolled_Format_String__char_file_printf_01_stn ( ) { stnG2B ( ) ; stnB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_printf_02_dqx ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( N ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void xhqB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void xhqB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( N ) {  printf ( " %s\n " , data ) ; } }  static void xhqG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N ) {  WARNINGLINE printf ( data ) ; } }  static void xhqG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  strcpy ( data , " STRING " ) ; } if ( N ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_printf_02_xhq ( ) { xhqB2G1 ( ) ; xhqB2G2 ( ) ; xhqG2B1 ( ) ; xhqG2B2 ( ) ; } CWE134 goodpositive
static void jzxB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void jzxB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( N ) {  printf ( " %s\n " , data ) ; } }  static void jzxG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N ) {  printf ( data ) ; } }  static void jzxG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  strcpy ( data , " STRING " ) ; } if ( N ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_printf_02_jzx ( ) { jzxB2G1 ( ) ; jzxB2G2 ( ) ; jzxG2B1 ( ) ; jzxG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_printf_03_gqn ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( N = = N ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void cfmB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void cfmB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( N = = N ) {  printf ( " %s\n " , data ) ; } }  static void cfmG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N = = N ) {  WARNINGLINE printf ( data ) ; } }  static void cfmG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) {  strcpy ( data , " STRING " ) ; } if ( N = = N ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_printf_03_cfm ( ) { cfmB2G1 ( ) ; cfmB2G2 ( ) ; cfmG2B1 ( ) ; cfmG2B2 ( ) ; } CWE134 goodpositive
static void pwnB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void pwnB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( N = = N ) {  printf ( " %s\n " , data ) ; } }  static void pwnG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N = = N ) {  printf ( data ) ; } }  static void pwnG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) {  strcpy ( data , " STRING " ) ; } if ( N = = N ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_printf_03_pwn ( ) { pwnB2G1 ( ) ; pwnB2G2 ( ) ; pwnG2B1 ( ) ; pwnG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_printf_04_bzo ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( STATIC_CONST_TRUE ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void myvB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void myvB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( STATIC_CONST_TRUE ) {  printf ( " %s\n " , data ) ; } }  static void myvG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) {  WARNINGLINE printf ( data ) ; } }  static void myvG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_printf_04_myv ( ) { myvB2G1 ( ) ; myvB2G2 ( ) ; myvG2B1 ( ) ; myvG2B2 ( ) ; } CWE134 goodpositive
static void eppB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void eppB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( STATIC_CONST_TRUE ) {  printf ( " %s\n " , data ) ; } }  static void eppG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) {  printf ( data ) ; } }  static void eppG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_printf_04_epp ( ) { eppB2G1 ( ) ; eppB2G2 ( ) ; eppG2B1 ( ) ; eppG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_printf_05_gmu ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticTrue ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void motB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void motB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticTrue ) {  printf ( " %s\n " , data ) ; } }  static void motG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) {  WARNINGLINE printf ( data ) ; } }  static void motG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_printf_05_mot ( ) { motB2G1 ( ) ; motB2G2 ( ) ; motG2B1 ( ) ; motG2B2 ( ) ; } CWE134 goodpositive
static void uadB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void uadB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticTrue ) {  printf ( " %s\n " , data ) ; } }  static void uadG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) {  printf ( data ) ; } }  static void uadG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_printf_05_uad ( ) { uadB2G1 ( ) ; uadB2G2 ( ) ; uadG2B1 ( ) ; uadG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_printf_06_kgx ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( STATIC_CONST_FIVE = = N ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void iddB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void iddB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( STATIC_CONST_FIVE = = N ) {  printf ( " %s\n " , data ) ; } }  static void iddG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) {  WARNINGLINE printf ( data ) ; } }  static void iddG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_printf_06_idd ( ) { iddB2G1 ( ) ; iddB2G2 ( ) ; iddG2B1 ( ) ; iddG2B2 ( ) ; } CWE134 goodpositive
static void gboB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void gboB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( STATIC_CONST_FIVE = = N ) {  printf ( " %s\n " , data ) ; } }  static void gboG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) {  printf ( data ) ; } }  static void gboG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_printf_06_gbo ( ) { gboB2G1 ( ) ; gboB2G2 ( ) ; gboG2B1 ( ) ; gboG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_printf_07_ani ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticFive = = N ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void coaB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void coaB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticFive = = N ) {  printf ( " %s\n " , data ) ; } }  static void coaG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) {  WARNINGLINE printf ( data ) ; } }  static void coaG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_printf_07_coa ( ) { coaB2G1 ( ) ; coaB2G2 ( ) ; coaG2B1 ( ) ; coaG2B2 ( ) ; } CWE134 goodpositive
static void dmaB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void dmaB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticFive = = N ) {  printf ( " %s\n " , data ) ; } }  static void dmaG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) {  printf ( data ) ; } }  static void dmaG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_printf_07_dma ( ) { dmaB2G1 ( ) ; dmaB2G2 ( ) ; dmaG2B1 ( ) ; dmaG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_printf_08_wjt ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticReturnsTrue ( ) ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void cdsB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void cdsB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticReturnsTrue ( ) ) {  printf ( " %s\n " , data ) ; } }  static void cdsG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) {  WARNINGLINE printf ( data ) ; } }  static void cdsG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_printf_08_cds ( ) { cdsB2G1 ( ) ; cdsB2G2 ( ) ; cdsG2B1 ( ) ; cdsG2B2 ( ) ; } CWE134 goodpositive
static void sqfB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void sqfB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticReturnsTrue ( ) ) {  printf ( " %s\n " , data ) ; } }  static void sqfG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) {  printf ( data ) ; } }  static void sqfG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_printf_08_sqf ( ) { sqfB2G1 ( ) ; sqfB2G2 ( ) ; sqfG2B1 ( ) ; sqfG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_printf_09_qlt ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( GLOBAL_CONST_TRUE ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void fdvB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void fdvB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( GLOBAL_CONST_TRUE ) {  printf ( " %s\n " , data ) ; } }  static void fdvG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) {  WARNINGLINE printf ( data ) ; } }  static void fdvG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_printf_09_fdv ( ) { fdvB2G1 ( ) ; fdvB2G2 ( ) ; fdvG2B1 ( ) ; fdvG2B2 ( ) ; } CWE134 goodpositive
static void dfgB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void dfgB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( GLOBAL_CONST_TRUE ) {  printf ( " %s\n " , data ) ; } }  static void dfgG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) {  printf ( data ) ; } }  static void dfgG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_printf_09_dfg ( ) { dfgB2G1 ( ) ; dfgB2G2 ( ) ; dfgG2B1 ( ) ; dfgG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_printf_10_zgu ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalTrue ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void dqhB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void dqhB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalTrue ) {  printf ( " %s\n " , data ) ; } }  static void dqhG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) {  WARNINGLINE printf ( data ) ; } }  static void dqhG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_printf_10_dqh ( ) { dqhB2G1 ( ) ; dqhB2G2 ( ) ; dqhG2B1 ( ) ; dqhG2B2 ( ) ; } CWE134 goodpositive
static void sxuB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void sxuB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalTrue ) {  printf ( " %s\n " , data ) ; } }  static void sxuG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) {  printf ( data ) ; } }  static void sxuG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_printf_10_sxu ( ) { sxuB2G1 ( ) ; sxuB2G2 ( ) ; sxuG2B1 ( ) ; sxuG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_printf_11_zli ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalReturnsTrue ( ) ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void itaB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void itaB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalReturnsTrue ( ) ) {  printf ( " %s\n " , data ) ; } }  static void itaG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) {  WARNINGLINE printf ( data ) ; } }  static void itaG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_printf_11_ita ( ) { itaB2G1 ( ) ; itaB2G2 ( ) ; itaG2B1 ( ) ; itaG2B2 ( ) ; } CWE134 goodpositive
static void ddyB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void ddyB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalReturnsTrue ( ) ) {  printf ( " %s\n " , data ) ; } }  static void ddyG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) {  printf ( data ) ; } }  static void ddyG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_printf_11_ddy ( ) { ddyB2G1 ( ) ; ddyB2G2 ( ) ; ddyG2B1 ( ) ; ddyG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_printf_12_vae ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) {  WARNINGLINE printf ( data ) ; } else {  printf ( " %s\n " , data ) ; } } CWE134 badpositive
static void uyyB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } else { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalReturnsTrueOrFalse ( ) ) {  printf ( " %s\n " , data ) ; } else {  printf ( " %s\n " , data ) ; } }  static void uyyG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) {  strcpy ( data , " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) {  WARNINGLINE printf ( data ) ; } else {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_printf_12_uyy ( ) { uyyB2G ( ) ; uyyG2B ( ) ; } CWE134 goodpositive
static void pdnB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } else { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalReturnsTrueOrFalse ( ) ) {  printf ( " %s\n " , data ) ; } else {  printf ( " %s\n " , data ) ; } }  static void pdnG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) {  strcpy ( data , " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) {  printf ( data ) ; } else {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_printf_12_pdn ( ) { pdnB2G ( ) ; pdnG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_printf_13_drv ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( GLOBAL_CONST_FIVE = = N ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void gqkB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void gqkB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( GLOBAL_CONST_FIVE = = N ) {  printf ( " %s\n " , data ) ; } }  static void gqkG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) {  WARNINGLINE printf ( data ) ; } }  static void gqkG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_printf_13_gqk ( ) { gqkB2G1 ( ) ; gqkB2G2 ( ) ; gqkG2B1 ( ) ; gqkG2B2 ( ) ; } CWE134 goodpositive
static void bypB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void bypB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( GLOBAL_CONST_FIVE = = N ) {  printf ( " %s\n " , data ) ; } }  static void bypG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) {  printf ( data ) ; } }  static void bypG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_printf_13_byp ( ) { bypB2G1 ( ) ; bypB2G2 ( ) ; bypG2B1 ( ) ; bypG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_printf_14_iof ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalFive = = N ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void djyB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void djyB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalFive = = N ) {  printf ( " %s\n " , data ) ; } }  static void djyG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) {  WARNINGLINE printf ( data ) ; } }  static void djyG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_printf_14_djy ( ) { djyB2G1 ( ) ; djyB2G2 ( ) ; djyG2B1 ( ) ; djyG2B2 ( ) ; } CWE134 goodpositive
static void sdqB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void sdqB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalFive = = N ) {  printf ( " %s\n " , data ) ; } }  static void sdqG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) {  printf ( data ) ; } }  static void sdqG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_printf_14_sdq ( ) { sdqB2G1 ( ) ; sdqB2G2 ( ) ; sdqG2B1 ( ) ; sdqG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_printf_15_hsu ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  WARNINGLINE printf ( data ) ; break ; default:  printLine ( " STRING " ) ; break ; } } CWE134 badpositive
static void yslB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printLine ( " STRING " ) ; break ; default:  printf ( " %s\n " , data ) ; break ; } }  static void yslB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printf ( " %s\n " , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } }  static void yslG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  printLine ( " STRING " ) ; break ; default:  strcpy ( data , " STRING " ) ; break ; } switch ( N ) { case 7:  WARNINGLINE printf ( data ) ; break ; default:  printLine ( " STRING " ) ; break ; } }  static void yslG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  strcpy ( data , " STRING " ) ; break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printf ( data ) ; break ; default:  printLine ( " STRING " ) ; break ; } } void CWE134_Uncontrolled_Format_String__char_file_printf_15_ysl ( ) { yslB2G1 ( ) ; yslB2G2 ( ) ; yslG2B1 ( ) ; yslG2B2 ( ) ; } CWE134 goodpositive
static void qiqB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printLine ( " STRING " ) ; break ; default:  printf ( " %s\n " , data ) ; break ; } }  static void qiqB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printf ( " %s\n " , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } }  static void qiqG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  printLine ( " STRING " ) ; break ; default:  strcpy ( data , " STRING " ) ; break ; } switch ( N ) { case 7:  printf ( data ) ; break ; default:  printLine ( " STRING " ) ; break ; } }  static void qiqG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  strcpy ( data , " STRING " ) ; break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  WARNINGLINE printf ( data ) ; break ; default:  printLine ( " STRING " ) ; break ; } } void CWE134_Uncontrolled_Format_String__char_file_printf_15_qiq ( ) { qiqB2G1 ( ) ; qiqB2G2 ( ) ; qiqG2B1 ( ) ; qiqG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_printf_16_hvm ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } break ; } while ( N ) {  WARNINGLINE printf ( data ) ; break ; } } CWE134 badpositive
static void xjlB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } break ; } while ( N ) {  printf ( " %s\n " , data ) ; break ; } }  static void xjlG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) {  strcpy ( data , " STRING " ) ; break ; } while ( N ) {  WARNINGLINE printf ( data ) ; break ; } } void CWE134_Uncontrolled_Format_String__char_file_printf_16_xjl ( ) { xjlB2G ( ) ; xjlG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_printf_17_dig ( ) { int i , j ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( i = N ; i < N ; i + + ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } for ( j = N ; j < N ; j + + ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void wvaB2G ( ) { int i , k ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( i = N ; i < N ; i + + ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } for ( k = N ; k < N ; k + + ) {  printf ( " %s\n " , data ) ; } }  static void wvaG2B ( ) { int h , j ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( h = N ; h < N ; h + + ) {  strcpy ( data , " STRING " ) ; } for ( j = N ; j < N ; j + + ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_printf_17_wva ( ) { wvaB2G ( ) ; wvaG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_printf_18_rsa ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source: {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } goto sink ; sink:  WARNINGLINE printf ( data ) ; } CWE134 badpositive
static void mvbB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source: {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } goto sink ; sink:  printf ( " %s\n " , data ) ; }  static void mvbG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source:  strcpy ( data , " STRING " ) ; goto sink ; sink:  WARNINGLINE printf ( data ) ; } void CWE134_Uncontrolled_Format_String__char_file_printf_18_mvb ( ) { mvbB2G ( ) ; mvbG2B ( ) ; } CWE134 goodpositive
static int qreStatic = N ; static void qreSink ( char * data ) { if ( qreStatic ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_printf_21_qre ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } qreStatic = N ;  qreSink ( data ) ; } CWE134 badpositive
static int qzwB2G1Static = N ; static int qzwB2G2Static = N ; static int qzwG2BStatic = N ;  static void qzwB2G1Sink ( char * data ) { if ( qzwB2G1Static ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } } static void qzwB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } qzwB2G1Static = N ;  qzwB2G1Sink ( data ) ; }  static void qzwB2G2Sink ( char * data ) { if ( qzwB2G2Static ) {  printf ( " %s\n " , data ) ; } } static void qzwB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } qzwB2G2Static = N ;  qzwB2G2Sink ( data ) ; }  static void qzwG2BSink ( char * data ) { if ( qzwG2BStatic ) {  WARNINGLINE printf ( data ) ; } } static void qzwG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; qzwG2BStatic = N ;  qzwG2BSink ( data ) ; } void CWE134_Uncontrolled_Format_String__char_file_printf_21_qzw ( ) { qzwB2G1 ( ) ; qzwB2G2 ( ) ; qzwG2B ( ) ; } CWE134 goodpositive
extern int CWE134_Uncontrolled_Format_String__char_file_printf_22_lxjGlobal ; void CWE134_Uncontrolled_Format_String__char_file_printf_22_lxjSink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_file_printf_22_lxjGlobal ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
extern int CWE134_Uncontrolled_Format_String__char_file_printf_22_ywsB2G1Global ; extern int CWE134_Uncontrolled_Format_String__char_file_printf_22_ywsB2G2Global ; extern int CWE134_Uncontrolled_Format_String__char_file_printf_22_ywsG2BGlobal ;  void CWE134_Uncontrolled_Format_String__char_file_printf_22_ywsB2G1Sink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_file_printf_22_ywsB2G1Global ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  void CWE134_Uncontrolled_Format_String__char_file_printf_22_ywsB2G2Sink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_file_printf_22_ywsB2G2Global ) {  printf ( " %s\n " , data ) ; } }  void CWE134_Uncontrolled_Format_String__char_file_printf_22_ywsG2BSink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_file_printf_22_ywsG2BGlobal ) {  WARNINGLINE printf ( data ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_printf_31_nbr ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } { char * dataCopy = data ; char * data = dataCopy ;  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void xgmG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; { char * dataCopy = data ; char * data = dataCopy ;  WARNINGLINE printf ( data ) ; } }  static void xgmB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } { char * dataCopy = data ; char * data = dataCopy ;  printf ( " %s\n " , data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_printf_31_xgm ( ) { xgmG2B ( ) ; xgmB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_printf_32_yud ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } * dataPtr1 = data ; } { char * data = * dataPtr2 ;  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void qgtG2B ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ;  strcpy ( data , " STRING " ) ; * dataPtr1 = data ; } { char * data = * dataPtr2 ;  WARNINGLINE printf ( data ) ; } }  static void qgtB2G ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } * dataPtr1 = data ; } { char * data = * dataPtr2 ;  printf ( " %s\n " , data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_printf_32_qgt ( ) { qgtG2B ( ) ; qgtB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_printf_34_sdl ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_file_printf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ;  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void zcyG2B ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_file_printf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ;  WARNINGLINE printf ( data ) ; } }  static void zcyB2G ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_file_printf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ;  printf ( " %s\n " , data ) ; } } void CWE134_Uncontrolled_Format_String__char_file_printf_34_zcy ( ) { zcyG2B ( ) ; zcyB2G ( ) ; } CWE134 goodpositive
static void qpmSink ( char * data ) {  WARNINGLINE printf ( data ) ; } void CWE134_Uncontrolled_Format_String__char_file_printf_41_qpm ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } qpmSink ( data ) ; } CWE134 badpositive
static void flxG2BSink ( char * data ) {  WARNINGLINE printf ( data ) ; } static void flxG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; flxG2BSink ( data ) ; }  static void flxB2GSink ( char * data ) {  printf ( " %s\n " , data ) ; } static void flxB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } flxB2GSink ( data ) ; } void CWE134_Uncontrolled_Format_String__char_file_printf_41_flx ( ) { flxB2G ( ) ; flxG2B ( ) ; } CWE134 goodpositive
static char * nswSource ( char * data ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } return data ; } void CWE134_Uncontrolled_Format_String__char_file_printf_42_nsw ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = nswSource ( data ) ;  WARNINGLINE printf ( data ) ; } CWE134 badpositive
static char * ymvG2BSource ( char * data ) {  strcpy ( data , " STRING " ) ; return data ; } static void ymvG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = ymvG2BSource ( data ) ;  WARNINGLINE printf ( data ) ; }  static char * ymvB2GSource ( char * data ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } return data ; } static void ymvB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = ymvB2GSource ( data ) ;  printf ( " %s\n " , data ) ; } void CWE134_Uncontrolled_Format_String__char_file_printf_42_ymv ( ) { ymvB2G ( ) ; ymvG2B ( ) ; } CWE134 goodpositive
static void gacSink ( char * data ) {  WARNINGLINE printf ( data ) ; } void CWE134_Uncontrolled_Format_String__char_file_printf_44_gac ( ) { char * data ;  void ( * funcPtr ) ( char * ) = gacSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } }  funcPtr ( data ) ; } CWE134 badpositive
static void utsG2BSink ( char * data ) {  WARNINGLINE printf ( data ) ; } static void utsG2B ( ) { char * data ; void ( * funcPtr ) ( char * ) = utsG2BSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; funcPtr ( data ) ; }  static void utsB2GSink ( char * data ) {  printf ( " %s\n " , data ) ; } static void utsB2G ( ) { char * data ; void ( * funcPtr ) ( char * ) = utsB2GSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } funcPtr ( data ) ; } void CWE134_Uncontrolled_Format_String__char_file_printf_44_uts ( ) { utsG2B ( ) ; utsB2G ( ) ; } CWE134 goodpositive
static void kjhSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_file_printf_45_kjhData ;  WARNINGLINE printf ( data ) ; } void CWE134_Uncontrolled_Format_String__char_file_printf_45_kjh ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } CWE134_Uncontrolled_Format_String__char_file_printf_45_kjhData = data ; kjhSink ( ) ; } CWE134 badpositive
static void qlhG2BSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_file_printf_45_qlhG2BData ;  WARNINGLINE printf ( data ) ; } static void qlhG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; CWE134_Uncontrolled_Format_String__char_file_printf_45_qlhG2BData = data ; qlhG2BSink ( ) ; }  static void qlhB2GSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_file_printf_45_qlhB2GData ;  printf ( " %s\n " , data ) ; } static void qlhB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } CWE134_Uncontrolled_Format_String__char_file_printf_45_qlhB2GData = data ; qlhB2GSink ( ) ; } void CWE134_Uncontrolled_Format_String__char_file_printf_45_qlh ( ) { qlhG2B ( ) ; qlhB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_printf_51b_nwoSink ( char * data ) {  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_file_printf_51b_jwiG2BSink ( char * data ) {  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_file_printf_51b_jwiB2GSink ( char * data ) {  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_printf_52c_vjzSink ( char * data ) {  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_file_printf_52c_qymG2BSink ( char * data ) {  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_file_printf_52c_qymB2GSink ( char * data ) {  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_printf_53d_yqwSink ( char * data ) {  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_file_printf_53d_jkuG2BSink ( char * data ) {  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_file_printf_53d_jkuB2GSink ( char * data ) {  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_printf_54e_bxfSink ( char * data ) {  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_file_printf_54e_ytdG2BSink ( char * data ) {  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_file_printf_54e_ytdB2GSink ( char * data ) {  printf ( " %s\n " , data ) ; } CWE134 goodpositive
char * CWE134_Uncontrolled_Format_String__char_file_printf_61b_sskSource ( char * data ) ; void CWE134_Uncontrolled_Format_String__char_file_printf_61_ssk ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_file_printf_61b_sskSource ( data ) ;  WARNINGLINE printf ( data ) ; } CWE134 badpositive
char * CWE134_Uncontrolled_Format_String__char_file_printf_61b_xtkG2BSource ( char * data ) ; static void xtkG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_file_printf_61b_xtkG2BSource ( data ) ;  WARNINGLINE printf ( data ) ; }  char * CWE134_Uncontrolled_Format_String__char_file_printf_61b_xtkB2GSource ( char * data ) ; static void xtkB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_file_printf_61b_xtkB2GSource ( data ) ;  printf ( " %s\n " , data ) ; } void CWE134_Uncontrolled_Format_String__char_file_printf_61_xtk ( ) { xtkG2B ( ) ; xtkB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_printf_63b_mbeSink ( char * * dataPtr ) { char * data = * dataPtr ;  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_file_printf_63b_xnzG2BSink ( char * * dataPtr ) { char * data = * dataPtr ;  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_file_printf_63b_xnzB2GSink ( char * * dataPtr ) { char * data = * dataPtr ;  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_printf_64b_pybSink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ;  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_file_printf_64b_utuG2BSink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ;  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_file_printf_64b_utuB2GSink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ;  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_printf_65b_ympSink ( char * data ) {  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_file_printf_65b_tizG2BSink ( char * data ) {  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_file_printf_65b_tizB2GSink ( char * data ) {  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_printf_66b_skzSink ( char * dataArray [ ] ) {  char * data = dataArray [ N ] ;  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_file_printf_66b_qwuG2BSink ( char * dataArray [ ] ) { char * data = dataArray [ N ] ;  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_file_printf_66b_qwuB2GSink ( char * dataArray [ ] ) { char * data = dataArray [ N ] ;  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_printf_67b_lwtSink ( CWE134_Uncontrolled_Format_String__char_file_printf_67_structType myStruct ) { char * data = myStruct.structFirst ;  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_file_printf_67b_udsG2BSink ( CWE134_Uncontrolled_Format_String__char_file_printf_67_structType myStruct ) { char * data = myStruct.structFirst ;  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_file_printf_67b_udsB2GSink ( CWE134_Uncontrolled_Format_String__char_file_printf_67_structType myStruct ) { char * data = myStruct.structFirst ;  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_printf_68b_pqnSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_file_printf_68_pqnData ;  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_file_printf_68b_jyiG2BSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_file_printf_68_jyiG2BData ;  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_file_printf_68b_jyiB2GSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_file_printf_68_jyiB2GData ;  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_snprintf_01_uff ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
static void ritG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  static void ritB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } void CWE134_Uncontrolled_Format_String__char_file_snprintf_01_rit ( ) { ritG2B ( ) ; ritB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_snprintf_02_vyn ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void kkzB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void kkzB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void kkzG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void kkzG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  strcpy ( data , " STRING " ) ; } if ( N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_file_snprintf_02_kkz ( ) { kkzB2G1 ( ) ; kkzB2G2 ( ) ; kkzG2B1 ( ) ; kkzG2B2 ( ) ; } CWE134 goodpositive
static void qnkB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void qnkB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void qnkG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void qnkG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  strcpy ( data , " STRING " ) ; } if ( N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_file_snprintf_02_qnk ( ) { qnkB2G1 ( ) ; qnkB2G2 ( ) ; qnkG2B1 ( ) ; qnkG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_snprintf_03_kcj ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( N = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void tutB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( N ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void tutB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( N = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void tutG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void tutG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) {  strcpy ( data , " STRING " ) ; } if ( N = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_file_snprintf_03_tut ( ) { tutB2G1 ( ) ; tutB2G2 ( ) ; tutG2B1 ( ) ; tutG2B2 ( ) ; } CWE134 goodpositive
static void lzwB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( N ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void lzwB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( N = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void lzwG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void lzwG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) {  strcpy ( data , " STRING " ) ; } if ( N = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_file_snprintf_03_lzw ( ) { lzwB2G1 ( ) ; lzwB2G2 ( ) ; lzwG2B1 ( ) ; lzwG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_snprintf_04_xmf ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( STATIC_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void fziB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void fziB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( STATIC_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void fziG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void fziG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_file_snprintf_04_fzi ( ) { fziB2G1 ( ) ; fziB2G2 ( ) ; fziG2B1 ( ) ; fziG2B2 ( ) ; } CWE134 goodpositive
static void ghfB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void ghfB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( STATIC_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void ghfG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void ghfG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_file_snprintf_04_ghf ( ) { ghfB2G1 ( ) ; ghfB2G2 ( ) ; ghfG2B1 ( ) ; ghfG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_snprintf_05_aua ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticTrue ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void xolB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticFalse ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void xolB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticTrue ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void xolG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void xolG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_file_snprintf_05_xol ( ) { xolB2G1 ( ) ; xolB2G2 ( ) ; xolG2B1 ( ) ; xolG2B2 ( ) ; } CWE134 goodpositive
static void vkgB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticFalse ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void vkgB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticTrue ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void vkgG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void vkgG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_file_snprintf_05_vkg ( ) { vkgB2G1 ( ) ; vkgB2G2 ( ) ; vkgG2B1 ( ) ; vkgG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_snprintf_06_wqj ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( STATIC_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void duvB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void duvB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( STATIC_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void duvG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void duvG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_file_snprintf_06_duv ( ) { duvB2G1 ( ) ; duvB2G2 ( ) ; duvG2B1 ( ) ; duvG2B2 ( ) ; } CWE134 goodpositive
static void orcB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void orcB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( STATIC_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void orcG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void orcG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_file_snprintf_06_orc ( ) { orcB2G1 ( ) ; orcB2G2 ( ) ; orcG2B1 ( ) ; orcG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_snprintf_07_vkw ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticFive = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void quxB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void quxB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticFive = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void quxG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void quxG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_file_snprintf_07_qux ( ) { quxB2G1 ( ) ; quxB2G2 ( ) ; quxG2B1 ( ) ; quxG2B2 ( ) ; } CWE134 goodpositive
static void ljfB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void ljfB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticFive = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void ljfG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void ljfG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_file_snprintf_07_ljf ( ) { ljfB2G1 ( ) ; ljfB2G2 ( ) ; ljfG2B1 ( ) ; ljfG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_snprintf_08_txp ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void typB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void typB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void typG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void typG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_file_snprintf_08_typ ( ) { typB2G1 ( ) ; typB2G2 ( ) ; typG2B1 ( ) ; typG2B2 ( ) ; } CWE134 goodpositive
static void geeB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void geeB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( staticReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void geeG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void geeG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_file_snprintf_08_gee ( ) { geeB2G1 ( ) ; geeB2G2 ( ) ; geeG2B1 ( ) ; geeG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_snprintf_09_qwc ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( GLOBAL_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void tkiB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void tkiB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( GLOBAL_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void tkiG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void tkiG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_file_snprintf_09_tki ( ) { tkiB2G1 ( ) ; tkiB2G2 ( ) ; tkiG2B1 ( ) ; tkiG2B2 ( ) ; } CWE134 goodpositive
static void wzbB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void wzbB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( GLOBAL_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void wzbG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void wzbG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_file_snprintf_09_wzb ( ) { wzbB2G1 ( ) ; wzbB2G2 ( ) ; wzbG2B1 ( ) ; wzbG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_snprintf_10_xvm ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalTrue ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void awvB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalFalse ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void awvB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalTrue ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void awvG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void awvG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_file_snprintf_10_awv ( ) { awvB2G1 ( ) ; awvB2G2 ( ) ; awvG2B1 ( ) ; awvG2B2 ( ) ; } CWE134 goodpositive
static void bgrB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalFalse ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void bgrB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalTrue ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void bgrG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void bgrG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_file_snprintf_10_bgr ( ) { bgrB2G1 ( ) ; bgrB2G2 ( ) ; bgrG2B1 ( ) ; bgrG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_snprintf_11_bqj ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void zleB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void zleB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void zleG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void zleG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_file_snprintf_11_zle ( ) { zleB2G1 ( ) ; zleB2G2 ( ) ; zleG2B1 ( ) ; zleG2B2 ( ) ; } CWE134 goodpositive
static void ofaB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void ofaB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void ofaG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void ofaG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_file_snprintf_11_ofa ( ) { ofaB2G1 ( ) ; ofaB2G2 ( ) ; ofaG2B1 ( ) ; ofaG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_snprintf_12_yeo ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void nsfB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } else { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalReturnsTrueOrFalse ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void nsfG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) {  strcpy ( data , " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_file_snprintf_12_nsf ( ) { nsfB2G ( ) ; nsfG2B ( ) ; } CWE134 goodpositive
static void ueoB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } else { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalReturnsTrueOrFalse ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void ueoG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) {  strcpy ( data , " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } else { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_file_snprintf_12_ueo ( ) { ueoB2G ( ) ; ueoG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_snprintf_13_keg ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( GLOBAL_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void djqB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void djqB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( GLOBAL_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void djqG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void djqG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_file_snprintf_13_djq ( ) { djqB2G1 ( ) ; djqB2G2 ( ) ; djqG2B1 ( ) ; djqG2B2 ( ) ; } CWE134 goodpositive
static void wviB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void wviB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( GLOBAL_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void wviG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void wviG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_file_snprintf_13_wvi ( ) { wviB2G1 ( ) ; wviB2G2 ( ) ; wviG2B1 ( ) ; wviG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_snprintf_14_xpm ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalFive = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void urdB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void urdB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalFive = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void urdG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void urdG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_file_snprintf_14_urd ( ) { urdB2G1 ( ) ; urdB2G2 ( ) ; urdG2B1 ( ) ; urdG2B2 ( ) ; } CWE134 goodpositive
static void ydkB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void ydkB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } if ( globalFive = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void ydkG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void ydkG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_file_snprintf_14_ydk ( ) { ydkB2G1 ( ) ; ydkB2G2 ( ) ; ydkG2B1 ( ) ; ydkG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_snprintf_15_pkf ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7: { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } break ; default:  printLine ( " STRING " ) ; break ; } } CWE134 badpositive
static void oeqB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printLine ( " STRING " ) ; break ; default: { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } break ; } }  static void oeqB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7: { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } break ; default:  printLine ( " STRING " ) ; break ; } }  static void oeqG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  printLine ( " STRING " ) ; break ; default:  strcpy ( data , " STRING " ) ; break ; } switch ( N ) { case 7: { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } break ; default:  printLine ( " STRING " ) ; break ; } }  static void oeqG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  strcpy ( data , " STRING " ) ; break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7: { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } break ; default:  printLine ( " STRING " ) ; break ; } } void CWE134_Uncontrolled_Format_String__char_file_snprintf_15_oeq ( ) { oeqB2G1 ( ) ; oeqB2G2 ( ) ; oeqG2B1 ( ) ; oeqG2B2 ( ) ; } CWE134 goodpositive
static void urfB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printLine ( " STRING " ) ; break ; default: { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } break ; } }  static void urfB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7: { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } break ; default:  printLine ( " STRING " ) ; break ; } }  static void urfG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  printLine ( " STRING " ) ; break ; default:  strcpy ( data , " STRING " ) ; break ; } switch ( N ) { case 7: { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } break ; default:  printLine ( " STRING " ) ; break ; } }  static void urfG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  strcpy ( data , " STRING " ) ; break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7: { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } break ; default:  printLine ( " STRING " ) ; break ; } } void CWE134_Uncontrolled_Format_String__char_file_snprintf_15_urf ( ) { urfB2G1 ( ) ; urfB2G2 ( ) ; urfG2B1 ( ) ; urfG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_snprintf_16_cat ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } break ; } while ( N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } break ; } } CWE134 badpositive
static void yzaB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } break ; } while ( N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } break ; } }  static void yzaG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) {  strcpy ( data , " STRING " ) ; break ; } while ( N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } break ; } } void CWE134_Uncontrolled_Format_String__char_file_snprintf_16_yza ( ) { yzaB2G ( ) ; yzaG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_snprintf_17_usu ( ) { int i , j ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( i = N ; i < N ; i + + ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } for ( j = N ; j < N ; j + + ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void kreB2G ( ) { int i , k ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( i = N ; i < N ; i + + ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } } for ( k = N ; k < N ; k + + ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void kreG2B ( ) { int h , j ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( h = N ; h < N ; h + + ) {  strcpy ( data , " STRING " ) ; } for ( j = N ; j < N ; j + + ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_file_snprintf_17_kre ( ) { kreB2G ( ) ; kreG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_snprintf_18_ado ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source: {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } goto sink ; sink: { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
static void mchB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source: {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } goto sink ; sink: { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } }  static void mchG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source:  strcpy ( data , " STRING " ) ; goto sink ; sink: { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } void CWE134_Uncontrolled_Format_String__char_file_snprintf_18_mch ( ) { mchB2G ( ) ; mchG2B ( ) ; } CWE134 goodpositive
static int yryStatic = N ; static void yrySink ( char * data ) { if ( yryStatic ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_file_snprintf_21_yry ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } yryStatic = N ;  yrySink ( data ) ; } CWE134 badpositive
static int cirB2G1Static = N ; static int cirB2G2Static = N ; static int cirG2BStatic = N ;  static void cirB2G1Sink ( char * data ) { if ( cirB2G1Static ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } } static void cirB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } cirB2G1Static = N ;  cirB2G1Sink ( data ) ; }  static void cirB2G2Sink ( char * data ) { if ( cirB2G2Static ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } } static void cirB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } cirB2G2Static = N ;  cirB2G2Sink ( data ) ; }  static void cirG2BSink ( char * data ) { if ( cirG2BStatic ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } static void cirG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; cirG2BStatic = N ;  cirG2BSink ( data ) ; } void CWE134_Uncontrolled_Format_String__char_file_snprintf_21_cir ( ) { cirB2G1 ( ) ; cirB2G2 ( ) ; cirG2B ( ) ; } CWE134 goodpositive
extern int CWE134_Uncontrolled_Format_String__char_file_snprintf_22_delGlobal ; void CWE134_Uncontrolled_Format_String__char_file_snprintf_22_delSink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_file_snprintf_22_delGlobal ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
extern int CWE134_Uncontrolled_Format_String__char_file_snprintf_22_vybB2G1Global ; extern int CWE134_Uncontrolled_Format_String__char_file_snprintf_22_vybB2G2Global ; extern int CWE134_Uncontrolled_Format_String__char_file_snprintf_22_vybG2BGlobal ;  void CWE134_Uncontrolled_Format_String__char_file_snprintf_22_vybB2G1Sink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_file_snprintf_22_vybB2G1Global ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  void CWE134_Uncontrolled_Format_String__char_file_snprintf_22_vybB2G2Sink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_file_snprintf_22_vybB2G2Global ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  void CWE134_Uncontrolled_Format_String__char_file_snprintf_22_vybG2BSink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_file_snprintf_22_vybG2BGlobal ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_snprintf_31_hpn ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } { char * dataCopy = data ; char * data = dataCopy ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void sygG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; { char * dataCopy = data ; char * data = dataCopy ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void sygB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } { char * dataCopy = data ; char * data = dataCopy ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_file_snprintf_31_syg ( ) { sygG2B ( ) ; sygB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_snprintf_32_lvk ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void dgzG2B ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ;  strcpy ( data , " STRING " ) ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void dgzB2G ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_file_snprintf_32_dgz ( ) { dgzG2B ( ) ; dgzB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_snprintf_34_tsy ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_file_snprintf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void sbaG2B ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_file_snprintf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void sbaB2G ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_file_snprintf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_file_snprintf_34_sba ( ) { sbaG2B ( ) ; sbaB2G ( ) ; } CWE134 goodpositive
static void kosSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } void CWE134_Uncontrolled_Format_String__char_file_snprintf_41_kos ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } kosSink ( data ) ; } CWE134 badpositive
static void eidG2BSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } static void eidG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; eidG2BSink ( data ) ; }  static void eidB2GSink ( char * data ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } static void eidB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } eidB2GSink ( data ) ; } void CWE134_Uncontrolled_Format_String__char_file_snprintf_41_eid ( ) { eidB2G ( ) ; eidG2B ( ) ; } CWE134 goodpositive
static char * thhSource ( char * data ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } return data ; } void CWE134_Uncontrolled_Format_String__char_file_snprintf_42_thh ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = thhSource ( data ) ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
static char * raaG2BSource ( char * data ) {  strcpy ( data , " STRING " ) ; return data ; } static void raaG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = raaG2BSource ( data ) ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  static char * raaB2GSource ( char * data ) { {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } return data ; } static void raaB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = raaB2GSource ( data ) ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } void CWE134_Uncontrolled_Format_String__char_file_snprintf_42_raa ( ) { raaB2G ( ) ; raaG2B ( ) ; } CWE134 goodpositive
static void hltSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } void CWE134_Uncontrolled_Format_String__char_file_snprintf_44_hlt ( ) { char * data ;  void ( * funcPtr ) ( char * ) = hltSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } }  funcPtr ( data ) ; } CWE134 badpositive
static void wcgG2BSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } static void wcgG2B ( ) { char * data ; void ( * funcPtr ) ( char * ) = wcgG2BSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; funcPtr ( data ) ; }  static void wcgB2GSink ( char * data ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } static void wcgB2G ( ) { char * data ; void ( * funcPtr ) ( char * ) = wcgB2GSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } funcPtr ( data ) ; } void CWE134_Uncontrolled_Format_String__char_file_snprintf_44_wcg ( ) { wcgG2B ( ) ; wcgB2G ( ) ; } CWE134 goodpositive
static void esiSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_file_snprintf_45_esiData ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } void CWE134_Uncontrolled_Format_String__char_file_snprintf_45_esi ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } CWE134_Uncontrolled_Format_String__char_file_snprintf_45_esiData = data ; esiSink ( ) ; } CWE134 badpositive
static void nelG2BSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_file_snprintf_45_nelG2BData ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } static void nelG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; CWE134_Uncontrolled_Format_String__char_file_snprintf_45_nelG2BData = data ; nelG2BSink ( ) ; }  static void nelB2GSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_file_snprintf_45_nelB2GData ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } static void nelB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; {  size_t dataLen = strlen ( data ) ; FILE * pFile ;  if ( N - dataLen > N ) { pFile = fopen ( FILENAME , " STRING " ) ; if ( pFile ! = NULL ) {  if ( fgets ( data + dataLen , ( int ) ( N - dataLen ) , pFile ) = = NULL ) { printLine ( " STRING " ) ;  data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } CWE134_Uncontrolled_Format_String__char_file_snprintf_45_nelB2GData = data ; nelB2GSink ( ) ; } void CWE134_Uncontrolled_Format_String__char_file_snprintf_45_nel ( ) { nelG2B ( ) ; nelB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_snprintf_51b_zbaSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_file_snprintf_51b_zhpG2BSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_file_snprintf_51b_zhpB2GSink ( char * data ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_snprintf_52c_lalSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_file_snprintf_52c_ddqG2BSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_file_snprintf_52c_ddqB2GSink ( char * data ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_snprintf_53d_acnSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_file_snprintf_53d_hgjG2BSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_file_snprintf_53d_hgjB2GSink ( char * data ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_snprintf_54e_eekSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_file_snprintf_54e_lklG2BSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_file_snprintf_54e_lklB2GSink ( char * data ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
char * CWE134_Uncontrolled_Format_String__char_file_snprintf_61b_zvmSource ( char * data ) ; void CWE134_Uncontrolled_Format_String__char_file_snprintf_61_zvm ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_file_snprintf_61b_zvmSource ( data ) ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
char * CWE134_Uncontrolled_Format_String__char_file_snprintf_61b_nbvG2BSource ( char * data ) ; static void nbvG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_file_snprintf_61b_nbvG2BSource ( data ) ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  char * CWE134_Uncontrolled_Format_String__char_file_snprintf_61b_nbvB2GSource ( char * data ) ; static void nbvB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_file_snprintf_61b_nbvB2GSource ( data ) ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } void CWE134_Uncontrolled_Format_String__char_file_snprintf_61_nbv ( ) { nbvG2B ( ) ; nbvB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_snprintf_63b_lwcSink ( char * * dataPtr ) { char * data = * dataPtr ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_file_snprintf_63b_ajuG2BSink ( char * * dataPtr ) { char * data = * dataPtr ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_file_snprintf_63b_ajuB2GSink ( char * * dataPtr ) { char * data = * dataPtr ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_snprintf_64b_tojSink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_file_snprintf_64b_bgxG2BSink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_file_snprintf_64b_bgxB2GSink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_snprintf_65b_zijSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_file_snprintf_65b_xbqG2BSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_file_snprintf_65b_xbqB2GSink ( char * data ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_snprintf_66b_fsbSink ( char * dataArray [ ] ) {  char * data = dataArray [ N ] ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_file_snprintf_66b_loiG2BSink ( char * dataArray [ ] ) { char * data = dataArray [ N ] ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_file_snprintf_66b_loiB2GSink ( char * dataArray [ ] ) { char * data = dataArray [ N ] ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_snprintf_67b_cmxSink ( CWE134_Uncontrolled_Format_String__char_file_snprintf_67_structType myStruct ) { char * data = myStruct.structFirst ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_file_snprintf_67b_mxlG2BSink ( CWE134_Uncontrolled_Format_String__char_file_snprintf_67_structType myStruct ) { char * data = myStruct.structFirst ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_file_snprintf_67b_mxlB2GSink ( CWE134_Uncontrolled_Format_String__char_file_snprintf_67_structType myStruct ) { char * data = myStruct.structFirst ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_file_snprintf_68b_nfsSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_file_snprintf_68_nfsData ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_file_snprintf_68b_hrqG2BSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_file_snprintf_68_hrqG2BData ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_file_snprintf_68b_hrqB2GSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_file_snprintf_68_hrqB2GData ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_01_vza ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } }  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
static void xawG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ;  WARNINGLINE fprintf ( stdout , data ) ; }  static void xawB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } }  fprintf ( stdout , " %s\n " , data ) ; } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_01_xaw ( ) { xawG2B ( ) ; xawB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_02_fwk ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void ofkB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void ofkB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void ofkG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void ofkG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  strcpy ( data , " STRING " ) ; } if ( N ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_02_ofk ( ) { ofkB2G1 ( ) ; ofkB2G2 ( ) ; ofkG2B1 ( ) ; ofkG2B2 ( ) ; } CWE134 goodpositive
static void htdB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void htdB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void htdG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N ) {  fprintf ( stdout , data ) ; } }  static void htdG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  strcpy ( data , " STRING " ) ; } if ( N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_02_htd ( ) { htdB2G1 ( ) ; htdB2G2 ( ) ; htdG2B1 ( ) ; htdG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_03_poj ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void ewbB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void ewbB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void ewbG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void ewbG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) {  strcpy ( data , " STRING " ) ; } if ( N = = N ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_03_ewb ( ) { ewbB2G1 ( ) ; ewbB2G2 ( ) ; ewbG2B1 ( ) ; ewbG2B2 ( ) ; } CWE134 goodpositive
static void lajB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void lajB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void lajG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N = = N ) {  fprintf ( stdout , data ) ; } }  static void lajG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) {  strcpy ( data , " STRING " ) ; } if ( N = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_03_laj ( ) { lajB2G1 ( ) ; lajB2G2 ( ) ; lajG2B1 ( ) ; lajG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_04_hrs ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_TRUE ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void ntdB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void ntdB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_TRUE ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void ntdG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void ntdG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_04_ntd ( ) { ntdB2G1 ( ) ; ntdB2G2 ( ) ; ntdG2B1 ( ) ; ntdG2B2 ( ) ; } CWE134 goodpositive
static void riiB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void riiB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_TRUE ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void riiG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) {  fprintf ( stdout , data ) ; } }  static void riiG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_04_rii ( ) { riiB2G1 ( ) ; riiB2G2 ( ) ; riiG2B1 ( ) ; riiG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_05_dvf ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticTrue ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void bkhB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void bkhB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticTrue ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void bkhG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void bkhG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_05_bkh ( ) { bkhB2G1 ( ) ; bkhB2G2 ( ) ; bkhG2B1 ( ) ; bkhG2B2 ( ) ; } CWE134 goodpositive
static void cddB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void cddB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticTrue ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void cddG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) {  fprintf ( stdout , data ) ; } }  static void cddG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_05_cdd ( ) { cddB2G1 ( ) ; cddB2G2 ( ) ; cddG2B1 ( ) ; cddG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_06_feu ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_FIVE = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void iifB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void iifB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_FIVE = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void iifG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void iifG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_06_iif ( ) { iifB2G1 ( ) ; iifB2G2 ( ) ; iifG2B1 ( ) ; iifG2B2 ( ) ; } CWE134 goodpositive
static void bsaB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void bsaB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_FIVE = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void bsaG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) {  fprintf ( stdout , data ) ; } }  static void bsaG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_06_bsa ( ) { bsaB2G1 ( ) ; bsaB2G2 ( ) ; bsaG2B1 ( ) ; bsaG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_07_ays ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticFive = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void btoB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void btoB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticFive = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void btoG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void btoG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_07_bto ( ) { btoB2G1 ( ) ; btoB2G2 ( ) ; btoG2B1 ( ) ; btoG2B2 ( ) ; } CWE134 goodpositive
static void kwgB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void kwgB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticFive = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void kwgG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) {  fprintf ( stdout , data ) ; } }  static void kwgG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_07_kwg ( ) { kwgB2G1 ( ) ; kwgB2G2 ( ) ; kwgG2B1 ( ) ; kwgG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_08_cim ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticReturnsTrue ( ) ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void ynsB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void ynsB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticReturnsTrue ( ) ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void ynsG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void ynsG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_08_yns ( ) { ynsB2G1 ( ) ; ynsB2G2 ( ) ; ynsG2B1 ( ) ; ynsG2B2 ( ) ; } CWE134 goodpositive
static void jknB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void jknB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticReturnsTrue ( ) ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void jknG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) {  fprintf ( stdout , data ) ; } }  static void jknG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_08_jkn ( ) { jknB2G1 ( ) ; jknB2G2 ( ) ; jknG2B1 ( ) ; jknG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_09_sjf ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_TRUE ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void dfmB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void dfmB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_TRUE ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void dfmG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void dfmG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_09_dfm ( ) { dfmB2G1 ( ) ; dfmB2G2 ( ) ; dfmG2B1 ( ) ; dfmG2B2 ( ) ; } CWE134 goodpositive
static void iqtB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void iqtB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_TRUE ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void iqtG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) {  fprintf ( stdout , data ) ; } }  static void iqtG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_09_iqt ( ) { iqtB2G1 ( ) ; iqtB2G2 ( ) ; iqtG2B1 ( ) ; iqtG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_10_hnt ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalTrue ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void xikB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void xikB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalTrue ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void xikG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void xikG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_10_xik ( ) { xikB2G1 ( ) ; xikB2G2 ( ) ; xikG2B1 ( ) ; xikG2B2 ( ) ; } CWE134 goodpositive
static void bblB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void bblB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalTrue ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void bblG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) {  fprintf ( stdout , data ) ; } }  static void bblG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_10_bbl ( ) { bblB2G1 ( ) ; bblB2G2 ( ) ; bblG2B1 ( ) ; bblG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_11_rpa ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalReturnsTrue ( ) ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void hytB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void hytB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalReturnsTrue ( ) ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void hytG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void hytG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_11_hyt ( ) { hytB2G1 ( ) ; hytB2G2 ( ) ; hytG2B1 ( ) ; hytG2B2 ( ) ; } CWE134 goodpositive
static void nvlB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void nvlB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalReturnsTrue ( ) ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void nvlG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) {  fprintf ( stdout , data ) ; } }  static void nvlG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_11_nvl ( ) { nvlB2G1 ( ) ; nvlB2G2 ( ) ; nvlG2B1 ( ) ; nvlG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_12_foq ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) {  WARNINGLINE fprintf ( stdout , data ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } } CWE134 badpositive
static void wxrB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } else { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalReturnsTrueOrFalse ( ) ) {  fprintf ( stdout , " %s\n " , data ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void wxrG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) {  strcpy ( data , " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) {  WARNINGLINE fprintf ( stdout , data ) ; } else {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_12_wxr ( ) { wxrB2G ( ) ; wxrG2B ( ) ; } CWE134 goodpositive
static void vmbB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } else { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalReturnsTrueOrFalse ( ) ) {  fprintf ( stdout , " %s\n " , data ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void vmbG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) {  strcpy ( data , " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) {  fprintf ( stdout , data ) ; } else {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_12_vmb ( ) { vmbB2G ( ) ; vmbG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_13_bfq ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_FIVE = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void drdB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void drdB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_FIVE = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void drdG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void drdG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_13_drd ( ) { drdB2G1 ( ) ; drdB2G2 ( ) ; drdG2B1 ( ) ; drdG2B2 ( ) ; } CWE134 goodpositive
static void qebB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void qebB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_FIVE = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void qebG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) {  fprintf ( stdout , data ) ; } }  static void qebG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_13_qeb ( ) { qebB2G1 ( ) ; qebB2G2 ( ) ; qebG2B1 ( ) ; qebG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_14_lwb ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalFive = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void dsiB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void dsiB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalFive = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void dsiG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } }  static void dsiG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) {  fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_14_dsi ( ) { dsiB2G1 ( ) ; dsiB2G2 ( ) ; dsiG2B1 ( ) ; dsiG2B2 ( ) ; } CWE134 goodpositive
static void vjjB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  static void vjjB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalFive = = N ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void vjjG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) {  fprintf ( stdout , data ) ; } }  static void vjjG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_14_vjj ( ) { vjjB2G1 ( ) ; vjjB2G2 ( ) ; vjjG2B1 ( ) ; vjjG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_15_rwm ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  WARNINGLINE fprintf ( stdout , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } } CWE134 badpositive
static void ynmB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printLine ( " STRING " ) ; break ; default:  fprintf ( stdout , " %s\n " , data ) ; break ; } }  static void ynmB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  fprintf ( stdout , " %s\n " , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } }  static void ynmG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  printLine ( " STRING " ) ; break ; default:  strcpy ( data , " STRING " ) ; break ; } switch ( N ) { case 7:  WARNINGLINE fprintf ( stdout , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } }  static void ynmG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  strcpy ( data , " STRING " ) ; break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  fprintf ( stdout , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_15_ynm ( ) { ynmB2G1 ( ) ; ynmB2G2 ( ) ; ynmG2B1 ( ) ; ynmG2B2 ( ) ; } CWE134 goodpositive
static void bykB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printLine ( " STRING " ) ; break ; default:  fprintf ( stdout , " %s\n " , data ) ; break ; } }  static void bykB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  fprintf ( stdout , " %s\n " , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } }  static void bykG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  printLine ( " STRING " ) ; break ; default:  strcpy ( data , " STRING " ) ; break ; } switch ( N ) { case 7:  fprintf ( stdout , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } }  static void bykG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  strcpy ( data , " STRING " ) ; break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  WARNINGLINE fprintf ( stdout , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_15_byk ( ) { bykB2G1 ( ) ; bykB2G2 ( ) ; bykG2B1 ( ) ; bykG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_16_bsr ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; } while ( N ) {  WARNINGLINE fprintf ( stdout , data ) ; break ; } } CWE134 badpositive
static void vleB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; } while ( N ) {  fprintf ( stdout , " %s\n " , data ) ; break ; } }  static void vleG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) {  strcpy ( data , " STRING " ) ; break ; } while ( N ) {  WARNINGLINE fprintf ( stdout , data ) ; break ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_16_vle ( ) { vleB2G ( ) ; vleG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_17_rrq ( ) { int i , j ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( i = N ; i < N ; i + + ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } for ( j = N ; j < N ; j + + ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void smzB2G ( ) { int i , k ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( i = N ; i < N ; i + + ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } for ( k = N ; k < N ; k + + ) {  fprintf ( stdout , " %s\n " , data ) ; } }  static void smzG2B ( ) { int h , j ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( h = N ; h < N ; h + + ) {  strcpy ( data , " STRING " ) ; } for ( j = N ; j < N ; j + + ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_17_smz ( ) { smzB2G ( ) ; smzG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_18_mpp ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source: { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } goto sink ; sink:  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
static void htmB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source: { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } goto sink ; sink:  fprintf ( stdout , " %s\n " , data ) ; }  static void htmG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source:  strcpy ( data , " STRING " ) ; goto sink ; sink:  WARNINGLINE fprintf ( stdout , data ) ; } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_18_htm ( ) { htmB2G ( ) ; htmG2B ( ) ; } CWE134 goodpositive
static int kokStatic = N ; static void kokSink ( char * data ) { if ( kokStatic ) {  WARNINGLINE fprintf ( stdout , data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_21_kok ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } kokStatic = N ;  kokSink ( data ) ; } CWE134 badpositive
static int umlB2G1Static = N ; static int umlB2G2Static = N ; static int umlG2BStatic = N ;  static void umlB2G1Sink ( char * data ) { if ( umlB2G1Static ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } } static void umlB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } umlB2G1Static = N ;  umlB2G1Sink ( data ) ; }  static void umlB2G2Sink ( char * data ) { if ( umlB2G2Static ) {  fprintf ( stdout , " %s\n " , data ) ; } } static void umlB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } umlB2G2Static = N ;  umlB2G2Sink ( data ) ; }  static void umlG2BSink ( char * data ) { if ( umlG2BStatic ) {  WARNINGLINE fprintf ( stdout , data ) ; } } static void umlG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; umlG2BStatic = N ;  umlG2BSink ( data ) ; } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_21_uml ( ) { umlB2G1 ( ) ; umlB2G2 ( ) ; umlG2B ( ) ; } CWE134 goodpositive
extern int CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_22_sgvGlobal ; void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_22_sgvSink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_22_sgvGlobal ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
extern int CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_22_ylzB2G1Global ; extern int CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_22_ylzB2G2Global ; extern int CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_22_ylzG2BGlobal ;  void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_22_ylzB2G1Sink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_22_ylzB2G1Global ) {  printLine ( " STRING " ) ; } else {  fprintf ( stdout , " %s\n " , data ) ; } }  void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_22_ylzB2G2Sink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_22_ylzB2G2Global ) {  fprintf ( stdout , " %s\n " , data ) ; } }  void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_22_ylzG2BSink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_22_ylzG2BGlobal ) {  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_31_qjj ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } { char * dataCopy = data ; char * data = dataCopy ;  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void vwcG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; { char * dataCopy = data ; char * data = dataCopy ;  WARNINGLINE fprintf ( stdout , data ) ; } }  static void vwcB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } { char * dataCopy = data ; char * data = dataCopy ;  fprintf ( stdout , " %s\n " , data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_31_vwc ( ) { vwcG2B ( ) ; vwcB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_32_sgb ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } * dataPtr1 = data ; } { char * data = * dataPtr2 ;  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void njlG2B ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ;  strcpy ( data , " STRING " ) ; * dataPtr1 = data ; } { char * data = * dataPtr2 ;  WARNINGLINE fprintf ( stdout , data ) ; } }  static void njlB2G ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } * dataPtr1 = data ; } { char * data = * dataPtr2 ;  fprintf ( stdout , " %s\n " , data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_32_njl ( ) { njlG2B ( ) ; njlB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_34_zcv ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ;  WARNINGLINE fprintf ( stdout , data ) ; } } CWE134 badpositive
static void ihpG2B ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ;  WARNINGLINE fprintf ( stdout , data ) ; } }  static void ihpB2G ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ;  fprintf ( stdout , " %s\n " , data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_34_ihp ( ) { ihpG2B ( ) ; ihpB2G ( ) ; } CWE134 goodpositive
static void xnzSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_41_xnz ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } xnzSink ( data ) ; } CWE134 badpositive
static void fadG2BSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } static void fadG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; fadG2BSink ( data ) ; }  static void fadB2GSink ( char * data ) {  fprintf ( stdout , " %s\n " , data ) ; } static void fadB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } fadB2GSink ( data ) ; } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_41_fad ( ) { fadB2G ( ) ; fadG2B ( ) ; } CWE134 goodpositive
static char * mvlSource ( char * data ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } return data ; } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_42_mvl ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = mvlSource ( data ) ;  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
static char * xidG2BSource ( char * data ) {  strcpy ( data , " STRING " ) ; return data ; } static void xidG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = xidG2BSource ( data ) ;  WARNINGLINE fprintf ( stdout , data ) ; }  static char * xidB2GSource ( char * data ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } return data ; } static void xidB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = xidB2GSource ( data ) ;  fprintf ( stdout , " %s\n " , data ) ; } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_42_xid ( ) { xidB2G ( ) ; xidG2B ( ) ; } CWE134 goodpositive
static void jahSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_44_jah ( ) { char * data ;  void ( * funcPtr ) ( char * ) = jahSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } }  funcPtr ( data ) ; } CWE134 badpositive
static void jkgG2BSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } static void jkgG2B ( ) { char * data ; void ( * funcPtr ) ( char * ) = jkgG2BSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; funcPtr ( data ) ; }  static void jkgB2GSink ( char * data ) {  fprintf ( stdout , " %s\n " , data ) ; } static void jkgB2G ( ) { char * data ; void ( * funcPtr ) ( char * ) = jkgB2GSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } funcPtr ( data ) ; } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_44_jkg ( ) { jkgG2B ( ) ; jkgB2G ( ) ; } CWE134 goodpositive
static void dkpSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_45_dkpData ;  WARNINGLINE fprintf ( stdout , data ) ; } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_45_dkp ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_45_dkpData = data ; dkpSink ( ) ; } CWE134 badpositive
static void jzlG2BSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_45_jzlG2BData ;  WARNINGLINE fprintf ( stdout , data ) ; } static void jzlG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_45_jzlG2BData = data ; jzlG2BSink ( ) ; }  static void jzlB2GSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_45_jzlB2GData ;  fprintf ( stdout , " %s\n " , data ) ; } static void jzlB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_45_jzlB2GData = data ; jzlB2GSink ( ) ; } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_45_jzl ( ) { jzlG2B ( ) ; jzlB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_51b_fkaSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_51b_xjyG2BSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_51b_xjyB2GSink ( char * data ) {  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_52c_fywSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_52c_zadG2BSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_52c_zadB2GSink ( char * data ) {  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_53d_omnSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_53d_croG2BSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_53d_croB2GSink ( char * data ) {  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_54e_lcjSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_54e_pjfG2BSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_54e_pjfB2GSink ( char * data ) {  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
char * CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_61b_rqfSource ( char * data ) ; void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_61_rqf ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_61b_rqfSource ( data ) ;  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
char * CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_61b_yffG2BSource ( char * data ) ; static void yffG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_61b_yffG2BSource ( data ) ;  WARNINGLINE fprintf ( stdout , data ) ; }  char * CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_61b_yffB2GSource ( char * data ) ; static void yffB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_61b_yffB2GSource ( data ) ;  fprintf ( stdout , " %s\n " , data ) ; } void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_61_yff ( ) { yffG2B ( ) ; yffB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_63b_nxwSink ( char * * dataPtr ) { char * data = * dataPtr ;  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_63b_sbzG2BSink ( char * * dataPtr ) { char * data = * dataPtr ;  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_63b_sbzB2GSink ( char * * dataPtr ) { char * data = * dataPtr ;  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_64b_fmjSink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ;  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_64b_wqcG2BSink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ;  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_64b_wqcB2GSink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ;  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_65b_auaSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_65b_udvG2BSink ( char * data ) {  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_65b_udvB2GSink ( char * data ) {  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_66b_sxtSink ( char * dataArray [ ] ) {  char * data = dataArray [ N ] ;  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_66b_hltG2BSink ( char * dataArray [ ] ) { char * data = dataArray [ N ] ;  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_66b_hltB2GSink ( char * dataArray [ ] ) { char * data = dataArray [ N ] ;  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_67b_olgSink ( CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_67_structType myStruct ) { char * data = myStruct.structFirst ;  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_67b_jfvG2BSink ( CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_67_structType myStruct ) { char * data = myStruct.structFirst ;  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_67b_jfvB2GSink ( CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_67_structType myStruct ) { char * data = myStruct.structFirst ;  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_68b_ziwSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_68_ziwData ;  WARNINGLINE fprintf ( stdout , data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_68b_wwcG2BSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_68_wwcG2BData ;  WARNINGLINE fprintf ( stdout , data ) ; }  void CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_68b_wwcB2GSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_listen_socket_fprintf_68_wwcB2GData ;  fprintf ( stdout , " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_01_gau ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } }  WARNINGLINE printf ( data ) ; } CWE134 badpositive
static void dbxG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ;  WARNINGLINE printf ( data ) ; }  static void dbxB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } }  printf ( " %s\n " , data ) ; } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_01_dbx ( ) { dbxG2B ( ) ; dbxB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_02_jll ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void qlgB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void qlgB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N ) {  printf ( " %s\n " , data ) ; } }  static void qlgG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N ) {  WARNINGLINE printf ( data ) ; } }  static void qlgG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  strcpy ( data , " STRING " ) ; } if ( N ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_02_qlg ( ) { qlgB2G1 ( ) ; qlgB2G2 ( ) ; qlgG2B1 ( ) ; qlgG2B2 ( ) ; } CWE134 goodpositive
static void ejvB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void ejvB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N ) {  printf ( " %s\n " , data ) ; } }  static void ejvG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N ) {  printf ( data ) ; } }  static void ejvG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  strcpy ( data , " STRING " ) ; } if ( N ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_02_ejv ( ) { ejvB2G1 ( ) ; ejvB2G2 ( ) ; ejvG2B1 ( ) ; ejvG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_03_uty ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N = = N ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void fxxB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void fxxB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N = = N ) {  printf ( " %s\n " , data ) ; } }  static void fxxG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N = = N ) {  WARNINGLINE printf ( data ) ; } }  static void fxxG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) {  strcpy ( data , " STRING " ) ; } if ( N = = N ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_03_fxx ( ) { fxxB2G1 ( ) ; fxxB2G2 ( ) ; fxxG2B1 ( ) ; fxxG2B2 ( ) ; } CWE134 goodpositive
static void nozB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void nozB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N = = N ) {  printf ( " %s\n " , data ) ; } }  static void nozG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N = = N ) {  printf ( data ) ; } }  static void nozG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) {  strcpy ( data , " STRING " ) ; } if ( N = = N ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_03_noz ( ) { nozB2G1 ( ) ; nozB2G2 ( ) ; nozG2B1 ( ) ; nozG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_04_xsw ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_TRUE ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void dreB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void dreB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_TRUE ) {  printf ( " %s\n " , data ) ; } }  static void dreG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) {  WARNINGLINE printf ( data ) ; } }  static void dreG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_04_dre ( ) { dreB2G1 ( ) ; dreB2G2 ( ) ; dreG2B1 ( ) ; dreG2B2 ( ) ; } CWE134 goodpositive
static void zdqB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void zdqB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_TRUE ) {  printf ( " %s\n " , data ) ; } }  static void zdqG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) {  printf ( data ) ; } }  static void zdqG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_04_zdq ( ) { zdqB2G1 ( ) ; zdqB2G2 ( ) ; zdqG2B1 ( ) ; zdqG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_05_qbv ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticTrue ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void zuiB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void zuiB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticTrue ) {  printf ( " %s\n " , data ) ; } }  static void zuiG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) {  WARNINGLINE printf ( data ) ; } }  static void zuiG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_05_zui ( ) { zuiB2G1 ( ) ; zuiB2G2 ( ) ; zuiG2B1 ( ) ; zuiG2B2 ( ) ; } CWE134 goodpositive
static void forB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void forB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticTrue ) {  printf ( " %s\n " , data ) ; } }  static void forG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) {  printf ( data ) ; } }  static void forG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_05_for ( ) { forB2G1 ( ) ; forB2G2 ( ) ; forG2B1 ( ) ; forG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_06_dra ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_FIVE = = N ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void bedB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void bedB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_FIVE = = N ) {  printf ( " %s\n " , data ) ; } }  static void bedG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) {  WARNINGLINE printf ( data ) ; } }  static void bedG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_06_bed ( ) { bedB2G1 ( ) ; bedB2G2 ( ) ; bedG2B1 ( ) ; bedG2B2 ( ) ; } CWE134 goodpositive
static void onjB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void onjB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_FIVE = = N ) {  printf ( " %s\n " , data ) ; } }  static void onjG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) {  printf ( data ) ; } }  static void onjG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_06_onj ( ) { onjB2G1 ( ) ; onjB2G2 ( ) ; onjG2B1 ( ) ; onjG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_07_vro ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticFive = = N ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void tjdB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void tjdB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticFive = = N ) {  printf ( " %s\n " , data ) ; } }  static void tjdG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) {  WARNINGLINE printf ( data ) ; } }  static void tjdG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_07_tjd ( ) { tjdB2G1 ( ) ; tjdB2G2 ( ) ; tjdG2B1 ( ) ; tjdG2B2 ( ) ; } CWE134 goodpositive
static void xtwB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void xtwB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticFive = = N ) {  printf ( " %s\n " , data ) ; } }  static void xtwG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) {  printf ( data ) ; } }  static void xtwG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_07_xtw ( ) { xtwB2G1 ( ) ; xtwB2G2 ( ) ; xtwG2B1 ( ) ; xtwG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_08_owp ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticReturnsTrue ( ) ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void zflB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void zflB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticReturnsTrue ( ) ) {  printf ( " %s\n " , data ) ; } }  static void zflG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) {  WARNINGLINE printf ( data ) ; } }  static void zflG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_08_zfl ( ) { zflB2G1 ( ) ; zflB2G2 ( ) ; zflG2B1 ( ) ; zflG2B2 ( ) ; } CWE134 goodpositive
static void dbjB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void dbjB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticReturnsTrue ( ) ) {  printf ( " %s\n " , data ) ; } }  static void dbjG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) {  printf ( data ) ; } }  static void dbjG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_08_dbj ( ) { dbjB2G1 ( ) ; dbjB2G2 ( ) ; dbjG2B1 ( ) ; dbjG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_09_jli ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_TRUE ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void beuB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void beuB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_TRUE ) {  printf ( " %s\n " , data ) ; } }  static void beuG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) {  WARNINGLINE printf ( data ) ; } }  static void beuG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_09_beu ( ) { beuB2G1 ( ) ; beuB2G2 ( ) ; beuG2B1 ( ) ; beuG2B2 ( ) ; } CWE134 goodpositive
static void hluB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void hluB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_TRUE ) {  printf ( " %s\n " , data ) ; } }  static void hluG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) {  printf ( data ) ; } }  static void hluG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_09_hlu ( ) { hluB2G1 ( ) ; hluB2G2 ( ) ; hluG2B1 ( ) ; hluG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_10_wrl ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalTrue ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void bssB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void bssB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalTrue ) {  printf ( " %s\n " , data ) ; } }  static void bssG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) {  WARNINGLINE printf ( data ) ; } }  static void bssG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_10_bss ( ) { bssB2G1 ( ) ; bssB2G2 ( ) ; bssG2B1 ( ) ; bssG2B2 ( ) ; } CWE134 goodpositive
static void bvuB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void bvuB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalTrue ) {  printf ( " %s\n " , data ) ; } }  static void bvuG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) {  printf ( data ) ; } }  static void bvuG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_10_bvu ( ) { bvuB2G1 ( ) ; bvuB2G2 ( ) ; bvuG2B1 ( ) ; bvuG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_11_knd ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalReturnsTrue ( ) ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void nybB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void nybB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalReturnsTrue ( ) ) {  printf ( " %s\n " , data ) ; } }  static void nybG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) {  WARNINGLINE printf ( data ) ; } }  static void nybG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_11_nyb ( ) { nybB2G1 ( ) ; nybB2G2 ( ) ; nybG2B1 ( ) ; nybG2B2 ( ) ; } CWE134 goodpositive
static void rsoB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void rsoB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalReturnsTrue ( ) ) {  printf ( " %s\n " , data ) ; } }  static void rsoG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) {  printf ( data ) ; } }  static void rsoG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_11_rso ( ) { rsoB2G1 ( ) ; rsoB2G2 ( ) ; rsoG2B1 ( ) ; rsoG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_12_btk ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) {  WARNINGLINE printf ( data ) ; } else {  printf ( " %s\n " , data ) ; } } CWE134 badpositive
static void wdpB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } else { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalReturnsTrueOrFalse ( ) ) {  printf ( " %s\n " , data ) ; } else {  printf ( " %s\n " , data ) ; } }  static void wdpG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) {  strcpy ( data , " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) {  WARNINGLINE printf ( data ) ; } else {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_12_wdp ( ) { wdpB2G ( ) ; wdpG2B ( ) ; } CWE134 goodpositive
static void famB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } else { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalReturnsTrueOrFalse ( ) ) {  printf ( " %s\n " , data ) ; } else {  printf ( " %s\n " , data ) ; } }  static void famG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) {  strcpy ( data , " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) {  printf ( data ) ; } else {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_12_fam ( ) { famB2G ( ) ; famG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_13_pmz ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_FIVE = = N ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void crxB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void crxB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_FIVE = = N ) {  printf ( " %s\n " , data ) ; } }  static void crxG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) {  WARNINGLINE printf ( data ) ; } }  static void crxG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_13_crx ( ) { crxB2G1 ( ) ; crxB2G2 ( ) ; crxG2B1 ( ) ; crxG2B2 ( ) ; } CWE134 goodpositive
static void jppB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void jppB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_FIVE = = N ) {  printf ( " %s\n " , data ) ; } }  static void jppG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) {  printf ( data ) ; } }  static void jppG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_13_jpp ( ) { jppB2G1 ( ) ; jppB2G2 ( ) ; jppG2B1 ( ) ; jppG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_14_tan ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalFive = = N ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void gbkB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void gbkB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalFive = = N ) {  printf ( " %s\n " , data ) ; } }  static void gbkG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) {  WARNINGLINE printf ( data ) ; } }  static void gbkG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) {  printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_14_gbk ( ) { gbkB2G1 ( ) ; gbkB2G2 ( ) ; gbkG2B1 ( ) ; gbkG2B2 ( ) ; } CWE134 goodpositive
static void ybtB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  static void ybtB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalFive = = N ) {  printf ( " %s\n " , data ) ; } }  static void ybtG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) {  printf ( data ) ; } }  static void ybtG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_14_ybt ( ) { ybtB2G1 ( ) ; ybtB2G2 ( ) ; ybtG2B1 ( ) ; ybtG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_15_oof ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  WARNINGLINE printf ( data ) ; break ; default:  printLine ( " STRING " ) ; break ; } } CWE134 badpositive
static void moeB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printLine ( " STRING " ) ; break ; default:  printf ( " %s\n " , data ) ; break ; } }  static void moeB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printf ( " %s\n " , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } }  static void moeG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  printLine ( " STRING " ) ; break ; default:  strcpy ( data , " STRING " ) ; break ; } switch ( N ) { case 7:  WARNINGLINE printf ( data ) ; break ; default:  printLine ( " STRING " ) ; break ; } }  static void moeG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  strcpy ( data , " STRING " ) ; break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printf ( data ) ; break ; default:  printLine ( " STRING " ) ; break ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_15_moe ( ) { moeB2G1 ( ) ; moeB2G2 ( ) ; moeG2B1 ( ) ; moeG2B2 ( ) ; } CWE134 goodpositive
static void sizB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printLine ( " STRING " ) ; break ; default:  printf ( " %s\n " , data ) ; break ; } }  static void sizB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printf ( " %s\n " , data ) ; break ; default:  printLine ( " STRING " ) ; break ; } }  static void sizG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  printLine ( " STRING " ) ; break ; default:  strcpy ( data , " STRING " ) ; break ; } switch ( N ) { case 7:  printf ( data ) ; break ; default:  printLine ( " STRING " ) ; break ; } }  static void sizG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  strcpy ( data , " STRING " ) ; break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  WARNINGLINE printf ( data ) ; break ; default:  printLine ( " STRING " ) ; break ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_15_siz ( ) { sizB2G1 ( ) ; sizB2G2 ( ) ; sizG2B1 ( ) ; sizG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_16_rot ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; } while ( N ) {  WARNINGLINE printf ( data ) ; break ; } } CWE134 badpositive
static void nckB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; } while ( N ) {  printf ( " %s\n " , data ) ; break ; } }  static void nckG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) {  strcpy ( data , " STRING " ) ; break ; } while ( N ) {  WARNINGLINE printf ( data ) ; break ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_16_nck ( ) { nckB2G ( ) ; nckG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_17_dex ( ) { int i , j ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( i = N ; i < N ; i + + ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } for ( j = N ; j < N ; j + + ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void vmnB2G ( ) { int i , k ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( i = N ; i < N ; i + + ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } for ( k = N ; k < N ; k + + ) {  printf ( " %s\n " , data ) ; } }  static void vmnG2B ( ) { int h , j ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( h = N ; h < N ; h + + ) {  strcpy ( data , " STRING " ) ; } for ( j = N ; j < N ; j + + ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_17_vmn ( ) { vmnB2G ( ) ; vmnG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_18_xqy ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source: { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } goto sink ; sink:  WARNINGLINE printf ( data ) ; } CWE134 badpositive
static void rumB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source: { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } goto sink ; sink:  printf ( " %s\n " , data ) ; }  static void rumG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source:  strcpy ( data , " STRING " ) ; goto sink ; sink:  WARNINGLINE printf ( data ) ; } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_18_rum ( ) { rumB2G ( ) ; rumG2B ( ) ; } CWE134 goodpositive
static int tbbStatic = N ; static void tbbSink ( char * data ) { if ( tbbStatic ) {  WARNINGLINE printf ( data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_21_tbb ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } tbbStatic = N ;  tbbSink ( data ) ; } CWE134 badpositive
static int ozbB2G1Static = N ; static int ozbB2G2Static = N ; static int ozbG2BStatic = N ;  static void ozbB2G1Sink ( char * data ) { if ( ozbB2G1Static ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } } static void ozbB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } ozbB2G1Static = N ;  ozbB2G1Sink ( data ) ; }  static void ozbB2G2Sink ( char * data ) { if ( ozbB2G2Static ) {  printf ( " %s\n " , data ) ; } } static void ozbB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } ozbB2G2Static = N ;  ozbB2G2Sink ( data ) ; }  static void ozbG2BSink ( char * data ) { if ( ozbG2BStatic ) {  WARNINGLINE printf ( data ) ; } } static void ozbG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; ozbG2BStatic = N ;  ozbG2BSink ( data ) ; } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_21_ozb ( ) { ozbB2G1 ( ) ; ozbB2G2 ( ) ; ozbG2B ( ) ; } CWE134 goodpositive
extern int CWE134_Uncontrolled_Format_String__char_listen_socket_printf_22_ivzGlobal ; void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_22_ivzSink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_listen_socket_printf_22_ivzGlobal ) {  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
extern int CWE134_Uncontrolled_Format_String__char_listen_socket_printf_22_crkB2G1Global ; extern int CWE134_Uncontrolled_Format_String__char_listen_socket_printf_22_crkB2G2Global ; extern int CWE134_Uncontrolled_Format_String__char_listen_socket_printf_22_crkG2BGlobal ;  void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_22_crkB2G1Sink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_listen_socket_printf_22_crkB2G1Global ) {  printLine ( " STRING " ) ; } else {  printf ( " %s\n " , data ) ; } }  void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_22_crkB2G2Sink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_listen_socket_printf_22_crkB2G2Global ) {  printf ( " %s\n " , data ) ; } }  void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_22_crkG2BSink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_listen_socket_printf_22_crkG2BGlobal ) {  WARNINGLINE printf ( data ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_31_pje ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } { char * dataCopy = data ; char * data = dataCopy ;  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void qbgG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; { char * dataCopy = data ; char * data = dataCopy ;  WARNINGLINE printf ( data ) ; } }  static void qbgB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } { char * dataCopy = data ; char * data = dataCopy ;  printf ( " %s\n " , data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_31_qbg ( ) { qbgG2B ( ) ; qbgB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_32_bcr ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } * dataPtr1 = data ; } { char * data = * dataPtr2 ;  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void serG2B ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ;  strcpy ( data , " STRING " ) ; * dataPtr1 = data ; } { char * data = * dataPtr2 ;  WARNINGLINE printf ( data ) ; } }  static void serB2G ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } * dataPtr1 = data ; } { char * data = * dataPtr2 ;  printf ( " %s\n " , data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_32_ser ( ) { serG2B ( ) ; serB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_34_bcm ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_listen_socket_printf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ;  WARNINGLINE printf ( data ) ; } } CWE134 badpositive
static void teuG2B ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_listen_socket_printf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ;  WARNINGLINE printf ( data ) ; } }  static void teuB2G ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_listen_socket_printf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ;  printf ( " %s\n " , data ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_34_teu ( ) { teuG2B ( ) ; teuB2G ( ) ; } CWE134 goodpositive
static void lluSink ( char * data ) {  WARNINGLINE printf ( data ) ; } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_41_llu ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } lluSink ( data ) ; } CWE134 badpositive
static void xyaG2BSink ( char * data ) {  WARNINGLINE printf ( data ) ; } static void xyaG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; xyaG2BSink ( data ) ; }  static void xyaB2GSink ( char * data ) {  printf ( " %s\n " , data ) ; } static void xyaB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } xyaB2GSink ( data ) ; } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_41_xya ( ) { xyaB2G ( ) ; xyaG2B ( ) ; } CWE134 goodpositive
static char * wboSource ( char * data ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } return data ; } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_42_wbo ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = wboSource ( data ) ;  WARNINGLINE printf ( data ) ; } CWE134 badpositive
static char * djfG2BSource ( char * data ) {  strcpy ( data , " STRING " ) ; return data ; } static void djfG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = djfG2BSource ( data ) ;  WARNINGLINE printf ( data ) ; }  static char * djfB2GSource ( char * data ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } return data ; } static void djfB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = djfB2GSource ( data ) ;  printf ( " %s\n " , data ) ; } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_42_djf ( ) { djfB2G ( ) ; djfG2B ( ) ; } CWE134 goodpositive
static void ecxSink ( char * data ) {  WARNINGLINE printf ( data ) ; } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_44_ecx ( ) { char * data ;  void ( * funcPtr ) ( char * ) = ecxSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } }  funcPtr ( data ) ; } CWE134 badpositive
static void xwhG2BSink ( char * data ) {  WARNINGLINE printf ( data ) ; } static void xwhG2B ( ) { char * data ; void ( * funcPtr ) ( char * ) = xwhG2BSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; funcPtr ( data ) ; }  static void xwhB2GSink ( char * data ) {  printf ( " %s\n " , data ) ; } static void xwhB2G ( ) { char * data ; void ( * funcPtr ) ( char * ) = xwhB2GSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } funcPtr ( data ) ; } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_44_xwh ( ) { xwhG2B ( ) ; xwhB2G ( ) ; } CWE134 goodpositive
static void daxSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_listen_socket_printf_45_daxData ;  WARNINGLINE printf ( data ) ; } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_45_dax ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } CWE134_Uncontrolled_Format_String__char_listen_socket_printf_45_daxData = data ; daxSink ( ) ; } CWE134 badpositive
static void cryG2BSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_listen_socket_printf_45_cryG2BData ;  WARNINGLINE printf ( data ) ; } static void cryG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; CWE134_Uncontrolled_Format_String__char_listen_socket_printf_45_cryG2BData = data ; cryG2BSink ( ) ; }  static void cryB2GSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_listen_socket_printf_45_cryB2GData ;  printf ( " %s\n " , data ) ; } static void cryB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } CWE134_Uncontrolled_Format_String__char_listen_socket_printf_45_cryB2GData = data ; cryB2GSink ( ) ; } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_45_cry ( ) { cryG2B ( ) ; cryB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_51b_busSink ( char * data ) {  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_51b_gzaG2BSink ( char * data ) {  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_51b_gzaB2GSink ( char * data ) {  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_52c_rzoSink ( char * data ) {  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_52c_kujG2BSink ( char * data ) {  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_52c_kujB2GSink ( char * data ) {  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_53d_mbqSink ( char * data ) {  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_53d_mvdG2BSink ( char * data ) {  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_53d_mvdB2GSink ( char * data ) {  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_54e_rrsSink ( char * data ) {  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_54e_vacG2BSink ( char * data ) {  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_54e_vacB2GSink ( char * data ) {  printf ( " %s\n " , data ) ; } CWE134 goodpositive
char * CWE134_Uncontrolled_Format_String__char_listen_socket_printf_61b_ehgSource ( char * data ) ; void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_61_ehg ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_listen_socket_printf_61b_ehgSource ( data ) ;  WARNINGLINE printf ( data ) ; } CWE134 badpositive
char * CWE134_Uncontrolled_Format_String__char_listen_socket_printf_61b_vqyG2BSource ( char * data ) ; static void vqyG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_listen_socket_printf_61b_vqyG2BSource ( data ) ;  WARNINGLINE printf ( data ) ; }  char * CWE134_Uncontrolled_Format_String__char_listen_socket_printf_61b_vqyB2GSource ( char * data ) ; static void vqyB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_listen_socket_printf_61b_vqyB2GSource ( data ) ;  printf ( " %s\n " , data ) ; } void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_61_vqy ( ) { vqyG2B ( ) ; vqyB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_63b_fxuSink ( char * * dataPtr ) { char * data = * dataPtr ;  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_63b_rulG2BSink ( char * * dataPtr ) { char * data = * dataPtr ;  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_63b_rulB2GSink ( char * * dataPtr ) { char * data = * dataPtr ;  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_64b_cxjSink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ;  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_64b_wocG2BSink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ;  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_64b_wocB2GSink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ;  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_65b_ugfSink ( char * data ) {  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_65b_yclG2BSink ( char * data ) {  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_65b_yclB2GSink ( char * data ) {  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_66b_txqSink ( char * dataArray [ ] ) {  char * data = dataArray [ N ] ;  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_66b_qnsG2BSink ( char * dataArray [ ] ) { char * data = dataArray [ N ] ;  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_66b_qnsB2GSink ( char * dataArray [ ] ) { char * data = dataArray [ N ] ;  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_67b_apoSink ( CWE134_Uncontrolled_Format_String__char_listen_socket_printf_67_structType myStruct ) { char * data = myStruct.structFirst ;  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_67b_cvqG2BSink ( CWE134_Uncontrolled_Format_String__char_listen_socket_printf_67_structType myStruct ) { char * data = myStruct.structFirst ;  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_67b_cvqB2GSink ( CWE134_Uncontrolled_Format_String__char_listen_socket_printf_67_structType myStruct ) { char * data = myStruct.structFirst ;  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_68b_cbsSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_listen_socket_printf_68_cbsData ;  WARNINGLINE printf ( data ) ; } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_68b_ofsG2BSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_listen_socket_printf_68_ofsG2BData ;  WARNINGLINE printf ( data ) ; }  void CWE134_Uncontrolled_Format_String__char_listen_socket_printf_68b_ofsB2GSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_listen_socket_printf_68_ofsB2GData ;  printf ( " %s\n " , data ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_01_ghh ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
static void zdoG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  static void zdoB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_01_zdo ( ) { zdoG2B ( ) ; zdoB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_02_nxi ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void texB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void texB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void texG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void texG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  strcpy ( data , " STRING " ) ; } if ( N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_02_tex ( ) { texB2G1 ( ) ; texB2G2 ( ) ; texG2B1 ( ) ; texG2B2 ( ) ; } CWE134 goodpositive
static void azhB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void azhB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void azhG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void azhG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ) {  strcpy ( data , " STRING " ) ; } if ( N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_02_azh ( ) { azhB2G1 ( ) ; azhB2G2 ( ) ; azhG2B1 ( ) ; azhG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_03_ifn ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void eyyB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void eyyB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void eyyG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void eyyG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) {  strcpy ( data , " STRING " ) ; } if ( N = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_03_eyy ( ) { eyyB2G1 ( ) ; eyyB2G2 ( ) ; eyyG2B1 ( ) ; eyyG2B2 ( ) ; } CWE134 goodpositive
static void cecB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void cecB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( N = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void cecG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( N = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void cecG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( N = = N ) {  strcpy ( data , " STRING " ) ; } if ( N = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_03_cec ( ) { cecB2G1 ( ) ; cecB2G2 ( ) ; cecG2B1 ( ) ; cecG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_04_mdx ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void aloB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void aloB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void aloG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void aloG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_04_alo ( ) { aloB2G1 ( ) ; aloB2G2 ( ) ; aloG2B1 ( ) ; aloG2B2 ( ) ; } CWE134 goodpositive
static void rscB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void rscB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void rscG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void rscG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_04_rsc ( ) { rscB2G1 ( ) ; rscB2G2 ( ) ; rscG2B1 ( ) ; rscG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_05_pzf ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticTrue ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void dsxB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticFalse ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void dsxB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticTrue ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void dsxG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void dsxG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_05_dsx ( ) { dsxB2G1 ( ) ; dsxB2G2 ( ) ; dsxG2B1 ( ) ; dsxG2B2 ( ) ; } CWE134 goodpositive
static void wqiB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticFalse ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void wqiB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticTrue ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void wqiG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void wqiG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticTrue ) {  strcpy ( data , " STRING " ) ; } if ( staticTrue ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_05_wqi ( ) { wqiB2G1 ( ) ; wqiB2G2 ( ) ; wqiG2B1 ( ) ; wqiG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_06_uqu ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void rnbB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void rnbB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void rnbG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void rnbG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_06_rnb ( ) { rnbB2G1 ( ) ; rnbB2G2 ( ) ; rnbG2B1 ( ) ; rnbG2B2 ( ) ; } CWE134 goodpositive
static void figB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void figB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( STATIC_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void figG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void figG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( STATIC_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( STATIC_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_06_fig ( ) { figB2G1 ( ) ; figB2G2 ( ) ; figG2B1 ( ) ; figG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_07_kaa ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticFive = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void hjwB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void hjwB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticFive = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void hjwG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void hjwG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_07_hjw ( ) { hjwB2G1 ( ) ; hjwB2G2 ( ) ; hjwG2B1 ( ) ; hjwG2B2 ( ) ; } CWE134 goodpositive
static void lgyB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void lgyB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticFive = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void lgyG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void lgyG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( staticFive = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_07_lgy ( ) { lgyB2G1 ( ) ; lgyB2G2 ( ) ; lgyG2B1 ( ) ; lgyG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_08_afi ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void zppB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void zppB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void zppG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void zppG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_08_zpp ( ) { zppB2G1 ( ) ; zppB2G2 ( ) ; zppG2B1 ( ) ; zppG2B2 ( ) ; } CWE134 goodpositive
static void ntdB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void ntdB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( staticReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void ntdG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void ntdG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( staticReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( staticReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_08_ntd ( ) { ntdB2G1 ( ) ; ntdB2G2 ( ) ; ntdG2B1 ( ) ; ntdG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_09_nvj ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void mbhB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void mbhB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void mbhG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void mbhG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_09_mbh ( ) { mbhB2G1 ( ) ; mbhB2G2 ( ) ; mbhG2B1 ( ) ; mbhG2B2 ( ) ; } CWE134 goodpositive
static void wxlB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void wxlB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void wxlG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FALSE ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void wxlG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_TRUE ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_TRUE ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_09_wxl ( ) { wxlB2G1 ( ) ; wxlB2G2 ( ) ; wxlG2B1 ( ) ; wxlG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_10_xaf ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalTrue ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void imeB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalFalse ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void imeB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalTrue ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void imeG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void imeG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_10_ime ( ) { imeB2G1 ( ) ; imeB2G2 ( ) ; imeG2B1 ( ) ; imeG2B2 ( ) ; } CWE134 goodpositive
static void rdsB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalFalse ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void rdsB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalTrue ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void rdsG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFalse ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void rdsG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalTrue ) {  strcpy ( data , " STRING " ) ; } if ( globalTrue ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_10_rds ( ) { rdsB2G1 ( ) ; rdsB2G2 ( ) ; rdsG2B1 ( ) ; rdsG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_11_yfv ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void jyiB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void jyiB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void jyiG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void jyiG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_11_jyi ( ) { jyiB2G1 ( ) ; jyiB2G2 ( ) ; jyiG2B1 ( ) ; jyiG2B2 ( ) ; } CWE134 goodpositive
static void wqsB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void wqsB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void wqsG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsFalse ( ) ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void wqsG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrue ( ) ) {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrue ( ) ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_11_wqs ( ) { wqsB2G1 ( ) ; wqsB2G2 ( ) ; wqsG2B1 ( ) ; wqsG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_12_tsl ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void urqB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } else { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalReturnsTrueOrFalse ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void urqG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) {  strcpy ( data , " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_12_urq ( ) { urqB2G ( ) ; urqG2B ( ) ; } CWE134 goodpositive
static void dhaB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } else { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalReturnsTrueOrFalse ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void dhaG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalReturnsTrueOrFalse ( ) ) {  strcpy ( data , " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalReturnsTrueOrFalse ( ) ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } else { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_12_dha ( ) { dhaB2G ( ) ; dhaG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_13_sub ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void qulB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void qulB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void qulG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void qulG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_13_qul ( ) { qulB2G1 ( ) ; qulB2G2 ( ) ; qulG2B1 ( ) ; qulG2B2 ( ) ; } CWE134 goodpositive
static void uoqB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void uoqB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( GLOBAL_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void uoqG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void uoqG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( GLOBAL_CONST_FIVE = = N ) {  strcpy ( data , " STRING " ) ; } if ( GLOBAL_CONST_FIVE = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_13_uoq ( ) { uoqB2G1 ( ) ; uoqB2G2 ( ) ; uoqG2B1 ( ) ; uoqG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_14_ynn ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalFive = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void djdB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void djdB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalFive = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void djdG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void djdG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_14_djd ( ) { djdB2G1 ( ) ; djdB2G2 ( ) ; djdG2B1 ( ) ; djdG2B2 ( ) ; } CWE134 goodpositive
static void awlB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void awlB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } if ( globalFive = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void awlG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive ! = N ) {  printLine ( " STRING " ) ; } else {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void awlG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; if ( globalFive = = N ) {  strcpy ( data , " STRING " ) ; } if ( globalFive = = N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_14_awl ( ) { awlB2G1 ( ) ; awlB2G2 ( ) ; awlG2B1 ( ) ; awlG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_15_von ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7: { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } break ; default:  printLine ( " STRING " ) ; break ; } } CWE134 badpositive
static void tenB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printLine ( " STRING " ) ; break ; default: { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } break ; } }  static void tenB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7: { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } break ; default:  printLine ( " STRING " ) ; break ; } }  static void tenG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  printLine ( " STRING " ) ; break ; default:  strcpy ( data , " STRING " ) ; break ; } switch ( N ) { case 7: { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } break ; default:  printLine ( " STRING " ) ; break ; } }  static void tenG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  strcpy ( data , " STRING " ) ; break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7: { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } break ; default:  printLine ( " STRING " ) ; break ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_15_ten ( ) { tenB2G1 ( ) ; tenB2G2 ( ) ; tenG2B1 ( ) ; tenG2B2 ( ) ; } CWE134 goodpositive
static void gnaB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7:  printLine ( " STRING " ) ; break ; default: { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } break ; } }  static void gnaB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6: { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7: { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } break ; default:  printLine ( " STRING " ) ; break ; } }  static void gnaG2B1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  printLine ( " STRING " ) ; break ; default:  strcpy ( data , " STRING " ) ; break ; } switch ( N ) { case 7: { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } break ; default:  printLine ( " STRING " ) ; break ; } }  static void gnaG2B2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; switch ( N ) { case 6:  strcpy ( data , " STRING " ) ; break ; default:  printLine ( " STRING " ) ; break ; } switch ( N ) { case 7: { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } break ; default:  printLine ( " STRING " ) ; break ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_15_gna ( ) { gnaB2G1 ( ) ; gnaB2G2 ( ) ; gnaG2B1 ( ) ; gnaG2B2 ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_16_dwa ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; } while ( N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } break ; } } CWE134 badpositive
static void qxvB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } break ; } while ( N ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } break ; } }  static void qxvG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; while ( N ) {  strcpy ( data , " STRING " ) ; break ; } while ( N ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } break ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_16_qxv ( ) { qxvB2G ( ) ; qxvG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_17_pdr ( ) { int i , j ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( i = N ; i < N ; i + + ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } for ( j = N ; j < N ; j + + ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void zclB2G ( ) { int i , k ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( i = N ; i < N ; i + + ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } } for ( k = N ; k < N ; k + + ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  static void zclG2B ( ) { int h , j ; char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; for ( h = N ; h < N ; h + + ) {  strcpy ( data , " STRING " ) ; } for ( j = N ; j < N ; j + + ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_17_zcl ( ) { zclB2G ( ) ; zclG2B ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_18_wze ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source: { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } goto sink ; sink: { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
static void vbdB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source: { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } goto sink ; sink: { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } }  static void vbdG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; goto source ; source:  strcpy ( data , " STRING " ) ; goto sink ; sink: { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_18_vbd ( ) { vbdB2G ( ) ; vbdG2B ( ) ; } CWE134 goodpositive
static int invStatic = N ; static void invSink ( char * data ) { if ( invStatic ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_21_inv ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } invStatic = N ;  invSink ( data ) ; } CWE134 badpositive
static int wdcB2G1Static = N ; static int wdcB2G2Static = N ; static int wdcG2BStatic = N ;  static void wdcB2G1Sink ( char * data ) { if ( wdcB2G1Static ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } } static void wdcB2G1 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } wdcB2G1Static = N ;  wdcB2G1Sink ( data ) ; }  static void wdcB2G2Sink ( char * data ) { if ( wdcB2G2Static ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } } static void wdcB2G2 ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } wdcB2G2Static = N ;  wdcB2G2Sink ( data ) ; }  static void wdcG2BSink ( char * data ) { if ( wdcG2BStatic ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } static void wdcG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; wdcG2BStatic = N ;  wdcG2BSink ( data ) ; } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_21_wdc ( ) { wdcB2G1 ( ) ; wdcB2G2 ( ) ; wdcG2B ( ) ; } CWE134 goodpositive
extern int CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_22_muiGlobal ; void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_22_muiSink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_22_muiGlobal ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
extern int CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_22_cimB2G1Global ; extern int CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_22_cimB2G2Global ; extern int CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_22_cimG2BGlobal ;  void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_22_cimB2G1Sink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_22_cimB2G1Global ) {  printLine ( " STRING " ) ; } else { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_22_cimB2G2Sink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_22_cimB2G2Global ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } }  void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_22_cimG2BSink ( char * data ) { if ( CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_22_cimG2BGlobal ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_31_zlv ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } { char * dataCopy = data ; char * data = dataCopy ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void pprG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; { char * dataCopy = data ; char * data = dataCopy ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void pprB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } { char * dataCopy = data ; char * data = dataCopy ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_31_ppr ( ) { pprG2B ( ) ; pprB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_32_txu ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void phdG2B ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ;  strcpy ( data , " STRING " ) ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void phdB2G ( ) { char * data ; char * * dataPtr1 = & data ; char * * dataPtr2 = & data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { char * data = * dataPtr1 ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_32_phd ( ) { phdG2B ( ) ; phdB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_34_kgu ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } } CWE134 badpositive
static void fioG2B ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } }  static void fioB2G ( ) { char * data ; CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_34_unionType myUnion ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_34_fio ( ) { fioG2B ( ) ; fioB2G ( ) ; } CWE134 goodpositive
static void wvmSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_41_wvm ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } wvmSink ( data ) ; } CWE134 badpositive
static void nfrG2BSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } static void nfrG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; nfrG2BSink ( data ) ; }  static void nfrB2GSink ( char * data ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } static void nfrB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } nfrB2GSink ( data ) ; } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_41_nfr ( ) { nfrB2G ( ) ; nfrG2B ( ) ; } CWE134 goodpositive
static char * hccSource ( char * data ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } return data ; } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_42_hcc ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = hccSource ( data ) ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
static char * exlG2BSource ( char * data ) {  strcpy ( data , " STRING " ) ; return data ; } static void exlG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = exlG2BSource ( data ) ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  static char * exlB2GSource ( char * data ) { { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } return data ; } static void exlB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = exlB2GSource ( data ) ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_42_exl ( ) { exlB2G ( ) ; exlG2B ( ) ; } CWE134 goodpositive
static void tzlSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_44_tzl ( ) { char * data ;  void ( * funcPtr ) ( char * ) = tzlSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } }  funcPtr ( data ) ; } CWE134 badpositive
static void mfwG2BSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } static void mfwG2B ( ) { char * data ; void ( * funcPtr ) ( char * ) = mfwG2BSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; funcPtr ( data ) ; }  static void mfwB2GSink ( char * data ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } static void mfwB2G ( ) { char * data ; void ( * funcPtr ) ( char * ) = mfwB2GSink ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } funcPtr ( data ) ; } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_44_mfw ( ) { mfwG2B ( ) ; mfwB2G ( ) ; } CWE134 goodpositive
static void eqcSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_45_eqcData ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_45_eqc ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_45_eqcData = data ; eqcSink ( ) ; } CWE134 badpositive
static void ueyG2BSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_45_ueyG2BData ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } static void ueyG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ;  strcpy ( data , " STRING " ) ; CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_45_ueyG2BData = data ; ueyG2BSink ( ) ; }  static void ueyB2GSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_45_ueyB2GData ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } static void ueyB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; { WSADATA wsaData ; int wsaDataInit = N ; int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET listenSocket = INVALID_SOCKET ; SOCKET acceptSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { if ( WSAStartup ( MAKEWORD ( N , N ) , & wsaData ) ! = NO_ERROR ) { break ; } wsaDataInit = N ;  listenSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( listenSocket = = INVALID_SOCKET ) { break ; } memset ( & service , N , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = INADDR_ANY ; service.sin_port = htons ( TCP_PORT ) ; if ( bind ( listenSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) = = SOCKET_ERROR ) { break ; } if ( listen ( listenSocket , LISTEN_BACKLOG ) = = SOCKET_ERROR ) { break ; } acceptSocket = accept ( listenSocket , NULL , NULL ) ; if ( acceptSocket = = SOCKET_ERROR ) { break ; }  recvResult = recv ( acceptSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( N - dataLen - N ) , N ) ; if ( recvResult = = SOCKET_ERROR || recvResult = = N ) { break ; }  data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ;  replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( N ) ; if ( listenSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( listenSocket ) ; } if ( acceptSocket ! = INVALID_SOCKET ) { CLOSE_SOCKET ( acceptSocket ) ; } if ( wsaDataInit ) { WSACleanup ( ) ; } } CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_45_ueyB2GData = data ; ueyB2GSink ( ) ; } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_45_uey ( ) { ueyG2B ( ) ; ueyB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_51b_hihSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_51b_tvlG2BSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_51b_tvlB2GSink ( char * data ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_52c_wfoSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_52c_xmyG2BSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_52c_xmyB2GSink ( char * data ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_53d_mmySink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_53d_hrsG2BSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_53d_hrsB2GSink ( char * data ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_54e_whuSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_54e_ngoG2BSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_54e_ngoB2GSink ( char * data ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
char * CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_61b_mjjSource ( char * data ) ; void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_61_mjj ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_61b_mjjSource ( data ) ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
char * CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_61b_ajlG2BSource ( char * data ) ; static void ajlG2B ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_61b_ajlG2BSource ( data ) ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  char * CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_61b_ajlB2GSource ( char * data ) ; static void ajlB2G ( ) { char * data ; char dataBuffer [ N ] = " STRING " ; data = dataBuffer ; data = CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_61b_ajlB2GSource ( data ) ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_61_ajl ( ) { ajlG2B ( ) ; ajlB2G ( ) ; } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_63b_sgrSink ( char * * dataPtr ) { char * data = * dataPtr ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_63b_ndjG2BSink ( char * * dataPtr ) { char * data = * dataPtr ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_63b_ndjB2GSink ( char * * dataPtr ) { char * data = * dataPtr ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_64b_oatSink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_64b_mvlG2BSink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_64b_mvlB2GSink ( void * dataVoidPtr ) {  char * * dataPtr = ( char * * ) dataVoidPtr ;  char * data = ( * dataPtr ) ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_65b_kcjSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_65b_zehG2BSink ( char * data ) { { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_65b_zehB2GSink ( char * data ) { { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_66b_izuSink ( char * dataArray [ ] ) {  char * data = dataArray [ N ] ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_66b_wrcG2BSink ( char * dataArray [ ] ) { char * data = dataArray [ N ] ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_66b_wrcB2GSink ( char * dataArray [ ] ) { char * data = dataArray [ N ] ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_67b_sgkSink ( CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_67_structType myStruct ) { char * data = myStruct.structFirst ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_67b_fvkG2BSink ( CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_67_structType myStruct ) { char * data = myStruct.structFirst ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_67b_fvkB2GSink ( CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_67_structType myStruct ) { char * data = myStruct.structFirst ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_68b_uzcSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_68_uzcData ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } } CWE134 badpositive
void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_68b_tmqG2BSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_68_tmqG2BData ; { char dest [ N ] = " STRING " ;  WARNINGLINE SNPRINTF ( dest , N - N , data ) ; printLine ( dest ) ; } }  void CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_68b_tmqB2GSink ( ) { char * data = CWE134_Uncontrolled_Format_String__char_listen_socket_snprintf_68_tmqB2GData ; { char dest [ N ] = " STRING " ;  SNPRINTF ( dest , N - N , " %s " , data ) ; printLine ( dest ) ; } } CWE134 goodpositive
