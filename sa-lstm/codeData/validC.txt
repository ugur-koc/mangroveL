# include " std_testcase.h " static int staticTrue = 1 ; static void goodG2B2 ( ) { int * data ; data = NULL ; if ( staticTrue ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; size_t i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_05_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Array access ( from variable ' data ' ) results in a null pointer dereference ------ data [ i ] = source [ i ] ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { int * data ; data = NULL ; if ( GLOBAL_CONST_FIVE == 5 ) { data = ( int * ) ALLOCA ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memmove ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_13_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Null pointer passed as an argument to a ' nonnull ' parameter ------ memmove ( data , source , 10 * sizeof ( int ) ) ; */ FalsePos
# include " std_testcase.h " # define SRC_STRING " AAAAAAAAAA " static void goodG2B2 ( ) { char * data ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( globalTrue ) { data = dataGoodBuffer ; data [ 0 ] = ' \0 ' ; } { char source [ 10 + 1 ] = SRC_STRING ; strcpy ( data , source ) ; printLine ( data ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_10_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Function call argument is an uninitialized value ------ strcpy ( data , source ) ; */ FalsePos
# include " std_testcase.h " # define SRC_STRING " AAAAAAAAAA " static void goodG2B2 ( ) { char * data ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( GLOBAL_CONST_FIVE == 5 ) { data = dataGoodBuffer ; data [ 0 ] = ' \0 ' ; } { char source [ 10 + 1 ] = SRC_STRING ; strcpy ( data , source ) ; printLine ( data ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_13_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Function call argument is an uninitialized value ------ strcpy ( data , source ) ; */ FalsePos
# define SRC_STRING " AAAAAAAAAA " static int staticTrue = 1 ; static void goodG2B2 ( ) { char * data ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( staticTrue ) { data = dataGoodBuffer ; data [ 0 ] = ' \0 ' ; } { char source [ 10 + 1 ] = SRC_STRING ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } /* Warning description Function call argument is an uninitialized value ------ memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; */ FalsePos
# define SRC_STRING " AAAAAAAAAA " static int staticFive = 5 ; static void goodG2B2 ( ) { char * data ; char * dataGoodBuffer = ( char * ) ALLOCA ( ( 10 + 1 ) * sizeof ( char ) ) ; if ( staticFive == 5 ) { data = dataGoodBuffer ; data [ 0 ] = ' \0 ' ; } { char source [ 10 + 1 ] = SRC_STRING ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } /* Warning description Function call argument is an uninitialized value ------ memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; */ FalsePos
# include < wchar.h > # define SRC_STRING " AAAAAAAAAA " static int staticFive = 5 ; static void goodG2B2 ( ) { char * data ; char dataGoodBuffer [ 10 + 1 ] ; if ( staticFive == 5 ) { data = dataGoodBuffer ; data [ 0 ] = ' \0 ' ; } { char source [ 10 + 1 ] = SRC_STRING ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_07_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Dereference of undefined pointer value ------ data [ i ] = source [ i ] ; */ FalsePos
# include " std_testcase.h " # define SRC_STRING " AAAAAAAAAA " static void goodG2B2 ( ) { char * data ; char dataGoodBuffer [ 10 + 1 ] ; if ( GLOBAL_CONST_TRUE ) { data = dataGoodBuffer ; data [ 0 ] = ' \0 ' ; } { char source [ 10 + 1 ] = SRC_STRING ; size_t i , sourceLen ; sourceLen = strlen ( source ) ; for ( i = 0 ; i < sourceLen + 1 ; i ++ ) { data [ i ] = source [ i ] ; } printLine ( data ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_09_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Dereference of undefined pointer value ------ data [ i ] = source [ i ] ; */ FalsePos
# include " std_testcase.h " # define SRC_STRING " AAAAAAAAAA " static void goodG2B2 ( ) { char * data ; char dataGoodBuffer [ 10 + 1 ] ; if ( globalFive == 5 ) { data = dataGoodBuffer ; data [ 0 ] = ' \0 ' ; } { char source [ 10 + 1 ] = SRC_STRING ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_14_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Function call argument is an uninitialized value ------ memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; */ FalsePos
# define SRC_STRING " AAAAAAAAAA " static void goodG2B ( ) { char * data ; char ** dataPtr1 = & data ; char ** dataPtr2 = & data ; char dataGoodBuffer [ 10 + 1 ] ; { char * data = * dataPtr1 ; data = dataGoodBuffer ; data [ 0 ] = ' \0 ' ; * dataPtr1 = data ; } { char * data = * dataPtr2 ; { char source [ 10 + 1 ] = SRC_STRING ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; } } } /* Warning description Assigned value is garbage or undefined ------ char * data = * dataPtr1 ; */ UnknownPos 
# include " std_testcase.h " static void goodG2B2 ( ) { char * data ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( GLOBAL_CONST_FIVE == 5 ) { data = dataGoodBuffer ; data [ 0 ] = ' \0 ' ; } { size_t i ; char source [ 100 ] ; memset ( source , ' C ' , 100 - 1 ) ; source [ 100 - 1 ] = ' \0 ' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = ' \0 ' ; printLine ( data ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_13_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Dereference of undefined pointer value ------ data [ i ] = source [ i ] ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { char * data ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( GLOBAL_CONST_FIVE == 5 ) { data = dataGoodBuffer ; data [ 0 ] = ' \0 ' ; } { char source [ 100 ] ; memset ( source , ' C ' , 100 - 1 ) ; source [ 100 - 1 ] = ' \0 ' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = ' \0 ' ; printLine ( data ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_13_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Function call argument is an uninitialized value ------ memcpy ( data , source , 100 * sizeof ( char ) ) ; */ FalsePos
static int staticFive = 5 ; static void goodG2B2 ( ) { char * data ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( staticFive == 5 ) { data = dataGoodBuffer ; data [ 0 ] = ' \0 ' ; } { char source [ 100 ] ; memset ( source , ' C ' , 100 - 1 ) ; source [ 100 - 1 ] = ' \0 ' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = ' \0 ' ; printLine ( data ) ; } } /* Warning description Function call argument is an uninitialized value ------ memmove ( data , source , 100 * sizeof ( char ) ) ; */ FalsePos
static int staticFive = 5 ; static void goodG2B2 ( ) { char * data ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( staticFive == 5 ) { data = dataGoodBuffer ; data [ 0 ] = ' \0 ' ; } { char source [ 100 ] ; memset ( source , ' C ' , 100 - 1 ) ; source [ 100 - 1 ] = ' \0 ' ; SNPRINTF ( data , 100 , " %s " , source ) ; printLine ( data ) ; } } /* Warning description Function call argument is an uninitialized value ------ SNPRINTF ( data , 100 , " %s " , source ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { char * data ; char dataGoodBuffer [ 100 ] ; if ( globalTrue ) { data = dataGoodBuffer ; data [ 0 ] = ' \0 ' ; } { char source [ 100 ] ; memset ( source , ' C ' , 100 - 1 ) ; source [ 100 - 1 ] = ' \0 ' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = ' \0 ' ; printLine ( data ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_10_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Function call argument is an uninitialized value ------ memmove ( data , source , 100 * sizeof ( char ) ) ; */ FalsePos
static void goodG2B2 ( ) { char * data ; char dataGoodBuffer [ 100 ] ; if ( globalReturnsTrue ( ) ) { data = dataGoodBuffer ; data [ 0 ] = ' \0 ' ; } { char source [ 100 ] ; memset ( source , ' C ' , 100 - 1 ) ; source [ 100 - 1 ] = ' \0 ' ; strncat ( data , source , 100 ) ; printLine ( data ) ; } } /* Warning description Function call argument is an uninitialized value ------ strncat ( data , source , 100 ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { int64_t * data ; int64_t * dataBadBuffer = ( int64_t * ) ALLOCA ( 50 * sizeof ( int64_t ) ) ; int64_t * dataGoodBuffer = ( int64_t * ) ALLOCA ( 100 * sizeof ( int64_t ) ) ; if ( globalTrue ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; } } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_10_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Dereference of undefined pointer value ------ data [ i ] = source [ i ] ; */ FalsePos
# include " std_testcase.h " static int staticTrue = 1 ; static void goodG2B2 ( ) { int64_t * data ; int64_t dataBadBuffer [ 50 ] ; int64_t dataGoodBuffer [ 100 ] ; if ( staticTrue ) { data = dataGoodBuffer ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_05_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Function call argument is an uninitialized value ------ memmove ( data , source , 100 * sizeof ( int64_t ) ) ; */ FalsePos
static void goodG2B2 ( ) { int * data ; int * dataGoodBuffer = ( int * ) ALLOCA ( 100 * sizeof ( int ) ) ; if ( globalReturnsTrue ( ) ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; } } /* Warning description Function call argument is an uninitialized value ------ memmove ( data , source , 100 * sizeof ( int ) ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { int * data ; int dataGoodBuffer [ 100 ] ; if ( GLOBAL_CONST_FIVE == 5 ) { data = dataGoodBuffer ; } { int source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printIntLine ( data [ 0 ] ) ; } } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_13_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Dereference of undefined pointer value ------ data [ i ] = source [ i ] ; */ FalsePos
# include " std_testcase.h " static void goodG2B ( ) { twoIntsStruct * data ; twoIntsStruct ** dataPtr1 = & data ; twoIntsStruct ** dataPtr2 = & data ; twoIntsStruct dataBadBuffer [ 50 ] ; twoIntsStruct dataGoodBuffer [ 100 ] ; { twoIntsStruct * data = * dataPtr1 ; data = dataGoodBuffer ; * dataPtr1 = data ; } { twoIntsStruct * data = * dataPtr2 ; { twoIntsStruct source [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { source [ i ] .intOne = 0 ; source [ i ] .intOne = 0 ; } } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printStructLine ( & data [ 0 ] ) ; } } } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_32_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Assigned value is garbage or undefined ------ twoIntsStruct * data = * dataPtr1 ; */ TruePos
# include < wchar.h > static int staticFive = 5 ; static void goodG2B2 ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( staticFive == 5 ) { memset ( data , ' A ' , 50 - 1 ) ; data [ 50 - 1 ] = ' \0 ' ; } { char dest [ 50 ] = " " ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = ' \0 ' ; printLine ( data ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_07_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Assigned value is garbage or undefined ------ dest [ i ] = data [ i ] ; */ FalsePos
static int staticTrue = 1 ; static void goodG2B2 ( ) { char * data ; char * dataGoodBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; if ( staticTrue ) { data = dataGoodBuffer ; data [ 0 ] = ' \0 ' ; } { char source [ 100 ] ; memset ( source , ' C ' , 100 - 1 ) ; source [ 100 - 1 ] = ' \0 ' ; strcat ( data , source ) ; printLine ( data ) ; } } /* Warning description Function call argument is an uninitialized value ------ strcat ( data , source ) ; */ FalsePos
static void goodG2B2 ( ) { char * data ; char dataGoodBuffer [ 100 ] ; if ( globalReturnsTrue ( ) ) { data = dataGoodBuffer ; data [ 0 ] = ' \0 ' ; } { char source [ 100 ] ; memset ( source , ' C ' , 100 - 1 ) ; source [ 100 - 1 ] = ' \0 ' ; strcpy ( data , source ) ; printLine ( data ) ; } } /* Warning description Function call argument is an uninitialized value ------ strcpy ( data , source ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { int * data ; data = NULL ; if ( globalReturnsTrue ( ) ) { data = ( int * ) malloc ( 10 * sizeof ( int ) ) ; } { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; free ( data ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_11_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Null pointer passed as an argument to a ' nonnull ' parameter ------ memcpy ( data , source , 10 * sizeof ( int ) ) ; */ FalsePos
# include " std_testcase.h " typedef union { int * unionFirst ; int * unionSecond ; } CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_34_unionType ; static void goodG2B ( ) { int * data ; CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_34_unionType myUnion ; data = NULL ; data = ( int * ) malloc ( 10 * sizeof ( int ) ) ; myUnion.unionFirst = data ; { int * data = myUnion.unionSecond ; { int source [ 10 ] = { 0 } ; memcpy ( data , source , 10 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; free ( data ) ; } } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_34_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Potential leak of memory pointed to by ' myUnion.unionFirst ' ------ int * data = myUnion.unionSecond ; */ TruePos
# include < wchar.h > static void goodB2G2 ( ) { void * data ; data = NULL ; switch ( 6 ) { case 6: { wchar_t * dataBadBuffer = ( wchar_t * ) malloc ( 50 * sizeof ( wchar_t ) ) ; wmemset ( dataBadBuffer , L ' A ' , 50 - 1 ) ; dataBadBuffer [ 50 - 1 ] = L ' \0 ' ; data = ( void * ) dataBadBuffer ; } break ; default: printLine ( " Benign , fixed string " ) ; break ; } switch ( 7 ) { case 7: { size_t dataLen = wcslen ( ( wchar_t * ) data ) ; void * dest = ( void * ) calloc ( dataLen + 1 , sizeof ( wchar_t ) ) ; memcpy ( dest , data , ( dataLen + 1 ) * sizeof ( wchar_t ) ) ; printWLine ( ( wchar_t * ) dest ) ; free ( dest ) ; } break ; default: printLine ( " Benign , fixed string " ) ; break ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE122_Heap_Based_Buffer_Overflow__CWE135_15_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Potential leak of memory pointed to by ' data ' ------ printWLine ( ( wchar_t * ) dest ) ; */ /* Warning description Potential leak of memory pointed to by ' data ' ------ printLine ( ( char * ) dest ) ; */ TruePos
# include " std_testcase.h " # define SRC_STRING " AAAAAAAAAA " static void goodG2B2 ( ) { char * data ; data = NULL ; if ( globalTrue ) { data = ( char * ) malloc ( ( 10 + 1 ) * sizeof ( char ) ) ; } { char source [ 10 + 1 ] = SRC_STRING ; strcpy ( data , source ) ; printLine ( data ) ; free ( data ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_10_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Null pointer passed as an argument to a ' nonnull ' parameter ------ strcpy ( data , source ) ; */ FalsePos
# include " std_testcase.h " # define SRC_STRING " AAAAAAAAAA " static int staticTrue = 1 ; static void goodG2B2 ( ) { char * data ; data = NULL ; if ( staticTrue ) { data = ( char * ) malloc ( ( 10 + 1 ) * sizeof ( char ) ) ; } { char source [ 10 + 1 ] = SRC_STRING ; memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; free ( data ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_05_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Null pointer passed as an argument to a ' nonnull ' parameter ------ memcpy ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; */ FalsePos
# include " std_testcase.h " static int staticFive = 5 ; static void goodG2B2 ( ) { char * data ; data = NULL ; if ( staticFive == 5 ) { data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; data [ 0 ] = ' \0 ' ; } { char source [ 100 ] ; memset ( source , ' C ' , 100 - 1 ) ; source [ 100 - 1 ] = ' \0 ' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = ' \0 ' ; printLine ( data ) ; free ( data ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Null pointer passed as an argument to a ' nonnull ' parameter ------ memcpy ( data , source , 100 * sizeof ( char ) ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { char * data ; data = NULL ; if ( globalFive == 5 ) { data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; data [ 0 ] = ' \0 ' ; } { char source [ 100 ] ; memset ( source , ' C ' , 100 - 1 ) ; source [ 100 - 1 ] = ' \0 ' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = ' \0 ' ; printLine ( data ) ; free ( data ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_14_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Null pointer passed as an argument to a ' nonnull ' parameter ------ memmove ( data , source , 100 * sizeof ( char ) ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { char * data ; data = NULL ; if ( globalTrue ) { data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; data [ 0 ] = ' \0 ' ; } { char source [ 100 ] ; memset ( source , ' C ' , 100 - 1 ) ; source [ 100 - 1 ] = ' \0 ' ; strncat ( data , source , 100 ) ; printLine ( data ) ; free ( data ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_10_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Size argument is greater than the free space in the destination buffer ------ strncat ( data , source , 100 ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { int64_t * data ; data = NULL ; if ( globalTrue ) { data = ( int64_t * ) malloc ( 100 * sizeof ( int64_t ) ) ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; free ( data ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_10_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Null pointer passed as an argument to a ' nonnull ' parameter ------ memmove ( data , source , 100 * sizeof ( int64_t ) ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { int64_t * data ; data = NULL ; if ( globalFive == 5 ) { data = ( int64_t * ) malloc ( 100 * sizeof ( int64_t ) ) ; } { int64_t source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int64_t ) ) ; printLongLongLine ( data [ 0 ] ) ; free ( data ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_14_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Null pointer passed as an argument to a ' nonnull ' parameter ------ memmove ( data , source , 100 * sizeof ( int64_t ) ) ; */ FalsePos
# include " std_testcase.h " static int staticTrue = 1 ; static void goodG2B2 ( ) { int * data ; data = NULL ; if ( staticTrue ) { data = ( int * ) malloc ( 100 * sizeof ( int ) ) ; } { int source [ 100 ] = { 0 } ; memmove ( data , source , 100 * sizeof ( int ) ) ; printIntLine ( data [ 0 ] ) ; free ( data ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_05_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Null pointer passed as an argument to a ' nonnull ' parameter ------ memmove ( data , source , 100 * sizeof ( int ) ) ; */ FalsePos
# include < wchar.h > static int staticFive = 5 ; static void goodG2B2 ( ) { char * data ; data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; if ( staticFive == 5 ) { memset ( data , ' A ' , 50 - 1 ) ; data [ 50 - 1 ] = ' \0 ' ; } { char dest [ 50 ] = " " ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = ' \0 ' ; printLine ( data ) ; free ( data ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_07_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Assigned value is garbage or undefined ------ dest [ i ] = data [ i ] ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { char * data ; data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; if ( GLOBAL_CONST_FIVE == 5 ) { memset ( data , ' A ' , 50 - 1 ) ; data [ 50 - 1 ] = ' \0 ' ; } { char dest [ 50 ] = " " ; size_t i , dataLen ; dataLen = strlen ( data ) ; for ( i = 0 ; i < dataLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 50 - 1 ] = ' \0 ' ; printLine ( data ) ; free ( data ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_13_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Assigned value is garbage or undefined ------ dest [ i ] = data [ i ] ; */ FalsePos
# include " std_testcase.h " # define SRC_STRING " AAAAAAAAAA " static int staticTrue = 1 ; static void goodG2B2 ( ) { char * data ; data = NULL ; if ( staticTrue ) { data = new char [ 10 + 1 ] ; } { char source [ 10 + 1 ] = SRC_STRING ; strcpy ( data , source ) ; printLine ( data ) ; delete [ ] data ; } } /* Warning description Null pointer passed as an argument to a ' nonnull ' parameter ------ strcpy ( data , source ) ; */ FalsePos
# include " std_testcase.h " # define SRC_STRING " AAAAAAAAAA " static void goodG2B2 ( ) { char * data ; data = NULL ; if ( GLOBAL_CONST_TRUE ) { data = new char [ 10 + 1 ] ; } { char source [ 10 + 1 ] = SRC_STRING ; memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; printLine ( data ) ; delete [ ] data ; } } /* Warning description Null pointer passed as an argument to a ' nonnull ' parameter ------ memmove ( data , source , ( strlen ( source ) + 1 ) * sizeof ( char ) ) ; */ FalsePos
# include " std_testcase.h " # define SRC_STRING " AAAAAAAAAA " static void goodG2B2 ( ) { char * data ; data = NULL ; if ( GLOBAL_CONST_TRUE ) { data = new char [ 10 + 1 ] ; } { char source [ 10 + 1 ] = SRC_STRING ; strncpy ( data , source , strlen ( source ) + 1 ) ; printLine ( data ) ; delete [ ] data ; } } /* Warning description Null pointer passed as an argument to a ' nonnull ' parameter ------ strncpy ( data , source , strlen ( source ) + 1 ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { char * data ; data = NULL ; if ( GLOBAL_CONST_FIVE == 5 ) { data = new char [ 100 ] ; data [ 0 ] = ' \0 ' ; } { size_t i ; char source [ 100 ] ; memset ( source , ' C ' , 100 - 1 ) ; source [ 100 - 1 ] = ' \0 ' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = ' \0 ' ; printLine ( data ) ; delete [ ] data ; } } /* Warning description Array access ( from variable ' data ' ) results in a null pointer dereference ------ data [ i ] = source [ i ] ; */ FalsePos
# include " std_testcase.h " static int staticTrue = 1 ; static void goodG2B2 ( ) { char * data ; data = NULL ; if ( staticTrue ) { data = new char [ 100 ] ; data [ 0 ] = ' \0 ' ; } { char source [ 100 ] ; memset ( source , ' C ' , 100 - 1 ) ; source [ 100 - 1 ] = ' \0 ' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = ' \0 ' ; printLine ( data ) ; delete [ ] data ; } } /* Warning description Null pointer passed as an argument to a ' nonnull ' parameter ------ memcpy ( data , source , 100 * sizeof ( char ) ) ; */ FalsePos
# include " std_testcase.h " static int staticFive = 5 ; static void goodG2B2 ( ) { int64_t * data ; data = NULL ; if ( staticFive == 5 ) { data = new int64_t [ 100 ] ; } { int64_t source [ 100 ] = { 0 } ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } printLongLongLine ( data [ 0 ] ) ; delete [ ] data ; } } } /* Warning description Array access ( from variable ' data ' ) results in a null pointer dereference ------ data [ i ] = source [ i ] ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { char * data ; data = NULL ; if ( globalFive == 5 ) { data = new char [ 100 ] ; data [ 0 ] = ' \0 ' ; } { char source [ 100 ] ; memset ( source , ' C ' , 100 - 1 ) ; source [ 100 - 1 ] = ' \0 ' ; strcat ( data , source ) ; printLine ( data ) ; delete [ ] data ; } } /* Warning description Null pointer passed as an argument to a ' nonnull ' parameter ------ strcat ( data , source ) ; */ FalsePos
# include " std_testcase.h " static int staticTrue = 1 ; static void goodG2B2 ( ) { char * data ; data = NULL ; if ( staticTrue ) { data = new char [ 100 ] ; data [ 0 ] = ' \0 ' ; } { char source [ 100 ] ; memset ( source , ' C ' , 100 - 1 ) ; source [ 100 - 1 ] = ' \0 ' ; strcpy ( data , source ) ; printLine ( data ) ; delete [ ] data ; } } /* Warning description Null pointer passed as an argument to a ' nonnull ' parameter ------ strcpy ( data , source ) ; */ FalsePos
# include " std_testcase.h " static int staticFive = 5 ; static void goodG2B2 ( ) { char * data ; data = NULL ; if ( staticFive == 5 ) { data = new char [ 100 ] ; data [ 0 ] = ' \0 ' ; } { char source [ 100 ] ; memset ( source , ' C ' , 100 - 1 ) ; source [ 100 - 1 ] = ' \0 ' ; strcpy ( data , source ) ; printLine ( data ) ; delete [ ] data ; } } /* Warning description Null pointer passed as an argument to a ' nonnull ' parameter ------ strcpy ( data , source ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { char * data ; data = NULL ; if ( globalFive == 5 ) { data = new char [ 100 ] ; data [ 0 ] = ' \0 ' ; } { char source [ 100 ] ; memset ( source , ' C ' , 100 - 1 ) ; source [ 100 - 1 ] = ' \0 ' ; strcpy ( data , source ) ; printLine ( data ) ; delete [ ] data ; } } /* Warning description Null pointer passed as an argument to a ' nonnull ' parameter ------ strcpy ( data , source ) ; */ FalsePos
# include " std_testcase.h " static void goodB2G2 ( ) { char * data ; char * dataBadBuffer = ( char * ) malloc ( sizeof ( OneIntClass ) ) ; if ( 1 ) { data = dataBadBuffer ; } if ( 1 ) { { OneIntClass * classOne = new ( data ) OneIntClass ; classOne -> intOne = 5 ; printIntLine ( classOne -> intOne ) ; free ( data ) ; } } } /* Warning description Result of ' malloc ' is converted to a pointer of type ' char ' , which is incompatible with sizeof operand type ' class OneIntClass ' ------ char * dataBadBuffer = ( char * ) malloc ( sizeof ( OneIntClass ) ) ; */ UnknownPos 
# include " std_testcase.h " static void goodB2G ( ) { char * data ; char * dataBadBuffer = ( char * ) malloc ( sizeof ( OneIntClass ) ) ; data = dataBadBuffer ; { char * dataCopy = data ; char * data = dataCopy ; { OneIntClass * classOne = new ( data ) OneIntClass ; classOne -> intOne = 5 ; printIntLine ( classOne -> intOne ) ; free ( data ) ; } } } /* Warning description Result of ' malloc ' is converted to a pointer of type ' char ' , which is incompatible with sizeof operand type ' class OneIntClass ' ------ char * dataBadBuffer = ( char * ) malloc ( sizeof ( OneIntClass ) ) ; */ /* Warning description Result of ' malloc ' is converted to a pointer of type ' char ' , which is incompatible with sizeof operand type ' class TwoIntsClass ' ------ char * dataGoodBuffer = ( char * ) malloc ( sizeof ( TwoIntsClass ) ) ; */ /* Warning description Potential leak of memory pointed to by ' dataGoodBuffer ' ------ data = dataBadBuffer ; */ UnknownPos 
# include " std_testcase.h " static void goodG2BSink ( char * data ) { { TwoIntsClass * classTwo = new ( data ) TwoIntsClass ; classTwo -> intOne = 5 ; classTwo -> intTwo = 10 ; printIntLine ( classTwo -> intOne ) ; free ( data ) ; } } static void goodG2B ( ) { char * data ; void ( * funcPtr ) ( char * ) = goodG2BSink ; char * dataGoodBuffer = ( char * ) malloc ( sizeof ( TwoIntsClass ) ) ; data = dataGoodBuffer ; funcPtr ( data ) ; } /* Warning description Result of ' malloc ' is converted to a pointer of type ' char ' , which is incompatible with sizeof operand type ' class TwoIntsClass ' ------ char * dataGoodBuffer = ( char * ) malloc ( sizeof ( TwoIntsClass ) ) ; */ UnknownPos 
# include " std_testcase.h " void goodB2GSink_b ( char * data ) ; static void goodB2G ( ) { char * data ; char * dataBadBuffer = ( char * ) malloc ( sizeof ( OneIntClass ) ) ; data = dataBadBuffer ; goodB2GSink_b ( data ) ; } /* Warning description Result of ' malloc ' is converted to a pointer of type ' char ' , which is incompatible with sizeof operand type ' class OneIntClass ' char * dataBadBuffer = ( char * ) malloc ( sizeof ( OneIntClass ) ) ; */ UnknownPos 
# include " std_testcase.h " void goodB2GSink ( void * dataVoidPtr ) ; static void goodB2G ( ) { char * data ; char * dataBadBuffer = ( char * ) malloc ( sizeof ( OneIntClass ) ) ; data = dataBadBuffer ; goodB2GSink ( & data ) ; } /* Warning description Result of ' malloc ' is converted to a pointer of type ' char ' , which is incompatible with sizeof operand type ' class OneIntClass ' char * dataBadBuffer = ( char * ) malloc ( sizeof ( OneIntClass ) ) ; */ UnknownPos 
# include " std_testcase.h " static void goodG2B2 ( ) { double * data ; data = NULL ; if ( globalTrue ) { data = ( double * ) malloc ( sizeof ( * data ) ) ; * data = 1.7E300 ; } printDoubleLine ( * data ) ; free ( data ) ; } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE122_Heap_Based_Buffer_Overflow__sizeof_double_10_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Dereference of null pointer ( loaded from variable ' data ' ) ------ printDoubleLine ( * data ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; memset ( dataBuffer , ' A ' , 100 - 1 ) ; dataBuffer [ 100 - 1 ] = ' \0 ' ; if ( globalFive == 5 ) { data = dataBuffer ; } { char source [ 100 ] ; memset ( source , ' C ' , 100 - 1 ) ; source [ 100 - 1 ] = ' \0 ' ; strcpy ( data , source ) ; printLine ( data ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE124_Buffer_Underwrite__char_alloca_cpy_14_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Function call argument is an uninitialized value ------ strcpy ( data , source ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { char * data ; char * dataBuffer = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; memset ( dataBuffer , ' A ' , 100 - 1 ) ; dataBuffer [ 100 - 1 ] = ' \0 ' ; if ( globalFive == 5 ) { data = dataBuffer ; } { char source [ 100 ] ; memset ( source , ' C ' , 100 - 1 ) ; source [ 100 - 1 ] = ' \0 ' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = ' \0 ' ; printLine ( data ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE124_Buffer_Underwrite__char_alloca_ncpy_14_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Function call argument is an uninitialized value ------ strncpy ( data , source , 100 - 1 ) ; */ FalsePos
static void goodG2B2 ( ) { char * data ; char dataBuffer [ 100 ] ; memset ( dataBuffer , ' A ' , 100 - 1 ) ; dataBuffer [ 100 - 1 ] = ' \0 ' ; if ( globalReturnsTrue ( ) ) { data = dataBuffer ; } { char source [ 100 ] ; memset ( source , ' C ' , 100 - 1 ) ; source [ 100 - 1 ] = ' \0 ' ; strcpy ( data , source ) ; printLine ( data ) ; } } /* Warning description Function call argument is an uninitialized value ------ strcpy ( data , source ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { char * data ; char dataBuffer [ 100 ] ; memset ( dataBuffer , ' A ' , 100 - 1 ) ; dataBuffer [ 100 - 1 ] = ' \0 ' ; if ( GLOBAL_CONST_FIVE == 5 ) { data = dataBuffer ; } { size_t i ; char source [ 100 ] ; memset ( source , ' C ' , 100 - 1 ) ; source [ 100 - 1 ] = ' \0 ' ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = source [ i ] ; } data [ 100 - 1 ] = ' \0 ' ; printLine ( data ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE124_Buffer_Underwrite__char_declare_loop_13_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Dereference of undefined pointer value ------ data [ i ] = source [ i ] ; */ FalsePos
# include " std_testcase.h " static int staticTrue = 1 ; static void goodG2B2 ( ) { char * data ; data = NULL ; if ( staticTrue ) { { char * dataBuffer = ( char * ) malloc ( 100 * sizeof ( char ) ) ; memset ( dataBuffer , ' A ' , 100 - 1 ) ; dataBuffer [ 100 - 1 ] = ' \0 ' ; data = dataBuffer ; } } { char source [ 100 ] ; memset ( source , ' C ' , 100 - 1 ) ; source [ 100 - 1 ] = ' \0 ' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = ' \0 ' ; printLine ( data ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE124_Buffer_Underwrite__malloc_char_memmove_05_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Potential leak of memory pointed to by ' data ' ------ } */ TruePos
# include " std_testcase.h " static void goodG2B2 ( ) { char * data ; data = NULL ; if ( globalTrue ) { { char * dataBuffer = ( char * ) malloc ( 100 * sizeof ( char ) ) ; memset ( dataBuffer , ' A ' , 100 - 1 ) ; dataBuffer [ 100 - 1 ] = ' \0 ' ; data = dataBuffer ; } } { char source [ 100 ] ; memset ( source , ' C ' , 100 - 1 ) ; source [ 100 - 1 ] = ' \0 ' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = ' \0 ' ; printLine ( data ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE124_Buffer_Underwrite__malloc_char_memmove_10_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Null pointer passed as an argument to a ' nonnull ' parameter ------ memmove ( data , source , 100 * sizeof ( char ) ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { char * data ; data = NULL ; if ( globalReturnsTrue ( ) ) { { char * dataBuffer = ( char * ) malloc ( 100 * sizeof ( char ) ) ; memset ( dataBuffer , ' A ' , 100 - 1 ) ; dataBuffer [ 100 - 1 ] = ' \0 ' ; data = dataBuffer ; } } { char source [ 100 ] ; memset ( source , ' C ' , 100 - 1 ) ; source [ 100 - 1 ] = ' \0 ' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = ' \0 ' ; printLine ( data ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE124_Buffer_Underwrite__malloc_char_memmove_11_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Potential leak of memory pointed to by ' data ' ------ } */ TruePos
# include " std_testcase.h " static void goodG2B ( ) { int h ; char * data ; data = NULL ; for ( h = 0 ; h < 1 ; h ++ ) { { char * dataBuffer = ( char * ) malloc ( 100 * sizeof ( char ) ) ; memset ( dataBuffer , ' A ' , 100 - 1 ) ; dataBuffer [ 100 - 1 ] = ' \0 ' ; data = dataBuffer ; } } { char source [ 100 ] ; memset ( source , ' C ' , 100 - 1 ) ; source [ 100 - 1 ] = ' \0 ' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = ' \0 ' ; printLine ( data ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE124_Buffer_Underwrite__malloc_char_memmove_17_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Potential leak of memory pointed to by ' data ' ------ } */ TruePos
# include " std_testcase.h " static void goodG2B ( ) { char * data ; char * & dataRef = data ; data = NULL ; { char * dataBuffer = ( char * ) malloc ( 100 * sizeof ( char ) ) ; memset ( dataBuffer , ' A ' , 100 - 1 ) ; dataBuffer [ 100 - 1 ] = ' \0 ' ; data = dataBuffer ; } { char * data = dataRef ; { char source [ 100 ] ; memset ( source , ' C ' , 100 - 1 ) ; source [ 100 - 1 ] = ' \0 ' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = ' \0 ' ; printLine ( data ) ; } } } /* Warning description Potential leak of memory pointed to by ' data ' ------ } */ TruePos
# include " std_testcase.h " void CWE124_Buffer_Underwrite__malloc_char_memmove_41_goodG2BSink ( char * data ) { { char source [ 100 ] ; memset ( source , ' C ' , 100 - 1 ) ; source [ 100 - 1 ] = ' \0 ' ; memmove ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = ' \0 ' ; printLine ( data ) ; } } static void goodG2B ( ) { char * data ; data = NULL ; { char * dataBuffer = ( char * ) malloc ( 100 * sizeof ( char ) ) ; memset ( dataBuffer , ' A ' , 100 - 1 ) ; dataBuffer [ 100 - 1 ] = ' \0 ' ; data = dataBuffer ; } CWE124_Buffer_Underwrite__malloc_char_memmove_41_goodG2BSink ( data ) ; } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE124_Buffer_Underwrite__malloc_char_memmove_41_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Potential leak of memory pointed to by ' data ' ------ } */ TruePos
# include " std_testcase.h " static int staticTrue = 1 ; static void goodG2B2 ( ) { char * data ; data = NULL ; if ( staticTrue ) { { char * dataBuffer = ( char * ) malloc ( 100 * sizeof ( char ) ) ; memset ( dataBuffer , ' A ' , 100 - 1 ) ; dataBuffer [ 100 - 1 ] = ' \0 ' ; data = dataBuffer ; } } { char source [ 100 ] ; memset ( source , ' C ' , 100 - 1 ) ; source [ 100 - 1 ] = ' \0 ' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = ' \0 ' ; printLine ( data ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE124_Buffer_Underwrite__malloc_char_ncpy_05_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Potential leak of memory pointed to by ' data ' ------ } */ TruePos
# include " std_testcase.h " static void goodG2B2 ( ) { char * data ; data = NULL ; if ( globalFive == 5 ) { { char * dataBuffer = ( char * ) malloc ( 100 * sizeof ( char ) ) ; memset ( dataBuffer , ' A ' , 100 - 1 ) ; dataBuffer [ 100 - 1 ] = ' \0 ' ; data = dataBuffer ; } } { char source [ 100 ] ; memset ( source , ' C ' , 100 - 1 ) ; source [ 100 - 1 ] = ' \0 ' ; strncpy ( data , source , 100 - 1 ) ; data [ 100 - 1 ] = ' \0 ' ; printLine ( data ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE124_Buffer_Underwrite__malloc_char_ncpy_14_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Null pointer passed as an argument to a ' nonnull ' parameter ------ strncpy ( data , source , 100 - 1 ) ; */ FalsePos
# include " std_testcase.h " static int staticFive = 5 ; static void goodG2B2 ( ) { char * data ; data = NULL ; if ( staticFive == 5 ) { { char * dataBuffer = new char [ 100 ] ; memset ( dataBuffer , ' A ' , 100 - 1 ) ; dataBuffer [ 100 - 1 ] = ' \0 ' ; data = dataBuffer ; } } { char source [ 100 ] ; memset ( source , ' C ' , 100 - 1 ) ; source [ 100 - 1 ] = ' \0 ' ; memcpy ( data , source , 100 * sizeof ( char ) ) ; data [ 100 - 1 ] = ' \0 ' ; printLine ( data ) ; } } /* Warning description Null pointer passed as an argument to a ' nonnull ' parameter ------ memcpy ( data , source , 100 * sizeof ( char ) ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { char * data ; char dataBadBuffer [ 50 ] ; char dataGoodBuffer [ 100 ] ; memset ( dataBadBuffer , ' A ' , 50 - 1 ) ; dataBadBuffer [ 50 - 1 ] = ' \0 ' ; memset ( dataGoodBuffer , ' A ' , 100 - 1 ) ; dataGoodBuffer [ 100 - 1 ] = ' \0 ' ; if ( globalFive == 5 ) { data = dataGoodBuffer ; } { size_t i , destLen ; char dest [ 100 ] ; memset ( dest , ' C ' , 100 - 1 ) ; dest [ 100 - 1 ] = ' \0 ' ; destLen = strlen ( dest ) ; for ( i = 0 ; i < destLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 100 - 1 ] = ' \0 ' ; printLine ( dest ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE126_Buffer_Overread__char_declare_loop_14_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Dereference of undefined pointer value ------ dest [ i ] = data [ i ] ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { char * data ; data = NULL ; if ( GLOBAL_CONST_TRUE ) { data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; memset ( data , ' A ' , 100 - 1 ) ; data [ 100 - 1 ] = ' \0 ' ; } { size_t i , destLen ; char dest [ 100 ] ; memset ( dest , ' C ' , 100 - 1 ) ; dest [ 100 - 1 ] = ' \0 ' ; destLen = strlen ( dest ) ; for ( i = 0 ; i < destLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 100 - 1 ] = ' \0 ' ; printLine ( dest ) ; free ( data ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE126_Buffer_Overread__malloc_char_loop_09_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Array access ( from variable ' data ' ) results in a null pointer dereference ------ dest [ i ] = data [ i ] ; */ FalsePos
# include " std_testcase.h " static int staticTrue = 1 ; static void goodG2B2 ( ) { char * data ; data = NULL ; if ( staticTrue ) { data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; memset ( data , ' A ' , 100 - 1 ) ; data [ 100 - 1 ] = ' \0 ' ; } { char dest [ 100 ] ; memset ( dest , ' C ' , 100 - 1 ) ; dest [ 100 - 1 ] = ' \0 ' ; memcpy ( dest , data , strlen ( dest ) * sizeof ( char ) ) ; dest [ 100 - 1 ] = ' \0 ' ; printLine ( dest ) ; free ( data ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE126_Buffer_Overread__malloc_char_memcpy_05_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Null pointer passed as an argument to a ' nonnull ' parameter ------ memcpy ( dest , data , strlen ( dest ) * sizeof ( char ) ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { char * data ; data = NULL ; if ( globalFive == 5 ) { data = new char [ 100 ] ; memset ( data , ' A ' , 100 - 1 ) ; data [ 100 - 1 ] = ' \0 ' ; } { size_t i , destLen ; char dest [ 100 ] ; memset ( dest , ' C ' , 100 - 1 ) ; dest [ 100 - 1 ] = ' \0 ' ; destLen = strlen ( dest ) ; for ( i = 0 ; i < destLen ; i ++ ) { dest [ i ] = data [ i ] ; } dest [ 100 - 1 ] = ' \0 ' ; printLine ( dest ) ; delete [ ] data ; } } /* Warning description Array access ( from variable ' data ' ) results in a null pointer dereference ------ dest [ i ] = data [ i ] ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { char * data ; char dataBuffer [ 100 ] ; memset ( dataBuffer , ' A ' , 100 - 1 ) ; dataBuffer [ 100 - 1 ] = ' \0 ' ; if ( globalFive == 5 ) { data = dataBuffer ; } { char dest [ 100 * 2 ] ; memset ( dest , ' C ' , 100 * 2 - 1 ) ; dest [ 100 * 2 - 1 ] = ' \0 ' ; strcpy ( dest , data ) ; printLine ( dest ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE127_Buffer_Underread__char_declare_cpy_14_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Function call argument is an uninitialized value ------ strcpy ( dest , data ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { char * data ; data = NULL ; if ( globalReturnsTrue ( ) ) { { char * dataBuffer = ( char * ) malloc ( 100 * sizeof ( char ) ) ; memset ( dataBuffer , ' A ' , 100 - 1 ) ; dataBuffer [ 100 - 1 ] = ' \0 ' ; data = dataBuffer ; } } { char dest [ 100 ] ; memset ( dest , ' C ' , 100 - 1 ) ; dest [ 100 - 1 ] = ' \0 ' ; memcpy ( dest , data , 100 * sizeof ( char ) ) ; dest [ 100 - 1 ] = ' \0 ' ; printLine ( dest ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE127_Buffer_Underread__malloc_char_memcpy_11_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Potential leak of memory pointed to by ' data ' ------ dest [ 100 - 1 ] = ' */ TruePos
# include " std_testcase.h " static int goodG2B2Static = 0 ; static char * goodG2B2Source ( char * data ) { if ( goodG2B2Static ) { { char * dataBuffer = ( char * ) malloc ( 100 * sizeof ( char ) ) ; memset ( dataBuffer , ' A ' , 100 - 1 ) ; dataBuffer [ 100 - 1 ] = ' \0 ' ; data = dataBuffer ; } } return data ; } static void goodG2B2 ( ) { char * data ; data = NULL ; goodG2B2Static = 1 ; data = goodG2B2Source ( data ) ; { char dest [ 100 ] ; memset ( dest , ' C ' , 100 - 1 ) ; dest [ 100 - 1 ] = ' \0 ' ; memmove ( dest , data , 100 * sizeof ( char ) ) ; dest [ 100 - 1 ] = ' \0 ' ; printLine ( dest ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE127_Buffer_Underread__malloc_char_memmove_21_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Potential leak of memory pointed to by ' data ' ------ dest [ 100 - 1 ] = ' */ TruePos
# include " std_testcase.h " static void goodG2B ( ) { char * data ; data = NULL ; goto source ; source: { char * dataBuffer = ( char * ) malloc ( 100 * sizeof ( char ) ) ; memset ( dataBuffer , ' A ' , 100 - 1 ) ; dataBuffer [ 100 - 1 ] = ' \0 ' ; data = dataBuffer ; } { char dest [ 100 ] ; memset ( dest , ' C ' , 100 - 1 ) ; dest [ 100 - 1 ] = ' \0 ' ; strncpy ( dest , data , strlen ( dest ) ) ; dest [ 100 - 1 ] = ' \0 ' ; printLine ( dest ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE127_Buffer_Underread__malloc_char_ncpy_18_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Potential leak of memory pointed to by ' data ' ------ dest [ 100 - 1 ] = ' */ TruePos
# include " std_testcase.h " static int staticTrue = 1 ; static void goodG2B2 ( ) { char * data ; data = NULL ; if ( staticTrue ) { { char * dataBuffer = new char [ 100 ] ; memset ( dataBuffer , ' A ' , 100 - 1 ) ; dataBuffer [ 100 - 1 ] = ' \0 ' ; data = dataBuffer ; } } { char dest [ 100 * 2 ] ; memset ( dest , ' C ' , 100 * 2 - 1 ) ; dest [ 100 * 2 - 1 ] = ' \0 ' ; strcpy ( dest , data ) ; printLine ( dest ) ; } } /* Warning description Null pointer passed as an argument to a ' nonnull ' parameter ------ strcpy ( dest , data ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { char * data ; data = NULL ; if ( GLOBAL_CONST_TRUE ) { { char * dataBuffer = new char [ 100 ] ; memset ( dataBuffer , ' A ' , 100 - 1 ) ; dataBuffer [ 100 - 1 ] = ' \0 ' ; data = dataBuffer ; } } { char dest [ 100 ] ; memset ( dest , ' C ' , 100 - 1 ) ; dest [ 100 - 1 ] = ' \0 ' ; memcpy ( dest , data , 100 * sizeof ( char ) ) ; dest [ 100 - 1 ] = ' \0 ' ; printLine ( dest ) ; } } /* Warning description Null pointer passed as an argument to a ' nonnull ' parameter ------ memcpy ( dest , data , 100 * sizeof ( char ) ) ; */ FalsePos
# include " std_testcase.h " static int staticFive = 5 ; static void goodG2B2 ( ) { char * data ; data = NULL ; if ( staticFive == 5 ) { { char * dataBuffer = new char [ 100 ] ; memset ( dataBuffer , ' A ' , 100 - 1 ) ; dataBuffer [ 100 - 1 ] = ' \0 ' ; data = dataBuffer ; } } { char dest [ 100 ] ; memset ( dest , ' C ' , 100 - 1 ) ; dest [ 100 - 1 ] = ' \0 ' ; strncpy ( dest , data , strlen ( dest ) ) ; dest [ 100 - 1 ] = ' \0 ' ; printLine ( dest ) ; } } /* Warning description Null pointer passed as an argument to a ' nonnull ' parameter ------ strncpy ( dest , data , strlen ( dest ) ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { char * data ; data = NULL ; if ( globalFive == 5 ) { { char * dataBuffer = new char [ 100 ] ; memset ( dataBuffer , ' A ' , 100 - 1 ) ; dataBuffer [ 100 - 1 ] = ' \0 ' ; data = dataBuffer ; } } { char dest [ 100 ] ; memset ( dest , ' C ' , 100 - 1 ) ; dest [ 100 - 1 ] = ' \0 ' ; strncpy ( dest , data , strlen ( dest ) ) ; dest [ 100 - 1 ] = ' \0 ' ; printLine ( dest ) ; } } /* Warning description Null pointer passed as an argument to a ' nonnull ' parameter ------ strncpy ( dest , data , strlen ( dest ) ) ; */ FalsePos
static void goodG2B2 ( ) { short data ; data = 0 ; if ( globalReturnsTrue ( ) ) { data = 100 - 1 ; } if ( data < 100 ) { char * dataBuffer = ( char * ) malloc ( data ) ; memset ( dataBuffer , ' A ' , data - 1 ) ; dataBuffer [ data - 1 ] = ' \0 ' ; printLine ( dataBuffer ) ; free ( dataBuffer ) ; } } /* Warning description Call to ' malloc ' has an allocation size of 0 bytes ------ char * dataBuffer = ( char * ) malloc ( data ) ; */ FalsePos
static int staticFive = 5 ; static void goodG2B2 ( ) { short data ; data = 0 ; if ( staticFive == 5 ) { data = 100 - 1 ; } if ( data < 100 ) { char * dataBuffer = ( char * ) malloc ( data ) ; memset ( dataBuffer , ' A ' , data - 1 ) ; dataBuffer [ data - 1 ] = ' \0 ' ; printLine ( dataBuffer ) ; free ( dataBuffer ) ; } } /* Warning description Call to ' malloc ' has an allocation size of 0 bytes ------ char * dataBuffer = ( char * ) malloc ( data ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { short data ; data = 0 ; if ( GLOBAL_CONST_TRUE ) { data = 100 - 1 ; } if ( data < 100 ) { char * dataBuffer = ( char * ) malloc ( data ) ; memset ( dataBuffer , ' A ' , data - 1 ) ; dataBuffer [ data - 1 ] = ' \0 ' ; printLine ( dataBuffer ) ; free ( dataBuffer ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE194_Unexpected_Sign_Extension__negative_malloc_09_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Call to ' malloc ' has an allocation size of 0 bytes ------ char * dataBuffer = ( char * ) malloc ( data ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { short data ; data = 0 ; if ( GLOBAL_CONST_TRUE ) { data = 100 - 1 ; } if ( data < 100 ) { char * dataBuffer = ( char * ) malloc ( data ) ; memset ( dataBuffer , ' A ' , data - 1 ) ; dataBuffer [ data - 1 ] = ' \0 ' ; printLine ( dataBuffer ) ; free ( dataBuffer ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE194_Unexpected_Sign_Extension__rand_malloc_09_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Call to ' malloc ' has an allocation size of 0 bytes ------ char * dataBuffer = ( char * ) malloc ( data ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { short data ; data = 0 ; if ( globalFive == 5 ) { data = 100 - 1 ; } if ( data < 100 ) { char * dataBuffer = ( char * ) malloc ( data ) ; memset ( dataBuffer , ' A ' , data - 1 ) ; dataBuffer [ data - 1 ] = ' \0 ' ; printLine ( dataBuffer ) ; free ( dataBuffer ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE194_Unexpected_Sign_Extension__rand_malloc_14_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Call to ' malloc ' has an allocation size of 0 bytes ------ char * dataBuffer = ( char * ) malloc ( data ) ; */ FalsePos
# include " std_testcase.h " # define INVALID_SOCKET - 1 # define SOCKET_ERROR - 1 # define CLOSE_SOCKET close # define SOCKET int # define TCP_PORT 27015 # define IP_ADDRESS " 127.0.0.1 " # define CHAR_ARRAY_SIZE ( 3 * sizeof ( data ) + 2 ) static void goodG2B2 ( ) { int data ; data = - 1 ; if ( GLOBAL_CONST_FIVE == 5 ) { data = 100 - 1 ; } { char source [ 100 ] ; char dest [ 100 ] = " " ; memset ( source , ' A ' , 100 - 1 ) ; source [ 100 - 1 ] = ' \0 ' ; if ( data < 100 ) { strncpy ( dest , source , data ) ; dest [ data ] = ' \0 ' ; } printLine ( dest ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE195_Signed_to_Unsigned_Conversion_Error__connect_socket_strncpy_13_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Size argument is greater than the length of the destination buffer ------ strncpy ( dest , source , data ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { int data ; data = - 1 ; if ( globalTrue ) { data = 100 - 1 ; } { char source [ 100 ] ; char dest [ 100 ] = " " ; memset ( source , ' A ' , 100 - 1 ) ; source [ 100 - 1 ] = ' \0 ' ; if ( data < 100 ) { strncpy ( dest , source , data ) ; dest [ data ] = ' \0 ' ; } printLine ( dest ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE195_Signed_to_Unsigned_Conversion_Error__rand_strncpy_10_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Size argument is greater than the length of the destination buffer ------ strncpy ( dest , source , data ) ; */ FalsePos
# include " std_testcase.h " # define FOPEN fopen static char * goodG2BData ; static void goodG2BSink ( ) { char * data = goodG2BData ; { FILE * pFile = NULL ; pFile = FOPEN ( data , " wb + " ) ; if ( pFile != NULL ) { fclose ( pFile ) ; } } } static void goodG2B ( ) { char * data ; char dataBuffer [ FILENAME_MAX ] = " " ; data = dataBuffer ; strcat ( data , " /tmp/file.txt " ) ; goodG2BData = data ; goodG2BSink ( ) ; } void good ( ) { goodG2B ( ) ; } /* Warning description Address of stack memory associated with local variable ' dataBuffer ' is still referred to by the global variable ' goodG2BData ' upon returning to the caller. This will be a dangling reference ------ goodG2BSink ( ) ; */ FalsePos
# include " std_testcase.h " static int staticTrue = 1 ; static void goodB2G2 ( ) { int64_t * data ; data = NULL ; if ( staticTrue ) { data = ( int64_t * ) calloc ( 100 , sizeof ( int64_t ) ) ; data [ 0 ] = 5LL ; printLongLongLine ( data [ 0 ] ) ; } if ( staticTrue ) { free ( data ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE401_Memory_Leak__int64_t_calloc_05_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Potential leak of memory pointed to by ' data ' ------ } */ FalsePos
# include " std_testcase.h " static void goodB2G2 ( ) { int64_t * data ; data = NULL ; if ( globalFive == 5 ) { data = ( int64_t * ) malloc ( 100 * sizeof ( int64_t ) ) ; data [ 0 ] = 5LL ; printLongLongLine ( data [ 0 ] ) ; } if ( globalFive == 5 ) { free ( data ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE401_Memory_Leak__int64_t_malloc_14_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Potential leak of memory pointed to by ' data ' ------ } */ FalsePos
# include < wchar.h > static void goodB2G2 ( ) { int * data ; data = NULL ; if ( globalReturnsTrue ( ) ) { data = ( int * ) malloc ( 100 * sizeof ( int ) ) ; data [ 0 ] = 5 ; printIntLine ( data [ 0 ] ) ; } if ( globalReturnsTrue ( ) ) { free ( data ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE401_Memory_Leak__int_malloc_11_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Potential leak of memory pointed to by ' data ' ------ } */ FalsePos
# include " std_testcase.h " static TwoIntsClass * goodG2BData ; static TwoIntsClass * goodB2GData ; static void goodG2BSink ( ) { ; } static void goodG2B ( ) { TwoIntsClass * data ; data = NULL ; TwoIntsClass dataGoodBuffer ; data = & dataGoodBuffer ; data -> intOne = 0 ; data -> intTwo = 0 ; printIntLine ( data -> intOne ) ; printIntLine ( data -> intTwo ) ; goodG2BData = data ; goodG2BSink ( ) ; } static void goodB2GSink ( ) { TwoIntsClass * data = goodB2GData ; delete data ; } static void goodB2G ( ) { TwoIntsClass * data ; data = NULL ; data = new TwoIntsClass ; data -> intOne = 0 ; data -> intTwo = 0 ; printIntLine ( data -> intOne ) ; printIntLine ( data -> intTwo ) ; goodB2GData = data ; goodB2GSink ( ) ; } void good ( ) { goodG2B ( ) ; goodB2G ( ) ; } /* Warning description Address of stack memory associated with local variable ' dataGoodBuffer ' is still referred to by the global variable ' goodG2BData ' upon returning to the caller. This will be a dangling reference ------ goodG2BSink ( ) ; */ FalsePos
# include " std_testcase.h " static void goodB2G2 ( ) { char * data ; data = NULL ; if ( globalReturnsTrue ( ) ) { { char myString [ ] = " myString " ; data = strdup ( myString ) ; printLine ( data ) ; } } if ( globalReturnsTrue ( ) ) { free ( data ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE401_Memory_Leak__strdup_char_11_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Potential leak of memory pointed to by ' data ' ------ } */ FalsePos
# include " std_testcase.h " static void goodB2G1 ( ) { struct _twoIntsStruct * data ; data = NULL ; if ( GLOBAL_CONST_TRUE ) { data = ( struct _twoIntsStruct * ) calloc ( 100 , sizeof ( struct _twoIntsStruct ) ) ; data [ 0 ] .intOne = 0 ; data [ 0 ] .intTwo = 0 ; printStructLine ( ( twoIntsStruct * ) & data [ 0 ] ) ; } if ( GLOBAL_CONST_FALSE ) { printLine ( " Benign , fixed string " ) ; } else { free ( data ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE401_Memory_Leak__struct_twoIntsStruct_calloc_09_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Potential leak of memory pointed to by ' data ' ------ printLine ( " Benign , fixed string " ) ; */ FalsePos
# include " std_testcase.h " static void goodB2G1 ( ) { struct _twoIntsStruct * data ; data = NULL ; if ( globalFive == 5 ) { data = ( struct _twoIntsStruct * ) malloc ( 100 * sizeof ( struct _twoIntsStruct ) ) ; data [ 0 ] .intOne = 0 ; data [ 0 ] .intTwo = 0 ; printStructLine ( ( twoIntsStruct * ) & data [ 0 ] ) ; } if ( globalFive != 5 ) { printLine ( " Benign , fixed string " ) ; } else { free ( data ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE401_Memory_Leak__struct_twoIntsStruct_malloc_14_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Potential leak of memory pointed to by ' data ' ------ printLine ( " Benign , fixed string " ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B1 ( ) { int * data ; data = NULL ; if ( GLOBAL_CONST_FALSE ) { printLine ( " Benign , fixed string " ) ; } else { data = ( int * ) malloc ( 100 * sizeof ( int ) ) ; } if ( GLOBAL_CONST_TRUE ) { free ( data ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE415_Double_Free__malloc_free_int_09_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Potential leak of memory pointed to by ' data ' ------ } */ FalsePos
# include < wchar.h > typedef union { int * unionFirst ; int * unionSecond ; } CWE415_Double_Free__malloc_free_int_34_unionType ; static void goodG2B ( ) { int * data ; CWE415_Double_Free__malloc_free_int_34_unionType myUnion ; data = NULL ; data = ( int * ) malloc ( 100 * sizeof ( int ) ) ; myUnion.unionFirst = data ; { int * data = myUnion.unionSecond ; free ( data ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE415_Double_Free__malloc_free_int_34_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Potential leak of memory pointed to by ' myUnion.unionFirst ' ------ int * data = myUnion.unionSecond ; */ TruePos
# include " std_testcase.h " static void goodG2B1 ( ) { long * data ; data = NULL ; if ( GLOBAL_CONST_FALSE ) { printLine ( " Benign , fixed string " ) ; } else { data = ( long * ) malloc ( 100 * sizeof ( long ) ) ; } if ( GLOBAL_CONST_TRUE ) { free ( data ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE415_Double_Free__malloc_free_long_09_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Potential leak of memory pointed to by ' data ' ------ } */ FalsePos
# include " std_testcase.h " static void goodB2GSink ( twoIntsStruct * data ) { ; } static void goodB2G ( ) { twoIntsStruct * data ; void ( * funcPtr ) ( twoIntsStruct * ) = goodB2GSink ; data = NULL ; data = ( twoIntsStruct * ) malloc ( 100 * sizeof ( twoIntsStruct ) ) ; free ( data ) ; funcPtr ( data ) ; } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE415_Double_Free__malloc_free_struct_44_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Use of memory after it is freed ------ funcPtr ( data ) ; */ FalsePos
# include " std_testcase.h " static void goodB2G ( ) { twoIntsStruct * data ; data = NULL ; data = ( twoIntsStruct * ) malloc ( 100 * sizeof ( twoIntsStruct ) ) ; free ( data ) ; CWE415_Double_Free__malloc_free_struct_53b_goodB2GSink ( data ) ; } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE415_Double_Free__malloc_free_struct_53_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Use of memory after it is freed ------ CWE415_Double_Free__malloc_free_struct_53b_goodB2GSink ( data ) ; */ UnknownPos 
# include " std_testcase.h " void goodB2GSink_b ( int64_t * data ) ; static void goodB2G ( ) { int64_t * data ; data = NULL ; data = new int64_t ; delete data ; goodB2GSink_b ( data ) ; } /* Warning description Use of memory after it is freed ------ goodB2GSink_b ( data ) ; */ UnknownPos 
# include < wchar.h > void goodB2GSink ( int * data ) ; static void goodB2G ( ) { int * data ; void ( * funcPtr ) ( int * ) = goodB2GSink ; data = NULL ; data = new int ; delete data ; funcPtr ( data ) ; } /* Warning description Use of memory after it is freed ------ funcPtr ( data ) ; */ UnknownPos 
# include < wchar.h > static void goodB2GSink ( long * data ) { ; } static void goodB2G ( ) { long * data ; data = NULL ; data = new long ; delete data ; goodB2GSink ( data ) ; } /* Warning description Use of memory after it is freed ------ goodB2GSink ( data ) ; */ FalsePos
# include " std_testcase.h " void goodB2GSink_b ( twoIntsStruct * data ) ; static void goodB2G ( ) { twoIntsStruct * data ; data = NULL ; data = new twoIntsStruct ; delete data ; goodB2GSink_b ( data ) ; } /* Warning description Use of memory after it is freed ------ goodB2GSink_b ( data ) ; */ UnknownPos 
# include " std_testcase.h " static int staticTrue = 1 ; static void goodG2B2 ( ) { char * data ; data = NULL ; if ( staticTrue ) { data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; memset ( data , ' A ' , 100 - 1 ) ; data [ 100 - 1 ] = ' \0 ' ; } if ( staticTrue ) { printLine ( data ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE416_Use_After_Free__malloc_free_char_05_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Potential leak of memory pointed to by ' data ' ------ } */ TruePos
# include " std_testcase.h " static int staticReturnsTrue ( ) { return 1 ; } static void goodG2B2 ( ) { char * data ; data = NULL ; if ( staticReturnsTrue ( ) ) { data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; memset ( data , ' A ' , 100 - 1 ) ; data [ 100 - 1 ] = ' \0 ' ; } if ( staticReturnsTrue ( ) ) { printLine ( data ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE416_Use_After_Free__malloc_free_char_08_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Potential leak of memory pointed to by ' data ' ------ } */ TruePos
# include " std_testcase.h " static void goodG2B1 ( ) { int64_t * data ; data = NULL ; if ( globalFive != 5 ) { printLine ( " Benign , fixed string " ) ; } else { data = ( int64_t * ) malloc ( 100 * sizeof ( int64_t ) ) ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { data [ i ] = 5LL ; } } } if ( globalFive == 5 ) { printLongLongLine ( data [ 0 ] ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE416_Use_After_Free__malloc_free_int64_t_14_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Array access ( from variable ' data ' ) results in a null pointer dereference ------ printLongLongLine ( data [ 0 ] ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B1 ( ) { long * data ; data = NULL ; if ( GLOBAL_CONST_FALSE ) { printLine ( " Benign , fixed string " ) ; } else { data = new long ; * data = 5L ; } if ( GLOBAL_CONST_TRUE ) { printLongLine ( * data ) ; } } /* Warning description Dereference of null pointer ( loaded from variable ' data ' ) ------ printLongLine ( * data ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { double * data ; data = ( double * ) ALLOCA ( 10 * sizeof ( double ) ) ; if ( globalReturnsTrue ( ) ) { { int i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = ( double ) i ; } } } if ( globalReturnsTrue ( ) ) { { int i ; for ( i = 0 ; i < 10 ; i ++ ) { printDoubleLine ( data [ i ] ) ; } } } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE457_Use_of_Uninitialized_Variable__double_array_alloca_no_init_11_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Function call argument is an uninitialized value ------ printDoubleLine ( data [ i ] ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { double * data ; data = ( double * ) ALLOCA ( 10 * sizeof ( double ) ) ; if ( globalReturnsTrue ( ) ) { { int i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = ( double ) i ; } } } if ( globalReturnsTrue ( ) ) { { int i ; for ( i = 0 ; i < 10 ; i ++ ) { printDoubleLine ( data [ i ] ) ; } } } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE457_Use_of_Uninitialized_Variable__double_array_alloca_partial_init_11_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Function call argument is an uninitialized value ------ printDoubleLine ( data [ i ] ) ; */ TruePos
static void goodG2B2 ( ) { double * data ; data = ( double * ) malloc ( 10 * sizeof ( double ) ) ; if ( globalReturnsTrue ( ) ) { { int i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = ( double ) i ; } } } if ( globalReturnsTrue ( ) ) { { int i ; for ( i = 0 ; i < 10 ; i ++ ) { printDoubleLine ( data [ i ] ) ; } } } } /* Warning description Potential leak of memory pointed to by ' data ' ------ } */ TruePos
static void goodG2B2 ( ) { double * data ; if ( 1 ) { data = ( double * ) malloc ( sizeof ( double ) ) ; * data = 5.0 ; } if ( 1 ) { printDoubleLine ( * data ) ; } } /* Warning description Potential leak of memory pointed to by ' data ' ------ printDoubleLine ( * data ) ; */ TruePos
static void goodG2B2 ( ) { double * data ; if ( globalReturnsTrue ( ) ) { data = ( double * ) malloc ( sizeof ( double ) ) ; * data = 5.0 ; } if ( globalReturnsTrue ( ) ) { printDoubleLine ( * data ) ; } } /* Warning description Dereference of undefined pointer value ------ printDoubleLine ( * data ) ; */ FalsePos
static void goodG2B ( ) { double * data ; if ( globalReturnsTrueOrFalse ( ) ) { data = ( double * ) malloc ( sizeof ( double ) ) ; * data = 5.0 ; } else { data = ( double * ) malloc ( sizeof ( double ) ) ; * data = 5.0 ; } if ( globalReturnsTrueOrFalse ( ) ) { printDoubleLine ( * data ) ; } else { printDoubleLine ( * data ) ; } } /* Warning description Potential leak of memory pointed to by ' data ' ------ printDoubleLine ( * data ) ; */ TruePos
static void goodG2B2 ( ) { double * data ; switch ( 6 ) { case 6: data = ( double * ) malloc ( sizeof ( double ) ) ; * data = 5.0 ; break ; default: printLine ( " Benign , fixed string " ) ; break ; } switch ( 7 ) { case 7: printDoubleLine ( * data ) ; break ; default: printLine ( " Benign , fixed string " ) ; break ; } } /* Warning description Potential leak of memory pointed to by ' data ' ------ printDoubleLine ( * data ) ; */ TruePos
static int staticFive = 5 ; static void goodG2B1 ( ) { int * data ; int dataUninitArray [ 10 ] ; data = dataUninitArray ; if ( staticFive != 5 ) { printLine ( " Benign , fixed string " ) ; } else { { int i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = i ; } } } if ( staticFive == 5 ) { { int i ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( data [ i ] ) ; } } } } /* Warning description Function call argument is an uninitialized value ------ printIntLine ( data [ i ] ) ; */ FalsePos
static void goodG2B2 ( ) { int * data ; int dataUninitArray [ 10 ] ; data = dataUninitArray ; if ( globalReturnsTrue ( ) ) { { int i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] = i ; } } } if ( globalReturnsTrue ( ) ) { { int i ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( data [ i ] ) ; } } } } /* Warning description Function call argument is an uninitialized value ------ printIntLine ( data [ i ] ) ; */ FalsePos
static int staticFive = 5 ; static void goodG2B1 ( ) { int * data ; if ( staticFive != 5 ) { printLine ( " Benign , fixed string " ) ; } else { data = ( int * ) malloc ( sizeof ( int ) ) ; * data = 5 ; } if ( staticFive == 5 ) { printIntLine ( * data ) ; } } /* Warning description Potential leak of memory pointed to by ' data ' ------ printIntLine ( * data ) ; */ TruePos
static void goodG2B2 ( ) { int * data ; switch ( 6 ) { case 6: data = ( int * ) malloc ( sizeof ( int ) ) ; * data = 5 ; break ; default: printLine ( " Benign , fixed string " ) ; break ; } switch ( 7 ) { case 7: printIntLine ( * data ) ; break ; default: printLine ( " Benign , fixed string " ) ; break ; } } /* Warning description Potential leak of memory pointed to by ' data ' ------ printIntLine ( * data ) ; */ TruePos
# include " std_testcase.h " static void goodG2B1 ( ) { long data ; if ( globalFive != 5 ) { printLine ( " Benign , fixed string " ) ; } else { data = 5L ; } if ( globalFive == 5 ) { printLongLine ( data ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE457_Use_of_Uninitialized_Variable__long_14_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Function call argument is an uninitialized value ------ printLongLine ( data ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { twoIntsStruct * data ; data = ( twoIntsStruct * ) malloc ( 10 * sizeof ( twoIntsStruct ) ) ; if ( GLOBAL_CONST_FIVE == 5 ) { { int i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] .intOne = i ; data [ i ] .intTwo = i ; } } } if ( GLOBAL_CONST_FIVE == 5 ) { { int i ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( data [ i ] .intOne ) ; printIntLine ( data [ i ] .intTwo ) ; } } } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_no_init_13_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Potential leak of memory pointed to by ' data ' ------ */ TruePos
# include " std_testcase.h " static void goodB2G1 ( ) { twoIntsStruct * data ; data = ( twoIntsStruct * ) malloc ( 10 * sizeof ( twoIntsStruct ) ) ; if ( GLOBAL_CONST_FIVE == 5 ) { { int i ; for ( i = 0 ; i < ( 10/2 ) ; i ++ ) { data [ i ] .intOne = i ; data [ i ] .intTwo = i ; } } } if ( GLOBAL_CONST_FIVE != 5 ) { printLine ( " Benign , fixed string " ) ; } else { { int i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] .intOne = i ; data [ i ] .intTwo = i ; } } { int i ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( data [ i ] .intOne ) ; printIntLine ( data [ i ] .intTwo ) ; } } } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_partial_init_13_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Potential leak of memory pointed to by ' data ' ------ printLine ( " Benign , fixed string " ) ; */ TruePos
# include " std_testcase.h " static void goodG2B2 ( ) { twoIntsStruct * data ; data = ( twoIntsStruct * ) malloc ( 10 * sizeof ( twoIntsStruct ) ) ; if ( globalFive == 5 ) { { int i ; for ( i = 0 ; i < 10 ; i ++ ) { data [ i ] .intOne = i ; data [ i ] .intTwo = i ; } } } if ( globalFive == 5 ) { { int i ; for ( i = 0 ; i < 10 ; i ++ ) { printIntLine ( data [ i ] .intOne ) ; printIntLine ( data [ i ] .intTwo ) ; } } } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE457_Use_of_Uninitialized_Variable__struct_array_malloc_partial_init_14_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Potential leak of memory pointed to by ' data ' ------ } */ TruePos
# include " std_testcase.h " static void goodG2B2 ( ) { twoIntsStruct * data ; if ( 1 ) { data = ( twoIntsStruct * ) malloc ( sizeof ( twoIntsStruct ) ) ; data -> intOne = 5 ; data -> intTwo = 6 ; } if ( 1 ) { printIntLine ( data -> intOne ) ; printIntLine ( data -> intTwo ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE457_Use_of_Uninitialized_Variable__struct_pointer_02_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Potential leak of memory pointed to by ' data ' ------ printIntLine ( data -> intTwo ) ; */ TruePos
# include " std_testcase.h " static void goodG2B2 ( ) { twoIntsStruct * data ; if ( 5 == 5 ) { data = ( twoIntsStruct * ) malloc ( sizeof ( twoIntsStruct ) ) ; data -> intOne = 5 ; data -> intTwo = 6 ; } if ( 5 == 5 ) { printIntLine ( data -> intOne ) ; printIntLine ( data -> intTwo ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE457_Use_of_Uninitialized_Variable__struct_pointer_03_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Potential leak of memory pointed to by ' data ' ------ printIntLine ( data -> intTwo ) ; */ TruePos
# include " std_testcase.h " # define UNLINK unlink # define FOPEN fopen # define MKTEMP mktemp static int staticFive = 5 ; static void good2 ( ) { if ( staticFive == 5 ) { { char * filename ; char tmpl [ ] = " goodXXXXXX " ; FILE * pFile ; filename = MKTEMP ( tmpl ) ; if ( filename != NULL ) { pFile = FOPEN ( filename , " w " ) ; if ( pFile != NULL ) { fprintf ( pFile , " Temporary file " ) ; fclose ( pFile ) ; UNLINK ( filename ) ; } } } } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE459_Incomplete_Cleanup__char_07_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Call to function ' mktemp ' is insecure as it always creates or uses insecure temporary file. Use ' mkstemp ' instead ------ filename = MKTEMP ( tmpl ) ; */ TruePos
# include " std_testcase.h " static void goodG2B1 ( ) { char * data ; if ( globalFive != 5 ) { printLine ( " Benign , fixed string " ) ; } else { data = " Good " ; } if ( globalFive == 5 ) { printHexCharLine ( data [ 0 ] ) ; } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE476_NULL_Pointer_Dereference__char_14_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Dereference of undefined pointer value ------ printHexCharLine ( data [ 0 ] ) ; */ FalsePos
# include < wchar.h > static int staticTrue = 1 ; static int staticFalse = 0 ; static void goodB2G1 ( ) { int * data ; if ( staticTrue ) { data = NULL ; } if ( staticFalse ) { printLine ( " Benign , fixed string " ) ; } else { if ( data != NULL ) { printIntLine ( * data ) ; } else { printLine ( " data is NULL " ) ; } } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE476_NULL_Pointer_Dereference__int_05_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description The left operand of ' != ' is a garbage value ------ if ( data != NULL ) */ FalsePos
static void goodB2G2 ( ) { char data ; if ( globalReturnsTrue ( ) ) { data = ' C ' ; } if ( globalReturnsTrue ( ) ) { printHexCharLine ( data ) ; } } /* Warning description Function call argument is an uninitialized value ------ printHexCharLine ( data ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { TwoIntsClass * data ; data = NULL ; if ( globalTrue ) { { TwoIntsClass * dataBuffer = new TwoIntsClass [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { dataBuffer [ i ] .intOne = 1 ; dataBuffer [ i ] .intTwo = 1 ; } } data = dataBuffer ; } } printIntLine ( data [ 0 ] .intOne ) ; delete [ ] data ; } /* Warning description Dereference of null pointer ------ printIntLine ( data [ 0 ] .intOne ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { TwoIntsClass * data ; data = NULL ; if ( GLOBAL_CONST_TRUE ) { { TwoIntsClass * dataBuffer = new TwoIntsClass [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { dataBuffer [ i ] .intOne = 1 ; dataBuffer [ i ] .intTwo = 1 ; } } data = dataBuffer ; } } printIntLine ( data [ 0 ] .intOne ) ; delete [ ] data ; } /* Warning description Dereference of null pointer ------ printIntLine ( data [ 0 ] .intOne ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { TwoIntsClass * data ; data = NULL ; if ( globalFive == 5 ) { { TwoIntsClass * dataBuffer = new TwoIntsClass [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { dataBuffer [ i ] .intOne = 1 ; dataBuffer [ i ] .intTwo = 1 ; } } data = dataBuffer ; } } printIntLine ( data [ 0 ] .intOne ) ; delete [ ] data ; } /* Warning description Dereference of null pointer ------ printIntLine ( data [ 0 ] .intOne ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { int64_t * data ; data = NULL ; if ( globalReturnsTrue ( ) ) { { int64_t * dataBuffer = new int64_t [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { dataBuffer [ i ] = 5LL ; } } data = dataBuffer ; } } printLongLongLine ( data [ 0 ] ) ; delete [ ] data ; } /* Warning description Array access ( from variable ' data ' ) results in a null pointer dereference ------ printLongLongLine ( data [ 0 ] ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { int64_t * data ; data = NULL ; if ( GLOBAL_CONST_FIVE == 5 ) { { int64_t * dataBuffer = new int64_t [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { dataBuffer [ i ] = 5LL ; } } data = dataBuffer ; } } printLongLongLine ( data [ 0 ] ) ; delete [ ] data ; } /* Warning description Array access ( from variable ' data ' ) results in a null pointer dereference ------ printLongLongLine ( data [ 0 ] ) ; */ FalsePos
# include " std_testcase.h " static int staticTrue = 1 ; static void goodG2B2 ( ) { int * data ; data = NULL ; if ( staticTrue ) { { int * dataBuffer = new int [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { dataBuffer [ i ] = 5 ; } } data = dataBuffer ; } } printIntLine ( data [ 0 ] ) ; delete [ ] data ; } /* Warning description Array access ( from variable ' data ' ) results in a null pointer dereference ------ printIntLine ( data [ 0 ] ) ; */ FalsePos
# include " std_testcase.h " static int staticTrue = 1 ; static void goodG2B2 ( ) { long * data ; data = NULL ; if ( staticTrue ) { { long * dataBuffer = new long [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { dataBuffer [ i ] = 5L ; } } data = dataBuffer ; } } printLongLine ( data [ 0 ] ) ; delete [ ] data ; } /* Warning description Array access ( from variable ' data ' ) results in a null pointer dereference ------ printLongLine ( data [ 0 ] ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { long * data ; data = NULL ; if ( globalReturnsTrue ( ) ) { { long * dataBuffer = new long [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { dataBuffer [ i ] = 5L ; } } data = dataBuffer ; } } printLongLine ( data [ 0 ] ) ; delete [ ] data ; } /* Warning description Array access ( from variable ' data ' ) results in a null pointer dereference ------ printLongLine ( data [ 0 ] ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { long * data ; data = NULL ; if ( globalReturnsTrue ( ) ) { { long * dataBuffer = new long [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { dataBuffer [ i ] = 5L ; } } data = dataBuffer ; } } printLongLine ( data [ 0 ] ) ; delete [ ] data ; } /* Warning description Array access ( from variable ' data ' ) results in a null pointer dereference ------ printLongLine ( data [ 0 ] ) ; */ FalsePos
# include " std_testcase.h " static int staticFive = 5 ; static void goodG2B2 ( ) { long * data ; data = NULL ; if ( staticFive == 5 ) { { long * dataBuffer = new long [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { dataBuffer [ i ] = 5L ; } } data = dataBuffer ; } } printLongLine ( data [ 0 ] ) ; delete [ ] data ; } /* Warning description Array access ( from variable ' data ' ) results in a null pointer dereference ------ printLongLine ( data [ 0 ] ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { long * data ; data = NULL ; if ( GLOBAL_CONST_TRUE ) { { long * dataBuffer = new long [ 100 ] ; { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { dataBuffer [ i ] = 5L ; } } data = dataBuffer ; } } printLongLine ( data [ 0 ] ) ; delete [ ] data ; } /* Warning description Array access ( from variable ' data ' ) results in a null pointer dereference ------ printLongLine ( data [ 0 ] ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { char * data ; data = NULL ; if ( globalTrue ) { { char * dataBuffer = new char ; * dataBuffer = ' A ' ; data = dataBuffer ; } } printHexCharLine ( * data ) ; delete data ; } /* Warning description Dereference of null pointer ( loaded from variable ' data ' ) ------ printHexCharLine ( * data ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { char * data ; data = NULL ; if ( globalTrue ) { { char * dataBuffer = new char ; * dataBuffer = ' A ' ; data = dataBuffer ; } } printHexCharLine ( * data ) ; delete data ; } /* Warning description Dereference of null pointer ( loaded from variable ' data ' ) ------ printHexCharLine ( * data ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { char * data ; data = NULL ; if ( globalFive == 5 ) { { char * dataBuffer = new char ; * dataBuffer = ' A ' ; data = dataBuffer ; } } printHexCharLine ( * data ) ; delete data ; } /* Warning description Dereference of null pointer ( loaded from variable ' data ' ) ------ printHexCharLine ( * data ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { TwoIntsClass * data ; data = NULL ; if ( GLOBAL_CONST_FIVE == 5 ) { { TwoIntsClass * dataBuffer = new TwoIntsClass ; dataBuffer -> intOne = 2 ; dataBuffer -> intTwo = 2 ; data = dataBuffer ; } } printIntLine ( data -> intOne ) ; delete data ; } /* Warning description Access to field ' intOne ' results in a dereference of a null pointer ( loaded from variable ' data ' ) ------ printIntLine ( data -> intOne ) ; */ FalsePos
# include " std_testcase.h " static int staticFive = 5 ; static void goodG2B2 ( ) { TwoIntsClass * data ; data = NULL ; if ( staticFive == 5 ) { { TwoIntsClass * dataBuffer = new TwoIntsClass ; dataBuffer -> intOne = 2 ; dataBuffer -> intTwo = 2 ; data = dataBuffer ; } } printIntLine ( data -> intOne ) ; delete data ; } /* Warning description Access to field ' intOne ' results in a dereference of a null pointer ( loaded from variable ' data ' ) ------ printIntLine ( data -> intOne ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { TwoIntsClass * data ; data = NULL ; if ( globalFive == 5 ) { { TwoIntsClass * dataBuffer = new TwoIntsClass ; dataBuffer -> intOne = 2 ; dataBuffer -> intTwo = 2 ; data = dataBuffer ; } } printIntLine ( data -> intOne ) ; delete data ; } /* Warning description Access to field ' intOne ' results in a dereference of a null pointer ( loaded from variable ' data ' ) ------ printIntLine ( data -> intOne ) ; */ FalsePos
# include " std_testcase.h " static int staticTrue = 1 ; static void goodG2B2 ( ) { TwoIntsClass * data ; data = NULL ; if ( staticTrue ) { { TwoIntsClass * dataBuffer = new TwoIntsClass ; dataBuffer -> intOne = 2 ; dataBuffer -> intTwo = 2 ; data = dataBuffer ; } } printIntLine ( data -> intOne ) ; delete data ; } /* Warning description Access to field ' intOne ' results in a dereference of a null pointer ( loaded from variable ' data ' ) ------ printIntLine ( data -> intOne ) ; */ FalsePos
# include " std_testcase.h " static int staticTrue = 1 ; static void goodG2B2 ( ) { int64_t * data ; data = NULL ; if ( staticTrue ) { { int64_t * dataBuffer = new int64_t ; * dataBuffer = 5LL ; data = dataBuffer ; } } printLongLongLine ( * data ) ; delete data ; } /* Warning description Dereference of null pointer ( loaded from variable ' data ' ) ------ printLongLongLine ( * data ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { int64_t * data ; data = NULL ; if ( GLOBAL_CONST_TRUE ) { { int64_t * dataBuffer = new int64_t ; * dataBuffer = 5LL ; data = dataBuffer ; } } printLongLongLine ( * data ) ; delete data ; } /* Warning description Dereference of null pointer ( loaded from variable ' data ' ) ------ printLongLongLine ( * data ) ; */ FalsePos
# include " std_testcase.h " static int staticFive = 5 ; static void goodG2B2 ( ) { long * data ; data = NULL ; if ( staticFive == 5 ) { { long * dataBuffer = new long ; * dataBuffer = 5L ; data = dataBuffer ; } } printLongLine ( * data ) ; delete data ; } /* Warning description Dereference of null pointer ( loaded from variable ' data ' ) ------ printLongLine ( * data ) ; */ FalsePos
# include " std_testcase.h " static int staticTrue = 1 ; static void goodG2B2 ( ) { long * data ; data = NULL ; if ( staticTrue ) { { long * dataBuffer = new long ; * dataBuffer = 5L ; data = dataBuffer ; } } printLongLine ( * data ) ; delete data ; } /* Warning description Dereference of null pointer ( loaded from variable ' data ' ) ------ printLongLine ( * data ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { int64_t * data ; data = NULL ; if ( globalFive == 5 ) { { int64_t * dataBuffer = ( int64_t * ) malloc ( 100 * sizeof ( int64_t ) ) ; if ( dataBuffer == NULL ) { printLine ( " malloc ( ) failed " ) ; exit ( 1 ) ; } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { dataBuffer [ i ] = 5LL ; } } data = dataBuffer ; } } printLongLongLine ( data [ 0 ] ) ; free ( data ) ; } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE590_Free_Memory_Not_on_Heap__free_int64_t_declare_14_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Array access ( from variable ' data ' ) results in a null pointer dereference ------ printLongLongLine ( data [ 0 ] ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { int64_t * data ; data = NULL ; if ( GLOBAL_CONST_FIVE == 5 ) { { int64_t * dataBuffer = ( int64_t * ) malloc ( 100 * sizeof ( int64_t ) ) ; if ( dataBuffer == NULL ) { printLine ( " malloc ( ) failed " ) ; exit ( 1 ) ; } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { dataBuffer [ i ] = 5LL ; } } data = dataBuffer ; } } printLongLongLine ( data [ 0 ] ) ; free ( data ) ; } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE590_Free_Memory_Not_on_Heap__free_int64_t_static_13_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Array access ( from variable ' data ' ) results in a null pointer dereference ------ printLongLongLine ( data [ 0 ] ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { int * data ; data = NULL ; if ( GLOBAL_CONST_TRUE ) { { int * dataBuffer = ( int * ) malloc ( 100 * sizeof ( int ) ) ; if ( dataBuffer == NULL ) { printLine ( " malloc ( ) failed " ) ; exit ( 1 ) ; } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { dataBuffer [ i ] = 5 ; } } data = dataBuffer ; } } printIntLine ( data [ 0 ] ) ; free ( data ) ; } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Array access ( from variable ' data ' ) results in a null pointer dereference ------ printIntLine ( data [ 0 ] ) ; */ FalsePos
# include < wchar.h > static void goodG2B2 ( ) { int * data ; data = NULL ; if ( globalReturnsTrue ( ) ) { { int * dataBuffer = ( int * ) malloc ( 100 * sizeof ( int ) ) ; if ( dataBuffer == NULL ) { printLine ( " malloc ( ) failed " ) ; exit ( 1 ) ; } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { dataBuffer [ i ] = 5 ; } } data = dataBuffer ; } } printIntLine ( data [ 0 ] ) ; free ( data ) ; } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE590_Free_Memory_Not_on_Heap__free_int_static_11_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Array access ( from variable ' data ' ) results in a null pointer dereference ------ printIntLine ( data [ 0 ] ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { long * data ; data = NULL ; if ( globalTrue ) { { long * dataBuffer = ( long * ) malloc ( 100 * sizeof ( long ) ) ; if ( dataBuffer == NULL ) { printLine ( " malloc ( ) failed " ) ; exit ( 1 ) ; } { size_t i ; for ( i = 0 ; i < 100 ; i ++ ) { dataBuffer [ i ] = 5L ; } } data = dataBuffer ; } } printLongLine ( data [ 0 ] ) ; free ( data ) ; } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE590_Free_Memory_Not_on_Heap__free_long_static_10_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Array access ( from variable ' data ' ) results in a null pointer dereference ------ printLongLine ( data [ 0 ] ) ; */ FalsePos
# include < unistd.h > # define INVALID_SOCKET - 1 # define SOCKET_ERROR - 1 # define CLOSE_SOCKET close # define SOCKET int # define TCP_PORT 27015 # define IP_ADDRESS " 127.0.0.1 " # define CHAR_ARRAY_SIZE ( 3 * sizeof ( data ) + 2 ) void CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_51b_goodG2BSink ( int data ) { { size_t i ; int * intPointer ; intPointer = ( int * ) malloc ( data * sizeof ( int ) ) ; for ( i = 0 ; i < ( size_t ) data ; i ++ ) { intPointer [ i ] = 0 ; } printIntLine ( intPointer [ 0 ] ) ; free ( intPointer ) ; } } /* Warning description Function call argument is an uninitialized value ------ printIntLine ( intPointer [ 0 ] ) ; */ TruePos
# include " std_testcase.h " # define CHAR_ARRAY_SIZE ( 3 * sizeof ( data ) + 2 ) void CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_52c_goodG2BSink ( int data ) { { size_t i ; int * intPointer ; intPointer = ( int * ) malloc ( data * sizeof ( int ) ) ; for ( i = 0 ; i < ( size_t ) data ; i ++ ) { intPointer [ i ] = 0 ; } printIntLine ( intPointer [ 0 ] ) ; free ( intPointer ) ; } } /* Warning description Function call argument is an uninitialized value ------ printIntLine ( intPointer [ 0 ] ) ; */ TruePos
# include " std_testcase.h " # define CHAR_ARRAY_SIZE ( 3 * sizeof ( data ) + 2 ) void CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fgets_63b_goodG2BSink ( int * dataPtr ) { int data = * dataPtr ; { size_t i ; int * intPointer ; intPointer = ( int * ) malloc ( data * sizeof ( int ) ) ; for ( i = 0 ; i < ( size_t ) data ; i ++ ) { intPointer [ i ] = 0 ; } printIntLine ( intPointer [ 0 ] ) ; free ( intPointer ) ; } } /* Warning description Function call argument is an uninitialized value ------ printIntLine ( intPointer [ 0 ] ) ; */ TruePos
# include " std_testcase.h " typedef union { int unionFirst ; int unionSecond ; } CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_34_unionType ; static void goodG2B ( ) { int data ; CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_34_unionType myUnion ; data = - 1 ; data = 20 ; myUnion.unionFirst = data ; { int data = myUnion.unionSecond ; { size_t i ; int * intPointer ; intPointer = ( int * ) malloc ( data * sizeof ( int ) ) ; for ( i = 0 ; i < ( size_t ) data ; i ++ ) { intPointer [ i ] = 0 ; } printIntLine ( intPointer [ 0 ] ) ; free ( intPointer ) ; } } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_34_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Function call argument is an uninitialized value ------ printIntLine ( intPointer [ 0 ] ) ; */ TruePos
# include " std_testcase.h " void CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fscanf_65b_goodG2BSink ( int data ) { { size_t i ; int * intPointer ; intPointer = ( int * ) malloc ( data * sizeof ( int ) ) ; for ( i = 0 ; i < ( size_t ) data ; i ++ ) { intPointer [ i ] = 0 ; } printIntLine ( intPointer [ 0 ] ) ; free ( intPointer ) ; } } /* Warning description Function call argument is an uninitialized value ------ printIntLine ( intPointer [ 0 ] ) ; */ TruePos
# include " std_testcase.h " static void goodB2G2 ( ) { twoIntsStruct * data ; data = NULL ; data = ( twoIntsStruct * ) calloc ( 1 , sizeof ( twoIntsStruct ) ) ; if ( globalReturnsTrue ( ) ) { if ( data != NULL ) { data [ 0 ] .intOne = 1 ; data [ 0 ] .intTwo = 1 ; printStructLine ( & data [ 0 ] ) ; free ( data ) ; } } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE690_NULL_Deref_From_Return__struct_calloc_11_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Potential leak of memory pointed to by ' data ' ------ */ FalsePos
# include " std_testcase.h " static const int STATIC_CONST_FIVE = 5 ; static void good2 ( ) { if ( STATIC_CONST_FIVE == 5 ) { { double * data ; double ** pointer = ( double ** ) ALLOCA ( sizeof ( double * ) ) ; data = ( double * ) malloc ( sizeof ( double ) ) ; * data = 5.0 ; * pointer = data ; { double * data = * pointer ; printDoubleLine ( * data ) ; } } } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE758_Undefined_Behavior__double_pointer_alloca_use_06_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Potential leak of memory pointed to by ' data ' ------ printDoubleLine ( * data ) ; */ TruePos
# include < arpa/inet.h > # define INVALID_SOCKET - 1 # define SOCKET_ERROR - 1 # define CLOSE_SOCKET close # define SOCKET int # define TCP_PORT 27015 # define IP_ADDRESS " 127.0.0.1 " # define SEARCH_CHAR ' S ' static const int STATIC_CONST_FIVE = 5 ; static void goodB2G2 ( ) { char * data ; data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; data [ 0 ] = ' \0 ' ; { int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_SOCKET ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == SOCKET_ERROR ) { break ; } recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( 100 - dataLen - 1 ) , 0 ) ; if ( recvResult == SOCKET_ERROR || recvResult == 0 ) { break ; } data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ; replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( 0 ) ; if ( connectSocket != INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } } if ( STATIC_CONST_FIVE == 5 ) { { size_t i ; for ( i = 0 ; i < strlen ( data ) ; i ++ ) { if ( data [ i ] == SEARCH_CHAR ) { printLine ( " We have a match! " ) ; break ; } } free ( data ) ; } } } /* Warning description The left operand of ' == ' is a garbage value ------ if ( data [ i ] == SEARCH_CHAR ) */ FalsePos
# include < arpa/inet.h > # define INVALID_SOCKET - 1 # define SOCKET_ERROR - 1 # define CLOSE_SOCKET close # define SOCKET int # define TCP_PORT 27015 # define IP_ADDRESS " 127.0.0.1 " # define SEARCH_CHAR ' S ' static void goodB2G1 ( ) { char * data ; data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; data [ 0 ] = ' \0 ' ; { int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_SOCKET ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == SOCKET_ERROR ) { break ; } recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( 100 - dataLen - 1 ) , 0 ) ; if ( recvResult == SOCKET_ERROR || recvResult == 0 ) { break ; } data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ; replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( 0 ) ; if ( connectSocket != INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } } if ( globalReturnsFalse ( ) ) { printLine ( " Benign , fixed string " ) ; } else { { size_t i ; for ( i = 0 ; i < strlen ( data ) ; i ++ ) { if ( data [ i ] == SEARCH_CHAR ) { printLine ( " We have a match! " ) ; break ; } } free ( data ) ; } } } /* Warning description The left operand of ' == ' is a garbage value ------ if ( data [ i ] == SEARCH_CHAR ) */ FalsePos
# include < arpa/inet.h > # define INVALID_SOCKET - 1 # define SOCKET_ERROR - 1 # define CLOSE_SOCKET close # define SOCKET int # define TCP_PORT 27015 # define IP_ADDRESS " 127.0.0.1 " # define SEARCH_CHAR ' S ' static void goodB2G ( ) { char * data ; data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; data [ 0 ] = ' \0 ' ; { int recvResult ; struct sockaddr_in service ; char * replace ; SOCKET connectSocket = INVALID_SOCKET ; size_t dataLen = strlen ( data ) ; do { connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_SOCKET ) { break ; } memset ( & service , 0 , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr * ) & service , sizeof ( service ) ) == SOCKET_ERROR ) { break ; } recvResult = recv ( connectSocket , ( char * ) ( data + dataLen ) , sizeof ( char ) * ( 100 - dataLen - 1 ) , 0 ) ; if ( recvResult == SOCKET_ERROR || recvResult == 0 ) { break ; } data [ dataLen + recvResult / sizeof ( char ) ] = ' \0 ' ; replace = strchr ( data , ' \r ' ) ; if ( replace ) { * replace = ' \0 ' ; } replace = strchr ( data , ' \n ' ) ; if ( replace ) { * replace = ' \0 ' ; } } while ( 0 ) ; if ( connectSocket != INVALID_SOCKET ) { CLOSE_SOCKET ( connectSocket ) ; } } { char * dataCopy = data ; char * data = dataCopy ; { size_t i ; for ( i = 0 ; i < strlen ( data ) ; i ++ ) { if ( data [ i ] == SEARCH_CHAR ) { printLine ( " We have a match! " ) ; break ; } } free ( data ) ; } } } /* Warning description The left operand of ' == ' is a garbage value ------ if ( data [ i ] == SEARCH_CHAR ) */ FalsePos
# include " std_testcase.h " # define SEARCH_CHAR ' S ' static int staticFive = 5 ; static void goodB2G1 ( ) { char * data ; data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; data [ 0 ] = ' \0 ' ; { size_t dataLen = strlen ( data ) ; if ( 100 - dataLen > 1 ) { if ( fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL ) { dataLen = strlen ( data ) ; if ( dataLen > 0 && data [ dataLen - 1 ] == ' \n ' ) { data [ dataLen - 1 ] = ' \0 ' ; } } else { printLine ( " fgets ( ) failed " ) ; data [ dataLen ] = ' \0 ' ; } } } if ( staticFive != 5 ) { printLine ( " Benign , fixed string " ) ; } else { { size_t i ; for ( i = 0 ; i < strlen ( data ) ; i ++ ) { if ( data [ i ] == SEARCH_CHAR ) { printLine ( " We have a match! " ) ; break ; } } free ( data ) ; } } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_07_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description The left operand of ' == ' is a garbage value ------ if ( data [ i ] == SEARCH_CHAR ) */ FalsePos
# include " std_testcase.h " # define SEARCH_CHAR ' S ' static int goodB2G2Static = 0 ; static void goodB2G2Sink ( char * data ) { if ( goodB2G2Static ) { { size_t i ; for ( i = 0 ; i < strlen ( data ) ; i ++ ) { if ( data [ i ] == SEARCH_CHAR ) { printLine ( " We have a match! " ) ; break ; } } free ( data ) ; } } } static void goodB2G2 ( ) { char * data ; data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; data [ 0 ] = ' \0 ' ; { size_t dataLen = strlen ( data ) ; if ( 100 - dataLen > 1 ) { if ( fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , stdin ) != NULL ) { dataLen = strlen ( data ) ; if ( dataLen > 0 && data [ dataLen - 1 ] == ' \n ' ) { data [ dataLen - 1 ] = ' \0 ' ; } } else { printLine ( " fgets ( ) failed " ) ; data [ dataLen ] = ' \0 ' ; } } } goodB2G2Static = 1 ; goodB2G2Sink ( data ) ; } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_console_21_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description The left operand of ' == ' is a garbage value ------ if ( data [ i ] == SEARCH_CHAR ) */ FalsePos
# include < wchar.h > # define ENV_VARIABLE " ADD " # define GETENV getenv # define SEARCH_CHAR ' S ' static void goodB2G2 ( ) { char * data ; data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; data [ 0 ] = ' \0 ' ; { size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ; if ( environment != NULL ) { strncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; } } if ( 5 == 5 ) { { size_t i ; for ( i = 0 ; i < strlen ( data ) ; i ++ ) { if ( data [ i ] == SEARCH_CHAR ) { printLine ( " We have a match! " ) ; break ; } } free ( data ) ; } } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_03_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description The left operand of ' == ' is a garbage value ------ if ( data [ i ] == SEARCH_CHAR ) */ FalsePos
# include " std_testcase.h " # define ENV_VARIABLE " ADD " # define GETENV getenv # define SEARCH_CHAR ' S ' static void goodB2G2 ( ) { char * data ; data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; data [ 0 ] = ' \0 ' ; { size_t dataLen = strlen ( data ) ; char * environment = GETENV ( ENV_VARIABLE ) ; if ( environment != NULL ) { strncat ( data + dataLen , environment , 100 - dataLen - 1 ) ; } } if ( globalTrue ) { { size_t i ; for ( i = 0 ; i < strlen ( data ) ; i ++ ) { if ( data [ i ] == SEARCH_CHAR ) { printLine ( " We have a match! " ) ; break ; } } free ( data ) ; } } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_environment_10_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Potential leak of memory pointed to by ' data ' ------ } */ FalsePos
# include < wchar.h > # define FILENAME " /tmp/file.txt " # define SEARCH_CHAR ' S ' static int staticFalse = 0 ; static void goodB2G1 ( ) { char * data ; data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; data [ 0 ] = ' \0 ' ; { size_t dataLen = strlen ( data ) ; FILE * pFile ; if ( 100 - dataLen > 1 ) { pFile = fopen ( FILENAME , " r " ) ; if ( pFile != NULL ) { if ( fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL ) { printLine ( " fgets ( ) failed " ) ; data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } if ( staticFalse ) { printLine ( " Benign , fixed string " ) ; } else { { size_t i ; for ( i = 0 ; i < strlen ( data ) ; i ++ ) { if ( data [ i ] == SEARCH_CHAR ) { printLine ( " We have a match! " ) ; break ; } } free ( data ) ; } } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_05_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description The left operand of ' == ' is a garbage value ------ if ( data [ i ] == SEARCH_CHAR ) */ FalsePos
# include < wchar.h > # define FILENAME " /tmp/file.txt " # define SEARCH_CHAR ' S ' static int staticFive = 5 ; static void goodB2G1 ( ) { char * data ; data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; data [ 0 ] = ' \0 ' ; { size_t dataLen = strlen ( data ) ; FILE * pFile ; if ( 100 - dataLen > 1 ) { pFile = fopen ( FILENAME , " r " ) ; if ( pFile != NULL ) { if ( fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL ) { printLine ( " fgets ( ) failed " ) ; data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } if ( staticFive != 5 ) { printLine ( " Benign , fixed string " ) ; } else { { size_t i ; for ( i = 0 ; i < strlen ( data ) ; i ++ ) { if ( data [ i ] == SEARCH_CHAR ) { printLine ( " We have a match! " ) ; break ; } } free ( data ) ; } } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_07_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description The left operand of ' == ' is a garbage value ------ if ( data [ i ] == SEARCH_CHAR ) */ FalsePos
# include " std_testcase.h " # define FILENAME " /tmp/file.txt " # define SEARCH_CHAR ' S ' static void goodB2G2 ( ) { char * data ; data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; data [ 0 ] = ' \0 ' ; { size_t dataLen = strlen ( data ) ; FILE * pFile ; if ( 100 - dataLen > 1 ) { pFile = fopen ( FILENAME , " r " ) ; if ( pFile != NULL ) { if ( fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL ) { printLine ( " fgets ( ) failed " ) ; data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } if ( GLOBAL_CONST_TRUE ) { { size_t i ; for ( i = 0 ; i < strlen ( data ) ; i ++ ) { if ( data [ i ] == SEARCH_CHAR ) { printLine ( " We have a match! " ) ; break ; } } free ( data ) ; } } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_09_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description The left operand of ' == ' is a garbage value ------ if ( data [ i ] == SEARCH_CHAR ) */ FalsePos
# include " std_testcase.h " # define FILENAME " /tmp/file.txt " # define SEARCH_CHAR ' S ' static void goodB2G1 ( ) { char * data ; data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; data [ 0 ] = ' \0 ' ; { size_t dataLen = strlen ( data ) ; FILE * pFile ; if ( 100 - dataLen > 1 ) { pFile = fopen ( FILENAME , " r " ) ; if ( pFile != NULL ) { if ( fgets ( data + dataLen , ( int ) ( 100 - dataLen ) , pFile ) == NULL ) { printLine ( " fgets ( ) failed " ) ; data [ dataLen ] = ' \0 ' ; } fclose ( pFile ) ; } } } if ( globalFive != 5 ) { printLine ( " Benign , fixed string " ) ; } else { { size_t i ; for ( i = 0 ; i < strlen ( data ) ; i ++ ) { if ( data [ i ] == SEARCH_CHAR ) { printLine ( " We have a match! " ) ; break ; } } free ( data ) ; } } } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_14_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description The left operand of ' == ' is a garbage value ------ if ( data [ i ] == SEARCH_CHAR ) */ FalsePos
# include " std_testcase.h " typedef union { char * unionFirst ; char * unionSecond ; } unionType ; static void goodB2G ( ) { char * data ; unionType myUnion ; data = NULL ; data = ( char * ) malloc ( 100 * sizeof ( char ) ) ; myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ; free ( data ) ; } } /* Warning description Potential leak of memory pointed to by ' myUnion.unionFirst ' ------ char * data = myUnion.unionSecond ; */ UnknownPos 
# include " std_testcase.h " static void goodB2G1 ( ) { TwoIntsClass * data ; data = NULL ; if ( GLOBAL_CONST_TRUE ) { data = ( TwoIntsClass * ) malloc ( 100 * sizeof ( TwoIntsClass ) ) ; } if ( GLOBAL_CONST_FALSE ) { printLine ( " Benign , fixed string " ) ; } else { free ( data ) ; } } /* Warning description Potential leak of memory pointed to by ' data ' ------ printLine ( " Benign , fixed string " ) ; */ FalsePos
# include " std_testcase.h " static void goodB2G2 ( ) { long * data ; data = NULL ; if ( globalReturnsTrue ( ) ) { data = ( long * ) calloc ( 100 , sizeof ( long ) ) ; } if ( globalReturnsTrue ( ) ) { free ( data ) ; } } /* Warning description Potential leak of memory pointed to by ' data ' ------ printLine ( " Benign , fixed string " ) ; */ FalsePos
# include " std_testcase.h " static int staticTrue = 1 ; static int staticFalse = 0 ; static void goodB2G1 ( ) { long * data ; data = NULL ; if ( staticTrue ) { data = ( long * ) malloc ( 100 * sizeof ( long ) ) ; } if ( staticFalse ) { printLine ( " Benign , fixed string " ) ; } else { free ( data ) ; } } /* Warning description Potential leak of memory pointed to by ' data ' ------ printLine ( " Benign , fixed string " ) ; */ FalsePos
# include " std_testcase.h " static void goodB2G1 ( ) { long * data ; data = NULL ; if ( globalReturnsTrue ( ) ) { data = ( long * ) malloc ( 100 * sizeof ( long ) ) ; } if ( globalReturnsFalse ( ) ) { printLine ( " Benign , fixed string " ) ; } else { free ( data ) ; } } /* Warning description Potential leak of memory pointed to by ' data ' ------ printLine ( " Benign , fixed string " ) ; */ FalsePos
# include " std_testcase.h " typedef union { twoIntsStruct * unionFirst ; twoIntsStruct * unionSecond ; } unionType ; static void goodG2B ( ) { twoIntsStruct * data ; unionType myUnion ; data = NULL ; data = ( twoIntsStruct * ) malloc ( 100 * sizeof ( twoIntsStruct ) ) ; myUnion.unionFirst = data ; { twoIntsStruct * data = myUnion.unionSecond ; free ( data ) ; } } /* Warning description Potential leak of memory pointed to by ' myUnion.unionFirst ' ------ twoIntsStruct * data = myUnion.unionSecond ; */ UnknownPos 
# include < unistd.h > # define COMMAND_INT_PATH " /bin/sh " # define COMMAND_INT " sh " # define COMMAND_ARG1 " ls " # define COMMAND_ARG2 " - la " # define COMMAND_ARG3 data # define ENV_VARIABLE " ADD " # define GETENV getenv # define EXECLP execlp static char * CWE78_OS_Command_Injection__char_environment_execlp_45_goodG2BData ; static void goodG2BSink ( ) { char * data = CWE78_OS_Command_Injection__char_environment_execlp_45_goodG2BData ; EXECLP ( COMMAND_INT , COMMAND_INT , COMMAND_ARG1 , COMMAND_ARG2 , COMMAND_ARG3 , NULL ) ; } static void goodG2B ( ) { char * data ; char dataBuffer [ 100 ] = " " ; data = dataBuffer ; strcat ( data , " * . * " ) ; CWE78_OS_Command_Injection__char_environment_execlp_45_goodG2BData = data ; goodG2BSink ( ) ; } void CWE78_OS_Command_Injection__char_environment_execlp_45_good ( ) { goodG2B ( ) ; } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE78_OS_Command_Injection__char_environment_execlp_45_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Address of stack memory associated with local variable ' dataBuffer ' is still referred to by the global variable ' CWE78_OS_Command_Injection__char_environment_execlp_45_goodG2BData ' upon returning to the caller. This will be a dangling reference ------ goodG2BSink ( ) ; */ FalsePos
# include " std_testcase.h " static int staticFive = 5 ; static void goodG2B2 ( ) { void * data ; data = NULL ; if ( staticFive == 5 ) { { int intBuffer = 8 ; data = & intBuffer ; } } printIntLine ( * ( ( int * ) data ) ) ; } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE843_Type_Confusion__char_07_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Dereference of null pointer ------ printIntLine ( * ( ( int * ) data ) ) ; */ FalsePos
# include " std_testcase.h " static void goodG2B2 ( ) { void * data ; data = NULL ; if ( GLOBAL_CONST_FIVE == 5 ) { { int intBuffer = 8 ; data = & intBuffer ; } } printIntLine ( * ( ( int * ) data ) ) ; } void main ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; printLine ( " Calling good ( ) ... " ) ; CWE843_Type_Confusion__short_13_good ( ) ; printLine ( " Finished good ( ) " ) ; 0 ; } /* Warning description Dereference of null pointer ------ printIntLine ( * ( ( int * ) data ) ) ; */ FalsePos