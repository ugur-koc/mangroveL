public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( ) throws Throwable { String data ; data = " STRING " ;   { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ;  try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ;  readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; }  try { if ( socket ! = null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( listener ! = null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__database_execute_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__database_execute_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void goodG2BSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = CWE89_SQL_Injection__getParameter_Servlet_execute_68a . data ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = CWE89_SQL_Injection__getParameter_Servlet_execute_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  private void goodB2G ( ) throws Throwable { String data ; data = " STRING " ;   { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ;  try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ;  readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; }  try { if ( socket ! = null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( listener ! = null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void good ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; goodB2G ( request , response ) ; } private void goodG2BSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( request , response ) ; } private void goodB2GSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = " STRING " ;   { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources ! = null ) {  data = cookieSources [ 0 ] . getValue ( ) ; } } dataGoodB2G = data ; goodB2GSink ( request , response ) ; } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__Property_prepareStatement_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__Property_prepareStatement_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__Environment_executeBatch_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  public void goodB2GSink ( CWE89_SQL_Injection__Environment_executeBatch_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } goodpositive
public void good ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; goodB2G ( request , response ) ; } private void goodG2BSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( request , response ) ; } private void goodB2GSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = " STRING " ;   { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , " & " ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ;  if ( token . startsWith ( " id = " ) )  { data = token . substring ( 3 ) ;  break ;  } } } dataGoodB2G = data ; goodB2GSink ( request , response ) ; } goodpositive
public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( ) throws Throwable { String data ; data = " STRING " ;   { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try {  socket = new Socket ( " host . example . org " , 39544 ) ;  readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; }  try { if ( socket ! = null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( ) throws Throwable { String data ;   data = System . getenv ( " STRING " ) ; dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__console_readLine_prepareStatement_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__console_readLine_prepareStatement_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__getQueryString_Servlet_executeQuery_67a . Container dataContainer , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__getQueryString_Servlet_executeQuery_67a . Container dataContainer , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( ) throws Throwable { String data ; data = " STRING " ;   { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ;  try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ;  readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; }  try { if ( socket ! = null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( listener ! = null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__console_readLine_executeUpdate_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__console_readLine_executeUpdate_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__PropertiesFile_executeBatch_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  public void goodB2GSink ( CWE89_SQL_Injection__PropertiesFile_executeBatch_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } goodpositive
public void good ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; goodB2G ( request , response ) ; } private void goodG2BSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( request , response ) ; } private void goodB2GSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = " STRING " ;   { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , " & " ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ;  if ( token . startsWith ( " id = " ) )  { data = token . substring ( 3 ) ;  break ;  } } } dataGoodB2G = data ; goodB2GSink ( request , response ) ; } goodpositive
public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  private void goodB2G ( ) throws Throwable { String data ; data = " STRING " ;   { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try {  connection = IO . getDBConnection ( ) ;  preparedStatement = connection . prepareStatement ( " select name from users where id = 0 " ) ; resultSet = preparedStatement . executeQuery ( ) ;  data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally {  try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( preparedStatement ! = null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( connection ! = null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__connect_tcp_executeUpdate_68a . data ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__connect_tcp_executeUpdate_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void good ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; goodB2G ( request , response ) ; } private void goodG2BSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataGoodG2B ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( request , response ) ; } private void goodB2GSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataGoodB2G ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  private void goodB2G ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ;  data = request . getParameter ( " STRING " ) ; dataGoodB2G = data ; goodB2GSink ( request , response ) ; } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__File_executeUpdate_68a . data ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__File_executeUpdate_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__listen_tcp_executeUpdate_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__listen_tcp_executeUpdate_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = CWE89_SQL_Injection__getCookies_Servlet_executeQuery_68a . data ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = CWE89_SQL_Injection__getCookies_Servlet_executeQuery_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void good ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; goodB2G ( request , response ) ; } private void goodG2BSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( request , response ) ; } private void goodB2GSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ;  data = request . getParameter ( " STRING " ) ; dataGoodB2G = data ; goodB2GSink ( request , response ) ; } goodpositive
public void goodG2BSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = CWE89_SQL_Injection__getParameter_Servlet_prepareStatement_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = CWE89_SQL_Injection__getParameter_Servlet_prepareStatement_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( ) throws Throwable { String data ; data = " STRING " ;   { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try {  connection = IO . getDBConnection ( ) ;  preparedStatement = connection . prepareStatement ( " select name from users where id = 0 " ) ; resultSet = preparedStatement . executeQuery ( ) ;  data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally {  try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( preparedStatement ! = null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( connection ! = null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void good ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; goodB2G ( request , response ) ; } private void goodG2BSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( request , response ) ; } private void goodB2GSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = " STRING " ;   { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources ! = null ) {  data = cookieSources [ 0 ] . getValue ( ) ; } } dataGoodB2G = data ; goodB2GSink ( request , response ) ; } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__getCookies_Servlet_prepareStatement_67a . Container dataContainer , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__getCookies_Servlet_prepareStatement_67a . Container dataContainer , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( ) throws Throwable { String data ;   data = System . getProperty ( " user . home " ) ; dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__console_readLine_executeQuery_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__console_readLine_executeQuery_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__PropertiesFile_executeUpdate_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__PropertiesFile_executeUpdate_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__File_executeBatch_68a . data ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__File_executeBatch_68a . data ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__PropertiesFile_executeQuery_68a . data ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__PropertiesFile_executeQuery_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__getQueryString_Servlet_executeUpdate_67a . Container dataContainer , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__getQueryString_Servlet_executeUpdate_67a . Container dataContainer , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__connect_tcp_prepareStatement_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__connect_tcp_prepareStatement_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  private void goodB2G ( ) throws Throwable { String data ; data = " STRING " ;  { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ;  try { readerInputStream = new InputStreamReader ( System . in , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally { try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void good ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; goodB2G ( request , response ) ; } private void goodG2BSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( request , response ) ; } private void goodB2GSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = " STRING " ;   { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , " & " ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ;  if ( token . startsWith ( " id = " ) )  { data = token . substring ( 3 ) ;  break ;  } } } dataGoodB2G = data ; goodB2GSink ( request , response ) ; } goodpositive
public void goodG2BSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = CWE89_SQL_Injection__getQueryString_Servlet_prepareStatement_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = CWE89_SQL_Injection__getQueryString_Servlet_prepareStatement_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__getCookies_Servlet_executeBatch_67a . Container dataContainer , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataContainer . containerOne ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  public void goodB2GSink ( CWE89_SQL_Injection__getCookies_Servlet_executeBatch_67a . Container dataContainer , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataContainer . containerOne ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__File_prepareStatement_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__File_prepareStatement_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__Environment_prepareStatement_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__Environment_prepareStatement_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__PropertiesFile_execute_68a . data ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__PropertiesFile_execute_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( ) throws Throwable { String data ; data = " STRING " ;   { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( " . . /common/config . properties " ) ; properties . load ( streamFileInput ) ;  data = properties . getProperty ( " STRING " ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( streamFileInput ! = null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__database_prepareStatement_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__database_prepareStatement_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void good ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; goodB2G ( request , response ) ; } private void goodG2BSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataGoodG2B ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( request , response ) ; } private void goodB2GSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataGoodB2G ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  private void goodB2G ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = " STRING " ;   { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources ! = null ) {  data = cookieSources [ 0 ] . getValue ( ) ; } } dataGoodB2G = data ; goodB2GSink ( request , response ) ; } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__database_executeBatch_68a . data ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__database_executeBatch_68a . data ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__URLConnection_prepareStatement_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__URLConnection_prepareStatement_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__database_executeUpdate_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__database_executeUpdate_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__Property_executeUpdate_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__Property_executeUpdate_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( ) throws Throwable { String data ;   data = System . getProperty ( " user . home " ) ; dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__getCookies_Servlet_executeQuery_67a . Container dataContainer , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__getCookies_Servlet_executeQuery_67a . Container dataContainer , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( ) throws Throwable { String data ; data = " STRING " ;  { File file = new File ( " C:\\data . txt " ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try {  streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;   data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamFileInput ! = null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__URLConnection_executeQuery_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__URLConnection_executeQuery_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__getParameter_Servlet_executeQuery_67a . Container dataContainer , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__getParameter_Servlet_executeQuery_67a . Container dataContainer , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__Property_executeBatch_68a . data ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__Property_executeBatch_68a . data ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } goodpositive
public void good ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; goodB2G ( request , response ) ; } private void goodG2BSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( request , response ) ; } private void goodB2GSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = " STRING " ;   { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources ! = null ) {  data = cookieSources [ 0 ] . getValue ( ) ; } } dataGoodB2G = data ; goodB2GSink ( request , response ) ; } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__File_execute_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__File_execute_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void goodG2BSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = CWE89_SQL_Injection__getCookies_Servlet_execute_68a . data ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = CWE89_SQL_Injection__getCookies_Servlet_execute_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__listen_tcp_execute_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__listen_tcp_execute_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__File_executeQuery_68a . data ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__File_executeQuery_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__Property_executeUpdate_68a . data ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__Property_executeUpdate_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = CWE89_SQL_Injection__getParameter_Servlet_executeUpdate_68a . data ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = CWE89_SQL_Injection__getParameter_Servlet_executeUpdate_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( ) throws Throwable { String data ; data = " STRING " ;  { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ;  try { readerInputStream = new InputStreamReader ( System . in , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally { try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__console_readLine_execute_68a . data ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__console_readLine_execute_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__connect_tcp_executeBatch_68a . data ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__connect_tcp_executeBatch_68a . data ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__PropertiesFile_prepareStatement_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__PropertiesFile_prepareStatement_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void good ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; goodB2G ( request , response ) ; } private void goodG2BSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( request , response ) ; } private void goodB2GSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ;  data = request . getParameter ( " STRING " ) ; dataGoodB2G = data ; goodB2GSink ( request , response ) ; } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( ) throws Throwable { String data ; data = " STRING " ;   { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try {  socket = new Socket ( " host . example . org " , 39544 ) ;  readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; }  try { if ( socket ! = null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__Environment_executeUpdate_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__Environment_executeUpdate_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__File_prepareStatement_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__File_prepareStatement_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( ) throws Throwable { String data ;   data = System . getenv ( " STRING " ) ; dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( ) throws Throwable { String data ; data = " STRING " ;  { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ;  try { readerInputStream = new InputStreamReader ( System . in , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally { try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__Property_execute_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__Property_execute_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( ) throws Throwable { String data ; data = " STRING " ;   { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try {  connection = IO . getDBConnection ( ) ;  preparedStatement = connection . prepareStatement ( " select name from users where id = 0 " ) ; resultSet = preparedStatement . executeQuery ( ) ;  data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally {  try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( preparedStatement ! = null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( connection ! = null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__connect_tcp_execute_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__connect_tcp_execute_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = CWE89_SQL_Injection__getQueryString_Servlet_executeBatch_68a . data ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  public void goodB2GSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = CWE89_SQL_Injection__getQueryString_Servlet_executeBatch_68a . data ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__getQueryString_Servlet_execute_67a . Container dataContainer , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__getQueryString_Servlet_execute_67a . Container dataContainer , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__getCookies_Servlet_executeUpdate_67a . Container dataContainer , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__getCookies_Servlet_executeUpdate_67a . Container dataContainer , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__URLConnection_execute_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__URLConnection_execute_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__listen_tcp_executeBatch_68a . data ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__listen_tcp_executeBatch_68a . data ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__Environment_execute_68a . data ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__Environment_execute_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__PropertiesFile_executeBatch_68a . data ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__PropertiesFile_executeBatch_68a . data ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__Environment_executeQuery_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__Environment_executeQuery_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( ) throws Throwable { String data ; data = " STRING " ;   { URLConnection urlConnection = ( new URL ( " http://www . example . org/ " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;   data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void good ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; goodB2G ( request , response ) ; } private void goodG2BSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( request , response ) ; } private void goodB2GSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = " STRING " ;   { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources ! = null ) {  data = cookieSources [ 0 ] . getValue ( ) ; } } dataGoodB2G = data ; goodB2GSink ( request , response ) ; } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( ) throws Throwable { String data ; data = " STRING " ;   { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( " . . /common/config . properties " ) ; properties . load ( streamFileInput ) ;  data = properties . getProperty ( " STRING " ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( streamFileInput ! = null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( ) throws Throwable { String data ; data = " STRING " ;   { URLConnection urlConnection = ( new URL ( " http://www . example . org/ " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;   data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__listen_tcp_prepareStatement_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__listen_tcp_prepareStatement_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( ) throws Throwable { String data ;   data = System . getenv ( " STRING " ) ; dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void good ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; goodB2G ( request , response ) ; } private void goodG2BSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( request , response ) ; } private void goodB2GSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ;  data = request . getParameter ( " STRING " ) ; dataGoodB2G = data ; goodB2GSink ( request , response ) ; } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__URLConnection_executeUpdate_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__URLConnection_executeUpdate_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__console_readLine_executeBatch_68a . data ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__console_readLine_executeBatch_68a . data ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } goodpositive
public void goodG2BSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = CWE89_SQL_Injection__getQueryString_Servlet_executeUpdate_68a . data ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = CWE89_SQL_Injection__getQueryString_Servlet_executeUpdate_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( ) throws Throwable { String data ; data = " STRING " ;   { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( " . . /common/config . properties " ) ; properties . load ( streamFileInput ) ;  data = properties . getProperty ( " STRING " ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( streamFileInput ! = null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  private void goodB2G ( ) throws Throwable { String data ; data = " STRING " ;   { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( " . . /common/config . properties " ) ; properties . load ( streamFileInput ) ;  data = properties . getProperty ( " STRING " ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( streamFileInput ! = null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__Property_prepareStatement_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__Property_prepareStatement_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__PropertiesFile_executeQuery_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__PropertiesFile_executeQuery_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( ) throws Throwable { String data ; data = " STRING " ;  { File file = new File ( " C:\\data . txt " ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try {  streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;   data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamFileInput ! = null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( ) throws Throwable { String data ; data = " STRING " ;  { File file = new File ( " C:\\data . txt " ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try {  streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;   data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamFileInput ! = null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__Environment_executeBatch_68a . data ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__Environment_executeBatch_68a . data ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } goodpositive
public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( ) throws Throwable { String data ; data = " STRING " ;   { URLConnection urlConnection = ( new URL ( " http://www . example . org/ " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;   data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( ) throws Throwable { String data ;   data = System . getenv ( " STRING " ) ; dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__database_execute_68a . data ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__database_execute_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( ) throws Throwable { String data ;   data = System . getProperty ( " user . home " ) ; dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__listen_tcp_prepareStatement_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__listen_tcp_prepareStatement_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__console_readLine_executeBatch_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  public void goodB2GSink ( CWE89_SQL_Injection__console_readLine_executeBatch_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } goodpositive
public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( ) throws Throwable { String data ; data = " STRING " ;  { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ;  try { readerInputStream = new InputStreamReader ( System . in , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally { try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void good ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; goodB2G ( request , response ) ; } private void goodG2BSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataGoodG2B ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( request , response ) ; } private void goodB2GSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataGoodB2G ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  private void goodB2G ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = " STRING " ;   { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , " & " ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ;  if ( token . startsWith ( " id = " ) )  { data = token . substring ( 3 ) ;  break ;  } } } dataGoodB2G = data ; goodB2GSink ( request , response ) ; } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__getQueryString_Servlet_prepareStatement_67a . Container dataContainer , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__getQueryString_Servlet_prepareStatement_67a . Container dataContainer , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = CWE89_SQL_Injection__getQueryString_Servlet_executeQuery_68a . data ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = CWE89_SQL_Injection__getQueryString_Servlet_executeQuery_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = CWE89_SQL_Injection__getCookies_Servlet_executeBatch_68a . data ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  public void goodB2GSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = CWE89_SQL_Injection__getCookies_Servlet_executeBatch_68a . data ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__connect_tcp_executeQuery_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__connect_tcp_executeQuery_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__database_executeQuery_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__database_executeQuery_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( ) throws Throwable { String data ; data = " STRING " ;   { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( " . . /common/config . properties " ) ; properties . load ( streamFileInput ) ;  data = properties . getProperty ( " STRING " ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( streamFileInput ! = null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__File_executeBatch_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  public void goodB2GSink ( CWE89_SQL_Injection__File_executeBatch_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } goodpositive
public void goodG2BSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = CWE89_SQL_Injection__getCookies_Servlet_prepareStatement_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = CWE89_SQL_Injection__getCookies_Servlet_prepareStatement_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( ) throws Throwable { String data ; data = " STRING " ;   { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try {  connection = IO . getDBConnection ( ) ;  preparedStatement = connection . prepareStatement ( " select name from users where id = 0 " ) ; resultSet = preparedStatement . executeQuery ( ) ;  data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally {  try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( preparedStatement ! = null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( connection ! = null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( ) throws Throwable { String data ;   data = System . getProperty ( " user . home " ) ; dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__console_readLine_executeQuery_68a . data ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__console_readLine_executeQuery_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__File_execute_68a . data ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__File_execute_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__getQueryString_Servlet_executeBatch_67a . Container dataContainer , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataContainer . containerOne ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  public void goodB2GSink ( CWE89_SQL_Injection__getQueryString_Servlet_executeBatch_67a . Container dataContainer , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataContainer . containerOne ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__File_executeUpdate_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__File_executeUpdate_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__Property_executeQuery_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__Property_executeQuery_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__getParameter_Servlet_prepareStatement_67a . Container dataContainer , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__getParameter_Servlet_prepareStatement_67a . Container dataContainer , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( ) throws Throwable { String data ; data = " STRING " ;   { URLConnection urlConnection = ( new URL ( " http://www . example . org/ " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;   data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__console_readLine_prepareStatement_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__console_readLine_prepareStatement_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__getParameter_Servlet_executeUpdate_67a . Container dataContainer , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__getParameter_Servlet_executeUpdate_67a . Container dataContainer , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__console_readLine_executeUpdate_68a . data ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__console_readLine_executeUpdate_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__PropertiesFile_execute_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__PropertiesFile_execute_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__getParameter_Servlet_executeBatch_67a . Container dataContainer , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataContainer . containerOne ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  public void goodB2GSink ( CWE89_SQL_Injection__getParameter_Servlet_executeBatch_67a . Container dataContainer , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataContainer . containerOne ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__connect_tcp_executeUpdate_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__connect_tcp_executeUpdate_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__listen_tcp_executeQuery_68a . data ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__listen_tcp_executeQuery_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__getCookies_Servlet_execute_67a . Container dataContainer , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__getCookies_Servlet_execute_67a . Container dataContainer , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__connect_tcp_executeBatch_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  public void goodB2GSink ( CWE89_SQL_Injection__connect_tcp_executeBatch_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } goodpositive
public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  private void goodB2G ( ) throws Throwable { String data ;   data = System . getProperty ( " user . home " ) ; dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__Environment_prepareStatement_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__Environment_prepareStatement_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__URLConnection_executeBatch_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  public void goodB2GSink ( CWE89_SQL_Injection__URLConnection_executeBatch_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__PropertiesFile_executeUpdate_68a . data ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__PropertiesFile_executeUpdate_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__database_executeQuery_68a . data ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__database_executeQuery_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( ) throws Throwable { String data ; data = " STRING " ;   { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try {  socket = new Socket ( " host . example . org " , 39544 ) ;  readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; }  try { if ( socket ! = null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__connect_tcp_executeQuery_68a . data ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__connect_tcp_executeQuery_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void good ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; goodB2G ( request , response ) ; } private void goodG2BSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( request , response ) ; } private void goodB2GSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = " STRING " ;   { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , " & " ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ;  if ( token . startsWith ( " id = " ) )  { data = token . substring ( 3 ) ;  break ;  } } } dataGoodB2G = data ; goodB2GSink ( request , response ) ; } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__Property_executeQuery_68a . data ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__Property_executeQuery_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = CWE89_SQL_Injection__getParameter_Servlet_executeQuery_68a . data ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = CWE89_SQL_Injection__getParameter_Servlet_executeQuery_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( ) throws Throwable { String data ; data = " STRING " ;  { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ;  try { readerInputStream = new InputStreamReader ( System . in , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally { try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__listen_tcp_executeUpdate_68a . data ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__listen_tcp_executeUpdate_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  private void goodB2G ( ) throws Throwable { String data ; data = " STRING " ;  { File file = new File ( " C:\\data . txt " ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try {  streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;   data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamFileInput ! = null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__Environment_execute_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__Environment_execute_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__listen_tcp_executeBatch_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  public void goodB2GSink ( CWE89_SQL_Injection__listen_tcp_executeBatch_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__database_executeUpdate_68a . data ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__database_executeUpdate_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__URLConnection_executeQuery_68a . data ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__URLConnection_executeQuery_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__URLConnection_executeBatch_68a . data ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__URLConnection_executeBatch_68a . data ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__URLConnection_execute_68a . data ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__URLConnection_execute_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__Property_execute_68a . data ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__Property_execute_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  private void goodB2G ( ) throws Throwable { String data ;   data = System . getenv ( " STRING " ) ; dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__connect_tcp_prepareStatement_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__connect_tcp_prepareStatement_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void good ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { goodG2B ( request , response ) ; goodB2G ( request , response ) ; } private void goodG2BSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( request , response ) ; } private void goodB2GSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ;  data = request . getParameter ( " STRING " ) ; dataGoodB2G = data ; goodB2GSink ( request , response ) ; } goodpositive
public void goodG2BSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = CWE89_SQL_Injection__getParameter_Servlet_executeBatch_68a . data ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  public void goodB2GSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = CWE89_SQL_Injection__getParameter_Servlet_executeBatch_68a . data ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__URLConnection_executeUpdate_68a . data ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__URLConnection_executeUpdate_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__Environment_executeQuery_68a . data ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__Environment_executeQuery_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__listen_tcp_executeQuery_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__listen_tcp_executeQuery_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__database_prepareStatement_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__database_prepareStatement_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  private void goodB2G ( ) throws Throwable { String data ; data = " STRING " ;   { URLConnection urlConnection = ( new URL ( " http://www . example . org/ " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;   data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__Property_executeBatch_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  public void goodB2GSink ( CWE89_SQL_Injection__Property_executeBatch_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__URLConnection_prepareStatement_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__URLConnection_prepareStatement_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__listen_tcp_execute_68a . data ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__listen_tcp_execute_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__getParameter_Servlet_execute_67a . Container dataContainer , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__getParameter_Servlet_execute_67a . Container dataContainer , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( ) throws Throwable { String data ; data = " STRING " ;   { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ;  try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ;  readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; }  try { if ( socket ! = null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( listener ! = null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void goodG2BSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = CWE89_SQL_Injection__getCookies_Servlet_executeUpdate_68a . data ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = CWE89_SQL_Injection__getCookies_Servlet_executeUpdate_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  private void goodB2G ( ) throws Throwable { String data ; data = " STRING " ;   { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try {  socket = new Socket ( " host . example . org " , 39544 ) ;  readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; }  try { if ( socket ! = null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( ) throws Throwable { String data ; data = " STRING " ;   { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ;  try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ;  readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; }  try { if ( socket ! = null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( listener ! = null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( ) throws Throwable { String data ; data = " STRING " ;   { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try {  connection = IO . getDBConnection ( ) ;  preparedStatement = connection . prepareStatement ( " select name from users where id = 0 " ) ; resultSet = preparedStatement . executeQuery ( ) ;  data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally {  try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( preparedStatement ! = null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( connection ! = null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void goodG2BSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = CWE89_SQL_Injection__getQueryString_Servlet_execute_68a . data ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = CWE89_SQL_Injection__getQueryString_Servlet_execute_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__connect_tcp_execute_68a . data ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__connect_tcp_execute_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( ) throws Throwable { String data ; data = " STRING " ;  { File file = new File ( " C:\\data . txt " ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try {  streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;   data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamFileInput ! = null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void good ( ) throws Throwable { goodG2B ( ) ; goodB2G ( ) ; } private void goodG2BSink ( ) throws Throwable { String data = dataGoodG2B ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodG2B ( ) throws Throwable { String data ;  data = " STRING " ; dataGoodG2B = data ; goodG2BSink ( ) ; } private void goodB2GSink ( ) throws Throwable { String data = dataGoodB2G ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private void goodB2G ( ) throws Throwable { String data ; data = " STRING " ;   { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try {  socket = new Socket ( " host . example . org " , 39544 ) ;  readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; }  try { if ( socket ! = null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } dataGoodB2G = data ; goodB2GSink ( ) ; } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__console_readLine_execute_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary7 NormalConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__console_readLine_execute_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  public void goodB2GSink ( byte [ ] dataSerialized ) throws Throwable {  ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; try { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String data = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } catch ( ClassNotFoundException exceptClassNotFound ) { IO . logger . log ( Level . WARNING , " STRING " , exceptClassNotFound ) ; } finally {  try { if ( streamObjectInput ! = null ) { streamObjectInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamByteArrayInput ! = null ) { streamByteArrayInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__File_executeQuery_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary7 NormalConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__File_executeQuery_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__database_executeBatch_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary7 NormalConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  public void goodB2GSink ( CWE89_SQL_Injection__database_executeBatch_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " update users set hitcount = hitcount + 1 where name = ? " ) ; for ( int i = 0 ; i < names . length ; i + + ) { sqlStatement . setString ( 1 , names [ i ] ) ; sqlStatement . addBatch ( ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } goodpositive
public void goodG2BSink ( ) throws Throwable { String data = CWE89_SQL_Injection__Environment_executeUpdate_68a . data ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary7 NormalConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( ) throws Throwable { String data = CWE89_SQL_Injection__Environment_executeUpdate_68a . data ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void goodG2BSink ( CWE89_SQL_Injection__PropertiesFile_prepareStatement_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary7 NormalConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  public void goodB2GSink ( CWE89_SQL_Injection__PropertiesFile_prepareStatement_67a . Container dataContainer ) throws Throwable { String data = dataContainer . containerOne ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } goodpositive
public void bad ( ) throws Throwable { String data ; if ( privateReturnsTrue ( ) ) { data = " STRING " ;   { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( " . . /common/config . properties " ) ; properties . load ( streamFileInput ) ;  data = properties . getProperty ( " STRING " ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( streamFileInput ! = null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = null ; } if ( privateReturnsTrue ( ) ) { Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void badSink ( String data ) throws Throwable { Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = ( new CWE89_SQL_Injection__getCookies_Servlet_prepareStatement_61b ( ) ) . badSource ( request , response ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void badSink ( HashMap < Integer , String > dataHashMap ) throws Throwable { String data = dataHashMap . get ( 2 ) ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary5 HighConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void badSink ( String data ) throws Throwable { if ( CWE89_SQL_Injection__database_execute_22a . badPublicStatic ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } else {  data = null ; } } badpositive
public void badSink ( String data ) throws Throwable { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( true ) { data = " STRING " ;   { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources ! = null ) {  data = cookieSources [ 0 ] . getValue ( ) ; } } } else {  data = null ; } if ( true ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void badSink ( String data ) throws Throwable { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( IO . staticTrue ) { data = " STRING " ;   { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try {  socket = new Socket ( " host . example . org " , 39544 ) ;  readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; }  try { if ( socket ! = null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = null ; } if ( IO . staticTrue ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( privateFive = = 5 ) { data = " STRING " ;  { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ;  try { readerInputStream = new InputStreamReader ( System . in , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally { try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  } else {  data = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary5 HighConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FIVE = = 5 ) { data = " STRING " ;   { URLConnection urlConnection = ( new URL ( " http://www . example . org/ " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;   data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = null ; } if ( PRIVATE_STATIC_FINAL_FIVE = = 5 ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary5 HighConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( privateFive = = 5 ) { data = " STRING " ;   { URLConnection urlConnection = ( new URL ( " http://www . example . org/ " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;   data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary5 HighConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( privateTrue ) { data = " STRING " ;  { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ;  try { readerInputStream = new InputStreamReader ( System . in , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally { try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  } else {  data = null ; } if ( privateTrue ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary5 HighConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( privateTrue ) { data = " STRING " ;  { File file = new File ( " C:\\data . txt " ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try {  streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;   data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamFileInput ! = null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = null ; } if ( privateTrue ) { Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( ) throws Throwable { String dataCopy ; { String data ; data = " STRING " ;   { URLConnection urlConnection = ( new URL ( " http://www . example . org/ " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;   data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } dataCopy = data ; } { String data = dataCopy ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary5 HighConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( IO . staticReturnsTrue ( ) ) { data = " STRING " ;   { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try {  socket = new Socket ( " host . example . org " , 39544 ) ;  readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; }  try { if ( socket ! = null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = null ; } if ( IO . staticReturnsTrue ( ) ) { Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary5 HighConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void badSink ( HashMap < Integer , String > dataHashMap ) throws Throwable { String data = dataHashMap . get ( 2 ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void bad ( ) throws Throwable { String data ; data = " STRING " ;   { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try {  connection = IO . getDBConnection ( ) ;  preparedStatement = connection . prepareStatement ( " select name from users where id = 0 " ) ; resultSet = preparedStatement . executeQuery ( ) ;  data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally {  try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( preparedStatement ! = null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( connection ! = null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( privateTrue ) { data = " STRING " ;   { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , " & " ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ;  if ( token . startsWith ( " id = " ) )  { data = token . substring ( 3 ) ;  break ;  } } } } else {  data = null ; } if ( privateTrue ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary5 HighConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = badSource ( request , response ) ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private String goodG2BSource ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ;  data = " STRING " ; return data ; } badpositive
public void bad ( ) throws Throwable { String data ; if ( IO . staticTrue ) { data = " STRING " ;  { File file = new File ( " C:\\data . txt " ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try {  streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;   data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamFileInput ! = null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = null ; } if ( IO . staticTrue ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
private void badSink ( String data ) throws Throwable { Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } public void bad ( ) throws Throwable { String data ; data = " STRING " ;   { URLConnection urlConnection = ( new URL ( " http://www . example . org/ " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;   data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } badSink ( data ) ; } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . staticReturnsTrue ( ) ) { data = " STRING " ;   { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , " & " ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ;  if ( token . startsWith ( " id = " ) )  { data = token . substring ( 3 ) ;  break ;  } } } } else {  data = null ; } if ( IO . staticReturnsTrue ( ) ) { Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . staticTrue ) {  data = request . getParameter ( " STRING " ) ; } else {  data = null ; } if ( IO . staticTrue ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary5 HighConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void badSink ( String dataArray [ ] ) throws Throwable { String data = dataArray [ 2 ] ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary5 HighConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( ) throws Throwable { String data = badSource ( ) ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private String goodG2BSource ( ) throws Throwable { String data ;  data = " STRING " ; return data ; } badpositive
public void bad ( ) throws Throwable { String data ; data = " STRING " ;  { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ;  try { readerInputStream = new InputStreamReader ( System . in , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally { try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( privateReturnsTrue ( ) ) { data = " STRING " ;   { URLConnection urlConnection = ( new URL ( " http://www . example . org/ " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;   data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = null ; } if ( privateReturnsTrue ( ) ) { Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( IO . staticReturnsTrueOrFalse ( ) ) { data = " STRING " ;   { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try {  socket = new Socket ( " host . example . org " , 39544 ) ;  readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; }  try { if ( socket ! = null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = " STRING " ; } if ( IO . staticReturnsTrueOrFalse ( ) ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary5 HighConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } else { Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void badSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary5 HighConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . staticFive = = 5 ) {  data = request . getParameter ( " STRING " ) ; } else {  data = null ; } if ( IO . staticFive = = 5 ) { if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary5 HighConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } } badpositive
public void bad ( ) throws Throwable { String data ; while ( true ) { data = " STRING " ;   { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try {  socket = new Socket ( " host . example . org " , 39544 ) ;  readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; }  try { if ( socket ! = null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } break ; } while ( true ) { if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary5 HighConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } break ; } } badpositive
public void bad ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_TRUE ) { data = " STRING " ;   { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try {  connection = IO . getDBConnection ( ) ;  preparedStatement = connection . prepareStatement ( " select name from users where id = 0 " ) ; resultSet = preparedStatement . executeQuery ( ) ;  data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally {  try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( preparedStatement ! = null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( connection ! = null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } else {  data = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( IO . staticReturnsTrueOrFalse ( ) ) { data = " STRING " ;   { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try {  connection = IO . getDBConnection ( ) ;  preparedStatement = connection . prepareStatement ( " select name from users where id = 0 " ) ; resultSet = preparedStatement . executeQuery ( ) ;  data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally {  try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( preparedStatement ! = null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( connection ! = null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } else {  data = " STRING " ; } if ( IO . staticReturnsTrueOrFalse ( ) ) { Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary5 HighConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } else { Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( ) throws Throwable { String data ; data = " STRING " ;  { File file = new File ( " C:\\data . txt " ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try {  streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;   data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamFileInput ! = null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } badPrivate = true ; badSink ( data ) ; } private void badSink ( String data ) throws Throwable { if ( badPrivate ) { Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary5 HighConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  private boolean goodB2G1Private = false ; private boolean goodB2G2Private = false ; private boolean goodG2BPrivate = false ; badpositive
public void badSink ( Vector < String > dataVector , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataVector . remove ( 2 ) ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary5 HighConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
private void badSink ( String data ) throws Throwable { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } public void bad ( ) throws Throwable { String data ; data = " STRING " ;  { File file = new File ( " C:\\data . txt " ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try {  streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;   data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamFileInput ! = null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } badSink ( data ) ; } badpositive
public void bad ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_TRUE ) { data = " STRING " ;   { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( " . . /common/config . properties " ) ; properties . load ( streamFileInput ) ;  data = properties . getProperty ( " STRING " ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( streamFileInput ! = null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary5 HighConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( IO . staticReturnsTrueOrFalse ( ) ) { data = " STRING " ;  { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ;  try { readerInputStream = new InputStreamReader ( System . in , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally { try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  } else {  data = " STRING " ; } if ( IO . staticReturnsTrueOrFalse ( ) ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } else { Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( ) throws Throwable { String dataCopy ; { String data ; data = " STRING " ;  { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ;  try { readerInputStream = new InputStreamReader ( System . in , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally { try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  dataCopy = data ; } { String data = dataCopy ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary5 HighConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } } badpositive
public void badSink ( String dataArray [ ] , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataArray [ 2 ] ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FIVE = = 5 ) { data = " STRING " ;   { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , " & " ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ;  if ( token . startsWith ( " id = " ) )  { data = token . substring ( 3 ) ;  break ;  } } } } else {  data = null ; } if ( IO . STATIC_FINAL_FIVE = = 5 ) { if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary5 HighConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } } badpositive
public void badSink ( String data ) throws Throwable { if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary5 HighConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_TRUE ) { data = " STRING " ;   { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ;  try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ;  readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; }  try { if ( socket ! = null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( listener ! = null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = null ; } if ( IO . STATIC_FINAL_TRUE ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( ) throws Throwable { String data ;  data = " STRING " ;   { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ;  try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ;  readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; }  try { if ( socket ! = null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( listener ! = null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } for ( int j = 0 ; j < 1 ; j + + ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary5 HighConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = badSource ( request , response ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private String goodG2BSource ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ;  data = " STRING " ; return data ; } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FIVE = = 5 ) { data = " STRING " ;   { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources ! = null ) {  data = cookieSources [ 0 ] . getValue ( ) ; } } } else {  data = null ; } if ( PRIVATE_STATIC_FINAL_FIVE = = 5 ) { Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary5 HighConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( ) throws Throwable { String data ;  data = " STRING " ;   { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try {  connection = IO . getDBConnection ( ) ;  preparedStatement = connection . prepareStatement ( " select name from users where id = 0 " ) ; resultSet = preparedStatement . executeQuery ( ) ;  data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally {  try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( preparedStatement ! = null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( connection ! = null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } for ( int j = 0 ; j < 1 ; j + + ) { if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary5 HighConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = badSource ( request , response ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private String goodG2BSource ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ;  data = " STRING " ; return data ; } badpositive
public void bad ( ) throws Throwable { String data ; data = " STRING " ;   { URLConnection urlConnection = ( new URL ( " http://www . example . org/ " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;   data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void badSink ( HashMap < Integer , String > dataHashMap , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataHashMap . get ( 2 ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void badSink ( Vector < String > dataVector ) throws Throwable { String data = dataVector . remove ( 2 ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void bad ( ) throws Throwable { String data ; data = " STRING " ;   { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try {  socket = new Socket ( " host . example . org " , 39544 ) ;  readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; }  try { if ( socket ! = null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary5 HighConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void badSink ( String data ) throws Throwable { if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary5 HighConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( true ) {  data = request . getParameter ( " STRING " ) ; } else {  data = null ; } if ( true ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_TRUE ) { data = " STRING " ;   { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try {  socket = new Socket ( " host . example . org " , 39544 ) ;  readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; }  try { if ( socket ! = null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = null ; } if ( IO . STATIC_FINAL_TRUE ) { Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary5 HighConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void badSink ( Object dataObject ) throws Throwable { String data = ( String ) dataObject ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void bad ( ) throws Throwable { String data ;  data = " STRING " ;   { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( " . . /common/config . properties " ) ; properties . load ( streamFileInput ) ;  data = properties . getProperty ( " STRING " ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( streamFileInput ! = null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } for ( int j = 0 ; j < 1 ; j + + ) { Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary5 HighConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void badSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void badSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
private void badSink ( String data ) throws Throwable { Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } public void bad ( ) throws Throwable { String data ; data = " STRING " ;   { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( " . . /common/config . properties " ) ; properties . load ( streamFileInput ) ;  data = properties . getProperty ( " STRING " ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( streamFileInput ! = null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } badSink ( data ) ; } badpositive
public void badSink ( Vector < String > dataVector ) throws Throwable { String data = dataVector . remove ( 2 ) ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void bad ( ) throws Throwable { String data ; switch ( 6 ) { case 6: data = " STRING " ;  { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ;  try { readerInputStream = new InputStreamReader ( System . in , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally { try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  break ; default:  data = null ; break ; } switch ( 7 ) { case 7: Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } break ; default:  IO . writeLine ( " STRING " ) ; break ; } } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( privateTrue ) { data = " STRING " ;   { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , " & " ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ;  if ( token . startsWith ( " id = " ) )  { data = token . substring ( 3 ) ;  break ;  } } } } else {  data = null ; } if ( privateTrue ) { Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary5 HighConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( privateFive = = 5 ) { data = " STRING " ;  { File file = new File ( " C:\\data . txt " ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try {  streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;   data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamFileInput ! = null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( ) throws Throwable { String data ;  data = " STRING " ;   { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ;  try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ;  readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; }  try { if ( socket ! = null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( listener ! = null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } for ( int j = 0 ; j < 1 ; j + + ) { Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( privateFive = = 5 ) { data = " STRING " ;   { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ;  try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ;  readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; }  try { if ( socket ! = null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( listener ! = null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary5 HighConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void badSink ( Vector < String > dataVector ) throws Throwable { String data = dataVector . remove ( 2 ) ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary5 HighConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_TRUE ) { data = " STRING " ;  { File file = new File ( " C:\\data . txt " ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try {  streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;   data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamFileInput ! = null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary5 HighConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( ) throws Throwable { String dataCopy ; { String data ; data = " STRING " ;   { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ;  try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ;  readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; }  try { if ( socket ! = null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( listener ! = null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } dataCopy = data ; } { String data = dataCopy ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary5 HighConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } } badpositive
public void badSink ( String data ) throws Throwable { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void bad ( ) throws Throwable { String data ; data = " STRING " ;   { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( " . . /common/config . properties " ) ; properties . load ( streamFileInput ) ;  data = properties . getProperty ( " STRING " ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( streamFileInput ! = null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } badPrivate = true ; badSink ( data ) ; } private void badSink ( String data ) throws Throwable { if ( badPrivate ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary5 HighConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  private boolean goodB2G1Private = false ; private boolean goodB2G2Private = false ; private boolean goodG2BPrivate = false ; badpositive
public void badSink ( Vector < String > dataVector , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataVector . remove ( 2 ) ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary5 HighConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . STATIC_FINAL_TRUE ) { data = " STRING " ;   { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , " & " ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ;  if ( token . startsWith ( " id = " ) )  { data = token . substring ( 3 ) ;  break ;  } } } } else {  data = null ; } if ( IO . STATIC_FINAL_TRUE ) { Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . staticReturnsTrue ( ) ) { data = " STRING " ;   { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources ! = null ) {  data = cookieSources [ 0 ] . getValue ( ) ; } } } else {  data = null ; } if ( IO . staticReturnsTrue ( ) ) { Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void badSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { if ( CWE89_SQL_Injection__getQueryString_Servlet_execute_22a . badPublicStatic ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } else {  data = null ; } } badpositive
public void bad ( ) throws Throwable { String data ; if ( IO . staticTrue ) { data = " STRING " ;  { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ;  try { readerInputStream = new InputStreamReader ( System . in , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally { try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  } else {  data = null ; } if ( IO . staticTrue ) { Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary5 HighConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( ) throws Throwable { String data = ( new CWE89_SQL_Injection__database_executeQuery_61b ( ) ) . badSource ( ) ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary5 HighConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void badSink ( String data ) throws Throwable { Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
private void badSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary5 HighConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ;  data = request . getParameter ( " STRING " ) ; badSink ( data , request , response ) ; } badpositive
public void badSink ( Object dataObject , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = ( String ) dataObject ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( privateFive = = 5 ) {  data = request . getParameter ( " STRING " ) ; } else {  data = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary5 HighConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( privateFive = = 5 ) { data = " STRING " ;   { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( " . . /common/config . properties " ) ; properties . load ( streamFileInput ) ;  data = properties . getProperty ( " STRING " ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( streamFileInput ! = null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = null ; } if ( privateFive = = 5 ) { if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary5 HighConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } } badpositive
public void bad ( ) throws Throwable { String data ; switch ( 6 ) { case 6: data = " STRING " ;   { URLConnection urlConnection = ( new URL ( " http://www . example . org/ " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;   data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } break ; default:  data = null ; break ; } switch ( 7 ) { case 7: Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } break ; default:  IO . writeLine ( " STRING " ) ; break ; } } badpositive
public void bad ( ) throws Throwable { String data ; if ( 5 = = 5 ) { data = " STRING " ;   { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try {  connection = IO . getDBConnection ( ) ;  preparedStatement = connection . prepareStatement ( " select name from users where id = 0 " ) ; resultSet = preparedStatement . executeQuery ( ) ;  data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally {  try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( preparedStatement ! = null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( connection ! = null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } else {  data = null ; } if ( 5 = = 5 ) { if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary5 HighConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } } badpositive
public void badSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . staticFive = = 5 ) { data = " STRING " ;   { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources ! = null ) {  data = cookieSources [ 0 ] . getValue ( ) ; } } } else {  data = null ; } if ( IO . staticFive = = 5 ) { if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary5 HighConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = " STRING " ;   { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources ! = null ) {  data = cookieSources [ 0 ] . getValue ( ) ; } } Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary5 HighConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( IO . staticFive = = 5 ) { data = " STRING " ;   { URLConnection urlConnection = ( new URL ( " http://www . example . org/ " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;   data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = null ; } if ( IO . staticFive = = 5 ) { if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary5 HighConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } } badpositive
private void badSink ( String data ) throws Throwable { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } public void bad ( ) throws Throwable { String data ; data = " STRING " ;   { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try {  socket = new Socket ( " host . example . org " , 39544 ) ;  readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; }  try { if ( socket ! = null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } badSink ( data ) ; } badpositive
public void bad ( ) throws Throwable { String data ; if ( IO . staticTrue ) { data = " STRING " ;   { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( " . . /common/config . properties " ) ; properties . load ( streamFileInput ) ;  data = properties . getProperty ( " STRING " ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( streamFileInput ! = null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = null ; } if ( IO . staticTrue ) { if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary5 HighConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } } badpositive
public void badSink ( String data ) throws Throwable { Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void badSink ( String data ) throws Throwable { Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary5 HighConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . staticReturnsTrue ( ) ) { data = " STRING " ;   { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , " & " ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ;  if ( token . startsWith ( " id = " ) )  { data = token . substring ( 3 ) ;  break ;  } } } } else {  data = null ; } if ( IO . staticReturnsTrue ( ) ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void badSink ( String data ) throws Throwable { if ( CWE89_SQL_Injection__PropertiesFile_executeBatch_22a . badPublicStatic ) { if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary5 HighConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } else {  data = null ; } } badpositive
public void bad ( ) throws Throwable { String data ; switch ( 6 ) { case 6: data = " STRING " ;   { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try {  connection = IO . getDBConnection ( ) ;  preparedStatement = connection . prepareStatement ( " select name from users where id = 0 " ) ; resultSet = preparedStatement . executeQuery ( ) ;  data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally {  try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( preparedStatement ! = null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( connection ! = null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } break ; default:  data = null ; break ; } switch ( 7 ) { case 7: Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } break ; default:  IO . writeLine ( " STRING " ) ; break ; } } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; while ( true ) { data = " STRING " ;   { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources ! = null ) {  data = cookieSources [ 0 ] . getValue ( ) ; } } break ; } while ( true ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } break ; } } badpositive
public void bad ( ) throws Throwable { String data ; if ( privateFive = = 5 ) { data = " STRING " ;   { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try {  connection = IO . getDBConnection ( ) ;  preparedStatement = connection . prepareStatement ( " select name from users where id = 0 " ) ; resultSet = preparedStatement . executeQuery ( ) ;  data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally {  try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( preparedStatement ! = null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( connection ! = null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } else {  data = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary5 HighConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void badSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary5 HighConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . staticReturnsTrueOrFalse ( ) ) { data = " STRING " ;   { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources ! = null ) {  data = cookieSources [ 0 ] . getValue ( ) ; } } } else {  data = " STRING " ; } if ( IO . staticReturnsTrueOrFalse ( ) ) { Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } else { Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void badSink ( String data ) throws Throwable { if ( CWE89_SQL_Injection__File_prepareStatement_22a . badPublicStatic ) { Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } else {  data = null ; } } badpositive
public void bad ( ) throws Throwable { String data ; if ( privateReturnsTrue ( ) ) { data = " STRING " ;   { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ;  try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ;  readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; }  try { if ( socket ! = null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( listener ! = null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = null ; } if ( privateReturnsTrue ( ) ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( IO . staticReturnsTrue ( ) ) { data = " STRING " ;   { URLConnection urlConnection = ( new URL ( " http://www . example . org/ " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;   data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = null ; } if ( IO . staticReturnsTrue ( ) ) { Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void badSink ( Object dataObject ) throws Throwable { String data = ( String ) dataObject ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; switch ( 6 ) { case 6: data = " STRING " ;   { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources ! = null ) {  data = cookieSources [ 0 ] . getValue ( ) ; } } break ; default:  data = null ; break ; } switch ( 7 ) { case 7: Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary5 HighConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } break ; default:  IO . writeLine ( " STRING " ) ; break ; } } badpositive
public void badSink ( Object dataObject ) throws Throwable { String data = ( String ) dataObject ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void bad ( ) throws Throwable { String data = badSource ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private String goodG2BSource ( ) throws Throwable { String data ;  data = " STRING " ; return data ; } badpositive
public void bad ( ) throws Throwable { String data ; if ( privateReturnsTrue ( ) ) { data = " STRING " ;   { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( " . . /common/config . properties " ) ; properties . load ( streamFileInput ) ;  data = properties . getProperty ( " STRING " ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( streamFileInput ! = null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = null ; } if ( privateReturnsTrue ( ) ) { if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary5 HighConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( true ) { data = " STRING " ;   { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try {  connection = IO . getDBConnection ( ) ;  preparedStatement = connection . prepareStatement ( " select name from users where id = 0 " ) ; resultSet = preparedStatement . executeQuery ( ) ;  data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally {  try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( preparedStatement ! = null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( connection ! = null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } else {  data = null ; } if ( true ) { if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary5 HighConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } } badpositive
public void bad ( ) throws Throwable { String data = badSource ( ) ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private String goodG2BSource ( ) throws Throwable { String data ;  data = " STRING " ; return data ; } badpositive
public void bad ( ) throws Throwable { String data = badSource ( ) ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary5 HighConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private String goodG2BSource ( ) throws Throwable { String data ;  data = " STRING " ; return data ; } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FIVE = = 5 ) {  data = request . getParameter ( " STRING " ) ; } else {  data = null ; } if ( IO . STATIC_FINAL_FIVE = = 5 ) { if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary5 HighConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( privateTrue ) { data = " STRING " ;   { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try {  connection = IO . getDBConnection ( ) ;  preparedStatement = connection . prepareStatement ( " select name from users where id = 0 " ) ; resultSet = preparedStatement . executeQuery ( ) ;  data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally {  try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( preparedStatement ! = null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( connection ! = null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } else {  data = null ; } if ( privateTrue ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void badSink ( String data ) throws Throwable { if ( CWE89_SQL_Injection__listen_tcp_executeBatch_22a . badPublicStatic ) { if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary5 HighConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } else {  data = null ; } } badpositive
public void bad ( ) throws Throwable { String data ; if ( privateFive = = 5 ) { data = " STRING " ;   { URLConnection urlConnection = ( new URL ( " http://www . example . org/ " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;   data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; while ( true ) {  data = request . getParameter ( " STRING " ) ; break ; } while ( true ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } break ; } } badpositive
public void badSink ( Vector < String > dataVector ) throws Throwable { String data = dataVector . remove ( 2 ) ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( IO . staticReturnsTrue ( ) ) { data = " STRING " ;  { File file = new File ( " C:\\data . txt " ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try {  streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;   data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamFileInput ! = null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = null ; } if ( IO . staticReturnsTrue ( ) ) { if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary5 HighConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } } badpositive
public void badSink ( LinkedList < String > dataLinkedList , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataLinkedList . remove ( 2 ) ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void badSink ( String data ) throws Throwable { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary5 HighConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
private void badSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = " STRING " ;   { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , " & " ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ;  if ( token . startsWith ( " id = " ) )  { data = token . substring ( 3 ) ;  break ;  } } } badSink ( data , request , response ) ; } badpositive
public void bad ( ) throws Throwable { String data ; data = " STRING " ;  { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ;  try { readerInputStream = new InputStreamReader ( System . in , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally { try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  badPrivate = true ; badSink ( data ) ; } private void badSink ( String data ) throws Throwable { if ( badPrivate ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary5 HighConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  private boolean goodB2G1Private = false ; private boolean goodB2G2Private = false ; private boolean goodG2BPrivate = false ; badpositive
public void badSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { if ( CWE89_SQL_Injection__getCookies_Servlet_executeQuery_22a . badPublicStatic ) { Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary5 HighConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } else {  data = null ; } } badpositive
public void badSink ( LinkedList < String > dataLinkedList ) throws Throwable { String data = dataLinkedList . remove ( 2 ) ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary5 HighConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( IO . staticReturnsTrueOrFalse ( ) ) { data = " STRING " ;   { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( " . . /common/config . properties " ) ; properties . load ( streamFileInput ) ;  data = properties . getProperty ( " STRING " ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( streamFileInput ! = null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = " STRING " ; } if ( IO . staticReturnsTrueOrFalse ( ) ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } else { Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( true ) { data = " STRING " ;   { URLConnection urlConnection = ( new URL ( " http://www . example . org/ " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;   data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = null ; } if ( true ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( privateReturnsTrue ( ) ) { data = " STRING " ;   { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , " & " ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ;  if ( token . startsWith ( " id = " ) )  { data = token . substring ( 3 ) ;  break ;  } } } } else {  data = null ; } if ( privateReturnsTrue ( ) ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( IO . staticReturnsTrueOrFalse ( ) ) { data = " STRING " ;   { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ;  try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ;  readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; }  try { if ( socket ! = null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( listener ! = null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = " STRING " ; } if ( IO . staticReturnsTrueOrFalse ( ) ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } else { Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String dataCopy ; { String data ; data = " STRING " ;   { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources ! = null ) {  data = cookieSources [ 0 ] . getValue ( ) ; } } dataCopy = data ; } { String data = dataCopy ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary5 HighConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( IO . staticReturnsTrueOrFalse ( ) ) { data = " STRING " ;   { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try {  socket = new Socket ( " host . example . org " , 39544 ) ;  readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; }  try { if ( socket ! = null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = " STRING " ; } if ( IO . staticReturnsTrueOrFalse ( ) ) { Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary5 HighConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } else { Connection dbConnection = null ; PreparedStatement sqlStatement = null ; ResultSet resultSet = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " select * from users where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; resultSet = sqlStatement . executeQuery ( ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void badSink ( Object dataObject ) throws Throwable { String data = ( String ) dataObject ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary5 HighConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
private void badSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = " STRING " ;   { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , " & " ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ;  if ( token . startsWith ( " id = " ) )  { data = token . substring ( 3 ) ;  break ;  } } } badSink ( data , request , response ) ; } badpositive
public void badSink ( Object dataObject ) throws Throwable { String data = ( String ) dataObject ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( IO . staticFive = = 5 ) { data = " STRING " ;   { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try {  socket = new Socket ( " host . example . org " , 39544 ) ;  readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; }  try { if ( socket ! = null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = null ; } if ( IO . staticFive = = 5 ) { Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void badSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { if ( CWE89_SQL_Injection__getCookies_Servlet_executeUpdate_22a . badPublicStatic ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary5 HighConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } else {  data = null ; } } badpositive
public void badSink ( String data ) throws Throwable { Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary5 HighConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( privateFive = = 5 ) { data = " STRING " ;   { URLConnection urlConnection = ( new URL ( " http://www . example . org/ " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;   data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary5 HighConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( ) throws Throwable { String data ; while ( true ) { data = " STRING " ;   { URLConnection urlConnection = ( new URL ( " http://www . example . org/ " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;   data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } break ; } while ( true ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } break ; } } badpositive
public void bad ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_TRUE ) { data = " STRING " ;  { File file = new File ( " C:\\data . txt " ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try {  streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;   data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamFileInput ! = null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( IO . staticReturnsTrue ( ) ) { data = " STRING " ;   { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( " . . /common/config . properties " ) ; properties . load ( streamFileInput ) ;  data = properties . getProperty ( " STRING " ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( streamFileInput ! = null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = null ; } if ( IO . staticReturnsTrue ( ) ) { Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_TRUE ) { data = " STRING " ;  { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ;  try { readerInputStream = new InputStreamReader ( System . in , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally { try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  } else {  data = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary5 HighConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( true ) { data = " STRING " ;   { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ;  try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ;  readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; }  try { if ( socket ! = null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( listener ! = null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = null ; } if ( true ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary5 HighConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void badSink ( String data ) throws Throwable { Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( IO . staticTrue ) { data = " STRING " ;   { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ;  try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ;  readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; }  try { if ( socket ! = null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( listener ! = null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = null ; } if ( IO . staticTrue ) { Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary5 HighConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void badSink ( String data ) throws Throwable { if ( CWE89_SQL_Injection__PropertiesFile_execute_22a . badPublicStatic ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } else {  data = null ; } } badpositive
public void bad ( ) throws Throwable { String data ; if ( privateFive = = 5 ) { data = " STRING " ;   { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( " . . /common/config . properties " ) ; properties . load ( streamFileInput ) ;  data = properties . getProperty ( " STRING " ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( streamFileInput ! = null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void badSink ( Vector < String > dataVector , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataVector . remove ( 2 ) ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = " STRING " ;   { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , " & " ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ;  if ( token . startsWith ( " id = " ) )  { data = token . substring ( 3 ) ;  break ;  } } } badPrivate = true ; badSink ( data , request , response ) ; } private void badSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { if ( badPrivate ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary5 HighConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  private boolean goodB2G1Private = false ; private boolean goodB2G2Private = false ; private boolean goodG2BPrivate = false ; badpositive
public void badSink ( String data ) throws Throwable { Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary5 HighConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . staticReturnsTrue ( ) ) {  data = request . getParameter ( " STRING " ) ; } else {  data = null ; } if ( IO . staticReturnsTrue ( ) ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary5 HighConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( ) throws Throwable { String data ; while ( true ) { data = " STRING " ;   { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ;  try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ;  readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; }  try { if ( socket ! = null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( listener ! = null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } break ; } while ( true ) { Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } break ; } } badpositive
public void bad ( ) throws Throwable { String data ; if ( privateTrue ) { data = " STRING " ;  { File file = new File ( " C:\\data . txt " ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try {  streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;   data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamFileInput ! = null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = null ; } if ( privateTrue ) { Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary5 HighConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( 5 = = 5 ) { data = " STRING " ;   { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( " . . /common/config . properties " ) ; properties . load ( streamFileInput ) ;  data = properties . getProperty ( " STRING " ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( streamFileInput ! = null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = null ; } if ( 5 = = 5 ) { Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary5 HighConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( privateFive = = 5 ) {  data = request . getParameter ( " STRING " ) ; } else {  data = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary5 HighConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( privateReturnsTrue ( ) ) { data = " STRING " ;   { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try {  socket = new Socket ( " host . example . org " , 39544 ) ;  readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; }  try { if ( socket ! = null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = null ; } if ( privateReturnsTrue ( ) ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . STATIC_FINAL_TRUE ) { data = " STRING " ;   { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , " & " ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ;  if ( token . startsWith ( " id = " ) )  { data = token . substring ( 3 ) ;  break ;  } } } } else {  data = null ; } if ( IO . STATIC_FINAL_TRUE ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void badSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary5 HighConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void badSink ( String dataArray [ ] ) throws Throwable { String data = dataArray [ 2 ] ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( true ) { data = " STRING " ;   { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ;  try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ;  readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; }  try { if ( socket ! = null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( listener ! = null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = null ; } if ( true ) { Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void badSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary5 HighConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . staticTrue ) { data = " STRING " ;   { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , " & " ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ;  if ( token . startsWith ( " id = " ) )  { data = token . substring ( 3 ) ;  break ;  } } } } else {  data = null ; } if ( IO . staticTrue ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_TRUE ) { data = " STRING " ;  { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ;  try { readerInputStream = new InputStreamReader ( System . in , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally { try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  } else {  data = null ; } if ( IO . STATIC_FINAL_TRUE ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void badSink ( Object dataObject , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = ( String ) dataObject ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_TRUE ) { data = " STRING " ;  { File file = new File ( " C:\\data . txt " ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try {  streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;   data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamFileInput ! = null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = null ; } if ( IO . STATIC_FINAL_TRUE ) { if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary5 HighConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } } badpositive
public void badSink ( String data ) throws Throwable { Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary5 HighConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = " STRING " ;   { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources ! = null ) {  data = cookieSources [ 0 ] . getValue ( ) ; } } Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void badSink ( String data ) throws Throwable { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary5 HighConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void badSink ( HashMap < Integer , String > dataHashMap ) throws Throwable { String data = dataHashMap . get ( 2 ) ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void bad ( ) throws Throwable { String data = ( new CWE89_SQL_Injection__URLConnection_executeQuery_61b ( ) ) . badSource ( ) ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary5 HighConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void badSink ( String data ) throws Throwable { if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary5 HighConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = badSource ( request , response ) ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary5 HighConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private String goodG2BSource ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ;  data = " STRING " ; return data ; } badpositive
public void bad ( ) throws Throwable { String data ; if ( IO . staticFive = = 5 ) { data = " STRING " ;  { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ;  try { readerInputStream = new InputStreamReader ( System . in , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally { try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  } else {  data = null ; } if ( IO . staticFive = = 5 ) { if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary5 HighConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( IO . staticFive = = 5 ) { data = " STRING " ;   { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try {  connection = IO . getDBConnection ( ) ;  preparedStatement = connection . prepareStatement ( " select name from users where id = 0 " ) ; resultSet = preparedStatement . executeQuery ( ) ;  data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally {  try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( preparedStatement ! = null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( connection ! = null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } else {  data = null ; } if ( IO . staticFive = = 5 ) { Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( ) throws Throwable { String data ; while ( true ) { data = " STRING " ;   { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ;  try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ;  readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; }  try { if ( socket ! = null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( listener ! = null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } break ; } while ( true ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary5 HighConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } break ; } } badpositive
public void badSink ( String data ) throws Throwable { if ( CWE89_SQL_Injection__URLConnection_execute_22a . badPublicStatic ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } else {  data = null ; } } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = ( new CWE89_SQL_Injection__getParameter_Servlet_executeQuery_61b ( ) ) . badSource ( request , response ) ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary5 HighConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( privateReturnsTrue ( ) ) { data = " STRING " ;   { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ;  try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ;  readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; }  try { if ( socket ! = null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( listener ! = null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = null ; } if ( privateReturnsTrue ( ) ) { Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary5 HighConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void badSink ( HashMap < Integer , String > dataHashMap ) throws Throwable { String data = dataHashMap . get ( 2 ) ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary5 HighConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( privateReturnsTrue ( ) ) { data = " STRING " ;  { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ;  try { readerInputStream = new InputStreamReader ( System . in , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally { try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  } else {  data = null ; } if ( privateReturnsTrue ( ) ) { Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary5 HighConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void badSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { if ( CWE89_SQL_Injection__getQueryString_Servlet_prepareStatement_22a . badPublicStatic ) { Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } else {  data = null ; } } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_TRUE ) {  data = request . getParameter ( " STRING " ) ; } else {  data = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void badSink ( String dataArray [ ] ) throws Throwable { String data = dataArray [ 2 ] ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary5 HighConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( privateReturnsTrue ( ) ) { data = " STRING " ;  { File file = new File ( " C:\\data . txt " ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try {  streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;   data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamFileInput ! = null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = null ; } if ( privateReturnsTrue ( ) ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( IO . staticReturnsTrue ( ) ) { data = " STRING " ;  { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ;  try { readerInputStream = new InputStreamReader ( System . in , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally { try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  } else {  data = null ; } if ( IO . staticReturnsTrue ( ) ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( IO . staticFive = = 5 ) { data = " STRING " ;   { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ;  try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ;  readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; }  try { if ( socket ! = null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( listener ! = null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = null ; } if ( IO . staticFive = = 5 ) { if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary5 HighConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } } badpositive
public void bad ( ) throws Throwable { String data ; data = " STRING " ;   { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try {  connection = IO . getDBConnection ( ) ;  preparedStatement = connection . prepareStatement ( " select name from users where id = 0 " ) ; resultSet = preparedStatement . executeQuery ( ) ;  data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally {  try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( preparedStatement ! = null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( connection ! = null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badPrivate = true ; badSink ( data ) ; } private void badSink ( String data ) throws Throwable { if ( badPrivate ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  private boolean goodB2G1Private = false ; private boolean goodB2G2Private = false ; private boolean goodG2BPrivate = false ; badpositive
public void bad ( ) throws Throwable { String data ; if ( true ) { data = " STRING " ;   { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try {  socket = new Socket ( " host . example . org " , 39544 ) ;  readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; }  try { if ( socket ! = null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = null ; } if ( true ) { if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary5 HighConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } } badpositive
public void bad ( ) throws Throwable { String data = badSource ( ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private String goodG2BSource ( ) throws Throwable { String data ;  data = " STRING " ; return data ; } badpositive
public void badSink ( Vector < String > dataVector , HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = dataVector . remove ( 2 ) ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary5 HighConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FIVE = = 5 ) { data = " STRING " ;  { File file = new File ( " C:\\data . txt " ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try {  streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;   data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamFileInput ! = null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = null ; } if ( IO . STATIC_FINAL_FIVE = = 5 ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary5 HighConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void badSink ( String data ) throws Throwable { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void bad ( ) throws Throwable { String data = badSource ( ) ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary5 HighConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private String goodG2BSource ( ) throws Throwable { String data ;  data = " STRING " ; return data ; } badpositive
public void badSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void badSink ( Vector < String > dataVector ) throws Throwable { String data = dataVector . remove ( 2 ) ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void bad ( ) throws Throwable { String data ;  data = " STRING " ;   { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try {  connection = IO . getDBConnection ( ) ;  preparedStatement = connection . prepareStatement ( " select name from users where id = 0 " ) ; resultSet = preparedStatement . executeQuery ( ) ;  data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally {  try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( preparedStatement ! = null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( connection ! = null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } for ( int j = 0 ; j < 1 ; j + + ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( ) throws Throwable { String data ; data = " STRING " ;   { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try {  connection = IO . getDBConnection ( ) ;  preparedStatement = connection . prepareStatement ( " select name from users where id = 0 " ) ; resultSet = preparedStatement . executeQuery ( ) ;  data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally {  try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( preparedStatement ! = null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( connection ! = null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badPrivate = true ; badSink ( data ) ; } private void badSink ( String data ) throws Throwable { if ( badPrivate ) { if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary5 HighConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } }  private boolean goodB2G1Private = false ; private boolean goodB2G2Private = false ; private boolean goodG2BPrivate = false ; badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_FIVE = = 5 ) {  data = request . getParameter ( " STRING " ) ; } else {  data = null ; } if ( PRIVATE_STATIC_FINAL_FIVE = = 5 ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary5 HighConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = ( new CWE89_SQL_Injection__getParameter_Servlet_prepareStatement_61b ( ) ) . badSource ( request , response ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( IO . staticTrue ) { data = " STRING " ;   { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources ! = null ) {  data = cookieSources [ 0 ] . getValue ( ) ; } } } else {  data = null ; } if ( IO . staticTrue ) { Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary5 HighConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void badSink ( String dataArray [ ] ) throws Throwable { String data = dataArray [ 2 ] ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_FIVE = = 5 ) { data = " STRING " ;  { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ;  try { readerInputStream = new InputStreamReader ( System . in , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally { try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  } else {  data = null ; } if ( IO . STATIC_FINAL_FIVE = = 5 ) { if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary5 HighConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } } badpositive
public void badSink ( Object dataObject ) throws Throwable { String data = ( String ) dataObject ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( IO . staticReturnsTrueOrFalse ( ) ) { data = " STRING " ;   { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( " . . /common/config . properties " ) ; properties . load ( streamFileInput ) ;  data = properties . getProperty ( " STRING " ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( streamFileInput ! = null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = " STRING " ; } if ( IO . staticReturnsTrueOrFalse ( ) ) { Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } else { Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void badSink ( String data ) throws Throwable { Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary5 HighConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String dataCopy ; { String data ; data = " STRING " ;   { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources ! = null ) {  data = cookieSources [ 0 ] . getValue ( ) ; } } dataCopy = data ; } { String data = dataCopy ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary5 HighConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( ) throws Throwable { String data ; if ( privateReturnsTrue ( ) ) { data = " STRING " ;  { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ;  try { readerInputStream = new InputStreamReader ( System . in , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally { try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  } else {  data = null ; } if ( privateReturnsTrue ( ) ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( ) throws Throwable { String data ; while ( true ) { data = " STRING " ;  { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ;  try { readerInputStream = new InputStreamReader ( System . in , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally { try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } }  break ; } while ( true ) { if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary5 HighConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } break ; } } badpositive
public void bad ( ) throws Throwable { String data ; data = " STRING " ;   { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ;  try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ;  readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; }  try { if ( socket ! = null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( listener ! = null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data = badSource ( request , response ) ; if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary5 HighConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } }  private String goodG2BSource ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ;  data = " STRING " ; return data ; } badpositive
public void badSink ( Vector < String > dataVector ) throws Throwable { String data = dataVector . remove ( 2 ) ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary5 HighConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void badSink ( String data ) throws Throwable { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
private void badSink ( String data ) throws Throwable { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary5 HighConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } public void bad ( ) throws Throwable { String data ; data = " STRING " ;   { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try {  connection = IO . getDBConnection ( ) ;  preparedStatement = connection . prepareStatement ( " select name from users where id = 0 " ) ; resultSet = preparedStatement . executeQuery ( ) ;  data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally {  try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( preparedStatement ! = null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( connection ! = null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badSink ( data ) ; } badpositive
public void badSink ( HashMap < Integer , String > dataHashMap ) throws Throwable { String data = dataHashMap . get ( 2 ) ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void badSink ( String data ) throws Throwable { if ( CWE89_SQL_Injection__PropertiesFile_executeQuery_22a . badPublicStatic ) { Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary5 HighConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } else {  data = null ; } } badpositive
public void bad ( ) throws Throwable { String data ; if ( IO . STATIC_FINAL_TRUE ) { data = " STRING " ;   { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; try {  socket = new Socket ( " host . example . org " , 39544 ) ;  readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; }  try { if ( socket ! = null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = null ; } if ( IO . STATIC_FINAL_TRUE ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ;  data = request . getParameter ( " STRING " ) ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void badSink ( String data ) throws Throwable { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary5 HighConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; switch ( 6 ) { case 6: data = " STRING " ;   { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources ! = null ) {  data = cookieSources [ 0 ] . getValue ( ) ; } } break ; default:  data = null ; break ; } switch ( 7 ) { case 7: Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } break ; default:  IO . writeLine ( " STRING " ) ; break ; } } badpositive
public void badSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { if ( CWE89_SQL_Injection__getQueryString_Servlet_executeBatch_22a . badPublicStatic ) { if ( data ! = null ) { String names [ ] = data . split ( " - " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < names . length ; i + + ) {  WARNINGLINE Statement . addBatch Scary5 HighConfidence sqlStatement . addBatch ( " update users set hitcount = hitcount + 1 where name = ' " + names [ i ] + " ' " ) ; } int resultsArray [ ] = sqlStatement . executeBatch ( ) ; for ( int i = 0 ; i < names . length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + names . length + " queries . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } else {  data = null ; } } badpositive
private void badSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary5 HighConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; data = " STRING " ;   { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources ! = null ) {  data = cookieSources [ 0 ] . getValue ( ) ; } } badSink ( data , request , response ) ; } badpositive
public void badSink ( LinkedList < String > dataLinkedList ) throws Throwable { String data = dataLinkedList . remove ( 2 ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void badSink ( Vector < String > dataVector ) throws Throwable { String data = dataVector . remove ( 2 ) ; Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; switch ( 6 ) { case 6:  data = request . getParameter ( " STRING " ) ; break ; default:  data = null ; break ; } switch ( 7 ) { case 7: Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } break ; default:  IO . writeLine ( " STRING " ) ; break ; } } badpositive
public void bad ( ) throws Throwable { String data ; if ( IO . staticReturnsTrueOrFalse ( ) ) { data = " STRING " ;  { File file = new File ( " C:\\data . txt " ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try {  streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;   data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamFileInput ! = null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = " STRING " ; } if ( IO . staticReturnsTrueOrFalse ( ) ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary5 HighConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } else { Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ? " ) ; sqlStatement . setString ( 1 , data ) ; int rowCount = sqlStatement . executeUpdate ( ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( ) throws Throwable { String data ; switch ( 6 ) { case 6: data = " STRING " ;  { File file = new File ( " C:\\data . txt " ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try {  streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;   data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( streamFileInput ! = null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } break ; default:  data = null ; break ; } switch ( 7 ) { case 7: Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary5 HighConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } break ; default:  IO . writeLine ( " STRING " ) ; break ; } } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_TRUE ) {  data = request . getParameter ( " STRING " ) ; } else {  data = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . execute Scary5 HighConfidence Boolean result = sqlStatement . execute ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void badSink ( HashMap < Integer , String > dataHashMap ) throws Throwable { String data = dataHashMap . get ( 2 ) ; Connection dbConnection = null ; Statement sqlStatement = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeUpdate Scary5 HighConfidence int rowCount = sqlStatement . executeUpdate ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; IO . writeLine ( " STRING " + rowCount + " rows successfully . " ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } badpositive
private void badSink ( String data , HttpServletRequest request , HttpServletResponse response ) throws Throwable { Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary5 HighConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ;  data = request . getParameter ( " STRING " ) ; badSink ( data , request , response ) ; } badpositive
public void bad ( ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_TRUE ) { data = " STRING " ;   { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ;  try { listener = new ServerSocket ( 39543 ) ; socket = listener . accept ( ) ;  readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " UTF - 8 " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ;  data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( readerBuffered ! = null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( readerInputStream ! = null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; }  try { if ( socket ! = null ) { socket . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } try { if ( listener ! = null ) { listener . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } } else {  data = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( ) throws Throwable { String data ; switch ( 6 ) { case 6: data = " STRING " ;   { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; try { streamFileInput = new FileInputStream ( " . . /common/config . properties " ) ; properties . load ( streamFileInput ) ;  data = properties . getProperty ( " STRING " ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } finally {  try { if ( streamFileInput ! = null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , " STRING " , exceptIO ) ; } } } break ; default:  data = null ; break ; } switch ( 7 ) { case 7: Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary5 HighConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } break ; default:  IO . writeLine ( " STRING " ) ; break ; } } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( privateFive = = 5 ) { data = " STRING " ;   { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , " & " ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ;  if ( token . startsWith ( " id = " ) )  { data = token . substring ( 3 ) ;  break ;  } } } } else {  data = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary5 HighConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( ) throws Throwable { String data = badSource ( ) ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary5 HighConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } }  private String goodG2BSource ( ) throws Throwable { String data ;  data = " STRING " ; return data ; } badpositive
public void bad ( HttpServletRequest request , HttpServletResponse response ) throws Throwable { String data ; if ( PRIVATE_STATIC_FINAL_TRUE ) { data = " STRING " ;   { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , " & " ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ;  if ( token . startsWith ( " id = " ) )  { data = token . substring ( 3 ) ;  break ;  } } } } else {  data = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet resultSet = null ; try { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ;  WARNINGLINE Statement . executeQuery Scary5 HighConfidence resultSet = sqlStatement . executeQuery ( " select * from users where name = ' " STRING " ' " ) ; IO . writeLine ( resultSet . getRow ( ) ) ;  } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
public void bad ( ) throws Throwable { String data ;  data = " STRING " ;   { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; try {  connection = IO . getDBConnection ( ) ;  preparedStatement = connection . prepareStatement ( " select name from users where id = 0 " ) ; resultSet = preparedStatement . executeQuery ( ) ;  data = resultSet . getString ( 1 ) ; } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally {  try { if ( resultSet ! = null ) { resultSet . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( preparedStatement ! = null ) { preparedStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( connection ! = null ) { connection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } for ( int j = 0 ; j < 1 ; j + + ) { Connection dbConnection = null ; PreparedStatement sqlStatement = null ; try {  dbConnection = IO . getDBConnection ( ) ; WARNINGLINE Connection . prepareStatement Scary5 HighConfidence sqlStatement = dbConnection . prepareStatement ( " insert into users ( status ) values ( ' updated ' ) where name = ' " STRING " ' " ) ; Boolean result = sqlStatement . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + data + " STRING " ) ; } else { IO . writeLine ( " Unable to update records for user: " + data ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } finally { try { if ( sqlStatement ! = null ) { sqlStatement . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } try { if ( dbConnection ! = null ) { dbConnection . close ( ) ; } } catch ( SQLException exceptSql ) { IO . logger . log ( Level . WARNING , " STRING " , exceptSql ) ; } } } } badpositive
