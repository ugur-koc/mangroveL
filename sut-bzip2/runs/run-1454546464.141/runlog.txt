===< 23980 >===
running 2 interestingness tests in parallel
===< pass_includes :: 0 >===
113d112
< #include <stdio.h>
116d115
< #   include <windows.h>
329d328
< #include <stdlib.h>
332d331
< #include <stdio.h>
(0.0 %, 204912 bytes)
328d327
< #include <stdlib.h>
331d330
< #include <stdio.h>
332d331
< #include <ctype.h>
(0.0 %, 204893 bytes)
331d330
< #include <ctype.h>
332d331
< #include <string.h>
(0.0 %, 204874 bytes)
331d330
< #include <string.h>
5052d5051
< #include <stdio.h>
5053d5052
< #include <stdlib.h>
(0.0 %, 204854 bytes)
5051d5050
< #include <stdio.h>
5052d5051
< #include <stdlib.h>
5053d5052
< #include <string.h>
(0.0 %, 204835 bytes)
5051d5050
< #include <stdlib.h>
5052d5051
< #include <string.h>
5053d5052
< #include <signal.h>
(0.1 %, 204815 bytes)
5051d5050
< #include <string.h>
5052d5051
< #include <signal.h>
5053d5052
< #include <math.h>
(0.1 %, 204795 bytes)
5051d5050
< #include <signal.h>
5052d5051
< #include <math.h>
5053d5052
< #include <errno.h>
5054d5053
< #include <ctype.h>
5067d5066
< #   include <fcntl.h>
(0.1 %, 204777 bytes)
5052d5051
< #include <errno.h>
5053d5052
< #include <ctype.h>
5066d5065
< #   include <fcntl.h>
5067d5066
< #   include <sys/types.h>
5068d5067
< #   include <utime.h>
5069d5068
< #   include <unistd.h>
(0.1 %, 204758 bytes)
5065d5064
< #   include <fcntl.h>
5066d5065
< #   include <sys/types.h>
5067d5066
< #   include <utime.h>
5068d5067
< #   include <unistd.h>
5069d5068
< #   include <sys/stat.h>
(0.1 %, 204732 bytes)
5066d5065
< #   include <utime.h>
5067d5066
< #   include <unistd.h>
5068d5067
< #   include <sys/stat.h>
(0.1 %, 204709 bytes)
5067d5066
< #   include <sys/stat.h>
5068d5067
< #   include <sys/times.h>
5091d5090
< #     include <io.h>
(0.1 %, 204684 bytes)
5067d5066
< #   include <sys/times.h>
5090d5089
< #     include <io.h>
(0.1 %, 204658 bytes)
5089d5088
< #     include <io.h>
5090d5089
< #     include <fcntl.h>
5105d5104
< #     include <io.h>
(0.1 %, 204637 bytes)
5089d5088
< #     include <fcntl.h>
5104d5103
< #     include <io.h>
5105d5104
< #     include <fcntl.h>
(0.2 %, 204613 bytes)
5103d5102
< #     include <io.h>
5104d5103
< #     include <fcntl.h>
5118d5117
< #   include <io.h>
(0.2 %, 204592 bytes)
5103d5102
< #     include <fcntl.h>
5117d5116
< #   include <io.h>
(0.2 %, 204568 bytes)
5116d5115
< #   include <io.h>
5117d5116
< #   include <fcntl.h>
5118d5117
< #   include <sys\stat.h>
(0.2 %, 204549 bytes)
5116d5115
< #   include <fcntl.h>
5117d5116
< #   include <sys\stat.h>
(0.2 %, 204527 bytes)
5116d5115
< #   include <sys\stat.h>
(0.2 %, 204502 bytes)
===< pass_unifdef :: 0 >===
357d356
< #if BZ_DEBUG
364,366d362
< #else
< #define AssertD(cond,msg) /* */
< #endif
357,364d356
< #if BZ_DEBUG
< #define AssertD(cond,msg) \
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
< #else
366d357
< #endif
(0.2 %, 204444 bytes)
120d119
< #   ifdef BZ_EXPORT
123,127d121
< #   else
<    /* import windows dll dynamically */
< #   define BZ_API(func) (WINAPI * func)
< #   define BZ_EXTERN
< #   endif
120,123d119
< #   ifdef BZ_EXPORT
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #   else
127d122
< #   endif
108,111d107
< #ifndef BZ_IMPORT
< #define BZ_EXPORT
< #endif
< 
(0.3 %, 204304 bytes)
108,111d107
< #ifndef BZ_IMPORT
< #define BZ_EXPORT
< #endif
< 
108d107
< #ifndef BZ_IMPORT
110d108
< #endif
(0.3 %, 204260 bytes)
5101,5102d5100
< #if BZ_LCCWIN32
< 
5122,5123d5119
< 
< #endif /* BZ_LCCWIN32 */
5101,5125d5100
< #if BZ_LCCWIN32
< 
< #   define NORETURN       /**/
< #   define PATH_SEP       '\\'
< #   define MY_LSTAT       _stat
< #   define MY_STAT        _stat
< #   define MY_S_ISREG(x)  ((x) & _S_IFREG)
< #   define MY_S_ISDIR(x)  ((x) & _S_IFDIR)
< 
< #   define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
< 
< #   define APPEND_FILESPEC(root, name)                \
<       root = snocString ((root), (name))
< 
< #   define SET_BINARY_MODE(fd)                        \
<       do {                                            \
<          int retVal = setmode ( fileno ( fd ),        \
<                                 O_BINARY );           \
<          ERROR_IF_MINUS_ONE ( retVal );               \
<       } while ( 0 )
< 
< #endif /* BZ_LCCWIN32 */
< 
< 
160,226d159
< #ifndef BZ_NO_STDIO
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< #endif
< 
264,300d196
< #ifndef BZ_NO_STDIO
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< #endif
< 
320,322d215
< #ifndef BZ_NO_STDIO
< #endif
< 
343,365d235
< #ifndef BZ_NO_STDIO
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) BZ2_bz__AssertH__fail ( errcode ); }
< #define AssertD(cond,msg) \
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
< #define VPrintf1(zf,za1) \
<    fprintf(stderr,zf,za1)
< #define VPrintf2(zf,za1,za2) \
<    fprintf(stderr,zf,za1,za2)
< #define VPrintf3(zf,za1,za2,za3) \
<    fprintf(stderr,zf,za1,za2,za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
<    fprintf(stderr,zf,za1,za2,za3,za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
< #else
376d245
< #endif
771d639
< #ifdef BZ_NO_STDIO
775d642
< #endif
3448,3494d3314
< #ifndef BZ_NO_STDIO
< void BZ2_bz__AssertH__fail ( int errcode )
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
< #endif
4265,4625d4084
< #ifndef BZ_NO_STDIO
< /*---------------------------------------------------*/
< /*--- File I/O stuff                              ---*/
< /*---------------------------------------------------*/
< 
< #define BZ_SETERR(eee)                    \
< {                                         \
<    if (bzerror != NULL) *bzerror = eee;   \
<    if (bzf != NULL) bzf->lastErr = eee;   \
< }
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< /*---------------------------------------------*/
< static Bool myfeof ( FILE* f )
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
< 
< 
< /*---------------------------------------------------*/
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
< 
< 
< /*---------------------------------------------------*/
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return 0; };
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
< 
<    return 0; /*not reached*/
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (bzf->lastErr != BZ_STREAM_END)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (unused == NULL || nUnused == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
< 
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
< #endif
< 
< 
4755,4943d4213
< 
< 
< #ifndef BZ_NO_STDIO
< /*---------------------------------------------------*/
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   /* no use when bzdopen */
<                  int fd,             /* no use when bzdopen */
<                  const char *mode,
<                  int open_mode)      /* bzopen: 0, bzdopen:1 */
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   /* binary mode */
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
< #ifdef BZ_STRICT_ANSI
<       fp = NULL;
< #else
<       fp = fdopen(fd,mode2);
< #endif
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       /* Guard against total chaos and anarchy -- JRS */
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
< 
< 
< /*---------------------------------------------------*/
< /*--
<    open file for read or write.
<       ex) bzopen("file","w9")
<       case path="" or NULL => use stdin or stdout.
< --*/
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(path,-1,mode,/*bzopen*/0);
< }
< 
< 
< /*---------------------------------------------------*/
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,/*bzdopen*/1);
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< {
<    /* do nothing now... */
<    return 0;
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) {return;}
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< /*--
<    return last error code 
< --*/
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
< #endif
160d159
< #ifndef BZ_NO_STDIO
225d223
< #endif
264d261
< #ifndef BZ_NO_STDIO
299d295
< #endif
320,322d315
< #ifndef BZ_NO_STDIO
< #endif
< 
343d335
< #ifndef BZ_NO_STDIO
365,376d356
< #else
< extern void bz_internal_error ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) bz_internal_error ( errcode ); }
< #define AssertD(cond,msg) /* */
< #define VPrintf0(zf) /* */
< #define VPrintf1(zf,za1) /* */
< #define VPrintf2(zf,za1,za2) /* */
< #define VPrintf3(zf,za1,za2,za3) /* */
< #define VPrintf4(zf,za1,za2,za3,za4) /* */
< #define VPrintf5(zf,za1,za2,za3,za4,za5) /* */
< #endif
771,776d750
< #ifdef BZ_NO_STDIO
< #ifndef NULL
< #define NULL 0
< #endif
< #endif
< 
3448d3421
< #ifndef BZ_NO_STDIO
3494d3466
< #endif
4265d4236
< #ifndef BZ_NO_STDIO
4623d4593
< #endif
4757d4726
< #ifndef BZ_NO_STDIO
4943d4911
< #endif
(0.7 %, 203528 bytes)
160d159
< #ifndef BZ_NO_STDIO
225d223
< #endif
264d261
< #ifndef BZ_NO_STDIO
299d295
< #endif
320,322d315
< #ifndef BZ_NO_STDIO
< #endif
< 
343d335
< #ifndef BZ_NO_STDIO
365,376d356
< #else
< extern void bz_internal_error ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) bz_internal_error ( errcode ); }
< #define AssertD(cond,msg) /* */
< #define VPrintf0(zf) /* */
< #define VPrintf1(zf,za1) /* */
< #define VPrintf2(zf,za1,za2) /* */
< #define VPrintf3(zf,za1,za2,za3) /* */
< #define VPrintf4(zf,za1,za2,za3,za4) /* */
< #define VPrintf5(zf,za1,za2,za3,za4,za5) /* */
< #endif
771,776d750
< #ifdef BZ_NO_STDIO
< #ifndef NULL
< #define NULL 0
< #endif
< #endif
< 
3448d3421
< #ifndef BZ_NO_STDIO
3494d3466
< #endif
4265d4236
< #ifndef BZ_NO_STDIO
4623d4593
< #endif
4757d4726
< #ifndef BZ_NO_STDIO
4943d4911
< #endif
4805d4804
< #ifdef BZ_STRICT_ANSI
4807,4809d4805
< #else
<       fp = fdopen(fd,mode2);
< #endif
(1.0 %, 202886 bytes)
4774,4776d4773
< #ifdef BZ_STRICT_ANSI
<       fp = NULL;
< #else
4778d4774
< #endif
5018d5017
< #if BZ_UNIX
5065d5063
< #endif /* BZ_UNIX */
5844d5841
< #  if BZ_UNIX
5852,5854d5848
< #  else
<    return fopen(name, mode);
< #  endif
5914d5907
< #if BZ_UNIX
5917d5909
< #endif
5922d5913
< #  if BZ_UNIX
5927d5917
< #  endif
5934d5923
< #  if BZ_UNIX
5951d5939
< #  endif
5959d5946
< #  if BZ_UNIX
5964,5971d5950
< #  else /* ! BZ_UNIX */
<    /* On non-unix (Win* platforms), wildcard characters are not allowed in 
<     * filenames.
<     */
<    for (; *name != '\0'; name++)
<       if (*name == '?' || *name == '*') return True;
<    return False;
< #  endif /* BZ_UNIX */
6530d6508
< #     if BZ_UNIX
6532d6509
< #     endif
6682d6658
< #  if BZ_UNIX
6686d6661
< #  endif
6827d6801
< #     if BZ_UNIX
6829d6802
< #     endif
(1.0 %, 202834 bytes)
5014,5062d5013
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC(root, name) \
<       root=snocString((root), (name))
< 
< #   define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
< 
< #   define SET_BINARY_MODE(fd) /**/
< 
< #   ifdef __GNUC__
< #      define NORETURN __attribute__ ((noreturn))
< #   else
< #      define NORETURN /**/
< #   endif
< 
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< #endif /* BZ_UNIX */
< 
5840,5848d5790
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
5850d5791
< #  endif
5910,5913d5850
< #if BZ_UNIX
< static 
< struct MY_STAT fileMetaInfo;
< #endif
5918,5923d5854
< #  if BZ_UNIX
<    IntNative retVal;
<    /* Note use of stat here, not lstat. */
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
5930,5947d5860
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    /* chown() will in many cases return with EPERM, which can
<       be safely ignored.
<    */
< #  endif
5955,5960d5867
< #  if BZ_UNIX
<    /* On unix, files can contain any characters and the file expansion
<     * is performed by the shell.
<     */
<    return False;
< #  else /* ! BZ_UNIX */
5967d5873
< #  endif /* BZ_UNIX */
6526,6528d6431
< #     if BZ_UNIX
<       "\n"
< #     endif
6678,6682d6580
< #  if BZ_UNIX
< #  ifndef __DJGPP__
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< #  endif
6823,6825d6720
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
61,302d60
< #ifndef _BZLIB_H
< #define _BZLIB_H
< 
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< /* Need a definitition for FILE */
< #include <stdio.h>
< 
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< #endif
< 
< 
< /*-- Core (low-level) library functions --*/
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< /*-- High(er) level library functions --*/
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< /*-- Utility functions --*/
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< #ifdef __cplusplus
< }
< #endif
< 
< #endif
< 
61d60
< #ifndef _BZLIB_H
299,300d297
< #endif
< 
311,747d310
< #ifndef _BZLIB_PRIVATE_H
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< /*-- General stuff. --*/
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #ifndef __GNUC__
< #define __inline__  /* */
< #endif 
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) BZ2_bz__AssertH__fail ( errcode ); }
< #define AssertD(cond,msg) \
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
< #define VPrintf1(zf,za1) \
<    fprintf(stderr,zf,za1)
< #define VPrintf2(zf,za1,za2) \
<    fprintf(stderr,zf,za1,za2)
< #define VPrintf3(zf,za1,za2,za3) \
<    fprintf(stderr,zf,za1,za2,za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
<    fprintf(stderr,zf,za1,za2,za3,za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
< 
< 
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
< 
< 
< /*-- Header bytes. --*/
< 
< #define BZ_HDR_B 0x42   /* 'B' */
< #define BZ_HDR_Z 0x5a   /* 'Z' */
< #define BZ_HDR_h 0x68   /* 'h' */
< #define BZ_HDR_0 0x30   /* '0' */
<   
< /*-- Constants for the back end. --*/
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< /*-- Stuff for randomising repetitive blocks. --*/
< 
< extern Int32 BZ2_rNums[512];
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
< 
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
< 
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
<    s->rNToGo--;
< 
< 
< 
< /*-- Stuff for doing CRCs. --*/
< 
< extern UInt32 BZ2_crc32Table[256];
< 
< #define BZ_INITIALISE_CRC(crcVar)              \
< {                                              \
<    crcVar = 0xffffffffL;                       \
< }
< 
< #define BZ_FINALISE_CRC(crcVar)                \
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
< 
< #define BZ_UPDATE_CRC(crcVar,cha)              \
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
< 
< 
< 
< /*-- States and modes for compression. --*/
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< /*-- Structure holding all the compression-side stuff. --*/
< 
< typedef
<    struct {
<       /* pointer back to the struct bz_stream */
<       bz_stream* strm;
< 
<       /* mode this stream is in, and whether inputting */
<       /* or outputting data */
<       Int32    mode;
<       Int32    state;
< 
<       /* remembers avail_in when flush/finish requested */
<       UInt32   avail_in_expect;
< 
<       /* for doing the block sorting */
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       /* aliases for arr1 and arr2 */
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       /* for deciding when to use the fallback sorting algorithm */
<       Int32    workFactor;
< 
<       /* run-length-encoding of the input */
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       /* input and output limits and current posns */
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       /* map of bytes used in block */
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       /* the buffer for bit stream creation */
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       /* block and combined CRCs */
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       /* misc administratium */
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       /* stuff for coding the MTF values */
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       /* second dimension: only 3 needed; 4 makes index calculations faster */
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< /*-- externs for compression. --*/
< 
< extern void 
< BZ2_blockSort ( EState* );
< 
< extern void 
< BZ2_compressBlock ( EState*, Bool );
< 
< extern void 
< BZ2_bsInitWrite ( EState* );
< 
< extern void 
< BZ2_hbAssignCodes ( Int32*, UChar*, Int32, Int32, Int32 );
< 
< extern void 
< BZ2_hbMakeCodeLengths ( UChar*, Int32*, Int32, Int32 );
< 
< 
< 
< /*-- states for decompression. --*/
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
< #define BZ_X_BLKHDR_2    15
< #define BZ_X_BLKHDR_3    16
< #define BZ_X_BLKHDR_4    17
< #define BZ_X_BLKHDR_5    18
< #define BZ_X_BLKHDR_6    19
< #define BZ_X_BCRC_1      20
< #define BZ_X_BCRC_2      21
< #define BZ_X_BCRC_3      22
< #define BZ_X_BCRC_4      23
< #define BZ_X_RANDBIT     24
< #define BZ_X_ORIGPTR_1   25
< #define BZ_X_ORIGPTR_2   26
< #define BZ_X_ORIGPTR_3   27
< #define BZ_X_MAPPING_1   28
< #define BZ_X_MAPPING_2   29
< #define BZ_X_SELECTOR_1  30
< #define BZ_X_SELECTOR_2  31
< #define BZ_X_SELECTOR_3  32
< #define BZ_X_CODING_1    33
< #define BZ_X_CODING_2    34
< #define BZ_X_CODING_3    35
< #define BZ_X_MTF_1       36
< #define BZ_X_MTF_2       37
< #define BZ_X_MTF_3       38
< #define BZ_X_MTF_4       39
< #define BZ_X_MTF_5       40
< #define BZ_X_MTF_6       41
< #define BZ_X_ENDHDR_2    42
< #define BZ_X_ENDHDR_3    43
< #define BZ_X_ENDHDR_4    44
< #define BZ_X_ENDHDR_5    45
< #define BZ_X_ENDHDR_6    46
< #define BZ_X_CCRC_1      47
< #define BZ_X_CCRC_2      48
< #define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< /*-- Constants for the fast MTF decoder. --*/
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< /*-- Structure holding all the decompression-side stuff. --*/
< 
< typedef
<    struct {
<       /* pointer back to the struct bz_stream */
<       bz_stream* strm;
< 
<       /* state indicator for this stream */
<       Int32    state;
< 
<       /* for doing the final run-length decoding */
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       /* the buffer for bit stream reading */
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       /* misc administratium */
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       /* for undoing the Burrows-Wheeler transform */
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       /* for undoing the Burrows-Wheeler transform (FAST) */
<       UInt32   *tt;
< 
<       /* for undoing the Burrows-Wheeler transform (SMALL) */
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       /* stored and calculated CRCs */
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       /* map of bytes used in block */
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       /* for decoding the MTF values */
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       /* save area for scalars in the main decompress code */
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< /*-- Macros for decompression. --*/
< 
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
<     cccc = (UChar)(s->tPos & 0xff);           \
<     s->tPos >>= 8;
< 
< #define BZ_GET_FAST_C(cccc)                   \
<     c_tPos = c_tt[c_tPos];                    \
<     cccc = (UChar)(c_tPos & 0xff);            \
<     c_tPos >>= 8;
< 
< #define SET_LL4(i,n)                                          \
<    { if (((i) & 0x1) == 0)                                    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
<    }
< 
< #define GET_LL4(i)                             \
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
< 
< #define SET_LL(i,n)                          \
<    { s->ll16[i] = (UInt16)(n & 0x0000ffff);  \
<      SET_LL4(i, n >> 16);                    \
<    }
< 
< #define GET_LL(i) \
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
< 
< #define BZ_GET_SMALL(cccc)                            \
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
<       s->tPos = GET_LL(s->tPos);
< 
< 
< /*-- externs for decompression. --*/
< 
< extern Int32 
< BZ2_indexIntoF ( Int32, Int32* );
< 
< extern Int32 
< BZ2_decompress ( DState* );
< 
< extern void 
< BZ2_hbCreateDecodeTables ( Int32*, Int32*, Int32*, UChar*,
<                            Int32,  Int32, Int32 );
< 
< 
< #endif
< 
311d310
< #ifndef _BZLIB_PRIVATE_H
744,746d742
< 
< 
< #endif
111d110
< #ifdef _WIN32
118,121d116
< #else
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< #endif
111,118d110
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
121d112
< #endif
4987,4993d4977
< 
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
(1.0 %, 202809 bytes)
308d307
< #ifndef _BZLIB_PRIVATE_H
741,743d739
< 
< 
< #endif
110d109
< #ifdef _WIN32
117,120d115
< #else
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< #endif
110,117d109
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
120d111
< #endif
4984,4990d4974
< 
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
4985,4991d4984
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
< 
5049d5041
< #   ifdef __CYGWIN__
5057d5048
< #   endif
(1.1 %, 202775 bytes)
110,117d109
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
120d111
< #endif
4980,4986d4970
< 
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
4981,4987d4980
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
< 
5045d5037
< #   ifdef __CYGWIN__
5053d5044
< #   endif
5045,5053d5044
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
(1.2 %, 202468 bytes)
5029,5037d5028
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
5015d5014
< #   ifdef __DJGPP__
5027d5025
< #   endif
6656,6658d6653
< #  ifndef __DJGPP__
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
5015,5028d5014
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
6656d6641
< #  ifndef __DJGPP__
6658d6642
< #  endif
(1.4 %, 202097 bytes)
5015,5028d5014
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
6647d6632
< #  ifndef __DJGPP__
6649d6633
< #  endif
319,322d318
< #ifndef __GNUC__
< #define __inline__  /* */
< #endif 
< 
5009d5004
< #   ifdef __GNUC__
5011,5013d5005
< #   else
< #      define NORETURN /**/
< #   endif
(1.6 %, 201603 bytes)
319d318
< #ifndef __GNUC__
321d319
< #endif 
5009,5011d5006
< #   ifdef __GNUC__
< #      define NORETURN __attribute__ ((noreturn))
< #   else
5013d5007
< #   endif
63d62
< #ifdef __cplusplus
65d63
< #endif
287d284
< #ifdef __cplusplus
289d285
< #endif
63,66d62
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
286,289d281
< 
< #ifdef __cplusplus
< }
< #endif
(1.7 %, 201490 bytes)
63,66d62
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
286,289d281
< 
< #ifdef __cplusplus
< }
< #endif
(1.7 %, 201421 bytes)
===< pass_comments :: 0 >===
1,55c1,5
< /*-------------------------------------------------------------*/
< /*--- Public header file for the library.                   ---*/
< /*---                                               bzlib.h ---*/
< /*-------------------------------------------------------------*/
< 
< /*--
<   This file is a part of bzip2 and/or libbzip2, a program and
<   library for lossless, block-sorting data compression.
< 
<   Copyright (C) 1996-2002 Julian R Seward.  All rights reserved.
< 
<   Redistribution and use in source and binary forms, with or without
<   modification, are permitted provided that the following conditions
<   are met:
< 
<   1. Redistributions of source code must retain the above copyright
<      notice, this list of conditions and the following disclaimer.
< 
<   2. The origin of this software must not be misrepresented; you must 
<      not claim that you wrote the original software.  If you use this 
<      software in a product, an acknowledgment in the product 
<      documentation would be appreciated but is not required.
< 
<   3. Altered source versions must be plainly marked as such, and must
<      not be misrepresented as being the original software.
< 
<   4. The name of the author may not be used to endorse or promote 
<      products derived from this software without specific prior written 
<      permission.
< 
<   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
<   OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
<   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
<   ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
<   DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
<   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
<   GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
<   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
<   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
<   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
<   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
< 
<   Julian Seward, Cambridge, UK.
<   jseward@acm.org
<   bzip2/libbzip2 version 1.0 of 21 March 2000
< 
<   This program is based on (at least) the work of:
<      Mike Burrows
<      David Wheeler
<      Peter Fenwick
<      Alistair Moffat
<      Radford Neal
<      Ian H. Witten
<      Robert Sedgewick
<      Jon L. Bentley
---
>  
> 
> 
> 
> 
57,58d6
<   For more information on these sources, see the manual.
< --*/
103c51
< /* Need a definitition for FILE */
---
> 
110c58
< /*-- Core (low-level) library functions --*/
---
> 
144c92
< /*-- High(er) level library functions --*/
---
> 
212c160
< /*-- Utility functions --*/
---
> 
234,242c182
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
---
> 
283,289c223,229
< /*-------------------------------------------------------------*/
< /*--- end                                           bzlib.h ---*/
< /*-------------------------------------------------------------*/
< /*-------------------------------------------------------------*/
< /*--- Private header file for the library.                  ---*/
< /*---                                       bzlib_private.h ---*/
< /*-------------------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
296c236
< /*-- General stuff. --*/
---
> 
311c251
< #define __inline__  /* */
---
> #define __inline__  
340d279
< /*-- Header bytes. --*/
342,345c281,285
< #define BZ_HDR_B 0x42   /* 'B' */
< #define BZ_HDR_Z 0x5a   /* 'Z' */
< #define BZ_HDR_h 0x68   /* 'h' */
< #define BZ_HDR_0 0x30   /* '0' */
---
> 
> #define BZ_HDR_B 0x42   
> #define BZ_HDR_Z 0x5a   
> #define BZ_HDR_h 0x68   
> #define BZ_HDR_0 0x30   
347c287
< /*-- Constants for the back end. --*/
---
> 
363c303
< /*-- Stuff for randomising repetitive blocks. --*/
---
> 
387c327
< /*-- Stuff for doing CRCs. --*/
---
> 
410c350
< /*-- States and modes for compression. --*/
---
> 
428c368
< /*-- Structure holding all the compression-side stuff. --*/
---
> 
432c372
<       /* pointer back to the struct bz_stream */
---
>       
435,436c375,376
<       /* mode this stream is in, and whether inputting */
<       /* or outputting data */
---
>       
>       
440c380
<       /* remembers avail_in when flush/finish requested */
---
>       
443c383
<       /* for doing the block sorting */
---
>       
449c389
<       /* aliases for arr1 and arr2 */
---
>       
455c395
<       /* for deciding when to use the fallback sorting algorithm */
---
>       
458c398
<       /* run-length-encoding of the input */
---
>       
463c403
<       /* input and output limits and current posns */
---
>       
469c409
<       /* map of bytes used in block */
---
>       
474c414
<       /* the buffer for bit stream creation */
---
>       
478c418
<       /* block and combined CRCs */
---
>       
482c422
<       /* misc administratium */
---
>       
487c427
<       /* stuff for coding the MTF values */
---
>       
496c436
<       /* second dimension: only 3 needed; 4 makes index calculations faster */
---
>       
504c444
< /*-- externs for compression. --*/
---
> 
523c463
< /*-- states for decompression. --*/
---
> 
572c512
< /*-- Constants for the fast MTF decoder. --*/
---
> 
579c519
< /*-- Structure holding all the decompression-side stuff. --*/
---
> 
583c523
<       /* pointer back to the struct bz_stream */
---
>       
586c526
<       /* state indicator for this stream */
---
>       
589c529
<       /* for doing the final run-length decoding */
---
>       
595c535
<       /* the buffer for bit stream reading */
---
>       
599c539
<       /* misc administratium */
---
>       
605c545
<       /* for undoing the Burrows-Wheeler transform */
---
>       
614c554
<       /* for undoing the Burrows-Wheeler transform (FAST) */
---
>       
617c557
<       /* for undoing the Burrows-Wheeler transform (SMALL) */
---
>       
621c561
<       /* stored and calculated CRCs */
---
>       
627c567
<       /* map of bytes used in block */
---
>       
633c573
<       /* for decoding the MTF values */
---
>       
645c585
<       /* save area for scalars in the main decompress code */
---
>       
676c616
< /*-- Macros for decompression. --*/
---
> 
710c650
< /*-- externs for decompression. --*/
---
> 
723d662
< /*-- BZ_NO_STDIO seems to make NULL disappear on some platforms. --*/
726,728d664
< /*-------------------------------------------------------------*/
< /*--- end                                   bzlib_private.h ---*/
< /*-------------------------------------------------------------*/
732,735d667
< /*-------------------------------------------------------------*/
< /*--- Block sorting machinery                               ---*/
< /*---                                           blocksort.c ---*/
< /*-------------------------------------------------------------*/
737,740d668
< /*---------------------------------------------*/
< /*--- Fallback O(N log(N)^2) sorting        ---*/
< /*--- algorithm, for repetitive blocks      ---*/
< /*---------------------------------------------*/
742c670,682
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
775c715
< /*---------------------------------------------*/
---
> 
832,838c772
<       /* Random partitioning.  Median of 3 sometimes fails to
<          avoid bad cases.  Median of 9 seems to help but 
<          looks rather expensive.  This too seems to work but
<          is cheaper.  Guidance for the magic constants 
<          7621 and 32768 is taken from Sedgewick's algorithms
<          book, chapter 35.
<       */
---
>       
904,916c838,839
< /*---------------------------------------------*/
< /* Pre:
<       nblock > 0
<       eclass exists for [0 .. nblock-1]
<       ((UChar*)eclass) [0 .. nblock-1] holds block
<       ptr exists for [0 .. nblock-1]
< 
<    Post:
<       ((UChar*)eclass) [0 .. nblock-1] holds block
<       All other areas of eclass destroyed
<       fmap [0 .. nblock-1] holds sorted order
<       bhtab [ 0 .. 2+(nblock/32) ] destroyed
< */
---
> 
> 
938,941c861
<    /*--
<       Initial 1-char radix sort to generate
<       initial fmap and initial BH bits.
<    --*/
---
>    
960,964c880
<    /*--
<       Inductively refine the buckets.  Kind-of an
<       "exponential radix sort" (!), inspired by the
<       Manber-Myers suffix array construction algorithm.
<    --*/
---
>    
966c882
<    /*-- set sentinel bits for block-end detection --*/
---
>    
972c888
<    /*-- the log(N) loop --*/
---
>    
990c906
< 	 /*-- find the next non-singleton bucket --*/
---
> 	 
1007c923
<          /*-- now [l, r] bracket current bucket --*/
---
>          
1012c928
<             /*-- scan bucket and generate header bits-- */
---
>             
1028,1032c944
<    /*-- 
<       Reconstruct the original block in
<       eclass8 [0 .. nblock-1], since the
<       previous phase destroyed it.
<    --*/
---
>    
1051,1055d962
< /*---------------------------------------------*/
< /*--- The main, O(N^2 log(N)) sorting       ---*/
< /*--- algorithm.  Faster for "normal"       ---*/
< /*--- non-repetitive blocks.                ---*/
< /*---------------------------------------------*/
1057c964,969
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
1072c984
<    /* 1 */
---
>    
1076c988
<    /* 2 */
---
>    
1080c992
<    /* 3 */
---
>    
1084c996
<    /* 4 */
---
>    
1088c1000
<    /* 5 */
---
>    
1092c1004
<    /* 6 */
---
>    
1096c1008
<    /* 7 */
---
>    
1100c1012
<    /* 8 */
---
>    
1104c1016
<    /* 9 */
---
>    
1108c1020
<    /* 10 */
---
>    
1112c1024
<    /* 11 */
---
>    
1116c1028
<    /* 12 */
---
>    
1124c1036
<       /* 1 */
---
>       
1130c1042
<       /* 2 */
---
>       
1136c1048
<       /* 3 */
---
>       
1142c1054
<       /* 4 */
---
>       
1148c1060
<       /* 5 */
---
>       
1154c1066
<       /* 6 */
---
>       
1160c1072
<       /* 7 */
---
>       
1166c1078
<       /* 8 */
---
>       
1185,1191c1097,1098
< /*---------------------------------------------*/
< /*--
<    Knuth's increments seem to work better
<    than Incerpi-Sedgewick here.  Possibly
<    because the number of elems to sort is
<    usually small, typically <= 20.
< --*/
---
> 
> 
1223c1130
<          /*-- copy 1 --*/
---
>          
1237c1144
<          /*-- copy 2 --*/
---
>          
1251c1158
<          /*-- copy 3 --*/
---
>          
1271,1278c1178,1179
< /*---------------------------------------------*/
< /*--
<    The following is an implementation of
<    an elegant 3-way quicksort for strings,
<    described in a paper "Fast Algorithms for
<    Sorting and Searching Strings", by Robert
<    Sedgewick and Jon L. Bentley.
< --*/
---
> 
> 
1444,1457c1345,1346
< /*---------------------------------------------*/
< /* Pre:
<       nblock > N_OVERSHOOT
<       block32 exists for [0 .. nblock-1 +N_OVERSHOOT]
<       ((UChar*)block32) [0 .. nblock-1] holds block
<       ptr exists for [0 .. nblock-1]
< 
<    Post:
<       ((UChar*)block32) [0 .. nblock-1] holds block
<       All other areas of block32 destroyed
<       ftab [0 .. 65536 ] destroyed
<       ptr [0 .. nblock-1] holds sorted order
<       if (*budget < 0), sorting was abandoned
< */
---
> 
> 
1482c1371
<    /*-- set up the 2-byte frequency table --*/
---
>    
1507c1396
<    /*-- (emphasises close relationship of block & quadrant) --*/
---
>    
1515c1404
<    /*-- Complete the initial radix sort --*/
---
>    
1545,1549c1434
<    /*--
<       Now ftab contains the first loc of every small bucket.
<       Calculate the running order, from smallest to largest
<       big bucket.
<    --*/
---
>    
1575,1577c1460
<    /*--
<       The main sorting loop.
<    --*/
---
>    
1583,1588c1466
<       /*--
<          Process big buckets, starting with the least full.
<          Basically this is a 3-step process in which we call
<          mainQSort3 to sort the small buckets [ss, j], but
<          also make a big effort to avoid the calls if we can.
<       --*/
---
>       
1591,1598c1469
<       /*--
<          Step 1:
<          Complete the big bucket [ss] by quicksorting
<          any unsorted small buckets [ss, j], for j != ss.  
<          Hopefully previous pointer-scanning phases have already
<          completed many of the small buckets [ss, j], so
<          we don't have to sort them at all.
<       --*/
---
>       
1624,1630c1495
<       /*--
<          Step 2:
<          Now scan this big bucket [ss] so as to synthesise the
<          sorted order for small buckets [t, ss] for all t,
<          including, magically, the bucket [ss,ss] too.
<          This will avoid doing Real Work in subsequent Step 1's.
<       --*/
---
>       
1652,1655c1517
<                 /* Extremely rare case missing in bzip2-1.0.0 and 1.0.1.
<                    Necessity for this case is demonstrated by compressing 
<                    a sequence of approximately 48.5 million of character 
<                    251; 1.0.0/1.0.1 will then die here. */
---
>                 
1661,1699c1523
<       /*--
<          Step 3:
<          The [ss] big bucket is now done.  Record this fact,
<          and update the quadrant descriptors.  Remember to
<          update quadrants in the overshoot area too, if
<          necessary.  The "if (i < 255)" test merely skips
<          this updating for the last bucket processed, since
<          updating for the last bucket is pointless.
< 
<          The quadrant array provides a way to incrementally
<          cache sort orderings, as they appear, so as to 
<          make subsequent comparisons in fullGtU() complete
<          faster.  For repetitive blocks this makes a big
<          difference (but not big enough to be able to avoid
<          the fallback sorting mechanism, exponential radix sort).
< 
<          The precise meaning is: at all times:
< 
<             for 0 <= i < nblock and 0 <= j <= nblock
< 
<             if block[i] != block[j], 
< 
<                then the relative values of quadrant[i] and 
<                     quadrant[j] are meaningless.
< 
<                else {
<                   if quadrant[i] < quadrant[j]
<                      then the string starting at i lexicographically
<                      precedes the string starting at j
< 
<                   else if quadrant[i] > quadrant[j]
<                      then the string starting at j lexicographically
<                      precedes the string starting at i
< 
<                   else
<                      the relative ordering of the strings starting
<                      at i and j has not yet been determined.
<                }
<       --*/
---
>       
1731,1743c1555,1556
< /*---------------------------------------------*/
< /* Pre:
<       nblock > 0
<       arr2 exists for [0 .. nblock-1 +N_OVERSHOOT]
<       ((UChar*)arr2)  [0 .. nblock-1] holds block
<       arr1 exists for [0 .. nblock-1]
< 
<    Post:
<       ((UChar*)arr2) [0 .. nblock-1] holds block
<       All other areas of block destroyed
<       ftab [ 0 .. 65536 ] destroyed
<       arr1 [0 .. nblock-1] holds sorted order
< */
---
> 
> 
1760,1764c1573
<       /* Calculate the location for quadrant, remembering to get
<          the alignment right.  Assumes that &(block[0]) is at least
<          2-byte aligned -- this should be ok since block is really
<          the first section of arr2.
<       */
---
>       
1769,1775c1578
<       /* (wfact-1) / 3 puts the default-factor-30
<          transition point at very roughly the same place as 
<          with v0.1 and v0.9.0.  
<          Not that it particularly matters any more, since the
<          resulting compressed stream is now the same regardless
<          of whether or not we use the main sort or fallback sort.
<       */
---
>       
1805,1807d1607
< /*-------------------------------------------------------------*/
< /*--- end                                       blocksort.c ---*/
< /*-------------------------------------------------------------*/
1809,1812d1608
< /*-------------------------------------------------------------*/
< /*--- Huffman coding low-level stuff                        ---*/
< /*---                                             huffman.c ---*/
< /*-------------------------------------------------------------*/
1815c1611,1618
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
1853c1656
< /*---------------------------------------------------*/
---
> 
1859,1862c1662
<    /*--
<       Nodes and heap entries run from 1.  Entry 0
<       for both the heap and nodes is a sentinel.
<    --*/
---
>    
1925c1725
< /*---------------------------------------------------*/
---
> 
1943c1743
< /*---------------------------------------------------*/
---
> 
1977,1992c1777,1787
< /*-------------------------------------------------------------*/
< /*--- end                                         huffman.c ---*/
< /*-------------------------------------------------------------*/
< 
< /*-------------------------------------------------------------*/
< /*--- Table for doing CRCs                                  ---*/
< /*---                                            crctable.c ---*/
< /*-------------------------------------------------------------*/
< 
< 
< /*--
<   I think this is an implementation of the AUTODIN-II,
<   Ethernet & FDDI 32-bit CRC standard.  Vaguely derived
<   from code by Rob Warnock, in Section 51 of the
<   comp.compression FAQ.
< --*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
1996c1791
<    /*-- Ugly, innit? --*/
---
>    
2065,2067d1859
< /*-------------------------------------------------------------*/
< /*--- end                                        crctable.c ---*/
< /*-------------------------------------------------------------*/
2069,2072d1860
< /*-------------------------------------------------------------*/
< /*--- Table for randomising repetitive blocks               ---*/
< /*---                                           randtable.c ---*/
< /*-------------------------------------------------------------*/
2075c1863,1870
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
2132,2134d1926
< /*-------------------------------------------------------------*/
< /*--- end                                       randtable.c ---*/
< /*-------------------------------------------------------------*/
2136,2139d1927
< /*-------------------------------------------------------------*/
< /*--- Compression machinery (not incl block sorting)        ---*/
< /*---                                            compress.c ---*/
< /*-------------------------------------------------------------*/
2142,2144d1929
< /*---------------------------------------------------*/
< /*--- Bit stream I/O                              ---*/
< /*---------------------------------------------------*/
2146c1931,1941
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
2154c1949
< /*---------------------------------------------------*/
---
> 
2167c1962
< /*---------------------------------------------------*/
---
> 
2180c1975
< /*---------------------------------------------------*/
---
> 
2191c1986
< /*---------------------------------------------------*/
---
> 
2202c1997
< /*---------------------------------------------------*/
---
> 
2210,2212d2004
< /*---------------------------------------------------*/
< /*--- The back end proper                         ---*/
< /*---------------------------------------------------*/
2214c2006,2009
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
2228c2023
< /*---------------------------------------------------*/
---
> 
2238,2259c2033
<    /* 
<       After sorting (eg, here),
<          s->arr1 [ 0 .. s->nblock-1 ] holds sorted order,
<          and
<          ((UChar*)s->arr2) [ 0 .. s->nblock-1 ] 
<          holds the original block data.
< 
<       The first thing to do is generate the MTF values,
<       and put them in
<          ((UInt16*)s->arr1) [ 0 .. s->nblock-1 ].
<       Because there are strictly fewer or equal MTF values
<       than block values, ptr values in this area are overwritten
<       with MTF values only when they are no longer needed.
< 
<       The final compressed bitstream is generated into the
<       area starting at
<          (UChar*) (&((UChar*)s->arr2)[s->nblock])
< 
<       These storage aliases are set up in bzCompressInit(),
<       except for the last one, which is arranged in 
<       compressBlock().
<    */
---
>    
2344c2118
< /*---------------------------------------------------*/
---
> 
2355,2363c2129
<    /*--
<    UChar  len [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<    is a global since the decoder also needs it.
< 
<    Int32  code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<    Int32  rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<    are also globals only used in this proc.
<    Made global to keep stack frame size small.
<    --*/
---
>    
2381c2147
<    /*--- Decide how many coding tables to use ---*/
---
>    
2389c2155
<    /*--- Generate an initial set of coding tables ---*/
---
>    
2429,2431c2195
<    /*--- 
<       Iterate up to BZ_N_ITERS times to improve the tables.
<    ---*/
---
>    
2440,2443c2204
<       /*---
<         Set up an auxiliary length table which is used to fast-track
< 	the common case (nGroups == 6). 
<       ---*/
---
>       
2457c2218
<          /*--- Set group start & end marks. --*/
---
>          
2462,2465c2223
<          /*-- 
<             Calculate the cost of this group as coded
<             by each of the coding tables.
<          --*/
---
>          
2469c2227
<             /*--- fast track the common case ---*/
---
>             
2498c2256
< 	    /*--- slow version which correctly handles all situations ---*/
---
> 	    
2505,2508c2263
<          /*-- 
<             Find the coding table which is best for this group,
<             and record its identity in the selector table.
<          --*/
---
>          
2517,2519c2272
<          /*-- 
<             Increment the symbol frequencies for the selected table.
<           --*/
---
>          
2521c2274
<             /*--- fast track the common case ---*/
---
>             
2539c2292
< 	    /*--- slow version which correctly handles all situations ---*/
---
> 	    
2554,2556c2307
<       /*--
<         Recompute the tables based on the accumulated frequencies.
<       --*/
---
>       
2569c2320
<    /*--- Compute MTF values for the selectors. ---*/
---
>    
2588c2339
<    /*--- Assign actual codes for the tables. --*/
---
>    
2602c2353
<    /*--- Transmit the mapping table. ---*/
---
>    
2625c2376
<    /*--- Now the selectors. ---*/
---
>    
2636c2387
<    /*--- Now the coding tables. ---*/
---
>    
2643,2644c2394,2395
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++; /* 10 */ };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--; /* 11 */ };
---
>          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
>          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
2652c2403
<    /*--- And finally, the block data proper ---*/
---
>    
2663c2414
<             /*--- fast track the common case ---*/
---
>             
2690c2441
< 	 /*--- slow version which correctly handles all situations ---*/
---
> 	 
2709c2460
< /*---------------------------------------------------*/
---
> 
2729c2480
<    /*-- If this is the first block, create the stream header. --*/
---
>    
2744c2495
<       /*-- Now the block's CRC, so it is in a known place. --*/
---
>       
2747,2755c2498
<       /*-- 
<          Now a single bit indicating (non-)randomisation. 
<          As of version 0.9.5, we use a better sorting algorithm
<          which makes randomisation unnecessary.  So always set
<          the randomised bit to 'no'.  Of course, the decoder
<          still needs to be able to handle randomised blocks
<          so as to maintain backwards compatibility with
<          older versions of bzip2.
<       --*/
---
>       
2764c2507
<    /*-- If this is the last block, add the stream trailer. --*/
---
>    
2778,2780d2520
< /*-------------------------------------------------------------*/
< /*--- end                                        compress.c ---*/
< /*-------------------------------------------------------------*/
2782,2785d2521
< /*-------------------------------------------------------------*/
< /*--- Decompression machinery                               ---*/
< /*---                                          decompress.c ---*/
< /*-------------------------------------------------------------*/
2788c2524,2531
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
2802c2545
< /*---------------------------------------------------*/
---
> 
2836c2579
< /*---------------------------------------------------*/
---
> 
2854c2597
<       if (zn > 20 /* the longest code */)         \
---
>       if (zn > 20 )         \
2868c2611
< /*---------------------------------------------------*/
---
> 
2876c2619
<    /* stuff that needs to be saved/restored */
---
>    
2903c2646
<       /*initialise the save area*/
---
>       
2930c2673
<    /*restore from the save area*/
---
>    
3029c2772
<       /*--- Receive the mapping table ---*/
---
>       
3049c2792
<       /*--- Now the selectors ---*/
---
>       
3065c2808
<       /*--- Undo the MTF values for the selectors. ---*/
---
>       
3079c2822
<       /*--- Now the coding tables ---*/
---
>       
3094c2837
<       /*--- Create the Huffman decoding tables ---*/
---
>       
3112c2855
<       /*--- Now the MTF values ---*/
---
>       
3121c2864
<       /*-- MTF init --*/
---
>       
3133c2876
<       /*-- end MTF init --*/
---
>       
3179c2922
<             /*-- uc = MTF ( nextSym-1 ) --*/
---
>             
3186c2929
<                   /* avoid general-case expense */
---
>                   
3202c2945
<                   /* general case */
---
>                   
3231c2974
<             /*-- end uc = MTF ( nextSym-1 ) --*/
---
>             
3244,3246c2987
<       /* Now we know what nblock is, we can do a better sanity
<          check on s->origPtr.
<       */
---
>       
3256c2997
<       /*-- Set up cftab to facilitate generation of T^(-1) --*/
---
>       
3263c3004
<          /*-- Make a copy of cftab, used in generation of T --*/
---
>          
3266c3007
<          /*-- compute the T vector --*/
---
>          
3273c3014
<          /*-- Compute T^(-1) by pointer reversal on T --*/
---
>          
3296c3037
<          /*-- compute the T^(-1) vector --*/
---
>          
3381,3383d3121
< /*-------------------------------------------------------------*/
< /*--- end                                      decompress.c ---*/
< /*-------------------------------------------------------------*/
3385,3388d3122
< /*-------------------------------------------------------------*/
< /*--- Library top-level functions.                          ---*/
< /*---                                               bzlib.c ---*/
< /*-------------------------------------------------------------*/
3390,3392d3123
< /*---------------------------------------------------*/
< /*--- Compression stuff                           ---*/
< /*---------------------------------------------------*/
3395c3126,3136
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
3443c3184
< /*---------------------------------------------------*/
---
> 
3454c3195
< /*---------------------------------------------------*/
---
> 
3469c3210
< /*---------------------------------------------------*/
---
> 
3483c3224
< /*---------------------------------------------------*/
---
> 
3501c3242
< /*---------------------------------------------------*/
---
> 
3568c3309
< /*---------------------------------------------------*/
---
> 
3604c3345
< /*---------------------------------------------------*/
---
> 
3613c3354
< /*---------------------------------------------------*/
---
> 
3617c3358
<    /*-- fast track the common case --*/           \
---
>               \
3628c3369
<    /*-- general, uncommon cases --*/              \
---
>                  \
3641c3382
< /*---------------------------------------------------*/
---
> 
3649c3390
<       /*-- fast track the common case --*/
---
>       
3651c3392
<          /*-- block full? --*/
---
>          
3653c3394
<          /*-- no input? --*/
---
>          
3665c3406
<       /*-- general, uncommon case --*/
---
>       
3667c3408
<          /*-- block full? --*/
---
>          
3669c3410
<          /*-- no input? --*/
---
>          
3671c3412
<          /*-- flush/finish end? --*/
---
>          
3686c3427
< /*---------------------------------------------------*/
---
> 
3694c3435
<       /*-- no output space? --*/
---
>       
3697c3438
<       /*-- block done? --*/
---
>       
3713c3454
< /*---------------------------------------------------*/
---
> 
3760c3501
< /*---------------------------------------------------*/
---
> 
3817c3558
<    return BZ_OK; /*--not reached--*/
---
>    return BZ_OK; 
3821c3562
< /*---------------------------------------------------*/
---
> 
3841,3843d3581
< /*---------------------------------------------------*/
< /*--- Decompression stuff                         ---*/
< /*---------------------------------------------------*/
3845c3583,3586
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
3885c3626
< /*---------------------------------------------------*/
---
> 
3894c3635
<          /* try to finish existing run */
---
>          
3907c3648
<          /* can a new run be started? */
---
>          
3939c3680
<       /* restore */
---
>       
3949c3690
<       /* end restore */
---
>       
3957c3698
<          /* try to finish existing run */
---
>          
3979c3720
<          /* can a new run be started? */
---
>          
4012c3753
<       /* save */
---
>       
4022c3763
<       /* end save */
---
>       
4028c3769
< /*---------------------------------------------------*/
---
> 
4043c3784
< /*---------------------------------------------------*/
---
> 
4052c3793
<          /* try to finish existing run */
---
>          
4065c3806
<          /* can a new run be started? */
---
>          
4098c3839
<          /* try to finish existing run */
---
>          
4111c3852
<          /* can a new run be started? */
---
>          
4139c3880
< /*---------------------------------------------------*/
---
> 
4187c3928
<    return 0;  /*NOTREACHED*/
---
>    return 0;  
4191c3932
< /*---------------------------------------------------*/
---
> 
4211,4213c3952,3954
< /*---------------------------------------------------*/
< /*--- File I/O stuff                              ---*/
< /*---------------------------------------------------*/
---
> 
> 
> 
4234c3975
< /*---------------------------------------------*/
---
> 
4244c3985
< /*---------------------------------------------------*/
---
> 
4292c4033
< /*---------------------------------------------------*/
---
> 
4337c4078
< /*---------------------------------------------------*/
---
> 
4415c4156
< /*---------------------------------------------------*/
---
> 
4471c4212
< /*---------------------------------------------------*/
---
> 
4489c4230
< /*---------------------------------------------------*/
---
> 
4545c4286
<    return 0; /*not reached*/
---
>    return 0; 
4549c4290
< /*---------------------------------------------------*/
---
> 
4570,4572d4310
< /*---------------------------------------------------*/
< /*--- Misc convenience stuff                      ---*/
< /*---------------------------------------------------*/
4574c4312,4315
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
4611c4352
<    /* normal termination */
---
>    
4626c4367
< /*---------------------------------------------------*/
---
> 
4659c4400
<    /* normal termination */
---
>    
4679,4694c4420,4425
< /*---------------------------------------------------*/
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
< /*---------------------------------------------------*/
< 
< /*---------------------------------------------------*/
< /*--
<    return version like "0.9.0c".
< --*/
---
> 
> 
> 
> 
> 
> 
4701c4432
< /*---------------------------------------------------*/
---
> 
4705,4706c4436,4437
<                ( const char *path,   /* no use when bzdopen */
<                  int fd,             /* no use when bzdopen */
---
>                ( const char *path,   
>                  int fd,             
4708c4439
<                  int open_mode)      /* bzopen: 0, bzdopen:1 */
---
>                  int open_mode)      
4739c4470
<    strcat(mode2,"b");   /* binary mode */
---
>    strcat(mode2,"b");   
4753c4484
<       /* Guard against total chaos and anarchy -- JRS */
---
>       
4770,4775c4501,4502
< /*---------------------------------------------------*/
< /*--
<    open file for read or write.
<       ex) bzopen("file","w9")
<       case path="" or NULL => use stdin or stdout.
< --*/
---
> 
> 
4780c4507
<    return bzopen_or_bzdopen(path,-1,mode,/*bzopen*/0);
---
>    return bzopen_or_bzdopen(path,-1,mode,0);
4784c4511
< /*---------------------------------------------------*/
---
> 
4789c4516
<    return bzopen_or_bzdopen(NULL,fd,mode,/*bzdopen*/1);
---
>    return bzopen_or_bzdopen(NULL,fd,mode,1);
4793c4520
< /*---------------------------------------------------*/
---
> 
4807c4534
< /*---------------------------------------------------*/
---
> 
4821c4548
< /*---------------------------------------------------*/
---
> 
4824c4551
<    /* do nothing now... */
---
>    
4829c4556
< /*---------------------------------------------------*/
---
> 
4850,4853c4577,4578
< /*---------------------------------------------------*/
< /*--
<    return last error code 
< --*/
---
> 
> 
4865,4870c4590,4595
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
---
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
4884,4950c4609,4634
< /*-------------------------------------------------------------*/
< /*--- end                                           bzlib.c ---*/
< /*-------------------------------------------------------------*/
< 
< /*-----------------------------------------------------------*/
< /*--- A block-sorting, lossless compressor        bzip2.c ---*/
< /*-----------------------------------------------------------*/
< 
< 
< 
< /*----------------------------------------------------*/
< /*--- IMPORTANT                                    ---*/
< /*----------------------------------------------------*/
< 
< /*--
<    WARNING:
<       This program and library (attempts to) compress data by 
<       performing several non-trivial transformations on it.  
<       Unless you are 100% familiar with *all* the algorithms 
<       contained herein, and with the consequences of modifying them, 
<       you should NOT meddle with the compression or decompression 
<       machinery.  Incorrect changes can and very likely *will* 
<       lead to disasterous loss of data.
< 
<    DISCLAIMER:
<       I TAKE NO RESPONSIBILITY FOR ANY LOSS OF DATA ARISING FROM THE
<       USE OF THIS PROGRAM, HOWSOEVER CAUSED.
< 
<       Every compression of a file implies an assumption that the
<       compressed file can be decompressed to reproduce the original.
<       Great efforts in design, coding and testing have been made to
<       ensure that this program works correctly.  However, the
<       complexity of the algorithms, and, in particular, the presence
<       of various special cases in the code which occur with very low
<       but non-zero probability make it impossible to rule out the
<       possibility of bugs remaining in the program.  DO NOT COMPRESS
<       ANY DATA WITH THIS PROGRAM AND/OR LIBRARY UNLESS YOU ARE PREPARED 
<       TO ACCEPT THE POSSIBILITY, HOWEVER SMALL, THAT THE DATA WILL 
<       NOT BE RECOVERABLE.
< 
<       That is not to say this program is inherently unreliable.
<       Indeed, I very much hope the opposite is true.  bzip2/libbzip2
<       has been carefully constructed and extensively tested.
< 
<    PATENTS:
<       To the best of my knowledge, bzip2/libbzip2 does not use any 
<       patented algorithms.  However, I do not have the resources 
<       available to carry out a full patent search.  Therefore I cannot 
<       give any guarantee of the above statement.
< --*/
< 
< 
< 
< /*----------------------------------------------------*/
< /*--- and now for something much more pleasant :-) ---*/
< /*----------------------------------------------------*/
< 
< /*---------------------------------------------*/
< /*--
<   Place a 1 beside your platform, and 0 elsewhere.
< --*/
< 
< /*--
<   Generic 32-bit Unix.
<   Also works on 64-bit Unix boxes.
<   This is the default.
< --*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
4953,4959c4637
< /*--
<   Win32, as seen by Jacob Navia's excellent
<   port of (Chris Fraser & David Hanson)'s excellent
<   lcc compiler.  Or with MS Visual C.
<   This is selected automatically if compiled by a compiler which
<   defines _WIN32, not including the Cygwin GCC.
< --*/
---
> 
4963,4966c4641,4642
< /*---------------------------------------------*/
< /*--
<   Some stuff for all platforms.
< --*/
---
> 
> 
4976,4979c4652,4653
< /*---------------------------------------------*/
< /*--
<    Platform-specific stuff.
< --*/
---
> 
> 
4997c4671,4675
< #   define SET_BINARY_MODE(fd) /**/
---
> #   define SET_BINARY_MODE(fd) 
> 
> #      define NORETURN 
> 
> #endif 
4999d4676
< #      define NORETURN /**/
5001d4677
< #endif /* BZ_UNIX */
5005,5008d4680
< /*---------------------------------------------*/
< /*--
<   Some more stuff for all platforms :-)
< --*/
5013,5016c4685
< /*--
<   IntNative is your platform's `native' int size.
<   Only here to avoid probs with 64-bit platforms.
< --*/
---
> 
5020,5022c4689,4691
< /*---------------------------------------------------*/
< /*--- Misc (file handling) data decls             ---*/
< /*---------------------------------------------------*/
---
> 
> 
> 
5030c4699
< /*-- source modes; F==file, I==stdin, O==stdout --*/
---
> 
5035c4704
< /*-- operation modes --*/
---
> 
5067,5070c4736,4739
< /*---------------------------------------------------*/
< /*--- An implementation of 64-bit ints.  Sigh.    ---*/
< /*--- Roll on widespread deployment of ANSI C9X ! ---*/
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
5115c4784
< /* Divide *n by 10, and return the remainder.  */
---
> 
5131,5133c4800
< /* ... and the Whole Entire Point of all this UInt64 stuff is
<    so that we can supply the following function.
< */
---
> 
5152,5154d4818
< /*---------------------------------------------------*/
< /*--- Processing of complete files and streams    ---*/
< /*---------------------------------------------------*/
5156d4819
< /*---------------------------------------------*/
5158c4821,4825
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
5254c4921
<    /*notreached*/
---
>    
5259c4926
< /*---------------------------------------------*/
---
> 
5369c5036
<    return True; /*notreached*/
---
>    return True; 
5373c5040
< /*---------------------------------------------*/
---
> 
5460c5127
<    return True; /*notreached*/
---
>    return True; 
5464,5466d5130
< /*---------------------------------------------------*/
< /*--- Error [non-] handling grunge                ---*/
< /*---------------------------------------------------*/
5468c5132,5135
< /*---------------------------------------------*/
---
> 
> 
> 
> 
5476c5143
< /*---------------------------------------------*/
---
> 
5491c5158
< /*---------------------------------------------*/
---
> 
5504c5171
< /*---------------------------------------------*/
---
> 
5515,5519c5182
<       /* Check whether input file still exists.  Delete output file
<          only if input exists to avoid loss of data.  Joerg Prante, 5
<          January 2002.  (JRS 06-Jan-2002: other changes in 1.0.2 mean
<          this is less likely to happen.  But to be ultra-paranoid, we
<          do the check anyway.)  */
---
>       
5563c5226
< /*---------------------------------------------*/
---
> 
5578c5241
< /*---------------------------------------------*/
---
> 
5591c5254
< /*---------------------------------------------*/
---
> 
5608c5271
< /*---------------------------------------------*/
---
> 
5622c5285
< /*---------------------------------------------*/
---
> 
5633c5296
< /*---------------------------------------------*/
---
> 
5689c5352
< /*---------------------------------------------*/
---
> 
5701c5364
< /*---------------------------------------------*/
---
> 
5716,5723d5378
< /*---------------------------------------------------*/
< /*--- The main driver machinery                   ---*/
< /*---------------------------------------------------*/
< 
< /* All rather crufty.  The main problem is that input files
<    are stat()d multiple times before use.  This should be
<    cleaned up. 
< */
5725c5380,5385
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
5736c5396
< /*---------------------------------------------*/
---
> 
5757c5417
< /*---------------------------------------------*/
---
> 
5768,5777c5428,5429
< /*---------------------------------------------*/
< /* Open an output file safely with O_EXCL and good permissions.
<    This avoids a race condition in versions < 1.0.2, in which
<    the file was first opened and then had its interim permissions
<    set safely.  We instead use open() to create the file with
<    the interim permissions required. (--- --- rw-).
< 
<    For non-Unix platforms, if we are not worrying about
<    security issues, simple this simply behaves like fopen.
< */
---
> 
> 
5794,5797c5446,5447
< /*---------------------------------------------*/
< /*--
<   if in doubt, return True
< --*/
---
> 
> 
5811,5814c5461,5462
< /*---------------------------------------------*/
< /*--
<   rac 11/21/98 see if file has hard links to it
< --*/
---
> 
> 
5827,5849c5475,5476
< /*---------------------------------------------*/
< /* Copy modification date, access date, permissions and owner from the
<    source to destination file.  We have to copy this meta-info off
<    into fileMetaInfo before starting to compress / decompress it,
<    because doing it afterwards means we get the wrong access time.
< 
<    To complicate matters, in compress() and decompress() below, the
<    sequence of tests preceding the call to saveInputFileMetaInfo()
<    involves calling fileExists(), which in turn establishes its result
<    by attempting to fopen() the file, and if successful, immediately
<    fclose()ing it again.  So we have to assume that the fopen() call
<    does not cause the access time field to be updated.
< 
<    Reading of the man page for stat() (man 2 stat) on RedHat 7.2 seems
<    to imply that merely doing open() will not affect the access time.
<    Therefore we merely need to hope that the C library only does
<    open() as a result of fopen(), and not any kind of read()-ahead
<    cleverness.
< 
<    It sounds pretty fragile to me.  Whether this carries across
<    robustly to arbitrary Unix-like platforms (or even works robustly
<    on this one, RedHat 7.2) is unknown to me.  Nevertheless ...  
< */
---
> 
> 
5860c5487
<    /* Note use of stat here, not lstat. */
---
>    
5884,5886c5511
<    /* chown() will in many cases return with EPERM, which can
<       be safely ignored.
<    */
---
>    
5891c5516
< /*---------------------------------------------*/
---
> 
5896,5898c5521
<    /* On unix, files can contain any characters and the file expansion
<     * is performed by the shell.
<     */
---
>    
5900,5903c5523,5524
< #  else /* ! BZ_UNIX */
<    /* On non-unix (Win* platforms), wildcard characters are not allowed in 
<     * filenames.
<     */
---
> #  else 
>    
5907c5528
< #  endif /* BZ_UNIX */
---
> #  endif 
5911c5532
< /*---------------------------------------------*/
---
> 
5940c5561
< /*---------------------------------------------*/
---
> 
6029,6030c5650
<       /* Save the file's meta-info before we open it.  Doing it later
<          means we mess up the access times. */
---
>       
6101c5721
<    /*--- Now the input and output handles are sane.  Do the Biz. ---*/
---
>    
6107c5727
<    /*--- If there was an I/O error, we won't get here. ---*/
---
>    
6121c5741
< /*---------------------------------------------*/
---
> 
6189c5809
<    if ( /* srcMode == SM_F2F implied && */ cantGuess ) {
---
>    if (  cantGuess ) {
6194c5814
<       /* just a warning, no return */
---
>       
6215,6216c5835
<       /* Save the file's meta-info before we open it.  Doing it later
<          means we mess up the access times. */
---
>       
6278c5897
<    /*--- Now the input and output handles are sane.  Do the Biz. ---*/
---
>    
6284c5903
<    /*--- If there was an I/O error, we won't get here. ---*/
---
>    
6319c5938
< /*---------------------------------------------*/
---
> 
6399c6018
<    /*--- Now the input handle is sane.  Do the Biz. ---*/
---
>    
6408c6027
< /*---------------------------------------------*/
---
> 
6433c6052
< /*---------------------------------------------*/
---
> 
6477c6096
< /*---------------------------------------------*/
---
> 
6488,6501c6107,6108
< /*---------------------------------------------*/
< /*--
<   All the garbage from here to main() is purely to
<   implement a linked list of command-line arguments,
<   into which main() copies argv[1 .. argc-1].
< 
<   The purpose of this exercise is to facilitate 
<   the expansion of wildcard characters * and ? in 
<   filenames for OSs which don't know how to do it
<   themselves, like MSDOS, Windows 95 and NT.
< 
<   The actual Dirty Work is done by the platform-
<   specific macro APPEND_FILESPEC.
< --*/
---
> 
> 
6511c6118
< /*---------------------------------------------*/
---
> 
6523c6130
< /*---------------------------------------------*/
---
> 
6536c6143
< /*---------------------------------------------*/
---
> 
6554c6161
< /*---------------------------------------------*/
---
> 
6582c6189
< /*---------------------------------------------*/
---
> 
6593c6200
<    /*-- Be really really really paranoid :-) --*/
---
>    
6599c6206
<    /*-- Initialise --*/
---
>    
6614c6221
<    i = j = 0; /* avoid bogus warning from egcs-1.1.X */
---
>    i = j = 0; 
6616c6223
<    /*-- Set up signal handlers for mem access errors --*/
---
>    
6631,6633c6238
<    /*-- Copy flags from env var BZIP2, and 
<         expand filename wildcards in arg list.
<    --*/
---
>    
6641c6246
<    /*-- Find the length of the longest filename --*/
---
>    
6654c6259
<    /*-- Determine source modes; flag handling may change this too. --*/
---
>    
6659,6660c6264,6265
<    /*-- Determine what to do (compress/uncompress/test/cat). --*/
<    /*-- Note that subsequent flag handling may change this. --*/
---
>    
>    
6676c6281
<    /*-- Look at the flags. --*/
---
>    
6715c6320
<    /*-- And again ... --*/
---
>    
6824,6826c6429
<    /* Free the argument list memory to mollify leak detectors 
<       (eg) Purify, Checker.  Serves no other useful purpose.
<    */
---
>    
6839,6841c6442,6444
< /*-----------------------------------------------------------*/
< /*--- end                                         bzip2.c ---*/
< /*-----------------------------------------------------------*/
\ No newline at end of file
---
> 
> 
>  
\ No newline at end of file
(19.2 %, 165542 bytes)
===< pass_blank :: 0 >===
1,8d0
<  
< 
< 
< 
< 
< 
< 
< 
10d1
< 
14d4
< 
29d18
< 
36d24
< 
41d28
< 
43d29
< 
49,51d34
< 
< 
< 
53d35
< 
56,59d37
< 
< 
< 
< 
66d43
< 
71d47
< 
75d50
< 
81d55
< 
85d58
< 
89,93d61
< 
< 
< 
< 
< 
95d62
< 
97d63
< 
106d71
< 
111d75
< 
118d81
< 
125d87
< 
133d94
< 
140d100
< 
148d107
< 
158,161d116
< 
< 
< 
< 
171d125
< 
180,183d133
< 
< 
< 
< 
187d136
< 
192d140
< 
197d144
<          
203d149
< 
209d154
< 
213d157
< 
217d160
< 
222,230d164
< 
< 
< 
< 
< 
< 
< 
< 
< 
232d165
< 
234,237d166
< 
< 
< 
< 
239d167
< 
247d174
< 
250d176
< 
252d177
< 
274,275d198
< 
< 
278,281d200
< 
< 
< 
< 
286,288d204
<   
< 
< 
291d206
< 
294d208
< 
298d211
< 
300,304d212
< 
< 
< 
< 
< 
306d213
< 
310d216
< 
314d219
< 
316d220
< 
324,328d227
< 
< 
< 
< 
< 
330d228
< 
335d232
< 
340d236
< 
347,351d242
< 
< 
< 
< 
< 
356d246
< 
359d248
< 
364,369d252
< 
< 
< 
< 
< 
< 
372d254
<       
374,376d255
< 
<       
<       
379,380d257
< 
<       
382,383d258
< 
<       
388,389d262
< 
<       
394,395d266
< 
<       
397,398d267
< 
<       
402,403d270
< 
<       
408,409d274
< 
<       
413,414d277
< 
<       
417,418d279
< 
<       
421,422d281
< 
<       
426,427d284
< 
<       
432d288
< 
436d291
<       
438d292
< 
441,445d294
< 
< 
< 
< 
< 
448d296
< 
451d298
< 
454d300
< 
457d302
< 
460,464d304
< 
< 
< 
< 
< 
467d306
< 
509,513d347
< 
< 
< 
< 
< 
516,520d349
< 
< 
< 
< 
< 
523d351
<       
525,526d352
< 
<       
528,529d353
< 
<       
534,535d357
< 
<       
538,539d359
< 
<       
544,545d363
< 
<       
553,554d370
< 
<       
556,557d371
< 
<       
560,561d373
< 
<       
566,567d377
< 
<       
572,573d381
< 
<       
579d386
< 
584,585d390
< 
<       
610d414
< 
613,617d416
< 
< 
< 
< 
< 
622d420
< 
627d424
< 
633d429
< 
636d431
< 
641d435
< 
644d437
< 
648,651d440
< 
< 
< 
< 
654d442
< 
657d444
< 
661,682d447
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
692d456
< 
694d457
< 
704d466
< 
713,715d474
< 
< 
< 
718d476
< 
729,730d486
< 
< 
732d487
< 
736d490
< 
740d493
< 
743,744d495
< 
< 
756d506
< 
758d507
< 
761d509
< 
763d510
< 
765d511
< 
771,772d516
< 
<       
778d521
< 
781d523
< 
808d549
< 
810d550
< 
812d551
< 
815d553
< 
818d555
< 
828d564
< 
836,840d571
< 
< 
< 
< 
< 
846d576
< 
860,861d589
< 
<    
868d595
< 
875d601
< 
879,882d604
< 
<    
< 
<    
887,888d608
< 
<    
891d610
< 
894d612
< 
901d618
< 
905,906d621
< 
< 	 
922,923d636
< 
<          
927,928d639
< 
<             
936d646
< 
939d648
< 
943,944d651
< 
<    
955d661
< 
961,969d666
< 
< 
< 
< 
< 
< 
< 
< 
< 
982d678
< 
984d679
<    
988d682
<    
992d685
<    
996d688
<    
1000d691
<    
1004d694
<    
1008d697
<    
1012d700
<    
1016d703
<    
1020d706
<    
1024d709
<    
1028d712
<    
1032d715
< 
1034d716
< 
1036d717
<       
1042d722
<       
1048d727
<       
1054d732
<       
1060d737
<       
1066d742
<       
1072d747
<       
1078d752
<       
1084d757
< 
1087d759
< 
1092d763
< 
1095,1098d765
< 
< 
< 
< 
1103d769
< 
1116d781
< 
1119d783
< 
1123d786
< 
1126d788
< 
1129,1130d790
< 
<          
1143,1144d802
< 
<          
1157,1158d814
< 
<          
1171d826
< 
1176,1180d830
< 
< 
< 
< 
< 
1183d832
< 
1194d842
< 
1207d854
< 
1209d855
< 
1214d859
< 
1219,1220d863
< 
< 
1222d864
< 
1228,1229d869
< 
< 
1233d872
< 
1246d884
< 
1250d887
< 
1254d890
< 
1257d892
< 
1259d893
< 
1261d894
< 
1269d901
< 
1274d905
< 
1277d907
< 
1302d931
< 
1304d932
< 
1309d936
< 
1312d938
< 
1315d940
< 
1319d943
< 
1323d946
< 
1326d948
< 
1332d953
< 
1343,1347d963
< 
< 
< 
< 
< 
1351d966
< 
1370,1371d984
< 
<    
1373d985
< 
1395,1396d1006
< 
<    
1401d1010
< 
1403,1404d1011
< 
<    
1406d1012
< 
1433,1434d1038
< 
<    
1439d1042
< 
1459,1461d1061
< 
<    
< 
1463d1062
< 
1465,1466d1063
< 
<       
1468,1469d1064
< 
<       
1492d1086
< 
1494,1495d1087
< 
<       
1514d1105
< 
1517d1107
<                 
1520d1109
< 
1522,1523d1110
< 
<       
1525d1111
< 
1530d1115
< 
1532d1116
< 
1542d1125
< 
1544d1126
< 
1549d1130
< 
1553,1556d1133
< 
< 
< 
< 
1569d1145
< 
1573d1148
<       
1577,1578d1151
< 
<       
1583d1155
< 
1598d1169
< 
1603d1173
< 
1606,1618d1175
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1622d1178
< 
1626d1181
< 
1637d1191
< 
1654,1656d1207
< 
< 
< 
1662d1212
<    
1665d1214
< 
1669d1217
< 
1672d1219
< 
1674d1220
< 
1677d1222
< 
1681d1225
< 
1688d1231
< 
1690d1232
<    
1702d1243
< 
1704d1244
< 
1713d1252
<       
1715d1253
< 
1723,1725d1260
< 
< 
< 
1733d1267
< 
1741,1743d1274
< 
< 
< 
1753d1283
< 
1758d1287
< 
1761d1289
< 
1763d1290
< 
1766d1292
< 
1775,1788d1300
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1790,1792d1301
< 
<    
< 
1858,1870d1366
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1925,1941d1420
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1947,1949d1425
< 
< 
< 
1960,1962d1435
< 
< 
< 
1973,1975d1445
< 
< 
< 
1984,1986d1453
< 
< 
< 
1995,1997d1461
< 
< 
< 
2003,2009d1466
< 
< 
< 
< 
< 
< 
< 
2021,2023d1477
< 
< 
< 
2032,2033d1485
< 
<    
2037d1488
< 
2040d1490
< 
2042d1491
< 
2046d1494
< 
2053d1500
< 
2057d1503
< 
2092d1537
< 
2095d1539
< 
2111d1554
< 
2113d1555
< 
2116,2118d1557
< 
< 
< 
2121d1559
< 
2128,2131d1565
< 
<    
< 
< 
2134d1567
< 
2136d1568
< 
2141d1572
< 
2146,2147d1576
< 
<    
2154,2155d1582
< 
<    
2158d1584
< 
2170d1595
< 
2177d1601
< 
2183d1606
<  
2188d1610
<  
2194,2195d1615
< 
<    
2197d1616
< 
2199d1617
< 
2203,2204d1620
< 
<       
2212d1627
< 
2217,2218d1631
< 
<          
2222,2223d1634
< 
<          
2225d1635
< 
2227d1636
<             
2231d1639
< 
2237d1644
< 
2248d1654
< 
2250d1655
< 
2254d1658
< 
2256d1659
< 	    
2262,2263d1664
<  
<          
2271,2272d1671
< 
<          
2274,2275d1672
<             
< 
2277d1673
< 
2288d1683
< 
2290d1684
< 
2292d1685
< 	    
2296d1688
< 
2306,2307d1697
< 
<       
2312,2313d1701
< 
< 
2318,2320d1705
< 
< 
<    
2338,2339d1722
< 
<    
2352,2353d1734
< 
<    
2361d1741
<      
2365d1744
< 
2371d1749
< 
2375,2376d1752
< 
<    
2386,2387d1761
< 
<    
2389d1762
< 
2399d1771
< 
2402,2403d1773
< 
<    
2412d1781
< 
2414d1782
<             
2420d1787
< 
2426d1792
< 
2437d1802
< 
2439d1803
< 
2441d1804
< 	 
2448,2449d1810
< 
< 
2454d1814
< 
2458,2460d1817
< 
< 
< 
2464d1820
< 
2469d1824
< 
2474d1828
< 
2477d1830
< 
2479,2480d1831
< 
<    
2488d1838
< 
2490d1839
< 
2494,2495d1842
< 
<       
2497,2498d1843
< 
<       
2500d1844
< 
2505,2507d1848
< 
< 
<    
2509d1849
< 
2519,2531d1858
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
2543,2545d1869
< 
< 
< 
2548d1871
< 
2572d1894
< 
2575d1896
< 
2578,2579d1898
< 
< 
2609,2611d1927
< 
< 
< 
2618,2619d1933
< 
<    
2644d1957
< 
2646d1958
<       
2672,2673d1983
< 
<    
2698d2007
< 
2700d2008
< 
2702d2009
< 
2705d2011
< 
2708d2013
< 
2711d2015
< 
2716d2019
< 
2727d2029
< 
2729d2030
< 
2742d2042
< 
2746d2045
<  
2756d2054
< 
2758d2055
< 
2766d2062
< 
2771,2772d2066
< 
<       
2779d2072
< 
2781d2073
< 
2791,2792d2082
< 
<       
2807,2808d2096
< 
<       
2812d2099
<    
2821,2822d2107
< 
<       
2836,2837d2120
< 
<       
2854,2856d2136
< 
<       
< 
2861d2140
< 
2863,2864d2141
< 
<       
2876,2877d2152
<       
< 
2880d2154
< 
2882d2155
< 
2884d2156
< 
2886d2157
< 
2896d2166
< 
2900d2169
< 
2915d2183
< 
2917d2184
< 
2919d2185
< 
2921,2922d2186
< 
<             
2927d2190
< 
2929d2191
<                   
2945d2206
<                   
2974,2975d2234
<             
< 
2981d2239
< 
2986,2987d2243
< 
<       
2990d2245
< 
2996,2997d2250
< 
<       
3001d2253
< 
3003,3004d2254
< 
<          
3006,3007d2255
< 
<          
3013,3014d2260
< 
<          
3024d2269
< 
3034d2278
< 
3036,3037d2279
< 
<          
3043d2284
< 
3053d2293
< 
3055d2294
< 
3057,3059d2295
< 
< 
< 
3061d2296
< 
3072d2306
< 
3082d2315
< 
3085d2317
< 
3088d2319
< 
3090d2320
< 
3092d2321
< 
3117d2345
< 
3120,3136d2347
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
3151d2361
< 
3179d2388
< 
3182,3184d2390
< 
< 
< 
3193,3195d2398
< 
< 
< 
3202d2404
< 
3208,3210d2409
< 
< 
< 
3222,3224d2420
< 
< 
< 
3231,3232d2426
< 
< 
3240,3242d2433
< 
< 
< 
3251d2441
< 
3253d2442
< 
3258d2446
< 
3262d2449
< 
3266d2452
< 
3270d2455
< 
3275d2459
< 
3283d2466
< 
3292d2474
< 
3297d2478
< 
3307,3309d2487
< 
< 
< 
3343,3345d2520
< 
< 
< 
3352,3354d2526
< 
< 
< 
3380,3382d2551
< 
< 
< 
3387d2555
< 
3389,3390d2556
< 
<       
3392d2557
<          
3394d2558
<          
3403d2566
< 
3405,3406d2567
< 
<       
3408d2568
<          
3410d2569
<          
3412d2570
<          
3425,3427d2582
< 
< 
< 
3432d2586
< 
3434,3435d2587
< 
<       
3437,3438d2588
< 
<       
3440d2589
< 
3449d2597
< 
3452,3454d2599
< 
< 
< 
3461d2605
<    
3463d2606
< 
3476d2618
< 
3494d2635
< 
3496d2636
< 
3499,3501d2638
< 
< 
< 
3510d2646
< 
3513d2648
< 
3516d2650
< 
3536d2669
< 
3546d2678
< 
3560,3562d2691
< 
< 
< 
3570d2698
< 
3575d2702
< 
3577d2703
< 
3580,3586d2705
< 
< 
< 
< 
< 
< 
< 
3593d2711
< 
3595d2712
< 
3599d2715
< 
3602d2717
< 
3621d2735
< 
3624,3626d2737
< 
< 
< 
3631d2741
< 
3633d2742
< 
3635d2743
<          
3647,3648d2754
<    
<          
3650,3651d2755
<                
<    
3658d2761
<    
3664d2766
<    
3670d2771
<    
3677d2777
< 
3679,3680d2778
< 
<       
3690,3691d2787
<       
< 
3695d2790
< 
3697,3698d2791
< 
<          
3720d2812
<          
3731d2822
<    
3736d2826
<    
3741d2830
<    
3746d2834
< 
3752,3753d2839
< 
<       
3763d2848
<       
3766,3769d2850
< 
< 
< 
< 
3782,3784d2862
< 
< 
< 
3789d2866
< 
3791d2867
< 
3793d2868
<          
3805,3806d2879
<    
<          
3808,3809d2880
<                
<    
3816d2886
<    
3822d2891
<    
3828d2896
<    
3835d2902
< 
3837d2903
< 
3839d2904
<          
3851,3852d2915
<    
<          
3854d2916
<    
3860d2921
<    
3865d2925
<    
3870d2929
<    
3875d2933
< 
3878,3880d2935
< 
< 
< 
3888d2942
< 
3925d2978
< 
3927d2979
< 
3930,3932d2981
< 
< 
< 
3940d2988
< 
3944d2991
< 
3947d2993
< 
3950,3955d2995
< 
< 
< 
< 
< 
< 
3961d3000
< 
3973,3975d3011
< 
< 
< 
3983,3985d3018
< 
< 
< 
3995d3027
< 
3997d3028
< 
4003d3033
< 
4006d3035
< 
4010d3038
< 
4019d3046
< 
4025d3051
< 
4030,4033d3055
< 
< 
< 
< 
4042d3063
< 
4050d3070
< 
4053d3072
< 
4056d3074
< 
4063d3080
< 
4071d3087
< 
4076,4078d3091
< 
< 
< 
4089,4090d3101
< 
< 
4102d3112
< 
4109d3118
< 
4114d3122
< 
4122d3129
< 
4130d3136
< 
4134d3139
< 
4140d3144
< 
4149d3152
< 
4154,4156d3156
< 
< 
< 
4167d3166
< 
4169d3167
< 
4176d3173
< 
4179d3175
< 
4183d3178
< 
4185d3179
< 
4193d3186
<    
4199d3191
< 
4203d3194
< 
4206d3196
< 
4210,4212d3199
< 
< 
< 
4216d3202
< 
4220d3205
< 
4223d3207
< 
4228,4230d3211
< 
< 
< 
4239d3219
< 
4241d3220
< 
4244d3222
< 
4247d3224
< 
4250d3226
< 
4253d3228
< 
4255d3229
< 
4258d3231
< 
4268d3240
< 
4270d3241
< 
4273d3243
< 
4277d3246
< 
4283d3251
<       
4285d3252
< 
4288,4290d3254
< 
< 
< 
4304d3267
< 
4309,4315d3271
< 
< 
< 
< 
< 
< 
< 
4327d3282
< 
4334d3288
< 
4342d3295
< 
4347d3299
< 
4351,4352d3302
< 
<    
4356d3305
< 
4360d3308
< 
4365,4367d3312
< 
< 
< 
4378d3322
< 
4384d3327
< 
4390d3332
< 
4395d3336
< 
4399,4400d3339
< 
<    
4404d3342
< 
4413d3350
< 
4418,4425d3354
< 
< 
< 
< 
< 
< 
< 
< 
4430,4433d3358
< 
< 
< 
< 
4452d3376
< 
4471d3394
< 
4482d3404
< 
4484d3405
<       
4499,4502d3419
< 
< 
< 
< 
4509,4511d3425
< 
< 
< 
4518,4520d3431
< 
< 
< 
4532,4534d3442
< 
< 
< 
4538d3445
< 
4546,4548d3452
< 
< 
< 
4551d3454
<    
4554,4556d3456
< 
< 
< 
4561d3460
<    
4575,4578d3473
< 
< 
< 
< 
4597,4598d3491
< 
< 
4602d3494
< 
4607,4634d3498
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
4636,4637d3499
< 
< 
4639,4643d3500
< 
< 
< 
< 
< 
4646d3502
< 
4650,4654d3505
< 
< 
< 
< 
< 
4658d3508
< 
4664d3513
< 
4667d3515
< 
4670d3517
< 
4672d3518
< 
4674d3519
< 
4676,4681d3520
< 
< 
< 
< 
< 
<                                        
4684,4685d3522
< 
< 
4687,4692d3523
< 
< 
< 
< 
< 
< 
4698,4699d3528
< 
< 
4703,4704d3531
< 
< 
4708d3534
< 
4711d3536
< 
4713d3537
< 
4722d3545
< 
4730d3552
< 
4733,4740d3554
< 
< 
< 
< 
< 
< 
< 
< 
4744,4745d3557
< 
< 
4758,4759d3569
< 
< 
4772,4773d3581
< 
< 
4782,4784d3589
< 
< 
< 
4798,4800d3602
< 
< 
< 
4817,4825d3618
< 
< 
< 
< 
< 
< 
< 
< 
< 
4835d3627
< 
4838d3629
< 
4841d3631
< 
4845d3634
< 
4847d3635
< 
4849d3636
< 
4855d3641
< 
4857d3642
< 
4862d3646
< 
4875d3658
< 
4901d3683
< 
4903d3684
< 
4919d3699
< 
4921d3700
<    
4923,4926d3701
< 
< 
< 
< 
4936d3710
< 
4939d3712
< 
4942d3714
< 
4945d3716
< 
4947d3717
< 
4954d3723
< 
4963d3731
< 
4966d3733
< 
4968d3734
< 
4971d3736
< 
4974d3738
< 
4979d3742
< 
4991d3753
< 
5004d3765
<   
5034d3794
< 
5038,5040d3797
< 
< 
< 
5050d3806
< 
5053d3808
< 
5056d3810
< 
5058d3811
< 
5065d3817
< 
5071d3822
< 
5074d3824
< 
5076d3825
< 
5080d3828
< 
5082d3829
< 
5086d3832
< 
5089d3834
< 
5125d3869
< 
5129,5135d3872
< 
< 
< 
< 
< 
< 
< 
5141,5143d3877
< 
< 
< 
5156,5158d3889
< 
< 
< 
5169,5171d3899
< 
< 
< 
5177d3904
< 
5181,5182d3907
< 
<       
5213d3937
< 
5224,5226d3947
< 
< 
< 
5239,5241d3959
< 
< 
< 
5252,5254d3969
< 
< 
< 
5269,5271d3983
< 
< 
< 
5283,5285d3994
< 
< 
< 
5294,5296d4002
< 
< 
< 
5344d4049
< 
5350,5352d4054
< 
< 
< 
5362,5364d4063
< 
< 
< 
5377,5385d4075
< 
< 
< 
< 
< 
< 
< 
< 
< 
5394,5396d4083
< 
< 
< 
5411d4097
< 
5415,5417d4100
< 
< 
< 
5426,5429d4108
< 
< 
< 
< 
5444,5447d4122
< 
< 
< 
< 
5453d4127
< 
5459,5462d4132
< 
< 
< 
< 
5468d4137
< 
5473,5476d4141
< 
< 
< 
< 
5481d4145
< 
5487d4150
<    
5492,5493d4154
< 
< 
5500d4160
< 
5503d4162
< 
5506d4164
< 
5509d4166
< 
5511d4167
<    
5514,5516d4169
< 
< 
< 
5521d4173
<    
5524d4175
<    
5530,5532d4180
< 
< 
< 
5534d4181
< 
5539d4185
< 
5549d4194
< 
5559,5561d4203
< 
< 
< 
5569d4210
< 
5571d4211
< 
5574d4213
< 
5590d4228
< 
5648d4285
< 
5650d4286
<       
5653d4288
< 
5655d4289
< 
5669d4302
< 
5690d4322
< 
5709d4340
< 
5714d4344
< 
5720,5721d4349
< 
<    
5726,5727d4353
< 
<    
5736d4361
< 
5739,5741d4363
< 
< 
< 
5751d4372
< 
5753d4373
< 
5756d4375
< 
5777d4395
< 
5814d4431
<       
5833d4449
< 
5835d4450
<       
5838d4452
< 
5840d4453
< 
5854d4466
< 
5866d4477
< 
5885d4495
< 
5890d4499
< 
5896,5897d4504
< 
<    
5902,5903d4508
< 
<    
5922d4526
< 
5934d4537
< 
5936,5938d4538
< 
< 
< 
5945d4544
< 
5947d4545
< 
5950d4547
< 
5957d4553
< 
5981d4576
< 
5983d4577
< 
5996d4589
< 
6006d4598
< 
6011d4602
< 
6017,6018d4607
< 
<    
6021d4609
< 
6025,6027d4612
< 
< 
< 
6032d4616
< 
6050,6052d4633
< 
< 
< 
6089d4669
< 
6094,6096d4673
< 
< 
< 
6105,6109d4681
< 
< 
< 
< 
< 
6116,6118d4687
< 
< 
< 
6123d4691
< 
6128,6130d4695
< 
< 
< 
6135d4699
< 
6141,6143d4704
< 
< 
< 
6159,6161d4719
< 
< 
< 
6167d4724
< 
6187,6189d4743
< 
< 
< 
6191d4744
< 
6199,6200d4751
< 
<    
6205,6206d4755
< 
<    
6222,6223d4770
< 
<    
6228d4774
< 
6231d4776
< 
6236,6238d4780
< 
< 
<    
6244,6246d4785
< 
< 
<    
6257,6259d4795
< 
< 
<    
6262,6265d4797
< 
< 
<    
<    
6267d4798
< 
6271d4801
< 
6279,6281d4808
< 
< 
<    
6319,6320d4845
<    
<    
6347d4871
< 
6351d4874
< 
6357d4879
< 
6360d4881
< 
6362d4882
< 
6370d4889
< 
6385d4903
< 
6404d4921
< 
6428,6429d4944
< 
<    
6437d4951
< 
6440,6444d4953
< 
< 
< 
< 
<  
\ No newline at end of file
===< pass_clang_binsrch :: replace-function-def-with-decl >===
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2127c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
---
> ;
2129d1204
<    
2132,2518c1207,1208
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
< 
< 
< 
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> void BZ2_compressBlock ( EState* s, Bool is_last_block )
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
2613,3119c1295
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
3138,3181c1314
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
3187,3192c1320
< {
<    if (sizeof(int)   != 4) return 0;
<    if (sizeof(short) != 2) return 0;
<    if (sizeof(char)  != 1) return 0;
<    return 1;
< }
---
> ;
3198,3201c1326
< {
<    void* v = malloc ( items * size );
<    return v;
< }
---
> ;
3205,3207c1330
< {
<    if (addr != NULL) free ( addr );
< }
---
> ;
3213,3221c1336
< {
<    Int32 i;
<    s->nblock = 0;
<    s->numZ = 0;
<    s->state_out_pos = 0;
<    BZ_INITIALISE_CRC ( s->blockCRC );
<    for (i = 0; i < 256; i++) s->inUse[i] = False;
<    s->blockNo++;
< }
---
> ;
3227,3230c1342
< {
<    s->state_in_ch  = 256;
<    s->state_in_len = 0;
< }
---
> ;
3235,3239c1347
< {
<    if (s->state_in_ch < 256 && s->state_in_len > 0)
<       return False; else
<       return True;
< }
---
> ;
3312,3342c1420
< {
<    Int32 i;
<    UChar ch = (UChar)(s->state_in_ch);
<    for (i = 0; i < s->state_in_len; i++) {
<       BZ_UPDATE_CRC( s->blockCRC, ch );
<    }
<    s->inUse[s->state_in_ch] = True;
<    switch (s->state_in_len) {
<       case 1:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 2:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 3:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       default:
<          s->inUse[s->state_in_len-4] = True;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = ((UChar)(s->state_in_len-4));
<          s->nblock++;
<          break;
<    }
< }
---
> ;
3348,3351c1426
< {
<    if (s->state_in_ch < 256) add_pair_to_block ( s );
<    init_RL ( s );
< }
---
> ;
3385,3424c1460
< {
<    Bool progress_in = False;
< 
<    if (s->mode == BZ_M_RUNNING) {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<       }
< 
<    } else {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          
<          if (s->avail_in_expect == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<          s->avail_in_expect--;
<       }
<    }
<    return progress_in;
< }
---
> ;
3430,3451c1466
< {
<    Bool progress_out = False;
< 
<    while (True) {
< 
<       
<       if (s->strm->avail_out == 0) break;
< 
<       
<       if (s->state_out_pos >= s->numZ) break;
< 
<       progress_out = True;
<       *(s->strm->next_out) = s->zbits[s->state_out_pos];
<       s->state_out_pos++;
<       s->strm->avail_out--;
<       s->strm->next_out++;
<       s->strm->total_out_lo32++;
<       if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<    }
< 
<    return progress_out;
< }
---
> ;
3457,3498c1472
< {
<    Bool progress_in  = False;
<    Bool progress_out = False;
<    EState* s = strm->state;
<    
<    while (True) {
< 
<       if (s->state == BZ_S_OUTPUT) {
<          progress_out |= copy_output_until_stop ( s );
<          if (s->state_out_pos < s->numZ) break;
<          if (s->mode == BZ_M_FINISHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<          prepare_new_block ( s );
<          s->state = BZ_S_INPUT;
<          if (s->mode == BZ_M_FLUSHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<       }
< 
<       if (s->state == BZ_S_INPUT) {
<          progress_in |= copy_input_until_stop ( s );
<          if (s->mode != BZ_M_RUNNING && s->avail_in_expect == 0) {
<             flush_RL ( s );
<             BZ2_compressBlock ( s, (Bool)(s->mode == BZ_M_FINISHING) );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->nblock >= s->nblockMAX) {
<             BZ2_compressBlock ( s, False );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->strm->avail_in == 0) {
<             break;
<          }
<       }
< 
<    }
< 
<    return progress_in || progress_out;
< }
---
> ;
3629,3630c1603
< {
<    UChar k1;
---
> ;
3632d1604
<    if (s->blockRandomised) {
3634,3676d1605
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
3678d1606
<    } else {
3680,3781c1608,1609
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
< 
< 
< 
< 
< Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
> ;
3787,3877c1615
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3977,3982c1715
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> ;
4440,4498c2173
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
4748,4757c2423
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
---
> ;
4762,4771c2428
< {
<    Int32  i;
<    double base = 1.0;
<    double sum  = 0.0;
<    for (i = 0; i < 8; i++) {
<       sum  += base * (double)(n->b[i]);
<       base *= 256.0;
<    }
<    return sum;
< }
---
> ;
4776,4781c2433
< {
<    Int32 i;
<    for (i = 0; i < 8; i++)
<       if (n->b[i] != 0) return 0;
<    return 1;
< }
---
> ;
4787,4797c2439
< {
<    UInt32 rem, tmp;
<    Int32  i;
<    rem = 0;
<    for (i = 7; i >= 0; i--) {
<       tmp = rem * 256 + n->b[i];
<       n->b[i] = tmp / 10;
<       rem = tmp % 10;
<    }
<    return rem;
< }
---
> ;
4803,4816c2445
< {
<    Int32  i, q;
<    UChar  buf[32];
<    Int32  nBuf   = 0;
<    UInt64 n_copy = *n;
<    do {
<       q = uInt64_qrm10 ( &n_copy );
<       buf[nBuf] = q + '0';
<       nBuf++;
<    } while (!uInt64_isZero(&n_copy));
<    outbuf[nBuf] = 0;
<    for (i = 0; i < nBuf; i++) 
<       outbuf[i] = buf[nBuf-i-1];
< }
---
> ;
4828,4922c2457
< {
<    BZFILE* bzf = NULL;
<    UChar   ibuf[5000];
<    Int32   nIbuf;
<    UInt32  nbytes_in_lo32, nbytes_in_hi32;
<    UInt32  nbytes_out_lo32, nbytes_out_hi32;
<    Int32   bzerr, bzerr_dummy, ret;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    bzf = BZ2_bzWriteOpen ( &bzerr, zStream, 
<                            blockSize100k, verbosity, workFactor );   
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n" );
< 
<    while (True) {
< 
<       if (myfeof(stream)) break;
<       nIbuf = fread ( ibuf, sizeof(UChar), 5000, stream );
<       if (ferror(stream)) goto errhandler_io;
<       if (nIbuf > 0) BZ2_bzWrite ( &bzerr, bzf, (void*)ibuf, nIbuf );
<       if (bzerr != BZ_OK) goto errhandler;
< 
<    }
< 
<    BZ2_bzWriteClose64 ( &bzerr, bzf, 0, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fflush ( zStream );
<    if (ret == EOF) goto errhandler_io;
<    if (zStream != stdout) {
<       ret = fclose ( zStream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (ferror(stream)) goto errhandler_io;
<    ret = fclose ( stream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 1) {
<       if (nbytes_in_lo32 == 0 && nbytes_in_hi32 == 0) {
< 	 fprintf ( stderr, " no data compressed.\n");
<       } else {
< 	 Char   buf_nin[32], buf_nout[32];
< 	 UInt64 nbytes_in,   nbytes_out;
< 	 double nbytes_in_d, nbytes_out_d;
< 	 uInt64_from_UInt32s ( &nbytes_in, 
< 			       nbytes_in_lo32, nbytes_in_hi32 );
< 	 uInt64_from_UInt32s ( &nbytes_out, 
< 			       nbytes_out_lo32, nbytes_out_hi32 );
< 	 nbytes_in_d  = uInt64_to_double ( &nbytes_in );
< 	 nbytes_out_d = uInt64_to_double ( &nbytes_out );
< 	 uInt64_toAscii ( buf_nin, &nbytes_in );
< 	 uInt64_toAscii ( buf_nout, &nbytes_out );
< 	 fprintf ( stderr, "%6.3f:1, %6.3f bits/byte, "
< 		   "%5.2f%% saved, %s in, %s out.\n",
< 		   nbytes_in_d / nbytes_out_d,
< 		   (8.0 * nbytes_out_d) / nbytes_in_d,
< 		   100.0 * (1.0 - nbytes_out_d / nbytes_in_d),
< 		   buf_nin,
< 		   buf_nout
< 		 );
<       }
<    }
< 
<    return;
< 
<    errhandler:
<    BZ2_bzWriteClose64 ( &bzerr_dummy, bzf, 1, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_MEM_ERROR:
<          outOfMemory (); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       default:
<          panic ( "compress:unexpected error" );
<    }
< 
<    panic ( "compress:end" );
<    
< }
---
> ;
4929,5037c2464
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto trycat;
<          if ((bzerr == BZ_OK || bzerr == BZ_STREAM_END) && nread > 0)
<             fwrite ( obuf, sizeof(UChar), nread, stream );
<          if (ferror(stream)) goto errhandler_io;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       if (nUnused == 0 && myfeof(zStream)) break;
<    }
< 
<    closeok:
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (ferror(stream)) goto errhandler_io;
<    ret = fflush ( stream );
<    if (ret != 0) goto errhandler_io;
<    if (stream != stdout) {
<       ret = fclose ( stream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    trycat: 
<    if (forceOverwrite) {
<       rewind(zStream);
<       while (True) {
<       	 if (myfeof(zStream)) break;
<       	 nread = fread ( obuf, sizeof(UChar), 5000, zStream );
<       	 if (ferror(zStream)) goto errhandler_io;
<       	 if (nread > 0) fwrite ( obuf, sizeof(UChar), nread, stream );
<       	 if (ferror(stream)) goto errhandler_io;
<       }
<       goto closeok;
<    }
<   
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          crcError();
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          compressedStreamEOF();
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (stream != stdout) fclose(stream);
<          if (streamNo == 1) {
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "\n%s: %s: trailing garbage after EOF ignored\n",
<                       progName, inName );
<             return True;       
<          }
<       default:
<          panic ( "decompress:unexpected error" );
<    }
< 
<    panic ( "decompress:end" );
<    return True; 
< }
---
> ;
5043,5128c2470
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(zStream);
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto errhandler;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
<       if (nUnused == 0 && myfeof(zStream)) break;
< 
<    }
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    if (verbosity == 0) 
<       fprintf ( stderr, "%s: %s: ", progName, inName );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          fprintf ( stderr,
<                    "data integrity (CRC) error in data\n" );
<          return False;
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          fprintf ( stderr,
<                    "file ends unexpectedly\n" );
<          return False;
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (streamNo == 1) {
<           fprintf ( stderr, 
<                     "bad magic number (file not created by bzip2)\n" );
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "trailing garbage after EOF ignored\n" );
<             return True;       
<          }
<       default:
<          panic ( "test:unexpected error" );
<    }
< 
<    panic ( "test:end" );
<    return True; 
< }
---
> ;
5138,5140c2480
< {
<    if (v > exitValue) exitValue = v;
< }
---
> ;
5146,5155c2486
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\nIt is possible that the compressed file(s) have become corrupted.\n"
<         "You can use the -tvv option to test integrity of such files.\n\n"
<         "You can use the `bzip2recover' program to attempt to recover\n"
<         "data from undamaged sections of corrupted files.\n\n"
<     );
< }
---
> ;
5161,5168c2492
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\tInput file = %s, output file = %s\n",
<       inName, outName 
<    );
< }
---
> ;
5174,5223c2498
< {
<    IntNative      retVal;
<    struct MY_STAT statBuf;
< 
<    if ( srcMode == SM_F2F 
<         && opMode != OM_TEST
<         && deleteOutputOnInterrupt ) {
< 
<       
<       retVal = MY_STAT ( inName, &statBuf );
<       if (retVal == 0) {
<          if (noisy)
<             fprintf ( stderr, 
<                       "%s: Deleting output file %s, if it exists.\n",
<                       progName, outName );
<          if (outputHandleJustInCase != NULL)
<             fclose ( outputHandleJustInCase );
<          retVal = remove ( outName );
<          if (retVal != 0)
<             fprintf ( stderr,
<                       "%s: WARNING: deletion of output file "
<                       "(apparently) failed.\n",
<                       progName );
<       } else {
<          fprintf ( stderr,
<                    "%s: WARNING: deletion of output file suppressed\n",
<                     progName );
<          fprintf ( stderr,
<                    "%s:    since input file no longer exists.  Output file\n",
<                    progName );
<          fprintf ( stderr,
<                    "%s:    `%s' may be incomplete.\n",
<                    progName, outName );
<          fprintf ( stderr, 
<                    "%s:    I suggest doing an integrity test (bzip2 -tv)"
<                    " of it.\n",
<                    progName );
<       }
<    }
< 
<    if (noisy && numFileNames > 0 && numFilesProcessed < numFileNames) {
<       fprintf ( stderr, 
<                 "%s: WARNING: some files have not been processed:\n"
<                 "%s:    %d specified on command line, %d not processed yet.\n\n",
<                 progName, progName,
<                 numFileNames, numFileNames - numFilesProcessed );
<    }
<    setExit(ec);
<    exit(exitValue);
< }
---
> ;
5229,5238c2504
< {
<    fprintf ( stderr,
<              "\n%s: PANIC -- internal consistency error:\n"
<              "\t%s\n"
<              "\tThis is a BUG.  Please report it to me at:\n"
<              "\tjseward@acm.org\n",
<              progName, s );
<    showFileNames();
<    cleanUpAndFail( 3 );
< }
---
> ;
5244,5251c2510
< {
<    fprintf ( stderr,
<              "\n%s: Data integrity error when decompressing.\n",
<              progName );
<    showFileNames();
<    cadvise();
<    cleanUpAndFail( 2 );
< }
---
> ;
5257,5268c2516
< {
<   if (noisy) {
<     fprintf ( stderr,
< 	      "\n%s: Compressed file ends unexpectedly;\n\t"
< 	      "perhaps it is corrupted?  *Possible* reason follows.\n",
< 	      progName );
<     perror ( progName );
<     showFileNames();
<     cadvise();
<   }
<   cleanUpAndFail( 2 );
< }
---
> ;
5274,5282c2522
< {
<    fprintf ( stderr,
<              "\n%s: I/O or other error, bailing out.  "
<              "Possible reason follows.\n",
<              progName );
<    perror ( progName );
<    showFileNames();
<    cleanUpAndFail( 1 );
< }
---
> ;
5288,5293c2528
< {
<    fprintf ( stderr,
<              "\n%s: Control-C or similar caught, quitting.\n",
<              progName );
<    cleanUpAndFail(1);
< }
---
> ;
5299,5349c2534
< {
<    if (opMode == OM_Z)
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst compressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (2) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (3) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (1) and (2).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (1)\n"
<       "   or (2), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
<       else
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst decompressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) The compressed data is corrupted, and bzip2's usual checks\n"
<       "       failed to detect this.  Try bzip2 -tvv my_file.bz2.\n"
<       "   (2) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (3) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (4) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (2) and (3).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (2)\n"
<       "   or (3), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
< 
<    showFileNames();
<    if (opMode == OM_Z)
<       cleanUpAndFail( 3 ); else
<       { cadvise(); cleanUpAndFail( 2 ); }
< }
---
> ;
5355,5361c2540
< {
<    fprintf ( stderr,
<              "\n%s: couldn't allocate enough memory\n",
<              progName );
<    showFileNames();
<    cleanUpAndFail(1);
< }
---
> ;
5367,5376c2546
< {
<    fprintf ( stderr,
<              "bzip2: I'm not configured correctly for this platform!\n"
<              "\tI require Int32, Int16 and Char to have sizes\n"
<              "\tof 4, 2 and 1 bytes to run properly, and they don't.\n"
<              "\tProbably you can fix this by defining them correctly,\n"
<              "\tand recompiling.  Bye!\n" );
<    setExit(3);
<    exit(exitValue);
< }
---
> ;
5388,5393c2558
< {
<    Int32 i;
<    if ( (Int32)strlen(s) >= longestFileName ) return;
<    for (i = 1; i <= longestFileName - (Int32)strlen(s); i++)
<       fprintf ( stderr, " " );
< }
---
> ;
5399,5414c2564
< {
<    if ( strlen(from) > FILE_NAME_LEN-10 )  {
<       fprintf (
<          stderr,
<          "bzip2: file name\n`%s'\n"
<          "is suspiciously (more than %d chars) long.\n"
<          "Try using a reasonable file name instead.  Sorry! :-)\n",
<          from, FILE_NAME_LEN-10
<       );
<       setExit(1);
<       exit(exitValue);
<    }
< 
<   strncpy(to,from,FILE_NAME_LEN-10);
<   to[FILE_NAME_LEN-10]='\0';
< }
---
> ;
5420,5425c2570
< {
<    FILE *tmp   = fopen ( name, "rb" );
<    Bool exists = (tmp != NULL);
<    if (tmp != NULL) fclose ( tmp );
<    return exists;
< }
---
> ;
5431,5443c2576
< {
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
<    return fopen(name, mode);
< #  endif
< }
---
> ;
5450,5458c2583
< {
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return True;
<    if (MY_S_ISREG(statBuf.st_mode)) return False;
<    return True;
< }
---
> ;
5465,5472c2590
< {  
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return 0;
<    return (statBuf.st_nlink - 1);
< }
---
> ;
5484,5491c2602
< {
< #  if BZ_UNIX
<    IntNative retVal;
<    
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
< }
---
> ;
5496,5513c2607
< {
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    
< #  endif
< }
---
> ;
5519,5529c2613
< {
< #  if BZ_UNIX
<    
<    return False;
< #  else 
<    
<    for (; *name != '\0'; name++)
<       if (*name == '?' || *name == '*') return True;
<    return False;
< #  endif 
< }
---
> ;
5542,5548c2626
< {
<    Int32 ns = strlen(s);
<    Int32 nx = strlen(suffix);
<    if (ns < nx) return False;
<    if (strcmp(s + ns - nx, suffix) == 0) return True;
<    return False;
< }
---
> ;
5553,5558c2631
< {
<    if (!hasSuffix(name,oldSuffix)) return False;
<    name[strlen(name)-strlen(oldSuffix)] = 0;
<    strcat ( name, newSuffix );
<    return True;
< }
---
> ;
5564,5738c2637
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "compress: bad modes\n" );
< 
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          strcat ( outName, ".bz2" ); 
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++) {
<       if (hasSuffix(inName, zSuffix[i])) {
<          if (noisy)
<          fprintf ( stderr, 
<                    "%s: Input file %s already has %s suffix.\n",
<                    progName, inName, zSuffix[i] );
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	 remove(outName);
<       } else {
< 	 fprintf ( stderr, "%s: Output file %s already exists.\n",
< 		   progName, outName );
< 	 setExit(1);
< 	 return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName )) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "compress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr,  "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    compressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( srcMode == SM_F2F ) {
<       applySavedMetaInfoToOutputFile ( outName );
<       deleteOutputOnInterrupt = False;
<       if ( !keepInputFiles ) {
<          IntNative retVal = remove ( inName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
< 
<    deleteOutputOnInterrupt = False;
< }
---
> ;
5744,5935c2643
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    Bool  magicNumberOK;
<    Bool  cantGuess;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "uncompress: bad modes\n" );
< 
<    cantGuess = False;
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++)
<             if (mapSuffix(outName,zSuffix[i],unzSuffix[i]))
<                goto zzz; 
<          cantGuess = True;
<          strcat ( outName, ".out" );
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    zzz:
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if (  cantGuess ) {
<       if (noisy)
<       fprintf ( stderr, 
<                 "%s: Can't guess original name for %s -- using %s\n",
<                 progName, inName, outName );
<       
<    }   
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	remove(outName);
<       } else {
<         fprintf ( stderr, "%s: Output file %s already exists.\n",
<                   progName, outName );
<         setExit(1);
<         return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName ) ) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "uncompress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    magicNumberOK = uncompressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( magicNumberOK ) {
<       if ( srcMode == SM_F2F ) {
<          applySavedMetaInfoToOutputFile ( outName );
<          deleteOutputOnInterrupt = False;
<          if ( !keepInputFiles ) {
<             IntNative retVal = remove ( inName );
<             ERROR_IF_NOT_ZERO ( retVal );
<          }
<       }
<    } else {
<       unzFailsExist = True;
<       deleteOutputOnInterrupt = False;
<       if ( srcMode == SM_F2F ) {
<          IntNative retVal = remove ( outName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
<    deleteOutputOnInterrupt = False;
< 
<    if ( magicNumberOK ) {
<       if (verbosity >= 1)
<          fprintf ( stderr, "done\n" );
<    } else {
<       setExit(2);
<       if (verbosity >= 1)
<          fprintf ( stderr, "not a bzip2 file.\n" ); else
<          fprintf ( stderr,
<                    "%s: %s is not a bzip2 file.\n",
<                    progName, inName );
<    }
< 
< }
---
> ;
5941,6024c2649
< {
<    FILE *inStr;
<    Bool allOK;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "testf: bad modes\n" );
< 
<    copyFileName ( outName, "(none)" );
<    switch (srcMode) {
<       case SM_I2O: copyFileName ( inName, "(stdin)" ); break;
<       case SM_F2F: copyFileName ( inName, name ); break;
<       case SM_F2O: copyFileName ( inName, name ); break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          inStr = stdin;
<          break;
< 
<       case SM_F2O: case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "testf: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = NULL;
<    allOK = testStream ( inStr );
< 
<    if (allOK && verbosity >= 1) fprintf ( stderr, "ok\n" );
<    if (!allOK) testFailsExist = True;
< }
---
> ;
6030,6049c2655
< {
<    fprintf ( stderr,
< 
<     "bzip2, a block-sorting file compressor.  "
<     "Version %s.\n"
<     "   \n"
<     "   Copyright (C) 1996-2002 by Julian Seward.\n"
<     "   \n"
<     "   This program is free software; you can redistribute it and/or modify\n"
<     "   it under the terms set out in the LICENSE file, which is included\n"
<     "   in the bzip2-1.0 source distribution.\n"
<     "   \n"
<     "   This program is distributed in the hope that it will be useful,\n"
<     "   but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
<     "   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
<     "   LICENSE file for more details.\n"
<     "   \n",
<     BZ2_bzlibVersion()
<    );
< }
---
> ;
6055,6093c2661
< {
<    fprintf (
<       stderr,
<       "bzip2, a block-sorting file compressor.  "
<       "Version %s.\n"
<       "\n   usage: %s [flags and input files in any order]\n"
<       "\n"
<       "   -h --help           print this message\n"
<       "   -d --decompress     force decompression\n"
<       "   -z --compress       force compression\n"
<       "   -k --keep           keep (don't delete) input files\n"
<       "   -f --force          overwrite existing output files\n"
<       "   -t --test           test compressed file integrity\n"
<       "   -c --stdout         output to standard out\n"
<       "   -q --quiet          suppress noncritical error messages\n"
<       "   -v --verbose        be verbose (a 2nd -v gives more)\n"
<       "   -L --license        display software version & license\n"
<       "   -V --version        display software version & license\n"
<       "   -s --small          use less memory (at most 2500k)\n"
<       "   -1 .. -9            set block size to 100k .. 900k\n"
<       "   --fast              alias for -1\n"
<       "   --best              alias for -9\n"
<       "\n"
<       "   If invoked as `bzip2', default action is to compress.\n"
<       "              as `bunzip2',  default action is to decompress.\n"
<       "              as `bzcat', default action is to decompress to stdout.\n"
<       "\n"
<       "   If no file names are given, bzip2 compresses or decompresses\n"
<       "   from standard input to standard output.  You can combine\n"
<       "   short flags, so `-v -4' means the same as -v4 or -4v, &c.\n"
< #     if BZ_UNIX
<       "\n"
< #     endif
<       ,
< 
<       BZ2_bzlibVersion(),
<       fullProgName
<    );
< }
---
> ;
6099,6104c2667
< {
<    fprintf ( 
<       stderr, 
<       "%s: %s is redundant in versions 0.9.5 and above\n",
<       progName, flag );
< }
---
> ;
6121,6127c2684
< {
<    void* p;
< 
<    p = malloc ( (size_t)n );
<    if (p == NULL) outOfMemory ();
<    return p;
< }
---
> ;
6133,6140c2690
< {
<    Cell *c;
< 
<    c = (Cell*) myMalloc ( sizeof ( Cell ) );
<    c->name = NULL;
<    c->link = NULL;
<    return c;
< }
---
> ;
6146,6158c2696
< {
<    if (root == NULL) {
<       Cell *tmp = mkCell();
<       tmp->name = (Char*) myMalloc ( 5 + strlen(name) );
<       strcpy ( tmp->name, name );
<       return tmp;
<    } else {
<       Cell *tmp = root;
<       while (tmp->link != NULL) tmp = tmp->link;
<       tmp->link = snocString ( tmp->link, name );
<       return root;
<    }
< }
---
> ;
6164,6186c2702
< {
<    Int32 i, j, k;
<    Char *envbase, *p;
< 
<    envbase = getenv(varName);
<    if (envbase != NULL) {
<       p = envbase;
<       i = 0;
<       while (True) {
<          if (p[i] == 0) break;
<          p += i;
<          i = 0;
<          while (isspace((Int32)(p[0]))) p++;
<          while (p[i] != 0 && !isspace((Int32)(p[i]))) i++;
<          if (i > 0) {
<             k = i; if (k > FILE_NAME_LEN-10) k = FILE_NAME_LEN-10;
<             for (j = 0; j < k; j++) tmpName[j] = p[j];
<             tmpName[k] = 0;
<             APPEND_FLAG(*argList, tmpName);
<          }
<       }
<    }
< }
---
> ;
6193,6439c2709
< {
<    Int32  i, j;
<    Char   *tmp;
<    Cell   *argList;
<    Cell   *aa;
<    Bool   decode;
< 
<    
<    if (sizeof(Int32) != 4 || sizeof(UInt32) != 4  ||
<        sizeof(Int16) != 2 || sizeof(UInt16) != 2  ||
<        sizeof(Char)  != 1 || sizeof(UChar)  != 1)
<       configError();
< 
<    
<    outputHandleJustInCase  = NULL;
<    smallMode               = False;
<    keepInputFiles          = False;
<    forceOverwrite          = False;
<    noisy                   = True;
<    verbosity               = 0;
<    blockSize100k           = 9;
<    testFailsExist          = False;
<    unzFailsExist           = False;
<    numFileNames            = 0;
<    numFilesProcessed       = 0;
<    workFactor              = 30;
<    deleteOutputOnInterrupt = False;
<    exitValue               = 0;
<    i = j = 0; 
< 
<    
<    signal (SIGSEGV, mySIGSEGVorSIGBUScatcher);
< #  if BZ_UNIX
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< 
<    copyFileName ( inName,  "(none)" );
<    copyFileName ( outName, "(none)" );
< 
<    copyFileName ( progNameReally, argv[0] );
<    progName = &progNameReally[0];
<    for (tmp = &progNameReally[0]; *tmp != '\0'; tmp++)
<       if (*tmp == PATH_SEP) progName = tmp + 1;
< 
< 
<    
<    argList = NULL;
<    addFlagsFromEnvVar ( &argList,  "BZIP2" );
<    addFlagsFromEnvVar ( &argList,  "BZIP" );
<    for (i = 1; i <= argc-1; i++)
<       APPEND_FILESPEC(argList, argv[i]);
< 
< 
<    
<    longestFileName = 7;
<    numFileNames    = 0;
<    decode          = True;
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) { decode = False; continue; }
<       if (aa->name[0] == '-' && decode) continue;
<       numFileNames++;
<       if (longestFileName < (Int32)strlen(aa->name) )
<          longestFileName = (Int32)strlen(aa->name);
<    }
< 
< 
<    
<    if (numFileNames == 0)
<       srcMode = SM_I2O; else srcMode = SM_F2F;
< 
< 
<    
<    
<    opMode = OM_Z;
< 
<    if ( (strstr ( progName, "unzip" ) != 0) ||
<         (strstr ( progName, "UNZIP" ) != 0) )
<       opMode = OM_UNZ;
< 
<    if ( (strstr ( progName, "z2cat" ) != 0) ||
<         (strstr ( progName, "Z2CAT" ) != 0) ||
<         (strstr ( progName, "zcat" ) != 0)  ||
<         (strstr ( progName, "ZCAT" ) != 0) )  {
<       opMode = OM_UNZ;
<       srcMode = (numFileNames == 0) ? SM_I2O : SM_F2O;
<    }
< 
< 
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (aa->name[0] == '-' && aa->name[1] != '-') {
<          for (j = 1; aa->name[j] != '\0'; j++) {
<             switch (aa->name[j]) {
<                case 'c': srcMode          = SM_F2O; break;
<                case 'd': opMode           = OM_UNZ; break;
<                case 'z': opMode           = OM_Z; break;
<                case 'f': forceOverwrite   = True; break;
<                case 't': opMode           = OM_TEST; break;
<                case 'k': keepInputFiles   = True; break;
<                case 's': smallMode        = True; break;
<                case 'q': noisy            = False; break;
<                case '1': blockSize100k    = 1; break;
<                case '2': blockSize100k    = 2; break;
<                case '3': blockSize100k    = 3; break;
<                case '4': blockSize100k    = 4; break;
<                case '5': blockSize100k    = 5; break;
<                case '6': blockSize100k    = 6; break;
<                case '7': blockSize100k    = 7; break;
<                case '8': blockSize100k    = 8; break;
<                case '9': blockSize100k    = 9; break;
<                case 'V':
<                case 'L': license();            break;
<                case 'v': verbosity++; break;
<                case 'h': usage ( progName );
<                          exit ( 0 );
<                          break;
<                default:  fprintf ( stderr, "%s: Bad flag `%s'\n",
<                                    progName, aa->name );
<                          usage ( progName );
<                          exit ( 1 );
<                          break;
<             }
<          }
<       }
<    }
<    
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (ISFLAG("--stdout"))            srcMode          = SM_F2O;  else
<       if (ISFLAG("--decompress"))        opMode           = OM_UNZ;  else
<       if (ISFLAG("--compress"))          opMode           = OM_Z;    else
<       if (ISFLAG("--force"))             forceOverwrite   = True;    else
<       if (ISFLAG("--test"))              opMode           = OM_TEST; else
<       if (ISFLAG("--keep"))              keepInputFiles   = True;    else
<       if (ISFLAG("--small"))             smallMode        = True;    else
<       if (ISFLAG("--quiet"))             noisy            = False;   else
<       if (ISFLAG("--version"))           license();                  else
<       if (ISFLAG("--license"))           license();                  else
<       if (ISFLAG("--exponential"))       workFactor = 1;             else 
<       if (ISFLAG("--repetitive-best"))   redundant(aa->name);        else
<       if (ISFLAG("--repetitive-fast"))   redundant(aa->name);        else
<       if (ISFLAG("--fast"))              blockSize100k = 1;          else
<       if (ISFLAG("--best"))              blockSize100k = 9;          else
<       if (ISFLAG("--verbose"))           verbosity++;                else
<       if (ISFLAG("--help"))              { usage ( progName ); exit ( 0 ); }
<          else
<          if (strncmp ( aa->name, "--", 2) == 0) {
<             fprintf ( stderr, "%s: Bad flag `%s'\n", progName, aa->name );
<             usage ( progName );
<             exit ( 1 );
<          }
<    }
< 
<    if (verbosity > 4) verbosity = 4;
<    if (opMode == OM_Z && smallMode && blockSize100k > 2) 
<       blockSize100k = 2;
< 
<    if (opMode == OM_TEST && srcMode == SM_F2O) {
<       fprintf ( stderr, "%s: -c and -t cannot be used together.\n",
<                 progName );
<       exit ( 1 );
<    }
< 
<    if (srcMode == SM_F2O && numFileNames == 0)
<       srcMode = SM_I2O;
< 
<    if (opMode != OM_Z) blockSize100k = 0;
< 
<    if (srcMode == SM_F2F) {
<       signal (SIGINT,  mySignalCatcher);
<       signal (SIGTERM, mySignalCatcher);
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
<    }
< 
<    if (opMode == OM_Z) {
<      if (srcMode == SM_I2O) {
<         compress ( NULL );
<      } else {
<         decode = True;
<         for (aa = argList; aa != NULL; aa = aa->link) {
<            if (ISFLAG("--")) { decode = False; continue; }
<            if (aa->name[0] == '-' && decode) continue;
<            numFilesProcessed++;
<            compress ( aa->name );
<         }
<      }
<    } 
<    else
< 
<    if (opMode == OM_UNZ) {
<       unzFailsExist = False;
<       if (srcMode == SM_I2O) {
<          uncompress ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
<             if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             uncompress ( aa->name );
<          }      
<       }
<       if (unzFailsExist) { 
<          setExit(2); 
<          exit(exitValue);
<       }
<    } 
< 
<    else {
<       testFailsExist = False;
<       if (srcMode == SM_I2O) {
<          testf ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
< 	    if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             testf ( aa->name );
< 	 }
<       }
<       if (testFailsExist && noisy) {
<          fprintf ( stderr,
<            "\n"
<            "You can use the `bzip2recover' program to attempt to recover\n"
<            "data from undamaged sections of corrupted files.\n\n"
<          );
<          setExit(2);
<          exit(exitValue);
<       }
<    }
< 
<    
<    aa = argList;
<    while (aa != NULL) {
<       Cell* aa2 = aa->link;
<       if (aa->name != NULL) free(aa->name);
<       free(aa);
<       aa = aa2;
<    }
< 
<    return exitValue;
< }
---
> ;
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2448c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
< 
< static
< void sendMTFValues ( EState* s )
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
---
> ;
2450,2453d1179
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
2455,2457d1180
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
2461,2463d1183
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
2465,2473d1184
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
2475,2476c1186,1188
<       BZ2_blockSort ( s );
<    }
---
> static
> void makeMaps_e ( EState* s )
> ;
2478d1189
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
2480,2487d1190
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
2489c1192,1194
<    if (s->nblock > 0) {
---
> static
> void generateMTFValues ( EState* s )
> ;
2491,2493d1195
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
2495,2496d1196
<       
<       bsPutUInt32 ( s, s->blockCRC );
2498,2499c1198,1199
<       
<       bsW(s,1,0);
---
> #define BZ_LESSER_ICOST  0
> #define BZ_GREATER_ICOST 15
2501,2504c1201,1203
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
---
> static
> void sendMTFValues ( EState* s )
> ;
2507,2508d1205
<    
<    if (is_last_block) {
2510,2518c1207,1208
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> void BZ2_compressBlock ( EState* s, Bool is_last_block )
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
2613,3119c1295
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
3138,3181c1314
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
3187,3192c1320
< {
<    if (sizeof(int)   != 4) return 0;
<    if (sizeof(short) != 2) return 0;
<    if (sizeof(char)  != 1) return 0;
<    return 1;
< }
---
> ;
3198,3201c1326
< {
<    void* v = malloc ( items * size );
<    return v;
< }
---
> ;
3205,3207c1330
< {
<    if (addr != NULL) free ( addr );
< }
---
> ;
3213,3221c1336
< {
<    Int32 i;
<    s->nblock = 0;
<    s->numZ = 0;
<    s->state_out_pos = 0;
<    BZ_INITIALISE_CRC ( s->blockCRC );
<    for (i = 0; i < 256; i++) s->inUse[i] = False;
<    s->blockNo++;
< }
---
> ;
3227,3230c1342
< {
<    s->state_in_ch  = 256;
<    s->state_in_len = 0;
< }
---
> ;
3235,3239c1347
< {
<    if (s->state_in_ch < 256 && s->state_in_len > 0)
<       return False; else
<       return True;
< }
---
> ;
3312,3342c1420
< {
<    Int32 i;
<    UChar ch = (UChar)(s->state_in_ch);
<    for (i = 0; i < s->state_in_len; i++) {
<       BZ_UPDATE_CRC( s->blockCRC, ch );
<    }
<    s->inUse[s->state_in_ch] = True;
<    switch (s->state_in_len) {
<       case 1:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 2:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 3:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       default:
<          s->inUse[s->state_in_len-4] = True;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = ((UChar)(s->state_in_len-4));
<          s->nblock++;
<          break;
<    }
< }
---
> ;
3348,3351c1426
< {
<    if (s->state_in_ch < 256) add_pair_to_block ( s );
<    init_RL ( s );
< }
---
> ;
3385,3424c1460
< {
<    Bool progress_in = False;
< 
<    if (s->mode == BZ_M_RUNNING) {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<       }
< 
<    } else {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          
<          if (s->avail_in_expect == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<          s->avail_in_expect--;
<       }
<    }
<    return progress_in;
< }
---
> ;
3430,3451c1466
< {
<    Bool progress_out = False;
< 
<    while (True) {
< 
<       
<       if (s->strm->avail_out == 0) break;
< 
<       
<       if (s->state_out_pos >= s->numZ) break;
< 
<       progress_out = True;
<       *(s->strm->next_out) = s->zbits[s->state_out_pos];
<       s->state_out_pos++;
<       s->strm->avail_out--;
<       s->strm->next_out++;
<       s->strm->total_out_lo32++;
<       if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<    }
< 
<    return progress_out;
< }
---
> ;
3457,3498c1472
< {
<    Bool progress_in  = False;
<    Bool progress_out = False;
<    EState* s = strm->state;
<    
<    while (True) {
< 
<       if (s->state == BZ_S_OUTPUT) {
<          progress_out |= copy_output_until_stop ( s );
<          if (s->state_out_pos < s->numZ) break;
<          if (s->mode == BZ_M_FINISHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<          prepare_new_block ( s );
<          s->state = BZ_S_INPUT;
<          if (s->mode == BZ_M_FLUSHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<       }
< 
<       if (s->state == BZ_S_INPUT) {
<          progress_in |= copy_input_until_stop ( s );
<          if (s->mode != BZ_M_RUNNING && s->avail_in_expect == 0) {
<             flush_RL ( s );
<             BZ2_compressBlock ( s, (Bool)(s->mode == BZ_M_FINISHING) );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->nblock >= s->nblockMAX) {
<             BZ2_compressBlock ( s, False );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->strm->avail_in == 0) {
<             break;
<          }
<       }
< 
<    }
< 
<    return progress_in || progress_out;
< }
---
> ;
3629,3765c1603
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
3771,3781c1609
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
3787,3877c1615
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3977,3982c1715
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> ;
4440,4498c2173
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
4748,4757c2423
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
---
> ;
4762,4771c2428
< {
<    Int32  i;
<    double base = 1.0;
<    double sum  = 0.0;
<    for (i = 0; i < 8; i++) {
<       sum  += base * (double)(n->b[i]);
<       base *= 256.0;
<    }
<    return sum;
< }
---
> ;
4762,4771c4762
< {
<    Int32  i;
<    double base = 1.0;
<    double sum  = 0.0;
<    for (i = 0; i < 8; i++) {
<       sum  += base * (double)(n->b[i]);
<       base *= 256.0;
<    }
<    return sum;
< }
---
> ;
4776,4781c4767
< {
<    Int32 i;
<    for (i = 0; i < 8; i++)
<       if (n->b[i] != 0) return 0;
<    return 1;
< }
---
> ;
4787,4797c4773
< {
<    UInt32 rem, tmp;
<    Int32  i;
<    rem = 0;
<    for (i = 7; i >= 0; i--) {
<       tmp = rem * 256 + n->b[i];
<       n->b[i] = tmp / 10;
<       rem = tmp % 10;
<    }
<    return rem;
< }
---
> ;
4803,4816c4779
< {
<    Int32  i, q;
<    UChar  buf[32];
<    Int32  nBuf   = 0;
<    UInt64 n_copy = *n;
<    do {
<       q = uInt64_qrm10 ( &n_copy );
<       buf[nBuf] = q + '0';
<       nBuf++;
<    } while (!uInt64_isZero(&n_copy));
<    outbuf[nBuf] = 0;
<    for (i = 0; i < nBuf; i++) 
<       outbuf[i] = buf[nBuf-i-1];
< }
---
> ;
4828,4922c4791
< {
<    BZFILE* bzf = NULL;
<    UChar   ibuf[5000];
<    Int32   nIbuf;
<    UInt32  nbytes_in_lo32, nbytes_in_hi32;
<    UInt32  nbytes_out_lo32, nbytes_out_hi32;
<    Int32   bzerr, bzerr_dummy, ret;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    bzf = BZ2_bzWriteOpen ( &bzerr, zStream, 
<                            blockSize100k, verbosity, workFactor );   
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n" );
< 
<    while (True) {
< 
<       if (myfeof(stream)) break;
<       nIbuf = fread ( ibuf, sizeof(UChar), 5000, stream );
<       if (ferror(stream)) goto errhandler_io;
<       if (nIbuf > 0) BZ2_bzWrite ( &bzerr, bzf, (void*)ibuf, nIbuf );
<       if (bzerr != BZ_OK) goto errhandler;
< 
<    }
< 
<    BZ2_bzWriteClose64 ( &bzerr, bzf, 0, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fflush ( zStream );
<    if (ret == EOF) goto errhandler_io;
<    if (zStream != stdout) {
<       ret = fclose ( zStream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (ferror(stream)) goto errhandler_io;
<    ret = fclose ( stream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 1) {
<       if (nbytes_in_lo32 == 0 && nbytes_in_hi32 == 0) {
< 	 fprintf ( stderr, " no data compressed.\n");
<       } else {
< 	 Char   buf_nin[32], buf_nout[32];
< 	 UInt64 nbytes_in,   nbytes_out;
< 	 double nbytes_in_d, nbytes_out_d;
< 	 uInt64_from_UInt32s ( &nbytes_in, 
< 			       nbytes_in_lo32, nbytes_in_hi32 );
< 	 uInt64_from_UInt32s ( &nbytes_out, 
< 			       nbytes_out_lo32, nbytes_out_hi32 );
< 	 nbytes_in_d  = uInt64_to_double ( &nbytes_in );
< 	 nbytes_out_d = uInt64_to_double ( &nbytes_out );
< 	 uInt64_toAscii ( buf_nin, &nbytes_in );
< 	 uInt64_toAscii ( buf_nout, &nbytes_out );
< 	 fprintf ( stderr, "%6.3f:1, %6.3f bits/byte, "
< 		   "%5.2f%% saved, %s in, %s out.\n",
< 		   nbytes_in_d / nbytes_out_d,
< 		   (8.0 * nbytes_out_d) / nbytes_in_d,
< 		   100.0 * (1.0 - nbytes_out_d / nbytes_in_d),
< 		   buf_nin,
< 		   buf_nout
< 		 );
<       }
<    }
< 
<    return;
< 
<    errhandler:
<    BZ2_bzWriteClose64 ( &bzerr_dummy, bzf, 1, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_MEM_ERROR:
<          outOfMemory (); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       default:
<          panic ( "compress:unexpected error" );
<    }
< 
<    panic ( "compress:end" );
<    
< }
---
> ;
4929,5037c4798
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto trycat;
<          if ((bzerr == BZ_OK || bzerr == BZ_STREAM_END) && nread > 0)
<             fwrite ( obuf, sizeof(UChar), nread, stream );
<          if (ferror(stream)) goto errhandler_io;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       if (nUnused == 0 && myfeof(zStream)) break;
<    }
< 
<    closeok:
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (ferror(stream)) goto errhandler_io;
<    ret = fflush ( stream );
<    if (ret != 0) goto errhandler_io;
<    if (stream != stdout) {
<       ret = fclose ( stream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    trycat: 
<    if (forceOverwrite) {
<       rewind(zStream);
<       while (True) {
<       	 if (myfeof(zStream)) break;
<       	 nread = fread ( obuf, sizeof(UChar), 5000, zStream );
<       	 if (ferror(zStream)) goto errhandler_io;
<       	 if (nread > 0) fwrite ( obuf, sizeof(UChar), nread, stream );
<       	 if (ferror(stream)) goto errhandler_io;
<       }
<       goto closeok;
<    }
<   
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          crcError();
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          compressedStreamEOF();
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (stream != stdout) fclose(stream);
<          if (streamNo == 1) {
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "\n%s: %s: trailing garbage after EOF ignored\n",
<                       progName, inName );
<             return True;       
<          }
<       default:
<          panic ( "decompress:unexpected error" );
<    }
< 
<    panic ( "decompress:end" );
<    return True; 
< }
---
> ;
5043,5128c4804
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(zStream);
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto errhandler;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
<       if (nUnused == 0 && myfeof(zStream)) break;
< 
<    }
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    if (verbosity == 0) 
<       fprintf ( stderr, "%s: %s: ", progName, inName );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          fprintf ( stderr,
<                    "data integrity (CRC) error in data\n" );
<          return False;
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          fprintf ( stderr,
<                    "file ends unexpectedly\n" );
<          return False;
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (streamNo == 1) {
<           fprintf ( stderr, 
<                     "bad magic number (file not created by bzip2)\n" );
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "trailing garbage after EOF ignored\n" );
<             return True;       
<          }
<       default:
<          panic ( "test:unexpected error" );
<    }
< 
<    panic ( "test:end" );
<    return True; 
< }
---
> ;
5138,5140c4814
< {
<    if (v > exitValue) exitValue = v;
< }
---
> ;
5146,5155c4820
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\nIt is possible that the compressed file(s) have become corrupted.\n"
<         "You can use the -tvv option to test integrity of such files.\n\n"
<         "You can use the `bzip2recover' program to attempt to recover\n"
<         "data from undamaged sections of corrupted files.\n\n"
<     );
< }
---
> ;
5161,5168c4826
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\tInput file = %s, output file = %s\n",
<       inName, outName 
<    );
< }
---
> ;
5174,5223c4832
< {
<    IntNative      retVal;
<    struct MY_STAT statBuf;
< 
<    if ( srcMode == SM_F2F 
<         && opMode != OM_TEST
<         && deleteOutputOnInterrupt ) {
< 
<       
<       retVal = MY_STAT ( inName, &statBuf );
<       if (retVal == 0) {
<          if (noisy)
<             fprintf ( stderr, 
<                       "%s: Deleting output file %s, if it exists.\n",
<                       progName, outName );
<          if (outputHandleJustInCase != NULL)
<             fclose ( outputHandleJustInCase );
<          retVal = remove ( outName );
<          if (retVal != 0)
<             fprintf ( stderr,
<                       "%s: WARNING: deletion of output file "
<                       "(apparently) failed.\n",
<                       progName );
<       } else {
<          fprintf ( stderr,
<                    "%s: WARNING: deletion of output file suppressed\n",
<                     progName );
<          fprintf ( stderr,
<                    "%s:    since input file no longer exists.  Output file\n",
<                    progName );
<          fprintf ( stderr,
<                    "%s:    `%s' may be incomplete.\n",
<                    progName, outName );
<          fprintf ( stderr, 
<                    "%s:    I suggest doing an integrity test (bzip2 -tv)"
<                    " of it.\n",
<                    progName );
<       }
<    }
< 
<    if (noisy && numFileNames > 0 && numFilesProcessed < numFileNames) {
<       fprintf ( stderr, 
<                 "%s: WARNING: some files have not been processed:\n"
<                 "%s:    %d specified on command line, %d not processed yet.\n\n",
<                 progName, progName,
<                 numFileNames, numFileNames - numFilesProcessed );
<    }
<    setExit(ec);
<    exit(exitValue);
< }
---
> ;
5229,5238c4838
< {
<    fprintf ( stderr,
<              "\n%s: PANIC -- internal consistency error:\n"
<              "\t%s\n"
<              "\tThis is a BUG.  Please report it to me at:\n"
<              "\tjseward@acm.org\n",
<              progName, s );
<    showFileNames();
<    cleanUpAndFail( 3 );
< }
---
> ;
5244,5251c4844
< {
<    fprintf ( stderr,
<              "\n%s: Data integrity error when decompressing.\n",
<              progName );
<    showFileNames();
<    cadvise();
<    cleanUpAndFail( 2 );
< }
---
> ;
5257,5268c4850
< {
<   if (noisy) {
<     fprintf ( stderr,
< 	      "\n%s: Compressed file ends unexpectedly;\n\t"
< 	      "perhaps it is corrupted?  *Possible* reason follows.\n",
< 	      progName );
<     perror ( progName );
<     showFileNames();
<     cadvise();
<   }
<   cleanUpAndFail( 2 );
< }
---
> ;
5274,5282c4856
< {
<    fprintf ( stderr,
<              "\n%s: I/O or other error, bailing out.  "
<              "Possible reason follows.\n",
<              progName );
<    perror ( progName );
<    showFileNames();
<    cleanUpAndFail( 1 );
< }
---
> ;
5288,5293c4862
< {
<    fprintf ( stderr,
<              "\n%s: Control-C or similar caught, quitting.\n",
<              progName );
<    cleanUpAndFail(1);
< }
---
> ;
5299,5349c4868
< {
<    if (opMode == OM_Z)
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst compressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (2) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (3) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (1) and (2).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (1)\n"
<       "   or (2), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
<       else
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst decompressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) The compressed data is corrupted, and bzip2's usual checks\n"
<       "       failed to detect this.  Try bzip2 -tvv my_file.bz2.\n"
<       "   (2) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (3) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (4) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (2) and (3).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (2)\n"
<       "   or (3), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
< 
<    showFileNames();
<    if (opMode == OM_Z)
<       cleanUpAndFail( 3 ); else
<       { cadvise(); cleanUpAndFail( 2 ); }
< }
---
> ;
5355,5361c4874
< {
<    fprintf ( stderr,
<              "\n%s: couldn't allocate enough memory\n",
<              progName );
<    showFileNames();
<    cleanUpAndFail(1);
< }
---
> ;
5367,5376c4880
< {
<    fprintf ( stderr,
<              "bzip2: I'm not configured correctly for this platform!\n"
<              "\tI require Int32, Int16 and Char to have sizes\n"
<              "\tof 4, 2 and 1 bytes to run properly, and they don't.\n"
<              "\tProbably you can fix this by defining them correctly,\n"
<              "\tand recompiling.  Bye!\n" );
<    setExit(3);
<    exit(exitValue);
< }
---
> ;
5388,5393c4892
< {
<    Int32 i;
<    if ( (Int32)strlen(s) >= longestFileName ) return;
<    for (i = 1; i <= longestFileName - (Int32)strlen(s); i++)
<       fprintf ( stderr, " " );
< }
---
> ;
5399,5414c4898
< {
<    if ( strlen(from) > FILE_NAME_LEN-10 )  {
<       fprintf (
<          stderr,
<          "bzip2: file name\n`%s'\n"
<          "is suspiciously (more than %d chars) long.\n"
<          "Try using a reasonable file name instead.  Sorry! :-)\n",
<          from, FILE_NAME_LEN-10
<       );
<       setExit(1);
<       exit(exitValue);
<    }
< 
<   strncpy(to,from,FILE_NAME_LEN-10);
<   to[FILE_NAME_LEN-10]='\0';
< }
---
> ;
5420,5425c4904
< {
<    FILE *tmp   = fopen ( name, "rb" );
<    Bool exists = (tmp != NULL);
<    if (tmp != NULL) fclose ( tmp );
<    return exists;
< }
---
> ;
5431,5443c4910
< {
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
<    return fopen(name, mode);
< #  endif
< }
---
> ;
5450,5458c4917
< {
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return True;
<    if (MY_S_ISREG(statBuf.st_mode)) return False;
<    return True;
< }
---
> ;
5465,5472c4924
< {  
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return 0;
<    return (statBuf.st_nlink - 1);
< }
---
> ;
5484,5491c4936
< {
< #  if BZ_UNIX
<    IntNative retVal;
<    
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
< }
---
> ;
5496,5513c4941
< {
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    
< #  endif
< }
---
> ;
5519,5529c4947
< {
< #  if BZ_UNIX
<    
<    return False;
< #  else 
<    
<    for (; *name != '\0'; name++)
<       if (*name == '?' || *name == '*') return True;
<    return False;
< #  endif 
< }
---
> ;
5542,5548c4960
< {
<    Int32 ns = strlen(s);
<    Int32 nx = strlen(suffix);
<    if (ns < nx) return False;
<    if (strcmp(s + ns - nx, suffix) == 0) return True;
<    return False;
< }
---
> ;
5553,5558c4965
< {
<    if (!hasSuffix(name,oldSuffix)) return False;
<    name[strlen(name)-strlen(oldSuffix)] = 0;
<    strcat ( name, newSuffix );
<    return True;
< }
---
> ;
5564,5738c4971
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "compress: bad modes\n" );
< 
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          strcat ( outName, ".bz2" ); 
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++) {
<       if (hasSuffix(inName, zSuffix[i])) {
<          if (noisy)
<          fprintf ( stderr, 
<                    "%s: Input file %s already has %s suffix.\n",
<                    progName, inName, zSuffix[i] );
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	 remove(outName);
<       } else {
< 	 fprintf ( stderr, "%s: Output file %s already exists.\n",
< 		   progName, outName );
< 	 setExit(1);
< 	 return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName )) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "compress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr,  "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    compressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( srcMode == SM_F2F ) {
<       applySavedMetaInfoToOutputFile ( outName );
<       deleteOutputOnInterrupt = False;
<       if ( !keepInputFiles ) {
<          IntNative retVal = remove ( inName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
< 
<    deleteOutputOnInterrupt = False;
< }
---
> ;
5744,5935c4977
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    Bool  magicNumberOK;
<    Bool  cantGuess;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "uncompress: bad modes\n" );
< 
<    cantGuess = False;
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++)
<             if (mapSuffix(outName,zSuffix[i],unzSuffix[i]))
<                goto zzz; 
<          cantGuess = True;
<          strcat ( outName, ".out" );
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    zzz:
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if (  cantGuess ) {
<       if (noisy)
<       fprintf ( stderr, 
<                 "%s: Can't guess original name for %s -- using %s\n",
<                 progName, inName, outName );
<       
<    }   
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	remove(outName);
<       } else {
<         fprintf ( stderr, "%s: Output file %s already exists.\n",
<                   progName, outName );
<         setExit(1);
<         return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName ) ) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "uncompress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    magicNumberOK = uncompressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( magicNumberOK ) {
<       if ( srcMode == SM_F2F ) {
<          applySavedMetaInfoToOutputFile ( outName );
<          deleteOutputOnInterrupt = False;
<          if ( !keepInputFiles ) {
<             IntNative retVal = remove ( inName );
<             ERROR_IF_NOT_ZERO ( retVal );
<          }
<       }
<    } else {
<       unzFailsExist = True;
<       deleteOutputOnInterrupt = False;
<       if ( srcMode == SM_F2F ) {
<          IntNative retVal = remove ( outName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
<    deleteOutputOnInterrupt = False;
< 
<    if ( magicNumberOK ) {
<       if (verbosity >= 1)
<          fprintf ( stderr, "done\n" );
<    } else {
<       setExit(2);
<       if (verbosity >= 1)
<          fprintf ( stderr, "not a bzip2 file.\n" ); else
<          fprintf ( stderr,
<                    "%s: %s is not a bzip2 file.\n",
<                    progName, inName );
<    }
< 
< }
---
> ;
5941,6024c4983
< {
<    FILE *inStr;
<    Bool allOK;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "testf: bad modes\n" );
< 
<    copyFileName ( outName, "(none)" );
<    switch (srcMode) {
<       case SM_I2O: copyFileName ( inName, "(stdin)" ); break;
<       case SM_F2F: copyFileName ( inName, name ); break;
<       case SM_F2O: copyFileName ( inName, name ); break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          inStr = stdin;
<          break;
< 
<       case SM_F2O: case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "testf: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = NULL;
<    allOK = testStream ( inStr );
< 
<    if (allOK && verbosity >= 1) fprintf ( stderr, "ok\n" );
<    if (!allOK) testFailsExist = True;
< }
---
> ;
6030,6049c4989
< {
<    fprintf ( stderr,
< 
<     "bzip2, a block-sorting file compressor.  "
<     "Version %s.\n"
<     "   \n"
<     "   Copyright (C) 1996-2002 by Julian Seward.\n"
<     "   \n"
<     "   This program is free software; you can redistribute it and/or modify\n"
<     "   it under the terms set out in the LICENSE file, which is included\n"
<     "   in the bzip2-1.0 source distribution.\n"
<     "   \n"
<     "   This program is distributed in the hope that it will be useful,\n"
<     "   but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
<     "   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
<     "   LICENSE file for more details.\n"
<     "   \n",
<     BZ2_bzlibVersion()
<    );
< }
---
> ;
6055,6093c4995
< {
<    fprintf (
<       stderr,
<       "bzip2, a block-sorting file compressor.  "
<       "Version %s.\n"
<       "\n   usage: %s [flags and input files in any order]\n"
<       "\n"
<       "   -h --help           print this message\n"
<       "   -d --decompress     force decompression\n"
<       "   -z --compress       force compression\n"
<       "   -k --keep           keep (don't delete) input files\n"
<       "   -f --force          overwrite existing output files\n"
<       "   -t --test           test compressed file integrity\n"
<       "   -c --stdout         output to standard out\n"
<       "   -q --quiet          suppress noncritical error messages\n"
<       "   -v --verbose        be verbose (a 2nd -v gives more)\n"
<       "   -L --license        display software version & license\n"
<       "   -V --version        display software version & license\n"
<       "   -s --small          use less memory (at most 2500k)\n"
<       "   -1 .. -9            set block size to 100k .. 900k\n"
<       "   --fast              alias for -1\n"
<       "   --best              alias for -9\n"
<       "\n"
<       "   If invoked as `bzip2', default action is to compress.\n"
<       "              as `bunzip2',  default action is to decompress.\n"
<       "              as `bzcat', default action is to decompress to stdout.\n"
<       "\n"
<       "   If no file names are given, bzip2 compresses or decompresses\n"
<       "   from standard input to standard output.  You can combine\n"
<       "   short flags, so `-v -4' means the same as -v4 or -4v, &c.\n"
< #     if BZ_UNIX
<       "\n"
< #     endif
<       ,
< 
<       BZ2_bzlibVersion(),
<       fullProgName
<    );
< }
---
> ;
6099,6104c5001
< {
<    fprintf ( 
<       stderr, 
<       "%s: %s is redundant in versions 0.9.5 and above\n",
<       progName, flag );
< }
---
> ;
6121,6127c5018
< {
<    void* p;
< 
<    p = malloc ( (size_t)n );
<    if (p == NULL) outOfMemory ();
<    return p;
< }
---
> ;
6133,6140c5024
< {
<    Cell *c;
< 
<    c = (Cell*) myMalloc ( sizeof ( Cell ) );
<    c->name = NULL;
<    c->link = NULL;
<    return c;
< }
---
> ;
6146,6158c5030
< {
<    if (root == NULL) {
<       Cell *tmp = mkCell();
<       tmp->name = (Char*) myMalloc ( 5 + strlen(name) );
<       strcpy ( tmp->name, name );
<       return tmp;
<    } else {
<       Cell *tmp = root;
<       while (tmp->link != NULL) tmp = tmp->link;
<       tmp->link = snocString ( tmp->link, name );
<       return root;
<    }
< }
---
> ;
6164,6186c5036
< {
<    Int32 i, j, k;
<    Char *envbase, *p;
< 
<    envbase = getenv(varName);
<    if (envbase != NULL) {
<       p = envbase;
<       i = 0;
<       while (True) {
<          if (p[i] == 0) break;
<          p += i;
<          i = 0;
<          while (isspace((Int32)(p[0]))) p++;
<          while (p[i] != 0 && !isspace((Int32)(p[i]))) i++;
<          if (i > 0) {
<             k = i; if (k > FILE_NAME_LEN-10) k = FILE_NAME_LEN-10;
<             for (j = 0; j < k; j++) tmpName[j] = p[j];
<             tmpName[k] = 0;
<             APPEND_FLAG(*argList, tmpName);
<          }
<       }
<    }
< }
---
> ;
6193,6439c5043
< {
<    Int32  i, j;
<    Char   *tmp;
<    Cell   *argList;
<    Cell   *aa;
<    Bool   decode;
< 
<    
<    if (sizeof(Int32) != 4 || sizeof(UInt32) != 4  ||
<        sizeof(Int16) != 2 || sizeof(UInt16) != 2  ||
<        sizeof(Char)  != 1 || sizeof(UChar)  != 1)
<       configError();
< 
<    
<    outputHandleJustInCase  = NULL;
<    smallMode               = False;
<    keepInputFiles          = False;
<    forceOverwrite          = False;
<    noisy                   = True;
<    verbosity               = 0;
<    blockSize100k           = 9;
<    testFailsExist          = False;
<    unzFailsExist           = False;
<    numFileNames            = 0;
<    numFilesProcessed       = 0;
<    workFactor              = 30;
<    deleteOutputOnInterrupt = False;
<    exitValue               = 0;
<    i = j = 0; 
< 
<    
<    signal (SIGSEGV, mySIGSEGVorSIGBUScatcher);
< #  if BZ_UNIX
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< 
<    copyFileName ( inName,  "(none)" );
<    copyFileName ( outName, "(none)" );
< 
<    copyFileName ( progNameReally, argv[0] );
<    progName = &progNameReally[0];
<    for (tmp = &progNameReally[0]; *tmp != '\0'; tmp++)
<       if (*tmp == PATH_SEP) progName = tmp + 1;
< 
< 
<    
<    argList = NULL;
<    addFlagsFromEnvVar ( &argList,  "BZIP2" );
<    addFlagsFromEnvVar ( &argList,  "BZIP" );
<    for (i = 1; i <= argc-1; i++)
<       APPEND_FILESPEC(argList, argv[i]);
< 
< 
<    
<    longestFileName = 7;
<    numFileNames    = 0;
<    decode          = True;
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) { decode = False; continue; }
<       if (aa->name[0] == '-' && decode) continue;
<       numFileNames++;
<       if (longestFileName < (Int32)strlen(aa->name) )
<          longestFileName = (Int32)strlen(aa->name);
<    }
< 
< 
<    
<    if (numFileNames == 0)
<       srcMode = SM_I2O; else srcMode = SM_F2F;
< 
< 
<    
<    
<    opMode = OM_Z;
< 
<    if ( (strstr ( progName, "unzip" ) != 0) ||
<         (strstr ( progName, "UNZIP" ) != 0) )
<       opMode = OM_UNZ;
< 
<    if ( (strstr ( progName, "z2cat" ) != 0) ||
<         (strstr ( progName, "Z2CAT" ) != 0) ||
<         (strstr ( progName, "zcat" ) != 0)  ||
<         (strstr ( progName, "ZCAT" ) != 0) )  {
<       opMode = OM_UNZ;
<       srcMode = (numFileNames == 0) ? SM_I2O : SM_F2O;
<    }
< 
< 
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (aa->name[0] == '-' && aa->name[1] != '-') {
<          for (j = 1; aa->name[j] != '\0'; j++) {
<             switch (aa->name[j]) {
<                case 'c': srcMode          = SM_F2O; break;
<                case 'd': opMode           = OM_UNZ; break;
<                case 'z': opMode           = OM_Z; break;
<                case 'f': forceOverwrite   = True; break;
<                case 't': opMode           = OM_TEST; break;
<                case 'k': keepInputFiles   = True; break;
<                case 's': smallMode        = True; break;
<                case 'q': noisy            = False; break;
<                case '1': blockSize100k    = 1; break;
<                case '2': blockSize100k    = 2; break;
<                case '3': blockSize100k    = 3; break;
<                case '4': blockSize100k    = 4; break;
<                case '5': blockSize100k    = 5; break;
<                case '6': blockSize100k    = 6; break;
<                case '7': blockSize100k    = 7; break;
<                case '8': blockSize100k    = 8; break;
<                case '9': blockSize100k    = 9; break;
<                case 'V':
<                case 'L': license();            break;
<                case 'v': verbosity++; break;
<                case 'h': usage ( progName );
<                          exit ( 0 );
<                          break;
<                default:  fprintf ( stderr, "%s: Bad flag `%s'\n",
<                                    progName, aa->name );
<                          usage ( progName );
<                          exit ( 1 );
<                          break;
<             }
<          }
<       }
<    }
<    
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (ISFLAG("--stdout"))            srcMode          = SM_F2O;  else
<       if (ISFLAG("--decompress"))        opMode           = OM_UNZ;  else
<       if (ISFLAG("--compress"))          opMode           = OM_Z;    else
<       if (ISFLAG("--force"))             forceOverwrite   = True;    else
<       if (ISFLAG("--test"))              opMode           = OM_TEST; else
<       if (ISFLAG("--keep"))              keepInputFiles   = True;    else
<       if (ISFLAG("--small"))             smallMode        = True;    else
<       if (ISFLAG("--quiet"))             noisy            = False;   else
<       if (ISFLAG("--version"))           license();                  else
<       if (ISFLAG("--license"))           license();                  else
<       if (ISFLAG("--exponential"))       workFactor = 1;             else 
<       if (ISFLAG("--repetitive-best"))   redundant(aa->name);        else
<       if (ISFLAG("--repetitive-fast"))   redundant(aa->name);        else
<       if (ISFLAG("--fast"))              blockSize100k = 1;          else
<       if (ISFLAG("--best"))              blockSize100k = 9;          else
<       if (ISFLAG("--verbose"))           verbosity++;                else
<       if (ISFLAG("--help"))              { usage ( progName ); exit ( 0 ); }
<          else
<          if (strncmp ( aa->name, "--", 2) == 0) {
<             fprintf ( stderr, "%s: Bad flag `%s'\n", progName, aa->name );
<             usage ( progName );
<             exit ( 1 );
<          }
<    }
< 
<    if (verbosity > 4) verbosity = 4;
<    if (opMode == OM_Z && smallMode && blockSize100k > 2) 
<       blockSize100k = 2;
< 
<    if (opMode == OM_TEST && srcMode == SM_F2O) {
<       fprintf ( stderr, "%s: -c and -t cannot be used together.\n",
<                 progName );
<       exit ( 1 );
<    }
< 
<    if (srcMode == SM_F2O && numFileNames == 0)
<       srcMode = SM_I2O;
< 
<    if (opMode != OM_Z) blockSize100k = 0;
< 
<    if (srcMode == SM_F2F) {
<       signal (SIGINT,  mySignalCatcher);
<       signal (SIGTERM, mySignalCatcher);
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
<    }
< 
<    if (opMode == OM_Z) {
<      if (srcMode == SM_I2O) {
<         compress ( NULL );
<      } else {
<         decode = True;
<         for (aa = argList; aa != NULL; aa = aa->link) {
<            if (ISFLAG("--")) { decode = False; continue; }
<            if (aa->name[0] == '-' && decode) continue;
<            numFilesProcessed++;
<            compress ( aa->name );
<         }
<      }
<    } 
<    else
< 
<    if (opMode == OM_UNZ) {
<       unzFailsExist = False;
<       if (srcMode == SM_I2O) {
<          uncompress ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
<             if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             uncompress ( aa->name );
<          }      
<       }
<       if (unzFailsExist) { 
<          setExit(2); 
<          exit(exitValue);
<       }
<    } 
< 
<    else {
<       testFailsExist = False;
<       if (srcMode == SM_I2O) {
<          testf ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
< 	    if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             testf ( aa->name );
< 	 }
<       }
<       if (testFailsExist && noisy) {
<          fprintf ( stderr,
<            "\n"
<            "You can use the `bzip2recover' program to attempt to recover\n"
<            "data from undamaged sections of corrupted files.\n\n"
<          );
<          setExit(2);
<          exit(exitValue);
<       }
<    }
< 
<    
<    aa = argList;
<    while (aa != NULL) {
<       Cell* aa2 = aa->link;
<       if (aa->name != NULL) free(aa->name);
<       free(aa);
<       aa = aa2;
<    }
< 
<    return exitValue;
< }
---
> ;
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2457c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
2462,2518c1208
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
(39.5 %, 124010 bytes)
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2457c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
2462,2518c1208
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1751,1774c1751
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1920
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1926
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1946
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1952
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1958
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1968
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1974
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2457c1983
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
2462,2518c1988
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
2534,2542c2004
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
2613,3119c2075
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
(49.3 %, 103928 bytes)
1140,1143c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1149,1156c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1176,1180c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1186,1191c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1197,1199c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1209,1217c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1223,1312c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1321,1654c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1659,1715c1208
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
1731,1739c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1810,2316c1295
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2335,2378c1314
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
2335,2378c2335
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
2384,2389c2341
< {
<    if (sizeof(int)   != 4) return 0;
<    if (sizeof(short) != 2) return 0;
<    if (sizeof(char)  != 1) return 0;
<    return 1;
< }
---
> ;
2395,2398c2347
< {
<    void* v = malloc ( items * size );
<    return v;
< }
---
> ;
2402,2404c2351
< {
<    if (addr != NULL) free ( addr );
< }
---
> ;
2410,2418c2357
< {
<    Int32 i;
<    s->nblock = 0;
<    s->numZ = 0;
<    s->state_out_pos = 0;
<    BZ_INITIALISE_CRC ( s->blockCRC );
<    for (i = 0; i < 256; i++) s->inUse[i] = False;
<    s->blockNo++;
< }
---
> ;
2424,2427c2363
< {
<    s->state_in_ch  = 256;
<    s->state_in_len = 0;
< }
---
> ;
2432,2436c2368
< {
<    if (s->state_in_ch < 256 && s->state_in_len > 0)
<       return False; else
<       return True;
< }
---
> ;
2509,2539c2441
< {
<    Int32 i;
<    UChar ch = (UChar)(s->state_in_ch);
<    for (i = 0; i < s->state_in_len; i++) {
<       BZ_UPDATE_CRC( s->blockCRC, ch );
<    }
<    s->inUse[s->state_in_ch] = True;
<    switch (s->state_in_len) {
<       case 1:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 2:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 3:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       default:
<          s->inUse[s->state_in_len-4] = True;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = ((UChar)(s->state_in_len-4));
<          s->nblock++;
<          break;
<    }
< }
---
> ;
2545,2548c2447
< {
<    if (s->state_in_ch < 256) add_pair_to_block ( s );
<    init_RL ( s );
< }
---
> ;
2582,2621c2481
< {
<    Bool progress_in = False;
< 
<    if (s->mode == BZ_M_RUNNING) {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<       }
< 
<    } else {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          
<          if (s->avail_in_expect == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<          s->avail_in_expect--;
<       }
<    }
<    return progress_in;
< }
---
> ;
2627,2648c2487
< {
<    Bool progress_out = False;
< 
<    while (True) {
< 
<       
<       if (s->strm->avail_out == 0) break;
< 
<       
<       if (s->state_out_pos >= s->numZ) break;
< 
<       progress_out = True;
<       *(s->strm->next_out) = s->zbits[s->state_out_pos];
<       s->state_out_pos++;
<       s->strm->avail_out--;
<       s->strm->next_out++;
<       s->strm->total_out_lo32++;
<       if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<    }
< 
<    return progress_out;
< }
---
> ;
2654,2695c2493
< {
<    Bool progress_in  = False;
<    Bool progress_out = False;
<    EState* s = strm->state;
<    
<    while (True) {
< 
<       if (s->state == BZ_S_OUTPUT) {
<          progress_out |= copy_output_until_stop ( s );
<          if (s->state_out_pos < s->numZ) break;
<          if (s->mode == BZ_M_FINISHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<          prepare_new_block ( s );
<          s->state = BZ_S_INPUT;
<          if (s->mode == BZ_M_FLUSHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<       }
< 
<       if (s->state == BZ_S_INPUT) {
<          progress_in |= copy_input_until_stop ( s );
<          if (s->mode != BZ_M_RUNNING && s->avail_in_expect == 0) {
<             flush_RL ( s );
<             BZ2_compressBlock ( s, (Bool)(s->mode == BZ_M_FINISHING) );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->nblock >= s->nblockMAX) {
<             BZ2_compressBlock ( s, False );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->strm->avail_in == 0) {
<             break;
<          }
<       }
< 
<    }
< 
<    return progress_in || progress_out;
< }
---
> ;
1140,1143c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1149,1156c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1176,1180c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1186,1191c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1197,1199c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1209,1217c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1223,1312c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
(52.3 %, 97724 bytes)
1140,1143c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1149,1156c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1176,1180c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1186,1191c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1197,1199c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1209,1217c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1223,1312c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1223,1312c1223
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1321,1654c1232
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1659,1715c1237
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
1731,1739c1253
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1810,2316c1324
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2624,2760c1632
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
2766,2776c1638
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
===< pass_clang_binsrch :: remove-unused-function >===
449,450c449
< extern void 
< BZ2_compressBlock ( EState*, Bool );
---
> ;
683,689c682
< static 
< __inline__
< void fallbackSimpleSort ( UInt32* fmap, 
<                           UInt32* eclass, 
<                           Int32   lo, 
<                           Int32   hi )
< ;
---
> 
722,727c715
< static
< void fallbackQSort3 ( UInt32* fmap, 
<                       UInt32* eclass,
<                       Int32   loSt, 
<                       Int32   hiSt )
< ;
---
> 
747,753c735
< static
< void fallbackSort ( UInt32* fmap, 
<                     UInt32* eclass, 
<                     UInt32* bhtab,
<                     Int32   nblock,
<                     Int32   verb )
< ;
---
> 
769,777c751
< static
< __inline__
< Bool mainGtU ( UInt32  i1, 
<                UInt32  i2,
<                UChar*  block, 
<                UInt16* quadrant,
<                UInt32  nblock,
<                Int32*  budget )
< ;
---
> 
787,796c761
< static
< void mainSimpleSort ( UInt32* ptr,
<                       UChar*  block,
<                       UInt16* quadrant,
<                       Int32   nblock,
<                       Int32   lo, 
<                       Int32   hi, 
<                       Int32   d,
<                       Int32*  budget )
< ;
---
> 
816,819c781
< static 
< __inline__
< UChar mmed3 ( UChar a, UChar b, UChar c )
< ;
---
> 
847,856c809
< static
< void mainQSort3 ( UInt32* ptr,
<                   UChar*  block,
<                   UInt16* quadrant,
<                   Int32   nblock,
<                   Int32   loSt, 
<                   Int32   hiSt, 
<                   Int32   dSt,
<                   Int32*  budget )
< ;
---
> 
877,885c830
< static
< void mainSort ( UInt32* ptr, 
<                 UChar*  block,
<                 UInt16* quadrant, 
<                 UInt32* ftab,
<                 Int32   nblock,
<                 Int32   verb,
<                 Int32*  budget )
< ;
---
> 
1658,1660d1602
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
1662,1715d1603
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
2439,2441d2326
< static
< void add_pair_to_block ( EState* s )
< ;
2445,2447c2330,2331
< static
< void flush_RL ( EState* s )
< ;
---
> 
> 
2479,2481d2362
< static
< Bool copy_input_until_stop ( EState* s )
< ;
2485,2487c2366,2367
< static
< Bool copy_output_until_stop ( EState* s )
< ;
---
> 
> 
2971,2977c2851
< static Bool myfeof ( FILE* f )
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> 
3718,3724d3591
< static void    panic                 ( Char* )   NORETURN;
< static void    ioError               ( void )    NORETURN;
< static void    outOfMemory           ( void )    NORETURN;
< static void    configError           ( void )    NORETURN;
< static void    crcError              ( void )    NORETURN;
< static void    cleanUpAndFail        ( Int32 )   NORETURN;
< static void    compressedStreamEOF   ( void )    NORETURN;
3726,3727c3593,3601
< static void    copyFileName ( Char*, Char* );
< static void*   myMalloc     ( Int32 );
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
3741,3752d3614
< static
< void uInt64_from_UInt32s ( UInt64* n, UInt32 lo32, UInt32 hi32 )
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
3755,3757d3616
< static
< double uInt64_to_double ( UInt64* n )
< ;
3760,3762d3618
< static
< Bool uInt64_isZero ( UInt64* n )
< ;
3766,3768d3621
< static 
< Int32 uInt64_qrm10 ( UInt64* n )
< ;
3772,3774d3624
< static
< void uInt64_toAscii ( char* outbuf, UInt64* n )
< ;
3784,3786d3633
< static 
< void compressStream ( FILE *stream, FILE *zStream )
< ;
3791,3793d3637
< static 
< Bool uncompressStream ( FILE *zStream, FILE *stream )
< ;
3797,3799d3640
< static 
< Bool testStream ( FILE *zStream )
< ;
3807,3809d3647
< static
< void setExit ( Int32 v )
< ;
3813,3815d3650
< static 
< void cadvise ( void )
< ;
3819,3821d3653
< static 
< void showFileNames ( void )
< ;
3825,3827d3656
< static 
< void cleanUpAndFail ( Int32 ec )
< ;
3831,3833d3659
< static 
< void panic ( Char* s )
< ;
3837,3839d3662
< static 
< void crcError ( void )
< ;
3843,3845d3665
< static 
< void compressedStreamEOF ( void )
< ;
3849,3851d3668
< static 
< void ioError ( void )
< ;
3855,3857d3671
< static 
< void mySignalCatcher ( IntNative n )
< ;
3861,3863d3674
< static 
< void mySIGSEGVorSIGBUScatcher ( IntNative n )
< ;
3867,3869d3677
< static 
< void outOfMemory ( void )
< ;
3873,3875d3680
< static 
< void configError ( void )
< ;
3885,3887d3689
< static 
< void pad ( Char *s )
< ;
3891,3893d3692
< static 
< void copyFileName ( Char* to, Char* from ) 
< ;
3897,3899d3695
< static 
< Bool fileExists ( Char* name )
< ;
3904,3905d3699
< FILE* fopen_output_safely ( Char* name, const char* mode )
< ;
3910,3912d3703
< static 
< Bool notAStandardFile ( Char* name )
< ;
3917,3919c3708,3733
< static 
< Int32 countHardLinks ( Char* name )
< ;
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
3929,3931d3742
< static 
< void saveInputFileMetaInfo ( Char *srcName )
< ;
3934,3936d3744
< static 
< void applySavedMetaInfoToOutputFile ( Char *dstName )
< ;
3940,3942c3748,3750
< static 
< Bool containsDubiousChars ( Char* name )
< ;
---
> 
> 
> 
3953,3955d3760
< static 
< Bool hasSuffix ( Char* s, Char* suffix )
< ;
3957,3960d3761
< static 
< Bool mapSuffix ( Char* name, 
<                  Char* oldSuffix, Char* newSuffix )
< ;
3964,3966d3764
< static 
< void compress ( Char *name )
< ;
3970,3972d3767
< static 
< void uncompress ( Char *name )
< ;
3976,3978d3770
< static 
< void testf ( Char *name )
< ;
3982,3984d3773
< static 
< void license ( void )
< ;
3988,3990d3776
< static 
< void usage ( Char *fullProgName )
< ;
3994,3996c3780,3787
< static 
< void redundant ( Char* flag )
< ;
---
> 
> 
> 
> 
> 
> 
> 
> 
4011,4013d3801
< static 
< void *myMalloc ( Int32 n )
< ;
4017,4019d3804
< static 
< Cell *mkCell ( void )
< ;
4023,4025d3807
< static 
< Cell *snocString ( Cell *root, Char *name )
< ;
4029,4031c3811,3814
< static 
< void addFlagsFromEnvVar ( Cell** argList, Char* varName ) 
< ;
---
> 
> 
> 
> 
449,450c449
< extern void 
< BZ2_compressBlock ( EState*, Bool );
---
> ;
683,689c682
< static 
< __inline__
< void fallbackSimpleSort ( UInt32* fmap, 
<                           UInt32* eclass, 
<                           Int32   lo, 
<                           Int32   hi )
< ;
---
> 
722,727c715
< static
< void fallbackQSort3 ( UInt32* fmap, 
<                       UInt32* eclass,
<                       Int32   loSt, 
<                       Int32   hiSt )
< ;
---
> 
747,753c735
< static
< void fallbackSort ( UInt32* fmap, 
<                     UInt32* eclass, 
<                     UInt32* bhtab,
<                     Int32   nblock,
<                     Int32   verb )
< ;
---
> 
769,777c751
< static
< __inline__
< Bool mainGtU ( UInt32  i1, 
<                UInt32  i2,
<                UChar*  block, 
<                UInt16* quadrant,
<                UInt32  nblock,
<                Int32*  budget )
< ;
---
> 
787,796c761
< static
< void mainSimpleSort ( UInt32* ptr,
<                       UChar*  block,
<                       UInt16* quadrant,
<                       Int32   nblock,
<                       Int32   lo, 
<                       Int32   hi, 
<                       Int32   d,
<                       Int32*  budget )
< ;
---
> 
816,819c781
< static 
< __inline__
< UChar mmed3 ( UChar a, UChar b, UChar c )
< ;
---
> 
847,856c809
< static
< void mainQSort3 ( UInt32* ptr,
<                   UChar*  block,
<                   UInt16* quadrant,
<                   Int32   nblock,
<                   Int32   loSt, 
<                   Int32   hiSt, 
<                   Int32   dSt,
<                   Int32*  budget )
< ;
---
> 
877,885c830
< static
< void mainSort ( UInt32* ptr, 
<                 UChar*  block,
<                 UInt16* quadrant, 
<                 UInt32* ftab,
<                 Int32   nblock,
<                 Int32   verb,
<                 Int32*  budget )
< ;
---
> 
1658,1684d1602
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
1686,1715d1603
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
2439,2441d2326
< static
< void add_pair_to_block ( EState* s )
< ;
2445,2447c2330,2331
< static
< void flush_RL ( EState* s )
< ;
---
> 
> 
2479,2481d2362
< static
< Bool copy_input_until_stop ( EState* s )
< ;
2485,2487c2366,2367
< static
< Bool copy_output_until_stop ( EState* s )
< ;
---
> 
> 
2971,2977c2851
< static Bool myfeof ( FILE* f )
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> 
3718,3724d3591
< static void    panic                 ( Char* )   NORETURN;
< static void    ioError               ( void )    NORETURN;
< static void    outOfMemory           ( void )    NORETURN;
< static void    configError           ( void )    NORETURN;
< static void    crcError              ( void )    NORETURN;
< static void    cleanUpAndFail        ( Int32 )   NORETURN;
< static void    compressedStreamEOF   ( void )    NORETURN;
3726,3727c3593,3601
< static void    copyFileName ( Char*, Char* );
< static void*   myMalloc     ( Int32 );
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
3741,3752d3614
< static
< void uInt64_from_UInt32s ( UInt64* n, UInt32 lo32, UInt32 hi32 )
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
3755,3757d3616
< static
< double uInt64_to_double ( UInt64* n )
< ;
3760,3762d3618
< static
< Bool uInt64_isZero ( UInt64* n )
< ;
3766,3768d3621
< static 
< Int32 uInt64_qrm10 ( UInt64* n )
< ;
3772,3774d3624
< static
< void uInt64_toAscii ( char* outbuf, UInt64* n )
< ;
3784,3786c3634,3639
< static 
< void compressStream ( FILE *stream, FILE *zStream )
< ;
---
> 
> 
> 
> 
> 
> 
3825,3827d3677
< static 
< void cleanUpAndFail ( Int32 ec )
< ;
3831,3833d3680
< static 
< void panic ( Char* s )
< ;
3837,3839d3683
< static 
< void crcError ( void )
< ;
3843,3845d3686
< static 
< void compressedStreamEOF ( void )
< ;
3849,3851c3690,3694
< static 
< void ioError ( void )
< ;
---
> 
> 
> 
> 
> 
3867,3869d3709
< static 
< void outOfMemory ( void )
< ;
3873,3875c3713,3714
< static 
< void configError ( void )
< ;
---
> 
> 
3891,3893c3730
< static 
< void copyFileName ( Char* to, Char* from ) 
< ;
---
> 
4011,4013c3848
< static 
< void *myMalloc ( Int32 n )
< ;
---
> 
(55.3 %, 91545 bytes)
===< pass_clang_binsrch :: replace-function-def-with-decl >===
1085,1088c1085
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1094,1101c1091
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1121,1125c1111
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1131,1136c1117
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1142,1144c1123
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1154,1162c1133
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1168,1257c1139
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1266,1599c1148
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1619,1627c1168
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1698,2204c1239
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2504,2640c1539
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
2646,2656c1545
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
2662,2752c1551
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3309,3367c2108
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
1085,1088c1085
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1094,1101c1091
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1121,1125c1111
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1131,1136c1117
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1142,1144c1123
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1154,1162c1133
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1168,1257c1139
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1266,1599c1148
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1266,1599c1266
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1619,1627c1286
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1698,2204c1357
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2504,2640c1657
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
2646,2656c1663
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
2662,2752c1669
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3309,3367c2226
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
(72.1 %, 57228 bytes)
===< pass_clang_binsrch :: remove-unused-function >===
446,447c446,448
< extern void 
< BZ2_blockSort ( EState* );
---
> 
> 
> ;
451,452d451
< extern void 
< BZ2_bsInitWrite ( EState* );
454,455d452
< extern void 
< BZ2_hbAssignCodes ( Int32*, UChar*, Int32, Int32, Int32 );
457,458c454
< extern void 
< BZ2_hbMakeCodeLengths ( UChar*, Int32*, Int32, Int32 );
---
> 
651,652c647
< extern Int32 
< BZ2_indexIntoF ( Int32, Int32* );
---
> 
657,659c652
< extern void 
< BZ2_hbCreateDecodeTables ( Int32*, Int32*, Int32*, UChar*,
<                            Int32,  Int32, Int32 );
---
> 
839,840c832
< void BZ2_blockSort ( EState* s )
< ;
---
> 
892,896d883
< void BZ2_hbMakeCodeLengths ( UChar *len, 
<                              Int32 *freq,
<                              Int32 alphaSize,
<                              Int32 maxLen )
< ;
900,905d886
< void BZ2_hbAssignCodes ( Int32 *code,
<                          UChar *length,
<                          Int32 minLen,
<                          Int32 maxLen,
<                          Int32 alphaSize )
< ;
909,916c890,892
< void BZ2_hbCreateDecodeTables ( Int32 *limit,
<                                 Int32 *base,
<                                 Int32 *perm,
<                                 UChar *length,
<                                 Int32 minLen,
<                                 Int32 maxLen,
<                                 Int32 alphaSize )
< ;
---
> 
> 
> 
1084,1088d1059
< void BZ2_bsInitWrite ( EState* s )
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
1092,1101c1063,1064
< static
< void bsFinishWrite ( EState* s )
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> 
> 
1129,1136d1091
< static
< void bsPutUInt32 ( EState* s, UInt32 u )
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
1140,1144c1095,1096
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
> 
1166,1254d1117
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
1256,1257d1118
<    s->nMTF = wr;
< }
1264,1266d1124
< static
< void sendMTFValues ( EState* s )
< ;
1284,1286c1142,1143
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
> 
1662,1663c1519
< Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
< ;
---
> 
446,447c446,448
< extern void 
< BZ2_blockSort ( EState* );
---
> 
> 
> ;
451,452d451
< extern void 
< BZ2_bsInitWrite ( EState* );
454,455d452
< extern void 
< BZ2_hbAssignCodes ( Int32*, UChar*, Int32, Int32, Int32 );
457,458c454
< extern void 
< BZ2_hbMakeCodeLengths ( UChar*, Int32*, Int32, Int32 );
---
> 
651,652c647
< extern Int32 
< BZ2_indexIntoF ( Int32, Int32* );
---
> 
657,659c652
< extern void 
< BZ2_hbCreateDecodeTables ( Int32*, Int32*, Int32*, UChar*,
<                            Int32,  Int32, Int32 );
---
> 
839,840c832
< void BZ2_blockSort ( EState* s )
< ;
---
> 
892,896d883
< void BZ2_hbMakeCodeLengths ( UChar *len, 
<                              Int32 *freq,
<                              Int32 alphaSize,
<                              Int32 maxLen )
< ;
900,905d886
< void BZ2_hbAssignCodes ( Int32 *code,
<                          UChar *length,
<                          Int32 minLen,
<                          Int32 maxLen,
<                          Int32 alphaSize )
< ;
909,916c890,892
< void BZ2_hbCreateDecodeTables ( Int32 *limit,
<                                 Int32 *base,
<                                 Int32 *perm,
<                                 UChar *length,
<                                 Int32 minLen,
<                                 Int32 maxLen,
<                                 Int32 alphaSize )
< ;
---
> 
> 
> 
1084,1088d1059
< void BZ2_bsInitWrite ( EState* s )
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
1092,1101c1063,1064
< static
< void bsFinishWrite ( EState* s )
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> 
> 
1662,1663c1625
< Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
< ;
---
> 
1092,1101c1092
< static
< void bsFinishWrite ( EState* s )
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> 
1129,1136d1119
< static
< void bsPutUInt32 ( EState* s, UInt32 u )
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
1140,1144c1123,1124
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
> 
1166,1252d1145
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
1254,1257d1146
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1264,1266d1152
< static
< void sendMTFValues ( EState* s )
< ;
1284,1286c1170,1171
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
> 
(72.8 %, 55792 bytes)
===< pass_clang :: remove-unused-function >===
1092,1099c1092
< static
< void bsPutUInt32 ( EState* s, UInt32 u )
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> 
1103,1107c1103
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
(72.9 %, 55597 bytes)
1096,1100c1096
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
1122,1129d1121
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1131,1213d1122
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
(72.9 %, 55521 bytes)
1081,1088c1081
< static
< __inline__
< void bsW ( EState* s, Int32 n, UInt32 v )
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> 
1118,1125d1117
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1127,1209d1118
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
(73.0 %, 55376 bytes)
1111,1118d1110
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1120,1202d1111
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1209,1211c1209
< static
< void sendMTFValues ( EState* s )
< ;
---
> 
1229,1231c1229
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
(73.0 %, 55335 bytes)
1227,1229c1227
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
(73.0 %, 55297 bytes)
===< pass_balanced :: curly >===
31,47c31
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
---
>    struct  
255c255
<    { if (!(cond)) BZ2_bz__AssertH__fail ( errcode ); }
---
>    
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    
(73.0 %, 55246 bytes)
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    { if (!(cond)) }
318,322c318
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
---
>    if (s->rNToGo == 0)                                            \
332,334c332
< {                                              \
<    crcVar = 0xffffffffL;                       \
< }
---
> 
(73.1 %, 55102 bytes)
314,318c314
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
---
>    if (s->rNToGo == 0)                                            \
328,330c328
< {                                              \
<    crcVar = 0xffffffffL;                       \
< }
---
> 
(73.2 %, 54925 bytes)
324,326c324
< {                                              \
<    crcVar = 0xffffffffL;                       \
< }
---
> 
329,331c329
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
---
> 
334,338c334
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
---
> 
(73.2 %, 54826 bytes)
327,329c327
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
---
> 
332,336c332
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
---
> 
(73.3 %, 54727 bytes)
330,334c330
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
---
> 
359,427c359
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>    struct 
505,594c505
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
---
>    struct 
612,615c612
<    { if (((i) & 0x1) == 0)                                    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
<    }
---
>    
(73.4 %, 54530 bytes)
355,423c355
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>    struct 
501,590c501
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
---
>    struct 
608,611c608
<    { if (((i) & 0x1) == 0)                                    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
<    }
---
>    
617,619c617
<    { s->ll16[i] = (UInt16)(n & 0x0000ffff);  \
<      SET_LL4(i, n >> 16);                    \
<    }
---
>    
664c664
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
(73.5 %, 54325 bytes)
614,616c614
<    { s->ll16[i] = (UInt16)(n & 0x0000ffff);  \
<      SET_LL4(i, n >> 16);                    \
<    }
---
>    
661c661
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
664,672c664
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
(73.5 %, 54230 bytes)
659c659
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
662,670c662
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
666,669c666
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
---
>    while (yyn > 0)                                   \
(73.6 %, 54184 bytes)
662,670c662
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
666,669c666
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
---
>    while (yyn > 0)                                   \
675,677c675
< #define fpush(lz,hz) { stackLo[sp] = lz; \
<                        stackHi[sp] = hz; \
<                        sp++; }
---
> #define fpush(lz,hz) 
(73.7 %, 53863 bytes)
667,669c667
< #define fpush(lz,hz) { stackLo[sp] = lz; \
<                        stackHi[sp] = hz; \
<                        sp++; }
---
> #define fpush(lz,hz) 
671,673c671
< #define fpop(lz,hz) { sp--;              \
<                       lz = stackLo[sp];  \
<                       hz = stackHi[sp]; }
---
> #define fpop(lz,hz) 
(73.8 %, 53768 bytes)
669,671c669
< #define fpop(lz,hz) { sp--;              \
<                       lz = stackLo[sp];  \
<                       hz = stackHi[sp]; }
---
> #define fpop(lz,hz) 
719,721c719
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] = ;
730c730
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
733,741c733
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
(73.8 %, 53661 bytes)
717,719c717
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] = ;
728c728
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
731,739c731
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
(73.8 %, 53615 bytes)
731,739c731
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
735,738c735
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
---
>    while (yyn > 0)                                   \
(74.0 %, 53294 bytes)
737,740c737
< #define mpush(lz,hz,dz) { stackLo[sp] = lz; \
<                           stackHi[sp] = hz; \
<                           stackD [sp] = dz; \
<                           sp++; }
---
> #define mpush(lz,hz,dz) 
742,745c742
< #define mpop(lz,hz,dz) { sp--;             \
<                          lz = stackLo[sp]; \
<                          hz = stackHi[sp]; \
<                          dz = stackD [sp]; }
---
> #define mpop(lz,hz,dz) 
751,754c751
<    { Int32 tz;                                                  \
<      tz = nextLo[az]; nextLo[az] = nextLo[bz]; nextLo[bz] = tz; \
<      tz = nextHi[az]; nextHi[az] = nextHi[bz]; nextHi[bz] = tz; \
<      tz = nextD [az]; nextD [az] = nextD [bz]; nextD [bz] = tz; }
---
>    
(74.1 %, 53147 bytes)
739,742c739
< #define mpop(lz,hz,dz) { sp--;             \
<                          lz = stackLo[sp]; \
<                          hz = stackHi[sp]; \
<                          dz = stackD [sp]; }
---
> #define mpop(lz,hz,dz) 
748,751c748
<    { Int32 tz;                                                  \
<      tz = nextLo[az]; nextLo[az] = nextLo[bz]; nextLo[bz] = tz; \
<      tz = nextHi[az]; nextHi[az] = nextHi[bz]; nextHi[bz] = tz; \
<      tz = nextD [az]; nextD [az] = nextD [bz]; nextD [bz] = tz; }
---
>    
(74.1 %, 52991 bytes)
745,748c745
<    { Int32 tz;                                                  \
<      tz = nextLo[az]; nextLo[az] = nextLo[bz]; nextLo[bz] = tz; \
<      tz = nextHi[az]; nextHi[az] = nextHi[bz]; nextHi[bz] = tz; \
<      tz = nextD [az]; nextD [az] = nextD [bz]; nextD [bz] = tz; }
---
>    
808,816c808
< {                                                     \
<    Int32 zz, tmp;                                     \
<    zz = z; tmp = heap[zz];                            \
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
(74.3 %, 52731 bytes)
805,813c805
< {                                                     \
<    Int32 zz, tmp;                                     \
<    zz = z; tmp = heap[zz];                            \
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
808,811c808
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
---
>    while (weight[tmp] < weight[heap[zz >> 1]])                                                   \
(74.5 %, 52282 bytes)
808,822c808
< {                                                     \
<    Int32 zz, yy, tmp;                                 \
<    zz = z; tmp = heap[zz];                            \
<    while (True) {                                     \
<       yy = zz << 1;                                   \
<       if (yy > nHeap) break;                          \
<       if (yy < nHeap &&                               \
<           weight[heap[yy+1]] < weight[heap[yy]])      \
<          yy++;                                        \
<       if (weight[tmp] < weight[heap[yy]]) break;      \
<       heap[zz] = heap[yy];                            \
<       zz = yy;                                        \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
811,820c811
<    while (True) {                                     \
<       yy = zz << 1;                                   \
<       if (yy > nHeap) break;                          \
<       if (yy < nHeap &&                               \
<           weight[heap[yy+1]] < weight[heap[yy]])      \
<          yy++;                                        \
<       if (weight[tmp] < weight[heap[yy]]) break;      \
<       heap[zz] = heap[yy];                            \
<       zz = yy;                                        \
<    }                                                  \
---
>    while (True)                                                   \
849,917c849
< UInt32 BZ2_crc32Table[256] = {
< 
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
---
> UInt32 BZ2_crc32Table[256] = ;
(74.9 %, 51497 bytes)
835,903c835
< UInt32 BZ2_crc32Table[256] = {
< 
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
---
> UInt32 BZ2_crc32Table[256] = ;
917,970c917
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> Int32 BZ2_rNums[512] = ;
997,1005c997
< {                                             \
<    while (s->bsLive >= 8) {                   \
<       s->zbits[s->numZ]                       \
<          = (UChar)(s->bsBuff >> 24);          \
<       s->numZ++;                              \
<       s->bsBuff <<= 8;                        \
<       s->bsLive -= 8;                         \
<    }                                          \
< }
---
> 
998,1004c998
<    while (s->bsLive >= 8) {                   \
<       s->zbits[s->numZ]                       \
<          = (UChar)(s->bsBuff >> 24);          \
<       s->numZ++;                              \
<       s->bsBuff <<= 8;                        \
<       s->bsLive -= 8;                         \
<    }                                          \
---
>    while (s->bsLive >= 8)                                           \
(75.1 %, 51112 bytes)
1019,1027c1019
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> 
1023,1026c1023
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
---
>       if (s->inUse[i]) 
1033,1038d1032
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1040,1122d1033
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1054,1101c1054
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
---
>    for (i = 0; i < s->nblock; i++) 
1061,1063c1061
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
---
>       if (yy[0] == ll_i)  else {
1063,1100c1063
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
---
>       } else 
1065,1079c1065
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
---
>          if (zPend > 0) 
1067,1077c1067
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
---
>             while (True) ;
(75.3 %, 50690 bytes)
1066,1084c1066
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
---
>          
1074,1080c1074
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
---
>             while ( rll_i != rtmp ) ;
1089,1103c1089
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
---
>    if (zPend > 0) 
1091,1101c1091
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
---
>       while (True) ;
(75.3 %, 50521 bytes)
1083,1097c1083
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
---
>    if (zPend > 0) 
1085,1095c1085
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
---
>       while (True) ;
1086,1089c1086
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
---
>          if (zPend & 1)  else {
1089,1092c1089
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
---
>          } else 
(75.5 %, 50183 bytes)
1118c1118
<    { retVal = rrr; goto save_state_and_return; };
---
>    ;
1122,1142c1122
<    while (True) {                                 \
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
<       if (s->strm->avail_in == 0) RETURN(BZ_OK);  \
<       s->bsBuff                                   \
<          = (s->bsBuff << 8) |                     \
<            ((UInt32)                              \
<               (*((UChar*)(s->strm->next_in))));   \
<       s->bsLive += 8;                             \
<       s->strm->next_in++;                         \
<       s->strm->avail_in--;                        \
<       s->strm->total_in_lo32++;                   \
<       if (s->strm->total_in_lo32 == 0)            \
<          s->strm->total_in_hi32++;                \
<    }
---
>    while (True) 
1123,1130c1123
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
---
>       if (s->bsLive >= nnn)                                            \
(75.5 %, 50138 bytes)
1122,1142c1122
<    while (True) {                                 \
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
<       if (s->strm->avail_in == 0) RETURN(BZ_OK);  \
<       s->bsBuff                                   \
<          = (s->bsBuff << 8) |                     \
<            ((UInt32)                              \
<               (*((UChar*)(s->strm->next_in))));   \
<       s->bsLive += 8;                             \
<       s->strm->next_in++;                         \
<       s->strm->avail_in--;                        \
<       s->strm->total_in_lo32++;                   \
<       if (s->strm->total_in_lo32 == 0)            \
<          s->strm->total_in_hi32++;                \
<    }
---
>    while (True) 
1123,1130c1123
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
---
>       if (s->bsLive >= nnn)                                            \
1152,1179c1152
< {                                                 \
<    if (groupPos == 0) {                           \
<       groupNo++;                                  \
<       if (groupNo >= nSelectors)                  \
<          RETURN(BZ_DATA_ERROR);                   \
<       groupPos = BZ_G_SIZE;                       \
<       gSel = s->selector[groupNo];                \
<       gMinlen = s->minLens[gSel];                 \
<       gLimit = &(s->limit[gSel][0]);              \
<       gPerm = &(s->perm[gSel][0]);                \
<       gBase = &(s->base[gSel][0]);                \
<    }                                              \
<    groupPos--;                                    \
<    zn = gMinlen;                                  \
<    GET_BITS(label1, zvec, zn);                    \
<    while (1) {                                    \
<       if (zn > 20 )         \
<          RETURN(BZ_DATA_ERROR);                   \
<       if (zvec <= gLimit[zn]) break;              \
<       zn++;                                       \
<       GET_BIT(label2, zj);                        \
<       zvec = (zvec << 1) | zj;                    \
<    };                                             \
<    if (zvec - gBase[zn] < 0                       \
<        || zvec - gBase[zn] >= BZ_MAX_ALPHA_SIZE)  \
<       RETURN(BZ_DATA_ERROR);                      \
<    lval = gPerm[zvec - gBase[zn]];                \
< }
---
> 
(76.0 %, 49110 bytes)
1132,1159c1132
< {                                                 \
<    if (groupPos == 0) {                           \
<       groupNo++;                                  \
<       if (groupNo >= nSelectors)                  \
<          RETURN(BZ_DATA_ERROR);                   \
<       groupPos = BZ_G_SIZE;                       \
<       gSel = s->selector[groupNo];                \
<       gMinlen = s->minLens[gSel];                 \
<       gLimit = &(s->limit[gSel][0]);              \
<       gPerm = &(s->perm[gSel][0]);                \
<       gBase = &(s->base[gSel][0]);                \
<    }                                              \
<    groupPos--;                                    \
<    zn = gMinlen;                                  \
<    GET_BITS(label1, zvec, zn);                    \
<    while (1) {                                    \
<       if (zn > 20 )         \
<          RETURN(BZ_DATA_ERROR);                   \
<       if (zvec <= gLimit[zn]) break;              \
<       zn++;                                       \
<       GET_BIT(label2, zj);                        \
<       zvec = (zvec << 1) | zj;                    \
<    };                                             \
<    if (zvec - gBase[zn] < 0                       \
<        || zvec - gBase[zn] >= BZ_MAX_ALPHA_SIZE)  \
<       RETURN(BZ_DATA_ERROR);                      \
<    lval = gPerm[zvec - gBase[zn]];                \
< }
---
> 
1133,1143c1133
<    if (groupPos == 0) {                           \
<       groupNo++;                                  \
<       if (groupNo >= nSelectors)                  \
<          RETURN(BZ_DATA_ERROR);                   \
<       groupPos = BZ_G_SIZE;                       \
<       gSel = s->selector[groupNo];                \
<       gMinlen = s->minLens[gSel];                 \
<       gLimit = &(s->limit[gSel][0]);              \
<       gPerm = &(s->perm[gSel][0]);                \
<       gBase = &(s->base[gSel][0]);                \
<    }                                              \
---
>    if (groupPos == 0)                                               \
(76.7 %, 47727 bytes)
1198,1200d1197
< {
<    Int32   n;
<    EState* s;
1202,1256d1198
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 250)
<      return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm = strm;
< 
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) {
<       if (s->arr1 != NULL) BZFREE(s->arr1);
<       if (s->arr2 != NULL) BZFREE(s->arr2);
<       if (s->ftab != NULL) BZFREE(s->ftab);
<       if (s       != NULL) BZFREE(s);
<       return BZ_MEM_ERROR;
<    }
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
<    init_RL ( s );
<    prepare_new_block ( s );
<    return BZ_OK;
< }
1226,1232c1226
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) {
<       if (s->arr1 != NULL) BZFREE(s->arr1);
<       if (s->arr2 != NULL) BZFREE(s->arr2);
<       if (s->ftab != NULL) BZFREE(s->ftab);
<       if (s       != NULL) BZFREE(s);
<       return BZ_MEM_ERROR;
<    }
---
>    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1269,1292c1269
< {                                                 \
<    UInt32 zchh = (UInt32)(zchh0);                 \
<               \
<    if (zchh != zs->state_in_ch &&                 \
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
<    else                                           \
<                  \
<    if (zchh != zs->state_in_ch ||                 \
<       zs->state_in_len == 255) {                  \
<       if (zs->state_in_ch < 256)                  \
<          add_pair_to_block ( zs );                \
<       zs->state_in_ch = zchh;                     \
<       zs->state_in_len = 1;                       \
<    } else {                                       \
<       zs->state_in_len++;                         \
<    }                                              \
< }
---
> 
(76.8 %, 47524 bytes)
1263,1286c1263
< {                                                 \
<    UInt32 zchh = (UInt32)(zchh0);                 \
<               \
<    if (zchh != zs->state_in_ch &&                 \
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
<    else                                           \
<                  \
<    if (zchh != zs->state_in_ch ||                 \
<       zs->state_in_len == 255) {                  \
<       if (zs->state_in_ch < 256)                  \
<          add_pair_to_block ( zs );                \
<       zs->state_in_ch = zchh;                     \
<       zs->state_in_len = 1;                       \
<    } else {                                       \
<       zs->state_in_len++;                         \
<    }                                              \
< }
---
> 
1267,1274c1267
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
---
>        zs->state_in_len == 1)                                               \
1278,1283c1278
<       zs->state_in_len == 255) {                  \
<       if (zs->state_in_ch < 256)                  \
<          add_pair_to_block ( zs );                \
<       zs->state_in_ch = zchh;                     \
<       zs->state_in_len = 1;                       \
<    } else {                                       \
---
>       zs->state_in_len == 255)  else {                                       \
(77.4 %, 46396 bytes)
1282,1288d1281
< {
<    Bool progress;
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1290,1338d1282
<    preswitch:
<    switch (s->mode) {
< 
<       case BZ_M_IDLE:
<          return BZ_SEQUENCE_ERROR;
< 
<       case BZ_M_RUNNING:
<          if (action == BZ_RUN) {
<             progress = handle_compress ( strm );
<             return progress ? BZ_RUN_OK : BZ_PARAM_ERROR;
<          } 
<          else
< 	 if (action == BZ_FLUSH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FLUSHING;
<             goto preswitch;
<          }
<          else
<          if (action == BZ_FINISH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FINISHING;
<             goto preswitch;
<          }
<          else 
<             return BZ_PARAM_ERROR;
< 
<       case BZ_M_FLUSHING:
<          if (action != BZ_FLUSH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FLUSH_OK;
<          s->mode = BZ_M_RUNNING;
<          return BZ_RUN_OK;
< 
<       case BZ_M_FINISHING:
<          if (action != BZ_FINISH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (!progress) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FINISH_OK;
<          s->mode = BZ_M_IDLE;
<          return BZ_STREAM_END;
<    }
<    return BZ_OK; 
< }
1291,1336c1291
<    switch (s->mode) {
< 
<       case BZ_M_IDLE:
<          return BZ_SEQUENCE_ERROR;
< 
<       case BZ_M_RUNNING:
<          if (action == BZ_RUN) {
<             progress = handle_compress ( strm );
<             return progress ? BZ_RUN_OK : BZ_PARAM_ERROR;
<          } 
<          else
< 	 if (action == BZ_FLUSH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FLUSHING;
<             goto preswitch;
<          }
<          else
<          if (action == BZ_FINISH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FINISHING;
<             goto preswitch;
<          }
<          else 
<             return BZ_PARAM_ERROR;
< 
<       case BZ_M_FLUSHING:
<          if (action != BZ_FLUSH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FLUSH_OK;
<          s->mode = BZ_M_RUNNING;
<          return BZ_RUN_OK;
< 
<       case BZ_M_FINISHING:
<          if (action != BZ_FINISH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (!progress) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FINISH_OK;
<          s->mode = BZ_M_IDLE;
<          return BZ_STREAM_END;
<    }
---
>    switch (s->mode) 
1297,1300c1297
<          if (action == BZ_RUN) {
<             progress = handle_compress ( strm );
<             return progress ? BZ_RUN_OK : BZ_PARAM_ERROR;
<          } 
---
>          if (action == BZ_RUN)  
1302,1306c1302
< 	 if (action == BZ_FLUSH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FLUSHING;
<             goto preswitch;
<          }
---
> 	 if (action == BZ_FLUSH) 
1308,1312c1308
<          if (action == BZ_FINISH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FINISHING;
<             goto preswitch;
<          }
---
>          if (action == BZ_FINISH) 
1343,1348d1342
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1350,1358d1343
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
1370,1371d1369
< {
<    DState* s;
1373,1402d1370
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
1424,1429d1423
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1431,1471d1424
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
1431,1466c1431
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
---
>    while (True) 
(78.1 %, 44901 bytes)
1298,1303d1297
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1305,1313d1298
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
1325,1326d1324
< {
<    DState* s;
1328,1357d1325
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
1379,1384d1378
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1386,1426d1379
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
1386,1421c1386
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
---
>    while (True) 
1388,1408c1388
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
---
>       if (s->state == BZ_X_OUTPUT) 
(78.8 %, 43431 bytes)
1396,1401d1395
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1403,1411d1396
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
1419,1422c1419
< {                                         \
<    if (bzerror != NULL) *bzerror = eee;   \
<    if (bzf != NULL) bzf->lastErr = eee;   \
< }
---
> 
1425,1433c1425
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct 
1448,1450d1447
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
1452,1485d1448
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1458c1458
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
---
>       ;
1461c1461
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
(78.9 %, 43298 bytes)
1422,1430c1422
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct 
1445,1447d1444
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
1449,1482d1445
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1455c1455
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
---
>       ;
1458c1458
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1462c1462
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(78.9 %, 43255 bytes)
1458c1458
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1462c1462
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(78.9 %, 43215 bytes)
1462c1462
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
1477c1477
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
(78.9 %, 43174 bytes)
1477c1477
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
1492,1494d1491
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1496,1528d1492
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
1498c1498
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
(79.0 %, 43131 bytes)
1492,1494d1491
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1496,1528d1492
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
1498c1498
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1500c1500
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(79.0 %, 43093 bytes)
1500c1500
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1502c1502
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
1505c1505
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
(79.0 %, 43052 bytes)
1502c1502
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
1505c1505
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1510,1527c1510
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
---
>    while (True) 
(79.0 %, 43017 bytes)
1505c1505
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1510,1527c1510
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
---
>    while (True) 
1515c1515
<          { BZ_SETERR(ret); return; };
---
>          ;
(79.0 %, 42988 bytes)
1510,1527c1510
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
---
>    while (True) 
1515c1515
<          { BZ_SETERR(ret); return; };
---
>          ;
1517,1523c1517
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
---
>       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
1522c1522
<             { BZ_SETERR(BZ_IO_ERROR); return; };
---
>             ;
(79.0 %, 42961 bytes)
1517,1523c1517
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
---
>       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
1522c1522
<             { BZ_SETERR(BZ_IO_ERROR); return; };
---
>             ;
(79.2 %, 42709 bytes)
1520c1520
<          { BZ_SETERR(BZ_OK); return; };
---
>          ;
1532,1535c1532
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
> 
1546,1548d1545
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1550,1600d1546
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1551c1551
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
(79.2 %, 42680 bytes)
1532,1535c1532
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
> 
1546,1548d1545
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1550,1600d1546
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1551c1551
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1553c1553
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(79.2 %, 42651 bytes)
1553c1553
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1555c1555
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
(79.2 %, 42610 bytes)
1555c1555
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
1562,1580c1562
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
---
>    if ((!abandon) && bzf->lastErr == BZ_OK) 
1563,1579c1563
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
---
>       while (True) 
1568c1568
<             { BZ_SETERR(ret); return; };
---
>             ;
(79.2 %, 42575 bytes)
1562,1580c1562
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
---
>    if ((!abandon) && bzf->lastErr == BZ_OK) 
1563,1579c1563
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
---
>       while (True) 
1568c1568
<             { BZ_SETERR(ret); return; };
---
>             ;
1570,1576c1570
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
---
>          if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
(79.5 %, 41931 bytes)
1564,1568c1564
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
---
>    if ( !abandon && !ferror ( bzf->handle ) ) 
1567c1567
<          { BZ_SETERR(BZ_IO_ERROR); return; };
---
>          ;
(79.6 %, 41818 bytes)
1589,1591d1588
< {
<    bzFile* bzf = NULL;
<    int     ret;
1593,1634d1589
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1600c1600
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
---
>       ;
1603c1603
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
(79.6 %, 41775 bytes)
1603c1603
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1607c1607
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(79.6 %, 41735 bytes)
1607c1607
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
1619,1623c1619
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
---
>    while (nUnused > 0) 
(79.7 %, 41694 bytes)
1619,1623c1619
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
---
>    while (nUnused > 0) 
1627c1627
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
(79.7 %, 41556 bytes)
1623c1623
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
1635,1636d1634
< {
<    bzFile* bzf = (bzFile*)b;
1638,1648d1635
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1640c1640
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
(79.7 %, 41513 bytes)
1635,1636d1634
< {
<    bzFile* bzf = (bzFile*)b;
1638,1648d1635
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1640c1640
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1643c1643
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(79.8 %, 41484 bytes)
1643c1643
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1657,1659d1656
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
1661,1708d1657
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return 0; };
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
< 
<    return 0; 
< }
1664c1664
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
---
>       ;
1667c1667
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
---
>       ;
(79.8 %, 41443 bytes)
1657,1659d1656
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
1661,1708d1657
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return 0; };
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
< 
<    return 0; 
< }
1664c1664
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
---
>       ;
1667c1667
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
---
>       ;
1670c1670
<       { BZ_SETERR(BZ_OK); return 0; };
---
>       ;
(79.8 %, 41403 bytes)
1667c1667
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
---
>       ;
1670c1670
<       { BZ_SETERR(BZ_OK); return 0; };
---
>       ;
(79.8 %, 41360 bytes)
1670c1670
<       { BZ_SETERR(BZ_OK); return 0; };
---
>       ;
1675,1705c1675
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
---
>    while (True) 
1678c1678
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
---
>          ;
(79.8 %, 41329 bytes)
1675,1705c1675
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
---
>    while (True) 
1678c1678
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
---
>          ;
(80.3 %, 40376 bytes)
1687,1694d1686
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (bzf->lastErr != BZ_STREAM_END)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (unused == NULL || nUnused == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
1696,1699d1687
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
1690c1690
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1692c1692
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1694c1694
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
(80.3 %, 40338 bytes)
1692c1692
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1694c1694
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
(80.3 %, 40297 bytes)
1694c1694
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1715,1717d1714
< {
<    bz_stream strm;
<    int ret;
1719,1755d1715
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow:
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    BZ2_bzCompressEnd ( &strm );
<    return ret;
< }
1766,1768d1765
< {
<    bz_stream strm;
<    int ret;
1770,1808d1766
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzDecompress ( &strm );
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    BZ2_bzDecompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
< 
<    errhandler:
<    BZ2_bzDecompressEnd ( &strm );
<    return ret; 
< }
1797,1800c1797
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
---
>    if (strm.avail_out > 0)  else {
1800,1803c1800
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
---
>    } else ;      
(80.4 %, 40259 bytes)
1715,1717d1714
< {
<    bz_stream strm;
<    int ret;
1719,1755d1715
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow:
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    BZ2_bzCompressEnd ( &strm );
<    return ret;
< }
1766,1768d1765
< {
<    bz_stream strm;
<    int ret;
1770,1808d1766
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzDecompress ( &strm );
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    BZ2_bzDecompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
< 
<    errhandler:
<    BZ2_bzDecompressEnd ( &strm );
<    return ret; 
< }
1797,1800c1797
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
---
>    if (strm.avail_out > 0)  else {
1800,1803c1800
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
---
>    } else ;      
1818,1820c1818
< {
<    return BZ_VERSION;
< }
---
> 
1839,1841c1839
< {
<    return bzopen_or_bzdopen(path,-1,mode,0);
< }
---
> 
1848,1850c1848
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
> 
1855,1864c1855
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
> 
1859,1861c1859
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)  else {
1861,1863c1861
<    } else {
<       return -1;
<    }
---
>    } else 
1869,1870d1868
< {
<    int bzerr;
1872,1878d1869
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
1873,1875c1873
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
---
>    if(bzerr == BZ_OK)else{
1875,1877c1875
<    }else{
<       return -1;
<    }
---
>    }else
1883,1886c1883
< {
<    
<    return 0;
< }
---
> 
1891,1907c1891
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) {return;}
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
---
> 
1895c1895
<    if (b==NULL) {return;}
---
>    if (b==NULL) 
(80.4 %, 40186 bytes)
1815,1817c1815
< {
<    return BZ_VERSION;
< }
---
> 
1836,1838c1836
< {
<    return bzopen_or_bzdopen(path,-1,mode,0);
< }
---
> 
1845,1847c1845
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
> 
1852,1861c1852
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
> 
1856,1858c1856
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)  else {
1858,1860c1858
<    } else {
<       return -1;
<    }
---
>    } else 
1866,1867d1865
< {
<    int bzerr;
1869,1875d1866
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
1870,1872c1870
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
---
>    if(bzerr == BZ_OK)else{
1872,1874c1872
<    }else{
<       return -1;
<    }
---
>    }else
1880,1883c1880
< {
<    
<    return 0;
< }
---
> 
1888,1904c1888
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) {return;}
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
---
> 
1892c1892
<    if (b==NULL) {return;}
---
>    if (b==NULL) 
1893,1898c1893
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
---
>    if(((bzFile*)b)->writing)else{
1895,1897c1895
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
---
>       if(bzerr != BZ_OK)
1898,1900c1898
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
---
>    }else
(80.4 %, 40177 bytes)
1893,1898c1893
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
---
>    if(((bzFile*)b)->writing)else{
1895,1897c1895
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
---
>       if(bzerr != BZ_OK)
1898,1900c1898
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
---
>    }else
1901,1903c1901
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
---
>    if(fp!=stdin && fp!=stdout)
1909,1926c1909
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = ;
1930,1931d1929
< {
<    int err = ((bzFile *)b)->lastErr;
1933,1936d1930
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
1977c1977
< #define ERROR_IF_EOF(i)       { if ((i) == EOF)  ioError(); }
---
> #define ERROR_IF_EOF(i)       
(80.4 %, 40138 bytes)
1899,1901c1899
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
---
>    if(fp!=stdin && fp!=stdout)
1907,1924c1907
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = ;
1928,1929d1927
< {
<    int err = ((bzFile *)b)->lastErr;
1931,1934d1928
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
1975c1975
< #define ERROR_IF_EOF(i)       { if ((i) == EOF)  ioError(); }
---
> #define ERROR_IF_EOF(i)       
1976c1976
< #define ERROR_IF_NOT_ZERO(i)  { if ((i) != 0)    ioError(); }
---
> #define ERROR_IF_NOT_ZERO(i)  
1977c1977
< #define ERROR_IF_MINUS_ONE(i) { if ((i) == (-1)) ioError(); }
---
> #define ERROR_IF_MINUS_ONE(i) 
(80.4 %, 40107 bytes)
1976c1976
< #define ERROR_IF_NOT_ZERO(i)  { if ((i) != 0)    ioError(); }
---
> #define ERROR_IF_NOT_ZERO(i)  
1977c1977
< #define ERROR_IF_MINUS_ONE(i) { if ((i) == (-1)) ioError(); }
---
> #define ERROR_IF_MINUS_ONE(i) 
(80.4 %, 40076 bytes)
1977c1977
< #define ERROR_IF_MINUS_ONE(i) { if ((i) == (-1)) ioError(); }
---
> #define ERROR_IF_MINUS_ONE(i) 
2070c2070
<    struct { UChar b[8]; } 
---
>    struct  
2216c2216
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    = ;
(80.5 %, 40045 bytes)
2070c2070
<    struct { UChar b[8]; } 
---
>    struct  
2216c2216
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    = ;
2218c2218
<    = { "", "", ".tar", ".tar" };
---
>    = ;
2253,2256c2253
<    struct zzzz {
<       Char        *name;
<       struct zzzz *link;
<    }
---
>    struct zzzz 
(80.5 %, 40030 bytes)
2216c2216
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    = ;
2218c2218
<    = { "", "", ".tar", ".tar" };
---
>    = ;
2253,2256c2253
<    struct zzzz {
<       Char        *name;
<       struct zzzz *link;
<    }
---
>    struct zzzz 
(80.5 %, 39974 bytes)
===< pass_balanced :: curly2 >===
31,47c31
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
---
>    struct ; 
355,423c355
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>    struct ;
501,590c501
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
---
>    struct ;
717,719c717
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] = ;;
835,903c835
< UInt32 BZ2_crc32Table[256] = {
< 
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
---
> UInt32 BZ2_crc32Table[256] = ;;
917,970c917
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> Int32 BZ2_rNums[512] = ;;
1019,1027c1019
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1023,1026c1023
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
---
>       if (s->inUse[i]) ;
(80.6 %, 39819 bytes)
1025,1080c1025
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) 
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) ;
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) 
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1046,1073c1046
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) 
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) ;
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
---
>    for (i = 0; i < s->nblock; i++) ;
1053,1055c1053
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
---
>       if (yy[0] == ll_i) ; else {
(81.1 %, 38643 bytes)
1135,1187c1135
< {
<    Int32   n;
<    EState* s;
< 
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 250)
<      return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm = strm;
< 
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
<    init_RL ( s );
<    prepare_new_block ( s );
<    return BZ_OK;
< }
---
> ;
1219,1230c1219
< {
<    Bool progress;
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
<    return BZ_OK; 
< }
---
> ;
(81.9 %, 37137 bytes)
1167,1178c1167
< {
<    Bool progress;
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
<    return BZ_OK; 
< }
---
> ;
1183,1198c1183
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
---
> ;
1210,1242c1210
< {
<    DState* s;
< 
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
---
> ;
(82.0 %, 36897 bytes)
1172,1187c1172
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
---
> ;
1199,1231c1199
< {
<    DState* s;
< 
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
---
> ;
(82.2 %, 36536 bytes)
1184,1216c1184
< {
<    DState* s;
< 
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
---
> ;
1238,1250c1238
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    while (True) 
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
---
> ;
(82.7 %, 35523 bytes)
1206,1218c1206
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    while (True) 
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
---
> ;
1223,1238c1223
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
---
> ;
1249,1257c1249
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct ;
(82.8 %, 35296 bytes)
1211,1226c1211
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
---
> ;
1237,1245c1237
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct ;
1260,1297c1260
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
---
> ;
(83.0 %, 34941 bytes)
1222,1230c1222
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct ;
1245,1282c1245
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
---
> ;
1292,1322c1292
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          ;
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
<          ;
<    }
< }
---
> ;
(83.3 %, 34129 bytes)
1255,1285c1255
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          ;
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
<          ;
<    }
< }
---
> ;
1273,1284c1273
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          ;
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
<          ;
<    }
---
>    while (True) ;
1295,1298c1295
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
> ;
(83.6 %, 33556 bytes)
1265,1268c1265
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
> ;
1279,1311c1279
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
---
> ;
(83.7 %, 33447 bytes)
1276,1308c1276
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
---
> ;
1319,1360c1319
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       ;
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) 
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
---
> ;
(84.1 %, 32584 bytes)
1287,1328c1287
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       ;
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) 
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
---
> ;
1333,1346c1333
< {
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
---
> ;
(84.5 %, 31734 bytes)
1292,1305c1292
< {
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
---
> ;
1314,1335c1314
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) 
< 
<    return 0; 
< }
---
> ;
(84.6 %, 31528 bytes)
1301,1322c1301
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) 
< 
<    return 0; 
< }
---
> ;
1331,1343c1331
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
<       ;
<    if (unused == NULL || nUnused == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
---
> ;
1359,1399c1359
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow:
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    BZ2_bzCompressEnd ( &strm );
<    return ret;
< }
---
> ;
(84.7 %, 31285 bytes)
1347,1387c1347
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow:
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    BZ2_bzCompressEnd ( &strm );
<    return ret;
< }
---
> ;
1398,1437c1398
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzDecompress ( &strm );
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    BZ2_bzDecompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    BZ2_bzDecompressEnd ( &strm );
<    return ret; 
< }
---
> ;
(85.2 %, 30281 bytes)
1358,1397c1358
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzDecompress ( &strm );
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    BZ2_bzDecompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    BZ2_bzDecompressEnd ( &strm );
<    return ret; 
< }
---
> ;
1389,1392c1389
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
---
>    if (strm.avail_out > 0) ; else ;      
(85.7 %, 29363 bytes)
1368,1370c1368
< {
<    return BZ_VERSION;
< }
---
> ;
1389,1391c1389
< {
<    return bzopen_or_bzdopen(path,-1,mode,0);
< }
---
> ;
(85.7 %, 29339 bytes)
1387,1389c1387
< {
<    return bzopen_or_bzdopen(path,-1,mode,0);
< }
---
> ;
1396,1398c1396
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
> ;
(85.7 %, 29292 bytes)
1394,1396c1394
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
> ;
1401,1410c1401
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
> ;
(85.7 %, 29245 bytes)
1399,1408c1399
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
> ;
1403,1405c1403
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else {
1405,1407c1405
<    } else {
<       return -1;
<    }
---
>    } else ;
(85.7 %, 29220 bytes)
1403,1405c1403
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else {
<       return -1;
<    }
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
1411,1420c1411
< {
<    int bzerr;
< 
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
---
> ;
(85.8 %, 29198 bytes)
1409,1418c1409
< {
<    int bzerr;
< 
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
---
> ;
1413,1415c1413
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
---
>    if(bzerr == BZ_OK);else{
(85.8 %, 29074 bytes)
1414,1417c1414
< {
<    
<    return 0;
< }
---
> ;
1422,1436c1422
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
---
> ;
(85.8 %, 29055 bytes)
1419,1433c1419
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
---
> ;
1424,1429c1424
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
---
>    if(((bzFile*)b)->writing);else
1426,1428c1426
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
---
>       if(bzerr != BZ_OK);
(86.0 %, 28760 bytes)
1424,1441c1424
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = ;;
1445,1451c1445
< {
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
---
> ;
1733c1733
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    = ;;
1735c1735
<    = { "", "", ".tar", ".tar" };
---
>    = ;;
(86.0 %, 28646 bytes)
1727c1727
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    = ;;
1729c1729
<    = { "", "", ".tar", ".tar" };
---
>    = ;;
===< pass_balanced :: curly3 >===
717,719c717
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] ;
835,903c835
< UInt32 BZ2_crc32Table[256] = {
< 
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
---
> UInt32 BZ2_crc32Table[256] ;
(86.1 %, 28523 bytes)
833,901c833
< UInt32 BZ2_crc32Table[256] = {
< 
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
---
> UInt32 BZ2_crc32Table[256] ;
915,968c915
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> Int32 BZ2_rNums[512] ;
(87.8 %, 24993 bytes)
847,900c847
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> Int32 BZ2_rNums[512] ;
1354,1371c1354
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] ;
(89.1 %, 22249 bytes)
1301,1318c1301
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] ;
1604c1604
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    ;
(89.3 %, 21940 bytes)
1587c1587
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    ;
1589c1589
<    = { "", "", ".tar", ".tar" };
---
>    ;
(89.3 %, 21904 bytes)
1589c1589
<    = { "", "", ".tar", ".tar" };
---
>    ;
(89.3 %, 21876 bytes)
===< pass_clang :: callexpr-to-value >===
1279c1279
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
---
>    nread = 0;
(89.3 %, 21849 bytes)
===< pass_clang :: replace-callexpr >===
===< pass_clang :: simplify-callexpr >===
===< pass_clang :: remove-unused-enum-member >===
===< pass_clang :: remove-enum-member-value >===
===< pass_clang :: remove-unused-var >===
301c301
< extern Int32 BZ2_rNums[512];
---
> 
321c321
< extern UInt32 BZ2_crc32Table[256];
---
> 
(89.4 %, 21821 bytes)
321c321
< extern UInt32 BZ2_crc32Table[256];
---
> 
716,717c716
< static
< Int32 incs[14] ;
---
> 
(89.4 %, 21787 bytes)
716,717c716
< static
< Int32 incs[14] ;
---
> 
833c833
< UInt32 BZ2_crc32Table[256] ;
---
> 
(89.4 %, 21764 bytes)
832c832
< UInt32 BZ2_crc32Table[256] ;
---
> 
846c846
< Int32 BZ2_rNums[512] ;
---
> 
(89.4 %, 21736 bytes)
846c846
< Int32 BZ2_rNums[512] ;
---
> 
1178c1178
<    Int32   n, ret;
---
>    Int32    ret;
(89.4 %, 21714 bytes)
1178c1178
<    Int32   n, ret;
---
>    Int32    ret;
1178c1178
<    Int32   n, ret;
---
>    Int32   n;
(89.4 %, 21712 bytes)
1178c1178
<    Int32    ret;
---
>    
1300c1300
< static char *bzerrorstrings[] ;
---
> 
(89.4 %, 21699 bytes)
1300c1300
< static char *bzerrorstrings[] ;
---
> 
1391c1391
< Int32   verbosity;
---
> 
(89.4 %, 21668 bytes)
1391c1391
< Int32   verbosity;
---
> 
1392c1392
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool     smallMode, deleteOutputOnInterrupt;
(89.4 %, 21650 bytes)
1392c1392
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool     smallMode, deleteOutputOnInterrupt;
1392c1392
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool    keepInputFiles, deleteOutputOnInterrupt;
(89.4 %, 21635 bytes)
1392c1392
< Bool     smallMode, deleteOutputOnInterrupt;
---
> Bool      deleteOutputOnInterrupt;
1392c1392
< Bool     smallMode, deleteOutputOnInterrupt;
---
> Bool     smallMode;
(89.4 %, 21625 bytes)
1392c1392
< Bool      deleteOutputOnInterrupt;
---
> 
1393c1393
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool     testFailsExist, unzFailsExist, noisy;
(89.5 %, 21591 bytes)
1393c1393
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool     testFailsExist, unzFailsExist, noisy;
1393c1393
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool    forceOverwrite, unzFailsExist, noisy;
(89.5 %, 21576 bytes)
1393c1393
< Bool     testFailsExist, unzFailsExist, noisy;
---
> Bool      unzFailsExist, noisy;
1393c1393
< Bool     testFailsExist, unzFailsExist, noisy;
---
> Bool     testFailsExist, noisy;
(89.5 %, 21561 bytes)
1393c1393
< Bool      unzFailsExist, noisy;
---
> Bool       noisy;
1393c1393
< Bool      unzFailsExist, noisy;
---
> Bool      unzFailsExist;
(89.5 %, 21547 bytes)
1393c1393
< Bool       noisy;
---
> 
1394c1394
< Int32   numFileNames, numFilesProcessed, blockSize100k;
---
> Int32    numFilesProcessed, blockSize100k;
(89.5 %, 21530 bytes)
1394c1394
< Int32   numFileNames, numFilesProcessed, blockSize100k;
---
> Int32    numFilesProcessed, blockSize100k;
1394c1394
< Int32   numFileNames, numFilesProcessed, blockSize100k;
---
> Int32   numFileNames, blockSize100k;
(89.5 %, 21517 bytes)
1394c1394
< Int32    numFilesProcessed, blockSize100k;
---
> Int32     blockSize100k;
1394c1394
< Int32    numFilesProcessed, blockSize100k;
---
> Int32    numFilesProcessed;
(89.5 %, 21499 bytes)
1394c1394
< Int32     blockSize100k;
---
> 
1395c1395
< Int32   exitValue;
---
> 
(89.5 %, 21475 bytes)
1395c1395
< Int32   exitValue;
---
> 
1407c1407
< Int32   opMode;
---
> 
(89.5 %, 21457 bytes)
1407c1407
< Int32   opMode;
---
> 
1408c1408
< Int32   srcMode;
---
> 
(89.5 %, 21442 bytes)
1408c1408
< Int32   srcMode;
---
> 
1412c1412
< Int32   longestFileName;
---
> 
(89.5 %, 21426 bytes)
1412c1412
< Int32   longestFileName;
---
> 
1413c1413
< Char    inName [FILE_NAME_LEN];
---
> 
(89.6 %, 21402 bytes)
1413c1413
< Char    inName [FILE_NAME_LEN];
---
> 
1414c1414
< Char    outName[FILE_NAME_LEN];
---
> 
(89.6 %, 21371 bytes)
1414c1414
< Char    outName[FILE_NAME_LEN];
---
> 
1415c1415
< Char    tmpName[FILE_NAME_LEN];
---
> 
(89.6 %, 21340 bytes)
1415c1415
< Char    tmpName[FILE_NAME_LEN];
---
> 
1416c1416
< Char    *progName;
---
> 
1417c1417
< Char    progNameReally[FILE_NAME_LEN];
---
> 
(89.6 %, 21309 bytes)
1416c1416
< Char    *progName;
---
> 
1417c1417
< Char    progNameReally[FILE_NAME_LEN];
---
> 
(89.6 %, 21291 bytes)
1417c1417
< Char    progNameReally[FILE_NAME_LEN];
---
> 
1418c1418
< FILE    *outputHandleJustInCase;
---
> 
(89.6 %, 21253 bytes)
1418c1418
< FILE    *outputHandleJustInCase;
---
> 
1419c1419
< Int32   workFactor;
---
> 
(89.6 %, 21221 bytes)
1419c1419
< Int32   workFactor;
---
> 
1568,1569c1568
< static 
< struct MY_STAT fileMetaInfo;
---
> 
(89.7 %, 21202 bytes)
1568,1569c1568
< static 
< struct MY_STAT fileMetaInfo;
---
> 
1585,1586c1585
< Char* zSuffix[BZ_N_SUFFIX_PAIRS] 
<    ;
---
> 
(89.7 %, 21166 bytes)
1584,1585c1584
< Char* zSuffix[BZ_N_SUFFIX_PAIRS] 
<    ;
---
> 
1586,1587c1586
< Char* unzSuffix[BZ_N_SUFFIX_PAIRS] 
<    ;
---
> 
(89.7 %, 21128 bytes)
1585,1586c1585
< Char* unzSuffix[BZ_N_SUFFIX_PAIRS] 
<    ;
---
> 
(89.7 %, 21088 bytes)
===< pass_special :: a >===
===< pass_special :: b >===
===< pass_special :: c >===
===< pass_balanced :: parens >===
20c20
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define BZ_SEQUENCE_ERROR    
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> #define BZ_PARAM_ERROR       
(89.7 %, 21084 bytes)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> #define BZ_PARAM_ERROR       
22c22
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_MEM_ERROR         
23c23
< #define BZ_DATA_ERROR        (-4)
---
> #define BZ_DATA_ERROR        
(89.7 %, 21080 bytes)
22c22
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_MEM_ERROR         
23c23
< #define BZ_DATA_ERROR        (-4)
---
> #define BZ_DATA_ERROR        
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_DATA_ERROR_MAGIC  
(89.7 %, 21076 bytes)
23c23
< #define BZ_DATA_ERROR        (-4)
---
> #define BZ_DATA_ERROR        
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_DATA_ERROR_MAGIC  
25c25
< #define BZ_IO_ERROR          (-6)
---
> #define BZ_IO_ERROR          
(89.7 %, 21072 bytes)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_DATA_ERROR_MAGIC  
25c25
< #define BZ_IO_ERROR          (-6)
---
> #define BZ_IO_ERROR          
(89.7 %, 21068 bytes)
25c25
< #define BZ_IO_ERROR          (-6)
---
> #define BZ_IO_ERROR          
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_UNEXPECTED_EOF    
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_OUTBUFF_FULL      
(89.7 %, 21064 bytes)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_UNEXPECTED_EOF    
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_OUTBUFF_FULL      
(89.7 %, 21060 bytes)
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_OUTBUFF_FULL      
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_CONFIG_ERROR      
(89.7 %, 21056 bytes)
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_CONFIG_ERROR      
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc);
(89.7 %, 21052 bytes)
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree);
(89.7 %, 21036 bytes)
45c45
<       void (*bzfree)(void *,void *);
---
>       void (void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree);
54c54
< #   define BZ_API(func) func
---
> #   define BZ_API func
60c60
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> BZ_EXTERN int BZ_API ( 
60,65c60
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ;
67c67
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
> BZ_EXTERN int BZ_API ( 
67,70c67
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzCompress) ;
72c72
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
> BZ_EXTERN int BZ_API ( 
(89.7 %, 21021 bytes)
54c54
< #   define BZ_API(func) func
---
> #   define BZ_API func
60c60
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> BZ_EXTERN int BZ_API ( 
60,65c60
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ;
67c67
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
> BZ_EXTERN int BZ_API ( 
67,70c67
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzCompress) ;
72c72
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
> BZ_EXTERN int BZ_API ( 
72,74c72
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ;
76c76
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN int BZ_API ( 
76,80c76
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ;
82c82
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
> BZ_EXTERN int BZ_API ( 
82,84c82
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompress) ;
86c86
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
> BZ_EXTERN int BZ_API ( 
86,88c86
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ;
98c98
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN BZFILE* BZ_API ( 
98,105c98
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ;
107c107
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
> BZ_EXTERN void BZ_API ( 
107,110c107
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
---
> BZ_EXTERN void BZ_API(BZ2_bzReadClose) ;
112c112
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ_API ( 
112,117c112
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ;
119c119
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
> BZ_EXTERN int BZ_API ( 
119,124c119
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzRead) ;
126c126
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE* BZ_API ( 
126,132c126
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ;
134c134
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
> BZ_EXTERN void BZ_API ( 
134,139c134
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite) ;
141c141
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void BZ_API ( 
141,147c141
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ;
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void BZ_API ( 
149,157c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ;
162c162
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_EXTERN int BZ_API ( 
162,170c162
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ;
172c172
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_EXTERN int BZ_API ( 
172,179c172
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ;
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
> BZ_EXTERN const char * BZ_API (
184,186c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
---
> BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) ;
188c188
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN BZFILE * BZ_API (
188,191c188
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) ;
193c193
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN BZFILE * BZ_API (
193,196c193
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) ;
198c198
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN int BZ_API (
198,202c198
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzread) ;
204c204
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
> BZ_EXTERN int BZ_API (
204,208c204
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzwrite) ;
210c210
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> BZ_EXTERN int BZ_API (
210,212c210
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzflush) ;
214c214
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN void BZ_API (
214,216c214
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
---
> BZ_EXTERN void BZ_API(BZ2_bzclose) ;
218c218
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> BZ_EXTERN const char * BZ_API (
218,221c218
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
---
> BZ_EXTERN const char * BZ_API(BZ2_bzerror) ;
248c248
< #define True  ((Bool)1)
---
> #define True  
248c248
< #define True  ((Bool)1)
---
> #define True  (1)
249c249
< #define False ((Bool)0)
---
> #define False 
(89.7 %, 21015 bytes)
249c249
< #define False ((Bool)0)
---
> #define False 
249c249
< #define False ((Bool)0)
---
> #define False (0)
(89.7 %, 21006 bytes)
253c253
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> extern void BZ2_bz__AssertH__fail ;
254c254
< #define AssertH(cond,errcode) \
---
> #define AssertH \
256c256
< #define AssertD(cond,msg) \
---
> #define AssertD \
(89.8 %, 20992 bytes)
256c256
< #define AssertD(cond,msg) \
---
> #define AssertD \
258c258
< #define VPrintf0(zf) \
---
> #define VPrintf0 \
259c259
<    fprintf(stderr,zf)
---
>    fprintf
(89.8 %, 20982 bytes)
258c258
< #define VPrintf0(zf) \
---
> #define VPrintf0 \
259c259
<    fprintf(stderr,zf)
---
>    fprintf
260c260
< #define VPrintf1(zf,za1) \
---
> #define VPrintf1 \
(89.8 %, 20978 bytes)
259c259
<    fprintf(stderr,zf)
---
>    fprintf
260c260
< #define VPrintf1(zf,za1) \
---
> #define VPrintf1 \
(89.8 %, 20967 bytes)
260c260
< #define VPrintf1(zf,za1) \
---
> #define VPrintf1 \
261c261
<    fprintf(stderr,zf,za1)
---
>    fprintf
(89.8 %, 20959 bytes)
261c261
<    fprintf(stderr,zf,za1)
---
>    fprintf
262c262
< #define VPrintf2(zf,za1,za2) \
---
> #define VPrintf2 \
263c263
<    fprintf(stderr,zf,za1,za2)
---
>    fprintf
(89.8 %, 20944 bytes)
262c262
< #define VPrintf2(zf,za1,za2) \
---
> #define VPrintf2 \
263c263
<    fprintf(stderr,zf,za1,za2)
---
>    fprintf
(89.8 %, 20932 bytes)
263c263
<    fprintf(stderr,zf,za1,za2)
---
>    fprintf
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
> #define VPrintf3 \
265c265
<    fprintf(stderr,zf,za1,za2,za3)
---
>    fprintf
(89.8 %, 20913 bytes)
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
> #define VPrintf3 \
265c265
<    fprintf(stderr,zf,za1,za2,za3)
---
>    fprintf
(89.8 %, 20897 bytes)
265c265
<    fprintf(stderr,zf,za1,za2,za3)
---
>    fprintf
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> #define VPrintf4 \
267c267
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
>    fprintf
(89.8 %, 20874 bytes)
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> #define VPrintf4 \
267c267
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
>    fprintf
(89.8 %, 20854 bytes)
267c267
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
>    fprintf
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> #define VPrintf5 \
(89.8 %, 20827 bytes)
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> #define VPrintf5 \
269c269
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
>    fprintf
(89.8 %, 20803 bytes)
269c269
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
>    fprintf
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOC (strm->bzalloc)(strm->opaque,(nnn),1)
(89.9 %, 20772 bytes)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOC (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOC(nnn) (strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOC(nnn) (strm->bzalloc)
(89.9 %, 20767 bytes)
272c272
< #define BZALLOC (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOC (strm->opaque,(nnn),1)
272c272
< #define BZALLOC (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOC (strm->bzalloc)
(89.9 %, 20752 bytes)
272c272
< #define BZALLOC (strm->opaque,(nnn),1)
---
> #define BZALLOC 
272c272
< #define BZALLOC (strm->opaque,(nnn),1)
---
> #define BZALLOC (strm->opaque,,1)
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREE  (strm->bzfree)(strm->opaque,(ppp))
(89.9 %, 20730 bytes)
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREE  (strm->bzfree)(strm->opaque,(ppp))
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREE(ppp)  (strm->opaque,(ppp))
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREE(ppp)  (strm->bzfree)
(89.9 %, 20725 bytes)
273c273
< #define BZFREE  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREE  (strm->opaque,(ppp))
273c273
< #define BZFREE  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREE  (strm->bzfree)
273c273
< #define BZFREE  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREE  (strm->bzfree)(strm->opaque,)
(89.9 %, 20711 bytes)
273c273
< #define BZFREE  (strm->opaque,(ppp))
---
> #define BZFREE  
273c273
< #define BZFREE  (strm->opaque,(ppp))
---
> #define BZFREE  (strm->opaque,)
295c295
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS 
(89.9 %, 20691 bytes)
295c295
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS 
295c295
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + )
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> #define BZ_RAND_MASK 
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> #define BZ_RAND_MASK ( ? 1 : 0)
314c314
<    if (s->rNToGo == 0)                                            \
---
>    if                                             \
(89.9 %, 20665 bytes)
314c314
<    if (s->rNToGo == 0)                                            \
---
>    if                                             \
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> #define BZ_INITIALISE_CRC              \
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> #define BZ_FINALISE_CRC                \
(89.9 %, 20649 bytes)
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> #define BZ_INITIALISE_CRC              \
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> #define BZ_FINALISE_CRC                \
(89.9 %, 20641 bytes)
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> #define BZ_FINALISE_CRC                \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #define BZ_UPDATE_CRC              \
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT 
(89.9 %, 20633 bytes)
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #define BZ_UPDATE_CRC              \
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT 
597c597
< #define BZ_GET_FAST(cccc)                     \
---
> #define BZ_GET_FAST                     \
(89.9 %, 20621 bytes)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT 
597c597
< #define BZ_GET_FAST(cccc)                     \
---
> #define BZ_GET_FAST                     \
(90.0 %, 20579 bytes)
597c597
< #define BZ_GET_FAST(cccc)                     \
---
> #define BZ_GET_FAST                     \
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     cccc = (s->tPos & 0xff);           \
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     cccc = (UChar);           \
(90.0 %, 20573 bytes)
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     cccc = (s->tPos & 0xff);           \
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     cccc = (UChar);           \
(90.0 %, 20566 bytes)
599c599
<     cccc = (s->tPos & 0xff);           \
---
>     cccc = ;           \
602c602
< #define BZ_GET_FAST_C(cccc)                   \
---
> #define BZ_GET_FAST_C                   \
(90.0 %, 20550 bytes)
602c602
< #define BZ_GET_FAST_C(cccc)                   \
---
> #define BZ_GET_FAST_C                   \
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     cccc = (c_tPos & 0xff);            \
(90.0 %, 20544 bytes)
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     cccc = (c_tPos & 0xff);            \
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     cccc = (UChar);            \
607c607
< #define SET_LL4(i,n)                                          \
---
> #define SET_LL4                                          \
(90.0 %, 20537 bytes)
604c604
<     cccc = (c_tPos & 0xff);            \
---
>     cccc = ;            \
607c607
< #define SET_LL4(i,n)                                          \
---
> #define SET_LL4                                          \
(90.0 %, 20522 bytes)
607c607
< #define SET_LL4(i,n)                                          \
---
> #define SET_LL4                                          \
610c610
< #define GET_LL4(i)                             \
---
> #define GET_LL4                             \
(90.0 %, 20517 bytes)
610c610
< #define GET_LL4(i)                             \
---
> #define GET_LL4                             \
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    ( & 0xF)
(90.0 %, 20514 bytes)
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    ( & 0xF)
(90.0 %, 20454 bytes)
613c613
< #define SET_LL(i,n)                          \
---
> #define SET_LL                          \
616c616
< #define GET_LL(i) \
---
> #define GET_LL \
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
>    
(90.0 %, 20449 bytes)
616c616
< #define GET_LL(i) \
---
> #define GET_LL \
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
>    
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
>    ( | (GET_LL4(i) << 16))
(90.0 %, 20446 bytes)
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
>    
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
>    ( | (GET_LL4(i) << 16))
(90.0 %, 20403 bytes)
619c619
< #define BZ_GET_SMALL(cccc)                            \
---
> #define BZ_GET_SMALL                            \
620c620
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>       cccc = BZ2_indexIntoF ;    \
621c621
<       s->tPos = GET_LL(s->tPos);
---
>       s->tPos = GET_LL;
(90.0 %, 20397 bytes)
620c620
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>       cccc = BZ2_indexIntoF ;    \
621c621
<       s->tPos = GET_LL(s->tPos);
---
>       s->tPos = GET_LL;
(90.1 %, 20376 bytes)
621c621
<       s->tPos = GET_LL(s->tPos);
---
>       s->tPos = GET_LL;
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress ;
658c658
< #define fswap(zz1, zz2) \
---
> #define fswap \
(90.1 %, 20367 bytes)
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress ;
658c658
< #define fswap(zz1, zz2) \
---
> #define fswap \
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> #define fvswap       \
(90.1 %, 20357 bytes)
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> #define fvswap       \
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define fmin ((a) < (b)) ? (a) : (b)
(90.1 %, 20340 bytes)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define fmin ((a) < (b)) ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define fmin(a,b)  ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define fmin(a,b) ( < (b)) ? (a) : (b)
(90.1 %, 20335 bytes)
665c665
< #define fmin ((a) < (b)) ? (a) : (b)
---
> #define fmin  ? (a) : (b)
665c665
< #define fmin ((a) < (b)) ? (a) : (b)
---
> #define fmin ( < (b)) ? (a) : (b)
(90.1 %, 20324 bytes)
665c665
< #define fmin  ? (a) : (b)
---
> #define fmin  ?  : (b)
665c665
< #define fmin  ? (a) : (b)
---
> #define fmin  ? (a) : 
(90.1 %, 20321 bytes)
665c665
< #define fmin  ?  : (b)
---
> #define fmin  ?  : 
667c667
< #define fpush(lz,hz) 
---
> #define fpush 
669c669
< #define fpop(lz,hz) 
---
> #define fpop 
(90.1 %, 20318 bytes)
667c667
< #define fpush(lz,hz) 
---
> #define fpush 
669c669
< #define fpop(lz,hz) 
---
> #define fpop 
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
(90.1 %, 20311 bytes)
669c669
< #define fpop(lz,hz) 
---
> #define fpop 
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
(90.1 %, 20304 bytes)
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH(zz)  bhtab[ >> 5] |= (1 << ((zz) & 31))
(90.1 %, 20300 bytes)
689c689
< #define       SET_BH  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH  bhtab[ >> 5] |= (1 << ((zz) & 31))
689c689
< #define       SET_BH  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH  bhtab[(zz) >> 5] |= 
689c689
< #define       SET_BH  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH  bhtab[(zz) >> 5] |= (1 << )
(90.1 %, 20296 bytes)
689c689
< #define       SET_BH  bhtab[ >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH  bhtab[ >> 5] |= 
689c689
< #define       SET_BH  bhtab[ >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH  bhtab[ >> 5] |= (1 << )
689c689
< #define       SET_BH  bhtab[ >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH  bhtab[ >> 5] |= (1 << ( & 31))
(90.1 %, 20278 bytes)
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BH  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BH(zz)  bhtab[ >> 5] &= ~(1 << ((zz) & 31))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~
(90.1 %, 20274 bytes)
690c690
< #define     CLEAR_BH  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BH  bhtab[ >> 5] &= ~(1 << ((zz) & 31))
690c690
< #define     CLEAR_BH  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BH  bhtab[(zz) >> 5] &= ~
690c690
< #define     CLEAR_BH  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BH  bhtab[(zz) >> 5] &= ~(1 << )
(90.1 %, 20270 bytes)
690c690
< #define     CLEAR_BH  bhtab[ >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BH  bhtab[ >> 5] &= ~
690c690
< #define     CLEAR_BH  bhtab[ >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BH  bhtab[ >> 5] &= ~(1 << )
(90.1 %, 20252 bytes)
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     ISSET_BH  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     ISSET_BH(zz)  
(90.1 %, 20248 bytes)
691c691
< #define     ISSET_BH  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     ISSET_BH  
691c691
< #define     ISSET_BH  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     ISSET_BH  (bhtab[ >> 5] & (1 << ((zz) & 31)))
(90.1 %, 20209 bytes)
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define      WORD_BH  bhtab[(zz) >> 5]
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define      WORD_BH(zz)  bhtab[ >> 5]
(90.1 %, 20205 bytes)
692c692
< #define      WORD_BH  bhtab[(zz) >> 5]
---
> #define      WORD_BH  bhtab[ >> 5]
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0x01f)
---
> #define UNALIGNED_BH  ((zz) & 0x01f)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0x01f)
---
> #define UNALIGNED_BH(zz)  
(90.1 %, 20201 bytes)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0x01f)
---
> #define UNALIGNED_BH  ((zz) & 0x01f)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0x01f)
---
> #define UNALIGNED_BH(zz)  
(90.1 %, 20197 bytes)
693c693
< #define UNALIGNED_BH  ((zz) & 0x01f)
---
> #define UNALIGNED_BH  
693c693
< #define UNALIGNED_BH  ((zz) & 0x01f)
---
> #define UNALIGNED_BH  ( & 0x01f)
724c724
< #define mswap(zz1, zz2) \
---
> #define mswap \
(90.2 %, 20183 bytes)
724c724
< #define mswap(zz1, zz2) \
---
> #define mswap \
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> #define mvswap       \
(90.2 %, 20173 bytes)
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> #define mvswap       \
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define mmin ((a) < (b)) ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define mmin(a,b)  ? (a) : (b)
(90.2 %, 20156 bytes)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define mmin ((a) < (b)) ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define mmin(a,b)  ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define mmin(a,b) ( < (b)) ? (a) : (b)
(90.2 %, 20151 bytes)
732c732
< #define mmin ((a) < (b)) ? (a) : (b)
---
> #define mmin  ? (a) : (b)
732c732
< #define mmin ((a) < (b)) ? (a) : (b)
---
> #define mmin ( < (b)) ? (a) : (b)
732c732
< #define mmin ((a) < (b)) ? (a) : (b)
---
> #define mmin ((a) < ) ? (a) : (b)
(90.2 %, 20140 bytes)
732c732
< #define mmin  ? (a) : (b)
---
> #define mmin  ?  : (b)
732c732
< #define mmin  ? (a) : (b)
---
> #define mmin  ? (a) : 
734c734
< #define mpush(lz,hz,dz) 
---
> #define mpush 
(90.2 %, 20137 bytes)
732c732
< #define mmin  ?  : (b)
---
> #define mmin  ?  : 
734c734
< #define mpush(lz,hz,dz) 
---
> #define mpush 
(90.2 %, 20134 bytes)
734c734
< #define mpush(lz,hz,dz) 
---
> #define mpush 
736c736
< #define mpop(lz,hz,dz) 
---
> #define mpop 
(90.2 %, 20124 bytes)
736c736
< #define mpop(lz,hz,dz) 
---
> #define mpop 
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define mnextsize (nextHi[az]-nextLo[az])
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define mnextsize(az) 
(90.2 %, 20114 bytes)
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define mnextsize (nextHi[az]-nextLo[az])
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define mnextsize(az) 
741c741
< #define mnextswap(az,bz)                                        \
---
> #define mnextswap                                        \
(90.2 %, 20110 bytes)
739c739
< #define mnextsize (nextHi[az]-nextLo[az])
---
> #define mnextsize 
741c741
< #define mnextswap(az,bz)                                        \
---
> #define mnextswap                                        \
(90.2 %, 20087 bytes)
741c741
< #define mnextswap(az,bz)                                        \
---
> #define mnextswap                                        \
746c746
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
---
> #define MAIN_QSORT_DEPTH_THRESH 
(90.2 %, 20080 bytes)
746c746
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
---
> #define MAIN_QSORT_DEPTH_THRESH 
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ (ftab[((b)+1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ(b) 
(90.2 %, 20055 bytes)
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ (ftab[((b)+1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ(b) 
(90.2 %, 20052 bytes)
766c766
< #define BIGFREQ (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ 
766c766
< #define BIGFREQ (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ (ftab[ << 8] - ftab[(b) << 8])
(90.2 %, 20015 bytes)
767c767
< #define SETMASK (1 << 21)
---
> #define SETMASK 
768c768
< #define CLEARMASK (~(SETMASK))
---
> #define CLEARMASK 
768c768
< #define CLEARMASK (~(SETMASK))
---
> #define CLEARMASK (~)
(90.2 %, 20006 bytes)
768c768
< #define CLEARMASK (~(SETMASK))
---
> #define CLEARMASK 
768c768
< #define CLEARMASK (~(SETMASK))
---
> #define CLEARMASK (~)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
---
> #define WEIGHTOF  ((zz0) & 0xffffff00)
(90.2 %, 19994 bytes)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
---
> #define WEIGHTOF  ((zz0) & 0xffffff00)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
---
> #define WEIGHTOF(zz0)  
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
---
> #define WEIGHTOF(zz0)  ( & 0xffffff00)
(90.2 %, 19989 bytes)
793c793
< #define WEIGHTOF  ((zz0) & 0xffffff00)
---
> #define WEIGHTOF  
793c793
< #define WEIGHTOF  ((zz0) & 0xffffff00)
---
> #define WEIGHTOF  ( & 0xffffff00)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF   ((zz1) & 0x000000ff)
(90.3 %, 19969 bytes)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF   ((zz1) & 0x000000ff)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF(zz1)   
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF(zz1)   ( & 0x000000ff)
(90.3 %, 19964 bytes)
794c794
< #define DEPTHOF   ((zz1) & 0x000000ff)
---
> #define DEPTHOF   
794c794
< #define DEPTHOF   ((zz1) & 0x000000ff)
---
> #define DEPTHOF   ( & 0x000000ff)
(90.3 %, 19944 bytes)
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define MYMAX ((zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define MYMAX(zz2,zz3) 
(90.3 %, 19935 bytes)
795c795
< #define MYMAX ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define MYMAX 
795c795
< #define MYMAX ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define MYMAX ( > (zz3) ? (zz2) : (zz3))
(90.3 %, 19904 bytes)
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> #define ADDWEIGHTS                           \
798c798
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
>     |                    \
(90.3 %, 19895 bytes)
798c798
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
>     |                    \
798c798
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
>    (WEIGHTOF+WEIGHTOF(zw2)) |                    \
798c798
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
>    (WEIGHTOF(zw1)+WEIGHTOF) |                    \
(90.3 %, 19866 bytes)
799c799
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>    
799c799
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>    (1 + MYMAX)
799c799
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>    (1 + MYMAX(DEPTHOF,DEPTHOF(zw2)))
(90.3 %, 19828 bytes)
801c801
< #define UPHEAP(z)                                     \
---
> #define UPHEAP                                     \
804c804
< #define DOWNHEAP(z)                                   \
---
> #define DOWNHEAP                                   \
(90.3 %, 19825 bytes)
804c804
< #define DOWNHEAP(z)                                   \
---
> #define DOWNHEAP                                   \
872c872
< #define bsNEEDW(nz)                           \
---
> #define bsNEEDW                           \
(90.3 %, 19822 bytes)
872c872
< #define bsNEEDW(nz)                           \
---
> #define bsNEEDW                           \
894c894
< void makeMaps_e ( EState* s )
---
> void makeMaps_e 
900c900
< void generateMTFValues ( EState* s )
---
> void generateMTFValues 
930c930
< #define RETURN(rrr)                               \
---
> #define RETURN                               \
(90.3 %, 19818 bytes)
894c894
< void makeMaps_e ( EState* s )
---
> void makeMaps_e 
900c900
< void generateMTFValues ( EState* s )
---
> void generateMTFValues 
930c930
< #define RETURN(rrr)                               \
---
> #define RETURN                               \
933c933
< #define GET_BITS(lll,vvv,nnn)                     \
---
> #define GET_BITS                     \
(90.3 %, 19813 bytes)
933c933
< #define GET_BITS(lll,vvv,nnn)                     \
---
> #define GET_BITS                     \
935c935
<    while (True) 
---
>    while  
937c937
< #define GET_UCHAR(lll,uuu)                        \
---
> #define GET_UCHAR                        \
(90.3 %, 19800 bytes)
935c935
<    while (True) 
---
>    while  
937c937
< #define GET_UCHAR(lll,uuu)                        \
---
> #define GET_UCHAR                        \
938c938
<    GET_BITS(lll,uuu,8)
---
>    GET_BITS
(90.3 %, 19794 bytes)
937c937
< #define GET_UCHAR(lll,uuu)                        \
---
> #define GET_UCHAR                        \
938c938
<    GET_BITS(lll,uuu,8)
---
>    GET_BITS
(90.3 %, 19785 bytes)
938c938
<    GET_BITS(lll,uuu,8)
---
>    GET_BITS
940c940
< #define GET_BIT(lll,uuu)                          \
---
> #define GET_BIT                          \
(90.4 %, 19774 bytes)
940c940
< #define GET_BIT(lll,uuu)                          \
---
> #define GET_BIT                          \
941c941
<    GET_BITS(lll,uuu,1)
---
>    GET_BITS
944c944
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> #define GET_MTF_VAL           \
(90.4 %, 19765 bytes)
941c941
<    GET_BITS(lll,uuu,1)
---
>    GET_BITS
944c944
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> #define GET_MTF_VAL           \
949c949
< Int32 BZ2_decompress ( DState* s )
---
> Int32 BZ2_decompress 
(90.4 %, 19754 bytes)
944c944
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> #define GET_MTF_VAL           \
949c949
< Int32 BZ2_decompress ( DState* s )
---
> Int32 BZ2_decompress 
968c968
< void BZ2_bz__AssertH__fail ( int errcode )
---
> void BZ2_bz__AssertH__fail 
974c974
< int bz_config_ok ( void )
---
> int bz_config_ok 
(90.4 %, 19734 bytes)
949c949
< Int32 BZ2_decompress ( DState* s )
---
> Int32 BZ2_decompress 
968c968
< void BZ2_bz__AssertH__fail ( int errcode )
---
> void BZ2_bz__AssertH__fail 
974c974
< int bz_config_ok ( void )
---
> int bz_config_ok 
980c980
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> void* default_bzalloc 
984c984
< void default_bzfree ( void* opaque, void* addr )
---
> void default_bzfree 
(90.4 %, 19726 bytes)
980c980
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> void* default_bzalloc 
984c984
< void default_bzfree ( void* opaque, void* addr )
---
> void default_bzfree 
990c990
< void prepare_new_block ( EState* s )
---
> void prepare_new_block 
996c996
< void init_RL ( EState* s )
---
> void init_RL 
1001c1001
< Bool isempty_RL ( EState* s )
---
> Bool isempty_RL 
(90.4 %, 19685 bytes)
984c984
< void default_bzfree ( void* opaque, void* addr )
---
> void default_bzfree 
990c990
< void prepare_new_block ( EState* s )
---
> void prepare_new_block 
996c996
< void init_RL ( EState* s )
---
> void init_RL 
1001c1001
< Bool isempty_RL ( EState* s )
---
> Bool isempty_RL 
1006c1006
< int BZ_API(BZ2_bzCompressInit) 
---
> int BZ_API 
1007,1010c1007
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
>                     
1023c1023
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
> #define ADD_CHAR_TO_BLOCK               \
(90.4 %, 19672 bytes)
1006c1006
< int BZ_API(BZ2_bzCompressInit) 
---
> int BZ_API 
1007,1010c1007
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
>                     
1023c1023
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
> #define ADD_CHAR_TO_BLOCK               \
1037c1037
< Bool handle_compress ( bz_stream* strm )
---
> Bool handle_compress 
(90.4 %, 19662 bytes)
1037c1037
< Bool handle_compress ( bz_stream* strm )
---
> Bool handle_compress 
1042c1042
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int BZ_API ( bz_stream *strm, int action )
1042c1042
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int BZ_API(BZ2_bzCompress) 
1047c1047
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> int BZ_API  ( bz_stream *strm )
1047c1047
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> int BZ_API(BZ2_bzCompressEnd)  
1056c1056
< int BZ_API(BZ2_bzDecompressInit) 
---
> int BZ_API 
1057,1059c1057
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
>                      
1065c1065
< void unRLE_obuf_to_output_FAST ( DState* s )
---
> void unRLE_obuf_to_output_FAST 
(90.4 %, 19643 bytes)
1042c1042
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int BZ_API ( bz_stream *strm, int action )
1042c1042
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int BZ_API(BZ2_bzCompress) 
1047c1047
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> int BZ_API  ( bz_stream *strm )
1047c1047
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> int BZ_API(BZ2_bzCompressEnd)  
1056c1056
< int BZ_API(BZ2_bzDecompressInit) 
---
> int BZ_API 
1057,1059c1057
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
>                      
1065c1065
< void unRLE_obuf_to_output_FAST ( DState* s )
---
> void unRLE_obuf_to_output_FAST 
1076c1076
< void unRLE_obuf_to_output_SMALL ( DState* s )
---
> void unRLE_obuf_to_output_SMALL 
1081c1081
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> int BZ_API ( bz_stream *strm )
1081c1081
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> int BZ_API(BZ2_bzDecompress) 
1086c1086
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> int BZ_API  ( bz_stream *strm )
1086c1086
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> int BZ_API(BZ2_bzDecompressEnd)  
1094c1094
< #define BZ_SETERR(eee)                    \
---
> #define BZ_SETERR                    \
1115c1115
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE* BZ_API 
1116,1120c1116
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     
1126c1126
< void BZ_API(BZ2_bzWrite)
---
> void BZ_API
1127,1130c1127
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              
1135c1135
< void BZ_API(BZ2_bzWriteClose)
---
> void BZ_API
1136,1140c1136
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                   
(90.4 %, 19638 bytes)
1115c1115
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE* BZ_API 
1116,1120c1116
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     
1126c1126
< void BZ_API(BZ2_bzWrite)
---
> void BZ_API
1127,1130c1127
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              
1135c1135
< void BZ_API(BZ2_bzWriteClose)
---
> void BZ_API
1136,1140c1136
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                   
1144c1144
< void BZ_API(BZ2_bzWriteClose64)
---
> void BZ_API
1145,1151c1145
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                   
1156c1156
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> BZFILE* BZ_API 
1157,1162c1157
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                    
1167c1167
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API ( int *bzerror, BZFILE *b )
1167c1167
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API(BZ2_bzReadClose) 
1172c1172
< int BZ_API(BZ2_bzRead) 
---
> int BZ_API 
1173,1176c1173
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            
1179c1179
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = b;
1181c1181
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR;
1183c1183
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if 
(90.4 %, 19629 bytes)
1181c1181
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR;
1183c1183
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if 
1186c1186
<    if (bzf->writing)
---
>    if 
1189c1189
<    if (len == 0)
---
>    if 
1195c1195
<    while (True) 
---
>    while  
1202c1202
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void BZ_API 
1203,1206c1203
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      
(90.4 %, 19622 bytes)
1183c1183
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if 
1186c1186
<    if (bzf->writing)
---
>    if 
1189c1189
<    if (len == 0)
---
>    if 
1195c1195
<    while (True) 
---
>    while  
1202c1202
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void BZ_API 
1203,1206c1203
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      
1215c1215
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
> int BZ_API 
1216,1222c1216
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                          
1227c1227
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> int BZ_API 
1228,1233c1228
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                            
1243c1243
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
> const char * BZ_API(void)
1243c1243
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
> const char * BZ_API(BZ2_bzlibVersion)
1251,1254c1251
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
<                  int open_mode)      
---
>                      
1260c1260
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZFILE * BZ_API
1261,1262c1261
<                ( const char *path,
<                  const char *mode )
---
>                
1267c1267
< BZFILE * BZ_API(BZ2_bzdopen)
---
> BZFILE * BZ_API
1268,1269c1268
<                ( int fd,
<                  const char *mode )
---
>                
1274c1274
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API (BZFILE* b, void* buf, int len )
1274c1274
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) 
1277c1277
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if  return 0;
(90.5 %, 19495 bytes)
1257c1257
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZFILE * BZ_API
1258,1259c1258
<                ( const char *path,
<                  const char *mode )
---
>                
1264c1264
< BZFILE * BZ_API(BZ2_bzdopen)
---
> BZFILE * BZ_API
1265,1266c1265
<                ( int fd,
<                  const char *mode )
---
>                
1271c1271
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API (BZFILE* b, void* buf, int len )
1271c1271
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) 
1274c1274
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if  return 0;
1274c1274
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (->lastErr == BZ_STREAM_END) return 0;
1274c1274
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((b)->lastErr == BZ_STREAM_END) return 0;
1276c1276
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if  ; else ;
1281c1281
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API (BZFILE* b, void* buf, int len )
1281c1281
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) 
1286c1286
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_API (BZFILE *b)
1286c1286
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_API(BZ2_bzflush) 
1291c1291
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> void BZ_API (BZFILE* b)
1291c1291
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> void BZ_API(BZ2_bzclose) 
1300c1300
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_API (BZFILE *b, int *errnum)
1300c1300
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_API(BZ2_bzerror) 
1342c1342
< #define ERROR_IF_EOF(i)       
---
> #define ERROR_IF_EOF       
1343c1343
< #define ERROR_IF_NOT_ZERO(i)  
---
> #define ERROR_IF_NOT_ZERO  
1344c1344
< #define ERROR_IF_MINUS_ONE(i) 
---
> #define ERROR_IF_MINUS_ONE 
(90.5 %, 19492 bytes)
1343c1343
< #define ERROR_IF_NOT_ZERO(i)  
---
> #define ERROR_IF_NOT_ZERO  
1344c1344
< #define ERROR_IF_MINUS_ONE(i) 
---
> #define ERROR_IF_MINUS_ONE 
1360c1360
< #   define APPEND_FILESPEC(root, name) \
---
> #   define APPEND_FILESPEC \
(90.5 %, 19489 bytes)
1344c1344
< #define ERROR_IF_MINUS_ONE(i) 
---
> #define ERROR_IF_MINUS_ONE 
1360c1360
< #   define APPEND_FILESPEC(root, name) \
---
> #   define APPEND_FILESPEC \
(90.5 %, 19486 bytes)
1360c1360
< #   define APPEND_FILESPEC(root, name) \
---
> #   define APPEND_FILESPEC \
1361c1361
<       root=snocString((root), (name))
---
>       root=snocString
(90.5 %, 19474 bytes)
1361c1361
<       root=snocString((root), (name))
---
>       root=snocString
1361c1361
<       root=snocString((root), (name))
---
>       root=snocString(, (name))
1361c1361
<       root=snocString((root), (name))
---
>       root=snocString((root), )
(90.5 %, 19458 bytes)
1363c1363
< #   define APPEND_FLAG(root, name) \
---
> #   define APPEND_FLAG \
1364c1364
<       root=snocString((root), (name))
---
>       root=snocString
(90.5 %, 19446 bytes)
1364c1364
<       root=snocString((root), (name))
---
>       root=snocString
1364c1364
<       root=snocString((root), (name))
---
>       root=snocString(, (name))
(90.5 %, 19430 bytes)
1366c1366
< #   define SET_BINARY_MODE(fd) 
---
> #   define SET_BINARY_MODE 
1377c1377
< #define True  ((Bool)1)
---
> #define True  
(90.5 %, 19426 bytes)
1377c1377
< #define True  ((Bool)1)
---
> #define True  
1377c1377
< #define True  ((Bool)1)
---
> #define True  (1)
1378c1378
< #define False ((Bool)0)
---
> #define False 
(90.5 %, 19417 bytes)
1378c1378
< #define False ((Bool)0)
---
> #define False 
1378c1378
< #define False ((Bool)0)
---
> #define False (0)
1638c1638
< #define ISFLAG(s) (strcmp(aa->name, (s))==0)
---
> #define ISFLAG (strcmp(aa->name, (s))==0)
(90.5 %, 19408 bytes)
1638c1638
< #define ISFLAG(s) (strcmp(aa->name, (s))==0)
---
> #define ISFLAG (strcmp(aa->name, (s))==0)
1638c1638
< #define ISFLAG(s) (strcmp(aa->name, (s))==0)
---
> #define ISFLAG(s) 
1638c1638
< #define ISFLAG(s) (strcmp(aa->name, (s))==0)
---
> #define ISFLAG(s) (strcmp==0)
(90.5 %, 19405 bytes)
1638c1638
< #define ISFLAG (strcmp(aa->name, (s))==0)
---
> #define ISFLAG 
1638c1638
< #define ISFLAG (strcmp(aa->name, (s))==0)
---
> #define ISFLAG (strcmp==0)
1638c1638
< #define ISFLAG (strcmp(aa->name, (s))==0)
---
> #define ISFLAG (strcmp(aa->name, )==0)
(90.5 %, 19379 bytes)
1640c1640
< IntNative main ( IntNative argc, Char *argv[] )
---
> IntNative main 
(90.6 %, 19347 bytes)
===< pass_balanced :: angles-only >===
52c52
< #include <stdio.h>
---
> #include stdio.h
233c233
< #include <stdlib.h>
---
> #include stdlib.h
1183c1183
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if (bzf == NULL || buf == NULL || len  0)
1186c1186
<    if (bzf->writing)
---
>    if (bzf-writing)
1339c1339
< #include <signal.h>
---
> #include signal.h
1340c1340
< #include <errno.h>
---
> #include errno.h
1351c1351
< #   include <fcntl.h>
---
> #   include fcntl.h
1352c1352
< #   include <utime.h>
---
> #   include utime.h
===< pass_clang :: param-to-local >===
253c253
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> extern void BZ2_bz__AssertH__fail ( void );
968c968
< void BZ2_bz__AssertH__fail ( int errcode )
---
> void BZ2_bz__AssertH__fail ( void )
894c894
< void makeMaps_e ( EState* s )
---
> void makeMaps_e ( void )
(90.6 %, 19333 bytes)
894c894
< void makeMaps_e ( EState* s )
---
> void makeMaps_e ( void )
900c900
< void generateMTFValues ( EState* s )
---
> void generateMTFValues ( void )
(90.6 %, 19328 bytes)
900c900
< void generateMTFValues ( EState* s )
---
> void generateMTFValues ( void )
984c984
< void default_bzfree ( void* opaque, void* addr )
---
> void default_bzfree (  void* addr )
(90.6 %, 19323 bytes)
984c984
< void default_bzfree ( void* opaque, void* addr )
---
> void default_bzfree (  void* addr )
984c984
< void default_bzfree ( void* opaque, void* addr )
---
> void default_bzfree ( void* opaque )
(90.6 %, 19310 bytes)
984c984
< void default_bzfree (  void* addr )
---
> void default_bzfree (  void )
990c990
< void prepare_new_block ( EState* s )
---
> void prepare_new_block ( void )
(90.6 %, 19304 bytes)
990c990
< void prepare_new_block ( EState* s )
---
> void prepare_new_block ( void )
996c996
< void init_RL ( EState* s )
---
> void init_RL ( void )
(90.6 %, 19299 bytes)
996c996
< void init_RL ( EState* s )
---
> void init_RL ( void )
1065c1065
< void unRLE_obuf_to_output_FAST ( DState* s )
---
> void unRLE_obuf_to_output_FAST ( void )
(90.6 %, 19294 bytes)
1065c1065
< void unRLE_obuf_to_output_FAST ( DState* s )
---
> void unRLE_obuf_to_output_FAST ( void )
1076c1076
< void unRLE_obuf_to_output_SMALL ( DState* s )
---
> void unRLE_obuf_to_output_SMALL ( void )
(90.6 %, 19289 bytes)
1076c1076
< void unRLE_obuf_to_output_SMALL ( DState* s )
---
> void unRLE_obuf_to_output_SMALL ( void )
(90.6 %, 19284 bytes)
===< pass_clang :: simplify-if >===
===< pass_clang :: reduce-array-dim >===
===< pass_clang :: reduce-array-size >===
===< pass_clang :: template-non-type-arg-to-int >===
===< pass_clang :: remove-base-class >===
===< pass_clang :: remove-pointer-pairs >===
===< pass_comments :: 0 >===
===< pass_special :: b >===
===< pass_ints :: c >===
===< pass_clex :: rm-toks-9 >===
9,12c9
< #define _BZLIB_H
< 
< #define BZ_RUN               0
< #define BZ_FLUSH             1
---
> BZ_FLUSH             1
9,12c9
< #define _BZLIB_H
< 
< #define BZ_RUN               0
< #define BZ_FLUSH             1
---
> #1
9,13c9
< #define _BZLIB_H
< 
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
---
> #define #define BZ_FINISH            2
11,13c11
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
---
> define BZ_FINISH            2
11,13c11
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
---
> #BZ_FINISH            2
11,13c11
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
---
> #define 2
11,15c11
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
---
> #define BZ_RUN               #define BZ_OK                0
12,15c12
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
---
> define BZ_OK                0
(90.6 %, 19207 bytes)
9,13c9
< #1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> ##define BZ_RUN_OK            1
10,13c10
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> define BZ_RUN_OK            1
10,13c10
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> #BZ_RUN_OK            1
10,13c10
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> #define 1
10,14c10
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #define BZ_FINISH            #define BZ_FLUSH_OK          2
12,14c12
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> define BZ_FLUSH_OK          2
12,14c12
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #BZ_FLUSH_OK          2
12,14c12
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #define 2
12,15c12
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> #define BZ_OK                #define BZ_FINISH_OK         3
13,15c13
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> define BZ_FINISH_OK         3
13,15c13
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> #BZ_FINISH_OK         3
13,15c13
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> #define 3
13,16c13
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define BZ_RUN_OK            #define BZ_STREAM_END        4
14,16c14
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> define BZ_STREAM_END        4
14,16c14
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #BZ_STREAM_END        4
14,16c14
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define 4
14,17c14
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    
---
> #define BZ_FLUSH_OK          #define BZ_SEQUENCE_ERROR    
15,17c15
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    
---
> define BZ_SEQUENCE_ERROR    
15,17c15
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    
---
> #BZ_SEQUENCE_ERROR    
15,18c15
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    
< #define BZ_PARAM_ERROR       
---
> #define #define BZ_PARAM_ERROR       
15,18c15
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    
< #define BZ_PARAM_ERROR       
---
> #define BZ_FINISH_OK         define BZ_PARAM_ERROR       
16,18c16
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    
< #define BZ_PARAM_ERROR       
---
> BZ_PARAM_ERROR       
16,19c16
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    
< #define BZ_PARAM_ERROR       
< #define BZ_MEM_ERROR         
---
> ##define BZ_MEM_ERROR         
16,19c16
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    
< #define BZ_PARAM_ERROR       
< #define BZ_MEM_ERROR         
---
> #define define BZ_MEM_ERROR         
16,19c16
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    
< #define BZ_PARAM_ERROR       
< #define BZ_MEM_ERROR         
---
> #define BZ_STREAM_END        BZ_MEM_ERROR         
17,19d16
< #define BZ_SEQUENCE_ERROR    
< #define BZ_PARAM_ERROR       
< #define BZ_MEM_ERROR         
17,19d16
< #define BZ_SEQUENCE_ERROR    
< #define BZ_PARAM_ERROR       
< #define BZ_MEM_ERROR         
(90.7 %, 19117 bytes)
17,19d16
< #define BZ_DATA_ERROR        
< #define BZ_DATA_ERROR_MAGIC  
< #define BZ_IO_ERROR          
17,19d16
< #define BZ_DATA_ERROR        
< #define BZ_DATA_ERROR_MAGIC  
< #define BZ_IO_ERROR          
(90.7 %, 19027 bytes)
17,20d16
< #define BZ_UNEXPECTED_EOF    
< #define BZ_OUTBUFF_FULL      
< #define BZ_CONFIG_ERROR      
< 
17,22c17
< #define BZ_UNEXPECTED_EOF    
< #define BZ_OUTBUFF_FULL      
< #define BZ_CONFIG_ERROR      
< 
< typedef 
<    struct {
---
> #struct {
17,22c17
< #define BZ_UNEXPECTED_EOF    
< #define BZ_OUTBUFF_FULL      
< #define BZ_CONFIG_ERROR      
< 
< typedef 
<    struct {
---
> #define {
18,23c18
< #define BZ_OUTBUFF_FULL      
< #define BZ_CONFIG_ERROR      
< 
< typedef 
<    struct {
<       char *next_in;
---
> char *next_in;
18,23c18
< #define BZ_OUTBUFF_FULL      
< #define BZ_CONFIG_ERROR      
< 
< typedef 
<    struct {
<       char *next_in;
---
> #*next_in;
18,23c18
< #define BZ_OUTBUFF_FULL      
< #define BZ_CONFIG_ERROR      
< 
< typedef 
<    struct {
<       char *next_in;
---
> #define next_in;
19,23c19
< #define BZ_CONFIG_ERROR      
< 
< typedef 
<    struct {
<       char *next_in;
---
> ;
19,24c19
< #define BZ_CONFIG_ERROR      
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #unsigned int avail_in;
19,24c19
< #define BZ_CONFIG_ERROR      
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #define int avail_in;
(90.8 %, 18936 bytes)
17,20c17
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> avail_in;
18,20c18
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
>    ;
18,21c18
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
>    struct unsigned int total_in_lo32;
19,21c19
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
>       int total_in_lo32;
19,21c19
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
>       char total_in_lo32;
(90.8 %, 18877 bytes)
19,22c19
<       int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>       next_out;
19,22c19
<       int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>       int ;
19,23c19
<       int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
---
>       int total_in_lo32unsigned int avail_out;
20,23c20
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
---
>       int avail_out;
20,23c20
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
---
>       unsigned avail_out;
20,23c20
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
---
>       unsigned int ;
20,24c20
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
---
>       unsigned int total_in_hi32unsigned int total_out_lo32;
22,24c22
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
---
>       int total_out_lo32;
22,24c22
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
---
>       char total_out_lo32;
22,24c22
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
---
>       char *;
22,25c22
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       char *next_outunsigned int total_out_hi32;
23,25c23
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       int total_out_hi32;
23,25c23
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       unsigned total_out_hi32;
23,25c23
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       unsigned int ;
23,27c23
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       unsigned int avail_outvoid *state;
24,27c24
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       *state;
24,27c24
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       unsigned state;
24,27c24
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       unsigned int ;
(90.8 %, 18809 bytes)
24,27c24
<       unsigned state;
< 
<       void *(*bzalloc);
<       void (*bzfree);
---
>       unsigned void (*bzfree);
24,27c24
<       unsigned state;
< 
<       void *(*bzalloc);
<       void (*bzfree);
---
>       unsigned state(*bzfree);
26,27c26
<       void *(*bzalloc);
<       void (*bzfree);
---
>       *bzfree);
26,27c26
<       void *(*bzalloc);
<       void (*bzfree);
---
>       void bzfree);
26,27c26
<       void *(*bzalloc);
<       void (*bzfree);
---
>       void *);
26,27c26
<       void *(*bzalloc);
<       void (*bzfree);
---
>       void *(;
26,28c26
<       void *(*bzalloc);
<       void (*bzfree);
<       void *opaque;
---
>       void *(*void *opaque;
26,28c26
<       void *(*bzalloc);
<       void (*bzfree);
<       void *opaque;
---
>       void *(*bzalloc*opaque;
26,28c26
<       void *(*bzalloc);
<       void (*bzfree);
<       void *opaque;
---
>       void *(*bzalloc)opaque;
27,28c27
<       void (*bzfree);
<       void *opaque;
---
>       ;
27,29c27
<       void (*bzfree);
<       void *opaque;
<    } 
---
>       void } 
(90.8 %, 18775 bytes)
27,33c27
<       ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       h>
28,33c28
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    >
29,35c29
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    #   define BZ_API(func) func
29,35c29
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    bz_streamdefine BZ_API(func) func
33,35c33
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> BZ_API(func) func
33,35c33
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #(func) func
33,35c33
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include func) func
33,35c33
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <) func
33,35c33
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdiofunc
33,36c33
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <stdio.#   define BZ_EXTERN extern
33,36c33
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <stdio.hdefine BZ_EXTERN extern
35,36c35
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> BZ_EXTERN extern
35,36c35
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   extern
35,41c35
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #   define BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
35,41c35
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #   define BZ_APIint BZ_API(BZ2_bzCompressInit) ( 
35,41c35
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #   define BZ_API(BZ_API(BZ2_bzCompressInit) ( 
35,41c35
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #   define BZ_API(func(BZ2_bzCompressInit) ( 
35,41c35
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #   define BZ_API(func) BZ2_bzCompressInit) ( 
36,41c36
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> ) ( 
36,41c36
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #   ( 
36,42c36
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
---
> #   define bz_stream* strm, 
36,42c36
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
---
> #   define BZ_EXTERN * strm, 
41,42c41
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
---
> strm, 
41,42c41
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
---
> BZ_EXTERN , 
41,43c41
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
---
> BZ_EXTERN int int        blockSize100k, 
41,43c41
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
---
> BZ_EXTERN int BZ_APIblockSize100k, 
41,43c41
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
---
> BZ_EXTERN int BZ_API(, 
41,44c41
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInitint        verbosity, 
41,44c41
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit) verbosity, 
42,44c42
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
---
>       , 
42,45c42
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
---
>       bz_streamint        workFactor 
42,45c42
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
---
>       bz_stream* workFactor 
42,46c42
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
---
>       bz_stream* strm);
43,46c43
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
---
>       ;
43,48c43
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>       int        BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
43,48c43
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>       int        blockSize100kint BZ_API(BZ2_bzCompress) ( 
44,48c44
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>       BZ_API(BZ2_bzCompress) ( 
44,48c44
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>       int        (BZ2_bzCompress) ( 
44,48c44
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>       int        verbosityBZ2_bzCompress) ( 
45,48c45
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>       ) ( 
45,48c45
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>       int        ( 
46,49c46
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
---
>    bz_stream* strm, 
46,49c46
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
---
>    )* strm, 
48,49c48
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
---
> strm, 
48,49c48
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
---
> BZ_EXTERN , 
48,50c48
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
---
> BZ_EXTERN int int action 
48,50c48
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
---
> BZ_EXTERN int BZ_APIaction 
48,51c48
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
---
> BZ_EXTERN int BZ_API();
48,51c48
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzCompress;
48,53c48
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzCompress) BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
49,53c49
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
>       int BZ_API(BZ2_bzCompressEnd) ( 
49,53c49
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
>       bz_streamBZ_API(BZ2_bzCompressEnd) ( 
49,53c49
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
>       bz_stream* (BZ2_bzCompressEnd) ( 
49,53c49
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
>       bz_stream* strmBZ2_bzCompressEnd) ( 
50,53c50
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
>       ) ( 
(90.9 %, 18711 bytes)
48,51c48
< BZ_EXTERN int BZ_API();
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
---
> BZ_EXTERN int BZ_API(bz_stream* strm 
48,51c48
< BZ_EXTERN int BZ_API();
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
---
> BZ_EXTERN int BZ_API()* strm 
50,51c50
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
---
> strm 
50,52c50
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
---
> BZ_EXTERN );
50,52c50
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
---
> BZ_EXTERN int ;
50,54c50
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN int BZ_APIBZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
50,54c50
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN int BZ_API(int BZ_API(BZ2_bzDecompressInit) ( 
50,54c50
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressEndBZ_API(BZ2_bzDecompressInit) ( 
50,54c50
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) (BZ2_bzDecompressInit) ( 
51,54c51
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
>       BZ2_bzDecompressInit) ( 
51,54c51
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
>       bz_stream) ( 
(90.9 %, 18655 bytes)
50,53c50
< BZ_EXTERN int ;
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
---
> BZ_EXTERN int *strm, 
52,53c52
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
---
> strm, 
52,53c52
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
---
> BZ_EXTERN , 
52,54c52
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
---
> BZ_EXTERN int int       verbosity, 
52,54c52
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
---
> BZ_EXTERN int BZ_APIverbosity, 
52,54c52
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
---
> BZ_EXTERN int BZ_API(, 
52,55c52
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompressInitint       small
52,55c52
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) small
53,56c53
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
---
>       );
53,56c53
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
---
>       bz_stream ;
53,58c53
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
>       bz_stream *BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
53,58c53
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
>       bz_stream *strmint BZ_API(BZ2_bzDecompress) ( 
54,58c54
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
>       BZ_API(BZ2_bzDecompress) ( 
54,58c54
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
>       int       (BZ2_bzDecompress) ( 
54,58c54
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
>       int       verbosityBZ2_bzDecompress) ( 
55,58c55
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
>       ) ( 
(90.9 %, 18584 bytes)
53,55d52
<       );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
53,56c53
<       );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
---
>       )* strm 
55,56c55
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
---
> strm 
55,57c55
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
---
> BZ_EXTERN );
55,57c55
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
---
> BZ_EXTERN int ;
55,59c55
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
> BZ_EXTERN int BZ_APIBZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
55,59c55
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
> BZ_EXTERN int BZ_API(int BZ_API(BZ2_bzDecompressEnd) ( 
55,59c55
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompressBZ_API(BZ2_bzDecompressEnd) ( 
55,59c55
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompress) (BZ2_bzDecompressEnd) ( 
56,59c56
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
>       BZ2_bzDecompressEnd) ( 
56,59c56
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
>       bz_stream) ( 
56,59c56
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
>       bz_stream* ( 
(91.0 %, 18529 bytes)
55,58c55
< BZ_EXTERN int ;
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
---
> BZ_EXTERN int *strm 
57,58c57
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
---
> strm 
57,59c57
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
---
> BZ_EXTERN );
57,59c57
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
---
> BZ_EXTERN int ;
57,65c57
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> BZ_EXTERN int BZ_API#define BZ_MAX_UNUSED 5000
57,65c57
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> BZ_EXTERN int BZ_API(define BZ_MAX_UNUSED 5000
57,65c57
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompressEndBZ_MAX_UNUSED 5000
57,65c57
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) 5000
58,67c58
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
>       typedef void BZFILE;
58,67c58
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
>       bz_stream void BZFILE;
(91.0 %, 18471 bytes)
57,67c57
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN int BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
63,67c63
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZFILE* BZ_API(BZ2_bzReadOpen) ( 
63,67c63
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #* BZ_API(BZ2_bzReadOpen) ( 
63,67c63
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #define BZ_API(BZ2_bzReadOpen) ( 
63,67c63
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #define BZ_MAX_UNUSED (BZ2_bzReadOpen) ( 
65,67c65
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ2_bzReadOpen) ( 
65,67c65
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> typedef ) ( 
65,67c65
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> typedef void ( 
65,68c65
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> typedef void BZFILEint*  bzerror,   
67,68c67
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> *  bzerror,   
67,68c67
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> BZ_EXTERN bzerror,   
67,68c67
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> BZ_EXTERN BZFILE,   
67,69c67
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* FILE* f, 
67,69c67
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API* f, 
67,69c67
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(f, 
67,69c67
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen, 
67,70c67
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) int   verbosity, 
68,70c68
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
>       verbosity, 
68,70c68
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
>       int, 
68,71c68
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       int*  int   small,
68,71c68
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       int*  bzerrorsmall,
69,71c69
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       ,
69,72c69
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       FILEvoid* unused,    
69,72c69
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       FILE* * unused,    
69,72c69
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       FILE* funused,    
70,72c70
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       ,    
70,73c70
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       int   int   nUnused 
70,73c70
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       int   verbositynUnused 
71,74c71
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       );
71,74c71
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       int   ;
71,76c71
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>       int   smallBZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
72,76c72
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>       void BZ_API(BZ2_bzReadClose) ( 
72,76c72
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>       voidBZ_API(BZ2_bzReadClose) ( 
72,76c72
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>       void* (BZ2_bzReadClose) ( 
72,76c72
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>       void* unusedBZ2_bzReadClose) ( 
73,76c73
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>       ) ( 
73,76c73
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>       int   ( 
74,77c74
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
---
>    int*    bzerror, 
74,77c74
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
---
>    )*    bzerror, 
76,77c76
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
---
> bzerror, 
76,77c76
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
---
> BZ_EXTERN , 
76,78c76
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
---
> BZ_EXTERN void BZFILE* b 
76,78c76
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
---
> BZ_EXTERN void BZ_API* b 
76,78c76
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
---
> BZ_EXTERN void BZ_API(b 
76,79c76
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
---
> BZ_EXTERN void BZ_API(BZ2_bzReadClose);
76,79c76
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
---
> BZ_EXTERN void BZ_API(BZ2_bzReadClose) ;
77,81c77
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
77,81c77
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       intvoid BZ_API(BZ2_bzReadGetUnused) ( 
77,81c77
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       int*    BZ_API(BZ2_bzReadGetUnused) ( 
77,81c77
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       int*    bzerror(BZ2_bzReadGetUnused) ( 
(91.0 %, 18413 bytes)
76,79c76
< BZ_EXTERN void BZ_API(b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ_API(( 
77,80c77
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
>    int*    bzerror, 
77,80c77
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
>    )*    bzerror, 
79,80c79
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> bzerror, 
79,80c79
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN , 
79,81c79
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZFILE* b, 
79,81c79
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API* b, 
79,81c79
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(b, 
79,81c79
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused, 
79,82c79
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) void**  unused,  
80,82c80
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       **  unused,  
80,82c80
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int*  unused,  
80,82c80
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int*    unused,  
80,82c80
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int*    bzerror,  
81,82d80
<       BZFILE* b, 
<       void**  unused,  
81,83c81
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       BZFILE*    nUnused 
81,83c81
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       BZFILE* nUnused 
81,84c81
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       BZFILE* b);
82,84c82
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       ;
82,86c82
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       voidBZ_EXTERN int BZ_API(BZ2_bzRead) ( 
82,86c82
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       void*int BZ_API(BZ2_bzRead) ( 
82,86c82
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       void**  BZ_API(BZ2_bzRead) ( 
82,86c82
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       void**  unused(BZ2_bzRead) ( 
83,86c83
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       BZ2_bzRead) ( 
83,86c83
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       int) ( 
83,86c83
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       int*    ( 
84,87c84
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
>    int*    bzerror, 
84,87c84
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
>    )*    bzerror, 
86,87c86
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
> bzerror, 
86,87c86
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
> BZ_EXTERN , 
86,88c86
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN int BZFILE* b, 
86,88c86
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN int BZ_API* b, 
86,88c86
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN int BZ_API(b, 
86,88c86
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN int BZ_API(BZ2_bzRead, 
86,89c86
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int BZ_API(BZ2_bzRead) void*   buf, 
87,89c87
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       *   buf, 
87,89c87
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       intbuf, 
87,89c87
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int*    , 
87,90c87
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       int*    bzerrorint     len 
88,90c88
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       len 
88,91c88
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       BZFILE);
88,91c88
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       BZFILE* ;
88,93c88
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZFILE* bBZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
89,93c89
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
89,93c89
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       void* BZ_API(BZ2_bzWriteOpen) ( 
89,93c89
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       void*   BZ_API(BZ2_bzWriteOpen) ( 
89,93c89
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       void*   buf(BZ2_bzWriteOpen) ( 
90,93c90
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZ2_bzWriteOpen) ( 
90,93c90
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       int     ) ( 
91,93c91
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>    ( 
91,94c91
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>    )int*  bzerror,      
93,94c93
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> *  bzerror,      
93,94c93
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN bzerror,      
93,94c93
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE,      
93,95c93
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* FILE* f, 
93,95c93
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API* f, 
93,95c93
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(f, 
93,95c93
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen, 
93,96c93
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) int   blockSize100k, 
94,96c94
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
>       blockSize100k, 
94,96c94
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
>       int, 
94,97c94
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int*  int   verbosity, 
94,97c94
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int*  bzerrorverbosity, 
95,97c95
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       , 
95,98c95
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       FILEint   workFactor 
95,98c95
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       FILE* workFactor 
95,99c95
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       FILE* f);
96,99c96
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       ;
96,101c96
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
96,101c96
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   blockSize100kvoid BZ_API(BZ2_bzWrite) ( 
97,101c97
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       BZ_API(BZ2_bzWrite) ( 
97,101c97
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   (BZ2_bzWrite) ( 
97,101c97
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   verbosityBZ2_bzWrite) ( 
98,101c98
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       ) ( 
98,101c98
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   ( 
99,102c99
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
>    int*    bzerror, 
99,102c99
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
>    )*    bzerror, 
101,102c101
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
> bzerror, 
101,102c101
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
> BZ_EXTERN , 
101,103c101
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZFILE* b, 
101,103c101
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API* b, 
101,103c101
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(b, 
101,103c101
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite, 
101,104c101
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite) void*   buf, 
102,104c102
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       *   buf, 
102,104c102
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       intbuf, 
102,104c102
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int*    , 
102,105c102
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       int*    bzerrorint     len 
103,105c103
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       len 
103,106c103
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       BZFILE);
103,106c103
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       BZFILE* ;
103,108c103
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       BZFILE* bBZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
104,108c104
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       void BZ_API(BZ2_bzWriteClose) ( 
104,108c104
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       voidBZ_API(BZ2_bzWriteClose) ( 
104,108c104
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       void*   (BZ2_bzWriteClose) ( 
104,108c104
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       void*   bufBZ2_bzWriteClose) ( 
105,108c105
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       ) ( 
105,108c105
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       int     ( 
106,109c106
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
>    int*          bzerror, 
106,109c106
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
>    )*          bzerror, 
108,109c108
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> bzerror, 
108,109c108
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN , 
108,110c108
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZFILE*       b, 
108,110c108
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API*       b, 
108,110c108
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(b, 
108,110c108
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose, 
108,111c108
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose) int           abandon, 
109,111c109
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       abandon, 
109,111c109
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       int, 
109,112c109
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int*          unsigned int* nbytes_in, 
109,112c109
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int*          bzerrorint* nbytes_in, 
110,112c110
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       * nbytes_in, 
110,112c110
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       BZFILEnbytes_in, 
110,112c110
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       BZFILE*       , 
110,113c110
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       BZFILE*       bunsigned int* nbytes_out 
111,113c111
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int* nbytes_out 
111,113c111
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int           * nbytes_out 
111,113c111
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int           abandonnbytes_out 
112,114c112
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       );
112,114c112
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       unsigned ;
112,116c112
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned intBZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
112,116c112
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int* void BZ_API(BZ2_bzWriteClose64) ( 
112,116c112
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int* nbytes_inBZ_API(BZ2_bzWriteClose64) ( 
113,116c113
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       (BZ2_bzWriteClose64) ( 
113,116c113
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned BZ2_bzWriteClose64) ( 
113,116c113
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int) ( 
113,116c113
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int* ( 
114,117c114
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>    int*          bzerror, 
114,117c114
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>    )*          bzerror, 
116,117c116
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> bzerror, 
116,117c116
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> BZ_EXTERN , 
116,118c116
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZFILE*       b, 
116,118c116
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API*       b, 
116,118c116
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(b, 
116,118c116
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64, 
116,119c116
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) int           abandon, 
117,119c117
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       abandon, 
117,119c117
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       int, 
117,120c117
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int*          unsigned int* nbytes_in_lo32, 
117,120c117
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int*          bzerrorint* nbytes_in_lo32, 
118,120c118
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       * nbytes_in_lo32, 
118,120c118
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       BZFILEnbytes_in_lo32, 
118,120c118
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       BZFILE*       , 
118,121c118
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       BZFILE*       bunsigned int* nbytes_in_hi32, 
119,121c119
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int* nbytes_in_hi32, 
119,121c119
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int           * nbytes_in_hi32, 
119,121c119
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int           abandonnbytes_in_hi32, 
120,121c120
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       , 
120,122c120
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned unsigned int* nbytes_out_lo32, 
120,122c120
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned intint* nbytes_out_lo32, 
120,122c120
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned int* * nbytes_out_lo32, 
120,122c120
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned int* nbytes_in_lo32nbytes_out_lo32, 
121,122c121
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       , 
121,123c121
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned unsigned int* nbytes_out_hi32
121,123c121
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned intint* nbytes_out_hi32
121,123c121
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned int* * nbytes_out_hi32
121,123c121
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned int* nbytes_in_hi32nbytes_out_hi32
122,124c122
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       );
122,124c122
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned ;
122,129c122
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned intBZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
122,129c122
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* int BZ_API(BZ2_bzBuffToBuffCompress) ( 
122,129c122
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* nbytes_out_lo32BZ_API(BZ2_bzBuffToBuffCompress) ( 
123,129c123
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       (BZ2_bzBuffToBuffCompress) ( 
123,129c123
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned BZ2_bzBuffToBuffCompress) ( 
123,129c123
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int) ( 
123,129c123
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* ( 
124,130c124
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>    char*         dest, 
124,130c124
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>    )*         dest, 
129,130c129
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> dest, 
129,130c129
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> BZ_EXTERN , 
129,131c129
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int unsigned int* destLen,
129,131c129
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_APIint* destLen,
129,131c129
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(* destLen,
129,131c129
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompressdestLen,
129,131c129
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ,
130,131d129
<       char*         dest, 
<       unsigned int* destLen,
130,131d129
<       char*         dest, 
<       unsigned int* destLen,
130,131d129
<       char*         dest, 
<       unsigned int* destLen,
131,132d130
<       unsigned int* destLen,
<       char*         source, 
131,132d130
<       unsigned int* destLen,
<       char*         source, 
131,132d130
<       unsigned int* destLen,
<       char*         source, 
131,133c131
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned intsourceLen,
131,133c131
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* ,
131,134c131
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       unsigned int* destLenint           blockSize100k, 
132,134c132
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       blockSize100k, 
132,134c132
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       char, 
132,135c132
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       char*         int           verbosity, 
132,135c132
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       char*         sourceverbosity, 
133,135c133
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       , 
133,136c133
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       unsigned int           workFactor 
133,136c133
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       unsigned int  workFactor 
133,137c133
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       unsigned int  sourceLen);
134,137c134
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       ;
134,139c134
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
134,139c134
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           blockSize100kint BZ_API(BZ2_bzBuffToBuffDecompress) ( 
135,139c135
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       BZ_API(BZ2_bzBuffToBuffDecompress) ( 
135,139c135
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           (BZ2_bzBuffToBuffDecompress) ( 
135,139c135
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           verbosityBZ2_bzBuffToBuffDecompress) ( 
136,139c136
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       ) ( 
136,139c136
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           ( 
137,140c137
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>    char*         dest, 
137,140c137
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>    )*         dest, 
139,140c139
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> dest, 
139,140c139
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_EXTERN , 
139,141c139
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int unsigned int* destLen,
139,141c139
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_APIint* destLen,
139,141c139
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(* destLen,
139,141c139
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompressdestLen,
139,141c139
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ,
140,141d139
<       char*         dest, 
<       unsigned int* destLen,
140,141d139
<       char*         dest, 
<       unsigned int* destLen,
140,141d139
<       char*         dest, 
<       unsigned int* destLen,
141,142d140
<       unsigned int* destLen,
<       char*         source, 
141,142d140
<       unsigned int* destLen,
<       char*         source, 
141,142d140
<       unsigned int* destLen,
<       char*         source, 
141,143c141
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned intsourceLen,
141,143c141
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* ,
141,144c141
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       unsigned int* destLenint           small, 
142,144c142
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       small, 
142,144c142
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       char, 
142,145c142
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
---
>       char*         int           verbosity 
142,145c142
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
---
>       char*         sourceverbosity 
143,146c143
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
---
>       );
143,146c143
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
---
>       unsigned ;
143,151c143
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       unsigned int  BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
143,151c143
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       unsigned int  sourceLenconst char * BZ_API(BZ2_bzlibVersion) (
144,151c144
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       char * BZ_API(BZ2_bzlibVersion) (
144,151c144
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       int           * BZ_API(BZ2_bzlibVersion) (
144,151c144
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       int           smallBZ_API(BZ2_bzlibVersion) (
145,151c145
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       (BZ2_bzlibVersion) (
145,151c145
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       int           BZ2_bzlibVersion) (
146,151c146
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>    ) (
146,151c146
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>    )(
151,152c151
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
---
> void
151,153c151
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
---
> BZ_EXTERN );
151,153c151
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
---
> BZ_EXTERN const ;
151,155c151
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN const char BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
151,155c151
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN const char * BZFILE * BZ_API(BZ2_bzopen) (
151,155c151
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN const char * BZ_API* BZ_API(BZ2_bzopen) (
151,155c151
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN const char * BZ_API(BZ_API(BZ2_bzopen) (
151,155c151
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion(BZ2_bzopen) (
151,155c151
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) BZ2_bzopen) (
(91.0 %, 18364 bytes)
151,154c151
< BZ_EXTERN const ;
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
> BZ_EXTERN const const char *path,
153,154c153
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
> char *path,
153,154c153
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
> BZ_EXTERN *path,
153,154c153
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
> BZ_EXTERN BZFILE path,
153,154c153
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
> BZ_EXTERN BZFILE * ,
153,155c153
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN BZFILE * BZ_APIconst char *mode
153,155c153
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN BZFILE * BZ_API(char *mode
153,155c153
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen*mode
153,155c153
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) mode
154,156c154
<       const char *path,
<       const char *mode
<    );
---
>       );
154,156c154
<       const char *path,
<       const char *mode
<    );
---
>       const ;
154,158c154
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       const char BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
154,158c154
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       const char *BZFILE * BZ_API(BZ2_bzdopen) (
154,158c154
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       const char *path* BZ_API(BZ2_bzdopen) (
155,158c155
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       BZ_API(BZ2_bzdopen) (
155,158c155
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       const (BZ2_bzdopen) (
155,158c155
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       const char BZ2_bzdopen) (
(91.1 %, 18320 bytes)
154,156c154
<       );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       (
154,157c154
<       );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
---
>       )int        fd,
156,157c156
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
---
> fd,
156,157c156
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
---
> BZ_EXTERN ,
156,158c156
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
---
> BZ_EXTERN BZFILE const char *mode
156,158c156
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
---
> BZ_EXTERN BZFILE * char *mode
156,158c156
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
---
> BZ_EXTERN BZFILE * BZ_API*mode
156,158c156
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
---
> BZ_EXTERN BZFILE * BZ_API(mode
156,159c156
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen);
156,159c156
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) ;
157,161c157
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
>       BZ_EXTERN int BZ_API(BZ2_bzread) (
157,161c157
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
>       int        int BZ_API(BZ2_bzread) (
157,161c157
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
>       int        fdBZ_API(BZ2_bzread) (
158,161c158
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
>       (BZ2_bzread) (
158,161c158
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
>       const BZ2_bzread) (
(91.1 %, 18266 bytes)
156,159c156
< BZ_EXTERN BZFILE * BZ_API(mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN BZFILE * BZ_API((
157,160c157
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
---
>    BZFILE* b, 
157,160c157
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
---
>    )* b, 
159,160c159
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
---
> b, 
159,160c159
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
---
> BZ_EXTERN , 
159,161c159
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
---
> BZ_EXTERN int void* buf, 
159,161c159
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
---
> BZ_EXTERN int BZ_API* buf, 
159,161c159
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
---
> BZ_EXTERN int BZ_API(buf, 
159,161c159
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
---
> BZ_EXTERN int BZ_API(BZ2_bzread, 
159,162c159
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
---
> BZ_EXTERN int BZ_API(BZ2_bzread) int len 
160,162c160
<       BZFILE* b, 
<       void* buf, 
<       int len 
---
>       len 
160,163c160
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
---
>       BZFILE);
160,163c160
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
---
>       BZFILE* ;
160,165c160
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>       BZFILE* bBZ_EXTERN int BZ_API(BZ2_bzwrite) (
161,165c161
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>       int BZ_API(BZ2_bzwrite) (
161,165c161
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>       voidBZ_API(BZ2_bzwrite) (
161,165c161
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>       void* (BZ2_bzwrite) (
161,165c161
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>       void* bufBZ2_bzwrite) (
162,165c162
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>       ) (
162,165c162
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>       int (
163,166c163
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
---
>    BZFILE* b, 
163,166c163
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
---
>    )* b, 
165,166c165
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
---
> b, 
165,166c165
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
---
> BZ_EXTERN , 
165,167c165
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int void*   buf, 
165,167c165
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int BZ_API*   buf, 
165,167c165
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int BZ_API(buf, 
165,167c165
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int BZ_API(BZ2_bzwrite, 
165,168c165
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
> BZ_EXTERN int BZ_API(BZ2_bzwrite) int     len 
166,168c166
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       len 
166,169c166
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       BZFILE);
166,169c166
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       BZFILE* ;
166,171c166
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>       BZFILE* bBZ_EXTERN int BZ_API(BZ2_bzflush) (
167,171c167
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>       int BZ_API(BZ2_bzflush) (
167,171c167
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>       voidBZ_API(BZ2_bzflush) (
167,171c167
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>       void*   (BZ2_bzflush) (
167,171c167
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>       void*   bufBZ2_bzflush) (
168,171c168
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>       ) (
168,171c168
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>       int     (
169,172c169
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
---
>    BZFILE* b
169,172c169
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
---
>    )* b
171,172c171
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
---
> b
171,173c171
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
---
> BZ_EXTERN );
171,173c171
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
---
> BZ_EXTERN int ;
171,175c171
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN int BZ_APIBZ_EXTERN void BZ_API(BZ2_bzclose) (
171,175c171
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN int BZ_API(void BZ_API(BZ2_bzclose) (
171,175c171
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN int BZ_API(BZ2_bzflushBZ_API(BZ2_bzclose) (
171,175c171
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN int BZ_API(BZ2_bzflush) (BZ2_bzclose) (
172,175c172
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
>       BZ2_bzclose) (
172,175c172
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
>       BZFILE) (
(91.1 %, 18224 bytes)
171,174c171
< BZ_EXTERN int ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
---
> BZ_EXTERN int * b
173,174c173
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
---
> b
173,175c173
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
---
> BZ_EXTERN );
173,175c173
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
---
> BZ_EXTERN void ;
173,177c173
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> BZ_EXTERN void BZ_APIBZ_EXTERN const char * BZ_API(BZ2_bzerror) (
173,177c173
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> BZ_EXTERN void BZ_API(const char * BZ_API(BZ2_bzerror) (
173,177c173
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> BZ_EXTERN void BZ_API(BZ2_bzclosechar * BZ_API(BZ2_bzerror) (
173,177c173
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> BZ_EXTERN void BZ_API(BZ2_bzclose) * BZ_API(BZ2_bzerror) (
174,177c174
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
>       BZ_API(BZ2_bzerror) (
174,177c174
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
>       BZFILE(BZ2_bzerror) (
(91.1 %, 18182 bytes)
173,175c173
< BZ_EXTERN void ;
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> BZ_EXTERN void (
175,176c175
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
---
> BZFILE *b, 
175,176c175
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
---
> BZ_EXTERN *b, 
175,176c175
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
---
> BZ_EXTERN const b, 
175,176c175
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
---
> BZ_EXTERN const char , 
175,177c175
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
---
> BZ_EXTERN const char * int    *errnum
175,177c175
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
---
> BZ_EXTERN const char * BZ_API*errnum
175,177c175
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
---
> BZ_EXTERN const char * BZ_API(errnum
175,178c175
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
---
> BZ_EXTERN const char * BZ_API(BZ2_bzerror);
175,178c175
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
---
> BZ_EXTERN const char * BZ_API(BZ2_bzerror) ;
176,188c176
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
---
>       #define _BZLIB_PRIVATE_H
176,188c176
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
---
>       BZFILE define _BZLIB_PRIVATE_H
176,188c176
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
---
>       BZFILE *_BZLIB_PRIVATE_H
176,190c176
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       BZFILE *b#include <stdlib.h>
177,190c177
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       include <stdlib.h>
177,190c177
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       int    <stdlib.h>
(91.2 %, 18135 bytes)
175,188c175
< BZ_EXTERN const char * BZ_API(errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> BZ_EXTERN const char * BZ_API(stdlib.h>
176,188c176
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>    .h>
176,188c176
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>    )h>
186,188c186
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> >
186,193c186
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> ##define BZ_VERSION  "1.0.2, 30-Dec-2001"
186,193c186
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define define BZ_VERSION  "1.0.2, 30-Dec-2001"
188,193c188
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> BZ_VERSION  "1.0.2, 30-Dec-2001"
188,193c188
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #"1.0.2, 30-Dec-2001"
188,195c188
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> #include typedef char            Char;
188,195c188
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> #include <char            Char;
188,195c188
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> #include <stdlibChar;
(91.2 %, 18092 bytes)
186,189c186
< #define define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #define char   Bool;
186,189c186
< #define define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #define define Bool;
186,189c186
< #define define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #define define BZ_VERSION  ;
188,189d187
< typedef char            Char;
< typedef unsigned char   Bool;
188,189d187
< typedef char            Char;
< typedef unsigned char   Bool;
188,190c188
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef char            char   UChar;
188,190c188
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef char            CharUChar;
189,190c189
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> ;
189,191c189
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef typedef int             Int32;
189,191c189
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef unsigned int             Int32;
189,191c189
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef unsigned char   Int32;
190,191d189
< typedef unsigned char   UChar;
< typedef int             Int32;
190,191d189
< typedef unsigned char   UChar;
< typedef int             Int32;
190,191d189
< typedef unsigned char   UChar;
< typedef int             Int32;
190,191d189
< typedef unsigned char   UChar;
< typedef int             Int32;
190,192c190
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned char   UInt32;
191,192d190
< typedef int             Int32;
< typedef unsigned int    UInt32;
191,192d190
< typedef int             Int32;
< typedef unsigned int    UInt32;
191,192d190
< typedef int             Int32;
< typedef unsigned int    UInt32;
191,193c191
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef int             Int16;
192,193d191
< typedef unsigned int    UInt32;
< typedef short           Int16;
192,193d191
< typedef unsigned int    UInt32;
< typedef short           Int16;
192,193d191
< typedef unsigned int    UInt32;
< typedef short           Int16;
192,193d191
< typedef unsigned int    UInt32;
< typedef short           Int16;
192,194c192
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef unsigned int    UInt16;
193,194d192
< typedef short           Int16;
< typedef unsigned short  UInt16;
193,195d192
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
193,196c193
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  (1)
---
> typedef define True  (1)
193,196c193
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  (1)
---
> typedef short           True  (1)
193,196c193
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  (1)
---
> typedef short           Int16(1)
194,196c194
< typedef unsigned short  UInt16;
< 
< #define True  (1)
---
> 1)
194,196c194
< typedef unsigned short  UInt16;
< 
< #define True  (1)
---
> typedef )
194,197c194
< typedef unsigned short  UInt16;
< 
< #define True  (1)
< #define False 
---
> typedef unsigned #define False 
194,197c194
< typedef unsigned short  UInt16;
< 
< #define True  (1)
< #define False 
---
> typedef unsigned short  define False 
194,197c194
< typedef unsigned short  UInt16;
< 
< #define True  (1)
< #define False 
---
> typedef unsigned short  UInt16False 
196,198d195
< #define True  (1)
< #define False 
< 
196,198d195
< #define True  (1)
< #define False 
< 
196,198d195
< #define True  (1)
< #define False 
< 
196,201c196
< #define True  (1)
< #define False 
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( void );
---
> #define True  extern void BZ2_bz__AssertH__fail ( void );
196,201c196
< #define True  (1)
< #define False 
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( void );
---
> #define True  (void BZ2_bz__AssertH__fail ( void );
196,201c196
< #define True  (1)
< #define False 
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( void );
---
> #define True  (1BZ2_bz__AssertH__fail ( void );
197,201c197
< #define False 
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( void );
---
> ( void );
197,201c197
< #define False 
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( void );
---
> #void );
197,201c197
< #define False 
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( void );
---
> #define );
199,201c199
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( void );
---
> ;
199,202c199
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( void );
< #define AssertH \
---
> ##define AssertH \
199,202c199
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( void );
< #define AssertH \
---
> #define define AssertH \
(91.2 %, 18028 bytes)
199,203d198
< ;
< #define AssertH \
<    
< #define AssertD \
<    
200,204c200
< #define AssertH \
<    
< #define AssertD \
<    
< #define VPrintf0 \
---
> define VPrintf0 \
200,204c200
< #define AssertH \
<    
< #define AssertD \
<    
< #define VPrintf0 \
---
> #VPrintf0 \
200,204c200
< #define AssertH \
<    
< #define AssertD \
<    
< #define VPrintf0 \
---
> #define \
(91.2 %, 17982 bytes)
199,202c199
< #define VPrintf0 \
<    fprintf
< #define VPrintf1 \
<    fprintf
---
> fprintf
199,203c199
< #define VPrintf0 \
<    fprintf
< #define VPrintf1 \
<    fprintf
< #define VPrintf2 \
---
> ##define VPrintf2 \
199,203c199
< #define VPrintf0 \
<    fprintf
< #define VPrintf1 \
<    fprintf
< #define VPrintf2 \
---
> #define define VPrintf2 \
199,203c199
< #define VPrintf0 \
<    fprintf
< #define VPrintf1 \
<    fprintf
< #define VPrintf2 \
---
> #define VPrintf0 VPrintf2 \
200,203c200
<    fprintf
< #define VPrintf1 \
<    fprintf
< #define VPrintf2 \
---
>    \
(91.3 %, 17929 bytes)
199,203c199
< #define define VPrintf2 \
<    fprintf
< #define VPrintf3 \
<    fprintf
< #define VPrintf4 \
---
> #define #define VPrintf4 \
199,203c199
< #define define VPrintf2 \
<    fprintf
< #define VPrintf3 \
<    fprintf
< #define VPrintf4 \
---
> #define define define VPrintf4 \
199,203c199
< #define define VPrintf2 \
<    fprintf
< #define VPrintf3 \
<    fprintf
< #define VPrintf4 \
---
> #define define VPrintf2 VPrintf4 \
(91.3 %, 17876 bytes)
199,205c199
< #define define define VPrintf4 \
<    fprintf
< #define VPrintf5 \
<    fprintf
< 
< 
< #define BZALLOC 
---
> #define define #define BZALLOC 
199,205c199
< #define define define VPrintf4 \
<    fprintf
< #define VPrintf5 \
<    fprintf
< 
< 
< #define BZALLOC 
---
> #define define define define BZALLOC 
199,205c199
< #define define define VPrintf4 \
<    fprintf
< #define VPrintf5 \
<    fprintf
< 
< 
< #define BZALLOC 
---
> #define define define VPrintf4 BZALLOC 
(91.3 %, 17815 bytes)
199,205c199
< #define define #define BZALLOC 
< #define BZFREE  
< 
< 
< 
< 
< #define BZ_HDR_B 0x42   
---
> #define define 0x42   
199,206c199
< #define define #define BZALLOC 
< #define BZFREE  
< 
< 
< 
< 
< #define BZ_HDR_B 0x42   
< #define BZ_HDR_Z 0x5a   
---
> #define define ##define BZ_HDR_Z 0x5a   
199,206c199
< #define define #define BZALLOC 
< #define BZFREE  
< 
< 
< 
< 
< #define BZ_HDR_B 0x42   
< #define BZ_HDR_Z 0x5a   
---
> #define define #define define BZ_HDR_Z 0x5a   
(91.3 %, 17760 bytes)
199,202c199
< #define define 0x42   
< #define BZ_HDR_Z 0x5a   
< #define BZ_HDR_h 0x68   
< #define BZ_HDR_0 0x30   
---
> #define define #define BZ_HDR_0 0x30   
200,202c200
< #define BZ_HDR_Z 0x5a   
< #define BZ_HDR_h 0x68   
< #define BZ_HDR_0 0x30   
---
> define BZ_HDR_0 0x30   
200,202c200
< #define BZ_HDR_Z 0x5a   
< #define BZ_HDR_h 0x68   
< #define BZ_HDR_0 0x30   
---
> #BZ_HDR_0 0x30   
200,202c200
< #define BZ_HDR_Z 0x5a   
< #define BZ_HDR_h 0x68   
< #define BZ_HDR_0 0x30   
---
> #define 0x30   
200,206c200
< #define BZ_HDR_Z 0x5a   
< #define BZ_HDR_h 0x68   
< #define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
---
> #define BZ_HDR_Z #define BZ_MAX_ALPHA_SIZE 258
201,206c201
< #define BZ_HDR_h 0x68   
< #define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
---
> define BZ_MAX_ALPHA_SIZE 258
201,206c201
< #define BZ_HDR_h 0x68   
< #define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
---
> #BZ_MAX_ALPHA_SIZE 258
201,206c201
< #define BZ_HDR_h 0x68   
< #define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
---
> #define 258
(91.4 %, 17702 bytes)
199,204c199
< #define define #define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
---
> #define define define BZ_MAX_CODE_LEN    23
199,204c199
< #define define #define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
---
> #define define #BZ_MAX_CODE_LEN    23
199,204c199
< #define define #define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
---
> #define define #define 23
199,206c199
< #define define #define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
---
> #define define #define BZ_HDR_0 #define BZ_RUNA 0
203,206c203
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
---
> define BZ_RUNA 0
203,206c203
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
---
> #BZ_RUNA 0
203,206c203
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
---
> #define 0
203,207c203
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
---
> #define BZ_MAX_ALPHA_SIZE #define BZ_RUNB 1
204,207c204
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
---
> define BZ_RUNB 1
204,207c204
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
---
> #BZ_RUNB 1
204,207c204
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
---
> #define 1
204,209c204
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> #define BZ_MAX_CODE_LEN    #define BZ_N_GROUPS 6
206,209c206
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> define BZ_N_GROUPS 6
206,209c206
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> #BZ_N_GROUPS 6
206,209c206
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> #define 6
206,210c206
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define BZ_RUNA #define BZ_G_SIZE   50
207,210c207
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> define BZ_G_SIZE   50
207,210c207
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #BZ_G_SIZE   50
207,210c207
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define 50
207,211c207
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define BZ_RUNB #define BZ_N_ITERS  4
209,211c209
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> define BZ_N_ITERS  4
209,211c209
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #BZ_N_ITERS  4
209,211c209
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define 4
209,213c209
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_N_GROUPS #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
210,213c210
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
210,213c210
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
210,213c210
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define (2 + (900000 / BZ_G_SIZE))
210,213c210
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_G_SIZE   2 + (900000 / BZ_G_SIZE))
211,213c211
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> + (900000 / BZ_G_SIZE))
211,213c211
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #(900000 / BZ_G_SIZE))
211,213c211
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define 900000 / BZ_G_SIZE))
211,213c211
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_N_ITERS  / BZ_G_SIZE))
213c213
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> BZ_G_SIZE))
213c213
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #))
213c213
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define )
213,221c213
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #define BZ_MAX_SELECTORS #define BZ_RAND_DECLS                          \
213,221c213
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #define BZ_MAX_SELECTORS (define BZ_RAND_DECLS                          \
213,221c213
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #define BZ_MAX_SELECTORS (2 BZ_RAND_DECLS                          \
213,221c213
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #define BZ_MAX_SELECTORS (2 + \
213,222c213
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_MAX_SELECTORS (2 + (Int32 rNToGo;                               \
213,222c213
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_MAX_SELECTORS (2 + (900000 rNToGo;                               \
213,222c213
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_MAX_SELECTORS (2 + (900000 / ;                               \
213,222c213
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE\
213,223c213
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE)Int32 rTPos                                 \
221,223c221
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> rTPos                                 \
221,223c221
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #\
221,225c221
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
---
> #define #define BZ_RAND_INIT_MASK                      \
221,225c221
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
---
> #define BZ_RAND_DECLS                          define BZ_RAND_INIT_MASK                      \
222,225c222
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
---
>    BZ_RAND_INIT_MASK                      \
222,225c222
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
---
>    Int32 \
222,226c222
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
>    Int32 rNToGos->rNToGo = 0;                              \
222,226c222
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
>    Int32 rNToGo;                               ->rNToGo = 0;                              \
223,226c223
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
>    rNToGo = 0;                              \
223,226c223
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
>    Int32 = 0;                              \
223,226c223
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
>    Int32 rTPos                                 0;                              \
225,226c225
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> ;                              \
225,226c225
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> #\
225,227c225
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
> #define s->rTPos  = 0                               \
225,227c225
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
> #define BZ_RAND_INIT_MASK                      ->rTPos  = 0                               \
226,227c226
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
>    rTPos  = 0                               \
(91.4 %, 17647 bytes)
225,229c225
< #define BZ_RAND_INIT_MASK                      ->rTPos  = 0                               \
< 
< #define BZ_RAND_MASK 
< 
< #define BZ_RAND_UPD_MASK                       \
---
> #define BZ_RAND_INIT_MASK                      define BZ_RAND_UPD_MASK                       \
225,229c225
< #define BZ_RAND_INIT_MASK                      ->rTPos  = 0                               \
< 
< #define BZ_RAND_MASK 
< 
< #define BZ_RAND_UPD_MASK                       \
---
> #define BZ_RAND_INIT_MASK                      ->BZ_RAND_UPD_MASK                       \
(91.4 %, 17577 bytes)
225,227c225
< #define BZ_RAND_INIT_MASK                      define BZ_RAND_UPD_MASK                       \
<    if                                             \
<    s->rNToGo--;
---
> #define BZ_RAND_INIT_MASK                      ;
225,235c225
< #define BZ_RAND_INIT_MASK                      define BZ_RAND_UPD_MASK                       \
<    if                                             \
<    s->rNToGo--;
< 
< 
< 
< 
< 
< 
< 
< #define BZ_INITIALISE_CRC              \
---
> #define BZ_RAND_INIT_MASK                      define #define BZ_INITIALISE_CRC              \
(91.5 %, 17463 bytes)
225,239c225
< #define BZ_RAND_INIT_MASK                      ;
< 
< 
< 
< 
< 
< 
< 
< #define BZ_INITIALISE_CRC              \
< 
< 
< #define BZ_FINALISE_CRC                \
< 
< 
< #define BZ_UPDATE_CRC              \
---
> #define BZ_RAND_INIT_MASK                      #define BZ_UPDATE_CRC              \
233,239c233
< #define BZ_INITIALISE_CRC              \
< 
< 
< #define BZ_FINALISE_CRC                \
< 
< 
< #define BZ_UPDATE_CRC              \
---
> define BZ_UPDATE_CRC              \
233,239c233
< #define BZ_INITIALISE_CRC              \
< 
< 
< #define BZ_FINALISE_CRC                \
< 
< 
< #define BZ_UPDATE_CRC              \
---
> #BZ_UPDATE_CRC              \
233,239c233
< #define BZ_INITIALISE_CRC              \
< 
< 
< #define BZ_FINALISE_CRC                \
< 
< 
< #define BZ_UPDATE_CRC              \
---
> #define \
233,246c233
< #define BZ_INITIALISE_CRC              \
< 
< 
< #define BZ_FINALISE_CRC                \
< 
< 
< #define BZ_UPDATE_CRC              \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
---
> #define BZ_INITIALISE_CRC              #define BZ_M_IDLE      1
(91.5 %, 17368 bytes)
225,233c225
< #define BZ_RAND_INIT_MASK                      #define BZ_UPDATE_CRC              \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
---
> #define BZ_RAND_INIT_MASK                      define BZ_M_RUNNING   2
225,233c225
< #define BZ_RAND_INIT_MASK                      #define BZ_UPDATE_CRC              \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
---
> #define BZ_RAND_INIT_MASK                      #BZ_M_RUNNING   2
(91.6 %, 17299 bytes)
225,227c225
< #define BZ_RAND_INIT_MASK                      define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
---
> #define BZ_RAND_INIT_MASK                      BZ_M_FINISHING 4
225,227c225
< #define BZ_RAND_INIT_MASK                      define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
---
> #define BZ_RAND_INIT_MASK                      define 4
225,229c225
< #define BZ_RAND_INIT_MASK                      define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
---
> #define BZ_RAND_INIT_MASK                      define BZ_M_RUNNING   #define BZ_S_OUTPUT    1
(91.6 %, 17242 bytes)
225,228c225
< #define BZ_RAND_INIT_MASK                      BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
---
> #define BZ_RAND_INIT_MASK                      2
225,230c225
< #define BZ_RAND_INIT_MASK                      BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
---
> #define BZ_RAND_INIT_MASK                      BZ_M_FINISHING #define BZ_N_RADIX 2
227,230c227
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 2
(91.6 %, 17176 bytes)
225,229c225
< #define BZ_RAND_INIT_MASK                      2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> #define BZ_RAND_INIT_MASK                      #define BZ_N_SHELL 18
227,229c227
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> define BZ_N_SHELL 18
227,229c227
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> #BZ_N_SHELL 18
227,229c227
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> #define 18
227,230c227
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT 
---
> #define BZ_N_RADIX #define BZ_N_OVERSHOOT 
(91.6 %, 17130 bytes)
225,234c225
< #define BZ_RAND_INIT_MASK                      #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT 
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #define BZ_RAND_INIT_MASK                      {
225,236c225
< #define BZ_RAND_INIT_MASK                      #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT 
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define BZ_RAND_INIT_MASK                      #bz_stream* strm;
225,236c225
< #define BZ_RAND_INIT_MASK                      #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT 
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define BZ_RAND_INIT_MASK                      #define * strm;
225,236c225
< #define BZ_RAND_INIT_MASK                      #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT 
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define BZ_RAND_INIT_MASK                      #define BZ_N_SHELL strm;
226,236c226
< #define BZ_N_OVERSHOOT 
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> ;
226,240c226
< #define BZ_N_OVERSHOOT 
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
---
> #Int32    mode;
226,240c226
< #define BZ_N_OVERSHOOT 
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
---
> #define mode;
233,240c233
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
---
> ;
234,241c234
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
---
>    Int32    state;
234,241c234
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
---
>    struct state;
236,241c236
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
---
>       ;
236,244c236
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
---
>       bz_streamUInt32   avail_in_expect;
236,244c236
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
---
>       bz_stream* avail_in_expect;
(91.7 %, 17057 bytes)
236,243c236
<       ;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       *  arr2;
239,243c239
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       arr2;
239,243c239
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       UInt32   ;
239,244c239
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       UInt32   avail_in_expectUInt32*  ftab;
242,244c242
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       *  ftab;
242,244c242
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       UInt32ftab;
242,244c242
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       UInt32*  ;
242,245c242
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
---
>       UInt32*  arr1Int32    origPtr;
243,245c243
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
---
>       origPtr;
243,245c243
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
---
>       UInt32;
(91.7 %, 16992 bytes)
239,244c239
<       UInt32   ;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
---
>       UInt32   *  ptr;
240,244c240
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
---
>       ptr;
240,244c240
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
---
>       UInt32;
(91.7 %, 16925 bytes)
239,241c239
<       UInt32   *  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
---
>       UInt32   mtfv;
239,241c239
<       UInt32   *  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
---
>       UInt32   *  ;
239,242c239
<       UInt32   *  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
---
>       UInt32   *  ptrUChar*   zbits;
240,242c240
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
---
>       *   zbits;
240,242c240
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
---
>       UCharzbits;
240,242c240
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
---
>       UChar*   ;
240,245c240
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
---
>       UChar*   blockInt32    workFactor;
241,245c241
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
---
>       workFactor;
(91.8 %, 16880 bytes)
239,246c239
<       UInt32   mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
---
>       UInt32   UInt32   state_in_ch;
239,246c239
<       UInt32   mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
---
>       UInt32   mtfvstate_in_ch;
240,246c240
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
---
>       ;
(91.8 %, 16798 bytes)
239,245c239
<       UInt32   mtfvstate_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
---
>       UInt32   mtfvstate_in_chInt32    nblockMAX;
240,245c240
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
---
>       nblockMAX;
240,245c240
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
---
>       Int32    ;
240,246c240
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
---
>       Int32    state_in_lenInt32    numZ;
241,246c241
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
---
>       numZ;
242,246d241
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
(91.8 %, 16708 bytes)
241,245d240
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
241,245d240
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
(91.9 %, 16626 bytes)
240,242c240
<       Int32    ;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
---
>       Int32    [256];
241,242c241
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
---
>       256];
241,242c241
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
---
>       Bool     ];
241,242c241
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
---
>       Bool     inUse;
241,245c241
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
---
>       Bool     inUse[UInt32   bsBuff;
241,245c241
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
---
>       Bool     inUse[256bsBuff;
242,245d241
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
(91.9 %, 16589 bytes)
242,248d241
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
244,248d243
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
244,248d243
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
(91.9 %, 16502 bytes)
242,246d241
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
242,246d241
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
(92.0 %, 16416 bytes)
241,246c241
<       Bool     inUse;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Bool     inUse[BZ_MAX_ALPHA_SIZE];
242,246c242
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       BZ_MAX_ALPHA_SIZE];
242,246c242
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    ];
243,246d242
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
(92.0 %, 16329 bytes)
241,242c241
<       Bool     inUse[BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       Bool     inUse;
241,243c241
<       Bool     inUse[BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       Bool     inUse[UChar    selectorMtf[BZ_MAX_SELECTORS];
241,243c241
<       Bool     inUse[BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       Bool     inUse[BZ_MAX_ALPHA_SIZEselectorMtf[BZ_MAX_SELECTORS];
241,243c241
<       Bool     inUse[BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       Bool     inUse[BZ_MAX_ALPHA_SIZE][BZ_MAX_SELECTORS];
(92.1 %, 16264 bytes)
241,244c241
<       Bool     inUse;
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Bool     inUse[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
242,244c242
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
242,244c242
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    ][BZ_MAX_ALPHA_SIZE];
242,244c242
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    selectorMtf[BZ_MAX_ALPHA_SIZE];
(92.1 %, 16192 bytes)
242d241
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
242d241
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
242d241
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(92.1 %, 16135 bytes)
242d241
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
242d241
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
242d241
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(92.2 %, 16078 bytes)
241,243c241
<       Bool     inUse[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>       Bool     inUse[BZ_MAX_ALPHA_SIZE][4];
241,243c241
<       Bool     inUse[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>       Bool     inUse[BZ_MAX_ALPHA_SIZE][4];
241,243c241
<       Bool     inUse[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>       Bool     inUse[BZ_N_GROUPS][4];
(92.2 %, 16014 bytes)
241,244c241
<       Bool     inUse[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
---
>       Bool     inUse;
241,252c241
<       Bool     inUse[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
---
>       Bool     inUse[;
241,254c241
<       Bool     inUse[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
---
>       Bool     inUse[BZ_MAX_ALPHA_SIZE;
241,264c241
<       Bool     inUse[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
---
>       Bool     inUse[BZ_MAX_ALPHA_SIZE]#define BZ_X_IDLE        1
241,264c241
<       Bool     inUse[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
---
>       Bool     inUse[BZ_MAX_ALPHA_SIZE][define BZ_X_IDLE        1
241,264c241
<       Bool     inUse[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
---
>       Bool     inUse[BZ_MAX_ALPHA_SIZE][4BZ_X_IDLE        1
241,264c241
<       Bool     inUse[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
---
>       Bool     inUse[BZ_MAX_ALPHA_SIZE][4]1
243,265c243
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
---
>    #define BZ_X_OUTPUT      2
244,265c244
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
---
>    define BZ_X_OUTPUT      2
244,265c244
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
---
>    EStateBZ_X_OUTPUT      2
252,265c252
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
---
> 2
254,266d253
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
264,267c264
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
---
> define BZ_X_MAGIC_1     10
264,267c264
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
---
> #BZ_X_MAGIC_1     10
264,267c264
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
---
> #define 10
264,268c264
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
---
> #define BZ_X_IDLE        #define BZ_X_MAGIC_2     11
(92.2 %, 15948 bytes)
254,256c254
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
---
> define BZ_X_MAGIC_3     12
254,256c254
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
---
> #BZ_X_MAGIC_3     12
254,256c254
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
---
> #define 12
254,257c254
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
---
> #define BZ_X_MAGIC_1     #define BZ_X_MAGIC_4     13
255,257c255
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
---
> define BZ_X_MAGIC_4     13
255,257c255
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
---
> #BZ_X_MAGIC_4     13
255,257c255
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
---
> #define 13
255,258c255
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
---
> #define BZ_X_MAGIC_2     #define BZ_X_BLKHDR_1    14
(92.2 %, 15889 bytes)
254,256c254
< #define BZ_X_MAGIC_1     #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
< #define BZ_X_BLKHDR_2    15
---
> #define BZ_X_MAGIC_1     define BZ_X_BLKHDR_2    15
254,256c254
< #define BZ_X_MAGIC_1     #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
< #define BZ_X_BLKHDR_2    15
---
> #define BZ_X_MAGIC_1     #BZ_X_BLKHDR_2    15
(92.3 %, 15832 bytes)
254,256c254
< #define BZ_X_MAGIC_1     define BZ_X_BLKHDR_2    15
< #define BZ_X_BLKHDR_3    16
< #define BZ_X_BLKHDR_4    17
---
> #define BZ_X_MAGIC_1     BZ_X_BLKHDR_4    17
254,256c254
< #define BZ_X_MAGIC_1     define BZ_X_BLKHDR_2    15
< #define BZ_X_BLKHDR_3    16
< #define BZ_X_BLKHDR_4    17
---
> #define BZ_X_MAGIC_1     define 17
254,257c254
< #define BZ_X_MAGIC_1     define BZ_X_BLKHDR_2    15
< #define BZ_X_BLKHDR_3    16
< #define BZ_X_BLKHDR_4    17
< #define BZ_X_BLKHDR_5    18
---
> #define BZ_X_MAGIC_1     define BZ_X_BLKHDR_2    #define BZ_X_BLKHDR_5    18
(92.3 %, 15769 bytes)
254,256c254
< #define BZ_X_MAGIC_1     BZ_X_BLKHDR_4    17
< #define BZ_X_BLKHDR_5    18
< #define BZ_X_BLKHDR_6    19
---
> #define BZ_X_MAGIC_1     19
254,257c254
< #define BZ_X_MAGIC_1     BZ_X_BLKHDR_4    17
< #define BZ_X_BLKHDR_5    18
< #define BZ_X_BLKHDR_6    19
< #define BZ_X_BCRC_1      20
---
> #define BZ_X_MAGIC_1     BZ_X_BLKHDR_4    #define BZ_X_BCRC_1      20
(92.3 %, 15696 bytes)
254,257c254
< #define BZ_X_MAGIC_1     19
< #define BZ_X_BCRC_1      20
< #define BZ_X_BCRC_2      21
< #define BZ_X_BCRC_3      22
---
> #define BZ_X_MAGIC_1     #define BZ_X_BCRC_3      22
255,257c255
< #define BZ_X_BCRC_1      20
< #define BZ_X_BCRC_2      21
< #define BZ_X_BCRC_3      22
---
> define BZ_X_BCRC_3      22
255,257c255
< #define BZ_X_BCRC_1      20
< #define BZ_X_BCRC_2      21
< #define BZ_X_BCRC_3      22
---
> #BZ_X_BCRC_3      22
255,257c255
< #define BZ_X_BCRC_1      20
< #define BZ_X_BCRC_2      21
< #define BZ_X_BCRC_3      22
---
> #define 22
255,258c255
< #define BZ_X_BCRC_1      20
< #define BZ_X_BCRC_2      21
< #define BZ_X_BCRC_3      22
< #define BZ_X_BCRC_4      23
---
> #define BZ_X_BCRC_1      #define BZ_X_BCRC_4      23
(92.4 %, 15637 bytes)
254,256c254
< #define BZ_X_MAGIC_1     #define BZ_X_BCRC_3      22
< #define BZ_X_BCRC_4      23
< #define BZ_X_RANDBIT     24
---
> #define BZ_X_MAGIC_1     define BZ_X_RANDBIT     24
254,256c254
< #define BZ_X_MAGIC_1     #define BZ_X_BCRC_3      22
< #define BZ_X_BCRC_4      23
< #define BZ_X_RANDBIT     24
---
> #define BZ_X_MAGIC_1     #BZ_X_RANDBIT     24
254,256c254
< #define BZ_X_MAGIC_1     #define BZ_X_BCRC_3      22
< #define BZ_X_BCRC_4      23
< #define BZ_X_RANDBIT     24
---
> #define BZ_X_MAGIC_1     #define 24
(92.4 %, 15580 bytes)
254,256c254
< #define BZ_X_MAGIC_1     define BZ_X_RANDBIT     24
< #define BZ_X_ORIGPTR_1   25
< #define BZ_X_ORIGPTR_2   26
---
> #define BZ_X_MAGIC_1     BZ_X_ORIGPTR_2   26
254,256c254
< #define BZ_X_MAGIC_1     define BZ_X_RANDBIT     24
< #define BZ_X_ORIGPTR_1   25
< #define BZ_X_ORIGPTR_2   26
---
> #define BZ_X_MAGIC_1     define 26
(92.4 %, 15517 bytes)
254,256c254
< #define BZ_X_MAGIC_1     BZ_X_ORIGPTR_2   26
< #define BZ_X_ORIGPTR_3   27
< #define BZ_X_MAPPING_1   28
---
> #define BZ_X_MAGIC_1     28
254,257c254
< #define BZ_X_MAGIC_1     BZ_X_ORIGPTR_2   26
< #define BZ_X_ORIGPTR_3   27
< #define BZ_X_MAPPING_1   28
< #define BZ_X_MAPPING_2   29
---
> #define BZ_X_MAGIC_1     BZ_X_ORIGPTR_2   #define BZ_X_MAPPING_2   29
(92.5 %, 15444 bytes)
254,257c254
< #define BZ_X_MAGIC_1     28
< #define BZ_X_MAPPING_2   29
< #define BZ_X_SELECTOR_1  30
< #define BZ_X_SELECTOR_2  31
---
> #define BZ_X_MAGIC_1     #define BZ_X_SELECTOR_2  31
255,257c255
< #define BZ_X_MAPPING_2   29
< #define BZ_X_SELECTOR_1  30
< #define BZ_X_SELECTOR_2  31
---
> define BZ_X_SELECTOR_2  31
255,257c255
< #define BZ_X_MAPPING_2   29
< #define BZ_X_SELECTOR_1  30
< #define BZ_X_SELECTOR_2  31
---
> #BZ_X_SELECTOR_2  31
255,257c255
< #define BZ_X_MAPPING_2   29
< #define BZ_X_SELECTOR_1  30
< #define BZ_X_SELECTOR_2  31
---
> #define 31
255,258c255
< #define BZ_X_MAPPING_2   29
< #define BZ_X_SELECTOR_1  30
< #define BZ_X_SELECTOR_2  31
< #define BZ_X_SELECTOR_3  32
---
> #define BZ_X_MAPPING_2   #define BZ_X_SELECTOR_3  32
(92.5 %, 15385 bytes)
254,256c254
< #define BZ_X_MAGIC_1     #define BZ_X_SELECTOR_2  31
< #define BZ_X_SELECTOR_3  32
< #define BZ_X_CODING_1    33
---
> #define BZ_X_MAGIC_1     define BZ_X_CODING_1    33
254,256c254
< #define BZ_X_MAGIC_1     #define BZ_X_SELECTOR_2  31
< #define BZ_X_SELECTOR_3  32
< #define BZ_X_CODING_1    33
---
> #define BZ_X_MAGIC_1     #BZ_X_CODING_1    33
(92.5 %, 15328 bytes)
254,256c254
< #define BZ_X_MAGIC_1     define BZ_X_CODING_1    33
< #define BZ_X_CODING_2    34
< #define BZ_X_CODING_3    35
---
> #define BZ_X_MAGIC_1     BZ_X_CODING_3    35
254,256c254
< #define BZ_X_MAGIC_1     define BZ_X_CODING_1    33
< #define BZ_X_CODING_2    34
< #define BZ_X_CODING_3    35
---
> #define BZ_X_MAGIC_1     define 35
(92.6 %, 15265 bytes)
254,256c254
< #define BZ_X_MAGIC_1     BZ_X_CODING_3    35
< #define BZ_X_MTF_1       36
< #define BZ_X_MTF_2       37
---
> #define BZ_X_MAGIC_1     37
254,257c254
< #define BZ_X_MAGIC_1     BZ_X_CODING_3    35
< #define BZ_X_MTF_1       36
< #define BZ_X_MTF_2       37
< #define BZ_X_MTF_3       38
---
> #define BZ_X_MAGIC_1     BZ_X_CODING_3    #define BZ_X_MTF_3       38
(92.6 %, 15192 bytes)
254,257c254
< #define BZ_X_MAGIC_1     37
< #define BZ_X_MTF_3       38
< #define BZ_X_MTF_4       39
< #define BZ_X_MTF_5       40
---
> #define BZ_X_MAGIC_1     #define BZ_X_MTF_5       40
255,257c255
< #define BZ_X_MTF_3       38
< #define BZ_X_MTF_4       39
< #define BZ_X_MTF_5       40
---
> define BZ_X_MTF_5       40
255,257c255
< #define BZ_X_MTF_3       38
< #define BZ_X_MTF_4       39
< #define BZ_X_MTF_5       40
---
> #BZ_X_MTF_5       40
255,257c255
< #define BZ_X_MTF_3       38
< #define BZ_X_MTF_4       39
< #define BZ_X_MTF_5       40
---
> #define 40
255,258c255
< #define BZ_X_MTF_3       38
< #define BZ_X_MTF_4       39
< #define BZ_X_MTF_5       40
< #define BZ_X_MTF_6       41
---
> #define BZ_X_MTF_3       #define BZ_X_MTF_6       41
(92.6 %, 15133 bytes)
254,256c254
< #define BZ_X_MAGIC_1     #define BZ_X_MTF_5       40
< #define BZ_X_MTF_6       41
< #define BZ_X_ENDHDR_2    42
---
> #define BZ_X_MAGIC_1     define BZ_X_ENDHDR_2    42
254,256c254
< #define BZ_X_MAGIC_1     #define BZ_X_MTF_5       40
< #define BZ_X_MTF_6       41
< #define BZ_X_ENDHDR_2    42
---
> #define BZ_X_MAGIC_1     #BZ_X_ENDHDR_2    42
254,256c254
< #define BZ_X_MAGIC_1     #define BZ_X_MTF_5       40
< #define BZ_X_MTF_6       41
< #define BZ_X_ENDHDR_2    42
---
> #define BZ_X_MAGIC_1     #define 42
(92.6 %, 15076 bytes)
254,256c254
< #define BZ_X_MAGIC_1     define BZ_X_ENDHDR_2    42
< #define BZ_X_ENDHDR_3    43
< #define BZ_X_ENDHDR_4    44
---
> #define BZ_X_MAGIC_1     BZ_X_ENDHDR_4    44
254,256c254
< #define BZ_X_MAGIC_1     define BZ_X_ENDHDR_2    42
< #define BZ_X_ENDHDR_3    43
< #define BZ_X_ENDHDR_4    44
---
> #define BZ_X_MAGIC_1     define 44
(92.7 %, 15013 bytes)
254,256c254
< #define BZ_X_MAGIC_1     BZ_X_ENDHDR_4    44
< #define BZ_X_ENDHDR_5    45
< #define BZ_X_ENDHDR_6    46
---
> #define BZ_X_MAGIC_1     46
254,257c254
< #define BZ_X_MAGIC_1     BZ_X_ENDHDR_4    44
< #define BZ_X_ENDHDR_5    45
< #define BZ_X_ENDHDR_6    46
< #define BZ_X_CCRC_1      47
---
> #define BZ_X_MAGIC_1     BZ_X_ENDHDR_4    #define BZ_X_CCRC_1      47
(92.7 %, 14940 bytes)
254,257c254
< #define BZ_X_MAGIC_1     46
< #define BZ_X_CCRC_1      47
< #define BZ_X_CCRC_2      48
< #define BZ_X_CCRC_3      49
---
> #define BZ_X_MAGIC_1     #define BZ_X_CCRC_3      49
255,257c255
< #define BZ_X_CCRC_1      47
< #define BZ_X_CCRC_2      48
< #define BZ_X_CCRC_3      49
---
> define BZ_X_CCRC_3      49
255,257c255
< #define BZ_X_CCRC_1      47
< #define BZ_X_CCRC_2      48
< #define BZ_X_CCRC_3      49
---
> #BZ_X_CCRC_3      49
255,257c255
< #define BZ_X_CCRC_1      47
< #define BZ_X_CCRC_2      48
< #define BZ_X_CCRC_3      49
---
> #define 49
255,258c255
< #define BZ_X_CCRC_1      47
< #define BZ_X_CCRC_2      48
< #define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
---
> #define BZ_X_CCRC_1      #define BZ_X_CCRC_4      50
(92.7 %, 14881 bytes)
254,261c254
< #define BZ_X_MAGIC_1     #define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
---
> #define BZ_X_MAGIC_1     define MTFA_SIZE 4096
254,261c254
< #define BZ_X_MAGIC_1     #define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
---
> #define BZ_X_MAGIC_1     #MTFA_SIZE 4096
254,261c254
< #define BZ_X_MAGIC_1     #define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
---
> #define BZ_X_MAGIC_1     #define 4096
254,262c254
< #define BZ_X_MAGIC_1     #define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> #define BZ_X_MAGIC_1     #define BZ_X_CCRC_3      #define MTFL_SIZE 16
255,262c255
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> define MTFL_SIZE 16
255,262c255
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> #MTFL_SIZE 16
255,262c255
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> #define 16
255,268c255
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
---
> #define BZ_X_CCRC_4      typedef
261,269c261
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> struct {
261,269c261
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #{
261,271c261
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define bz_stream* strm;
261,271c261
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define MTFA_SIZE * strm;
262,271c262
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> strm;
262,271c262
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #;
262,274c262
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
---
> #define Int32    state;
262,274c262
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
---
> #define MTFL_SIZE state;
268,274c268
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
---
> ;
269,277c269
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
---
>    UChar    state_out_ch;
269,277c269
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
---
>    struct state_out_ch;
271,277c271
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
---
>       ;
271,278c271
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
---
>       bz_streamInt32    state_out_len;
271,278c271
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
---
>       bz_stream* state_out_len;
(92.8 %, 14799 bytes)
271,276d270
<       ;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
272,277c272
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
---
>       bsBuff;
272,277c272
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
---
>       Int32    ;
(92.8 %, 14700 bytes)
271,275d270
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
271,276c271
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
---
>       UInt32   smallDecompress;
272,276d271
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
(92.9 %, 14616 bytes)
271,275d270
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
271,276c271
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
---
>       Bool     origPtr;
(92.9 %, 14522 bytes)
271,273d270
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
271,273d270
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
271,274c271
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
---
>       Int32    origPtr[256];
(92.9 %, 14458 bytes)
271,272d270
<       Int32    unzftab[256];
<       Int32    nblock_used;
271,272d270
<       Int32    unzftab[256];
<       Int32    nblock_used;
(93.0 %, 14401 bytes)
271,272c271
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
---
>       257];
271,272c271
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
---
>       Int32    ];
271,272c271
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
---
>       Int32    cftab;
271,275c271
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
---
>       Int32    cftab[UInt32   *tt;
271,275c271
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
---
>       Int32    cftab[257*tt;
271,275c271
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
---
>       Int32    cftab[257]tt;
272,275c272
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
---
>       ;
(93.0 %, 14365 bytes)
271,278c271
<       Int32    cftab;
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
---
>       Int32    cftabUChar    *ll4;
274,278c274
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
---
>       *ll4;
274,278c274
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
---
>       UInt32   ll4;
274,278c274
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
---
>       UInt32   *;
274,281c274
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
---
>       UInt32   *ttUInt32   storedBlockCRC;
277,281c277
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
---
>       storedBlockCRC;
277,281c277
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
---
>       UInt16   ;
(93.0 %, 14314 bytes)
274,278d273
<       UInt32   ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
275,279d274
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
(93.1 %, 14221 bytes)
274,279c274
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
---
>       UInt32   inUse[256];
274,279c274
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
---
>       UInt32   calculatedBlockCRC[256];
275,279c275
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
---
>       256];
(93.1 %, 14117 bytes)
274,275c274
<       UInt32   inUse[256];
<       Bool     inUse16[16];
---
>       UInt32   ];
274,275c274
<       UInt32   inUse[256];
<       Bool     inUse16[16];
---
>       UInt32   inUse;
274,276c274
<       UInt32   inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
---
>       UInt32   inUse[UChar    seqToUnseq[256];
274,276c274
<       UInt32   inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
---
>       UInt32   inUse[256seqToUnseq[256];
274,276c274
<       UInt32   inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
---
>       UInt32   inUse[256][256];
(93.1 %, 14084 bytes)
274,278c274
<       UInt32   inUse;
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
>       UInt32   inUse[MTFA_SIZE];
275,278c275
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
>       MTFA_SIZE];
275,278c275
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
>       UChar    ];
275,278c275
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
>       UChar    seqToUnseq;
(93.2 %, 14020 bytes)
274,275c274
<       UInt32   inUse[MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       UInt32   inUseMTFL_SIZE];
274,275c274
<       UInt32   inUse[MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       UInt32   inUse[];
274,275c274
<       UInt32   inUse[MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       UInt32   inUse[MTFA_SIZE;
274,276c274
<       UInt32   inUse[MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       UInt32   inUse[MTFA_SIZE]UChar    selector   [BZ_MAX_SELECTORS];
275,276c275
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       selector   [BZ_MAX_SELECTORS];
275,276c275
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       Int32    [BZ_MAX_SELECTORS];
275,276c275
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfbaseBZ_MAX_SELECTORS];
275,276c275
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[];
275,276c275
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[256 ;
275,277c275
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[256 / UChar    selectorMtf[BZ_MAX_SELECTORS];
275,277c275
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[256 / MTFL_SIZEselectorMtf[BZ_MAX_SELECTORS];
275,277c275
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[256 / MTFL_SIZE][BZ_MAX_SELECTORS];
276,277c276
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       BZ_MAX_SELECTORS];
276,277c276
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       UChar    ];
276,277c276
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       UChar    selector   ;
(93.2 %, 13946 bytes)
275,276c275
<       Int32    mtfbase[256 / MTFL_SIZE][BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfbase[256 / MTFL_SIZE][BZ_MAX_ALPHA_SIZE];
275,276c275
<       Int32    mtfbase[256 / MTFL_SIZE][BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfbase[256 / MTFL_SIZE][BZ_MAX_ALPHA_SIZE];
276d275
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(93.2 %, 13893 bytes)
276,277d275
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
276,277d275
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
276,277d275
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(93.2 %, 13836 bytes)
276d275
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
276d275
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(93.3 %, 13780 bytes)
276d275
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
276d275
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(93.3 %, 13724 bytes)
275,276c275
<       Int32    mtfbase[256 / MTFL_SIZE][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
---
>       Int32    mtfbase[256 / MTFL_SIZE];
275,279c275
<       Int32    mtfbase[256 / MTFL_SIZE][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
---
>       Int32    mtfbase[256 / MTFL_SIZE][Int32    save_i;
275,279c275
<       Int32    mtfbase[256 / MTFL_SIZE][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
---
>       Int32    mtfbase[256 / MTFL_SIZE][BZ_MAX_ALPHA_SIZEsave_i;
276,279d275
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
(93.3 %, 13668 bytes)
276,280d275
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
278,280d277
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
(93.4 %, 13591 bytes)
276,278d275
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
276,278d275
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
276,278d275
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
(93.4 %, 13499 bytes)
276,278d275
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
276,278d275
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
(93.5 %, 13415 bytes)
276,278d275
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
276,278d275
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
276,278d275
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
(93.5 %, 13327 bytes)
276,278d275
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
276,278d275
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
276,278d275
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
(93.5 %, 13254 bytes)
276,278d275
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
276,278d275
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
276,278d275
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
(93.6 %, 13179 bytes)
276,278d275
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
276,278d275
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
(93.6 %, 13100 bytes)
275,278c275
<       Int32    mtfbase[256 / MTFL_SIZE];
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
---
>       Int32    mtfbase[256 / MTFL_SIZE]Int32*   save_gPerm;
276,278c276
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
---
>       *   save_gPerm;
276,278c276
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
---
>       Int32save_gPerm;
276,278c276
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
---
>       Int32*   ;
276,280c276
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
---
>       Int32*   save_gLimit}
277,281c277
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
---
>       DState;
277,281c277
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
---
>       Int32;
277,287c277
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST                     \
---
>       Int32*   #define BZ_GET_FAST                     \
277,287c277
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST                     \
---
>       Int32*   save_gBasedefine BZ_GET_FAST                     \
278,287c278
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST                     \
---
>       BZ_GET_FAST                     \
278,287c278
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST                     \
---
>       Int32\
278,288c278
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>       Int32*   s->tPos = s->tt[s->tPos];                 \
(93.6 %, 13040 bytes)
276,284c276
<       Int32*   save_gLimit}
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>       Int32*   save_gLimittPos = s->tt[s->tPos];                 \
277,284c277
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>    = s->tt[s->tPos];                 \
277,284c277
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>    DStates->tt[s->tPos];                 \
283,284c283
< #define BZ_GET_FAST                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> ->tt[s->tPos];                 \
283,284c283
< #define BZ_GET_FAST                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #tt[s->tPos];                 \
283,284c283
< #define BZ_GET_FAST                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #define [s->tPos];                 \
283,284c283
< #define BZ_GET_FAST                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #define BZ_GET_FAST                     s->tPos];                 \
284c284
<     s->tPos = s->tt[s->tPos];                 \
---
>     ->tPos];                 \
284c284
<     s->tPos = s->tt[s->tPos];                 \
---
>     stPos];                 \
(93.6 %, 13018 bytes)
283,284c283
< #define BZ_GET_FAST                     s->tPos];                 \
<     cccc = ;           \
---
> #define BZ_GET_FAST                     \
283,285c283
< #define BZ_GET_FAST                     s->tPos];                 \
<     cccc = ;           \
<     s->tPos >>= 8;
---
> #define BZ_GET_FAST                     ss->tPos >>= 8;
283,285c283
< #define BZ_GET_FAST                     s->tPos];                 \
<     cccc = ;           \
<     s->tPos >>= 8;
---
> #define BZ_GET_FAST                     s->->tPos >>= 8;
(93.7 %, 12967 bytes)
283,286c283
< #define BZ_GET_FAST                     \
<     s->tPos >>= 8;
< 
< #define BZ_GET_FAST_C                   \
---
> #define BZ_GET_FAST                     BZ_GET_FAST_C                   \
284,286c284
<     s->tPos >>= 8;
< 
< #define BZ_GET_FAST_C                   \
---
>     \
(93.7 %, 12937 bytes)
283,284c283
< #define BZ_GET_FAST                     BZ_GET_FAST_C                   \
<     c_tPos = c_tt[c_tPos];                    \
---
> #define BZ_GET_FAST                     \
283,285c283
< #define BZ_GET_FAST                     BZ_GET_FAST_C                   \
<     c_tPos = c_tt[c_tPos];                    \
<     cccc = ;            \
---
> #define BZ_GET_FAST                     BZ_GET_FAST_C                   cccc = ;            \
284,285c284
<     c_tPos = c_tt[c_tPos];                    \
<     cccc = ;            \
---
>     = ;            \
(93.7 %, 12857 bytes)
283,287c283
< #define BZ_GET_FAST                     \
<     cccc = ;            \
<     c_tPos >>= 8;
< 
< #define SET_LL4                                          \
---
> #define BZ_GET_FAST                     #define SET_LL4                                          \
284,287c284
<     cccc = ;            \
<     c_tPos >>= 8;
< 
< #define SET_LL4                                          \
---
>     define SET_LL4                                          \
284,287c284
<     cccc = ;            \
<     c_tPos >>= 8;
< 
< #define SET_LL4                                          \
---
>     cccc SET_LL4                                          \
(93.7 %, 12810 bytes)
283,289c283
< #define BZ_GET_FAST                     #define SET_LL4                                          \
<    
< 
< #define GET_LL4                             \
<    
< 
< #define SET_LL                          \
---
> #define BZ_GET_FAST                     define SET_LL                          \
283,289c283
< #define BZ_GET_FAST                     #define SET_LL4                                          \
<    
< 
< #define GET_LL4                             \
<    
< 
< #define SET_LL                          \
---
> #define BZ_GET_FAST                     #SET_LL                          \
283,289c283
< #define BZ_GET_FAST                     #define SET_LL4                                          \
<    
< 
< #define GET_LL4                             \
<    
< 
< #define SET_LL                          \
---
> #define BZ_GET_FAST                     #define \
(93.8 %, 12694 bytes)
283,289c283
< #define BZ_GET_FAST                     define SET_LL                          \
<    
< 
< #define GET_LL \
<    
< 
< #define BZ_GET_SMALL                            \
---
> #define BZ_GET_FAST                     BZ_GET_SMALL                            \
283,289c283
< #define BZ_GET_FAST                     define SET_LL                          \
<    
< 
< #define GET_LL \
<    
< 
< #define BZ_GET_SMALL                            \
---
> #define BZ_GET_FAST                     define \
283,290c283
< #define BZ_GET_FAST                     define SET_LL                          \
<    
< 
< #define GET_LL \
<    
< 
< #define BZ_GET_SMALL                            \
<       cccc = BZ2_indexIntoF ;    \
---
> #define BZ_GET_FAST                     define SET_LL                          cccc = BZ2_indexIntoF ;    \
(93.8 %, 12618 bytes)
283,285c283
< #define BZ_GET_FAST                     BZ_GET_SMALL                            \
<       cccc = BZ2_indexIntoF ;    \
<       s->tPos = GET_LL;
---
> #define BZ_GET_FAST                     tPos = GET_LL;
283,285c283
< #define BZ_GET_FAST                     BZ_GET_SMALL                            \
<       cccc = BZ2_indexIntoF ;    \
<       s->tPos = GET_LL;
---
> #define BZ_GET_FAST                     BZ_GET_SMALL                            = GET_LL;
(93.9 %, 12532 bytes)
283,291c283
< #define BZ_GET_FAST                     tPos = GET_LL;
< 
< 
< 
< 
< 
< 
< extern Int32 
< BZ2_decompress ( DState* );
---
> #define BZ_GET_FAST                     * );
283,291c283
< #define BZ_GET_FAST                     tPos = GET_LL;
< 
< 
< 
< 
< 
< 
< extern Int32 
< BZ2_decompress ( DState* );
---
> #define BZ_GET_FAST                     tPos );
283,291c283
< #define BZ_GET_FAST                     tPos = GET_LL;
< 
< 
< 
< 
< 
< 
< extern Int32 
< BZ2_decompress ( DState* );
---
> #define BZ_GET_FAST                     tPos = ;
(93.9 %, 12474 bytes)
283,315c283
< #define BZ_GET_FAST                     * );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define fswap \
<    
< 
< #define fvswap       \
---
> #define BZ_GET_FAST                     fvswap       \
283,315c283
< #define BZ_GET_FAST                     * );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define fswap \
<    
< 
< #define fvswap       \
---
> #define BZ_GET_FAST                     * \
(93.9 %, 12412 bytes)
283,289c283
< #define BZ_GET_FAST                     fvswap       \
< 
< 
< 
< #define fmin  ?  : 
< 
< #define fpush 
---
> #define BZ_GET_FAST                     fpush 
283,291c283
< #define BZ_GET_FAST                     fvswap       \
< 
< 
< 
< #define fmin  ?  : 
< 
< #define fpush 
< 
< #define fpop 
---
> #define BZ_GET_FAST                     fvswap       #define fpop 
(94.0 %, 12365 bytes)
283,288c283
< #define BZ_GET_FAST                     fpush 
< 
< #define fpop 
< 
< #define FALLBACK_QSORT_SMALL_THRESH 10
< #define FALLBACK_QSORT_STACK_SIZE   100
---
> #define BZ_GET_FAST                     define FALLBACK_QSORT_STACK_SIZE   100
285,288c285
< #define fpop 
< 
< #define FALLBACK_QSORT_SMALL_THRESH 10
< #define FALLBACK_QSORT_STACK_SIZE   100
---
> FALLBACK_QSORT_STACK_SIZE   100
285,288c285
< #define fpop 
< 
< #define FALLBACK_QSORT_SMALL_THRESH 10
< #define FALLBACK_QSORT_STACK_SIZE   100
---
> #100
(94.0 %, 12302 bytes)
283,290c283
< #define BZ_GET_FAST                     define FALLBACK_QSORT_STACK_SIZE   100
< 
< 
< 
< 
< #undef fmin
< #undef fpush
< #undef fpop
---
> #define BZ_GET_FAST                     #undef fpop
283,290c283
< #define BZ_GET_FAST                     define FALLBACK_QSORT_STACK_SIZE   100
< 
< 
< 
< 
< #undef fmin
< #undef fpush
< #undef fpop
---
> #define BZ_GET_FAST                     define undef fpop
(94.0 %, 12234 bytes)
283,286c283
< #define BZ_GET_FAST                     #undef fpop
< #undef fswap
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
---
> #define BZ_GET_FAST                     #undef FALLBACK_QSORT_SMALL_THRESH
283,286c283
< #define BZ_GET_FAST                     #undef fpop
< #undef fswap
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
---
> #define BZ_GET_FAST                     #undef FALLBACK_QSORT_SMALL_THRESH
283,286c283
< #define BZ_GET_FAST                     #undef fpop
< #undef fswap
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
---
> #define BZ_GET_FAST                     #undef FALLBACK_QSORT_SMALL_THRESH
(94.0 %, 12195 bytes)
283,290c283
< #define BZ_GET_FAST                     #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define       SET_BH  bhtab[ >> 5] |= 
---
> #define BZ_GET_FAST                     bhtab[ >> 5] |= 
283,290c283
< #define BZ_GET_FAST                     #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define       SET_BH  bhtab[ >> 5] |= 
---
> #define BZ_GET_FAST                     #[ >> 5] |= 
(94.1 %, 12100 bytes)
283,284c283
< #define BZ_GET_FAST                     bhtab[ >> 5] |= 
< #define     CLEAR_BH  bhtab[ >> 5] &= ~
---
> #define BZ_GET_FAST                     bhtab[ >> 5] &= ~
283,284c283
< #define BZ_GET_FAST                     bhtab[ >> 5] |= 
< #define     CLEAR_BH  bhtab[ >> 5] &= ~
---
> #define BZ_GET_FAST                     bhtab[ >> 5] &= ~
(94.1 %, 12061 bytes)
283,284c283
< #define BZ_GET_FAST                     bhtab[ >> 5] &= ~
< #define     ISSET_BH  
---
> #define BZ_GET_FAST                     ISSET_BH  
283,285c283
< #define BZ_GET_FAST                     bhtab[ >> 5] &= ~
< #define     ISSET_BH  
< #define      WORD_BH  bhtab[ >> 5]
---
> #define BZ_GET_FAST                     bhtab#define      WORD_BH  bhtab[ >> 5]
283,285c283
< #define BZ_GET_FAST                     bhtab[ >> 5] &= ~
< #define     ISSET_BH  
< #define      WORD_BH  bhtab[ >> 5]
---
> #define BZ_GET_FAST                     bhtab[ define      WORD_BH  bhtab[ >> 5]
(94.1 %, 12031 bytes)
283,285c283
< #define BZ_GET_FAST                     ISSET_BH  
< #define      WORD_BH  bhtab[ >> 5]
< #define UNALIGNED_BH  
---
> #define BZ_GET_FAST                     #define UNALIGNED_BH  
284,285c284
< #define      WORD_BH  bhtab[ >> 5]
< #define UNALIGNED_BH  
---
> define UNALIGNED_BH  
284,285c284
< #define      WORD_BH  bhtab[ >> 5]
< #define UNALIGNED_BH  
---
> #UNALIGNED_BH  
284,289c284
< #define      WORD_BH  bhtab[ >> 5]
< #define UNALIGNED_BH  
< 
< 
< 
< #undef       SET_BH
---
> #define      #undef       SET_BH
284,289c284
< #define      WORD_BH  bhtab[ >> 5]
< #define UNALIGNED_BH  
< 
< 
< 
< #undef       SET_BH
---
> #define      WORD_BH  undef       SET_BH
(94.2 %, 11985 bytes)
283,289c283
< #define BZ_GET_FAST                     #define UNALIGNED_BH  
< 
< 
< 
< #undef       SET_BH
< #undef     CLEAR_BH
< #undef     ISSET_BH
---
> #define BZ_GET_FAST                     #undef     ISSET_BH
283,289c283
< #define BZ_GET_FAST                     #define UNALIGNED_BH  
< 
< 
< 
< #undef       SET_BH
< #undef     CLEAR_BH
< #undef     ISSET_BH
---
> #define BZ_GET_FAST                     #undef     ISSET_BH
(94.2 %, 11919 bytes)
283,308c283
< #define BZ_GET_FAST                     #undef     ISSET_BH
< #undef      WORD_BH
< #undef UNALIGNED_BH
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define mswap \
---
> #define BZ_GET_FAST                     #define mswap \
283,308c283
< #define BZ_GET_FAST                     #undef     ISSET_BH
< #undef      WORD_BH
< #undef UNALIGNED_BH
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define mswap \
---
> #define BZ_GET_FAST                     #define mswap \
283,308c283
< #define BZ_GET_FAST                     #undef     ISSET_BH
< #undef      WORD_BH
< #undef UNALIGNED_BH
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define mswap \
---
> #define BZ_GET_FAST                     #undef     mswap \
(94.2 %, 11837 bytes)
283,291c283
< #define BZ_GET_FAST                     #define mswap \
<    
< 
< #define mvswap       \
< 
< 
< 
< 
< #define mmin  ?  : 
---
> #define BZ_GET_FAST                     define mmin  ?  : 
283,291c283
< #define BZ_GET_FAST                     #define mswap \
<    
< 
< #define mvswap       \
< 
< 
< 
< 
< #define mmin  ?  : 
---
> #define BZ_GET_FAST                     #mmin  ?  : 
(94.2 %, 11788 bytes)
283,287c283
< #define BZ_GET_FAST                     define mmin  ?  : 
< 
< #define mpush 
< 
< #define mpop 
---
> #define BZ_GET_FAST                     mpop 
283,290c283
< #define BZ_GET_FAST                     define mmin  ?  : 
< 
< #define mpush 
< 
< #define mpop 
< 
< 
< #define mnextsize 
---
> #define BZ_GET_FAST                     define #define mnextsize 
(94.3 %, 11744 bytes)
283,292c283
< #define BZ_GET_FAST                     mpop 
< 
< 
< #define mnextsize 
< 
< #define mnextswap                                        \
<    
< 
< 
< #define MAIN_QSORT_SMALL_THRESH 20
---
> #define BZ_GET_FAST                     define MAIN_QSORT_SMALL_THRESH 20
286,292c286
< #define mnextsize 
< 
< #define mnextswap                                        \
<    
< 
< 
< #define MAIN_QSORT_SMALL_THRESH 20
---
> MAIN_QSORT_SMALL_THRESH 20
286,292c286
< #define mnextsize 
< 
< #define mnextswap                                        \
<    
< 
< 
< #define MAIN_QSORT_SMALL_THRESH 20
---
> #20
(94.3 %, 11650 bytes)
283,285c283
< #define BZ_GET_FAST                     define MAIN_QSORT_SMALL_THRESH 20
< #define MAIN_QSORT_DEPTH_THRESH 
< #define MAIN_QSORT_STACK_SIZE 100
---
> #define BZ_GET_FAST                     100
283,289c283
< #define BZ_GET_FAST                     define MAIN_QSORT_SMALL_THRESH 20
< #define MAIN_QSORT_DEPTH_THRESH 
< #define MAIN_QSORT_STACK_SIZE 100
< 
< 
< 
< #undef mswap
---
> #define BZ_GET_FAST                     define #undef mswap
(94.4 %, 11553 bytes)
283,289c283
< #define BZ_GET_FAST                     100
< 
< 
< 
< #undef mswap
< #undef mvswap
< #undef mpush
---
> #define BZ_GET_FAST                     mpush
287,289d286
< #undef mswap
< #undef mvswap
< #undef mpush
(94.4 %, 11512 bytes)
283,286c283
< #define BZ_GET_FAST                     mpush
< #undef mpop
< #undef mmin
< #undef mnextsize
---
> #define BZ_GET_FAST                     mnextsize
284,286d283
< #undef mpop
< #undef mmin
< #undef mnextsize
(94.4 %, 11475 bytes)
283,286c283
< #define BZ_GET_FAST                     mnextsize
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
---
> #define BZ_GET_FAST                     MAIN_QSORT_DEPTH_THRESH
284,286d283
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
(94.4 %, 11410 bytes)
283,291c283
< #define BZ_GET_FAST                     MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQ 
< #define SETMASK 
---
> #define BZ_GET_FAST                     SETMASK 
284,291d283
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQ 
< #define SETMASK 
(94.5 %, 11327 bytes)
283,289c283
< #define BZ_GET_FAST                     SETMASK 
< #define CLEARMASK 
< 
< 
< 
< #undef BIGFREQ
< #undef SETMASK
---
> #define BZ_GET_FAST                     SETMASK
284,289d283
< #define CLEARMASK 
< 
< 
< 
< #undef BIGFREQ
< #undef SETMASK
(94.5 %, 11274 bytes)
283,304c283
< #define BZ_GET_FAST                     SETMASK
< #undef CLEARMASK
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define WEIGHTOF  
< #define DEPTHOF   
---
> #define BZ_GET_FAST                     DEPTHOF   
284,304d283
< #undef CLEARMASK
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define WEIGHTOF  
< #define DEPTHOF   
(94.5 %, 11204 bytes)
283,287c283
< #define BZ_GET_FAST                     DEPTHOF   
< #define MYMAX 
< 
< #define ADDWEIGHTS                           \
<     |                    \
---
> #define BZ_GET_FAST                     \
284,289d283
< #define MYMAX 
< 
< #define ADDWEIGHTS                           \
<     |                    \
<    
< 
284,289d283
< #define MYMAX 
< 
< #define ADDWEIGHTS                           \
<     |                    \
<    
< 
(94.6 %, 11105 bytes)
283,357c283
< #define BZ_GET_FAST                     \
<    
< 
< #define UPHEAP                                     \
< 
< 
< #define DOWNHEAP                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW                           \
---
> #define BZ_GET_FAST                     #define bsNEEDW                           \
286,357c286
< #define UPHEAP                                     \
< 
< 
< #define DOWNHEAP                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW                           \
---
> define bsNEEDW                           \
286,357c286
< #define UPHEAP                                     \
< 
< 
< #define DOWNHEAP                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW                           \
---
> #bsNEEDW                           \
286,357c286
< #define UPHEAP                                     \
< 
< 
< #define DOWNHEAP                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW                           \
---
> #define \
286,378c286
< #define UPHEAP                                     \
< 
< 
< #define DOWNHEAP                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
---
> #define UPHEAP                                     static
(94.7 %, 10923 bytes)
283,305c283
< #define BZ_GET_FAST                     #define bsNEEDW                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( void )
---
> #define BZ_GET_FAST                     )
283,306c283
< #define BZ_GET_FAST                     #define bsNEEDW                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( void )
< ;
---
> #define BZ_GET_FAST                     #;
283,310c283
< #define BZ_GET_FAST                     #define bsNEEDW                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( void )
< ;
< 
< 
< 
< static
---
> #define BZ_GET_FAST                     #define static
(94.7 %, 10829 bytes)
283,294c283
< #define BZ_GET_FAST                     )
< ;
< 
< 
< 
< static
< void generateMTFValues ( void )
< ;
< 
< 
< 
< #define BZ_LESSER_ICOST  0
---
> #define BZ_GET_FAST                     #define BZ_LESSER_ICOST  0
284,294c284
< ;
< 
< 
< 
< static
< void generateMTFValues ( void )
< ;
< 
< 
< 
< #define BZ_LESSER_ICOST  0
---
> define BZ_LESSER_ICOST  0
288,294c288
< static
< void generateMTFValues ( void )
< ;
< 
< 
< 
< #define BZ_LESSER_ICOST  0
---
> BZ_LESSER_ICOST  0
289,294c289
< void generateMTFValues ( void )
< ;
< 
< 
< 
< #define BZ_LESSER_ICOST  0
---
> 0
289,295c289
< void generateMTFValues ( void )
< ;
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
---
> void #define BZ_GREATER_ICOST 15
289,295c289
< void generateMTFValues ( void )
< ;
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
---
> void generateMTFValues define BZ_GREATER_ICOST 15
289,295c289
< void generateMTFValues ( void )
< ;
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
---
> void generateMTFValues ( BZ_GREATER_ICOST 15
289,295c289
< void generateMTFValues ( void )
< ;
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
---
> void generateMTFValues ( void 15
290,318d289
< ;
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
(94.7 %, 10778 bytes)
283,308c283
< #define BZ_GET_FAST                     #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define RETURN                               \
---
> #define BZ_GET_FAST                     define RETURN                               \
283,308c283
< #define BZ_GET_FAST                     #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define RETURN                               \
---
> #define BZ_GET_FAST                     #RETURN                               \
283,308c283
< #define BZ_GET_FAST                     #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define RETURN                               \
---
> #define BZ_GET_FAST                     #define \
(94.8 %, 10699 bytes)
283,287c283
< #define BZ_GET_FAST                     define RETURN                               \
<    ;
< 
< #define GET_BITS                     \
<    case lll: s->state = lll;                      \
---
> #define BZ_GET_FAST                     lll: s->state = lll;                      \
283,287c283
< #define BZ_GET_FAST                     define RETURN                               \
<    ;
< 
< #define GET_BITS                     \
<    case lll: s->state = lll;                      \
---
> #define BZ_GET_FAST                     define : s->state = lll;                      \
(94.8 %, 10600 bytes)
283,284c283
< #define BZ_GET_FAST                     lll: s->state = lll;                      \
<    while  
---
> #define BZ_GET_FAST                     while  
283,286c283
< #define BZ_GET_FAST                     lll: s->state = lll;                      \
<    while  
< 
< #define GET_UCHAR                        \
---
> #define BZ_GET_FAST                     lll#define GET_UCHAR                        \
(94.9 %, 10553 bytes)
283,288c283
< #define BZ_GET_FAST                     while  
< 
< #define GET_UCHAR                        \
<    GET_BITS
< 
< #define GET_BIT                          \
---
> #define BZ_GET_FAST                     \
285,289c285
< #define GET_UCHAR                        \
<    GET_BITS
< 
< #define GET_BIT                          \
<    GET_BITS
---
> GET_BITS
285,292c285
< #define GET_UCHAR                        \
<    GET_BITS
< 
< #define GET_BIT                          \
<    GET_BITS
< 
< 
< #define GET_MTF_VAL           \
---
> ##define GET_MTF_VAL           \
285,292c285
< #define GET_UCHAR                        \
<    GET_BITS
< 
< #define GET_BIT                          \
<    GET_BITS
< 
< 
< #define GET_MTF_VAL           \
---
> #define define GET_MTF_VAL           \
(94.9 %, 10447 bytes)
283,292c283
< #define BZ_GET_FAST                     \
<    GET_BITS
< 
< 
< #define GET_MTF_VAL           \
< 
< 
< 
< 
< Int32 BZ2_decompress ( DState* s )
---
> #define BZ_GET_FAST                     DState* s )
284,292c284
<    GET_BITS
< 
< 
< #define GET_MTF_VAL           \
< 
< 
< 
< 
< Int32 BZ2_decompress ( DState* s )
---
>    * s )
287,292c287
< #define GET_MTF_VAL           \
< 
< 
< 
< 
< Int32 BZ2_decompress ( DState* s )
---
> s )
(94.9 %, 10372 bytes)
283,302c283
< #define BZ_GET_FAST                     DState* s )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< void BZ2_bz__AssertH__fail ( void )
---
> #define BZ_GET_FAST                     )
283,303c283
< #define BZ_GET_FAST                     DState* s )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< void BZ2_bz__AssertH__fail ( void )
< ;
---
> #define BZ_GET_FAST                     DState;
(95.0 %, 10307 bytes)
283,295c283
< #define BZ_GET_FAST                     )
< ;
< 
< 
< 
< static
< int bz_config_ok 
< ;
< 
< 
< 
< static
< void* default_bzalloc 
---
> #define BZ_GET_FAST                     default_bzalloc 
286,297d285
< 
< 
< static
< int bz_config_ok 
< ;
< 
< 
< 
< static
< void* default_bzalloc 
< ;
< 
(95.0 %, 10257 bytes)
283,292c283
< #define BZ_GET_FAST                     default_bzalloc 
< ;
< 
< static
< void default_bzfree (  void )
< ;
< 
< 
< 
< static
---
> #define BZ_GET_FAST                     static
284,292d283
< ;
< 
< static
< void default_bzfree (  void )
< ;
< 
< 
< 
< static
(95.0 %, 10195 bytes)
283,290c283
< #define BZ_GET_FAST                     static
< void prepare_new_block ( void )
< ;
< 
< 
< 
< static
< void init_RL ( void )
---
> #define BZ_GET_FAST                     init_RL ( void )
284,290c284
< void prepare_new_block ( void )
< ;
< 
< 
< 
< static
< void init_RL ( void )
---
> ( void )
284,290c284
< void prepare_new_block ( void )
< ;
< 
< 
< 
< static
< void init_RL ( void )
---
> void void )
284,290c284
< void prepare_new_block ( void )
< ;
< 
< 
< 
< static
< void init_RL ( void )
---
> void prepare_new_block )
284,291c284
< void prepare_new_block ( void )
< ;
< 
< 
< 
< static
< void init_RL ( void )
< ;
---
> void prepare_new_block ( ;
284,294c284
< void prepare_new_block ( void )
< ;
< 
< 
< 
< static
< void init_RL ( void )
< ;
< 
< 
< static
---
> void prepare_new_block ( void static
285,294d284
< ;
< 
< 
< 
< static
< void init_RL ( void )
< ;
< 
< 
< static
(95.1 %, 10139 bytes)
283,293c283
< #define BZ_GET_FAST                     init_RL ( void )
< ;
< 
< 
< static
< Bool isempty_RL 
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
> #define BZ_GET_FAST                     int BZ_API(BZ2_bzCompressInit) 
283,293c283
< #define BZ_GET_FAST                     init_RL ( void )
< ;
< 
< 
< static
< Bool isempty_RL 
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
> #define BZ_GET_FAST                     init_RL BZ_API(BZ2_bzCompressInit) 
283,293c283
< #define BZ_GET_FAST                     init_RL ( void )
< ;
< 
< 
< static
< Bool isempty_RL 
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
> #define BZ_GET_FAST                     init_RL ( (BZ2_bzCompressInit) 
283,293c283
< #define BZ_GET_FAST                     init_RL ( void )
< ;
< 
< 
< static
< Bool isempty_RL 
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
> #define BZ_GET_FAST                     init_RL ( void BZ2_bzCompressInit) 
284,293c284
< ;
< 
< 
< static
< Bool isempty_RL 
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
> ) 
287,294c287
< static
< Bool isempty_RL 
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> ( bz_stream* strm, 
288,294c288
< Bool isempty_RL 
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> bz_stream* strm, 
288,294c288
< Bool isempty_RL 
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> Bool * strm, 
289,294c289
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> strm, 
293,294c293
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> , 
293,295c293
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> int int        blockSize100k,
293,295c293
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> int BZ_APIblockSize100k,
293,295c293
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> int BZ_API(,
293,296c293
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
> int BZ_API(BZ2_bzCompressInitint        verbosity,
294,296c294
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
>                     verbosity,
294,296c294
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
>                     ( ,
294,297c294
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
>                     ( bz_streamint        workFactor )
294,297c294
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
>                     ( bz_stream* workFactor )
294,297c294
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
>                     ( bz_stream* strm)
295,298c295
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< ;
---
>                      ;
295,310c295
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK               \
---
>                      int        #define ADD_CHAR_TO_BLOCK               \
295,310c295
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK               \
---
>                      int        blockSize100kdefine ADD_CHAR_TO_BLOCK               \
296,310c296
<                      int        verbosity,
<                      int        workFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK               \
---
>                      ADD_CHAR_TO_BLOCK               \
296,310c296
<                      int        verbosity,
<                      int        workFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK               \
---
>                      int        \
296,323c296
<                      int        verbosity,
<                      int        workFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
---
>                      int        verbositystatic
297,324c297
<                      int        workFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress 
---
>                      Bool handle_compress 
297,324c297
<                      int        workFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress 
---
>                      int        handle_compress 
297,325c297
<                      int        workFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress 
< ;
---
>                      int        workFactor ;
298,328d297
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress 
< ;
< 
< 
< 
310,329c310
< #define ADD_CHAR_TO_BLOCK               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress 
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
310,329c310
< #define ADD_CHAR_TO_BLOCK               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress 
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #(BZ2_bzCompress) ( bz_stream *strm, int action )
310,329c310
< #define ADD_CHAR_TO_BLOCK               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress 
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define BZ2_bzCompress) ( bz_stream *strm, int action )
(95.1 %, 10047 bytes)
310c310
< BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int action )
310c310
< BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> BZ_APIaction )
310c310
< BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> BZ_API()
310,311c310
< BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< ;
---
> BZ_API(BZ2_bzCompress;
310,315c310
< BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> BZ_API(BZ2_bzCompress) int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
310,315c310
< BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> BZ_API(BZ2_bzCompress) ( BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
310,315c310
< BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> BZ_API(BZ2_bzCompress) ( bz_stream (BZ2_bzCompressEnd)  ( bz_stream *strm )
310,315c310
< BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> BZ_API(BZ2_bzCompress) ( bz_stream *BZ2_bzCompressEnd)  ( bz_stream *strm )
310,315c310
< BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> BZ_API(BZ2_bzCompress) ( bz_stream *strm)  ( bz_stream *strm )
310,315c310
< BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> BZ_API(BZ2_bzCompress) ( bz_stream *strm, ( bz_stream *strm )
(95.1 %, 10001 bytes)
310,315c310
< BZ_API()
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> BZ_API(*strm )
311,315c311
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> strm )
315c315
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> )
315,316c315
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
< ;
---
> int ;
(95.1 %, 9951 bytes)
310,320c310
< BZ_API(*strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
> BZ_API(( bz_stream* strm, 
310,320c310
< BZ_API(*strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
> BZ_API(*bz_stream* strm, 
310,320c310
< BZ_API(*strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
> BZ_API(*strm * strm, 
311,320c311
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
> strm, 
319,320c319
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
> , 
319,321c319
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
> int int        verbosity,
319,321c319
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
> int BZ_APIverbosity,
319,321c319
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
> int BZ_API(,
319,322c319
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
> int BZ_API(BZ2_bzDecompressInitint        small )
320,322c320
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
>                      small )
320,322c320
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
>                      ( )
320,323c320
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< ;
---
>                      ( bz_stream;
320,327c320
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< ;
< 
< 
< 
< static
---
>                      ( bz_stream* static
320,328c320
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< ;
< 
< 
< 
< static
< void unRLE_obuf_to_output_FAST ( void )
---
>                      ( bz_stream* strmvoid unRLE_obuf_to_output_FAST ( void )
321,328c321
<                        int        verbosity,
<                        int        small )
< ;
< 
< 
< 
< static
< void unRLE_obuf_to_output_FAST ( void )
---
>                        unRLE_obuf_to_output_FAST ( void )
321,328c321
<                        int        verbosity,
<                        int        small )
< ;
< 
< 
< 
< static
< void unRLE_obuf_to_output_FAST ( void )
---
>                        int        ( void )
321,328c321
<                        int        verbosity,
<                        int        small )
< ;
< 
< 
< 
< static
< void unRLE_obuf_to_output_FAST ( void )
---
>                        int        verbosityvoid )
(95.2 %, 9848 bytes)
320,336c320
<                      ( )
< ;
< 
< 
< 
< static
< void unRLE_obuf_to_output_FAST ( void )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
---
>                      ( static
321,336d320
< ;
< 
< 
< 
< static
< void unRLE_obuf_to_output_FAST ( void )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
325,337c325
< static
< void unRLE_obuf_to_output_FAST ( void )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( void )
---
> unRLE_obuf_to_output_SMALL ( void )
326,337c326
< void unRLE_obuf_to_output_FAST ( void )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( void )
---
> ( void )
326,337c326
< void unRLE_obuf_to_output_FAST ( void )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( void )
---
> void void )
326,337c326
< void unRLE_obuf_to_output_FAST ( void )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( void )
---
> void unRLE_obuf_to_output_FAST )
326,338c326
< void unRLE_obuf_to_output_FAST ( void )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( void )
< ;
---
> void unRLE_obuf_to_output_FAST ( ;
326,342c326
< void unRLE_obuf_to_output_FAST ( void )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( void )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> void unRLE_obuf_to_output_FAST ( void int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
327,342c327
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( void )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
(95.2 %, 9779 bytes)
325,330c325
< unRLE_obuf_to_output_SMALL ( void )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> ) ( bz_stream *strm )
325,330c325
< unRLE_obuf_to_output_SMALL ( void )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> unRLE_obuf_to_output_SMALL ( bz_stream *strm )
325,330c325
< unRLE_obuf_to_output_SMALL ( void )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> unRLE_obuf_to_output_SMALL ( bz_stream *strm )
(95.2 %, 9736 bytes)
325,330c325
< unRLE_obuf_to_output_SMALL ( bz_stream *strm )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> unRLE_obuf_to_output_SMALL BZ2_bzDecompressEnd)  ( bz_stream *strm )
325,330c325
< unRLE_obuf_to_output_SMALL ( bz_stream *strm )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> unRLE_obuf_to_output_SMALL ( )  ( bz_stream *strm )
325,330c325
< unRLE_obuf_to_output_SMALL ( bz_stream *strm )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> unRLE_obuf_to_output_SMALL ( bz_stream ( bz_stream *strm )
325,330c325
< unRLE_obuf_to_output_SMALL ( bz_stream *strm )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> unRLE_obuf_to_output_SMALL ( bz_stream *bz_stream *strm )
325,330c325
< unRLE_obuf_to_output_SMALL ( bz_stream *strm )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> unRLE_obuf_to_output_SMALL ( bz_stream *strm *strm )
326,330c326
< ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> strm )
330c330
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> )
330,331c330
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< ;
---
> int ;
330,338c330
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR                    \
---
> int BZ_API#define BZ_SETERR                    \
330,338c330
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR                    \
---
> int BZ_API(define BZ_SETERR                    \
330,338c330
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR                    \
---
> int BZ_API(BZ2_bzDecompressEndBZ_SETERR                    \
330,338c330
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR                    \
---
> int BZ_API(BZ2_bzDecompressEnd)  \
330,341c330
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR                    \
< 
< 
< typedef 
---
> int BZ_API(BZ2_bzDecompressEnd)  ( typedef 
330,342c330
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR                    \
< 
< 
< typedef 
<    struct {
---
> int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream struct {
330,342c330
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR                    \
< 
< 
< typedef 
<    struct {
---
> int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *{
(95.3 %, 9687 bytes)
330,342c330
< int ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> int *     handle;
337,342c337
< #define BZ_SETERR                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> handle;
337,342c337
< #define BZ_SETERR                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> #;
337,343c337
< #define BZ_SETERR                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #define Char      buf[BZ_MAX_UNUSED];
337,343c337
< #define BZ_SETERR                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #define BZ_SETERR                    buf[BZ_MAX_UNUSED];
340,343c340
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> [BZ_MAX_UNUSED];
341,343c341
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
>    BZ_MAX_UNUSED];
341,343c341
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
>    struct ];
342,343c342
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
>       ;
342,344c342
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
>       FILEInt32     bufN;
342,344c342
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
>       FILE*     bufN;
(95.3 %, 9635 bytes)
343,345d342
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
343,345d342
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
343,345d342
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
344,346d343
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
344,346d343
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
344,346d343
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
345,347d344
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
345,348c345
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>       }
345,349c345
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
---
>       bz_stream bzFile;
346,349d345
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
346,357c346
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       BZFILE* BZ_API(BZ2_bzWriteOpen) 
346,357c346
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Int32     * BZ_API(BZ2_bzWriteOpen) 
346,357c346
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Int32     lastErrBZ_API(BZ2_bzWriteOpen) 
347,357c347
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       (BZ2_bzWriteOpen) 
347,357c347
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Bool      BZ2_bzWriteOpen) 
347,357c347
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Bool      initialisedOk) 
348,358c348
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>    ( int*  bzerror,      
349,358c349
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>    int*  bzerror,      
349,358c349
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>    bzFile*  bzerror,      
357,358c357
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> bzerror,      
357,358c357
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE,      
357,359c357
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* FILE* f, 
357,359c357
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* BZ_API* f, 
357,359c357
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* BZ_API(f, 
357,359c357
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* BZ_API(BZ2_bzWriteOpen, 
358,360c358
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     int   blockSize100k, 
358,360c358
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     ( blockSize100k, 
358,360c358
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     ( int, 
358,361c358
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( int*  int   verbosity,
358,361c358
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( int*  bzerrorverbosity,
359,361c359
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       ,
359,362c359
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       FILEint   workFactor )
359,362c359
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       FILE* workFactor )
359,362c359
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       FILE* f)
360,363c360
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
---
>                       ;
360,368c360
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       int   void BZ_API(BZ2_bzWrite)
360,368c360
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       int   blockSize100kBZ_API(BZ2_bzWrite)
361,368c361
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       (BZ2_bzWrite)
361,368c361
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       int   BZ2_bzWrite)
361,368c361
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       int   verbosity)
362,369c362
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>                       ( int*    bzerror, 
362,369c362
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>                       int   int*    bzerror, 
362,369c362
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>                       int   workFactor *    bzerror, 
363,369c363
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> bzerror, 
368,369c368
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> , 
368,370c368
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> void BZFILE* b, 
368,370c368
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> void BZ_API* b, 
368,370c368
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> void BZ_API(b, 
368,370c368
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> void BZ_API(BZ2_bzWrite, 
369,371c369
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              void*   buf, 
369,371c369
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( *   buf, 
369,371c369
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( intbuf, 
369,371c369
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( int*    , 
369,372c369
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              ( int*    bzerrorint     len )
370,372c370
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>                len )
370,372c370
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>                BZFILE)
370,373c370
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
---
>                BZFILE* ;
370,377c370
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>                BZFILE* bvoid BZ_API(BZ2_bzWriteClose)
371,377c371
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>                BZ_API(BZ2_bzWriteClose)
371,377c371
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>                void(BZ2_bzWriteClose)
371,377c371
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>                void*   BZ2_bzWriteClose)
371,377c371
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>                void*   buf)
372,378c372
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>                ( int*          bzerror, 
372,378c372
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>                int     int*          bzerror, 
372,378c372
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>                int     len *          bzerror, 
373,378c373
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> bzerror, 
377,378c377
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> , 
377,379c377
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZFILE*       b, 
377,379c377
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_API*       b, 
377,379c377
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_API(b, 
377,379c377
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_API(BZ2_bzWriteClose, 
378,380c378
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   int           abandon,
378,380c378
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( abandon,
378,380c378
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int,
378,381c378
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( int*          unsigned int* nbytes_in,
378,381c378
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( int*          bzerrorint* nbytes_in,
379,381c379
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     * nbytes_in,
379,381c379
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     BZFILEnbytes_in,
379,381c379
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     BZFILE*       ,
379,382c379
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     BZFILE*       bunsigned int* nbytes_out )
380,382c380
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     int* nbytes_out )
380,382c380
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     int           * nbytes_out )
380,382c380
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     int           abandonnbytes_out )
381,382c381
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     )
381,383c381
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
---
>                     unsigned ;
381,386c381
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned intvoid BZ_API(BZ2_bzWriteClose64)
381,386c381
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned int* BZ_API(BZ2_bzWriteClose64)
381,386c381
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned int* nbytes_in(BZ2_bzWriteClose64)
382,386c382
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     BZ2_bzWriteClose64)
382,386c382
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned )
382,387c382
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                     unsigned int( int*          bzerror, 
382,387c382
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                     unsigned int* int*          bzerror, 
382,387c382
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                     unsigned int* nbytes_out *          bzerror, 
383,387c383
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> bzerror, 
386,387c386
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> , 
386,388c386
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZFILE*       b, 
386,388c386
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_API*       b, 
386,388c386
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_API(b, 
386,388c386
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_API(BZ2_bzWriteClose64, 
387,389c387
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   int           abandon,
387,389c387
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( abandon,
387,389c387
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int,
387,390c387
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( int*          unsigned int* nbytes_in_lo32,
387,390c387
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( int*          bzerrorint* nbytes_in_lo32,
388,390c388
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     * nbytes_in_lo32,
388,390c388
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     BZFILEnbytes_in_lo32,
388,390c388
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     BZFILE*       ,
388,391c388
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     BZFILE*       bunsigned int* nbytes_in_hi32,
389,391c389
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     int* nbytes_in_hi32,
389,391c389
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     int           * nbytes_in_hi32,
389,391c389
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     int           abandonnbytes_in_hi32,
390,391c390
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     ,
390,392c390
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned unsigned int* nbytes_out_lo32,
390,392c390
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned intint* nbytes_out_lo32,
390,392c390
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned int* * nbytes_out_lo32,
390,392c390
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned int* nbytes_in_lo32nbytes_out_lo32,
391,392c391
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     ,
391,393c391
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned unsigned int* nbytes_out_hi32 )
391,393c391
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned intint* nbytes_out_hi32 )
391,393c391
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* * nbytes_out_hi32 )
391,393c391
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_in_hi32nbytes_out_hi32 )
392,393c392
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     )
392,394c392
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
---
>                     unsigned ;
392,398c392
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned intBZFILE* BZ_API(BZ2_bzReadOpen) 
392,398c392
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned int* * BZ_API(BZ2_bzReadOpen) 
392,398c392
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned int* nbytes_out_lo32BZ_API(BZ2_bzReadOpen) 
393,398c393
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     (BZ2_bzReadOpen) 
393,398c393
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned BZ2_bzReadOpen) 
393,398c393
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned int) 
393,399c393
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>                     unsigned int* ( int*  bzerror, 
393,399c393
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>                     unsigned int* nbytes_out_hi32 int*  bzerror, 
394,399c394
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> *  bzerror, 
398,399c398
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> bzerror, 
398,399c398
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> BZFILE, 
398,400c398
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILE* FILE* f, 
398,400c398
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILE* BZ_API* f, 
398,400c398
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILE* BZ_API(f, 
398,400c398
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILE* BZ_API(BZ2_bzReadOpen, 
399,401c399
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    int   verbosity,
399,401c399
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    ( verbosity,
399,401c399
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    ( int,
399,402c399
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    ( int*  int   small,
399,402c399
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    ( int*  bzerrorsmall,
400,402c400
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                      ,
400,403c400
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      FILEvoid* unused,
400,403c400
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      FILE* * unused,
400,403c400
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      FILE* funused,
401,403c401
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      ,
401,404c401
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      int   int   nUnused )
401,404c401
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      int   verbositynUnused )
402,404c402
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      )
402,405c402
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
---
>                      int   ;
402,409c402
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>                      int   smallvoid BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
403,409c403
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>                      BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
403,409c403
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>                      void(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
403,409c403
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>                      void* BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
403,409c403
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>                      void* unused) ( int *bzerror, BZFILE *b )
404,409c404
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>                      ( int *bzerror, BZFILE *b )
404,409c404
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>                      int   int *bzerror, BZFILE *b )
404,409c404
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>                      int   nUnused *bzerror, BZFILE *b )
405,409c405
< ;
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> bzerror, BZFILE *b )
409c409
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> , BZFILE *b )
409c409
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZFILE *b )
409c409
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API*b )
409c409
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API(b )
409c409
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API(BZ2_bzReadClose)
409,410c409
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< ;
---
> void BZ_API(BZ2_bzReadClose) ;
409,414c409
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> void BZ_API(BZ2_bzReadClose) ( int BZ_API(BZ2_bzRead) 
409,414c409
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> void BZ_API(BZ2_bzReadClose) ( int BZ_API(BZ2_bzRead) 
409,414c409
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> void BZ_API(BZ2_bzReadClose) ( int *(BZ2_bzRead) 
409,414c409
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerrorBZ2_bzRead) 
409,414c409
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, ) 
409,415c409
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE ( int*    bzerror, 
409,415c409
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *int*    bzerror, 
409,415c409
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b *    bzerror, 
410,415c410
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> bzerror, 
414,415c414
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> , 
414,416c414
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> int BZFILE* b, 
414,416c414
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> int BZ_API* b, 
414,416c414
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> int BZ_API(b, 
414,416c414
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> int BZ_API(BZ2_bzRead, 
415,417c415
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            void*   buf, 
415,417c415
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( *   buf, 
415,417c415
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( intbuf, 
415,417c415
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( int*    , 
415,418c415
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            ( int*    bzerrorint     len )
416,418c416
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>              len )
416,418c416
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>              BZFILE)
416,419c416
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
---
>              BZFILE* {
416,421c416
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = b;
---
>              BZFILE* bbzFile* bzf = b;
417,421c417
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = b;
---
>              * bzf = b;
417,421c417
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = b;
---
>              voidbzf = b;
417,421c417
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = b;
---
>              void*   = b;
417,421c417
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = b;
---
>              void*   bufb;
418,421c418
<              int     len )
< {
<    
<    bzFile* bzf = b;
---
>              ;
418,423c418
<              int     len )
< {
<    
<    bzFile* bzf = b;
< 
<    BZ_SETERR;
---
>              int     BZ_SETERR;
418,423c418
<              int     len )
< {
<    
<    bzFile* bzf = b;
< 
<    BZ_SETERR;
---
>              int     len ;
419,425c419
< {
<    
<    bzFile* bzf = b;
< 
<    BZ_SETERR;
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
> if (bzf == NULL || buf == NULL || len < 0)
421,425c421
<    bzFile* bzf = b;
< 
<    BZ_SETERR;
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    (bzf == NULL || buf == NULL || len < 0)
421,425c421
<    bzFile* bzf = b;
< 
<    BZ_SETERR;
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFilebzf == NULL || buf == NULL || len < 0)
421,425c421
<    bzFile* bzf = b;
< 
<    BZ_SETERR;
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* == NULL || buf == NULL || len < 0)
421,425c421
<    bzFile* bzf = b;
< 
<    BZ_SETERR;
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf NULL || buf == NULL || len < 0)
421,425c421
<    bzFile* bzf = b;
< 
<    BZ_SETERR;
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = || buf == NULL || len < 0)
421,425c421
<    bzFile* bzf = b;
< 
<    BZ_SETERR;
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = bbuf == NULL || len < 0)
423,425c423
<    BZ_SETERR;
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    == NULL || len < 0)
423,425c423
<    BZ_SETERR;
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    BZ_SETERRNULL || len < 0)
425c425
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    || len < 0)
425c425
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if len < 0)
425c425
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if (< 0)
425c425
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if (bzf 0)
425c425
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if (bzf == )
425,426c425
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
---
>    if (bzf == NULL ;
425,428c425
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
< 
<    if (bzf->writing)
---
>    if (bzf == NULL || if (bzf->writing)
425,428c425
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
< 
<    if (bzf->writing)
---
>    if (bzf == NULL || buf (bzf->writing)
425,428c425
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
< 
<    if (bzf->writing)
---
>    if (bzf == NULL || buf == bzf->writing)
425,428c425
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
< 
<    if (bzf->writing)
---
>    if (bzf == NULL || buf == NULL ->writing)
425,428c425
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
< 
<    if (bzf->writing)
---
>    if (bzf == NULL || buf == NULL || writing)
425,428c425
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
< 
<    if (bzf->writing)
---
>    if (bzf == NULL || buf == NULL || len )
(95.3 %, 9602 bytes)
425,428c425
<    if (bzf == NULL || buf == bzf->writing)
<       ;
< 
<    if (len == 0)
---
>    if (bzf == NULL || buf == 0)
425,428c425
<    if (bzf == NULL || buf == bzf->writing)
<       ;
< 
<    if (len == 0)
---
>    if (bzf == NULL || buf == bzf)
425,429c425
<    if (bzf == NULL || buf == bzf->writing)
<       ;
< 
<    if (len == 0)
<       ;
---
>    if (bzf == NULL || buf == bzf->;
(95.3 %, 9565 bytes)
425,428c425
<    if (bzf == NULL || buf == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
---
>    if (bzf == NULL || buf == len;
425,428c425
<    if (bzf == NULL || buf == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
---
>    if (bzf == NULL || buf == 0;
426,429c426
<       ;
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>       bzf->strm.next_out = buf;
428,429c428
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>    ->strm.next_out = buf;
428,429c428
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>    bzfstrm.next_out = buf;
428,429c428
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>    bzf->.next_out = buf;
428,429c428
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>    bzf->strmnext_out = buf;
428,429c428
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>    bzf->strm.= buf;
428,429c428
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>    bzf->strm.avail_out buf;
428,429c428
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>    bzf->strm.avail_out = ;
(95.4 %, 9529 bytes)
426,428c426
<       bzf->strm.next_out = buf;
< 
<    while (True) 
---
>       (True) 
426,428c426
<       bzf->strm.next_out = buf;
< 
<    while (True) 
---
>       bzfTrue) 
426,428c426
<       bzf->strm.next_out = buf;
< 
<    while (True) 
---
>       bzf->) 
426,430c426
<       bzf->strm.next_out = buf;
< 
<    while (True) 
< 
<    return 0; 
---
>       bzf->strmreturn 0; 
426,430c426
<       bzf->strm.next_out = buf;
< 
<    while (True) 
< 
<    return 0; 
---
>       bzf->strm.0; 
426,430c426
<       bzf->strm.next_out = buf;
< 
<    while (True) 
< 
<    return 0; 
---
>       bzf->strm.next_out ; 
426,431c426
<       bzf->strm.next_out = buf;
< 
<    while (True) 
< 
<    return 0; 
< }
---
>       bzf->strm.next_out = }
426,435c426
<       bzf->strm.next_out = buf;
< 
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>       bzf->strm.next_out = bufvoid BZ_API(BZ2_bzReadGetUnused) 
428,435c428
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    BZ_API(BZ2_bzReadGetUnused) 
428,435c428
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    while (BZ2_bzReadGetUnused) 
428,435c428
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    while (BZ2_bzReadGetUnused) 
429,435d428
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
430,436c430
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    ( int*    bzerror, 
(95.4 %, 9492 bytes)
426,432c426
<       bzf->strm.next_out ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>       bzf->strm.next_out *    bzerror, 
427,432c427
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> bzerror, 
431,432c431
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> , 
431,433c431
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> void BZFILE* b, 
431,433c431
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> void BZ_API* b, 
431,433c431
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> void BZ_API(b, 
431,433c431
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> void BZ_API(BZ2_bzReadGetUnused, 
432,434c432
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      void**  unused, 
432,434c432
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( **  unused, 
432,434c432
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( int*  unused, 
432,434c432
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( int*    unused, 
433,434d432
<                        BZFILE* b, 
<                        void**  unused, 
433,434d432
<                        BZFILE* b, 
<                        void**  unused, 
433,435c433
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        BZFILE*    nUnused )
433,435c433
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        BZFILE* nUnused )
433,435c433
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        BZFILE* b)
434,436c434
<                        void**  unused, 
<                        int*    nUnused )
< ;
---
>                        ;
434,444c434
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        voidint BZ_API(BZ2_bzBuffToBuffCompress) 
434,444c434
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        void*BZ_API(BZ2_bzBuffToBuffCompress) 
434,444c434
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        void**  (BZ2_bzBuffToBuffCompress) 
434,444c434
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        void**  unusedBZ2_bzBuffToBuffCompress) 
435,444c435
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        ) 
435,445c435
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>                        int( char*         dest, 
435,445c435
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>                        int*    char*         dest, 
435,445c435
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>                        int*    nUnused *         dest, 
436,445c436
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> dest, 
444,445c444
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> , 
444,446c444
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int unsigned int* destLen,
444,446c444
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int BZ_APIint* destLen,
444,446c444
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int BZ_API(* destLen,
444,446c444
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompressdestLen,
445,446c445
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ,
445,447c445
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          ( char*         source, 
445,447c445
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          ( char*         source, 
445,447c445
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          ( char*         source, 
446,447d445
<                            unsigned int* destLen,
<                            char*         source, 
446,447d445
<                            unsigned int* destLen,
<                            char*         source, 
446,447d445
<                            unsigned int* destLen,
<                            char*         source, 
446,448c446
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            unsigned intsourceLen,
446,448c446
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            unsigned int* ,
446,449c446
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned int* destLenint           blockSize100k, 
447,449c447
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            blockSize100k, 
447,449c447
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            char, 
447,450c447
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            char*         int           verbosity, 
447,450c447
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            char*         sourceverbosity, 
448,450c448
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            , 
448,451c448
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            unsigned int           workFactor )
448,451c448
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            unsigned int  workFactor )
448,451c448
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            unsigned int  sourceLen)
449,452c449
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
---
>                            ;
449,456c449
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            int           int BZ_API(BZ2_bzBuffToBuffDecompress) 
449,456c449
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            int           blockSize100kBZ_API(BZ2_bzBuffToBuffDecompress) 
450,456c450
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            (BZ2_bzBuffToBuffDecompress) 
450,456c450
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            int           BZ2_bzBuffToBuffDecompress) 
450,456c450
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            int           verbosity) 
451,456d450
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
451,457c451
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>                            int           char*         dest, 
451,457c451
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>                            int           workFactor *         dest, 
452,457c452
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> dest, 
456,457c456
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> , 
456,458c456
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int unsigned int* destLen,
456,458c456
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int BZ_APIint* destLen,
456,458c456
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int BZ_API(* destLen,
456,458c456
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompressdestLen,
457,458c457
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ,
457,459c457
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( char*         source, 
457,459c457
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( char*         source, 
457,459c457
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( char*         source, 
458,459d457
<                              unsigned int* destLen,
<                              char*         source, 
458,459d457
<                              unsigned int* destLen,
<                              char*         source, 
458,459d457
<                              unsigned int* destLen,
<                              char*         source, 
458,460c458
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              unsigned intsourceLen,
458,460c458
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              unsigned int* ,
458,461c458
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned int* destLenint           small,
459,461c459
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              small,
459,461c459
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              char,
459,462c459
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              char*         int           verbosity )
459,462c459
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              char*         sourceverbosity )
460,462c460
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              )
460,463c460
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
---
>                              unsigned ;
460,472c460
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              unsigned int  const char * BZ_API(BZ2_bzlibVersion)(void)
460,472c460
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              unsigned int  sourceLenchar * BZ_API(BZ2_bzlibVersion)(void)
461,472c461
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              * BZ_API(BZ2_bzlibVersion)(void)
461,472c461
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              int           BZ_API(BZ2_bzlibVersion)(void)
461,472c461
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              int           small(BZ2_bzlibVersion)(void)
462,472c462
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              BZ2_bzlibVersion)(void)
462,472c462
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              int           )(void)
462,472c462
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              int           verbosity (void)
463,472c463
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
> void)
472c472
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
> )
472,473c472
< const char * BZ_API(BZ2_bzlibVersion)(void)
< ;
---
> const ;
472,478c472
< const char * BZ_API(BZ2_bzlibVersion)(void)
< ;
< 
< 
< 
< 
< static
---
> const char static
472,479c472
< const char * BZ_API(BZ2_bzlibVersion)(void)
< ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
> const char * BZFILE * bzopen_or_bzdopen
472,479c472
< const char * BZ_API(BZ2_bzlibVersion)(void)
< ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
> const char * BZ_API* bzopen_or_bzdopen
472,479c472
< const char * BZ_API(BZ2_bzlibVersion)(void)
< ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
> const char * BZ_API(bzopen_or_bzdopen
472,481c472
< const char * BZ_API(BZ2_bzlibVersion)(void)
< ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                      
< ;
---
> const char * BZ_API(BZ2_bzlibVersion;
472,486c472
< const char * BZ_API(BZ2_bzlibVersion)(void)
< ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
> const char * BZ_API(BZ2_bzlibVersion)BZFILE * BZ_API(BZ2_bzopen)
(95.4 %, 9454 bytes)
472,485c472
< const ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
> const (BZ2_bzopen)
477,485c477
< static
< BZFILE * bzopen_or_bzdopen
<                      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZ2_bzopen)
478,485c478
< BZFILE * bzopen_or_bzdopen
<                      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
> )
478,486c478
< BZFILE * bzopen_or_bzdopen
<                      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> BZFILE ( const char *path,
478,486c478
< BZFILE * bzopen_or_bzdopen
<                      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> BZFILE * const char *path,
480,486c480
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> char *path,
485,486c485
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> *path,
485,486c485
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> BZFILE path,
485,486c485
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> BZFILE * ,
485,487c485
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE * BZ_APIconst char *mode )
485,487c485
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE * BZ_API(char *mode )
485,487c485
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE * BZ_API(BZ2_bzopen*mode )
486,487c486
<                ( const char *path,
<                  const char *mode )
---
>                mode )
486,487c486
<                ( const char *path,
<                  const char *mode )
---
>                ( )
486,488c486
<                ( const char *path,
<                  const char *mode )
< ;
---
>                ( const ;
486,492c486
<                ( const char *path,
<                  const char *mode )
< ;
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                ( const char BZFILE * BZ_API(BZ2_bzdopen)
486,492c486
<                ( const char *path,
<                  const char *mode )
< ;
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                ( const char ** BZ_API(BZ2_bzdopen)
486,492c486
<                ( const char *path,
<                  const char *mode )
< ;
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                ( const char *pathBZ_API(BZ2_bzdopen)
487,492c487
<                  const char *mode )
< ;
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                  (BZ2_bzdopen)
(95.4 %, 9402 bytes)
486,491d485
<                ( )
< ;
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
487,492c487
< ;
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
> fd,
491,492c491
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
> ,
491,493c491
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> BZFILE const char *mode )
491,493c491
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> BZFILE * char *mode )
491,493c491
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> BZFILE * BZ_API*mode )
491,493c491
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> BZFILE * BZ_API(mode )
(95.4 %, 9349 bytes)
486,492c486
<                ( int fd,
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                ( int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
486,492c486
<                ( int fd,
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                ( int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
486,492c486
<                ( int fd,
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                ( int fd(BZ2_bzread) (BZFILE* b, void* buf, int len )
487,492c487
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                  BZ2_bzread) (BZFILE* b, void* buf, int len )
487,492c487
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                  const ) (BZFILE* b, void* buf, int len )
487,492c487
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                  const char (BZFILE* b, void* buf, int len )
487,492c487
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                  const char *BZFILE* b, void* buf, int len )
487,492c487
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                  const char *mode * b, void* buf, int len )
488,492c488
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> b, void* buf, int len )
492c492
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> , void* buf, int len )
492c492
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int void* buf, int len )
492c492
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API* buf, int len )
492c492
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(buf, int len )
492c492
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread, int len )
492c492
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) int len )
492c492
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) (len )
492c492
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) (BZFILE)
492,493c492
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
---
> int BZ_API(BZ2_bzread) (BZFILE* {
492,494c492
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (BZFILE* bint bzerr, nread;
492,494c492
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, bzerr, nread;
492,494c492
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void, nread;
492,494c492
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* nread;
492,494c492
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf;
492,495c492
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
492,495c492
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
492,495c492
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len ((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
493,495c493
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> (bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
494,495c494
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
494,495c494
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int *)b)->lastErr == BZ_STREAM_END) return 0;
494,495c494
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int bzerr)b)->lastErr == BZ_STREAM_END) return 0;
494,495c494
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int bzerr, b)->lastErr == BZ_STREAM_END) return 0;
494,495c494
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int bzerr, nread)->lastErr == BZ_STREAM_END) return 0;
495c495
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    ->lastErr == BZ_STREAM_END) return 0;
495c495
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if lastErr == BZ_STREAM_END) return 0;
495c495
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (== BZ_STREAM_END) return 0;
495c495
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((BZ_STREAM_END) return 0;
495c495
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((() return 0;
495c495
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFilereturn 0;
495c495
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile*0;
495c495
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile*);
495,496c495
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
---
>    if (((bzFile*)bnread = 0;
495,496c495
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
---
>    if (((bzFile*)b)= 0;
495,496c495
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
---
>    if (((bzFile*)b)->0;
495,496c495
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
---
>    if (((bzFile*)b)->lastErr ;
495,497c495
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (((bzFile*)b)->lastErr == if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
495,497c495
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (((bzFile*)b)->lastErr == BZ_STREAM_END(bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
495,497c495
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (((bzFile*)b)->lastErr == BZ_STREAM_END) bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
495,497c495
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
495,497c495
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0BZ_OK || bzerr == BZ_STREAM_END) ; else ;
496,497c496
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    || bzerr == BZ_STREAM_END) ; else ;
496,497c496
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    nread bzerr == BZ_STREAM_END) ; else ;
496,497c496
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    nread = == BZ_STREAM_END) ; else ;
496,497c496
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    nread = 0BZ_STREAM_END) ; else ;
497c497
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    ) ; else ;
497c497
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if ; else ;
497c497
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (else ;
497c497
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (bzerr ;
497,498c497
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
---
>    if (bzerr == }
497,502c497
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (bzerr == BZ_OK int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
497,502c497
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (bzerr == BZ_OK || BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
497,502c497
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (bzerr == BZ_OK || bzerr (BZ2_bzwrite) (BZFILE* b, void* buf, int len )
497,502c497
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (bzerr == BZ_OK || bzerr == BZ2_bzwrite) (BZFILE* b, void* buf, int len )
497,502c497
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) (BZFILE* b, void* buf, int len )
497,502c497
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) (BZFILE* b, void* buf, int len )
497,502c497
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; BZFILE* b, void* buf, int len )
497,502c497
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else * b, void* buf, int len )
498,502c498
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> b, void* buf, int len )
502c502
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> , void* buf, int len )
502c502
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int void* buf, int len )
502c502
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API* buf, int len )
502c502
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(buf, int len )
502c502
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite, int len )
502c502
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) int len )
502c502
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) (len )
502c502
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) (BZFILE)
502,503c502
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< ;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* ;
502,507c502
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_API(BZ2_bzwrite) (BZFILE* bint BZ_API(BZ2_bzflush) (BZFILE *b)
502,507c502
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, BZ_API(BZ2_bzflush) (BZFILE *b)
502,507c502
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void(BZ2_bzflush) (BZFILE *b)
502,507c502
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* BZ2_bzflush) (BZFILE *b)
502,507c502
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf) (BZFILE *b)
502,507c502
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, (BZFILE *b)
502,507c502
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int BZFILE *b)
502,507c502
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len *b)
503,507c503
< ;
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> b)
507c507
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> )
507,508c507
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< ;
---
> int ;
507,512c507
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< ;
< 
< 
< 
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> int BZ_APIvoid BZ_API(BZ2_bzclose) (BZFILE* b)
507,512c507
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< ;
< 
< 
< 
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> int BZ_API(BZ_API(BZ2_bzclose) (BZFILE* b)
507,512c507
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< ;
< 
< 
< 
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> int BZ_API(BZ2_bzflush(BZ2_bzclose) (BZFILE* b)
507,512c507
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< ;
< 
< 
< 
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> int BZ_API(BZ2_bzflush) BZ2_bzclose) (BZFILE* b)
507,512c507
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< ;
< 
< 
< 
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> int BZ_API(BZ2_bzflush) () (BZFILE* b)
507,512c507
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< ;
< 
< 
< 
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> int BZ_API(BZ2_bzflush) (BZFILE (BZFILE* b)
507,512c507
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< ;
< 
< 
< 
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> int BZ_API(BZ2_bzflush) (BZFILE *BZFILE* b)
(95.5 %, 9317 bytes)
507,511c507
< int ;
< 
< 
< 
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> int b)
511c511
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> )
511,512c511
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< ;
---
> void ;
511,520c511
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< ;
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> void BZ_APIconst char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
511,520c511
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< ;
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> void BZ_API(char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
511,520c511
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< ;
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> void BZ_API(BZ2_bzclose* BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
511,520c511
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< ;
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> void BZ_API(BZ2_bzclose) BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
511,520c511
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< ;
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> void BZ_API(BZ2_bzclose) ((BZ2_bzerror) (BZFILE *b, int *errnum)
511,520c511
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< ;
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> void BZ_API(BZ2_bzclose) (BZFILEBZ2_bzerror) (BZFILE *b, int *errnum)
511,520c511
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< ;
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> void BZ_API(BZ2_bzclose) (BZFILE* ) (BZFILE *b, int *errnum)
(95.5 %, 9285 bytes)
511,519c511
< void ;
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> void BZFILE *b, int *errnum)
519c519
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> *b, int *errnum)
519c519
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const b, int *errnum)
519c519
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char , int *errnum)
519c519
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * int *errnum)
519c519
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_API*errnum)
519c519
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_API(errnum)
519c519
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_API(BZ2_bzerror)
(95.5 %, 9255 bytes)
519,552c519
< const char * BZ_API(errnum)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
---
> const char * BZ_API(BZ_LCCWIN32  0
519,552c519
< const char * BZ_API(errnum)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
---
> const char * BZ_API(errnum0
520,557d519
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
549,558c549
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
---
> include <signal.h>
549,558c549
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
---
> #<signal.h>
549,558c549
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
---
> #define signal.h>
549,558c549
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
---
> #define BZ_UNIX      .h>
552,558c552
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
---
> h>
552,558c552
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
---
> #>
552,559c552
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
< #include <errno.h>
---
> #define #include <errno.h>
552,559c552
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
< #include <errno.h>
---
> #define BZ_LCCWIN32  include <errno.h>
(95.5 %, 9200 bytes)
549,550c549
< #define signal.h>
< #include <errno.h>
---
> #define h>
549,550c549
< #define signal.h>
< #include <errno.h>
---
> #define signal>
(95.5 %, 9174 bytes)
549,553c549
< #define h>
< 
< #define ERROR_IF_EOF       
< #define ERROR_IF_NOT_ZERO  
< #define ERROR_IF_MINUS_ONE 
---
> #define define ERROR_IF_MINUS_ONE 
549,553c549
< #define h>
< 
< #define ERROR_IF_EOF       
< #define ERROR_IF_NOT_ZERO  
< #define ERROR_IF_MINUS_ONE 
---
> #define hERROR_IF_MINUS_ONE 
(95.6 %, 9113 bytes)
549,556c549
< #define define ERROR_IF_MINUS_ONE 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> #define .h>
549,556c549
< #define define ERROR_IF_MINUS_ONE 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> #define define h>
555,556c555
< #if BZ_UNIX
< #   include <fcntl.h>
---
> >
555,557c555
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
---
> ##   include <utime.h>
555,557c555
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
---
> #if include <utime.h>
556,557c556
< #   include <fcntl.h>
< #   include <utime.h>
---
> <utime.h>
556,557c556
< #   include <fcntl.h>
< #   include <utime.h>
---
> #   utime.h>
(95.6 %, 9079 bytes)
556,558d555
< <utime.h>
< 
< #   define PATH_SEP    '/'
556,559c556
< <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
---
> <define MY_LSTAT    lstat
(95.6 %, 9041 bytes)
556,558c556
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
---
> define MY_S_ISREG  S_ISREG
556,558c556
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
---
> #   MY_S_ISREG  S_ISREG
(95.6 %, 8980 bytes)
556,559c556
< define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC \
---
> APPEND_FILESPEC \
556,559c556
< define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC \
---
> define \
556,560c556
< define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC \
<       root=snocString
---
> define MY_S_ISREG  root=snocString
(95.7 %, 8910 bytes)
556,560c556
< APPEND_FILESPEC \
<       root=snocString
< 
< #   define APPEND_FLAG \
<       root=snocString
---
> root=snocString
556,560c556
< APPEND_FILESPEC \
<       root=snocString
< 
< #   define APPEND_FLAG \
<       root=snocString
---
> APPEND_FILESPEC =snocString
(95.7 %, 8838 bytes)
556,561d555
< root=snocString
< 
< #   define SET_BINARY_MODE 
< 
< #      define NORETURN 
< 
556,562c556
< root=snocString
< 
< #   define SET_BINARY_MODE 
< 
< #      define NORETURN 
< 
< #endif 
---
> rootendif 
556,569c556
< root=snocString
< 
< #   define SET_BINARY_MODE 
< 
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  
---
> root=#define True  
558,569c558
< #   define SET_BINARY_MODE 
< 
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  
---
> define True  
558,569c558
< #   define SET_BINARY_MODE 
< 
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  
---
> #   True  
558,570c558
< #   define SET_BINARY_MODE 
< 
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  
< #define False 
---
> #   define #define False 
560,570c560
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  
< #define False 
---
> define False 
560,570c560
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  
< #define False 
---
> #      False 
(95.7 %, 8767 bytes)
556,567c556
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  
< #define False 
< 
< 
< typedef int IntNative;
---
> int IntNative;
556,567c556
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  
< #define False 
< 
< 
< typedef int IntNative;
---
> #IntNative;
563,567c563
< #define True  
< #define False 
< 
< 
< typedef int IntNative;
---
> ;
563,581c563
< #define True  
< #define False 
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
---
> ##define SM_I2O           1
563,581c563
< #define True  
< #define False 
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
---
> #define define SM_I2O           1
564,581c564
< #define False 
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
---
> SM_I2O           1
564,581c564
< #define False 
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
---
> #1
564,582c564
< #define False 
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
---
> #define #define SM_F2O           2
567,582c567
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
---
> define SM_F2O           2
567,582c567
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
---
> typedef SM_F2O           2
567,582c567
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
---
> typedef int 2
567,583c567
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
---
> typedef int IntNative#define SM_F2F           3
581,583c581
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
---
> define SM_F2F           3
581,583c581
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
---
> #SM_F2F           3
581,583c581
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
---
> #define 3
581,586c581
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
---
> #define SM_I2O           #define OM_Z             1
582,586c582
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
---
> define OM_Z             1
582,586c582
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
---
> #OM_Z             1
582,586c582
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
---
> #define 1
582,587c582
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
< #define OM_UNZ           2
---
> #define SM_F2O           #define OM_UNZ           2
(95.8 %, 8709 bytes)
581,583c581
< #define SM_I2O           #define OM_Z             1
< #define OM_UNZ           2
< #define OM_TEST          3
---
> #define SM_I2O           define OM_TEST          3
581,583c581
< #define SM_I2O           #define OM_Z             1
< #define OM_UNZ           2
< #define OM_TEST          3
---
> #define SM_I2O           #OM_TEST          3
(95.8 %, 8654 bytes)
581,617c581
< #define SM_I2O           define OM_TEST          3
< 
< 
< 
< 
< #define FILE_NAME_LEN 1034
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
<    UInt64;
---
> #define SM_I2O           UInt64;
581,617c581
< #define SM_I2O           define OM_TEST          3
< 
< 
< 
< 
< #define FILE_NAME_LEN 1034
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
<    UInt64;
---
> #define SM_I2O           define ;
(95.8 %, 8546 bytes)
581,722c581
< #define SM_I2O           UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< 
< #endif
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_N_SUFFIX_PAIRS 4
---
> #define SM_I2O           BZ_N_SUFFIX_PAIRS 4
581,722c581
< #define SM_I2O           UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< 
< #endif
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_N_SUFFIX_PAIRS 4
---
> #define SM_I2O           UInt644
707,758d706
< #if BZ_UNIX
< 
< #endif
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_N_SUFFIX_PAIRS 4
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
(95.9 %, 8373 bytes)
581,640c581
< #define SM_I2O           BZ_N_SUFFIX_PAIRS 4
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct zzzz 
<    Cell;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ISFLAG 
---
> #define SM_I2O           ISFLAG 
581,642c581
< #define SM_I2O           BZ_N_SUFFIX_PAIRS 4
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct zzzz 
<    Cell;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ISFLAG 
< 
< IntNative main 
---
> #define SM_I2O           BZ_N_SUFFIX_PAIRS IntNative main 
(96.0 %, 8257 bytes)
581,589c581
< #define SM_I2O           ISFLAG 
< 
< IntNative main 
< ;
< 
< 
< 
< 
<  
\ No newline at end of file
---
> #define SM_I2O           
\ No newline at end of file
583,589d582
< IntNative main 
< ;
< 
< 
< 
< 
<  
\ No newline at end of file
(96.0 %, 8225 bytes)
===< pass_clex :: rm-toks-8 >===
9,12c9
< #1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
---
> BZ_OK                0
9,12c9
< #1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
---
> #0
10,12d9
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
10,12d9
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
10,12d9
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
10,13c10
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> #define BZ_FINISH            1
12,13d11
< #define BZ_OK                0
< #define BZ_RUN_OK            1
12,13d11
< #define BZ_OK                0
< #define BZ_RUN_OK            1
12,13d11
< #define BZ_OK                0
< #define BZ_RUN_OK            1
12,14c12
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #define BZ_OK                2
13,14d12
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
13,14d12
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
(96.0 %, 8163 bytes)
12,14c12
< #define BZ_OK                2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define BZ_OK                4
13,14d12
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
13,16c13
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< typedef 
<    struct {
---
> #struct {
13,16c13
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< typedef 
<    struct {
---
> #define {
13,17c13
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< typedef 
<    struct {
<       int total_in_lo32;
---
> #define BZ_FINISH_OK         int total_in_lo32;
14,17c14
< #define BZ_STREAM_END        4
< typedef 
<    struct {
<       int total_in_lo32;
---
> total_in_lo32;
14,17c14
< #define BZ_STREAM_END        4
< typedef 
<    struct {
<       int total_in_lo32;
---
> #;
14,18c14
< #define BZ_STREAM_END        4
< typedef 
<    struct {
<       int total_in_lo32;
<       unsigned int total_in_hi32;
---
> #define unsigned int total_in_hi32;
14,18c14
< #define BZ_STREAM_END        4
< typedef 
<    struct {
<       int total_in_lo32;
<       unsigned int total_in_hi32;
---
> #define BZ_STREAM_END        int total_in_hi32;
15,18c15
< typedef 
<    struct {
<       int total_in_lo32;
<       unsigned int total_in_hi32;
---
> total_in_hi32;
16,18c16
<    struct {
<       int total_in_lo32;
<       unsigned int total_in_hi32;
---
>    ;
16,20c16
<    struct {
<       int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>    struct char *next_out;
17,20c17
<       int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>       *next_out;
17,20c17
<       int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>       int next_out;
18,20d17
<       unsigned int total_in_hi32;
< 
<       char *next_out;
18,20d17
<       unsigned int total_in_hi32;
< 
<       char *next_out;
18,20d17
<       unsigned int total_in_hi32;
< 
<       char *next_out;
18,20d17
<       unsigned int total_in_hi32;
< 
<       char *next_out;
19,21d18
< 
<       char *next_out;
<       unsigned int avail_out;
20,21d19
<       char *next_out;
<       unsigned int avail_out;
(96.0 %, 8101 bytes)
17,19c17
<       int next_out;
<       unsigned int avail_out;
<       unsigned state;
---
>       int ;
17,21c17
<       int next_out;
<       unsigned int avail_out;
<       unsigned state;
< 
<       void *(*bzalloc);
---
>       int next_outvoid *(*bzalloc);
18,21c18
<       unsigned int avail_out;
<       unsigned state;
< 
<       void *(*bzalloc);
---
>       *(*bzalloc);
18,21c18
<       unsigned int avail_out;
<       unsigned state;
< 
<       void *(*bzalloc);
---
>       unsigned (*bzalloc);
18,21c18
<       unsigned int avail_out;
<       unsigned state;
< 
<       void *(*bzalloc);
---
>       unsigned int *bzalloc);
18,21c18
<       unsigned int avail_out;
<       unsigned state;
< 
<       void *(*bzalloc);
---
>       unsigned int avail_outbzalloc);
19,21c19
<       unsigned state;
< 
<       void *(*bzalloc);
---
>       );
19,21c19
<       unsigned state;
< 
<       void *(*bzalloc);
---
>       unsigned ;
(96.1 %, 8051 bytes)
18,21c18
<       unsigned (*bzalloc);
<       ;
<    } 
<    bz_stream;
---
>       unsigned ;
18,25c18
<       unsigned (*bzalloc);
<       ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       unsigned (#include <stdio.h>
18,25c18
<       unsigned (*bzalloc);
<       ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       unsigned (*include <stdio.h>
18,25c18
<       unsigned (*bzalloc);
<       ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       unsigned (*bzalloc<stdio.h>
18,25c18
<       unsigned (*bzalloc);
<       ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       unsigned (*bzalloc)stdio.h>
19,25c19
<       ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       .h>
20,25c20
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    h>
21,25c21
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    >
21,27c21
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    bz_stream#   define BZ_API(func) func
25,27c25
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> define BZ_API(func) func
25,27c25
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #BZ_API(func) func
25,27c25
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include (func) func
25,27c25
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <func) func
25,27c25
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdio) func
25,27c25
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdio.func
25,28c25
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <stdio.h#   define BZ_EXTERN extern
27,28c27
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> define BZ_EXTERN extern
27,28c27
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   BZ_EXTERN extern
27,28c27
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define extern
27,33c27
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #   define BZ_APIBZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
27,33c27
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #   define BZ_API(int BZ_API(BZ2_bzCompressInit) ( 
27,33c27
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #   define BZ_API(funcBZ_API(BZ2_bzCompressInit) ( 
27,33c27
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #   define BZ_API(func) (BZ2_bzCompressInit) ( 
28,33c28
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> BZ2_bzCompressInit) ( 
28,33c28
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #   ) ( 
28,33c28
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #   define ( 
28,34c28
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
---
> #   define BZ_EXTERN bz_stream* strm, 
33,34c33
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
---
> * strm, 
33,34c33
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
---
> BZ_EXTERN strm, 
33,34c33
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
---
> BZ_EXTERN int , 
33,35c33
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
---
> BZ_EXTERN int BZ_APIint        blockSize100k, 
33,35c33
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
---
> BZ_EXTERN int BZ_API(blockSize100k, 
33,35c33
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit, 
33,36c33
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit) int        verbosity, 
34,36c34
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
---
>       verbosity, 
34,36c34
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
---
>       bz_stream, 
34,37c34
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
---
>       bz_stream* int        workFactor 
34,37c34
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
---
>       bz_stream* strmworkFactor 
35,38c35
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
---
>       );
35,38c35
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
---
>       int        ;
35,40c35
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API();
---
>       int        blockSize100kBZ_EXTERN int BZ_API();
36,40c36
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API();
---
>       int BZ_API();
36,40c36
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API();
---
>       int        BZ_API();
36,40c36
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API();
---
>       int        verbosity();
37,40c37
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API();
---
>       );
37,40c37
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API();
---
>       int        ;
38,42c38
<    );
< 
< BZ_EXTERN int BZ_API();
< 
< BZ_EXTERN int ;
---
>    BZ_EXTERN int ;
38,42c38
<    );
< 
< BZ_EXTERN int BZ_API();
< 
< BZ_EXTERN int ;
---
>    )int ;
40,42c40
< BZ_EXTERN int BZ_API();
< 
< BZ_EXTERN int ;
---
> ;
40,44c40
< BZ_EXTERN int BZ_API();
< 
< BZ_EXTERN int ;
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
40,44c40
< BZ_EXTERN int BZ_API();
< 
< BZ_EXTERN int ;
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN int int BZ_API(BZ2_bzDecompressInit) ( 
40,44c40
< BZ_EXTERN int BZ_API();
< 
< BZ_EXTERN int ;
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN int BZ_APIBZ_API(BZ2_bzDecompressInit) ( 
40,44c40
< BZ_EXTERN int BZ_API();
< 
< BZ_EXTERN int ;
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN int BZ_API((BZ2_bzDecompressInit) ( 
40,44c40
< BZ_EXTERN int BZ_API();
< 
< BZ_EXTERN int ;
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN int BZ_API()BZ2_bzDecompressInit) ( 
42,44c42
< BZ_EXTERN int ;
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> ) ( 
(96.1 %, 8012 bytes)
40,43c40
< ;
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
<       );
---
> );
42,43c42
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
<       );
---
> ;
42,45c42
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
<       );
< 
< BZ_EXTERN int ;
---
> BZ_EXTERN BZ_EXTERN int ;
42,45c42
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
<       );
< 
< BZ_EXTERN int ;
---
> BZ_EXTERN int int ;
42,45c42
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
<       );
< 
< BZ_EXTERN int ;
---
> BZ_EXTERN int BZ_API;
(96.1 %, 7959 bytes)
42,52c42
< ;
< 
< BZ_EXTERN int ;
< 
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> define BZ_MAX_UNUSED 5000
44,52c44
< BZ_EXTERN int ;
< 
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> BZ_MAX_UNUSED 5000
44,52c44
< BZ_EXTERN int ;
< 
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> BZ_EXTERN 5000
44,54c44
< BZ_EXTERN int ;
< 
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> BZ_EXTERN int typedef void BZFILE;
46,54c46
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> void BZFILE;
46,54c46
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> BZ_EXTERN BZFILE;
48,55d47
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
52,55d51
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
52,56c52
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #BZFILE* BZ_API(BZ2_bzReadOpen) ( 
52,56c52
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #define * BZ_API(BZ2_bzReadOpen) ( 
52,56c52
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #define BZ_MAX_UNUSED BZ_API(BZ2_bzReadOpen) ( 
54,56c54
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> (BZ2_bzReadOpen) ( 
54,56c54
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> typedef BZ2_bzReadOpen) ( 
54,56c54
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> typedef void ) ( 
54,56c54
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> typedef void BZFILE( 
56,57c56
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> int*  bzerror,   
56,57c56
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> BZ_EXTERN *  bzerror,   
56,57c56
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> BZ_EXTERN BZFILEbzerror,   
56,57c56
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> BZ_EXTERN BZFILE* ,   
56,58c56
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_APIFILE* f, 
56,58c56
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(* f, 
56,58c56
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpenf, 
56,58c56
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) , 
(96.1 %, 7915 bytes)
54,56c54
< typedef void BZFILE( 
<       int*  bzerror,   
<       FILE* f, 
---
> typedef void BZFILE, 
55,56d54
<       int*  bzerror,   
<       FILE* f, 
55,57c55
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
>       intverbosity, 
55,57c55
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
>       int*  , 
(96.2 %, 7875 bytes)
55,57c55
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       unused,    
55,57c55
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       int   ,    
55,58c55
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       int   verbosityint   nUnused 
56,58c56
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       nUnused 
56,59c56
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       int   );
(96.2 %, 7826 bytes)
55,59c55
<       int   ,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(b 
---
>       int   (b 
56,59c56
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(b 
---
>       b 
56,60c56
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(b 
<    );
---
>       int   );
57,60c57
<    );
< 
< BZ_EXTERN void BZ_API(b 
<    );
---
>    ;
57,62c57
<    );
< 
< BZ_EXTERN void BZ_API(b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>    )BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
59,62c59
< BZ_EXTERN void BZ_API(b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> void BZ_API(BZ2_bzReadGetUnused) ( 
(96.2 %, 7782 bytes)
56,58c56
<       int   );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       int   ( 
56,59c56
<       int   );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
>       int   )int*    bzerror, 
58,59c58
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> *    bzerror, 
58,59c58
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN bzerror, 
58,59c58
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void , 
58,60c58
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_APIBZFILE* b, 
58,60c58
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(* b, 
58,60c58
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnusedb, 
58,60c58
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) , 
59,60d58
<       int*    bzerror, 
<       BZFILE* b, 
59,61c59
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int**  unused,  
59,61c59
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int*    *  unused,  
59,61c59
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int*    bzerrorunused,  
60,61c60
<       BZFILE* b, 
<       void**  unused,  
---
>       ,  
60,62c60
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       BZFILEint*    nUnused 
60,62c60
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       BZFILE* *    nUnused 
60,62c60
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       BZFILE* bnUnused 
61,63c61
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       );
61,63c61
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       void;
61,65c61
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       void*BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
61,65c61
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       void**  int BZ_API(BZ2_bzRead) ( 
61,65c61
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       void**  unusedBZ_API(BZ2_bzRead) ( 
62,65c62
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       (BZ2_bzRead) ( 
62,65c62
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       intBZ2_bzRead) ( 
62,65c62
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       int*    ) ( 
63,65c63
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>    ( 
63,66c63
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
>    )int*    bzerror, 
65,66c65
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
> *    bzerror, 
65,66c65
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
> BZ_EXTERN bzerror, 
65,66c65
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
> BZ_EXTERN int , 
65,67c65
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN int BZ_APIBZFILE* b, 
65,67c65
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN int BZ_API(* b, 
65,67c65
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN int BZ_API(BZ2_bzReadb, 
65,67c65
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN int BZ_API(BZ2_bzRead) , 
66,67d65
<       int*    bzerror, 
<       BZFILE* b, 
66,68c66
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int*   buf, 
66,68c66
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int*    buf, 
67,68d66
<       BZFILE* b, 
<       void*   buf, 
67,68d66
<       BZFILE* b, 
<       void*   buf, 
67,69c67
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       BZFILElen 
67,70c67
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       BZFILE* );
67,70c67
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       BZFILE* b;
68,72c68
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
68,72c68
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       voidBZFILE* BZ_API(BZ2_bzWriteOpen) ( 
68,72c68
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       void*   * BZ_API(BZ2_bzWriteOpen) ( 
68,72c68
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       void*   bufBZ_API(BZ2_bzWriteOpen) ( 
69,72c69
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       (BZ2_bzWriteOpen) ( 
69,72c69
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       int     BZ2_bzWriteOpen) ( 
70,72c70
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>    ) ( 
70,72c70
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>    )( 
72,73c72
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> int*  bzerror,      
72,73c72
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN *  bzerror,      
72,73c72
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILEbzerror,      
72,73c72
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE* ,      
72,74c72
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_APIFILE* f, 
72,74c72
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(* f, 
72,74c72
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpenf, 
72,74c72
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) , 
73,74d72
<       int*  bzerror,      
<       FILE* f, 
73,75c73
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
>       intblockSize100k, 
73,75c73
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
>       int*  , 
73,76c73
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int*  bzerrorint   verbosity, 
74,76c74
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       verbosity, 
74,76c74
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       FILE, 
74,77c74
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       FILE* int   workFactor 
74,77c74
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       FILE* fworkFactor 
75,78c75
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       );
75,78c75
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       int   ;
75,80c75
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   blockSize100kBZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
76,80c76
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       void BZ_API(BZ2_bzWrite) ( 
76,80c76
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   BZ_API(BZ2_bzWrite) ( 
76,80c76
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   verbosity(BZ2_bzWrite) ( 
77,80c77
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       BZ2_bzWrite) ( 
77,80c77
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   ) ( 
78,80c78
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>    ( 
78,81c78
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
>    )int*    bzerror, 
80,81c80
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
> *    bzerror, 
80,81c80
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
> BZ_EXTERN bzerror, 
80,81c80
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void , 
80,82c80
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_APIBZFILE* b, 
80,82c80
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(* b, 
80,82c80
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteb, 
80,82c80
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite) , 
81,82d80
<       int*    bzerror, 
<       BZFILE* b, 
81,83c81
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int*   buf, 
81,83c81
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int*    buf, 
82,83d81
<       BZFILE* b, 
<       void*   buf, 
82,83d81
<       BZFILE* b, 
<       void*   buf, 
82,84c82
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       BZFILElen 
82,85c82
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       BZFILE* );
82,85c82
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       BZFILE* b;
83,87c83
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
83,87c83
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       voidvoid BZ_API(BZ2_bzWriteClose) ( 
83,87c83
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       void*   BZ_API(BZ2_bzWriteClose) ( 
83,87c83
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       void*   buf(BZ2_bzWriteClose) ( 
84,87c84
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       BZ2_bzWriteClose) ( 
84,87c84
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       int     ) ( 
85,87c85
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>    ( 
85,88c85
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
>    )int*          bzerror, 
87,88c87
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> *          bzerror, 
87,88c87
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN bzerror, 
87,88c87
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void , 
87,89c87
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_APIBZFILE*       b, 
87,89c87
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(*       b, 
87,89c87
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteCloseb, 
87,89c87
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose) , 
88,89d87
<       int*          bzerror, 
<       BZFILE*       b, 
88,90c88
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       intabandon, 
88,90c88
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       int*          , 
88,91c88
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int*          bzerrorunsigned int* nbytes_in, 
89,91c89
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int* nbytes_in, 
89,91c89
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       BZFILE* nbytes_in, 
89,91c89
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       BZFILE*       nbytes_in, 
90,91d89
<       int           abandon, 
<       unsigned int* nbytes_in, 
90,91d89
<       int           abandon, 
<       unsigned int* nbytes_in, 
90,92c90
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int           int* nbytes_out 
90,92c90
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int           abandon* nbytes_out 
91,92c91
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       nbytes_out 
91,93c91
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       unsigned );
91,93c91
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       unsigned int;
91,95c91
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int* BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
91,95c91
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int* nbytes_invoid BZ_API(BZ2_bzWriteClose64) ( 
92,95c92
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       BZ_API(BZ2_bzWriteClose64) ( 
92,95c92
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned (BZ2_bzWriteClose64) ( 
92,95c92
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned intBZ2_bzWriteClose64) ( 
92,95c92
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int* ) ( 
93,95c93
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>    ( 
93,96c93
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>    )int*          bzerror, 
95,96c95
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> *          bzerror, 
95,96c95
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> BZ_EXTERN bzerror, 
95,96c95
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void , 
95,97c95
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_APIBZFILE*       b, 
95,97c95
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(*       b, 
95,97c95
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64b, 
95,97c95
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) , 
96,97d95
<       int*          bzerror, 
<       BZFILE*       b, 
96,98c96
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       intabandon, 
96,98c96
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       int*          , 
96,99c96
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int*          bzerrorunsigned int* nbytes_in_lo32, 
97,99c97
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int* nbytes_in_lo32, 
97,99c97
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       BZFILE* nbytes_in_lo32, 
97,99c97
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       BZFILE*       nbytes_in_lo32, 
98,99d97
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
98,99d97
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
98,100c98
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int           int* nbytes_in_hi32, 
98,100c98
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int           abandon* nbytes_in_hi32, 
99,100c99
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       nbytes_in_hi32, 
99,100c99
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned , 
99,101c99
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned intunsigned int* nbytes_out_lo32, 
99,101c99
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned int* int* nbytes_out_lo32, 
99,101c99
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned int* nbytes_in_lo32* nbytes_out_lo32, 
100,101c100
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       nbytes_out_lo32, 
100,101c100
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned , 
100,102c100
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned intunsigned int* nbytes_out_hi32
100,102c100
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned int* int* nbytes_out_hi32
100,102c100
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned int* nbytes_in_hi32* nbytes_out_hi32
101,102c101
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       nbytes_out_hi32
101,103c101
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned );
101,103c101
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned int;
101,108c101
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
101,108c101
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* nbytes_out_lo32int BZ_API(BZ2_bzBuffToBuffCompress) ( 
102,108c102
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       BZ_API(BZ2_bzBuffToBuffCompress) ( 
102,108c102
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned (BZ2_bzBuffToBuffCompress) ( 
102,108c102
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned intBZ2_bzBuffToBuffCompress) ( 
102,108c102
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* ) ( 
103,108c103
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>    ( 
103,109c103
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>    )char*         dest, 
108,109c108
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> *         dest, 
108,109c108
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> BZ_EXTERN dest, 
108,109c108
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int , 
108,110c108
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_APIunsigned int* destLen,
108,110c108
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(int* destLen,
108,110c108
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress* destLen,
108,110c108
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) destLen,
109,110c109
<       char*         dest, 
<       unsigned int* destLen,
---
>       ,
109,111c109
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       charchar*         source, 
109,111c109
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       char*         *         source, 
109,111c109
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       char*         destsource, 
110,111c110
<       unsigned int* destLen,
<       char*         source, 
---
>       , 
110,112c110
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned unsigned int  sourceLen,
110,112c110
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned intint  sourceLen,
110,112c110
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* sourceLen,
111,112d110
<       char*         source, 
<       unsigned int  sourceLen,
111,112d110
<       char*         source, 
<       unsigned int  sourceLen,
111,113c111
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       charblockSize100k, 
111,113c111
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       char*         , 
111,114c111
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       char*         sourceint           verbosity, 
112,114c112
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       verbosity, 
112,114c112
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned , 
112,115c112
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       unsigned int  int           workFactor 
112,115c112
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       unsigned int  sourceLenworkFactor 
113,116c113
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       );
113,116c113
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       int           ;
113,118c113
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           blockSize100kBZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
114,118c114
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
114,118c114
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           BZ_API(BZ2_bzBuffToBuffDecompress) ( 
114,118c114
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           verbosity(BZ2_bzBuffToBuffDecompress) ( 
115,118c115
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       BZ2_bzBuffToBuffDecompress) ( 
115,118c115
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           ) ( 
116,118c116
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>    ( 
116,119c116
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>    )char*         dest, 
118,119c118
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> *         dest, 
118,119c118
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_EXTERN dest, 
118,119c118
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int , 
118,120c118
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_APIunsigned int* destLen,
118,120c118
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(int* destLen,
118,120c118
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress* destLen,
118,120c118
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) destLen,
119,120c119
<       char*         dest, 
<       unsigned int* destLen,
---
>       ,
119,121c119
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       charchar*         source, 
119,121c119
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       char*         *         source, 
119,121c119
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       char*         destsource, 
120,121c120
<       unsigned int* destLen,
<       char*         source, 
---
>       , 
120,122c120
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned unsigned int  sourceLen,
120,122c120
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned intint  sourceLen,
120,122c120
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* sourceLen,
121,122d120
<       char*         source, 
<       unsigned int  sourceLen,
121,122d120
<       char*         source, 
<       unsigned int  sourceLen,
121,123c121
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       charsmall, 
121,123c121
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       char*         , 
121,124c121
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
---
>       char*         sourceint           verbosity 
122,124c122
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
---
>       verbosity 
122,125c122
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
---
>       unsigned );
122,125c122
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
---
>       unsigned int  ;
122,130c122
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const ;
---
>       unsigned int  sourceLenBZ_EXTERN const ;
123,130c123
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const ;
---
>       const ;
123,130c123
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const ;
---
>       int           ;
123,132c123
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const ;
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       int           smallBZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
124,132c124
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const ;
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       BZFILE * BZ_API(BZ2_bzopen) (
124,132c124
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const ;
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       int           * BZ_API(BZ2_bzopen) (
125,132c125
<    );
< 
< 
< 
< 
< BZ_EXTERN const ;
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>    BZ_API(BZ2_bzopen) (
125,132c125
<    );
< 
< 
< 
< 
< BZ_EXTERN const ;
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>    )(BZ2_bzopen) (
130,132c130
< BZ_EXTERN const ;
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ2_bzopen) (
130,132c130
< BZ_EXTERN const ;
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN ) (
130,132c130
< BZ_EXTERN const ;
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN const (
132,133c132
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       );
---
> );
132,133c132
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       );
---
> BZ_EXTERN ;
132,135c132
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       );
< 
< BZ_EXTERN BZFILE * BZ_API(mode
---
> BZ_EXTERN BZFILE BZ_EXTERN BZFILE * BZ_API(mode
132,135c132
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       );
< 
< BZ_EXTERN BZFILE * BZ_API(mode
---
> BZ_EXTERN BZFILE * BZFILE * BZ_API(mode
132,135c132
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       );
< 
< BZ_EXTERN BZFILE * BZ_API(mode
---
> BZ_EXTERN BZFILE * BZ_API* BZ_API(mode
132,135c132
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       );
< 
< BZ_EXTERN BZFILE * BZ_API(mode
---
> BZ_EXTERN BZFILE * BZ_API(BZ_API(mode
132,135c132
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       );
< 
< BZ_EXTERN BZFILE * BZ_API(mode
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen(mode
132,135c132
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       );
< 
< BZ_EXTERN BZFILE * BZ_API(mode
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) mode
134,136d133
< 
< BZ_EXTERN BZFILE * BZ_API(mode
<    );
(96.2 %, 7745 bytes)
133,135d132
< 
< BZ_EXTERN BZFILE * BZ_API(mode
<    );
134,136d133
< BZ_EXTERN BZFILE * BZ_API(mode
<    );
<          
134,136d133
< BZ_EXTERN BZFILE * BZ_API(mode
<    );
<          
(96.2 %, 7707 bytes)
132,135c132
< BZ_EXTERN ;
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
---
> BZ_EXTERN BZFILE* b, 
134,135c134
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
---
> * b, 
134,135c134
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
---
> BZ_EXTERN b, 
134,135c134
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
---
> BZ_EXTERN int , 
134,136c134
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
---
> BZ_EXTERN int BZ_APIvoid* buf, 
134,136c134
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
---
> BZ_EXTERN int BZ_API(* buf, 
134,136c134
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
---
> BZ_EXTERN int BZ_API(BZ2_bzreadbuf, 
134,136c134
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
---
> BZ_EXTERN int BZ_API(BZ2_bzread) , 
135,136d134
<       BZFILE* b, 
<       void* buf, 
135,137c135
<       BZFILE* b, 
<       void* buf, 
<       int len 
---
>       BZFILElen 
135,138c135
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
---
>       BZFILE* );
135,138c135
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
---
>       BZFILE* b;
136,140c136
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>       BZ_EXTERN int BZ_API(BZ2_bzwrite) (
136,140c136
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>       voidint BZ_API(BZ2_bzwrite) (
136,140c136
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>       void* BZ_API(BZ2_bzwrite) (
136,140c136
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>       void* buf(BZ2_bzwrite) (
137,140c137
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>       BZ2_bzwrite) (
137,140c137
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>       int ) (
138,140c138
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>    (
138,141c138
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
---
>    )BZFILE* b, 
140,141c140
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
---
> * b, 
140,141c140
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
---
> BZ_EXTERN b, 
140,141c140
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
---
> BZ_EXTERN int , 
140,142c140
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int BZ_APIvoid*   buf, 
140,142c140
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int BZ_API(*   buf, 
140,142c140
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int BZ_API(BZ2_bzwritebuf, 
140,142c140
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int BZ_API(BZ2_bzwrite) , 
141,142d140
<       BZFILE* b, 
<       void*   buf, 
141,143c141
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       BZFILElen 
141,144c141
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       BZFILE* );
141,144c141
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       BZFILE* b;
142,146c142
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int ;
---
>       BZ_EXTERN int ;
142,146c142
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int ;
---
>       voidint ;
142,146c142
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int ;
---
>       void*   ;
142,148c142
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int ;
< 
< BZ_EXTERN void ;
---
>       void*   bufBZ_EXTERN void ;
143,148c143
<       int     len 
<    );
< 
< BZ_EXTERN int ;
< 
< BZ_EXTERN void ;
---
>       void ;
143,148c143
<       int     len 
<    );
< 
< BZ_EXTERN int ;
< 
< BZ_EXTERN void ;
---
>       int     ;
144,150c144
<    );
< 
< BZ_EXTERN int ;
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN const char * BZ_API(errnum
---
>    BZ_EXTERN const char * BZ_API(errnum
144,150c144
<    );
< 
< BZ_EXTERN int ;
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN const char * BZ_API(errnum
---
>    )const char * BZ_API(errnum
146,150c146
< BZ_EXTERN int ;
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN const char * BZ_API(errnum
---
> char * BZ_API(errnum
146,150c146
< BZ_EXTERN int ;
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN const char * BZ_API(errnum
---
> BZ_EXTERN * BZ_API(errnum
146,150c146
< BZ_EXTERN int ;
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN const char * BZ_API(errnum
---
> BZ_EXTERN int BZ_API(errnum
148,150c148
< BZ_EXTERN void ;
< 
< BZ_EXTERN const char * BZ_API(errnum
---
> (errnum
148,150c148
< BZ_EXTERN void ;
< 
< BZ_EXTERN const char * BZ_API(errnum
---
> BZ_EXTERN errnum
148,151c148
< BZ_EXTERN void ;
< 
< BZ_EXTERN const char * BZ_API(errnum
<    );
---
> BZ_EXTERN void );
150,151c150
< BZ_EXTERN const char * BZ_API(errnum
<    );
---
> ;
150,161c150
< BZ_EXTERN const char * BZ_API(errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> BZ_EXTERN #define define BZ_VERSION  "1.0.2, 30-Dec-2001"
150,161c150
< BZ_EXTERN const char * BZ_API(errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> BZ_EXTERN const define define BZ_VERSION  "1.0.2, 30-Dec-2001"
150,161c150
< BZ_EXTERN const char * BZ_API(errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> BZ_EXTERN const char define BZ_VERSION  "1.0.2, 30-Dec-2001"
150,161c150
< BZ_EXTERN const char * BZ_API(errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> BZ_EXTERN const char * BZ_VERSION  "1.0.2, 30-Dec-2001"
150,161c150
< BZ_EXTERN const char * BZ_API(errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> BZ_EXTERN const char * BZ_API"1.0.2, 30-Dec-2001"
150,163c150
< BZ_EXTERN const char * BZ_API(errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> BZ_EXTERN const char * BZ_API(typedef char            Char;
151,163c151
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
>    char            Char;
(96.3 %, 7666 bytes)
150,162c150
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> Char;
160,162c160
< #define define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> ;
(96.3 %, 7582 bytes)
150,152c150
< Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> unsigned char   UChar;
150,152c150
< Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> Charchar   UChar;
151,152c151
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> UChar;
151,152c151
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef ;
151,153c151
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef unsigned typedef int             Int32;
151,153c151
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef unsigned char   int             Int32;
151,153c151
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef unsigned char   BoolInt32;
152,153c152
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> ;
152,154c152
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef typedef unsigned int    UInt32;
152,154c152
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned unsigned int    UInt32;
152,154c152
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned char   int    UInt32;
152,154c152
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned char   UCharUInt32;
153,154c153
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> ;
153,155c153
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef typedef short           Int16;
153,155c153
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef int             short           Int16;
153,155c153
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef int             Int32Int16;
154,155c154
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> ;
154,156c154
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef typedef unsigned short  UInt16;
154,156c154
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef unsigned unsigned short  UInt16;
154,156c154
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef unsigned int    short  UInt16;
154,156c154
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef unsigned int    UInt32UInt16;
155,156c155
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> ;
155,158c155
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  (1)
---
> typedef #define True  (1)
155,158c155
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  (1)
---
> typedef short           define True  (1)
155,158c155
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  (1)
---
> typedef short           Int16True  (1)
156,158c156
< typedef unsigned short  UInt16;
< 
< #define True  (1)
---
> (1)
156,158c156
< typedef unsigned short  UInt16;
< 
< #define True  (1)
---
> typedef 1)
156,158c156
< typedef unsigned short  UInt16;
< 
< #define True  (1)
---
> typedef unsigned )
156,159c156
< typedef unsigned short  UInt16;
< 
< #define True  (1)
< #define False 
---
> typedef unsigned short  #define False 
(96.3 %, 7521 bytes)
155,158c155
< ;
< 
< #define True  (1)
< #define False 
---
> define False 
157,158c157
< #define True  (1)
< #define False 
---
> False 
157,160c157
< #define True  (1)
< #define False 
< 
< #define define #define BZ_HDR_0 0x30   
---
> ##define define #define BZ_HDR_0 0x30   
157,160c157
< #define True  (1)
< #define False 
< 
< #define define #define BZ_HDR_0 0x30   
---
> #define define define #define BZ_HDR_0 0x30   
157,160c157
< #define True  (1)
< #define False 
< 
< #define define #define BZ_HDR_0 0x30   
---
> #define True  define #define BZ_HDR_0 0x30   
(96.3 %, 7494 bytes)
157,160d156
< #define define define #define BZ_HDR_0 0x30   
<   
< 
< 
157,161c157
< #define define define #define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
---
> #define define 258
157,162c157
< #define define define #define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
---
> #define define define #define BZ_MAX_CODE_LEN    23
157,162c157
< #define define define #define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
---
> #define define define #define BZ_MAX_CODE_LEN    23
157,162c157
< #define define define #define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
---
> #define define define #define BZ_MAX_CODE_LEN    23
157,162c157
< #define define define #define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
---
> #define define define #define BZ_HDR_0 23
161,163d160
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
161,163d160
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
161,163d160
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
(96.4 %, 7442 bytes)
157,159d156
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
157,160c157
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
---
> #define BZ_MAX_ALPHA_SIZE 0
158,160d157
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
(96.4 %, 7391 bytes)
157,160c157
< #define BZ_MAX_ALPHA_SIZE 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> #define BZ_MAX_ALPHA_SIZE 6
158,160d157
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
158,160d157
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
(96.4 %, 7350 bytes)
157,159c157
< #define BZ_MAX_ALPHA_SIZE 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define BZ_MAX_ALPHA_SIZE 4
158,160d157
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
158,160d157
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
(96.4 %, 7305 bytes)
157,159c157
< #define BZ_MAX_ALPHA_SIZE 4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_ALPHA_SIZE 900000 / BZ_G_SIZE))
159c159
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> / BZ_G_SIZE))
159c159
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #BZ_G_SIZE))
159c159
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define ))
159c159
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS )
159,167c159
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #define BZ_MAX_SELECTORS (#define BZ_RAND_DECLS                          \
(96.4 %, 7280 bytes)
159,168c159
< #define BZ_MAX_SELECTORS )
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_MAX_SELECTORS \
167,169c167
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> Int32 rTPos                                 \
167,169c167
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #rTPos                                 \
167,169c167
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #define \
167,171c167
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      #define BZ_N_SHELL 18
---
> #define BZ_RAND_DECLS                          #define BZ_RAND_INIT_MASK                      #define BZ_N_SHELL 18
(96.5 %, 7175 bytes)
159,162c159
< #define BZ_MAX_SELECTORS \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      #define BZ_N_SHELL 18
---
> #define BZ_MAX_SELECTORS define BZ_N_SHELL 18
160,162c160
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      #define BZ_N_SHELL 18
---
>    BZ_N_SHELL 18
(96.5 %, 7075 bytes)
159,168c159
< #define BZ_MAX_SELECTORS define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT 
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #define BZ_MAX_SELECTORS {
159,170c159
< #define BZ_MAX_SELECTORS define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT 
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       ;
---
> #define BZ_MAX_SELECTORS define ;
159,173c159
< #define BZ_MAX_SELECTORS define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT 
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       ;
< 
<       
<       UInt32   mtfvstate_in_ch;
---
> #define BZ_MAX_SELECTORS define BZ_N_SHELL UInt32   mtfvstate_in_ch;
160,173c160
< #define BZ_N_OVERSHOOT 
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       ;
< 
<       
<       UInt32   mtfvstate_in_ch;
---
> mtfvstate_in_ch;
160,173c160
< #define BZ_N_OVERSHOOT 
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       ;
< 
<       
<       UInt32   mtfvstate_in_ch;
---
> #;
160,174c160
< #define BZ_N_OVERSHOOT 
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       ;
< 
<       
<       UInt32   mtfvstate_in_ch;
<       Int32    ;
---
> #define Int32    ;
167,174c167
< typedef
<    struct {
<       
<       ;
< 
<       
<       UInt32   mtfvstate_in_ch;
<       Int32    ;
---
> ;
168,175c168
<    struct {
<       
<       ;
< 
<       
<       UInt32   mtfvstate_in_ch;
<       Int32    ;
<       Bool     inUse[BZ_MAX_ALPHA_SIZE][4];
---
>    Bool     inUse[BZ_MAX_ALPHA_SIZE][4];
168,175c168
<    struct {
<       
<       ;
< 
<       
<       UInt32   mtfvstate_in_ch;
<       Int32    ;
<       Bool     inUse[BZ_MAX_ALPHA_SIZE][4];
---
>    struct inUse[BZ_MAX_ALPHA_SIZE][4];
170,175c170
<       ;
< 
<       
<       UInt32   mtfvstate_in_ch;
<       Int32    ;
<       Bool     inUse[BZ_MAX_ALPHA_SIZE][4];
---
>       [BZ_MAX_ALPHA_SIZE][4];
173,175c173
<       UInt32   mtfvstate_in_ch;
<       Int32    ;
<       Bool     inUse[BZ_MAX_ALPHA_SIZE][4];
---
>       BZ_MAX_ALPHA_SIZE][4];
173,175c173
<       UInt32   mtfvstate_in_ch;
<       Int32    ;
<       Bool     inUse[BZ_MAX_ALPHA_SIZE][4];
---
>       UInt32   ][4];
173,175c173
<       UInt32   mtfvstate_in_ch;
<       Int32    ;
<       Bool     inUse[BZ_MAX_ALPHA_SIZE][4];
---
>       UInt32   mtfvstate_in_ch[4];
174,175c174
<       Int32    ;
<       Bool     inUse[BZ_MAX_ALPHA_SIZE][4];
---
>       4];
174,175c174
<       Int32    ;
<       Bool     inUse[BZ_MAX_ALPHA_SIZE][4];
---
>       Int32    ];
175c175
<       Bool     inUse[BZ_MAX_ALPHA_SIZE][4];
---
>       ;
(96.6 %, 7017 bytes)
173,186c173
<       UInt32   mtfvstate_in_ch[4];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< #define BZ_X_MAGIC_1     #define BZ_X_CCRC_3      49
---
>       UInt32   mtfvstate_in_ch#define BZ_X_MAGIC_1     #define BZ_X_CCRC_3      49
173,186c173
<       UInt32   mtfvstate_in_ch[4];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< #define BZ_X_MAGIC_1     #define BZ_X_CCRC_3      49
---
>       UInt32   mtfvstate_in_ch[define BZ_X_MAGIC_1     #define BZ_X_CCRC_3      49
173,186c173
<       UInt32   mtfvstate_in_ch[4];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< #define BZ_X_MAGIC_1     #define BZ_X_CCRC_3      49
---
>       UInt32   mtfvstate_in_ch[4BZ_X_MAGIC_1     #define BZ_X_CCRC_3      49
173,186c173
<       UInt32   mtfvstate_in_ch[4];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< #define BZ_X_MAGIC_1     #define BZ_X_CCRC_3      49
---
>       UInt32   mtfvstate_in_ch[4]#define BZ_X_CCRC_3      49
175,186c175
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< #define BZ_X_MAGIC_1     #define BZ_X_CCRC_3      49
---
>    define BZ_X_CCRC_3      49
176,186c176
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< #define BZ_X_MAGIC_1     #define BZ_X_CCRC_3      49
---
>    BZ_X_CCRC_3      49
176,186c176
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< #define BZ_X_MAGIC_1     #define BZ_X_CCRC_3      49
---
>    EState49
184,186d183
< ;
< 
< #define BZ_X_MAGIC_1     #define BZ_X_CCRC_3      49
186,187c186
< #define BZ_X_MAGIC_1     #define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
---
> define BZ_X_CCRC_4      50
186,187c186
< #define BZ_X_MAGIC_1     #define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
---
> #BZ_X_CCRC_4      50
186,187c186
< #define BZ_X_MAGIC_1     #define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
---
> #define 50
186,193c186
< #define BZ_X_MAGIC_1     #define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
---
> #define BZ_X_MAGIC_1     #define MTFA_SIZE 4096
186,193c186
< #define BZ_X_MAGIC_1     #define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
---
> #define BZ_X_MAGIC_1     #define MTFA_SIZE 4096
186,193c186
< #define BZ_X_MAGIC_1     #define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
---
> #define BZ_X_MAGIC_1     #define MTFA_SIZE 4096
186,193c186
< #define BZ_X_MAGIC_1     #define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
---
> #define BZ_X_MAGIC_1     #define BZ_X_CCRC_3      4096
187,193d186
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
(96.6 %, 6961 bytes)
184,190d183
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
184,190d183
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
184,190d183
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
184,191c184
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> #define BZ_X_CCRC_4      16
190,196d189
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
190,198c190
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #struct {
190,198c190
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #define {
190,200c190
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       Int32    cftab;
---
> #define MTFA_SIZE Int32    cftab;
191,200c191
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       Int32    cftab;
---
> cftab;
191,200c191
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       Int32    cftab;
---
> #;
191,203c191
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       Int32    cftab;
< 
<       
<       UInt32   inUse[MTFA_SIZE];
---
> #define UInt32   inUse[MTFA_SIZE];
191,203c191
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       Int32    cftab;
< 
<       
<       UInt32   inUse[MTFA_SIZE];
---
> #define MTFL_SIZE inUse[MTFA_SIZE];
197,203c197
< typedef
<    struct {
<       
<       Int32    cftab;
< 
<       
<       UInt32   inUse[MTFA_SIZE];
---
> [MTFA_SIZE];
198,203c198
<    struct {
<       
<       Int32    cftab;
< 
<       
<       UInt32   inUse[MTFA_SIZE];
---
>    MTFA_SIZE];
198,203c198
<    struct {
<       
<       Int32    cftab;
< 
<       
<       UInt32   inUse[MTFA_SIZE];
---
>    struct ];
200,203c200
<       Int32    cftab;
< 
<       
<       UInt32   inUse[MTFA_SIZE];
---
>       ;
200,204c200
<       Int32    cftab;
< 
<       
<       UInt32   inUse[MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       Int32    Int32    mtfbase[256 / MTFL_SIZE];
200,204c200
<       Int32    cftab;
< 
<       
<       UInt32   inUse[MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       Int32    cftabmtfbase[256 / MTFL_SIZE];
(96.6 %, 6906 bytes)
201d200
<       Int32    mtfbase[256 / MTFL_SIZE];
201d200
<       Int32    mtfbase[256 / MTFL_SIZE];
201,202c201
<       Int32    mtfbase[256 / MTFL_SIZE];
<       Int32*   save_gLimit}
---
>       Int32    *   save_gLimit}
(96.7 %, 6865 bytes)
200,208c200
<       ;
<       Int32*   save_gLimit}
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST                     init_RL ( void )
---
>       define BZ_GET_FAST                     init_RL ( void )
201,208c201
<       Int32*   save_gLimit}
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST                     init_RL ( void )
---
>       BZ_GET_FAST                     init_RL ( void )
201,208c201
<       Int32*   save_gLimit}
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST                     init_RL ( void )
---
>       Int32init_RL ( void )
201,208c201
<       Int32*   save_gLimit}
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST                     init_RL ( void )
---
>       Int32*   ( void )
201,208c201
<       Int32*   save_gLimit}
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST                     init_RL ( void )
---
>       Int32*   save_gLimitvoid )
202,208c202
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST                     init_RL ( void )
---
>    )
205,211d204
< 
< 
< 
< #define BZ_GET_FAST                     init_RL ( void )
< ;
< 
< 
208,211d207
< #define BZ_GET_FAST                     init_RL ( void )
< ;
< 
< 
208,213c208
< #define BZ_GET_FAST                     init_RL ( void )
< ;
< 
< 
< static
< Bool isempty_RL 
---
> #Bool isempty_RL 
(96.7 %, 6801 bytes)
202,211c202
<    DState;
< 
< 
< static
< Bool isempty_RL 
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
>    DStateBZ2_bzCompressInit) 
205,211c205
< static
< Bool isempty_RL 
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
> ) 
206,212c206
< Bool isempty_RL 
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> ( bz_stream* strm, 
206,212c206
< Bool isempty_RL 
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> Bool bz_stream* strm, 
207,212c207
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> * strm, 
211,212c211
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> strm, 
211,212c211
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> int , 
211,213c211
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> int BZ_APIint        blockSize100k,
211,213c211
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> int BZ_API(blockSize100k,
211,213c211
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> int BZ_API(BZ2_bzCompressInit,
212,214c212
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
>                     int        verbosity,
212,214c212
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
>                     ( verbosity,
212,214c212
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
>                     ( bz_stream,
212,215c212
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
>                     ( bz_stream* int        workFactor )
212,215c212
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
>                     ( bz_stream* strmworkFactor )
213,215c213
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
>                      )
213,216c213
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< ;
---
>                      int        ;
213,228c213
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ_API(*strm )
---
>                      int        blockSize100kBZ_API(*strm )
214,228c214
<                      int        verbosity,
<                      int        workFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ_API(*strm )
---
>                      (*strm )
214,228c214
<                      int        verbosity,
<                      int        workFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ_API(*strm )
---
>                      int        *strm )
214,228c214
<                      int        verbosity,
<                      int        workFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ_API(*strm )
---
>                      int        verbositystrm )
215,228c215
<                      int        workFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ_API(*strm )
---
>                      )
215,229c215
<                      int        workFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ_API(*strm )
< ;
---
>                      int        ;
215,237c215
<                      int        workFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ_API(*strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>                      int        workFactor int BZ_API(BZ2_bzDecompressInit) 
216,237c216
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ_API(*strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
> BZ_API(BZ2_bzDecompressInit) 
228,237c228
< BZ_API(*strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
> (BZ2_bzDecompressInit) 
228,237c228
< BZ_API(*strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
> BZ_APIBZ2_bzDecompressInit) 
228,237c228
< BZ_API(*strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
> BZ_API() 
228,238c228
< BZ_API(*strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( )
---
> BZ_API(*( )
233,242d232
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( )
< ;
< 
< 
< 
(96.7 %, 6767 bytes)
228,234c228
< (BZ2_bzDecompressInit) 
<                      ( )
< ;
< 
< 
< 
< unRLE_obuf_to_output_SMALL ( bz_stream *strm )
---
> bz_stream *strm )
228,234c228
< (BZ2_bzDecompressInit) 
<                      ( )
< ;
< 
< 
< 
< unRLE_obuf_to_output_SMALL ( bz_stream *strm )
---
> (*strm )
228,234c228
< (BZ2_bzDecompressInit) 
<                      ( )
< ;
< 
< 
< 
< unRLE_obuf_to_output_SMALL ( bz_stream *strm )
---
> (BZ2_bzDecompressInitstrm )
(96.7 %, 6675 bytes)
228,240c228
< (*strm )
< ;
< 
< 
< 
< int ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR                    \
---
> (BZ_SETERR                    \
228,240c228
< (*strm )
< ;
< 
< 
< 
< int ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR                    \
---
> (*\
228,243c228
< (*strm )
< ;
< 
< 
< 
< int ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR                    \
< 
< 
< typedef 
---
> (*strm typedef 
229,244c229
< ;
< 
< 
< 
< int ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR                    \
< 
< 
< typedef 
<    struct {
---
> struct {
233,244c233
< int ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR                    \
< 
< 
< typedef 
<    struct {
---
> {
234,245d233
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR                    \
< 
< 
< typedef 
<    struct {
<       ;
240,246c240
< #define BZ_SETERR                    \
< 
< 
< typedef 
<    struct {
<       ;
<       Int32     bufN;
---
> Int32     bufN;
240,246c240
< #define BZ_SETERR                    \
< 
< 
< typedef 
<    struct {
<       ;
<       Int32     bufN;
---
> #bufN;
240,246c240
< #define BZ_SETERR                    \
< 
< 
< typedef 
<    struct {
<       ;
<       Int32     bufN;
---
> #define ;
240,247c240
< #define BZ_SETERR                    \
< 
< 
< typedef 
<    struct {
<       ;
<       Int32     bufN;
<       Bool      writing;
---
> #define BZ_SETERR                    Bool      writing;
243,247c243
< typedef 
<    struct {
<       ;
<       Int32     bufN;
<       Bool      writing;
---
> writing;
244,247c244
<    struct {
<       ;
<       Int32     bufN;
<       Bool      writing;
---
>    ;
244,248c244
<    struct {
<       ;
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
---
>    struct bz_stream strm;
245,248c245
<       ;
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
---
>       strm;
246,248c246
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
---
>       ;
246,249c246
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
>       Int32     Int32     lastErr;
246,249c246
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
>       Int32     bufNlastErr;
247,249c247
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
>       ;
247,250c247
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       Bool      Bool      initialisedOk;
247,250c247
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       Bool      writinginitialisedOk;
248,250c248
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       ;
248,251c248
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>       bz_stream }
248,252c248
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
---
>       bz_stream strmbzFile;
249,252c249
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
---
>       ;
249,260c249
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Int32     BZFILE* BZ_API(BZ2_bzWriteOpen) 
249,260c249
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Int32     lastErr* BZ_API(BZ2_bzWriteOpen) 
250,260c250
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       BZ_API(BZ2_bzWriteOpen) 
250,260c250
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Bool      (BZ2_bzWriteOpen) 
250,260c250
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Bool      initialisedOkBZ2_bzWriteOpen) 
251,260c251
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>    ) 
252,261c252
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>    ( int*  bzerror,      
252,261c252
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>    bzFileint*  bzerror,      
260,261c260
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> *  bzerror,      
260,261c260
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILEbzerror,      
260,261c260
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE* ,      
260,262c260
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* BZ_APIFILE* f, 
260,262c260
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* BZ_API(* f, 
260,262c260
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* BZ_API(BZ2_bzWriteOpenf, 
261,262c261
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     , 
261,263c261
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     ( int   blockSize100k, 
261,263c261
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     ( intblockSize100k, 
261,263c261
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     ( int*  , 
261,264c261
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( int*  bzerrorint   verbosity,
262,264c262
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       verbosity,
262,264c262
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       FILE,
262,265c262
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       FILE* int   workFactor )
262,265c262
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       FILE* fworkFactor )
263,265c263
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       )
263,266c263
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
---
>                       int   ;
263,271c263
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       int   blockSize100kvoid BZ_API(BZ2_bzWrite)
264,271c264
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       BZ_API(BZ2_bzWrite)
264,271c264
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       int   (BZ2_bzWrite)
264,271c264
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       int   verbosityBZ2_bzWrite)
265,271c265
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       )
265,272c265
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>                       int   ( int*    bzerror, 
265,272c265
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>                       int   workFactor int*    bzerror, 
266,272c266
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> *    bzerror, 
271,272c271
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> bzerror, 
271,272c271
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> void , 
271,273c271
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> void BZ_APIBZFILE* b, 
271,273c271
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> void BZ_API(* b, 
271,273c271
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> void BZ_API(BZ2_bzWriteb, 
272,273c272
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              , 
272,274c272
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( void*   buf, 
272,274c272
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( int*   buf, 
272,274c272
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( int*    buf, 
273,274d272
<                BZFILE* b, 
<                void*   buf, 
273,274d272
<                BZFILE* b, 
<                void*   buf, 
273,275c273
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>                BZFILElen )
273,275c273
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>                BZFILE* )
273,276c273
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
---
>                BZFILE* b;
274,280c274
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>                void BZ_API(BZ2_bzWriteClose)
274,280c274
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>                voidBZ_API(BZ2_bzWriteClose)
274,280c274
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>                void*   (BZ2_bzWriteClose)
274,280c274
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>                void*   bufBZ2_bzWriteClose)
275,280c275
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>                )
275,281c275
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>                int     ( int*          bzerror, 
275,281c275
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>                int     len int*          bzerror, 
276,281c276
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> *          bzerror, 
280,281c280
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> bzerror, 
280,281c280
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> void , 
280,282c280
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_APIBZFILE*       b, 
280,282c280
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_API(*       b, 
280,282c280
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_API(BZ2_bzWriteCloseb, 
281,282c281
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   , 
281,283c281
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int           abandon,
281,283c281
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( intabandon,
281,283c281
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int*          ,
281,284c281
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( int*          bzerrorunsigned int* nbytes_in,
282,284c282
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int* nbytes_in,
282,284c282
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     BZFILE* nbytes_in,
282,284c282
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     BZFILE*       nbytes_in,
282,284c282
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     BZFILE*       b,
283,284d282
<                     int           abandon,
<                     unsigned int* nbytes_in,
283,285c283
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     int           int* nbytes_out )
283,285c283
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     int           abandon* nbytes_out )
284,285c284
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     nbytes_out )
284,285c284
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned )
284,286c284
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
---
>                     unsigned int;
284,289c284
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned int* void BZ_API(BZ2_bzWriteClose64)
284,289c284
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned int* nbytes_inBZ_API(BZ2_bzWriteClose64)
285,289c285
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     (BZ2_bzWriteClose64)
285,289c285
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned BZ2_bzWriteClose64)
285,289c285
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned int)
285,290c285
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                     unsigned int* ( int*          bzerror, 
285,290c285
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                     unsigned int* nbytes_out int*          bzerror, 
286,290c286
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> *          bzerror, 
289,290c289
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> bzerror, 
289,290c289
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> void , 
289,291c289
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_APIBZFILE*       b, 
289,291c289
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_API(*       b, 
289,291c289
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_API(BZ2_bzWriteClose64b, 
290,291c290
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   , 
290,292c290
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int           abandon,
290,292c290
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( intabandon,
290,292c290
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int*          ,
290,293c290
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( int*          bzerrorunsigned int* nbytes_in_lo32,
291,293c291
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int* nbytes_in_lo32,
291,293c291
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     BZFILE* nbytes_in_lo32,
291,293c291
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     BZFILE*       nbytes_in_lo32,
291,293c291
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     BZFILE*       b,
292,293d291
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
292,294c292
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     int           int* nbytes_in_hi32,
292,294c292
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     int           abandon* nbytes_in_hi32,
293,294c293
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     nbytes_in_hi32,
293,294c293
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned ,
293,295c293
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned intunsigned int* nbytes_out_lo32,
293,295c293
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned int* int* nbytes_out_lo32,
293,295c293
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned int* nbytes_in_lo32* nbytes_out_lo32,
294,295c294
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     nbytes_out_lo32,
294,295c294
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned ,
294,296c294
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned intunsigned int* nbytes_out_hi32 )
294,296c294
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* int* nbytes_out_hi32 )
294,296c294
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_in_hi32* nbytes_out_hi32 )
295,296c295
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     nbytes_out_hi32 )
295,296c295
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned )
295,297c295
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
---
>                     unsigned int;
295,301c295
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned int* BZFILE* BZ_API(BZ2_bzReadOpen) 
295,301c295
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned int* nbytes_out_lo32* BZ_API(BZ2_bzReadOpen) 
296,301c296
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     BZ_API(BZ2_bzReadOpen) 
296,301c296
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned (BZ2_bzReadOpen) 
296,301c296
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned intBZ2_bzReadOpen) 
296,301c296
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned int* ) 
296,302c296
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>                     unsigned int* nbytes_out_hi32 ( int*  bzerror, 
297,302c297
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> int*  bzerror, 
301,302c301
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> *  bzerror, 
301,302c301
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> BZFILEbzerror, 
301,302c301
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> BZFILE* , 
301,303c301
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILE* BZ_APIFILE* f, 
301,303c301
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILE* BZ_API(* f, 
301,303c301
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILE* BZ_API(BZ2_bzReadOpenf, 
302,303c302
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    , 
302,304c302
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    ( int   verbosity,
302,304c302
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    ( intverbosity,
302,304c302
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    ( int*  ,
(96.8 %, 6607 bytes)
302,304c302
<                    ( int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    ( unused,
302,304c302
<                    ( int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    ( int   ,
302,305c302
<                    ( int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                    ( int   verbosityint   nUnused )
303,305c303
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      nUnused )
303,305c303
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      int   )
(96.8 %, 6529 bytes)
302,308c302
<                    ( int   ,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>                    ( int   BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
303,308c303
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>                      ) ( int *bzerror, BZFILE *b )
303,308c303
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>                      int   ( int *bzerror, BZFILE *b )
303,308c303
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>                      int   nUnused int *bzerror, BZFILE *b )
304,308c304
< ;
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> *bzerror, BZFILE *b )
308c308
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> bzerror, BZFILE *b )
308c308
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void , BZFILE *b )
308c308
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZFILE *b )
308c308
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API(*b )
308c308
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API(BZ2_bzReadCloseb )
308c308
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API(BZ2_bzReadClose) )
308,309c308
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< ;
---
> void BZ_API(BZ2_bzReadClose) ( ;
308,313c308
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> void BZ_API(BZ2_bzReadClose) ( int int BZ_API(BZ2_bzRead) 
308,313c308
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> void BZ_API(BZ2_bzReadClose) ( int *BZ_API(BZ2_bzRead) 
308,313c308
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror(BZ2_bzRead) 
308,313c308
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZ2_bzRead) 
308,313c308
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE ) 
(96.8 %, 6489 bytes)
308,313c308
< void BZ_API(*b )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> void BZ_API() 
308,314c308
< void BZ_API(*b )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> void BZ_API(*( int*    bzerror, 
308,314c308
< void BZ_API(*b )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> void BZ_API(*b int*    bzerror, 
309,314c309
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> *    bzerror, 
313,314c313
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> bzerror, 
313,314c313
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> int , 
313,315c313
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> int BZ_APIBZFILE* b, 
313,315c313
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> int BZ_API(* b, 
313,315c313
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> int BZ_API(BZ2_bzReadb, 
314,315c314
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            , 
314,316c314
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( void*   buf, 
314,316c314
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( int*   buf, 
314,316c314
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( int*    buf, 
315,316d314
<              BZFILE* b, 
<              void*   buf, 
315,316d314
<              BZFILE* b, 
<              void*   buf, 
315,317c315
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>              BZFILElen )
315,317c315
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>              BZFILE* )
315,318c315
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
---
>              BZFILE* b{
316,320c316
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = b;
---
>              bzFile* bzf = b;
316,320c316
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = b;
---
>              void* bzf = b;
316,320c316
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = b;
---
>              void*   bzf = b;
316,320c316
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = b;
---
>              void*   buf= b;
317,320c317
<              int     len )
< {
<    
<    bzFile* bzf = b;
---
>              b;
317,320c317
<              int     len )
< {
<    
<    bzFile* bzf = b;
---
>              int     ;
317,322c317
<              int     len )
< {
<    
<    bzFile* bzf = b;
< 
<    BZ_SETERR;
---
>              int     len BZ_SETERR;
318,322c318
< {
<    
<    bzFile* bzf = b;
< 
<    BZ_SETERR;
---
> ;
320,323d319
<    bzFile* bzf = b;
< 
<    BZ_SETERR;
< 
320,324c320
<    bzFile* bzf = b;
< 
<    BZ_SETERR;
< 
<    if (bzf == NULL || buf == 0)
---
>    bzFile(bzf == NULL || buf == 0)
320,324c320
<    bzFile* bzf = b;
< 
<    BZ_SETERR;
< 
<    if (bzf == NULL || buf == 0)
---
>    bzFile* bzf == NULL || buf == 0)
320,324c320
<    bzFile* bzf = b;
< 
<    BZ_SETERR;
< 
<    if (bzf == NULL || buf == 0)
---
>    bzFile* bzf == NULL || buf == 0)
320,324c320
<    bzFile* bzf = b;
< 
<    BZ_SETERR;
< 
<    if (bzf == NULL || buf == 0)
---
>    bzFile* bzf = NULL || buf == 0)
320,324c320
<    bzFile* bzf = b;
< 
<    BZ_SETERR;
< 
<    if (bzf == NULL || buf == 0)
---
>    bzFile* bzf = b|| buf == 0)
322,324c322
<    BZ_SETERR;
< 
<    if (bzf == NULL || buf == 0)
---
>    buf == 0)
322,324c322
<    BZ_SETERR;
< 
<    if (bzf == NULL || buf == 0)
---
>    BZ_SETERR== 0)
324c324
<    if (bzf == NULL || buf == 0)
---
>    0)
324c324
<    if (bzf == NULL || buf == 0)
---
>    if )
324,325c324
<    if (bzf == NULL || buf == 0)
<       bzf->strm.next_out ; 
---
>    if (bzf->strm.next_out ; 
324,325c324
<    if (bzf == NULL || buf == 0)
<       bzf->strm.next_out ; 
---
>    if (bzf ->strm.next_out ; 
324,325c324
<    if (bzf == NULL || buf == 0)
<       bzf->strm.next_out ; 
---
>    if (bzf == strm.next_out ; 
324,325c324
<    if (bzf == NULL || buf == 0)
<       bzf->strm.next_out ; 
---
>    if (bzf == NULL .next_out ; 
324,325c324
<    if (bzf == NULL || buf == 0)
<       bzf->strm.next_out ; 
---
>    if (bzf == NULL || next_out ; 
324,325c324
<    if (bzf == NULL || buf == 0)
<       bzf->strm.next_out ; 
---
>    if (bzf == NULL || buf ; 
324,326c324
<    if (bzf == NULL || buf == 0)
<       bzf->strm.next_out ; 
< }
---
>    if (bzf == NULL || buf == }
324,330c324
<    if (bzf == NULL || buf == 0)
<       bzf->strm.next_out ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    if (bzf == NULL || buf == 0void BZ_API(BZ2_bzReadGetUnused) 
325,330c325
<       bzf->strm.next_out ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>       BZ_API(BZ2_bzReadGetUnused) 
325,330c325
<       bzf->strm.next_out ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>       bzf(BZ2_bzReadGetUnused) 
325,330c325
<       bzf->strm.next_out ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>       bzf->BZ2_bzReadGetUnused) 
325,330c325
<       bzf->strm.next_out ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>       bzf->strm) 
325,331c325
<       bzf->strm.next_out ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>       bzf->strm.( int*    bzerror, 
325,331c325
<       bzf->strm.next_out ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>       bzf->strm.next_out int*    bzerror, 
326,331c326
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> *    bzerror, 
330,331c330
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> bzerror, 
330,331c330
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void , 
330,332c330
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> void BZ_APIBZFILE* b, 
330,332c330
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> void BZ_API(* b, 
330,332c330
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> void BZ_API(BZ2_bzReadGetUnusedb, 
331,332c331
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      , 
331,333c331
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( void**  unused, 
331,333c331
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( int**  unused, 
331,333c331
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( int*    *  unused, 
331,333c331
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( int*    bzerrorunused, 
332,333c332
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        , 
332,334c332
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        BZFILEint*    nUnused )
332,334c332
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        BZFILE* *    nUnused )
332,334c332
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        BZFILE* bnUnused )
333,334c333
<                        void**  unused, 
<                        int*    nUnused )
---
>                        )
333,335c333
<                        void**  unused, 
<                        int*    nUnused )
< ;
---
>                        void;
333,343c333
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        void*int BZ_API(BZ2_bzBuffToBuffCompress) 
333,343c333
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        void**  BZ_API(BZ2_bzBuffToBuffCompress) 
333,343c333
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        void**  unused(BZ2_bzBuffToBuffCompress) 
334,343c334
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        BZ2_bzBuffToBuffCompress) 
334,343c334
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        int) 
334,344c334
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>                        int*    ( char*         dest, 
334,344c334
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>                        int*    nUnused char*         dest, 
335,344c335
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> *         dest, 
343,344c343
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> dest, 
343,344c343
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> int , 
343,345c343
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int BZ_APIunsigned int* destLen,
343,345c343
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int BZ_API(int* destLen,
343,345c343
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompress* destLen,
344,345c344
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          destLen,
344,345c344
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( ,
344,346c344
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          ( charchar*         source, 
344,346c344
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          ( char*         *         source, 
344,346c344
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          ( char*         destsource, 
345,346c345
<                            unsigned int* destLen,
<                            char*         source, 
---
>                            , 
345,347c345
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            unsigned unsigned int  sourceLen,
345,347c345
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            unsigned intint  sourceLen,
345,347c345
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            unsigned int* sourceLen,
346,347d345
<                            char*         source, 
<                            unsigned int  sourceLen,
346,347d345
<                            char*         source, 
<                            unsigned int  sourceLen,
346,348c346
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            charblockSize100k, 
346,348c346
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            char*         , 
346,349c346
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            char*         sourceint           verbosity, 
347,349c347
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            verbosity, 
347,349c347
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned , 
347,350c347
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            unsigned int  int           workFactor )
347,350c347
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            unsigned int  sourceLenworkFactor )
348,350c348
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            )
348,351c348
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
---
>                            int           ;
348,355c348
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            int           blockSize100kint BZ_API(BZ2_bzBuffToBuffDecompress) 
349,355c349
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            BZ_API(BZ2_bzBuffToBuffDecompress) 
349,355c349
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            int           (BZ2_bzBuffToBuffDecompress) 
349,355c349
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            int           verbosityBZ2_bzBuffToBuffDecompress) 
350,355c350
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            ) 
350,356c350
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>                            int           ( char*         dest, 
350,356c350
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>                            int           workFactor char*         dest, 
351,356c351
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> *         dest, 
355,356c355
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> dest, 
355,356c355
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> int , 
355,357c355
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int BZ_APIunsigned int* destLen,
355,357c355
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int BZ_API(int* destLen,
355,357c355
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompress* destLen,
356,357c356
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            destLen,
356,357c356
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( ,
356,358c356
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( charchar*         source, 
356,358c356
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( char*         *         source, 
356,358c356
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( char*         destsource, 
357,358c357
<                              unsigned int* destLen,
<                              char*         source, 
---
>                              , 
357,359c357
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              unsigned unsigned int  sourceLen,
357,359c357
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              unsigned intint  sourceLen,
357,359c357
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              unsigned int* sourceLen,
358,359d357
<                              char*         source, 
<                              unsigned int  sourceLen,
358,359d357
<                              char*         source, 
<                              unsigned int  sourceLen,
358,360c358
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              charsmall,
358,360c358
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              char*         ,
358,361c358
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              char*         sourceint           verbosity )
359,361c359
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              verbosity )
359,361c359
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned )
359,362c359
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
---
>                              unsigned int  ;
359,371c359
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const ;
---
>                              unsigned int  sourceLenconst ;
360,371c360
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const ;
---
>                              ;
360,376c360
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const ;
< 
< 
< 
< 
< static
---
>                              int           static
360,377c360
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
>                              int           smallBZFILE * bzopen_or_bzdopen
361,377c361
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
>                              * bzopen_or_bzdopen
361,377c361
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
>                              int           bzopen_or_bzdopen
361,379c361
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                      
< ;
---
>                              int           verbosity ;
362,383d361
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                      
< ;
< 
< 
< 
< 
371,384c371
< const ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
> * BZ_API(BZ2_bzopen)
371,384c371
< const ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
> const BZ_API(BZ2_bzopen)
(96.9 %, 6408 bytes)
371,372c371
< * BZ_API(BZ2_bzopen)
<                ( int fd,
---
> ,
371,373c371
< * BZ_API(BZ2_bzopen)
<                ( int fd,
<                  const char *mode )
---
> * const char *mode )
371,373c371
< * BZ_API(BZ2_bzopen)
<                ( int fd,
<                  const char *mode )
---
> * BZ_APIchar *mode )
371,373c371
< * BZ_API(BZ2_bzopen)
<                ( int fd,
<                  const char *mode )
---
> * BZ_API(*mode )
371,373c371
< * BZ_API(BZ2_bzopen)
<                ( int fd,
<                  const char *mode )
---
> * BZ_API(BZ2_bzopenmode )
372,373c372
<                ( int fd,
<                  const char *mode )
---
>                )
(96.9 %, 6343 bytes)
371,376c371
< * BZ_API(*mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> * BZ_API() (BZFILE* b, void* buf, int len )
371,376c371
< * BZ_API(*mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> * BZ_API(*(BZFILE* b, void* buf, int len )
371,376c371
< * BZ_API(*mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> * BZ_API(*mode BZFILE* b, void* buf, int len )
372,376c372
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> * b, void* buf, int len )
376c376
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> b, void* buf, int len )
376c376
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int , void* buf, int len )
376c376
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_APIvoid* buf, int len )
376c376
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(* buf, int len )
376c376
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzreadbuf, int len )
376c376
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) , int len )
376c376
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) (int len )
376c376
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) (BZFILElen )
376c376
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) (BZFILE* )
376,377c376
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
---
> int BZ_API(BZ2_bzread) (BZFILE* b{
376,378c376
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, int bzerr, nread;
376,378c376
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, voidbzerr, nread;
376,378c376
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* , nread;
376,378c376
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* bufnread;
376,378c376
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, ;
376,379c376
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
376,379c376
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
377,379c377
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> ((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
378,379c378
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    (bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
378,379c378
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
378,379c378
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int bzerr*)b)->lastErr == BZ_STREAM_END) return 0;
378,379c378
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int bzerr, )b)->lastErr == BZ_STREAM_END) return 0;
378,379c378
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int bzerr, nreadb)->lastErr == BZ_STREAM_END) return 0;
379c379
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    )->lastErr == BZ_STREAM_END) return 0;
379c379
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ->lastErr == BZ_STREAM_END) return 0;
379c379
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (lastErr == BZ_STREAM_END) return 0;
379c379
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((== BZ_STREAM_END) return 0;
379c379
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((BZ_STREAM_END) return 0;
379c379
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile) return 0;
379c379
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile*return 0;
379c379
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile*)0;
379c379
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile*)b;
379,380c379
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
---
>    if (((bzFile*)b)nread = 0;
379,380c379
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
---
>    if (((bzFile*)b)->= 0;
379,380c379
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
---
>    if (((bzFile*)b)->lastErr 0;
379,380c379
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
---
>    if (((bzFile*)b)->lastErr == ;
379,381c379
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (((bzFile*)b)->lastErr == BZ_STREAM_ENDif (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
379,381c379
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
379,381c379
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
379,381c379
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0== BZ_OK || bzerr == BZ_STREAM_END) ; else ;
380,381c380
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    BZ_OK || bzerr == BZ_STREAM_END) ; else ;
380,381c380
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    nread || bzerr == BZ_STREAM_END) ; else ;
380,381c380
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    nread = bzerr == BZ_STREAM_END) ; else ;
380,381c380
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    nread = 0== BZ_STREAM_END) ; else ;
381c381
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    BZ_STREAM_END) ; else ;
381c381
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if ) ; else ;
(96.9 %, 6313 bytes)
379c379
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (((bzFile*)b)->lastErr == BZ_STREAM_END) ) ; else ;
379c379
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (; else ;
379c379
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr else ;
379c379
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == ;
379,380c379
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
---
>    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK }
379,384c379
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
379,384c379
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
379,384c379
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == (BZ2_bzwrite) (BZFILE* b, void* buf, int len )
379,384c379
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_ENDBZ2_bzwrite) (BZFILE* b, void* buf, int len )
379,384c379
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ) (BZFILE* b, void* buf, int len )
379,384c379
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; (BZFILE* b, void* buf, int len )
379,384c379
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else BZFILE* b, void* buf, int len )
380,384c380
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> * b, void* buf, int len )
384c384
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> b, void* buf, int len )
384c384
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int , void* buf, int len )
384c384
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_APIvoid* buf, int len )
384c384
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(* buf, int len )
384c384
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwritebuf, int len )
384c384
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) , int len )
384c384
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) (int len )
384c384
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) (BZFILElen )
384c384
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) (BZFILE* )
384,385c384
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< ;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b;
384,389c384
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< ;
< 
< 
< 
< int ;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, int ;
384,389c384
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< ;
< 
< 
< 
< int ;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void;
384,393c384
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< ;
< 
< 
< 
< int ;
< 
< 
< 
< void ;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* void ;
384,393c384
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< ;
< 
< 
< 
< int ;
< 
< 
< 
< void ;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf;
384,401c384
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< ;
< 
< 
< 
< int ;
< 
< 
< 
< void ;
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(errnum)
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, const char * BZ_API(errnum)
384,401c384
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< ;
< 
< 
< 
< int ;
< 
< 
< 
< void ;
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(errnum)
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int char * BZ_API(errnum)
384,401c384
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< ;
< 
< 
< 
< int ;
< 
< 
< 
< void ;
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(errnum)
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len * BZ_API(errnum)
385,401c385
< ;
< 
< 
< 
< int ;
< 
< 
< 
< void ;
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(errnum)
---
> BZ_API(errnum)
389,401c389
< int ;
< 
< 
< 
< void ;
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(errnum)
---
> (errnum)
389,401c389
< int ;
< 
< 
< 
< void ;
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(errnum)
---
> int errnum)
393,401c393
< void ;
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(errnum)
---
> )
401,409d400
< const char * BZ_API(errnum)
< ;
< 
< 
< 
< 
< 
< 
< 
(96.9 %, 6271 bytes)
389,424d388
< (errnum)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define ERROR_IF_MINUS_ONE 
< 
< 
< 
< 
< 
389,425c389
< (errnum)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define ERROR_IF_MINUS_ONE 
< 
< 
< 
< 
< 
< #if BZ_UNIX
---
> (if BZ_UNIX
389,425c389
< (errnum)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define ERROR_IF_MINUS_ONE 
< 
< 
< 
< 
< 
< #if BZ_UNIX
---
> (errnumBZ_UNIX
390,425d389
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define ERROR_IF_MINUS_ONE 
< 
< 
< 
< 
< 
< #if BZ_UNIX
419,426c419
< #define define ERROR_IF_MINUS_ONE 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #endif 
---
> endif 
419,433c419
< #define define ERROR_IF_MINUS_ONE 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  
---
> ##define True  
419,433c419
< #define define ERROR_IF_MINUS_ONE 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  
---
> #define define True  
(97.0 %, 6192 bytes)
389,397d388
< #if BZ_UNIX
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  
389,397d388
< #if BZ_UNIX
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  
389,398c389
< #if BZ_UNIX
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  
< #define False 
---
> #if False 
(97.0 %, 6112 bytes)
389,406c389
< #define False 
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           
\ No newline at end of file
---
> define SM_I2O           
\ No newline at end of file
389,406c389
< #define False 
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           
\ No newline at end of file
---
> #SM_I2O           
\ No newline at end of file
389,406c389
< #define False 
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           
\ No newline at end of file
---
> #define 
\ No newline at end of file
392,406d391
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           
\ No newline at end of file
392,406c392
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           
\ No newline at end of file
---
> typedef 
\ No newline at end of file
392,406c392
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           
\ No newline at end of file
---
> typedef int 
\ No newline at end of file
392,406c392
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           
\ No newline at end of file
---
> typedef int IntNative
\ No newline at end of file
406d405
< #define SM_I2O           
\ No newline at end of file
(97.0 %, 6051 bytes)
===< pass_clex :: rm-toks-6 >===
9,11d8
< #1
< #define BZ_FINISH            2
< 
9,11d8
< #1
< #define BZ_FINISH            2
< 
10,12c10
< #define BZ_FINISH            2
< 
< #define BZ_OK                2
---
> BZ_OK                2
(97.1 %, 6016 bytes)
9,10c9
< #define BZ_OK                2
< #define BZ_FINISH_OK         3
---
> BZ_FINISH_OK         3
9,10c9
< #define BZ_OK                2
< #define BZ_FINISH_OK         3
---
> #3
9,11c9
< #define BZ_OK                2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define #define BZ_STREAM_END        4
9,11c9
< #define BZ_OK                2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define BZ_OK                define BZ_STREAM_END        4
10,11c10
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> BZ_STREAM_END        4
10,11c10
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #4
10,12c10
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< typedef 
---
> #define typedef 
10,13c10
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< typedef 
<    struct {
---
> #define BZ_FINISH_OK         struct {
11,13c11
< #define BZ_STREAM_END        4
< typedef 
<    struct {
---
> {
11,14c11
< #define BZ_STREAM_END        4
< typedef 
<    struct {
<       int next_out;
---
> #int next_out;
11,14c11
< #define BZ_STREAM_END        4
< typedef 
<    struct {
<       int next_out;
---
> #define next_out;
11,14c11
< #define BZ_STREAM_END        4
< typedef 
<    struct {
<       int next_out;
---
> #define BZ_STREAM_END        ;
12,15c12
< typedef 
<    struct {
<       int next_out;
<       unsigned (*bzalloc);
---
> unsigned (*bzalloc);
13,15c13
<    struct {
<       int next_out;
<       unsigned (*bzalloc);
---
>    (*bzalloc);
13,15c13
<    struct {
<       int next_out;
<       unsigned (*bzalloc);
---
>    struct *bzalloc);
14,15c14
<       int next_out;
<       unsigned (*bzalloc);
---
>       bzalloc);
14,15c14
<       int next_out;
<       unsigned (*bzalloc);
---
>       int );
15d14
<       unsigned (*bzalloc);
15d14
<       unsigned (*bzalloc);
15,17c15
<       unsigned (*bzalloc);
<       ;
<    } 
---
>       unsigned } 
(97.1 %, 5989 bytes)
14,21c14
<       int next_out;
<       ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       int next_outinclude <stdio.h>
15,21c15
<       ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       <stdio.h>
16,21c16
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    stdio.h>
17,21c17
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    .h>
17,21c17
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    bz_streamh>
21c21
< #include <stdio.h>
---
> >
21,23c21
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> ##   define BZ_API(func) func
21,23c21
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include define BZ_API(func) func
21,23c21
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <BZ_API(func) func
21,23c21
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdio(func) func
21,23c21
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdio.func) func
21,23c21
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdio.h) func
23c23
< #   define BZ_API(func) func
---
> func
23,24c23
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   #   define BZ_EXTERN extern
23,24c23
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define define BZ_EXTERN extern
23,24c23
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define BZ_APIBZ_EXTERN extern
23,24c23
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define BZ_API(extern
23,29c23
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #   define BZ_API(funcBZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
23,29c23
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #   define BZ_API(func) int BZ_API(BZ2_bzCompressInit) ( 
24,29c24
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> BZ_API(BZ2_bzCompressInit) ( 
24,29c24
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #   (BZ2_bzCompressInit) ( 
24,29c24
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #   define BZ2_bzCompressInit) ( 
24,29c24
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #   define BZ_EXTERN ) ( 
29c29
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> ( 
29,30c29
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
---
> BZ_EXTERN bz_stream* strm, 
29,30c29
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
---
> BZ_EXTERN int * strm, 
29,30c29
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
---
> BZ_EXTERN int BZ_APIstrm, 
29,30c29
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
---
> BZ_EXTERN int BZ_API(, 
29,31c29
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInitint        blockSize100k, 
29,31c29
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit) blockSize100k, 
30,31c30
<       bz_stream* strm, 
<       int        blockSize100k, 
---
>       , 
30,32c30
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
---
>       bz_streamint        verbosity, 
30,32c30
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
---
>       bz_stream* verbosity, 
31,32d30
<       int        blockSize100k, 
<       int        verbosity, 
31,32d30
<       int        blockSize100k, 
<       int        verbosity, 
31,32d30
<       int        blockSize100k, 
<       int        verbosity, 
31,34c31
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
---
>       int        blockSize100k);
32,34c32
<       int        verbosity, 
<       int        workFactor 
<    );
---
>       ;
32,36c32
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< ;
---
>       int        ;
32,38c32
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< ;
< 
< ;
---
>       int        verbosity;
33,40c33
<       int        workFactor 
<    );
< 
< ;
< 
< ;
< 
< BZ_EXTERN int ;
---
>       BZ_EXTERN int ;
33,40c33
<       int        workFactor 
<    );
< 
< ;
< 
< ;
< 
< BZ_EXTERN int ;
---
>       int        int ;
34,40c34
<    );
< 
< ;
< 
< ;
< 
< BZ_EXTERN int ;
---
>    ;
34,42c34
<    );
< 
< ;
< 
< ;
< 
< BZ_EXTERN int ;
< 
< BZ_EXTERN int ;
---
>    )BZ_EXTERN int ;
36,42c36
< ;
< 
< ;
< 
< BZ_EXTERN int ;
< 
< BZ_EXTERN int ;
---
> int ;
40,43d39
< BZ_EXTERN int ;
< 
< BZ_EXTERN int ;
< 
(97.1 %, 5956 bytes)
36,43d35
< int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
36,44c36
< int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE( 
---
> int void BZFILE( 
42,44c42
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE( 
---
> BZFILE( 
42,44c42
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE( 
---
> #( 
42,45c42
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE( 
<       int   ,    
---
> #define int   ,    
42,45c42
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE( 
<       int   ,    
---
> #define BZ_MAX_UNUSED ,    
44,46c44
< typedef void BZFILE( 
<       int   ,    
<       int   );
---
> int   );
44,46c44
< typedef void BZFILE( 
<       int   ,    
<       int   );
---
> typedef );
44,46c44
< typedef void BZFILE( 
<       int   ,    
<       int   );
---
> typedef void ;
(97.1 %, 5917 bytes)
36,38c36
< typedef void BZFILE( 
<       int   ,    
<       int   );
---
> int   );
36,38c36
< typedef void BZFILE( 
<       int   ,    
<       int   );
---
> typedef );
36,38c36
< typedef void BZFILE( 
<       int   ,    
<       int   );
---
> typedef void ;
36,40c36
< typedef void BZFILE( 
<       int   ,    
<       int   );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> typedef void BZFILEBZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
37,40c37
<       int   ,    
<       int   );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       void BZ_API(BZ2_bzReadGetUnused) ( 
37,40c37
<       int   ,    
<       int   );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       int   BZ_API(BZ2_bzReadGetUnused) ( 
38,40c38
<       int   );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       (BZ2_bzReadGetUnused) ( 
38,40c38
<       int   );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       int   BZ2_bzReadGetUnused) ( 
38,40c38
<       int   );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       int   )) ( 
40c40
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> ( 
40,41c40
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN int*    bzerror, 
40,41c40
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void *    bzerror, 
40,41c40
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void BZ_APIbzerror, 
40,41c40
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void BZ_API(, 
40,42c40
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnusedBZFILE* b, 
40,42c40
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) * b, 
41,42c41
<       int*    bzerror, 
<       BZFILE* b, 
---
>       b, 
41,42c41
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int, 
41,43c41
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int*    void**  unused,  
41,43c41
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int*    bzerror**  unused,  
42,43c42
<       BZFILE* b, 
<       void**  unused,  
---
>       *  unused,  
42,43c42
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILEunused,  
42,43c42
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE* ,  
42,44c42
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       BZFILE* bint*    nUnused 
43,44c43
<       void**  unused,  
<       int*    nUnused 
---
>       *    nUnused 
43,44c43
<       void**  unused,  
<       int*    nUnused 
---
>       voidnUnused 
43,45c43
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       void*);
43,45c43
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       void**  ;
43,47c43
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       void**  unusedBZ_EXTERN int BZ_API(BZ2_bzRead) ( 
44,47c44
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       int BZ_API(BZ2_bzRead) ( 
44,47c44
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       intBZ_API(BZ2_bzRead) ( 
44,47c44
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       int*    (BZ2_bzRead) ( 
45,47c45
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>    BZ2_bzRead) ( 
45,47c45
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>    )) ( 
47c47
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
> ( 
47,48c47
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
> BZ_EXTERN int*    bzerror, 
47,48c47
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
> BZ_EXTERN int *    bzerror, 
47,48c47
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
> BZ_EXTERN int BZ_APIbzerror, 
47,48c47
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
> BZ_EXTERN int BZ_API(, 
47,49c47
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN int BZ_API(BZ2_bzReadBZFILE* b, 
47,49c47
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN int BZ_API(BZ2_bzRead) * b, 
48,49c48
<       int*    bzerror, 
<       BZFILE* b, 
---
>       b, 
48,49c48
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int, 
48,50c48
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int*    void*   buf, 
48,50c48
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int*    bzerror*   buf, 
49,50c49
<       BZFILE* b, 
<       void*   buf, 
---
>       buf, 
49,50c49
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE, 
49,51c49
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       BZFILE* int     len 
49,51c49
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       BZFILE* blen 
50,52c50
<       void*   buf, 
<       int     len 
<    );
---
>       );
50,52c50
<       void*   buf, 
<       int     len 
<    );
---
>       void;
50,54c50
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       void*   BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
50,54c50
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       void*   bufBZFILE* BZ_API(BZ2_bzWriteOpen) ( 
51,54c51
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       * BZ_API(BZ2_bzWriteOpen) ( 
51,54c51
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       int     BZ_API(BZ2_bzWriteOpen) ( 
52,54c52
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>    (BZ2_bzWriteOpen) ( 
52,54c52
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>    )BZ2_bzWriteOpen) ( 
54c54
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> ) ( 
54c54
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN ( 
54,55c54
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILEint*  bzerror,      
54,55c54
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE* *  bzerror,      
54,55c54
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE* BZ_APIbzerror,      
54,55c54
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE* BZ_API(,      
54,56c54
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpenFILE* f, 
54,56c54
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) * f, 
55,56c55
<       int*  bzerror,      
<       FILE* f, 
---
>       f, 
55,56c55
<       int*  bzerror,      
<       FILE* f, 
---
>       int, 
55,57c55
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
>       int*  int   blockSize100k, 
55,57c55
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
>       int*  bzerrorblockSize100k, 
56,57c56
<       FILE* f, 
<       int   blockSize100k, 
---
>       , 
56,58c56
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       FILEint   verbosity, 
56,58c56
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       FILE* verbosity, 
57,58d56
<       int   blockSize100k, 
<       int   verbosity, 
57,58d56
<       int   blockSize100k, 
<       int   verbosity, 
57,58d56
<       int   blockSize100k, 
<       int   verbosity, 
57,60c57
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       int   blockSize100k);
58,60c58
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       ;
58,62c58
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
58,62c58
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   verbosityvoid BZ_API(BZ2_bzWrite) ( 
59,62c59
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       BZ_API(BZ2_bzWrite) ( 
59,62c59
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   (BZ2_bzWrite) ( 
60,62c60
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>    BZ2_bzWrite) ( 
60,62c60
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>    )) ( 
62c62
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
> ( 
62,63c62
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
> BZ_EXTERN int*    bzerror, 
62,63c62
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void *    bzerror, 
62,63c62
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void BZ_APIbzerror, 
62,63c62
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void BZ_API(, 
62,64c62
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteBZFILE* b, 
62,64c62
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite) * b, 
63,64c63
<       int*    bzerror, 
<       BZFILE* b, 
---
>       b, 
63,64c63
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int, 
63,65c63
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int*    void*   buf, 
63,65c63
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int*    bzerror*   buf, 
64,65c64
<       BZFILE* b, 
<       void*   buf, 
---
>       buf, 
64,65c64
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE, 
64,66c64
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       BZFILE* int     len 
64,66c64
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       BZFILE* blen 
65,67c65
<       void*   buf, 
<       int     len 
<    );
---
>       );
65,67c65
<       void*   buf, 
<       int     len 
<    );
---
>       void;
65,69c65
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       void*   BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
65,69c65
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       void*   bufvoid BZ_API(BZ2_bzWriteClose) ( 
66,69c66
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       BZ_API(BZ2_bzWriteClose) ( 
66,69c66
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       int     (BZ2_bzWriteClose) ( 
67,69c67
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>    BZ2_bzWriteClose) ( 
67,69c67
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>    )) ( 
69c69
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> ( 
69,70c69
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN int*          bzerror, 
69,70c69
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void *          bzerror, 
69,70c69
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_APIbzerror, 
69,70c69
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_API(, 
69,71c69
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteCloseBZFILE*       b, 
69,71c69
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose) *       b, 
70,71c70
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       b, 
70,71c70
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int, 
70,72c70
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       int*          int           abandon, 
70,72c70
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       int*          bzerrorabandon, 
71,72c71
<       BZFILE*       b, 
<       int           abandon, 
---
>       , 
71,73c71
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       BZFILEunsigned int* nbytes_in, 
71,73c71
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       BZFILE*       int* nbytes_in, 
71,73c71
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       BZFILE*       b* nbytes_in, 
72,73c72
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       nbytes_in, 
72,73c72
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int           , 
72,74c72
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int           abandonunsigned int* nbytes_out 
73,74c73
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int* nbytes_out 
73,74c73
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned * nbytes_out 
73,74c73
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned intnbytes_out 
73,75c73
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       unsigned int* );
73,75c73
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       unsigned int* nbytes_in;
74,77c74
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
74,77c74
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned void BZ_API(BZ2_bzWriteClose64) ( 
74,77c74
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned intBZ_API(BZ2_bzWriteClose64) ( 
74,77c74
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int* (BZ2_bzWriteClose64) ( 
75,77c75
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>    BZ2_bzWriteClose64) ( 
75,77c75
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>    )) ( 
77c77
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> ( 
77,78c77
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> BZ_EXTERN int*          bzerror, 
77,78c77
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void *          bzerror, 
77,78c77
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_APIbzerror, 
77,78c77
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_API(, 
77,79c77
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64BZFILE*       b, 
77,79c77
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) *       b, 
78,79c78
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       b, 
78,79c78
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int, 
78,80c78
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       int*          int           abandon, 
78,80c78
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       int*          bzerrorabandon, 
79,80c79
<       BZFILE*       b, 
<       int           abandon, 
---
>       , 
79,81c79
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       BZFILEunsigned int* nbytes_in_lo32, 
79,81c79
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       BZFILE*       int* nbytes_in_lo32, 
79,81c79
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       BZFILE*       b* nbytes_in_lo32, 
80,81c80
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       nbytes_in_lo32, 
80,81c80
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int           , 
80,82c80
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int           abandonunsigned int* nbytes_in_hi32, 
81,82c81
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int* nbytes_in_hi32, 
81,82c81
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned * nbytes_in_hi32, 
81,82c81
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned intnbytes_in_hi32, 
81,82c81
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned int* , 
81,83c81
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned int* nbytes_in_lo32unsigned int* nbytes_out_lo32, 
82,83c82
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       int* nbytes_out_lo32, 
82,83c82
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned * nbytes_out_lo32, 
82,83c82
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned intnbytes_out_lo32, 
82,83c82
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned int* , 
82,84c82
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned int* nbytes_in_hi32unsigned int* nbytes_out_hi32
83,84c83
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       int* nbytes_out_hi32
83,84c83
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned * nbytes_out_hi32
83,84c83
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned intnbytes_out_hi32
83,85c83
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned int* );
83,85c83
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned int* nbytes_out_lo32;
84,90c84
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
84,90c84
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int BZ_API(BZ2_bzBuffToBuffCompress) ( 
84,90c84
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned intBZ_API(BZ2_bzBuffToBuffCompress) ( 
84,90c84
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* (BZ2_bzBuffToBuffCompress) ( 
85,90c85
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>    BZ2_bzBuffToBuffCompress) ( 
85,90c85
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>    )) ( 
90c90
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> ( 
90,91c90
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> BZ_EXTERN char*         dest, 
90,91c90
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int *         dest, 
90,91c90
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int BZ_APIdest, 
90,91c90
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int BZ_API(, 
90,92c90
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompressunsigned int* destLen,
90,92c90
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) int* destLen,
91,92c91
<       char*         dest, 
<       unsigned int* destLen,
---
>       * destLen,
91,92c91
<       char*         dest, 
<       unsigned int* destLen,
---
>       chardestLen,
91,92c91
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         ,
91,93c91
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       char*         destchar*         source, 
92,93c92
<       unsigned int* destLen,
<       char*         source, 
---
>       *         source, 
92,93c92
<       unsigned int* destLen,
<       char*         source, 
---
>       unsigned source, 
92,93c92
<       unsigned int* destLen,
<       char*         source, 
---
>       unsigned int, 
92,94c92
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* unsigned int  sourceLen,
92,94c92
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* destLenint  sourceLen,
93,94c93
<       char*         source, 
<       unsigned int  sourceLen,
---
>       sourceLen,
93,94c93
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char,
93,95c93
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       char*         int           blockSize100k, 
93,95c93
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       char*         sourceblockSize100k, 
94,95c94
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       , 
94,96c94
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned int           verbosity, 
94,96c94
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned int  verbosity, 
94,96c94
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned int  sourceLen, 
95,96d94
<       int           blockSize100k, 
<       int           verbosity, 
95,96d94
<       int           blockSize100k, 
<       int           verbosity, 
95,98c95
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       int           blockSize100k);
96,98c96
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       ;
96,100c96
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
96,100c96
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           verbosityint BZ_API(BZ2_bzBuffToBuffDecompress) ( 
97,100c97
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       BZ_API(BZ2_bzBuffToBuffDecompress) ( 
97,100c97
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           (BZ2_bzBuffToBuffDecompress) ( 
98,100c98
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>    BZ2_bzBuffToBuffDecompress) ( 
98,100c98
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>    )) ( 
100c100
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> ( 
100,101c100
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_EXTERN char*         dest, 
100,101c100
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int *         dest, 
100,101c100
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int BZ_APIdest, 
100,101c100
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int BZ_API(, 
100,102c100
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompressunsigned int* destLen,
100,102c100
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) int* destLen,
101,102c101
<       char*         dest, 
<       unsigned int* destLen,
---
>       * destLen,
101,102c101
<       char*         dest, 
<       unsigned int* destLen,
---
>       chardestLen,
101,102c101
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         ,
101,103c101
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       char*         destchar*         source, 
102,103c102
<       unsigned int* destLen,
<       char*         source, 
---
>       *         source, 
102,103c102
<       unsigned int* destLen,
<       char*         source, 
---
>       unsigned source, 
102,103c102
<       unsigned int* destLen,
<       char*         source, 
---
>       unsigned int, 
102,104c102
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* unsigned int  sourceLen,
102,104c102
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* destLenint  sourceLen,
103,104c103
<       char*         source, 
<       unsigned int  sourceLen,
---
>       sourceLen,
103,104c103
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char,
103,105c103
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       char*         int           small, 
103,105c103
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       char*         sourcesmall, 
104,105c104
<       unsigned int  sourceLen,
<       int           small, 
---
>       , 
104,106c104
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
---
>       unsigned int           verbosity 
104,106c104
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
---
>       unsigned int  verbosity 
104,107c104
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
---
>       unsigned int  sourceLen);
105,107c105
<       int           small, 
<       int           verbosity 
<    );
---
>       ;
105,112c105
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const ;
---
>       int           BZ_EXTERN const ;
105,112c105
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const ;
---
>       int           smallconst ;
106,112c106
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const ;
---
>       ;
106,114c106
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const ;
< 
< BZ_EXTERN ;
---
>       int           BZ_EXTERN ;
107,114c107
<    );
< 
< 
< 
< 
< BZ_EXTERN const ;
< 
< BZ_EXTERN ;
---
>    ;
107,116c107
<    );
< 
< 
< 
< 
< BZ_EXTERN const ;
< 
< BZ_EXTERN ;
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
>    )BZ_EXTERN int BZ_API(BZ2_bzread) (
112,116c112
< BZ_EXTERN const ;
< 
< BZ_EXTERN ;
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> int BZ_API(BZ2_bzread) (
112,116c112
< BZ_EXTERN const ;
< 
< BZ_EXTERN ;
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN BZ_API(BZ2_bzread) (
(97.1 %, 5866 bytes)
112,113c112
< int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
---
> BZFILE* b, 
112,113c112
< int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
---
> int * b, 
112,113c112
< int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
---
> int BZ_APIb, 
112,113c112
< int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
---
> int BZ_API(, 
112,114c112
< int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
---
> int BZ_API(BZ2_bzreadvoid* buf, 
112,114c112
< int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
---
> int BZ_API(BZ2_bzread) * buf, 
113,114c113
<       BZFILE* b, 
<       void* buf, 
---
>       buf, 
113,114c113
<       BZFILE* b, 
<       void* buf, 
---
>       BZFILE, 
113,115c113
<       BZFILE* b, 
<       void* buf, 
<       int len 
---
>       BZFILE* int len 
113,115c113
<       BZFILE* b, 
<       void* buf, 
<       int len 
---
>       BZFILE* blen 
114,116c114
<       void* buf, 
<       int len 
<    );
---
>       );
114,116c114
<       void* buf, 
<       int len 
<    );
---
>       void;
114,118c114
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>       void* BZ_EXTERN int BZ_API(BZ2_bzwrite) (
114,118c114
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>       void* bufint BZ_API(BZ2_bzwrite) (
115,118c115
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>       BZ_API(BZ2_bzwrite) (
115,118c115
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>       int (BZ2_bzwrite) (
116,118c116
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>    BZ2_bzwrite) (
116,118c116
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>    )) (
118c118
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
> (
118,119c118
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
---
> BZ_EXTERN BZFILE* b, 
118,119c118
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
---
> BZ_EXTERN int * b, 
118,119c118
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
---
> BZ_EXTERN int BZ_APIb, 
118,119c118
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
---
> BZ_EXTERN int BZ_API(, 
118,120c118
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int BZ_API(BZ2_bzwritevoid*   buf, 
118,120c118
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int BZ_API(BZ2_bzwrite) *   buf, 
119,120c119
<       BZFILE* b, 
<       void*   buf, 
---
>       buf, 
119,120c119
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE, 
119,121c119
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       BZFILE* int     len 
119,121c119
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       BZFILE* blen 
120,122c120
<       void*   buf, 
<       int     len 
<    );
---
>       );
120,122c120
<       void*   buf, 
<       int     len 
<    );
---
>       void;
120,124c120
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int ;
---
>       void*   BZ_EXTERN int ;
120,124c120
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int ;
---
>       void*   bufint ;
121,124c121
<       int     len 
<    );
< 
< BZ_EXTERN int ;
---
>       ;
121,126c121
<       int     len 
<    );
< 
< BZ_EXTERN int ;
< 
< BZ_EXTERN void ;
---
>       int     BZ_EXTERN void ;
122,126c122
<    );
< 
< BZ_EXTERN int ;
< 
< BZ_EXTERN void ;
---
>    void ;
124,127d123
< BZ_EXTERN int ;
< 
< BZ_EXTERN void ;
< 
124,127d123
< BZ_EXTERN int ;
< 
< BZ_EXTERN void ;
< 
(97.2 %, 5831 bytes)
122,125c122
<    );
< 
< Char;
< typedef unsigned char   Bool;
---
>    )Bool;
124,125c124
< Char;
< typedef unsigned char   Bool;
---
> ;
124,126c124
< Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> Chartypedef unsigned char   UChar;
125,126c125
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> unsigned char   UChar;
125,126c125
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef char   UChar;
125,126c125
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef unsigned UChar;
125,126c125
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef unsigned char   ;
125,127c125
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef unsigned char   Booltypedef int             Int32;
126,127c126
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> int             Int32;
126,127c126
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef Int32;
126,127c126
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef unsigned ;
126,128c126
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned char   typedef unsigned int    UInt32;
126,128c126
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned char   UCharunsigned int    UInt32;
127,128c127
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> int    UInt32;
127,128c127
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef UInt32;
127,128c127
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef int             ;
(97.2 %, 5784 bytes)
126,127c126
< typedef Int32;
< typedef unsigned int    UInt32;
---
> typedef ;
127,128d126
< typedef unsigned int    UInt32;
< ;
127,129d126
< typedef unsigned int    UInt32;
< ;
< 
127,130c127
< typedef unsigned int    UInt32;
< ;
< 
< #define BZ_MAX_ALPHA_SIZE 4
---
> typedef define BZ_MAX_ALPHA_SIZE 4
127,130c127
< typedef unsigned int    UInt32;
< ;
< 
< #define BZ_MAX_ALPHA_SIZE 4
---
> typedef unsigned BZ_MAX_ALPHA_SIZE 4
127,130c127
< typedef unsigned int    UInt32;
< ;
< 
< #define BZ_MAX_ALPHA_SIZE 4
---
> typedef unsigned int    4
127,132c127
< typedef unsigned int    UInt32;
< ;
< 
< #define BZ_MAX_ALPHA_SIZE 4
< 
< #define BZ_MAX_SELECTORS define BZ_N_SHELL 18
---
> typedef unsigned int    UInt32#define BZ_MAX_SELECTORS define BZ_N_SHELL 18
128,132c128
< ;
< 
< #define BZ_MAX_ALPHA_SIZE 4
< 
< #define BZ_MAX_SELECTORS define BZ_N_SHELL 18
---
> define BZ_MAX_SELECTORS define BZ_N_SHELL 18
130,132c130
< #define BZ_MAX_ALPHA_SIZE 4
< 
< #define BZ_MAX_SELECTORS define BZ_N_SHELL 18
---
> BZ_MAX_SELECTORS define BZ_N_SHELL 18
130,132c130
< #define BZ_MAX_ALPHA_SIZE 4
< 
< #define BZ_MAX_SELECTORS define BZ_N_SHELL 18
---
> #define BZ_N_SHELL 18
130,132c130
< #define BZ_MAX_ALPHA_SIZE 4
< 
< #define BZ_MAX_SELECTORS define BZ_N_SHELL 18
---
> #define BZ_N_SHELL 18
(97.2 %, 5731 bytes)
130,138c130
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT 
< 
< 
< 
< 
< 
< 
< typedef
---
> #typedef
130,139c130
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT 
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #define struct {
130,139c130
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT 
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #define BZ_N_SHELL {
131,141c131
< #define BZ_N_OVERSHOOT 
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       ;
---
> ;
131,144c131
< #define BZ_N_OVERSHOOT 
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       ;
< 
<       
<       UInt32   mtfvstate_in_ch[4];
---
> #UInt32   mtfvstate_in_ch[4];
131,144c131
< #define BZ_N_OVERSHOOT 
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       ;
< 
<       
<       UInt32   mtfvstate_in_ch[4];
---
> #define mtfvstate_in_ch[4];
138,144c138
< typedef
<    struct {
<       
<       ;
< 
<       
<       UInt32   mtfvstate_in_ch[4];
---
> [4];
139,144c139
<    struct {
<       
<       ;
< 
<       
<       UInt32   mtfvstate_in_ch[4];
---
>    4];
139,144c139
<    struct {
<       
<       ;
< 
<       
<       UInt32   mtfvstate_in_ch[4];
---
>    struct ];
143,145d142
<       
<       UInt32   mtfvstate_in_ch[4];
< 
144,146c144
<       UInt32   mtfvstate_in_ch[4];
< 
<    }
---
>       }
(97.2 %, 5688 bytes)
141,152c141
<       ;
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_CCRC_4      50
---
>       BZ_X_CCRC_4      50
143,152c143
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_CCRC_4      50
---
>    50
144,158c144
<    EState;
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
---
>    #define MTFA_SIZE 4096
144,158c144
<    EState;
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
---
>    EStatedefine MTFA_SIZE 4096
152,158c152
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
---
> MTFA_SIZE 4096
152,158c152
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
---
> #4096
152,159c152
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> #define #define MTFL_SIZE 16
152,159c152
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> #define BZ_X_CCRC_4      define MTFL_SIZE 16
(97.2 %, 5638 bytes)
152,160c152
< #4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #struct {
153,160c153
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> {
153,162c153
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       ;
---
> #;
153,163c153
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       ;
<       Int32*   save_gLimit}
---
> #define Int32*   save_gLimit}
153,163c153
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       ;
<       Int32*   save_gLimit}
---
> #define MTFL_SIZE *   save_gLimit}
159,163c159
< typedef
<    struct {
<       
<       ;
<       Int32*   save_gLimit}
---
> save_gLimit}
160,163c160
<    struct {
<       
<       ;
<       Int32*   save_gLimit}
---
>    }
160,164c160
<    struct {
<       
<       ;
<       Int32*   save_gLimit}
<    DState;
---
>    struct DState;
(97.3 %, 5584 bytes)
153,158c153
< #define MTFL_SIZE *   save_gLimit}
<    DState;
< 
< 
< static
< Bool isempty_RL 
---
> #define MTFL_SIZE Bool isempty_RL 
153,158c153
< #define MTFL_SIZE *   save_gLimit}
<    DState;
< 
< 
< static
< Bool isempty_RL 
---
> #define MTFL_SIZE *   isempty_RL 
(97.3 %, 5547 bytes)
153,158c153
< #define MTFL_SIZE Bool isempty_RL 
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
> #define MTFL_SIZE BZ2_bzCompressInit) 
153,158c153
< #define MTFL_SIZE Bool isempty_RL 
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
> #define MTFL_SIZE Bool ) 
154,159c154
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> ( bz_stream* strm, 
158,159c158
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> bz_stream* strm, 
158,159c158
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> int * strm, 
158,159c158
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> int BZ_APIstrm, 
158,159c158
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> int BZ_API(, 
158,160c158
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> int BZ_API(BZ2_bzCompressInitint        blockSize100k,
159,160c159
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>                     blockSize100k,
159,160c159
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>                     ( ,
159,161c159
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
>                     ( bz_streamint        verbosity,
159,161c159
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
>                     ( bz_stream* verbosity,
159,161c159
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
>                     ( bz_stream* strm,
160,161d159
<                      int        blockSize100k,
<                      int        verbosity,
160,161d159
<                      int        blockSize100k,
<                      int        verbosity,
160,162c160
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
>                      int        blockSize100k)
161,163c161
<                      int        verbosity,
<                      int        workFactor )
< ;
---
>                      ;
161,175c161
<                      int        verbosity,
<                      int        workFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< (*strm )
---
>                      int        (*strm )
161,175c161
<                      int        verbosity,
<                      int        workFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< (*strm )
---
>                      int        verbosity*strm )
162,175c162
<                      int        workFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< (*strm )
---
>                      strm )
162,175c162
<                      int        workFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< (*strm )
---
>                      int        )
162,176c162
<                      int        workFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< (*strm )
< ;
---
>                      int        workFactor ;
163,179d162
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< (*strm )
< ;
< 
< 
< 
175d174
< (*strm )
177,180d175
< 
< 
< 
< int ;
(97.3 %, 5514 bytes)
162,174c162
<                      int        )
< ;
< 
< 
< 
< int ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR                    \
---
>                      int        BZ_SETERR                    \
163,174c163
< ;
< 
< 
< 
< int ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR                    \
---
> \
167,176d166
< int ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR                    \
< 
< 
167,178c167
< int ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR                    \
< 
< 
< typedef 
<    struct {
---
> int struct {
174,178c174
< #define BZ_SETERR                    \
< 
< 
< typedef 
<    struct {
---
> {
174,179c174
< #define BZ_SETERR                    \
< 
< 
< typedef 
<    struct {
<       ;
---
> #;
174,180c174
< #define BZ_SETERR                    \
< 
< 
< typedef 
<    struct {
<       ;
<       Int32     bufN;
---
> #define Int32     bufN;
174,180c174
< #define BZ_SETERR                    \
< 
< 
< typedef 
<    struct {
<       ;
<       Int32     bufN;
---
> #define BZ_SETERR                    bufN;
177,180c177
< typedef 
<    struct {
<       ;
<       Int32     bufN;
---
> ;
178,181c178
<    struct {
<       ;
<       Int32     bufN;
<       Bool      writing;
---
>    Bool      writing;
178,181c178
<    struct {
<       ;
<       Int32     bufN;
<       Bool      writing;
---
>    struct writing;
180,181d179
<       Int32     bufN;
<       Bool      writing;
180,181d179
<       Int32     bufN;
<       Bool      writing;
(97.3 %, 5467 bytes)
180,181d179
<       bz_stream strm;
<       Int32     lastErr;
180,181d179
<       bz_stream strm;
<       Int32     lastErr;
180,182c180
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       bz_stream initialisedOk;
181,182d180
<       Int32     lastErr;
<       Bool      initialisedOk;
181,183c181
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>       }
181,184c181
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
---
>       Int32     bzFile;
182,184d181
<       Bool      initialisedOk;
<    }
<    bzFile;
182,192c182
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       BZFILE* BZ_API(BZ2_bzWriteOpen) 
182,192c182
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Bool      * BZ_API(BZ2_bzWriteOpen) 
182,192c182
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Bool      initialisedOkBZ_API(BZ2_bzWriteOpen) 
183,192c183
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>    (BZ2_bzWriteOpen) 
184,192c184
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>    BZ2_bzWriteOpen) 
184,192c184
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>    bzFile) 
192,193c192
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> ( int*  bzerror,      
192,193c192
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILEint*  bzerror,      
192,193c192
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE* *  bzerror,      
192,193c192
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE* BZ_APIbzerror,      
192,193c192
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE* BZ_API(,      
192,194c192
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* BZ_API(BZ2_bzWriteOpenFILE* f, 
193,194c193
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     * f, 
193,194c193
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( f, 
193,194c193
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int, 
193,195c193
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     ( int*  int   blockSize100k, 
193,195c193
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     ( int*  bzerrorblockSize100k, 
194,195c194
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       , 
194,196c194
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       FILEint   verbosity,
194,196c194
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       FILE* verbosity,
194,196c194
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       FILE* f,
195,196d194
<                       int   blockSize100k, 
<                       int   verbosity,
195,196d194
<                       int   blockSize100k, 
<                       int   verbosity,
195,197c195
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   blockSize100k)
196,198c196
<                       int   verbosity,
<                       int   workFactor )
< ;
---
>                       ;
196,203c196
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       int   void BZ_API(BZ2_bzWrite)
196,203c196
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       int   verbosityBZ_API(BZ2_bzWrite)
197,203c197
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       (BZ2_bzWrite)
197,203c197
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       int   BZ2_bzWrite)
198,203d197
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
198,204c198
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> ( int*    bzerror, 
203,204c203
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> int*    bzerror, 
203,204c203
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> void *    bzerror, 
203,204c203
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> void BZ_APIbzerror, 
203,204c203
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> void BZ_API(, 
203,205c203
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> void BZ_API(BZ2_bzWriteBZFILE* b, 
204,205c204
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              * b, 
204,205c204
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( b, 
204,205c204
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int, 
204,206c204
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( int*    void*   buf, 
204,206c204
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( int*    bzerror*   buf, 
205,206c205
<                BZFILE* b, 
<                void*   buf, 
---
>                buf, 
205,206c205
<                BZFILE* b, 
<                void*   buf, 
---
>                BZFILE, 
205,207c205
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>                BZFILE* int     len )
205,207c205
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>                BZFILE* blen )
206,207c206
<                void*   buf, 
<                int     len )
---
>                )
206,208c206
<                void*   buf, 
<                int     len )
< ;
---
>                void;
206,212c206
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>                void*   void BZ_API(BZ2_bzWriteClose)
206,212c206
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>                void*   bufBZ_API(BZ2_bzWriteClose)
207,212c207
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>                (BZ2_bzWriteClose)
207,212c207
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>                int     BZ2_bzWriteClose)
208,212d207
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
208,213c208
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> ( int*          bzerror, 
212,213c212
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> int*          bzerror, 
212,213c212
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> void *          bzerror, 
212,213c212
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> void BZ_APIbzerror, 
212,213c212
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> void BZ_API(, 
212,214c212
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_API(BZ2_bzWriteCloseBZFILE*       b, 
213,214c213
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   *       b, 
213,214c213
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( b, 
213,214c213
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int, 
213,215c213
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int*          int           abandon,
213,215c213
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int*          bzerrorabandon,
214,215c214
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     ,
214,216c214
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     BZFILEunsigned int* nbytes_in,
214,216c214
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     BZFILE*       int* nbytes_in,
214,216c214
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     BZFILE*       b* nbytes_in,
215,216c215
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     nbytes_in,
215,216c215
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           ,
215,217c215
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     int           abandonunsigned int* nbytes_out )
216,217c216
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     int* nbytes_out )
216,217c216
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * nbytes_out )
216,217c216
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned intnbytes_out )
216,217c216
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned int* )
216,218c216
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
---
>                     unsigned int* nbytes_in;
217,221c217
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     void BZ_API(BZ2_bzWriteClose64)
217,221c217
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned BZ_API(BZ2_bzWriteClose64)
217,221c217
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned int(BZ2_bzWriteClose64)
217,221c217
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned int* BZ2_bzWriteClose64)
218,221d217
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
218,222c218
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> ( int*          bzerror, 
221,222c221
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> int*          bzerror, 
221,222c221
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> void *          bzerror, 
221,222c221
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> void BZ_APIbzerror, 
221,222c221
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> void BZ_API(, 
221,223c221
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_API(BZ2_bzWriteClose64BZFILE*       b, 
222,223c222
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   *       b, 
222,223c222
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( b, 
222,223c222
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int, 
222,224c222
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int*          int           abandon,
222,224c222
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int*          bzerrorabandon,
223,224c223
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     ,
223,225c223
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     BZFILEunsigned int* nbytes_in_lo32,
223,225c223
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     BZFILE*       int* nbytes_in_lo32,
223,225c223
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     BZFILE*       b* nbytes_in_lo32,
224,225c224
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     nbytes_in_lo32,
224,225c224
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           ,
224,226c224
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     int           abandonunsigned int* nbytes_in_hi32,
225,226c225
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     int* nbytes_in_hi32,
225,226c225
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * nbytes_in_hi32,
225,226c225
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned intnbytes_in_hi32,
225,226c225
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned int* ,
225,227c225
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned int* nbytes_in_lo32unsigned int* nbytes_out_lo32,
226,227c226
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     int* nbytes_out_lo32,
226,227c226
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * nbytes_out_lo32,
226,227c226
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned intnbytes_out_lo32,
226,227c226
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned int* ,
226,228c226
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_in_hi32unsigned int* nbytes_out_hi32 )
227,228c227
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     int* nbytes_out_hi32 )
227,228c227
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_hi32 )
227,228c227
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned intnbytes_out_hi32 )
227,228c227
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* )
227,229c227
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
---
>                     unsigned int* nbytes_out_lo32;
228,233c228
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     BZFILE* BZ_API(BZ2_bzReadOpen) 
228,233c228
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned * BZ_API(BZ2_bzReadOpen) 
228,233c228
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned intBZ_API(BZ2_bzReadOpen) 
228,233c228
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned int* (BZ2_bzReadOpen) 
228,233c228
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned int* nbytes_out_hi32 BZ2_bzReadOpen) 
229,233c229
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> ) 
233,234c233
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int   ,
---
> ( int   ,
233,234c233
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int   ,
---
> BZFILEint   ,
233,234c233
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int   ,
---
> BZFILE* ,
233,235c233
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int   ,
<                      int   nUnused )
---
> BZFILE* BZ_APIint   nUnused )
233,235c233
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int   ,
<                      int   nUnused )
---
> BZFILE* BZ_API(nUnused )
233,235c233
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int   ,
<                      int   nUnused )
---
> BZFILE* BZ_API(BZ2_bzReadOpen)
234,236c234
<                    ( int   ,
<                      int   nUnused )
< ;
---
>                    ;
(97.4 %, 5394 bytes)
233,238c233
< BZFILE* BZ_API(nUnused )
< ;
< 
< 
< 
< void BZ_API(*b )
---
> BZFILE* BZ_API(*b )
233,238c233
< BZFILE* BZ_API(nUnused )
< ;
< 
< 
< 
< void BZ_API(*b )
---
> BZFILE* BZ_API(nUnused b )
234,238c234
< ;
< 
< 
< 
< void BZ_API(*b )
---
> )
238d237
< void BZ_API(*b )
(97.4 %, 5367 bytes)
233,238c233
< BZFILE* BZ_API(*b )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> BZFILE* BZ_API((BZ2_bzRead) 
233,238c233
< BZFILE* BZ_API(*b )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> BZFILE* BZ_API(*BZ2_bzRead) 
233,238c233
< BZFILE* BZ_API(*b )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> BZFILE* BZ_API(*b ) 
234,239c234
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> ( int*    bzerror, 
(97.4 %, 5339 bytes)
233,235c233
< BZFILE* BZ_API(*b ) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> BZFILE* BZ_API(*b BZFILE* b, 
234,235c234
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            * b, 
234,235c234
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( b, 
234,235c234
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int, 
234,236c234
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( int*    void*   buf, 
234,236c234
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( int*    bzerror*   buf, 
235,236c235
<              BZFILE* b, 
<              void*   buf, 
---
>              buf, 
235,236c235
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE, 
235,237c235
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>              BZFILE* int     len )
235,237c235
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>              BZFILE* blen )
236,237c236
<              void*   buf, 
<              int     len )
---
>              )
236,238c236
<              void*   buf, 
<              int     len )
< {
---
>              void{
236,240c236
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = b;
---
>              void*   bzFile* bzf = b;
236,240c236
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = b;
---
>              void*   buf* bzf = b;
237,240c237
<              int     len )
< {
<    
<    bzFile* bzf = b;
---
>              bzf = b;
237,240c237
<              int     len )
< {
<    
<    bzFile* bzf = b;
---
>              int     = b;
237,240c237
<              int     len )
< {
<    
<    bzFile* bzf = b;
---
>              int     len b;
238,240c238
< {
<    
<    bzFile* bzf = b;
---
> ;
240,241d239
<    bzFile* bzf = b;
< 
240,242c240
<    bzFile* bzf = b;
< 
<    BZ_SETERR;
---
>    bzFile;
240,244c240
<    bzFile* bzf = b;
< 
<    BZ_SETERR;
< 
<    if (bzf == NULL || buf == 0)
---
>    bzFile* if (bzf == NULL || buf == 0)
240,244c240
<    bzFile* bzf = b;
< 
<    BZ_SETERR;
< 
<    if (bzf == NULL || buf == 0)
---
>    bzFile* bzf (bzf == NULL || buf == 0)
240,244c240
<    bzFile* bzf = b;
< 
<    BZ_SETERR;
< 
<    if (bzf == NULL || buf == 0)
---
>    bzFile* bzf = bzf == NULL || buf == 0)
240,244c240
<    bzFile* bzf = b;
< 
<    BZ_SETERR;
< 
<    if (bzf == NULL || buf == 0)
---
>    bzFile* bzf = b== NULL || buf == 0)
242,244c242
<    BZ_SETERR;
< 
<    if (bzf == NULL || buf == 0)
---
>    NULL || buf == 0)
242,244c242
<    BZ_SETERR;
< 
<    if (bzf == NULL || buf == 0)
---
>    BZ_SETERR|| buf == 0)
244c244
<    if (bzf == NULL || buf == 0)
---
>    buf == 0)
244c244
<    if (bzf == NULL || buf == 0)
---
>    if == 0)
244c244
<    if (bzf == NULL || buf == 0)
---
>    if (0)
244c244
<    if (bzf == NULL || buf == 0)
---
>    if (bzf )
(97.4 %, 5317 bytes)
244,245c244
<    if (0)
<       bzf->strm.next_out ; 
---
>    if (next_out ; 
244,245c244
<    if (0)
<       bzf->strm.next_out ; 
---
>    if (0; 
245,246c245
<       bzf->strm.next_out ; 
< }
---
>       }
245,250c245
<       bzf->strm.next_out ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>       bzfvoid BZ_API(BZ2_bzReadGetUnused) 
245,250c245
<       bzf->strm.next_out ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>       bzf->BZ_API(BZ2_bzReadGetUnused) 
245,250c245
<       bzf->strm.next_out ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>       bzf->strm(BZ2_bzReadGetUnused) 
245,250c245
<       bzf->strm.next_out ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>       bzf->strm.BZ2_bzReadGetUnused) 
245,250c245
<       bzf->strm.next_out ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>       bzf->strm.next_out ) 
246,251c246
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> ( int*    bzerror, 
250,251c250
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> int*    bzerror, 
250,251c250
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void *    bzerror, 
250,251c250
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void BZ_APIbzerror, 
250,251c250
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void BZ_API(, 
250,252c250
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> void BZ_API(BZ2_bzReadGetUnusedBZFILE* b, 
251,252c251
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      * b, 
251,252c251
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( b, 
251,252c251
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int, 
251,253c251
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( int*    void**  unused, 
251,253c251
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( int*    bzerror**  unused, 
252,253c252
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        *  unused, 
252,253c252
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILEunused, 
252,253c252
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE* , 
252,254c252
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        BZFILE* bint*    nUnused )
253,254c253
<                        void**  unused, 
<                        int*    nUnused )
---
>                        *    nUnused )
253,254c253
<                        void**  unused, 
<                        int*    nUnused )
---
>                        voidnUnused )
253,254c253
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void*)
253,255c253
<                        void**  unused, 
<                        int*    nUnused )
< ;
---
>                        void**  ;
253,263c253
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        void**  unusedint BZ_API(BZ2_bzBuffToBuffCompress) 
254,263c254
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        BZ_API(BZ2_bzBuffToBuffCompress) 
254,263c254
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        int(BZ2_bzBuffToBuffCompress) 
254,263c254
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        int*    BZ2_bzBuffToBuffCompress) 
254,263c254
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        int*    nUnused ) 
255,264c255
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> ( char*         dest, 
263,264c263
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> char*         dest, 
263,264c263
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> int *         dest, 
263,264c263
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> int BZ_APIdest, 
263,264c263
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> int BZ_API(, 
263,265c263
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompressunsigned int* destLen,
264,265c264
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          int* destLen,
264,265c264
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( * destLen,
264,265c264
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( chardestLen,
264,265c264
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         ,
264,266c264
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          ( char*         destchar*         source, 
265,266c265
<                            unsigned int* destLen,
<                            char*         source, 
---
>                            *         source, 
265,266c265
<                            unsigned int* destLen,
<                            char*         source, 
---
>                            unsigned source, 
265,266c265
<                            unsigned int* destLen,
<                            char*         source, 
---
>                            unsigned int, 
265,267c265
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            unsigned int* unsigned int  sourceLen,
265,267c265
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            unsigned int* destLenint  sourceLen,
266,267c266
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            sourceLen,
266,267c266
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char,
266,268c266
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            char*         int           blockSize100k, 
266,268c266
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            char*         sourceblockSize100k, 
267,268c267
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            , 
267,269c267
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned int           verbosity, 
267,269c267
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned int  verbosity, 
267,269c267
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned int  sourceLen, 
268,269d267
<                            int           blockSize100k, 
<                            int           verbosity, 
268,269d267
<                            int           blockSize100k, 
<                            int           verbosity, 
268,270c268
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           blockSize100k)
269,271c269
<                            int           verbosity, 
<                            int           workFactor )
< ;
---
>                            ;
269,275c269
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            int           int BZ_API(BZ2_bzBuffToBuffDecompress) 
269,275c269
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            int           verbosityBZ_API(BZ2_bzBuffToBuffDecompress) 
270,275c270
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            (BZ2_bzBuffToBuffDecompress) 
270,275c270
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            int           BZ2_bzBuffToBuffDecompress) 
270,275c270
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            int           workFactor ) 
271,276c271
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> ( char*         dest, 
275,276c275
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> char*         dest, 
275,276c275
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> int *         dest, 
275,276c275
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> int BZ_APIdest, 
275,276c275
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> int BZ_API(, 
275,277c275
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompressunsigned int* destLen,
276,277c276
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            int* destLen,
276,277c276
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( * destLen,
276,277c276
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( chardestLen,
276,277c276
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         ,
276,278c276
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( char*         destchar*         source, 
277,278c277
<                              unsigned int* destLen,
<                              char*         source, 
---
>                              *         source, 
277,278c277
<                              unsigned int* destLen,
<                              char*         source, 
---
>                              unsigned source, 
277,278c277
<                              unsigned int* destLen,
<                              char*         source, 
---
>                              unsigned int, 
277,279c277
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              unsigned int* unsigned int  sourceLen,
277,279c277
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              unsigned int* destLenint  sourceLen,
278,279c278
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              sourceLen,
278,279c278
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char,
278,280c278
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              char*         int           small,
278,280c278
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              char*         sourcesmall,
279,280c279
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              ,
279,281c279
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned int           verbosity )
279,281c279
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned int  verbosity )
279,281c279
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned int  sourceLen)
280,282c280
<                              int           small,
<                              int           verbosity )
< ;
---
>                              ;
280,291c280
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * BZ_API(*mode )
---
>                              int           * BZ_API(*mode )
280,291c280
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * BZ_API(*mode )
---
>                              int           smallBZ_API(*mode )
281,291c281
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * BZ_API(*mode )
---
>                              (*mode )
281,291c281
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * BZ_API(*mode )
---
>                              int           *mode )
281,291c281
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * BZ_API(*mode )
---
>                              int           verbosity mode )
282,291c282
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< * BZ_API(*mode )
---
> )
291d290
< * BZ_API(*mode )
291,296c291
< * BZ_API(*mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> * int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
291,296c291
< * BZ_API(*mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> * BZ_APIBZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
291,296c291
< * BZ_API(*mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> * BZ_API((BZ2_bzread) (BZFILE* b, void* buf, int len )
291,296c291
< * BZ_API(*mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> * BZ_API(*BZ2_bzread) (BZFILE* b, void* buf, int len )
291,296c291
< * BZ_API(*mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> * BZ_API(*mode ) (BZFILE* b, void* buf, int len )
(97.4 %, 5300 bytes)
291,295c291
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> (BZFILE* b, void* buf, int len )
295c295
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> BZFILE* b, void* buf, int len )
295c295
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int * b, void* buf, int len )
295c295
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_APIb, void* buf, int len )
295c295
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(, void* buf, int len )
295c295
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzreadvoid* buf, int len )
295c295
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) * buf, int len )
295c295
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) (buf, int len )
295c295
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) (BZFILE, int len )
295c295
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) (BZFILE* int len )
295c295
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) (BZFILE* blen )
295c295
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) (BZFILE* b, )
295,296c295
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void{
295,297c295
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* int bzerr, nread;
295,297c295
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* bufbzerr, nread;
295,297c295
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, , nread;
295,297c295
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int nread;
295,297c295
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len ;
296,298c296
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
> if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
297,298c297
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
297,298c297
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int ((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
297,298c297
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerr(bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
297,298c297
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerr, bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
297,298c297
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerr, nread*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
298c298
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    )b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
298c298
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
298c298
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if ()->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
298c298
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if ((->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
298c298
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (((lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
298c298
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (((bzFile== BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
298c298
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (((bzFile*BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
298c298
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (((bzFile*)) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
298c298
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (((bzFile*)b(bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
298c298
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (((bzFile*)b)bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
298c298
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (((bzFile*)b)->== BZ_OK || bzerr == BZ_STREAM_END) ; else ;
298c298
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (((bzFile*)b)->lastErr BZ_OK || bzerr == BZ_STREAM_END) ; else ;
298c298
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (((bzFile*)b)->lastErr == || bzerr == BZ_STREAM_END) ; else ;
298c298
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (((bzFile*)b)->lastErr == BZ_STREAM_ENDbzerr == BZ_STREAM_END) ; else ;
298c298
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (((bzFile*)b)->lastErr == BZ_STREAM_END) == BZ_STREAM_END) ; else ;
298c298
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (BZ_STREAM_END) ; else ;
298c298
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr ) ; else ;
298c298
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == ; else ;
298c298
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK else ;
298c298
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || ;
298,299c298
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
---
>    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr }
298,303c298
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
298,303c298
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_ENDBZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
298,303c298
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) (BZ2_bzwrite) (BZFILE* b, void* buf, int len )
298,303c298
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; BZ2_bzwrite) (BZFILE* b, void* buf, int len )
298,303c298
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ) (BZFILE* b, void* buf, int len )
299,303c299
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> (BZFILE* b, void* buf, int len )
303c303
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> BZFILE* b, void* buf, int len )
303c303
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int * b, void* buf, int len )
303c303
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_APIb, void* buf, int len )
303c303
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(, void* buf, int len )
303c303
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwritevoid* buf, int len )
303c303
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) * buf, int len )
303c303
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) (buf, int len )
303c303
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) (BZFILE, int len )
303c303
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) (BZFILE* int len )
303c303
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) (BZFILE* blen )
303c303
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, )
303,304c303
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< ;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void;
303,308c303
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< ;
< 
< 
< 
< #define False 
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* #define False 
303,308c303
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< ;
< 
< 
< 
< #define False 
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* bufdefine False 
303,308c303
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< ;
< 
< 
< 
< #define False 
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, False 
303,310c303
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< ;
< 
< 
< 
< #define False 
< 
< 
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int 
\ No newline at end of file
303,310c303
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< ;
< 
< 
< 
< #define False 
< 
< 
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len 
\ No newline at end of file
304,310d303
< ;
< 
< 
< 
< #define False 
< 
< 
308,310d307
< #define False 
< 
< 
308,310c308
< #define False 
< 
< 
---
> #
\ No newline at end of file
(97.4 %, 5283 bytes)
Termination check: size was 204936; now 5283
===< pass_balanced :: parens >===
23c23
< #   define BZ_API(func) func
---
> #   define BZ_API func
307a308
>  
\ No newline at end of file
29c29
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> BZ_EXTERN int BZ_API ( 
307a308
>  
\ No newline at end of file
29,34c29
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ;
307a303
>  
\ No newline at end of file
36,38c36
< typedef void BZFILE( 
<       int   ,    
<       int   );
---
> typedef void BZFILE;
307a306
>  
\ No newline at end of file
40c40
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ_API ( 
307a308
>  
\ No newline at end of file
40,45c40
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ;
307a303
>  
\ No newline at end of file
47c47
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
> BZ_EXTERN int BZ_API ( 
307a308
>  
\ No newline at end of file
47,52c47
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzRead) ;
307a303
>  
\ No newline at end of file
(97.4 %, 5250 bytes)
38c38
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ_API ( 
38,43c38
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ;
45c45
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
> BZ_EXTERN int BZ_API ( 
45,50c45
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzRead) ;
52c52
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE* BZ_API ( 
52,58c52
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ;
60c60
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
> BZ_EXTERN void BZ_API ( 
60,65c60
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite) ;
67c67
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void BZ_API ( 
67,73c67
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ;
(97.5 %, 5162 bytes)
47c47
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE* BZ_API ( 
47,53c47
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ;
55c55
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
> BZ_EXTERN void BZ_API ( 
55,60c55
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite) ;
62c62
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void BZ_API ( 
62,68c62
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ;
70c70
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void BZ_API ( 
70,78c70
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ;
83c83
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_EXTERN int BZ_API ( 
83,91c83
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ;
93c93
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_EXTERN int BZ_API ( 
93,100c93
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ;
105c105
< int BZ_API(BZ2_bzread) (
---
> int BZ_API (
105,109c105
< int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
---
> int BZ_API(BZ2_bzread) ;
111c111
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
> BZ_EXTERN int BZ_API (
111,115c111
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzwrite) ;
151c151
< int BZ_API(BZ2_bzCompressInit) 
---
> int BZ_API 
152,155c152
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        )
---
>                     
185c185
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE* BZ_API 
186,190c186
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     
196c196
< void BZ_API(BZ2_bzWrite)
---
> void BZ_API
197,200c197
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              
205c205
< void BZ_API(BZ2_bzWriteClose)
---
> void BZ_API
206,210c206
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                   
214c214
< void BZ_API(BZ2_bzWriteClose64)
---
> void BZ_API
215,221c215
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                   
226c226
< BZFILE* BZ_API(*b ) 
---
> BZFILE* BZ_API 
227,230c227
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            
237c237
<    if (0)
---
>    if 
243c243
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void BZ_API 
244,247c244
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      
256c256
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
> int BZ_API 
257,263c257
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                          
268c268
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> int BZ_API 
269,274c269
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                            
288c288
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API (BZFILE* b, void* buf, int len )
288c288
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) 
291c291
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if  (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
291c291
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
291c291
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if ((b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
291c291
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (((bzFile*)b)->lastErr == BZ_STREAM_END)  ; else ;
(97.5 %, 5122 bytes)
291c291
<    if  (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if   ; else ;
296c296
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API (BZFILE* b, void* buf, int len )
296c296
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) 
===< pass_balanced :: angles >===
21c21
< #include <stdio.h>
---
> #include 
===< pass_clang :: remove-namespace >===
===< pass_clang :: return-void >===
===< pass_clang :: copy-propagation >===
===< pass_clang :: replace-callexpr >===
===< pass_clang :: remove-unused-enum-member >===
===< pass_clang :: reduce-array-dim >===
===< pass_clang :: reduce-array-size >===
===< pass_clang :: move-function-body >===
===< pass_clang :: instantiate-template-param >===
===< pass_clang :: replace-derived-class >===
===< pass_clang :: remove-unused-outer-class >===
===< pass_clang :: remove-addr-taken >===
===< pass_clang :: simplify-struct >===
===< pass_clang :: replace-array-index-var >===
===< pass_special :: c >===
===< pass_ints :: c >===
===< pass_indent :: regular >===
1d0
<  
3a3,9
> #define BZ_OK 2
> #define BZ_FINISH_OK 3
> #define BZ_STREAM_END 4
> typedef struct {
>   int next_out;
>   ;
> } bz_stream;
4a11
> #include <stdio.h>
5a13,14
> #define BZ_API(func) func
> #define BZ_EXTERN extern
6a16,17
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
>                                          int verbosity, int workFactor);
7a19
> typedef void BZFILE;
9,17c21,22
< #define BZ_OK                2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< typedef 
<    struct {
<       int next_out;
<       ;
<    } 
<    bz_stream;
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
>                                            void **unused, int *nUnused);
18a24
> BZ_EXTERN int BZ_API(BZ2_bzRead);
19a26,28
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
>                                           int blockSize100k, int verbosity,
>                                           int workFactor);
21c30
< #include <stdio.h>
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
23,24c32,34
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
>                                         unsigned int *nbytes_in,
>                                         unsigned int *nbytes_out);
25a36,40
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
>                                           unsigned int *nbytes_in_lo32,
>                                           unsigned int *nbytes_in_hi32,
>                                           unsigned int *nbytes_out_lo32,
>                                           unsigned int *nbytes_out_hi32);
26a42,44
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
>     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
>     int blockSize100k, int verbosity, int workFactor);
27a46,50
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
>                                                  unsigned int *destLen,
>                                                  char *source,
>                                                  unsigned int sourceLen,
>                                                  int small, int verbosity);
29,36c52
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< typedef void BZFILE;
---
> int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
38,115c54
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
118c57
< typedef unsigned char   Bool;
---
> typedef unsigned char Bool;
120c59
< typedef unsigned int    UInt32;
---
> typedef unsigned int UInt32;
124,179c63
< #define BZ_N_OVERSHOOT 
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       ;
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< #4096
< #define MTFL_SIZE Bool isempty_RL 
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        )
< ;
< 
< 
< 
< int ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR                    \
< 
< 
< typedef 
<    struct {
<       ;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
---
> #define BZ_N_OVERSHOOT
180a65
> typedef struct { ; } EState;
182,190c67,68
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
> # 4096
> #define MTFL_SIZE Bool isempty_RL
192a71,72
> int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
>                                int verbosity, int);
193a74
> int;
194a76
> #define BZ_SETERR
196,203c78,83
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
< 
< 
---
> typedef struct {
>   ;
>   bz_stream strm;
>   Int32 lastErr;
>   Bool initialisedOk;
> } bzFile;
205,211c85,86
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
>                                 int verbosity, int workFactor);
212a88
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
214,222c90,92
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
---
> void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
>                               unsigned int *nbytes_in,
>                               unsigned int *nbytes_out);
223a94,98
> void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
>                                 unsigned int *nbytes_in_lo32,
>                                 unsigned int *nbytes_in_hi32,
>                                 unsigned int *nbytes_out_lo32,
>                                 unsigned int *nbytes_out_hi32);
224a100
> BZFILE *BZ_API (*b)(int *bzerror, BZFILE *b, void *buf, int len) {
226,233c102
< BZFILE* BZ_API(*b ) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = b;
---
>   bzFile *bzf = b;
235c104
<    BZ_SETERR;
---
>   BZ_SETERR;
237,238c106,107
<    if (0)
<       bzf->strm.next_out ; 
---
>   if (0)
>     bzf->strm.next_out;
240a110,111
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
>                                  int *nUnused);
241a113,120
> int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
>                                      char *source, unsigned int sourceLen,
>                                      int blockSize100k, int verbosity,
>                                      int workFactor);
> 
> int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
>                                        char *source, unsigned int sourceLen,
>                                        int small, int verbosity);
243,247d121
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
250,291c124,129
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if  (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
> int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
>   int bzerr, nread;
>   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
>     ;
>   else
>     ;
294,301c132
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< ;
< 
< 
< 
<  
\ No newline at end of file
---
> int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
(98.0 %, 4159 bytes)
===< pass_clex :: rm-toks-10 >===
3,5c3
< #define BZ_OK 2
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
---
> BZ_STREAM_END 4
3,5c3
< #define BZ_OK 2
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
---
> #4
3,6c3
< #define BZ_OK 2
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
< typedef struct {
---
> #define typedef struct {
3,6c3
< #define BZ_OK 2
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
< typedef struct {
---
> #define BZ_OK struct {
4,6c4
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
< typedef struct {
---
> {
4,7c4
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
< typedef struct {
<   int next_out;
---
> #int next_out;
4,7c4
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
< typedef struct {
<   int next_out;
---
> #define next_out;
4,7c4
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
< typedef struct {
<   int next_out;
---
> #define BZ_FINISH_OK ;
5,8c5
< #define BZ_STREAM_END 4
< typedef struct {
<   int next_out;
<   ;
---
> ;
5,9c5
< #define BZ_STREAM_END 4
< typedef struct {
<   int next_out;
<   ;
< } bz_stream;
---
> #} bz_stream;
5,9c5
< #define BZ_STREAM_END 4
< typedef struct {
<   int next_out;
<   ;
< } bz_stream;
---
> #define bz_stream;
5,9c5
< #define BZ_STREAM_END 4
< typedef struct {
<   int next_out;
<   ;
< } bz_stream;
---
> #define BZ_STREAM_END ;
6,10d5
< typedef struct {
<   int next_out;
<   ;
< } bz_stream;
< 
6,11c6
< typedef struct {
<   int next_out;
<   ;
< } bz_stream;
< 
< #include <stdio.h>
---
> typedef include <stdio.h>
6,11c6
< typedef struct {
<   int next_out;
<   ;
< } bz_stream;
< 
< #include <stdio.h>
---
> typedef struct <stdio.h>
7,11c7
<   int next_out;
<   ;
< } bz_stream;
< 
< #include <stdio.h>
---
>   stdio.h>
7,11c7
<   int next_out;
<   ;
< } bz_stream;
< 
< #include <stdio.h>
---
>   int .h>
7,11c7
<   int next_out;
<   ;
< } bz_stream;
< 
< #include <stdio.h>
---
>   int next_outh>
8,11c8
<   ;
< } bz_stream;
< 
< #include <stdio.h>
---
>   >
9,12d8
< } bz_stream;
< 
< #include <stdio.h>
< 
9,13c9
< } bz_stream;
< 
< #include <stdio.h>
< 
< #define BZ_API(func) func
---
> } define BZ_API(func) func
9,13c9
< } bz_stream;
< 
< #include <stdio.h>
< 
< #define BZ_API(func) func
---
> } bz_streamBZ_API(func) func
11,13c11
< #include <stdio.h>
< 
< #define BZ_API(func) func
---
> (func) func
11,13c11
< #include <stdio.h>
< 
< #define BZ_API(func) func
---
> #func) func
11,13c11
< #include <stdio.h>
< 
< #define BZ_API(func) func
---
> #include ) func
11,13c11
< #include <stdio.h>
< 
< #define BZ_API(func) func
---
> #include <func
11,14c11
< #include <stdio.h>
< 
< #define BZ_API(func) func
< #define BZ_EXTERN extern
---
> #include <stdio#define BZ_EXTERN extern
11,14c11
< #include <stdio.h>
< 
< #define BZ_API(func) func
< #define BZ_EXTERN extern
---
> #include <stdio.define BZ_EXTERN extern
11,14c11
< #include <stdio.h>
< 
< #define BZ_API(func) func
< #define BZ_EXTERN extern
---
> #include <stdio.hBZ_EXTERN extern
13,14c13
< #define BZ_API(func) func
< #define BZ_EXTERN extern
---
> extern
13,16c13
< #define BZ_API(func) func
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> #BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
13,16c13
< #define BZ_API(func) func
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> #define int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
13,16c13
< #define BZ_API(func) func
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> #define BZ_APIBZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
13,16c13
< #define BZ_API(func) func
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> #define BZ_API((BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
13,16c13
< #define BZ_API(func) func
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> #define BZ_API(funcBZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
13,16c13
< #define BZ_API(func) func
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> #define BZ_API(func) )(bz_stream *strm, int blockSize100k,
14,16c14
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> (bz_stream *strm, int blockSize100k,
14,16c14
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> #bz_stream *strm, int blockSize100k,
14,16c14
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> #define *strm, int blockSize100k,
14,16c14
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> #define BZ_EXTERN strm, int blockSize100k,
16c16
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> , int blockSize100k,
16c16
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> BZ_EXTERN int blockSize100k,
16c16
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> BZ_EXTERN int blockSize100k,
16c16
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> BZ_EXTERN int BZ_API,
16,17c16
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                          int verbosity, int workFactor);
---
> BZ_EXTERN int BZ_API(int verbosity, int workFactor);
16,17c16
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                          int verbosity, int workFactor);
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInitverbosity, int workFactor);
16,17c16
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                          int verbosity, int workFactor);
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit), int workFactor);
16,17c16
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                          int verbosity, int workFactor);
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(int workFactor);
16,17c16
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                          int verbosity, int workFactor);
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream workFactor);
16,17c16
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                          int verbosity, int workFactor);
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *);
16,17c16
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                          int verbosity, int workFactor);
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm;
16,19c16
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                          int verbosity, int workFactor);
< 
< typedef void BZFILE;
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, typedef void BZFILE;
16,19c16
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                          int verbosity, int workFactor);
< 
< typedef void BZFILE;
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int void BZFILE;
16,19c16
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                          int verbosity, int workFactor);
< 
< typedef void BZFILE;
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100kBZFILE;
17,19c17
<                                          int verbosity, int workFactor);
< 
< typedef void BZFILE;
---
>                                          ;
17,21c17
<                                          int verbosity, int workFactor);
< 
< typedef void BZFILE;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>                                          int BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
17,21c17
<                                          int verbosity, int workFactor);
< 
< typedef void BZFILE;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>                                          int verbosityvoid BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
17,21c17
<                                          int verbosity, int workFactor);
< 
< typedef void BZFILE;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>                                          int verbosity, BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
17,21c17
<                                          int verbosity, int workFactor);
< 
< typedef void BZFILE;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>                                          int verbosity, int (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
17,21c17
<                                          int verbosity, int workFactor);
< 
< typedef void BZFILE;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>                                          int verbosity, int workFactorBZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
17,21c17
<                                          int verbosity, int workFactor);
< 
< typedef void BZFILE;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>                                          int verbosity, int workFactor))(int *bzerror, BZFILE *b,
19,21c19
< typedef void BZFILE;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> (int *bzerror, BZFILE *b,
19,21c19
< typedef void BZFILE;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> typedef int *bzerror, BZFILE *b,
19,21c19
< typedef void BZFILE;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> typedef void *bzerror, BZFILE *b,
19,21c19
< typedef void BZFILE;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> typedef void BZFILEbzerror, BZFILE *b,
21c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> , BZFILE *b,
21c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> BZ_EXTERN BZFILE *b,
21c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> BZ_EXTERN void *b,
21c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> BZ_EXTERN void BZ_APIb,
21c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> BZ_EXTERN void BZ_API(,
21,22c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
<                                            void **unused, int *nUnused);
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnusedvoid **unused, int *nUnused);
21,22c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
<                                            void **unused, int *nUnused);
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)**unused, int *nUnused);
21,22c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
<                                            void **unused, int *nUnused);
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(*unused, int *nUnused);
21,22c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
<                                            void **unused, int *nUnused);
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int unused, int *nUnused);
21,22c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
<                                            void **unused, int *nUnused);
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *, int *nUnused);
21,22c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
<                                            void **unused, int *nUnused);
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerrorint *nUnused);
21,22c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
<                                            void **unused, int *nUnused);
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, *nUnused);
21,22c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
<                                            void **unused, int *nUnused);
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE nUnused);
21,22c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
<                                            void **unused, int *nUnused);
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *);
21,22c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
<                                            void **unused, int *nUnused);
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b;
22,24c22
<                                            void **unused, int *nUnused);
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead);
---
>                                            BZ_EXTERN int BZ_API(BZ2_bzRead);
22,24c22
<                                            void **unused, int *nUnused);
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead);
---
>                                            void int BZ_API(BZ2_bzRead);
22,24c22
<                                            void **unused, int *nUnused);
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead);
---
>                                            void *BZ_API(BZ2_bzRead);
22,24c22
<                                            void **unused, int *nUnused);
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead);
---
>                                            void **(BZ2_bzRead);
22,24c22
<                                            void **unused, int *nUnused);
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead);
---
>                                            void **unusedBZ2_bzRead);
22,24c22
<                                            void **unused, int *nUnused);
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead);
---
>                                            void **unused, );
22,24c22
<                                            void **unused, int *nUnused);
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead);
---
>                                            void **unused, int ;
22,26c22
<                                            void **unused, int *nUnused);
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead);
< 
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>                                            void **unused, int *BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
22,26c22
<                                            void **unused, int *nUnused);
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead);
< 
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>                                            void **unused, int *nUnusedBZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
22,26c22
<                                            void **unused, int *nUnused);
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead);
< 
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>                                            void **unused, int *nUnused)*BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
24,26c24
< BZ_EXTERN int BZ_API(BZ2_bzRead);
< 
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
24,26c24
< BZ_EXTERN int BZ_API(BZ2_bzRead);
< 
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN (BZ2_bzWriteOpen)(int *bzerror, FILE *f,
24,26c24
< BZ_EXTERN int BZ_API(BZ2_bzRead);
< 
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN int BZ2_bzWriteOpen)(int *bzerror, FILE *f,
24,26c24
< BZ_EXTERN int BZ_API(BZ2_bzRead);
< 
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN int BZ_API)(int *bzerror, FILE *f,
24,26c24
< BZ_EXTERN int BZ_API(BZ2_bzRead);
< 
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN int BZ_API((int *bzerror, FILE *f,
24,26c24
< BZ_EXTERN int BZ_API(BZ2_bzRead);
< 
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN int BZ_API(BZ2_bzReadint *bzerror, FILE *f,
24,26c24
< BZ_EXTERN int BZ_API(BZ2_bzRead);
< 
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN int BZ_API(BZ2_bzRead)*bzerror, FILE *f,
26c26
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> bzerror, FILE *f,
26c26
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN , FILE *f,
26c26
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE FILE *f,
26c26
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE **f,
26c26
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE *BZ_APIf,
26c26
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE *BZ_API(,
26,27c26
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
<                                           int blockSize100k, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpenint blockSize100k, int verbosity,
26,27c26
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
<                                           int blockSize100k, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)blockSize100k, int verbosity,
26,27c26
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
<                                           int blockSize100k, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(, int verbosity,
26,27c26
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
<                                           int blockSize100k, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int int verbosity,
26,27c26
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
<                                           int blockSize100k, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *verbosity,
26,27c26
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
<                                           int blockSize100k, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror,
26,28c26
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
<                                           int blockSize100k, int verbosity,
<                                           int workFactor);
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, int workFactor);
26,28c26
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
<                                           int blockSize100k, int verbosity,
<                                           int workFactor);
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE workFactor);
26,28c26
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
<                                           int blockSize100k, int verbosity,
<                                           int workFactor);
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *);
26,28c26
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
<                                           int blockSize100k, int verbosity,
<                                           int workFactor);
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f;
27,30c27
<                                           int blockSize100k, int verbosity,
<                                           int workFactor);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                           BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
27,30c27
<                                           int blockSize100k, int verbosity,
<                                           int workFactor);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                           int void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
27,30c27
<                                           int blockSize100k, int verbosity,
<                                           int workFactor);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                           int blockSize100kBZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
27,30c27
<                                           int blockSize100k, int verbosity,
<                                           int workFactor);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                           int blockSize100k, (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
27,30c27
<                                           int blockSize100k, int verbosity,
<                                           int workFactor);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                           int blockSize100k, int BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
27,30c27
<                                           int blockSize100k, int verbosity,
<                                           int workFactor);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                           int blockSize100k, int verbosity)(int *bzerror, BZFILE *b, void *buf, int len);
28,30c28
<                                           int workFactor);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                           (int *bzerror, BZFILE *b, void *buf, int len);
28,30c28
<                                           int workFactor);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                           int int *bzerror, BZFILE *b, void *buf, int len);
28,30c28
<                                           int workFactor);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                           int workFactor*bzerror, BZFILE *b, void *buf, int len);
28,30c28
<                                           int workFactor);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                           int workFactor)bzerror, BZFILE *b, void *buf, int len);
30c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> , BZFILE *b, void *buf, int len);
30c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN BZFILE *b, void *buf, int len);
30c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void *b, void *buf, int len);
30c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIb, void *buf, int len);
30c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_API(, void *buf, int len);
30c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_API(BZ2_bzWritevoid *buf, int len);
30c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)*buf, int len);
30c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(buf, int len);
30c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int , int len);
30c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *int len);
30c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerrorlen);
30c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, );
30c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE ;
30,32c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
30,32c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *bvoid BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
30,32c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
30,32c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
30,32c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
30,32c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf)(int *bzerror, BZFILE *b, int abandon,
30,32c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, (int *bzerror, BZFILE *b, int abandon,
30,32c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int int *bzerror, BZFILE *b, int abandon,
30,32c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len*bzerror, BZFILE *b, int abandon,
30,32c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len)bzerror, BZFILE *b, int abandon,
32c32
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> , BZFILE *b, int abandon,
32c32
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN BZFILE *b, int abandon,
32c32
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void *b, int abandon,
32c32
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIb, int abandon,
32c32
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(, int abandon,
32c32
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteCloseint abandon,
32c32
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)abandon,
32c32
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(,
32,33c32
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int unsigned int *nbytes_in,
32,33c32
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *int *nbytes_in,
32,33c32
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror*nbytes_in,
32,33c32
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, nbytes_in,
32,33c32
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE ,
32,34c32
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in,
<                                         unsigned int *nbytes_out);
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *unsigned int *nbytes_out);
32,34c32
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in,
<                                         unsigned int *nbytes_out);
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *bint *nbytes_out);
32,34c32
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in,
<                                         unsigned int *nbytes_out);
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, *nbytes_out);
32,34c32
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in,
<                                         unsigned int *nbytes_out);
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int nbytes_out);
32,34c32
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in,
<                                         unsigned int *nbytes_out);
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon);
33,34c33
<                                         unsigned int *nbytes_in,
<                                         unsigned int *nbytes_out);
---
>                                         ;
33,36c33
<                                         unsigned int *nbytes_in,
<                                         unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                                         unsigned BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
33,36c33
<                                         unsigned int *nbytes_in,
<                                         unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                                         unsigned int void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
33,36c33
<                                         unsigned int *nbytes_in,
<                                         unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                                         unsigned int *BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
33,36c33
<                                         unsigned int *nbytes_in,
<                                         unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                                         unsigned int *nbytes_in(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
34,36c34
<                                         unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                                         BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
34,36c34
<                                         unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                                         unsigned )(int *bzerror, BZFILE *b, int abandon,
34,36c34
<                                         unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                                         unsigned int (int *bzerror, BZFILE *b, int abandon,
34,36c34
<                                         unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                                         unsigned int *int *bzerror, BZFILE *b, int abandon,
34,36c34
<                                         unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                                         unsigned int *nbytes_out*bzerror, BZFILE *b, int abandon,
34,36c34
<                                         unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                                         unsigned int *nbytes_out)bzerror, BZFILE *b, int abandon,
36c36
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> , BZFILE *b, int abandon,
36c36
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN BZFILE *b, int abandon,
36c36
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void *b, int abandon,
36c36
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIb, int abandon,
36c36
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(, int abandon,
36c36
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64int abandon,
36c36
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)abandon,
36c36
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(,
36,37c36
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                           unsigned int *nbytes_in_lo32,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int unsigned int *nbytes_in_lo32,
36,37c36
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                           unsigned int *nbytes_in_lo32,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *int *nbytes_in_lo32,
36,37c36
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                           unsigned int *nbytes_in_lo32,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror*nbytes_in_lo32,
36,37c36
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                           unsigned int *nbytes_in_lo32,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, nbytes_in_lo32,
36,37c36
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                           unsigned int *nbytes_in_lo32,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE ,
36,38c36
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                           unsigned int *nbytes_in_lo32,
<                                           unsigned int *nbytes_in_hi32,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *unsigned int *nbytes_in_hi32,
36,38c36
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                           unsigned int *nbytes_in_lo32,
<                                           unsigned int *nbytes_in_hi32,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *bint *nbytes_in_hi32,
36,38c36
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                           unsigned int *nbytes_in_lo32,
<                                           unsigned int *nbytes_in_hi32,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, *nbytes_in_hi32,
36,38c36
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                           unsigned int *nbytes_in_lo32,
<                                           unsigned int *nbytes_in_hi32,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int nbytes_in_hi32,
37,38d36
<                                           unsigned int *nbytes_in_lo32,
<                                           unsigned int *nbytes_in_hi32,
37,38d36
<                                           unsigned int *nbytes_in_lo32,
<                                           unsigned int *nbytes_in_hi32,
37,38d36
<                                           unsigned int *nbytes_in_lo32,
<                                           unsigned int *nbytes_in_hi32,
37,38d36
<                                           unsigned int *nbytes_in_lo32,
<                                           unsigned int *nbytes_in_hi32,
37,38d36
<                                           unsigned int *nbytes_in_lo32,
<                                           unsigned int *nbytes_in_hi32,
38,39d37
<                                           unsigned int *nbytes_in_hi32,
<                                           unsigned int *nbytes_out_lo32,
38,39d37
<                                           unsigned int *nbytes_in_hi32,
<                                           unsigned int *nbytes_out_lo32,
38,39d37
<                                           unsigned int *nbytes_in_hi32,
<                                           unsigned int *nbytes_out_lo32,
38,39d37
<                                           unsigned int *nbytes_in_hi32,
<                                           unsigned int *nbytes_out_lo32,
38,39d37
<                                           unsigned int *nbytes_in_hi32,
<                                           unsigned int *nbytes_out_lo32,
38,40c38
<                                           unsigned int *nbytes_in_hi32,
<                                           unsigned int *nbytes_out_lo32,
<                                           unsigned int *nbytes_out_hi32);
---
>                                           unsigned int *nbytes_in_hi32);
39,40c39
<                                           unsigned int *nbytes_out_lo32,
<                                           unsigned int *nbytes_out_hi32);
---
>                                           ;
39,42c39
<                                           unsigned int *nbytes_out_lo32,
<                                           unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
>                                           unsigned BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
39,42c39
<                                           unsigned int *nbytes_out_lo32,
<                                           unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
>                                           unsigned int int BZ_API(BZ2_bzBuffToBuffCompress)(
39,42c39
<                                           unsigned int *nbytes_out_lo32,
<                                           unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
>                                           unsigned int *BZ_API(BZ2_bzBuffToBuffCompress)(
39,42c39
<                                           unsigned int *nbytes_out_lo32,
<                                           unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
>                                           unsigned int *nbytes_out_lo32(BZ2_bzBuffToBuffCompress)(
40,42c40
<                                           unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
>                                           BZ2_bzBuffToBuffCompress)(
40,42c40
<                                           unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
>                                           unsigned )(
40,42c40
<                                           unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
>                                           unsigned int (
40,43c40
<                                           unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>                                           unsigned int *char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
40,43c40
<                                           unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>                                           unsigned int *nbytes_out_hi32*dest, unsigned int *destLen, char *source, unsigned int sourceLen,
40,43c40
<                                           unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>                                           unsigned int *nbytes_out_hi32)dest, unsigned int *destLen, char *source, unsigned int sourceLen,
42,43c42
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
> , unsigned int *destLen, char *source, unsigned int sourceLen,
42,43c42
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
> BZ_EXTERN unsigned int *destLen, char *source, unsigned int sourceLen,
42,43c42
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
> BZ_EXTERN int int *destLen, char *source, unsigned int sourceLen,
42,43c42
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
> BZ_EXTERN int BZ_API*destLen, char *source, unsigned int sourceLen,
42,43c42
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
> BZ_EXTERN int BZ_API(destLen, char *source, unsigned int sourceLen,
42,43c42
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress, char *source, unsigned int sourceLen,
42,43c42
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)char *source, unsigned int sourceLen,
43c43
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     *source, unsigned int sourceLen,
43c43
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char source, unsigned int sourceLen,
43c43
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *, unsigned int sourceLen,
43c43
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *destunsigned int sourceLen,
43c43
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *dest, int sourceLen,
43c43
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *dest, unsigned sourceLen,
43c43
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *dest, unsigned int ,
43,44c43
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *dest, unsigned int *int blockSize100k, int verbosity, int workFactor);
43,44c43
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *dest, unsigned int *destLenblockSize100k, int verbosity, int workFactor);
43,44c43
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *dest, unsigned int *destLen, , int verbosity, int workFactor);
43,44c43
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *dest, unsigned int *destLen, char int verbosity, int workFactor);
43,44c43
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *dest, unsigned int *destLen, char *verbosity, int workFactor);
43,44c43
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *dest, unsigned int *destLen, char *source, int workFactor);
43,44c43
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *dest, unsigned int *destLen, char *source, int workFactor);
43,44c43
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *dest, unsigned int *destLen, char *source, unsigned workFactor);
43,44c43
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *dest, unsigned int *destLen, char *source, unsigned int );
43,44c43
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen;
44,46c44
<     int blockSize100k, int verbosity, int workFactor);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>     BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
44,46c44
<     int blockSize100k, int verbosity, int workFactor);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>     int int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
44,46c44
<     int blockSize100k, int verbosity, int workFactor);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>     int blockSize100kBZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
44,46c44
<     int blockSize100k, int verbosity, int workFactor);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>     int blockSize100k, (BZ2_bzBuffToBuffDecompress)(char *dest,
44,46c44
<     int blockSize100k, int verbosity, int workFactor);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>     int blockSize100k, int BZ2_bzBuffToBuffDecompress)(char *dest,
44,46c44
<     int blockSize100k, int verbosity, int workFactor);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>     int blockSize100k, int verbosity)(char *dest,
44,46c44
<     int blockSize100k, int verbosity, int workFactor);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>     int blockSize100k, int verbosity, (char *dest,
44,46c44
<     int blockSize100k, int verbosity, int workFactor);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>     int blockSize100k, int verbosity, int char *dest,
44,46c44
<     int blockSize100k, int verbosity, int workFactor);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>     int blockSize100k, int verbosity, int workFactor*dest,
44,46c44
<     int blockSize100k, int verbosity, int workFactor);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>     int blockSize100k, int verbosity, int workFactor)dest,
46c46
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
> ,
46,47c46
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
<                                                  unsigned int *destLen,
---
> BZ_EXTERN unsigned int *destLen,
46,47c46
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
<                                                  unsigned int *destLen,
---
> BZ_EXTERN int int *destLen,
46,47c46
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
<                                                  unsigned int *destLen,
---
> BZ_EXTERN int BZ_API*destLen,
46,47c46
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
<                                                  unsigned int *destLen,
---
> BZ_EXTERN int BZ_API(destLen,
46,47c46
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
<                                                  unsigned int *destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress,
46,48c46
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
<                                                  unsigned int *destLen,
<                                                  char *source,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)char *source,
46,48c46
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
<                                                  unsigned int *destLen,
<                                                  char *source,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(*source,
46,48c46
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
<                                                  unsigned int *destLen,
<                                                  char *source,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char source,
46,48c46
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
<                                                  unsigned int *destLen,
<                                                  char *source,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *,
46,49c46
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
<                                                  unsigned int *destLen,
<                                                  char *source,
<                                                  unsigned int sourceLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *destunsigned int sourceLen,
47,49c47
<                                                  unsigned int *destLen,
<                                                  char *source,
<                                                  unsigned int sourceLen,
---
>                                                  int sourceLen,
47,49c47
<                                                  unsigned int *destLen,
<                                                  char *source,
<                                                  unsigned int sourceLen,
---
>                                                  unsigned sourceLen,
47,49c47
<                                                  unsigned int *destLen,
<                                                  char *source,
<                                                  unsigned int sourceLen,
---
>                                                  unsigned int ,
47,50c47
<                                                  unsigned int *destLen,
<                                                  char *source,
<                                                  unsigned int sourceLen,
<                                                  int small, int verbosity);
---
>                                                  unsigned int *int small, int verbosity);
47,50c47
<                                                  unsigned int *destLen,
<                                                  char *source,
<                                                  unsigned int sourceLen,
<                                                  int small, int verbosity);
---
>                                                  unsigned int *destLensmall, int verbosity);
48,50c48
<                                                  char *source,
<                                                  unsigned int sourceLen,
<                                                  int small, int verbosity);
---
>                                                  , int verbosity);
48,50c48
<                                                  char *source,
<                                                  unsigned int sourceLen,
<                                                  int small, int verbosity);
---
>                                                  char int verbosity);
48,50c48
<                                                  char *source,
<                                                  unsigned int sourceLen,
<                                                  int small, int verbosity);
---
>                                                  char *verbosity);
48,50c48
<                                                  char *source,
<                                                  unsigned int sourceLen,
<                                                  int small, int verbosity);
---
>                                                  char *source);
49,50c49
<                                                  unsigned int sourceLen,
<                                                  int small, int verbosity);
---
>                                                  ;
49,52c49
<                                                  unsigned int sourceLen,
<                                                  int small, int verbosity);
< 
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>                                                  unsigned int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
49,52c49
<                                                  unsigned int sourceLen,
<                                                  int small, int verbosity);
< 
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>                                                  unsigned int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
49,52c49
<                                                  unsigned int sourceLen,
<                                                  int small, int verbosity);
< 
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>                                                  unsigned int sourceLen(BZ2_bzread)(BZFILE *b, void *buf, int len);
50,52c50
<                                                  int small, int verbosity);
< 
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>                                                  BZ2_bzread)(BZFILE *b, void *buf, int len);
50,52c50
<                                                  int small, int verbosity);
< 
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>                                                  int )(BZFILE *b, void *buf, int len);
50,52c50
<                                                  int small, int verbosity);
< 
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>                                                  int small(BZFILE *b, void *buf, int len);
50,52c50
<                                                  int small, int verbosity);
< 
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>                                                  int small, BZFILE *b, void *buf, int len);
50,52c50
<                                                  int small, int verbosity);
< 
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>                                                  int small, int *b, void *buf, int len);
50,52c50
<                                                  int small, int verbosity);
< 
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>                                                  int small, int verbosityb, void *buf, int len);
50,52c50
<                                                  int small, int verbosity);
< 
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
---
>                                                  int small, int verbosity), void *buf, int len);
52c52
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
---
> void *buf, int len);
52c52
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
---
> int *buf, int len);
52c52
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
---
> int BZ_APIbuf, int len);
52c52
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
---
> int BZ_API(, int len);
52c52
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
---
> int BZ_API(BZ2_bzreadint len);
52c52
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
---
> int BZ_API(BZ2_bzread)len);
52c52
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
---
> int BZ_API(BZ2_bzread)();
52c52
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
---
> int BZ_API(BZ2_bzread)(BZFILE ;
52,54c52
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
> int BZ_API(BZ2_bzread)(BZFILE *BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
52,54c52
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
> int BZ_API(BZ2_bzread)(BZFILE *bint BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
52,54c52
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
> int BZ_API(BZ2_bzread)(BZFILE *b, BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
52,54c52
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
> int BZ_API(BZ2_bzread)(BZFILE *b, void (BZ2_bzwrite)(BZFILE *b, void *buf, int len);
52,54c52
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
> int BZ_API(BZ2_bzread)(BZFILE *b, void *BZ2_bzwrite)(BZFILE *b, void *buf, int len);
52,54c52
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
> int BZ_API(BZ2_bzread)(BZFILE *b, void *buf)(BZFILE *b, void *buf, int len);
(98.0 %, 4130 bytes)
52,54c52
< int BZ_API(BZ2_bzread)();
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
> int BZ_API(BZ2_bzread)(*b, void *buf, int len);
52,54c52
< int BZ_API(BZ2_bzread)();
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
> int BZ_API(BZ2_bzread)()b, void *buf, int len);
54c54
< BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
> , void *buf, int len);
54c54
< BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void *buf, int len);
54c54
< BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int *buf, int len);
54c54
< BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_APIbuf, int len);
54c54
< BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_API(, int len);
54c54
< BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_API(BZ2_bzwriteint len);
54c54
< BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_API(BZ2_bzwrite)len);
54c54
< BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_API(BZ2_bzwrite)();
54c54
< BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
> BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE ;
54,56c54
< BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
< 
< Char;
---
> BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *Char;
54,56c54
< BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
< 
< Char;
---
> BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b;
54,57c54
< BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
< 
< Char;
< typedef unsigned char Bool;
---
> BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, typedef unsigned char Bool;
54,57c54
< BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
< 
< Char;
< typedef unsigned char Bool;
---
> BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void unsigned char Bool;
54,57c54
< BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
< 
< Char;
< typedef unsigned char Bool;
---
> BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *char Bool;
54,57c54
< BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
< 
< Char;
< typedef unsigned char Bool;
---
> BZ_EXTERN int BZ_API(BZ2_bzwrite)(BZFILE *b, void *bufBool;
(98.0 %, 4101 bytes)
54,58c54
< BZ_EXTERN int BZ_API(BZ2_bzwrite)();
< 
< Char;
< typedef unsigned char Bool;
< typedef Int32;
---
> BZ_EXTERN int BZ_API(BZ2_bzwrite)(Int32;
55,58d54
< 
< Char;
< typedef unsigned char Bool;
< typedef Int32;
56,58d55
< Char;
< typedef unsigned char Bool;
< typedef Int32;
56,59c56
< Char;
< typedef unsigned char Bool;
< typedef Int32;
< typedef unsigned int UInt32;
---
> Charunsigned int UInt32;
57,59c57
< typedef unsigned char Bool;
< typedef Int32;
< typedef unsigned int UInt32;
---
> int UInt32;
57,59c57
< typedef unsigned char Bool;
< typedef Int32;
< typedef unsigned int UInt32;
---
> typedef UInt32;
57,59c57
< typedef unsigned char Bool;
< typedef Int32;
< typedef unsigned int UInt32;
---
> typedef unsigned ;
57,60c57
< typedef unsigned char Bool;
< typedef Int32;
< typedef unsigned int UInt32;
< ;
---
> typedef unsigned char ;
57,62c57
< typedef unsigned char Bool;
< typedef Int32;
< typedef unsigned int UInt32;
< ;
< 
< #define BZ_N_SHELL 18
---
> typedef unsigned char Bool#define BZ_N_SHELL 18
58,62c58
< typedef Int32;
< typedef unsigned int UInt32;
< ;
< 
< #define BZ_N_SHELL 18
---
> define BZ_N_SHELL 18
58,62c58
< typedef Int32;
< typedef unsigned int UInt32;
< ;
< 
< #define BZ_N_SHELL 18
---
> typedef BZ_N_SHELL 18
58,62c58
< typedef Int32;
< typedef unsigned int UInt32;
< ;
< 
< #define BZ_N_SHELL 18
---
> typedef Int3218
59,62d58
< typedef unsigned int UInt32;
< ;
< 
< #define BZ_N_SHELL 18
59,63c59
< typedef unsigned int UInt32;
< ;
< 
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT
---
> typedef define BZ_N_OVERSHOOT
59,63c59
< typedef unsigned int UInt32;
< ;
< 
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT
---
> typedef unsigned BZ_N_OVERSHOOT
59,65c59
< typedef unsigned int UInt32;
< ;
< 
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT
< 
< typedef struct { ; } EState;
---
> typedef unsigned int typedef struct { ; } EState;
59,65c59
< typedef unsigned int UInt32;
< ;
< 
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT
< 
< typedef struct { ; } EState;
---
> typedef unsigned int UInt32struct { ; } EState;
60,65c60
< ;
< 
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT
< 
< typedef struct { ; } EState;
---
> { ; } EState;
62,65c62
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT
< 
< typedef struct { ; } EState;
---
> ; } EState;
62,65c62
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT
< 
< typedef struct { ; } EState;
---
> #} EState;
(98.0 %, 4047 bytes)
59,62d58
< #define BZ_N_OVERSHOOT
< 
< typedef struct { ; } EState;
< 
59,63c59
< #define BZ_N_OVERSHOOT
< 
< typedef struct { ; } EState;
< 
< # 4096
---
> #4096
(98.1 %, 3993 bytes)
59,63c59
< # 4096
< #define MTFL_SIZE Bool isempty_RL
< ;
< 
< int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
59,63c59
< # 4096
< #define MTFL_SIZE Bool isempty_RL
< ;
< 
< int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> # BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
60,63c60
< #define MTFL_SIZE Bool isempty_RL
< ;
< 
< int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> )(bz_stream *strm, int blockSize100k,
60,63c60
< #define MTFL_SIZE Bool isempty_RL
< ;
< 
< int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> #(bz_stream *strm, int blockSize100k,
60,63c60
< #define MTFL_SIZE Bool isempty_RL
< ;
< 
< int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> #define bz_stream *strm, int blockSize100k,
60,63c60
< #define MTFL_SIZE Bool isempty_RL
< ;
< 
< int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> #define MTFL_SIZE *strm, int blockSize100k,
60,63c60
< #define MTFL_SIZE Bool isempty_RL
< ;
< 
< int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> #define MTFL_SIZE Bool strm, int blockSize100k,
61,63c61
< ;
< 
< int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> , int blockSize100k,
(98.1 %, 3939 bytes)
59c59
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> ,
59,60c59
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                int verbosity, int);
---
> (int verbosity, int);
59,60c59
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                int verbosity, int);
---
> (BZ2_bzCompressInitverbosity, int);
59,60c59
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                int verbosity, int);
---
> (BZ2_bzCompressInit), int);
59,60c59
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                int verbosity, int);
---
> (BZ2_bzCompressInit)(int);
59,60c59
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                int verbosity, int);
---
> (BZ2_bzCompressInit)(bz_stream );
59,60c59
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                int verbosity, int);
---
> (BZ2_bzCompressInit)(bz_stream *;
59,62c59
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                int verbosity, int);
< 
< int;
---
> (BZ2_bzCompressInit)(bz_stream *strmint;
59,62c59
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                int verbosity, int);
< 
< int;
---
> (BZ2_bzCompressInit)(bz_stream *strm, ;
59,64c59
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                int verbosity, int);
< 
< int;
< 
< #define BZ_SETERR
---
> (BZ2_bzCompressInit)(bz_stream *strm, int #define BZ_SETERR
59,64c59
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                int verbosity, int);
< 
< int;
< 
< #define BZ_SETERR
---
> (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100kdefine BZ_SETERR
60,64c60
<                                int verbosity, int);
< 
< int;
< 
< #define BZ_SETERR
---
>                                BZ_SETERR
60,66c60
<                                int verbosity, int);
< 
< int;
< 
< #define BZ_SETERR
< 
< typedef struct {
---
>                                int typedef struct {
60,66c60
<                                int verbosity, int);
< 
< int;
< 
< #define BZ_SETERR
< 
< typedef struct {
---
>                                int verbositystruct {
60,66c60
<                                int verbosity, int);
< 
< int;
< 
< #define BZ_SETERR
< 
< typedef struct {
---
>                                int verbosity, {
60,67c60
<                                int verbosity, int);
< 
< int;
< 
< #define BZ_SETERR
< 
< typedef struct {
<   ;
---
>                                int verbosity, int;
60,68c60
<                                int verbosity, int);
< 
< int;
< 
< #define BZ_SETERR
< 
< typedef struct {
<   ;
<   bz_stream strm;
---
>                                int verbosity, int)bz_stream strm;
62,68c62
< int;
< 
< #define BZ_SETERR
< 
< typedef struct {
<   ;
<   bz_stream strm;
---
> strm;
63,68d62
< 
< #define BZ_SETERR
< 
< typedef struct {
<   ;
<   bz_stream strm;
64,69c64
< #define BZ_SETERR
< 
< typedef struct {
<   ;
<   bz_stream strm;
<   Int32 lastErr;
---
> Int32 lastErr;
64,69c64
< #define BZ_SETERR
< 
< typedef struct {
<   ;
<   bz_stream strm;
<   Int32 lastErr;
---
> #lastErr;
64,69c64
< #define BZ_SETERR
< 
< typedef struct {
<   ;
<   bz_stream strm;
<   Int32 lastErr;
---
> #define ;
66,70c66
< typedef struct {
<   ;
<   bz_stream strm;
<   Int32 lastErr;
<   Bool initialisedOk;
---
> Bool initialisedOk;
66,70c66
< typedef struct {
<   ;
<   bz_stream strm;
<   Int32 lastErr;
<   Bool initialisedOk;
---
> typedef initialisedOk;
66,70c66
< typedef struct {
<   ;
<   bz_stream strm;
<   Int32 lastErr;
<   Bool initialisedOk;
---
> typedef struct ;
67,71c67
<   ;
<   bz_stream strm;
<   Int32 lastErr;
<   Bool initialisedOk;
< } bzFile;
---
>   } bzFile;
68,71c68
<   bz_stream strm;
<   Int32 lastErr;
<   Bool initialisedOk;
< } bzFile;
---
>   bzFile;
68,71c68
<   bz_stream strm;
<   Int32 lastErr;
<   Bool initialisedOk;
< } bzFile;
---
>   bz_stream ;
68,73c68
<   bz_stream strm;
<   Int32 lastErr;
<   Bool initialisedOk;
< } bzFile;
< 
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>   bz_stream strmBZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
69,73c69
<   Int32 lastErr;
<   Bool initialisedOk;
< } bzFile;
< 
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>   *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
69,73c69
<   Int32 lastErr;
<   Bool initialisedOk;
< } bzFile;
< 
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>   Int32 BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
69,73c69
<   Int32 lastErr;
<   Bool initialisedOk;
< } bzFile;
< 
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>   Int32 lastErr(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
70,73c70
<   Bool initialisedOk;
< } bzFile;
< 
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>   BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
70,73c70
<   Bool initialisedOk;
< } bzFile;
< 
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>   Bool )(int *bzerror, FILE *f, int blockSize100k,
70,73c70
<   Bool initialisedOk;
< } bzFile;
< 
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>   Bool initialisedOk(int *bzerror, FILE *f, int blockSize100k,
71,73c71
< } bzFile;
< 
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> int *bzerror, FILE *f, int blockSize100k,
71,73c71
< } bzFile;
< 
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> } *bzerror, FILE *f, int blockSize100k,
71,73c71
< } bzFile;
< 
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> } bzFilebzerror, FILE *f, int blockSize100k,
73c73
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> , FILE *f, int blockSize100k,
73c73
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE FILE *f, int blockSize100k,
73c73
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE **f, int blockSize100k,
73c73
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_APIf, int blockSize100k,
73c73
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_API(, int blockSize100k,
73c73
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_API(BZ2_bzWriteOpenint blockSize100k,
73c73
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)blockSize100k,
73c73
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(,
73,74c73
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor);
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int int verbosity, int workFactor);
73,74c73
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor);
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int *verbosity, int workFactor);
73,74c73
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor);
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, int workFactor);
73,74c73
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor);
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, int workFactor);
73,74c73
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor);
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE workFactor);
73,74c73
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor);
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *);
73,74c73
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor);
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f;
73,76c73
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor);
< 
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
73,76c73
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor);
< 
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
73,76c73
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor);
< 
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
74,76c74
<                                 int verbosity, int workFactor);
< 
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                 BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
74,76c74
<                                 int verbosity, int workFactor);
< 
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                 int )(int *bzerror, BZFILE *b, void *buf, int len);
74,76c74
<                                 int verbosity, int workFactor);
< 
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                 int verbosity(int *bzerror, BZFILE *b, void *buf, int len);
74,76c74
<                                 int verbosity, int workFactor);
< 
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                 int verbosity, int *bzerror, BZFILE *b, void *buf, int len);
74,76c74
<                                 int verbosity, int workFactor);
< 
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                 int verbosity, int *bzerror, BZFILE *b, void *buf, int len);
74,76c74
<                                 int verbosity, int workFactor);
< 
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                 int verbosity, int workFactorbzerror, BZFILE *b, void *buf, int len);
74,76c74
<                                 int verbosity, int workFactor);
< 
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                 int verbosity, int workFactor), BZFILE *b, void *buf, int len);
76c76
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZFILE *b, void *buf, int len);
76c76
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void *b, void *buf, int len);
76c76
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIb, void *buf, int len);
76c76
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(, void *buf, int len);
76c76
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWritevoid *buf, int len);
76c76
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite)*buf, int len);
76c76
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite)(buf, int len);
76c76
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite)(int , int len);
76c76
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite)(int *int len);
76c76
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite)(int *bzerrorlen);
76c76
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, );
76c76
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE ;
76,78c76
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
76,78c76
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *bBZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
76,78c76
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
76,78c76
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
76,78c76
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *)(int *bzerror, BZFILE *b, int abandon,
76,78c76
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf(int *bzerror, BZFILE *b, int abandon,
76,78c76
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int *bzerror, BZFILE *b, int abandon,
76,78c76
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int *bzerror, BZFILE *b, int abandon,
76,78c76
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int lenbzerror, BZFILE *b, int abandon,
76,78c76
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len), BZFILE *b, int abandon,
78c78
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZFILE *b, int abandon,
78c78
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void *b, int abandon,
78c78
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIb, int abandon,
78c78
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(, int abandon,
78c78
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteCloseint abandon,
78c78
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose)abandon,
78c78
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose)(,
78,79c78
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
---
> void BZ_API(BZ2_bzWriteClose)(int unsigned int *nbytes_in,
78,79c78
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
---
> void BZ_API(BZ2_bzWriteClose)(int *int *nbytes_in,
78,79c78
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
---
> void BZ_API(BZ2_bzWriteClose)(int *bzerror*nbytes_in,
78,79c78
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
---
> void BZ_API(BZ2_bzWriteClose)(int *bzerror, nbytes_in,
78,79c78
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
---
> void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE ,
78,80c78
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
<                               unsigned int *nbytes_out);
---
> void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *unsigned int *nbytes_out);
78,80c78
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
<                               unsigned int *nbytes_out);
---
> void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *bint *nbytes_out);
78,80c78
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
<                               unsigned int *nbytes_out);
---
> void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, *nbytes_out);
78,80c78
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
<                               unsigned int *nbytes_out);
---
> void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int nbytes_out);
78,80c78
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
<                               unsigned int *nbytes_out);
---
> void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon);
79,80c79
<                               unsigned int *nbytes_in,
<                               unsigned int *nbytes_out);
---
>                               ;
79,82c79
<                               unsigned int *nbytes_in,
<                               unsigned int *nbytes_out);
< 
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                               unsigned void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
79,82c79
<                               unsigned int *nbytes_in,
<                               unsigned int *nbytes_out);
< 
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                               unsigned int BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
79,82c79
<                               unsigned int *nbytes_in,
<                               unsigned int *nbytes_out);
< 
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                               unsigned int *(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
79,82c79
<                               unsigned int *nbytes_in,
<                               unsigned int *nbytes_out);
< 
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                               unsigned int *nbytes_inBZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
80,82c80
<                               unsigned int *nbytes_out);
< 
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                               )(int *bzerror, BZFILE *b, int abandon,
80,82c80
<                               unsigned int *nbytes_out);
< 
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                               unsigned (int *bzerror, BZFILE *b, int abandon,
80,82c80
<                               unsigned int *nbytes_out);
< 
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                               unsigned int int *bzerror, BZFILE *b, int abandon,
80,82c80
<                               unsigned int *nbytes_out);
< 
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                               unsigned int **bzerror, BZFILE *b, int abandon,
80,82c80
<                               unsigned int *nbytes_out);
< 
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                               unsigned int *nbytes_outbzerror, BZFILE *b, int abandon,
80,82c80
<                               unsigned int *nbytes_out);
< 
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                               unsigned int *nbytes_out), BZFILE *b, int abandon,
82c82
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZFILE *b, int abandon,
82c82
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void *b, int abandon,
82c82
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIb, int abandon,
82c82
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(, int abandon,
82c82
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose64int abandon,
82c82
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose64)abandon,
82c82
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose64)(,
82,83c82
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
---
> void BZ_API(BZ2_bzWriteClose64)(int unsigned int *nbytes_in_lo32,
82,83c82
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
---
> void BZ_API(BZ2_bzWriteClose64)(int *int *nbytes_in_lo32,
82,83c82
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
---
> void BZ_API(BZ2_bzWriteClose64)(int *bzerror*nbytes_in_lo32,
82,83c82
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
---
> void BZ_API(BZ2_bzWriteClose64)(int *bzerror, nbytes_in_lo32,
82,83c82
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
---
> void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE ,
82,84c82
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
---
> void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *unsigned int *nbytes_in_hi32,
82,84c82
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
---
> void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *bint *nbytes_in_hi32,
82,84c82
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
---
> void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, *nbytes_in_hi32,
82,84c82
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
---
> void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int nbytes_in_hi32,
83,84d82
<                                 unsigned int *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
83,84d82
<                                 unsigned int *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
83,84d82
<                                 unsigned int *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
83,84d82
<                                 unsigned int *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
83,84d82
<                                 unsigned int *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
84,85d83
<                                 unsigned int *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
84,85d83
<                                 unsigned int *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
84,85d83
<                                 unsigned int *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
84,85d83
<                                 unsigned int *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
84,85d83
<                                 unsigned int *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
84,86c84
<                                 unsigned int *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32);
---
>                                 unsigned int *nbytes_in_hi32);
85,86c85
<                                 unsigned int *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32);
---
>                                 ;
85,88c85
<                                 unsigned int *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_API (*b)(int *bzerror, BZFILE *b, void *buf, int len) {
---
>                                 unsigned BZFILE *BZ_API (*b)(int *bzerror, BZFILE *b, void *buf, int len) {
85,88c85
<                                 unsigned int *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_API (*b)(int *bzerror, BZFILE *b, void *buf, int len) {
---
>                                 unsigned int *BZ_API (*b)(int *bzerror, BZFILE *b, void *buf, int len) {
85,88c85
<                                 unsigned int *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_API (*b)(int *bzerror, BZFILE *b, void *buf, int len) {
---
>                                 unsigned int *BZ_API (*b)(int *bzerror, BZFILE *b, void *buf, int len) {
85,88c85
<                                 unsigned int *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_API (*b)(int *bzerror, BZFILE *b, void *buf, int len) {
---
>                                 unsigned int *nbytes_out_lo32(*b)(int *bzerror, BZFILE *b, void *buf, int len) {
86,88c86
<                                 unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_API (*b)(int *bzerror, BZFILE *b, void *buf, int len) {
---
>                                 *b)(int *bzerror, BZFILE *b, void *buf, int len) {
86,88c86
<                                 unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_API (*b)(int *bzerror, BZFILE *b, void *buf, int len) {
---
>                                 unsigned b)(int *bzerror, BZFILE *b, void *buf, int len) {
86,88c86
<                                 unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_API (*b)(int *bzerror, BZFILE *b, void *buf, int len) {
---
>                                 unsigned int )(int *bzerror, BZFILE *b, void *buf, int len) {
86,88c86
<                                 unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_API (*b)(int *bzerror, BZFILE *b, void *buf, int len) {
---
>                                 unsigned int *(int *bzerror, BZFILE *b, void *buf, int len) {
86,88c86
<                                 unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_API (*b)(int *bzerror, BZFILE *b, void *buf, int len) {
---
>                                 unsigned int *nbytes_out_hi32int *bzerror, BZFILE *b, void *buf, int len) {
86,88c86
<                                 unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_API (*b)(int *bzerror, BZFILE *b, void *buf, int len) {
---
>                                 unsigned int *nbytes_out_hi32)*bzerror, BZFILE *b, void *buf, int len) {
88c88
< BZFILE *BZ_API (*b)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> bzerror, BZFILE *b, void *buf, int len) {
88c88
< BZFILE *BZ_API (*b)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> BZFILE , BZFILE *b, void *buf, int len) {
88c88
< BZFILE *BZ_API (*b)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> BZFILE *BZFILE *b, void *buf, int len) {
88c88
< BZFILE *BZ_API (*b)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> BZFILE *BZ_API *b, void *buf, int len) {
88c88
< BZFILE *BZ_API (*b)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> BZFILE *BZ_API (b, void *buf, int len) {
88c88
< BZFILE *BZ_API (*b)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> BZFILE *BZ_API (*, void *buf, int len) {
88c88
< BZFILE *BZ_API (*b)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> BZFILE *BZ_API (*bvoid *buf, int len) {
88c88
< BZFILE *BZ_API (*b)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> BZFILE *BZ_API (*b)*buf, int len) {
88c88
< BZFILE *BZ_API (*b)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> BZFILE *BZ_API (*b)(buf, int len) {
88c88
< BZFILE *BZ_API (*b)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> BZFILE *BZ_API (*b)(int , int len) {
88c88
< BZFILE *BZ_API (*b)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> BZFILE *BZ_API (*b)(int *int len) {
88c88
< BZFILE *BZ_API (*b)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> BZFILE *BZ_API (*b)(int *bzerrorlen) {
88c88
< BZFILE *BZ_API (*b)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> BZFILE *BZ_API (*b)(int *bzerror, ) {
88c88
< BZFILE *BZ_API (*b)(int *bzerror, BZFILE *b, void *buf, int len) {
---
> BZFILE *BZ_API (*b)(int *bzerror, BZFILE {
88,90c88
< BZFILE *BZ_API (*b)(int *bzerror, BZFILE *b, void *buf, int len) {
< 
<   bzFile *bzf = b;
---
> BZFILE *BZ_API (*b)(int *bzerror, BZFILE *bzFile *bzf = b;
88,90c88
< BZFILE *BZ_API (*b)(int *bzerror, BZFILE *b, void *buf, int len) {
< 
<   bzFile *bzf = b;
---
> BZFILE *BZ_API (*b)(int *bzerror, BZFILE *b*bzf = b;
88,90c88
< BZFILE *BZ_API (*b)(int *bzerror, BZFILE *b, void *buf, int len) {
< 
<   bzFile *bzf = b;
---
> BZFILE *BZ_API (*b)(int *bzerror, BZFILE *b, bzf = b;
88,90c88
< BZFILE *BZ_API (*b)(int *bzerror, BZFILE *b, void *buf, int len) {
< 
<   bzFile *bzf = b;
---
> BZFILE *BZ_API (*b)(int *bzerror, BZFILE *b, void = b;
88,90c88
< BZFILE *BZ_API (*b)(int *bzerror, BZFILE *b, void *buf, int len) {
< 
<   bzFile *bzf = b;
---
> BZFILE *BZ_API (*b)(int *bzerror, BZFILE *b, void *b;
(98.1 %, 3911 bytes)
88,94c88
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
< 
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
< 
<   if (0)
---
> BZFILE *BZ_API (*b)(int *bzerrorlenif (0)
88,94c88
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
< 
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
< 
<   if (0)
---
> BZFILE *BZ_API (*b)(int *bzerrorlen) (0)
90,94c90
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
< 
<   if (0)
---
>   0)
90,94c90
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
< 
<   if (0)
---
>   bzFile )
90,95c90
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
< 
<   if (0)
<     bzf->strm.next_out;
---
>   bzFile *bzf->strm.next_out;
90,95c90
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
< 
<   if (0)
<     bzf->strm.next_out;
---
>   bzFile *bzf ->strm.next_out;
90,95c90
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
< 
<   if (0)
<     bzf->strm.next_out;
---
>   bzFile *bzf = strm.next_out;
90,95c90
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
< 
<   if (0)
<     bzf->strm.next_out;
---
>   bzFile *bzf = b.next_out;
92,95c92
<   BZ_SETERR;
< 
<   if (0)
<     bzf->strm.next_out;
---
>   next_out;
93,95d92
< 
<   if (0)
<     bzf->strm.next_out;
94,96c94
<   if (0)
<     bzf->strm.next_out;
< }
---
>   }
94,98c94
<   if (0)
<     bzf->strm.next_out;
< }
< 
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
>   if void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
(98.1 %, 3877 bytes)
92,95c92
<   BZ_SETERR;
< }
< 
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
>   BZ_SETERRbzerror, BZFILE *b, void **unused,
93,95c93
< }
< 
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> , BZFILE *b, void **unused,
95c95
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> BZFILE *b, void **unused,
95c95
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void *b, void **unused,
95c95
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_APIb, void **unused,
95c95
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_API(, void **unused,
95c95
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_API(BZ2_bzReadGetUnusedvoid **unused,
95c95
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_API(BZ2_bzReadGetUnused)**unused,
95c95
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_API(BZ2_bzReadGetUnused)(*unused,
95c95
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_API(BZ2_bzReadGetUnused)(int unused,
95c95
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_API(BZ2_bzReadGetUnused)(int *,
95,96c95
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused);
---
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerrorint *nUnused);
95,96c95
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused);
---
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, *nUnused);
95,96c95
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused);
---
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE nUnused);
95,96c95
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused);
---
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *);
95,96c95
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused);
---
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b;
95,98c95
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused);
< 
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
95,98c95
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused);
< 
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
95,98c95
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused);
< 
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void *(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
95,98c95
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused);
< 
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
95,98c95
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused);
< 
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused)(char *dest, unsigned int *destLen,
96,98c96
<                                  int *nUnused);
< 
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
>                                  (char *dest, unsigned int *destLen,
96,98c96
<                                  int *nUnused);
< 
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
>                                  int char *dest, unsigned int *destLen,
96,98c96
<                                  int *nUnused);
< 
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
>                                  int **dest, unsigned int *destLen,
96,98c96
<                                  int *nUnused);
< 
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
>                                  int *nUnuseddest, unsigned int *destLen,
96,98c96
<                                  int *nUnused);
< 
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
>                                  int *nUnused), unsigned int *destLen,
98c98
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> unsigned int *destLen,
98c98
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> int int *destLen,
98c98
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> int BZ_API*destLen,
98c98
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> int BZ_API(destLen,
98c98
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompress,
98,99c98
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompress)char *source, unsigned int sourceLen,
98,99c98
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompress)(*source, unsigned int sourceLen,
98,99c98
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompress)(char source, unsigned int sourceLen,
98,99c98
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompress)(char *, unsigned int sourceLen,
98,99c98
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompress)(char *destunsigned int sourceLen,
98,99c98
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, int sourceLen,
98,99c98
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned sourceLen,
98,99c98
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int ,
98,100c98
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
<                                      int blockSize100k, int verbosity,
---
> int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *int blockSize100k, int verbosity,
98,100c98
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
<                                      int blockSize100k, int verbosity,
---
> int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLenblockSize100k, int verbosity,
99,100c99
<                                      char *source, unsigned int sourceLen,
<                                      int blockSize100k, int verbosity,
---
>                                      , int verbosity,
99,100c99
<                                      char *source, unsigned int sourceLen,
<                                      int blockSize100k, int verbosity,
---
>                                      char int verbosity,
99,100c99
<                                      char *source, unsigned int sourceLen,
<                                      int blockSize100k, int verbosity,
---
>                                      char *verbosity,
99,100c99
<                                      char *source, unsigned int sourceLen,
<                                      int blockSize100k, int verbosity,
---
>                                      char *source,
99,101c99
<                                      char *source, unsigned int sourceLen,
<                                      int blockSize100k, int verbosity,
<                                      int workFactor);
---
>                                      char *source, int workFactor);
99,101c99
<                                      char *source, unsigned int sourceLen,
<                                      int blockSize100k, int verbosity,
<                                      int workFactor);
---
>                                      char *source, unsigned workFactor);
99,101c99
<                                      char *source, unsigned int sourceLen,
<                                      int blockSize100k, int verbosity,
<                                      int workFactor);
---
>                                      char *source, unsigned int );
99,101c99
<                                      char *source, unsigned int sourceLen,
<                                      int blockSize100k, int verbosity,
<                                      int workFactor);
---
>                                      char *source, unsigned int sourceLen;
100,103c100
<                                      int blockSize100k, int verbosity,
<                                      int workFactor);
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>                                      int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
100,103c100
<                                      int blockSize100k, int verbosity,
<                                      int workFactor);
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>                                      int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
100,103c100
<                                      int blockSize100k, int verbosity,
<                                      int workFactor);
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>                                      int blockSize100k(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
100,103c100
<                                      int blockSize100k, int verbosity,
<                                      int workFactor);
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>                                      int blockSize100k, BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
100,103c100
<                                      int blockSize100k, int verbosity,
<                                      int workFactor);
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>                                      int blockSize100k, int )(char *dest, unsigned int *destLen,
100,103c100
<                                      int blockSize100k, int verbosity,
<                                      int workFactor);
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>                                      int blockSize100k, int verbosity(char *dest, unsigned int *destLen,
101,103c101
<                                      int workFactor);
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>                                      char *dest, unsigned int *destLen,
101,103c101
<                                      int workFactor);
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>                                      int *dest, unsigned int *destLen,
101,103c101
<                                      int workFactor);
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>                                      int workFactordest, unsigned int *destLen,
101,103c101
<                                      int workFactor);
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>                                      int workFactor), unsigned int *destLen,
103c103
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> unsigned int *destLen,
103c103
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> int int *destLen,
103c103
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> int BZ_API*destLen,
103c103
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> int BZ_API(destLen,
103c103
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompress,
103,104c103
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
<                                        char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompress)char *source, unsigned int sourceLen,
103,104c103
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
<                                        char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompress)(*source, unsigned int sourceLen,
103,104c103
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
<                                        char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompress)(char source, unsigned int sourceLen,
103,104c103
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
<                                        char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompress)(char *, unsigned int sourceLen,
103,104c103
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
<                                        char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompress)(char *destunsigned int sourceLen,
103,104c103
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
<                                        char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, int sourceLen,
103,104c103
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
<                                        char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned sourceLen,
103,104c103
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
<                                        char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int ,
103,105c103
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
<                                        char *source, unsigned int sourceLen,
<                                        int small, int verbosity);
---
> int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *int small, int verbosity);
103,105c103
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
<                                        char *source, unsigned int sourceLen,
<                                        int small, int verbosity);
---
> int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLensmall, int verbosity);
104,105c104
<                                        char *source, unsigned int sourceLen,
<                                        int small, int verbosity);
---
>                                        , int verbosity);
104,105c104
<                                        char *source, unsigned int sourceLen,
<                                        int small, int verbosity);
---
>                                        char int verbosity);
104,105c104
<                                        char *source, unsigned int sourceLen,
<                                        int small, int verbosity);
---
>                                        char *verbosity);
104,105c104
<                                        char *source, unsigned int sourceLen,
<                                        int small, int verbosity);
---
>                                        char *source);
104,105c104
<                                        char *source, unsigned int sourceLen,
<                                        int small, int verbosity);
---
>                                        char *source, ;
104,107c104
<                                        char *source, unsigned int sourceLen,
<                                        int small, int verbosity);
< 
< ;
---
>                                        char *source, unsigned ;
104,109c104
<                                        char *source, unsigned int sourceLen,
<                                        int small, int verbosity);
< 
< ;
< 
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
>                                        char *source, unsigned int int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
104,109c104
<                                        char *source, unsigned int sourceLen,
<                                        int small, int verbosity);
< 
< ;
< 
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
>                                        char *source, unsigned int sourceLenBZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
105,109c105
<                                        int small, int verbosity);
< 
< ;
< 
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
>                                        (BZ2_bzread)(BZFILE *b, void *buf, int len) {
105,109c105
<                                        int small, int verbosity);
< 
< ;
< 
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
>                                        int BZ2_bzread)(BZFILE *b, void *buf, int len) {
105,109c105
<                                        int small, int verbosity);
< 
< ;
< 
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
>                                        int small)(BZFILE *b, void *buf, int len) {
105,109c105
<                                        int small, int verbosity);
< 
< ;
< 
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
>                                        int small, (BZFILE *b, void *buf, int len) {
105,109c105
<                                        int small, int verbosity);
< 
< ;
< 
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
>                                        int small, int BZFILE *b, void *buf, int len) {
105,109c105
<                                        int small, int verbosity);
< 
< ;
< 
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
>                                        int small, int verbosity*b, void *buf, int len) {
105,109c105
<                                        int small, int verbosity);
< 
< ;
< 
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
>                                        int small, int verbosity)b, void *buf, int len) {
107,109c107
< ;
< 
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
> , void *buf, int len) {
109c109
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
> void *buf, int len) {
109c109
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
> int *buf, int len) {
109c109
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
> int BZ_APIbuf, int len) {
109c109
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
> int BZ_API(, int len) {
109c109
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
> int BZ_API(BZ2_bzreadint len) {
109c109
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
> int BZ_API(BZ2_bzread)len) {
109c109
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
> int BZ_API(BZ2_bzread)() {
109c109
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
---
> int BZ_API(BZ2_bzread)(BZFILE {
109,110c109
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
<   int bzerr, nread;
---
> int BZ_API(BZ2_bzread)(BZFILE *int bzerr, nread;
109,110c109
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
<   int bzerr, nread;
---
> int BZ_API(BZ2_bzread)(BZFILE *bbzerr, nread;
109,110c109
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
<   int bzerr, nread;
---
> int BZ_API(BZ2_bzread)(BZFILE *b, , nread;
109,110c109
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
<   int bzerr, nread;
---
> int BZ_API(BZ2_bzread)(BZFILE *b, void nread;
109,110c109
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
<   int bzerr, nread;
---
> int BZ_API(BZ2_bzread)(BZFILE *b, void *;
109,111c109
< int BZ_API(BZ2_bzread)(BZFILE *b, void *buf, int len) {
<   int bzerr, nread;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
> int BZ_API(BZ2_bzread)(BZFILE *b, void *bufif (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
(98.1 %, 3848 bytes)
109,111c109
< int BZ_API(BZ2_bzread)() {
<   int bzerr, nread;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
> int BZ_API(BZ2_bzread)(== BZ_OK || bzerr == BZ_STREAM_END)
109,111c109
< int BZ_API(BZ2_bzread)() {
<   int bzerr, nread;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
> int BZ_API(BZ2_bzread)() BZ_OK || bzerr == BZ_STREAM_END)
110,111c110
<   int bzerr, nread;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   || bzerr == BZ_STREAM_END)
110,111c110
<   int bzerr, nread;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   int bzerr == BZ_STREAM_END)
110,111c110
<   int bzerr, nread;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   int bzerr== BZ_STREAM_END)
110,111c110
<   int bzerr, nread;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   int bzerr, BZ_STREAM_END)
110,111c110
<   int bzerr, nread;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   int bzerr, nread)
111,112c111
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
---
>   ;
111,113c111
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
---
>   if else
111,114c111
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
<     ;
---
>   if (;
111,115c111
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
<     ;
< }
---
>   if (bzerr }
111,117c111
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
<     ;
< }
< 
< int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
>   if (bzerr == int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
111,117c111
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
<     ;
< }
< 
< int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
>   if (bzerr == BZ_OK BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
111,117c111
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
<     ;
< }
< 
< int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
>   if (bzerr == BZ_OK || (BZ2_bzwrite)(BZFILE *b, void *buf, int len);
111,117c111
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
<     ;
< }
< 
< int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
>   if (bzerr == BZ_OK || bzerr BZ2_bzwrite)(BZFILE *b, void *buf, int len);
111,117c111
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
<     ;
< }
< 
< int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
>   if (bzerr == BZ_OK || bzerr == )(BZFILE *b, void *buf, int len);
111,117c111
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
<     ;
< }
< 
< int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
>   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END(BZFILE *b, void *buf, int len);
112,117c112
<     ;
<   else
<     ;
< }
< 
< int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
>     BZFILE *b, void *buf, int len);
113,117c113
<   else
<     ;
< }
< 
< int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
>   *b, void *buf, int len);
114,117c114
<     ;
< }
< 
< int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
>     b, void *buf, int len);
115,117c115
< }
< 
< int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
> , void *buf, int len);
117c117
< int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
> void *buf, int len);
117c117
< int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
> int *buf, int len);
117c117
< int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
> int BZ_APIbuf, int len);
117c117
< int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
> int BZ_API(, int len);
117c117
< int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
> int BZ_API(BZ2_bzwriteint len);
117c117
< int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
> int BZ_API(BZ2_bzwrite)len);
117c117
< int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
> int BZ_API(BZ2_bzwrite)();
117c117
< int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
> int BZ_API(BZ2_bzwrite)(BZFILE ;
117c117
< int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
> int BZ_API(BZ2_bzwrite)(BZFILE *
\ No newline at end of file
117c117
< int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
> int BZ_API(BZ2_bzwrite)(BZFILE *b
\ No newline at end of file
117c117
< int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
> int BZ_API(BZ2_bzwrite)(BZFILE *b, 
\ No newline at end of file
117c117
< int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
> int BZ_API(BZ2_bzwrite)(BZFILE *b, void 
\ No newline at end of file
117c117
< int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
> int BZ_API(BZ2_bzwrite)(BZFILE *b, void *
\ No newline at end of file
117c117
< int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
> int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf
\ No newline at end of file
117c117
< int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, int len);
---
> int BZ_API(BZ2_bzwrite)(BZFILE *b, void *buf, 
\ No newline at end of file
(98.1 %, 3819 bytes)
117c117
< int BZ_API(BZ2_bzwrite)();
---
> int BZ_API(BZ2_bzwrite)(
\ No newline at end of file
117c117
< int BZ_API(BZ2_bzwrite)();
---
> int BZ_API(BZ2_bzwrite)()
\ No newline at end of file
===< pass_clex :: rm-toks-9 >===
3,5c3
< #define BZ_OK 2
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
---
> define BZ_STREAM_END 4
3,5c3
< #define BZ_OK 2
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
---
> #BZ_STREAM_END 4
3,5c3
< #define BZ_OK 2
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
---
> #define 4
3,6c3
< #define BZ_OK 2
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
< typedef struct {
---
> #define BZ_OK typedef struct {
4,6c4
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
< typedef struct {
---
> struct {
4,6c4
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
< typedef struct {
---
> #{
4,7c4
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
< typedef struct {
<   int next_out;
---
> #define int next_out;
4,7c4
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
< typedef struct {
<   int next_out;
---
> #define BZ_FINISH_OK next_out;
5,7c5
< #define BZ_STREAM_END 4
< typedef struct {
<   int next_out;
---
> ;
5,8c5
< #define BZ_STREAM_END 4
< typedef struct {
<   int next_out;
<   ;
---
> #;
5,9c5
< #define BZ_STREAM_END 4
< typedef struct {
<   int next_out;
<   ;
< } bz_stream;
---
> #define } bz_stream;
5,9c5
< #define BZ_STREAM_END 4
< typedef struct {
<   int next_out;
<   ;
< } bz_stream;
---
> #define BZ_STREAM_END bz_stream;
6,9c6
< typedef struct {
<   int next_out;
<   ;
< } bz_stream;
---
> ;
6,11c6
< typedef struct {
<   int next_out;
<   ;
< } bz_stream;
< 
< #include <stdio.h>
---
> typedef #include <stdio.h>
6,11c6
< typedef struct {
<   int next_out;
<   ;
< } bz_stream;
< 
< #include <stdio.h>
---
> typedef struct include <stdio.h>
7,11c7
<   int next_out;
<   ;
< } bz_stream;
< 
< #include <stdio.h>
---
>   <stdio.h>
7,11c7
<   int next_out;
<   ;
< } bz_stream;
< 
< #include <stdio.h>
---
>   int stdio.h>
7,11c7
<   int next_out;
<   ;
< } bz_stream;
< 
< #include <stdio.h>
---
>   int next_out.h>
8,11c8
<   ;
< } bz_stream;
< 
< #include <stdio.h>
---
>   h>
9,11c9
< } bz_stream;
< 
< #include <stdio.h>
---
> >
9,13c9
< } bz_stream;
< 
< #include <stdio.h>
< 
< #define BZ_API(func) func
---
> } #define BZ_API(func) func
9,13c9
< } bz_stream;
< 
< #include <stdio.h>
< 
< #define BZ_API(func) func
---
> } bz_streamdefine BZ_API(func) func
11,13c11
< #include <stdio.h>
< 
< #define BZ_API(func) func
---
> BZ_API(func) func
11,13c11
< #include <stdio.h>
< 
< #define BZ_API(func) func
---
> #(func) func
11,13c11
< #include <stdio.h>
< 
< #define BZ_API(func) func
---
> #include func) func
11,13c11
< #include <stdio.h>
< 
< #define BZ_API(func) func
---
> #include <) func
11,13c11
< #include <stdio.h>
< 
< #define BZ_API(func) func
---
> #include <stdiofunc
11,14c11
< #include <stdio.h>
< 
< #define BZ_API(func) func
< #define BZ_EXTERN extern
---
> #include <stdio.#define BZ_EXTERN extern
11,14c11
< #include <stdio.h>
< 
< #define BZ_API(func) func
< #define BZ_EXTERN extern
---
> #include <stdio.hdefine BZ_EXTERN extern
13,14c13
< #define BZ_API(func) func
< #define BZ_EXTERN extern
---
> BZ_EXTERN extern
13,14c13
< #define BZ_API(func) func
< #define BZ_EXTERN extern
---
> #extern
13,16c13
< #define BZ_API(func) func
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> #define BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
13,16c13
< #define BZ_API(func) func
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> #define BZ_APIint BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
13,16c13
< #define BZ_API(func) func
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> #define BZ_API(BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
13,16c13
< #define BZ_API(func) func
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> #define BZ_API(func(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
13,16c13
< #define BZ_API(func) func
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> #define BZ_API(func) BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
14,16c14
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> )(bz_stream *strm, int blockSize100k,
14,16c14
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> #(bz_stream *strm, int blockSize100k,
14,16c14
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> #define bz_stream *strm, int blockSize100k,
14,16c14
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> #define BZ_EXTERN *strm, int blockSize100k,
16c16
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> strm, int blockSize100k,
16c16
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> BZ_EXTERN , int blockSize100k,
16c16
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> BZ_EXTERN int int blockSize100k,
16c16
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> BZ_EXTERN int BZ_APIblockSize100k,
16c16
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> BZ_EXTERN int BZ_API(,
16,17c16
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                          int verbosity, int workFactor);
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInitint verbosity, int workFactor);
16,17c16
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                          int verbosity, int workFactor);
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit)verbosity, int workFactor);
16,17c16
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                          int verbosity, int workFactor);
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(, int workFactor);
16,17c16
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                          int verbosity, int workFactor);
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream int workFactor);
16,17c16
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                          int verbosity, int workFactor);
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *workFactor);
16,17c16
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                          int verbosity, int workFactor);
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm);
16,17c16
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                          int verbosity, int workFactor);
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, ;
16,19c16
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                          int verbosity, int workFactor);
< 
< typedef void BZFILE;
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int typedef void BZFILE;
16,19c16
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                          int verbosity, int workFactor);
< 
< typedef void BZFILE;
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100kvoid BZFILE;
17,19c17
<                                          int verbosity, int workFactor);
< 
< typedef void BZFILE;
---
>                                          BZFILE;
17,19c17
<                                          int verbosity, int workFactor);
< 
< typedef void BZFILE;
---
>                                          int ;
17,21c17
<                                          int verbosity, int workFactor);
< 
< typedef void BZFILE;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>                                          int verbosityBZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
17,21c17
<                                          int verbosity, int workFactor);
< 
< typedef void BZFILE;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>                                          int verbosity, void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
17,21c17
<                                          int verbosity, int workFactor);
< 
< typedef void BZFILE;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>                                          int verbosity, int BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
17,21c17
<                                          int verbosity, int workFactor);
< 
< typedef void BZFILE;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>                                          int verbosity, int workFactor(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
17,21c17
<                                          int verbosity, int workFactor);
< 
< typedef void BZFILE;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>                                          int verbosity, int workFactor)BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
19,21c19
< typedef void BZFILE;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> )(int *bzerror, BZFILE *b,
19,21c19
< typedef void BZFILE;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> typedef (int *bzerror, BZFILE *b,
19,21c19
< typedef void BZFILE;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> typedef void int *bzerror, BZFILE *b,
19,21c19
< typedef void BZFILE;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> typedef void BZFILE*bzerror, BZFILE *b,
21c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> bzerror, BZFILE *b,
21c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> BZ_EXTERN , BZFILE *b,
21c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> BZ_EXTERN void BZFILE *b,
21c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> BZ_EXTERN void BZ_API*b,
21c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> BZ_EXTERN void BZ_API(b,
21c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused,
21,22c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
<                                            void **unused, int *nUnused);
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)void **unused, int *nUnused);
21,22c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
<                                            void **unused, int *nUnused);
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(**unused, int *nUnused);
21,22c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
<                                            void **unused, int *nUnused);
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *unused, int *nUnused);
21,22c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
<                                            void **unused, int *nUnused);
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *unused, int *nUnused);
21,22c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
<                                            void **unused, int *nUnused);
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, int *nUnused);
21,22c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
<                                            void **unused, int *nUnused);
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, int *nUnused);
21,22c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
<                                            void **unused, int *nUnused);
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *nUnused);
21,22c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
<                                            void **unused, int *nUnused);
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *nUnused);
21,22c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
<                                            void **unused, int *nUnused);
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b);
22c22
<                                            void **unused, int *nUnused);
---
>                                            ;
22,24c22
<                                            void **unused, int *nUnused);
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead);
---
>                                            void BZ_EXTERN int BZ_API(BZ2_bzRead);
22,24c22
<                                            void **unused, int *nUnused);
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead);
---
>                                            void *int BZ_API(BZ2_bzRead);
22,24c22
<                                            void **unused, int *nUnused);
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead);
---
>                                            void **BZ_API(BZ2_bzRead);
22,24c22
<                                            void **unused, int *nUnused);
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead);
---
>                                            void **unused(BZ2_bzRead);
22,24c22
<                                            void **unused, int *nUnused);
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead);
---
>                                            void **unused, BZ2_bzRead);
22,24c22
<                                            void **unused, int *nUnused);
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead);
---
>                                            void **unused, int );
22,24c22
<                                            void **unused, int *nUnused);
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead);
---
>                                            void **unused, int *;
22,26c22
<                                            void **unused, int *nUnused);
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead);
< 
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>                                            void **unused, int *nUnusedBZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
22,26c22
<                                            void **unused, int *nUnused);
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead);
< 
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>                                            void **unused, int *nUnused)BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
24,26c24
< BZ_EXTERN int BZ_API(BZ2_bzRead);
< 
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
24,26c24
< BZ_EXTERN int BZ_API(BZ2_bzRead);
< 
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
24,26c24
< BZ_EXTERN int BZ_API(BZ2_bzRead);
< 
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN int (BZ2_bzWriteOpen)(int *bzerror, FILE *f,
24,26c24
< BZ_EXTERN int BZ_API(BZ2_bzRead);
< 
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN int BZ_APIBZ2_bzWriteOpen)(int *bzerror, FILE *f,
24,26c24
< BZ_EXTERN int BZ_API(BZ2_bzRead);
< 
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN int BZ_API()(int *bzerror, FILE *f,
24,26c24
< BZ_EXTERN int BZ_API(BZ2_bzRead);
< 
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN int BZ_API(BZ2_bzRead(int *bzerror, FILE *f,
24,26c24
< BZ_EXTERN int BZ_API(BZ2_bzRead);
< 
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN int BZ_API(BZ2_bzRead)int *bzerror, FILE *f,
26c26
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> *bzerror, FILE *f,
26c26
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN bzerror, FILE *f,
26c26
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE , FILE *f,
26c26
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE *FILE *f,
26c26
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE *BZ_API*f,
26c26
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE *BZ_API(f,
26c26
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen,
26,27c26
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
<                                           int blockSize100k, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)int blockSize100k, int verbosity,
26,27c26
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
<                                           int blockSize100k, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(blockSize100k, int verbosity,
26,27c26
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
<                                           int blockSize100k, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int , int verbosity,
26,27c26
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
<                                           int blockSize100k, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *int verbosity,
26,27c26
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
<                                           int blockSize100k, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerrorverbosity,
26,27c26
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
<                                           int blockSize100k, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, ,
26,28c26
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
<                                           int blockSize100k, int verbosity,
<                                           int workFactor);
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE int workFactor);
26,28c26
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
<                                           int blockSize100k, int verbosity,
<                                           int workFactor);
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *workFactor);
26,28c26
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
<                                           int blockSize100k, int verbosity,
<                                           int workFactor);
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f);
27,28c27
<                                           int blockSize100k, int verbosity,
<                                           int workFactor);
---
>                                           ;
27,30c27
<                                           int blockSize100k, int verbosity,
<                                           int workFactor);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                           int BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
27,30c27
<                                           int blockSize100k, int verbosity,
<                                           int workFactor);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                           int blockSize100kvoid BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
27,30c27
<                                           int blockSize100k, int verbosity,
<                                           int workFactor);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                           int blockSize100k, BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
27,30c27
<                                           int blockSize100k, int verbosity,
<                                           int workFactor);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                           int blockSize100k, int (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
27,30c27
<                                           int blockSize100k, int verbosity,
<                                           int workFactor);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                           int blockSize100k, int verbosityBZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
28,30c28
<                                           int workFactor);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                           )(int *bzerror, BZFILE *b, void *buf, int len);
28,30c28
<                                           int workFactor);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                           int (int *bzerror, BZFILE *b, void *buf, int len);
28,30c28
<                                           int workFactor);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                           int workFactorint *bzerror, BZFILE *b, void *buf, int len);
28,30c28
<                                           int workFactor);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                           int workFactor)*bzerror, BZFILE *b, void *buf, int len);
30c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> bzerror, BZFILE *b, void *buf, int len);
30c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN , BZFILE *b, void *buf, int len);
30c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZFILE *b, void *buf, int len);
30c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_API*b, void *buf, int len);
30c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_API(b, void *buf, int len);
30c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite, void *buf, int len);
30c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)void *buf, int len);
30c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(*buf, int len);
30c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int buf, int len);
30c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *, int len);
30c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerrorint len);
30c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, len);
30c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE );
30c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *;
30,32c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *bBZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
30,32c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
30,32c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
30,32c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
30,32c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *bufBZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
30,32c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, )(int *bzerror, BZFILE *b, int abandon,
30,32c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int (int *bzerror, BZFILE *b, int abandon,
30,32c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int lenint *bzerror, BZFILE *b, int abandon,
30,32c30
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len)*bzerror, BZFILE *b, int abandon,
32c32
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> bzerror, BZFILE *b, int abandon,
32c32
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN , BZFILE *b, int abandon,
32c32
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZFILE *b, int abandon,
32c32
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API*b, int abandon,
32c32
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(b, int abandon,
32c32
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose, int abandon,
32c32
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)int abandon,
32c32
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(abandon,
32c32
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int ,
32,33c32
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *unsigned int *nbytes_in,
32,33c32
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerrorint *nbytes_in,
32,33c32
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, *nbytes_in,
32,33c32
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE nbytes_in,
32,33c32
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *,
32,34c32
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in,
<                                         unsigned int *nbytes_out);
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *bunsigned int *nbytes_out);
32,34c32
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in,
<                                         unsigned int *nbytes_out);
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int *nbytes_out);
32,34c32
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in,
<                                         unsigned int *nbytes_out);
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int *nbytes_out);
32,34c32
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in,
<                                         unsigned int *nbytes_out);
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandonnbytes_out);
33,34c33
<                                         unsigned int *nbytes_in,
<                                         unsigned int *nbytes_out);
---
>                                         );
33,34c33
<                                         unsigned int *nbytes_in,
<                                         unsigned int *nbytes_out);
---
>                                         unsigned ;
33,36c33
<                                         unsigned int *nbytes_in,
<                                         unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                                         unsigned int BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
33,36c33
<                                         unsigned int *nbytes_in,
<                                         unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                                         unsigned int *void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
33,36c33
<                                         unsigned int *nbytes_in,
<                                         unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                                         unsigned int *nbytes_inBZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
34,36c34
<                                         unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                                         (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
34,36c34
<                                         unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                                         unsigned BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
34,36c34
<                                         unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                                         unsigned int )(int *bzerror, BZFILE *b, int abandon,
34,36c34
<                                         unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                                         unsigned int *(int *bzerror, BZFILE *b, int abandon,
34,36c34
<                                         unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                                         unsigned int *nbytes_outint *bzerror, BZFILE *b, int abandon,
34,36c34
<                                         unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                                         unsigned int *nbytes_out)*bzerror, BZFILE *b, int abandon,
36c36
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> bzerror, BZFILE *b, int abandon,
36c36
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN , BZFILE *b, int abandon,
36c36
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZFILE *b, int abandon,
36c36
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API*b, int abandon,
36c36
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(b, int abandon,
36c36
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64, int abandon,
36c36
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)int abandon,
36c36
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(abandon,
36c36
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int ,
36,37c36
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                           unsigned int *nbytes_in_lo32,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *unsigned int *nbytes_in_lo32,
36,37c36
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                           unsigned int *nbytes_in_lo32,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerrorint *nbytes_in_lo32,
36,37c36
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                           unsigned int *nbytes_in_lo32,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, *nbytes_in_lo32,
36,37c36
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                           unsigned int *nbytes_in_lo32,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE nbytes_in_lo32,
36,37c36
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                           unsigned int *nbytes_in_lo32,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *,
36,38c36
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                           unsigned int *nbytes_in_lo32,
<                                           unsigned int *nbytes_in_hi32,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *bunsigned int *nbytes_in_hi32,
36,38c36
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                           unsigned int *nbytes_in_lo32,
<                                           unsigned int *nbytes_in_hi32,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int *nbytes_in_hi32,
36,38c36
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                           unsigned int *nbytes_in_lo32,
<                                           unsigned int *nbytes_in_hi32,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int *nbytes_in_hi32,
36,38c36
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                           unsigned int *nbytes_in_lo32,
<                                           unsigned int *nbytes_in_hi32,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandonnbytes_in_hi32,
37,38c37
<                                           unsigned int *nbytes_in_lo32,
<                                           unsigned int *nbytes_in_hi32,
---
>                                           ,
37,39c37
<                                           unsigned int *nbytes_in_lo32,
<                                           unsigned int *nbytes_in_hi32,
<                                           unsigned int *nbytes_out_lo32,
---
>                                           unsigned unsigned int *nbytes_out_lo32,
37,39c37
<                                           unsigned int *nbytes_in_lo32,
<                                           unsigned int *nbytes_in_hi32,
<                                           unsigned int *nbytes_out_lo32,
---
>                                           unsigned int int *nbytes_out_lo32,
37,39c37
<                                           unsigned int *nbytes_in_lo32,
<                                           unsigned int *nbytes_in_hi32,
<                                           unsigned int *nbytes_out_lo32,
---
>                                           unsigned int **nbytes_out_lo32,
37,39c37
<                                           unsigned int *nbytes_in_lo32,
<                                           unsigned int *nbytes_in_hi32,
<                                           unsigned int *nbytes_out_lo32,
---
>                                           unsigned int *nbytes_in_lo32nbytes_out_lo32,
38,39c38
<                                           unsigned int *nbytes_in_hi32,
<                                           unsigned int *nbytes_out_lo32,
---
>                                           ,
38,40c38
<                                           unsigned int *nbytes_in_hi32,
<                                           unsigned int *nbytes_out_lo32,
<                                           unsigned int *nbytes_out_hi32);
---
>                                           unsigned unsigned int *nbytes_out_hi32);
38,40c38
<                                           unsigned int *nbytes_in_hi32,
<                                           unsigned int *nbytes_out_lo32,
<                                           unsigned int *nbytes_out_hi32);
---
>                                           unsigned int int *nbytes_out_hi32);
38,40c38
<                                           unsigned int *nbytes_in_hi32,
<                                           unsigned int *nbytes_out_lo32,
<                                           unsigned int *nbytes_out_hi32);
---
>                                           unsigned int **nbytes_out_hi32);
38,40c38
<                                           unsigned int *nbytes_in_hi32,
<                                           unsigned int *nbytes_out_lo32,
<                                           unsigned int *nbytes_out_hi32);
---
>                                           unsigned int *nbytes_in_hi32nbytes_out_hi32);
39,40c39
<                                           unsigned int *nbytes_out_lo32,
<                                           unsigned int *nbytes_out_hi32);
---
>                                           );
39,40c39
<                                           unsigned int *nbytes_out_lo32,
<                                           unsigned int *nbytes_out_hi32);
---
>                                           unsigned ;
39,42c39
<                                           unsigned int *nbytes_out_lo32,
<                                           unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
>                                           unsigned int BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
39,42c39
<                                           unsigned int *nbytes_out_lo32,
<                                           unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
>                                           unsigned int *int BZ_API(BZ2_bzBuffToBuffCompress)(
39,42c39
<                                           unsigned int *nbytes_out_lo32,
<                                           unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
>                                           unsigned int *nbytes_out_lo32BZ_API(BZ2_bzBuffToBuffCompress)(
40,42c40
<                                           unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
>                                           (BZ2_bzBuffToBuffCompress)(
40,42c40
<                                           unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
>                                           unsigned BZ2_bzBuffToBuffCompress)(
40,42c40
<                                           unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
>                                           unsigned int )(
40,42c40
<                                           unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
>                                           unsigned int *(
40,43c40
<                                           unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>                                           unsigned int *nbytes_out_hi32char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
40,43c40
<                                           unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>                                           unsigned int *nbytes_out_hi32)*dest, unsigned int *destLen, char *source, unsigned int sourceLen,
42,43c42
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
> dest, unsigned int *destLen, char *source, unsigned int sourceLen,
42,43c42
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
> BZ_EXTERN , unsigned int *destLen, char *source, unsigned int sourceLen,
42,43c42
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
> BZ_EXTERN int unsigned int *destLen, char *source, unsigned int sourceLen,
42,43c42
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
> BZ_EXTERN int BZ_APIint *destLen, char *source, unsigned int sourceLen,
42,43c42
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
> BZ_EXTERN int BZ_API(*destLen, char *source, unsigned int sourceLen,
42,43c42
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompressdestLen, char *source, unsigned int sourceLen,
42,43c42
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress), char *source, unsigned int sourceLen,
43c43
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *source, unsigned int sourceLen,
43c43
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *source, unsigned int sourceLen,
43c43
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *source, unsigned int sourceLen,
43c43
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *dest, unsigned int sourceLen,
43c43
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *dest, unsigned int sourceLen,
43c43
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *dest, unsigned int sourceLen,
43c43
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *dest, unsigned int sourceLen,
43c43
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *dest, unsigned int *,
43,44c43
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *dest, unsigned int *destLenint blockSize100k, int verbosity, int workFactor);
43,44c43
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *dest, unsigned int *destLen, blockSize100k, int verbosity, int workFactor);
43,44c43
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *dest, unsigned int *destLen, char , int verbosity, int workFactor);
43,44c43
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *dest, unsigned int *destLen, char *int verbosity, int workFactor);
43,44c43
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *dest, unsigned int *destLen, char *sourceverbosity, int workFactor);
43,44c43
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *dest, unsigned int *destLen, char *source, , int workFactor);
43,44c43
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *dest, unsigned int *destLen, char *source, unsigned int workFactor);
43,44c43
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *dest, unsigned int *destLen, char *source, unsigned int workFactor);
43,44c43
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen);
44c44
<     int blockSize100k, int verbosity, int workFactor);
---
>     ;
44,46c44
<     int blockSize100k, int verbosity, int workFactor);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>     int BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
44,46c44
<     int blockSize100k, int verbosity, int workFactor);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>     int blockSize100kint BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
44,46c44
<     int blockSize100k, int verbosity, int workFactor);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>     int blockSize100k, BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
44,46c44
<     int blockSize100k, int verbosity, int workFactor);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>     int blockSize100k, int (BZ2_bzBuffToBuffDecompress)(char *dest,
44,46c44
<     int blockSize100k, int verbosity, int workFactor);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>     int blockSize100k, int verbosityBZ2_bzBuffToBuffDecompress)(char *dest,
44,46c44
<     int blockSize100k, int verbosity, int workFactor);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>     int blockSize100k, int verbosity, )(char *dest,
44,46c44
<     int blockSize100k, int verbosity, int workFactor);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>     int blockSize100k, int verbosity, int (char *dest,
44,46c44
<     int blockSize100k, int verbosity, int workFactor);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>     int blockSize100k, int verbosity, int workFactorchar *dest,
44,46c44
<     int blockSize100k, int verbosity, int workFactor);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>     int blockSize100k, int verbosity, int workFactor)*dest,
46c46
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
> dest,
46c46
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
> BZ_EXTERN ,
46,47c46
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
<                                                  unsigned int *destLen,
---
> BZ_EXTERN int unsigned int *destLen,
46,47c46
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
<                                                  unsigned int *destLen,
---
> BZ_EXTERN int BZ_APIint *destLen,
46,47c46
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
<                                                  unsigned int *destLen,
---
> BZ_EXTERN int BZ_API(*destLen,
46,47c46
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
<                                                  unsigned int *destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompressdestLen,
46,47c46
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
<                                                  unsigned int *destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress),
46,48c46
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
<                                                  unsigned int *destLen,
<                                                  char *source,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *source,
46,48c46
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
<                                                  unsigned int *destLen,
<                                                  char *source,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *source,
46,48c46
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
<                                                  unsigned int *destLen,
<                                                  char *source,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *source,
47,48d46
<                                                  unsigned int *destLen,
<                                                  char *source,
47,48d46
<                                                  unsigned int *destLen,
<                                                  char *source,
47,48d46
<                                                  unsigned int *destLen,
<                                                  char *source,
47,48d46
<                                                  unsigned int *destLen,
<                                                  char *source,
47,49c47
<                                                  unsigned int *destLen,
<                                                  char *source,
<                                                  unsigned int sourceLen,
---
>                                                  unsigned int *,
47,50c47
<                                                  unsigned int *destLen,
<                                                  char *source,
<                                                  unsigned int sourceLen,
<                                                  int small, int verbosity);
---
>                                                  unsigned int *destLenint small, int verbosity);
48,50c48
<                                                  char *source,
<                                                  unsigned int sourceLen,
<                                                  int small, int verbosity);
---
>                                                  small, int verbosity);
48,50c48
<                                                  char *source,
<                                                  unsigned int sourceLen,
<                                                  int small, int verbosity);
---
>                                                  char , int verbosity);
48,50c48
<                                                  char *source,
<                                                  unsigned int sourceLen,
<                                                  int small, int verbosity);
---
>                                                  char *int verbosity);
48,50c48
<                                                  char *source,
<                                                  unsigned int sourceLen,
<                                                  int small, int verbosity);
---
>                                                  char *sourceverbosity);
49,50c49
<                                                  unsigned int sourceLen,
<                                                  int small, int verbosity);
---
>                                                  );
49,50c49
<                                                  unsigned int sourceLen,
<                                                  int small, int verbosity);
---
>                                                  unsigned ;
49,52c49
<                                                  unsigned int sourceLen,
<                                                  int small, int verbosity);
< 
< int BZ_API(BZ2_bzread)();
---
>                                                  unsigned int int BZ_API(BZ2_bzread)();
49,52c49
<                                                  unsigned int sourceLen,
<                                                  int small, int verbosity);
< 
< int BZ_API(BZ2_bzread)();
---
>                                                  unsigned int sourceLenBZ_API(BZ2_bzread)();
50,52c50
<                                                  int small, int verbosity);
< 
< int BZ_API(BZ2_bzread)();
---
>                                                  (BZ2_bzread)();
50,52c50
<                                                  int small, int verbosity);
< 
< int BZ_API(BZ2_bzread)();
---
>                                                  int BZ2_bzread)();
50,52c50
<                                                  int small, int verbosity);
< 
< int BZ_API(BZ2_bzread)();
---
>                                                  int small)();
50,52c50
<                                                  int small, int verbosity);
< 
< int BZ_API(BZ2_bzread)();
---
>                                                  int small, ();
50,52c50
<                                                  int small, int verbosity);
< 
< int BZ_API(BZ2_bzread)();
---
>                                                  int small, int );
50,52c50
<                                                  int small, int verbosity);
< 
< int BZ_API(BZ2_bzread)();
---
>                                                  int small, int verbosity;
50,54c50
<                                                  int small, int verbosity);
< 
< int BZ_API(BZ2_bzread)();
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite)();
---
>                                                  int small, int verbosity)BZ_EXTERN int BZ_API(BZ2_bzwrite)();
52,54c52
< int BZ_API(BZ2_bzread)();
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite)();
---
> int BZ_API(BZ2_bzwrite)();
(98.2 %, 3783 bytes)
52,53d51
< BZ_EXTERN int BZ_API(BZ2_bzwrite)();
< 
52,53d51
< BZ_EXTERN int BZ_API(BZ2_bzwrite)();
< 
(98.2 %, 3745 bytes)
50,54c50
<                                                  int small, int );
< 
< Char;
< typedef unsigned char Bool;
< typedef Int32;
---
>                                                  int small, int typedef Int32;
50,54c50
<                                                  int small, int );
< 
< Char;
< typedef unsigned char Bool;
< typedef Int32;
---
>                                                  int small, int )Int32;
52,54c52
< Char;
< typedef unsigned char Bool;
< typedef Int32;
---
> ;
52,55c52
< Char;
< typedef unsigned char Bool;
< typedef Int32;
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> Char(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
53,55c53
< typedef unsigned char Bool;
< typedef Int32;
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
53,55c53
< typedef unsigned char Bool;
< typedef Int32;
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> typedef )(bz_stream *strm, int blockSize100k,
53,55c53
< typedef unsigned char Bool;
< typedef Int32;
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> typedef unsigned (bz_stream *strm, int blockSize100k,
53,55c53
< typedef unsigned char Bool;
< typedef Int32;
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> typedef unsigned char bz_stream *strm, int blockSize100k,
53,55c53
< typedef unsigned char Bool;
< typedef Int32;
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> typedef unsigned char Bool*strm, int blockSize100k,
54,55c54
< typedef Int32;
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> strm, int blockSize100k,
54,55c54
< typedef Int32;
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> typedef , int blockSize100k,
54,55c54
< typedef Int32;
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> typedef Int32int blockSize100k,
55c55
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> blockSize100k,
55c55
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> (,
55,56c55
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                int verbosity, int);
---
> (BZ2_bzCompressInitint verbosity, int);
55,56c55
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                int verbosity, int);
---
> (BZ2_bzCompressInit)verbosity, int);
55,56c55
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                int verbosity, int);
---
> (BZ2_bzCompressInit)(, int);
55,56c55
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                int verbosity, int);
---
> (BZ2_bzCompressInit)(bz_stream int);
55,56c55
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                int verbosity, int);
---
> (BZ2_bzCompressInit)(bz_stream *);
55,56c55
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                int verbosity, int);
---
> (BZ2_bzCompressInit)(bz_stream *strm;
55,58c55
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                int verbosity, int);
< 
< int;
---
> (BZ2_bzCompressInit)(bz_stream *strm, int;
55,58c55
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                int verbosity, int);
< 
< int;
---
> (BZ2_bzCompressInit)(bz_stream *strm, int ;
55,60c55
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                int verbosity, int);
< 
< int;
< 
< #define BZ_SETERR
---
> (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k#define BZ_SETERR
56,60c56
<                                int verbosity, int);
< 
< int;
< 
< #define BZ_SETERR
---
>                                define BZ_SETERR
56,60c56
<                                int verbosity, int);
< 
< int;
< 
< #define BZ_SETERR
---
>                                int BZ_SETERR
56,62c56
<                                int verbosity, int);
< 
< int;
< 
< #define BZ_SETERR
< 
< typedef struct {
---
>                                int verbositytypedef struct {
56,62c56
<                                int verbosity, int);
< 
< int;
< 
< #define BZ_SETERR
< 
< typedef struct {
---
>                                int verbosity, struct {
56,62c56
<                                int verbosity, int);
< 
< int;
< 
< #define BZ_SETERR
< 
< typedef struct {
---
>                                int verbosity, int{
57,63d56
< 
< int;
< 
< #define BZ_SETERR
< 
< typedef struct {
<   ;
58,64c58
< int;
< 
< #define BZ_SETERR
< 
< typedef struct {
<   ;
<   bz_stream strm;
---
> bz_stream strm;
58,64c58
< int;
< 
< #define BZ_SETERR
< 
< typedef struct {
<   ;
<   bz_stream strm;
---
> intstrm;
60,64c60
< #define BZ_SETERR
< 
< typedef struct {
<   ;
<   bz_stream strm;
---
> ;
60,65c60
< #define BZ_SETERR
< 
< typedef struct {
<   ;
<   bz_stream strm;
<   Int32 lastErr;
---
> #Int32 lastErr;
60,65c60
< #define BZ_SETERR
< 
< typedef struct {
<   ;
<   bz_stream strm;
<   Int32 lastErr;
---
> #define lastErr;
62,65c62
< typedef struct {
<   ;
<   bz_stream strm;
<   Int32 lastErr;
---
> ;
62,66c62
< typedef struct {
<   ;
<   bz_stream strm;
<   Int32 lastErr;
<   Bool initialisedOk;
---
> typedef Bool initialisedOk;
62,66c62
< typedef struct {
<   ;
<   bz_stream strm;
<   Int32 lastErr;
<   Bool initialisedOk;
---
> typedef struct initialisedOk;
64,66d63
<   bz_stream strm;
<   Int32 lastErr;
<   Bool initialisedOk;
64,67c64
<   bz_stream strm;
<   Int32 lastErr;
<   Bool initialisedOk;
< } bzFile;
---
>   } bzFile;
(98.2 %, 3688 bytes)
63,66c63
<   ;
< } bzFile;
< 
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>   )(int *bzerror, FILE *f, int blockSize100k,
64,66c64
< } bzFile;
< 
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> (int *bzerror, FILE *f, int blockSize100k,
64,66c64
< } bzFile;
< 
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> } int *bzerror, FILE *f, int blockSize100k,
64,66c64
< } bzFile;
< 
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> } bzFile*bzerror, FILE *f, int blockSize100k,
66c66
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> bzerror, FILE *f, int blockSize100k,
66c66
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE , FILE *f, int blockSize100k,
66c66
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *FILE *f, int blockSize100k,
66c66
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_API*f, int blockSize100k,
66c66
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_API(f, int blockSize100k,
66c66
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_API(BZ2_bzWriteOpen, int blockSize100k,
66c66
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)int blockSize100k,
66c66
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(blockSize100k,
66c66
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int ,
66,67c66
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor);
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int *int verbosity, int workFactor);
66,67c66
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor);
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerrorverbosity, int workFactor);
66,67c66
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor);
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, , int workFactor);
66,67c66
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor);
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE int workFactor);
66,67c66
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor);
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *workFactor);
66,67c66
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor);
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f);
66,67c66
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor);
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, ;
66,69c66
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor);
< 
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
66,69c66
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor);
< 
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100kBZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
67,69c67
<                                 int verbosity, int workFactor);
< 
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                 (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
67,69c67
<                                 int verbosity, int workFactor);
< 
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                 int BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
67,69c67
<                                 int verbosity, int workFactor);
< 
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                 int verbosity)(int *bzerror, BZFILE *b, void *buf, int len);
67,69c67
<                                 int verbosity, int workFactor);
< 
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                 int verbosity, (int *bzerror, BZFILE *b, void *buf, int len);
67,69c67
<                                 int verbosity, int workFactor);
< 
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                 int verbosity, int int *bzerror, BZFILE *b, void *buf, int len);
67,69c67
<                                 int verbosity, int workFactor);
< 
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                 int verbosity, int workFactor*bzerror, BZFILE *b, void *buf, int len);
67,69c67
<                                 int verbosity, int workFactor);
< 
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                 int verbosity, int workFactor)bzerror, BZFILE *b, void *buf, int len);
69c69
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> , BZFILE *b, void *buf, int len);
69c69
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZFILE *b, void *buf, int len);
69c69
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API*b, void *buf, int len);
69c69
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(b, void *buf, int len);
69c69
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite, void *buf, int len);
69c69
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite)void *buf, int len);
69c69
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite)(*buf, int len);
69c69
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite)(int buf, int len);
69c69
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite)(int *, int len);
69c69
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite)(int *bzerrorint len);
69c69
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, len);
69c69
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE );
69c69
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *;
69,71c69
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *bvoid BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
69,71c69
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
69,71c69
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
69,71c69
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
69,71c69
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf)(int *bzerror, BZFILE *b, int abandon,
69,71c69
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, (int *bzerror, BZFILE *b, int abandon,
69,71c69
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int int *bzerror, BZFILE *b, int abandon,
69,71c69
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len*bzerror, BZFILE *b, int abandon,
69,71c69
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len)bzerror, BZFILE *b, int abandon,
71c71
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> , BZFILE *b, int abandon,
71c71
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZFILE *b, int abandon,
71c71
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API*b, int abandon,
71c71
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(b, int abandon,
71c71
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose, int abandon,
71c71
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose)int abandon,
71c71
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose)(abandon,
71c71
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose)(int ,
71,72c71
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
---
> void BZ_API(BZ2_bzWriteClose)(int *unsigned int *nbytes_in,
71,72c71
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
---
> void BZ_API(BZ2_bzWriteClose)(int *bzerrorint *nbytes_in,
71,72c71
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
---
> void BZ_API(BZ2_bzWriteClose)(int *bzerror, *nbytes_in,
71,72c71
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
---
> void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE nbytes_in,
71,72c71
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
---
> void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *,
71,73c71
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
<                               unsigned int *nbytes_out);
---
> void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *bunsigned int *nbytes_out);
71,73c71
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
<                               unsigned int *nbytes_out);
---
> void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int *nbytes_out);
71,73c71
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
<                               unsigned int *nbytes_out);
---
> void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int *nbytes_out);
71,73c71
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
<                               unsigned int *nbytes_out);
---
> void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandonnbytes_out);
72,73c72
<                               unsigned int *nbytes_in,
<                               unsigned int *nbytes_out);
---
>                               );
72,73c72
<                               unsigned int *nbytes_in,
<                               unsigned int *nbytes_out);
---
>                               unsigned ;
72,75c72
<                               unsigned int *nbytes_in,
<                               unsigned int *nbytes_out);
< 
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                               unsigned int void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
72,75c72
<                               unsigned int *nbytes_in,
<                               unsigned int *nbytes_out);
< 
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                               unsigned int *BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
72,75c72
<                               unsigned int *nbytes_in,
<                               unsigned int *nbytes_out);
< 
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                               unsigned int *nbytes_in(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
73,75c73
<                               unsigned int *nbytes_out);
< 
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                               BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
73,75c73
<                               unsigned int *nbytes_out);
< 
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                               unsigned )(int *bzerror, BZFILE *b, int abandon,
73,75c73
<                               unsigned int *nbytes_out);
< 
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                               unsigned int (int *bzerror, BZFILE *b, int abandon,
73,75c73
<                               unsigned int *nbytes_out);
< 
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                               unsigned int *int *bzerror, BZFILE *b, int abandon,
73,75c73
<                               unsigned int *nbytes_out);
< 
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                               unsigned int *nbytes_out*bzerror, BZFILE *b, int abandon,
73,75c73
<                               unsigned int *nbytes_out);
< 
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                               unsigned int *nbytes_out)bzerror, BZFILE *b, int abandon,
75c75
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> , BZFILE *b, int abandon,
75c75
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZFILE *b, int abandon,
75c75
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API*b, int abandon,
75c75
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(b, int abandon,
75c75
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose64, int abandon,
75c75
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose64)int abandon,
75c75
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose64)(abandon,
75c75
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose64)(int ,
75,76c75
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
---
> void BZ_API(BZ2_bzWriteClose64)(int *unsigned int *nbytes_in_lo32,
75,76c75
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
---
> void BZ_API(BZ2_bzWriteClose64)(int *bzerrorint *nbytes_in_lo32,
75,76c75
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
---
> void BZ_API(BZ2_bzWriteClose64)(int *bzerror, *nbytes_in_lo32,
75,76c75
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
---
> void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE nbytes_in_lo32,
75,76c75
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
---
> void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *,
75,77c75
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
---
> void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *bunsigned int *nbytes_in_hi32,
75,77c75
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
---
> void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int *nbytes_in_hi32,
75,77c75
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
---
> void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int *nbytes_in_hi32,
75,77c75
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
---
> void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandonnbytes_in_hi32,
76,77c76
<                                 unsigned int *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
---
>                                 ,
76,78c76
<                                 unsigned int *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned unsigned int *nbytes_out_lo32,
76,78c76
<                                 unsigned int *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned int int *nbytes_out_lo32,
76,78c76
<                                 unsigned int *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned int **nbytes_out_lo32,
76,78c76
<                                 unsigned int *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned int *nbytes_in_lo32nbytes_out_lo32,
77,78c77
<                                 unsigned int *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
---
>                                 ,
77,79c77
<                                 unsigned int *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32);
---
>                                 unsigned unsigned int *nbytes_out_hi32);
77,79c77
<                                 unsigned int *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32);
---
>                                 unsigned int int *nbytes_out_hi32);
77,79c77
<                                 unsigned int *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32);
---
>                                 unsigned int **nbytes_out_hi32);
77,79c77
<                                 unsigned int *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32);
---
>                                 unsigned int *nbytes_in_hi32nbytes_out_hi32);
78,79c78
<                                 unsigned int *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32);
---
>                                 );
78,79c78
<                                 unsigned int *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32);
---
>                                 unsigned ;
78,81c78
<                                 unsigned int *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
---
>                                 unsigned int BZFILE *BZ_API (*b)(int *bzerrorlen) {
78,81c78
<                                 unsigned int *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
---
>                                 unsigned int **BZ_API (*b)(int *bzerrorlen) {
78,81c78
<                                 unsigned int *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
---
>                                 unsigned int *nbytes_out_lo32BZ_API (*b)(int *bzerrorlen) {
79,81c79
<                                 unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
---
>                                 (*b)(int *bzerrorlen) {
79,81c79
<                                 unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
---
>                                 unsigned *b)(int *bzerrorlen) {
79,81c79
<                                 unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
---
>                                 unsigned int b)(int *bzerrorlen) {
79,81c79
<                                 unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
---
>                                 unsigned int *)(int *bzerrorlen) {
79,81c79
<                                 unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
---
>                                 unsigned int *nbytes_out_hi32(int *bzerrorlen) {
79,81c79
<                                 unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
---
>                                 unsigned int *nbytes_out_hi32)int *bzerrorlen) {
81c81
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
---
> *bzerrorlen) {
81c81
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
---
> BZFILE bzerrorlen) {
81c81
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
---
> BZFILE *) {
81c81
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
---
> BZFILE *BZ_API {
81,83c81
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
< 
<   bzFile *bzf = b;
---
> BZFILE *BZ_API (bzFile *bzf = b;
81,83c81
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
< 
<   bzFile *bzf = b;
---
> BZFILE *BZ_API (**bzf = b;
81,83c81
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
< 
<   bzFile *bzf = b;
---
> BZFILE *BZ_API (*bbzf = b;
81,83c81
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
< 
<   bzFile *bzf = b;
---
> BZFILE *BZ_API (*b)= b;
81,83c81
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
< 
<   bzFile *bzf = b;
---
> BZFILE *BZ_API (*b)(b;
81,83c81
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
< 
<   bzFile *bzf = b;
---
> BZFILE *BZ_API (*b)(int ;
81,85c81
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
< 
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
---
> BZFILE *BZ_API (*b)(int *BZ_SETERR;
81,85c81
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
< 
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
---
> BZFILE *BZ_API (*b)(int *bzerrorlen;
81,86c81
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
< 
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
< }
---
> BZFILE *BZ_API (*b)(int *bzerrorlen) }
83,88c83
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
< }
< 
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
>   void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
83,88c83
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
< }
< 
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
>   bzFile BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
83,88c83
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
< }
< 
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
>   bzFile *(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
83,88c83
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
< }
< 
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
>   bzFile *bzf BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
83,88c83
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
< }
< 
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
>   bzFile *bzf = )(int *bzerror, BZFILE *b, void **unused,
83,88c83
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
< }
< 
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
>   bzFile *bzf = b(int *bzerror, BZFILE *b, void **unused,
85,88c85
<   BZ_SETERR;
< }
< 
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
>   int *bzerror, BZFILE *b, void **unused,
85,88c85
<   BZ_SETERR;
< }
< 
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
>   BZ_SETERR*bzerror, BZFILE *b, void **unused,
86,88c86
< }
< 
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> bzerror, BZFILE *b, void **unused,
88c88
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> , BZFILE *b, void **unused,
88c88
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZFILE *b, void **unused,
88c88
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_API*b, void **unused,
88c88
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_API(b, void **unused,
88c88
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_API(BZ2_bzReadGetUnused, void **unused,
88c88
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_API(BZ2_bzReadGetUnused)void **unused,
88c88
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_API(BZ2_bzReadGetUnused)(**unused,
88c88
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_API(BZ2_bzReadGetUnused)(int *unused,
88c88
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_API(BZ2_bzReadGetUnused)(int *unused,
88c88
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerror,
88,89c88
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused);
---
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, int *nUnused);
88,89c88
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused);
---
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *nUnused);
88,89c88
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused);
---
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *nUnused);
88,89c88
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused);
---
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b);
88,89c88
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused);
---
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, ;
88,91c88
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused);
< 
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
88,91c88
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused);
< 
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void *BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
88,91c88
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused);
< 
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
88,91c88
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused);
< 
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unusedBZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
89,91c89
<                                  int *nUnused);
< 
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
>                                  )(char *dest, unsigned int *destLen,
89,91c89
<                                  int *nUnused);
< 
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
>                                  int (char *dest, unsigned int *destLen,
89,91c89
<                                  int *nUnused);
< 
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
>                                  int *char *dest, unsigned int *destLen,
89,91c89
<                                  int *nUnused);
< 
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
>                                  int *nUnused*dest, unsigned int *destLen,
89,91c89
<                                  int *nUnused);
< 
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
>                                  int *nUnused)dest, unsigned int *destLen,
91c91
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> , unsigned int *destLen,
91c91
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> int unsigned int *destLen,
91c91
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> int BZ_APIint *destLen,
91c91
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> int BZ_API(*destLen,
91c91
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompressdestLen,
91c91
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompress),
91,92c91
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompress)(char *source, unsigned int sourceLen,
91,92c91
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompress)(char *source, unsigned int sourceLen,
91,92c91
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompress)(char *source, unsigned int sourceLen,
91,92c91
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int sourceLen,
91,92c91
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int sourceLen,
91,92c91
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int sourceLen,
91,92c91
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int sourceLen,
91,92c91
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *,
91,93c91
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
<                                      int blockSize100k, int verbosity,
---
> int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLenint blockSize100k, int verbosity,
92,93c92
<                                      char *source, unsigned int sourceLen,
<                                      int blockSize100k, int verbosity,
---
>                                      blockSize100k, int verbosity,
92,93c92
<                                      char *source, unsigned int sourceLen,
<                                      int blockSize100k, int verbosity,
---
>                                      char , int verbosity,
92,93c92
<                                      char *source, unsigned int sourceLen,
<                                      int blockSize100k, int verbosity,
---
>                                      char *int verbosity,
92,93c92
<                                      char *source, unsigned int sourceLen,
<                                      int blockSize100k, int verbosity,
---
>                                      char *sourceverbosity,
92,93c92
<                                      char *source, unsigned int sourceLen,
<                                      int blockSize100k, int verbosity,
---
>                                      char *source, ,
92,94c92
<                                      char *source, unsigned int sourceLen,
<                                      int blockSize100k, int verbosity,
<                                      int workFactor);
---
>                                      char *source, unsigned int workFactor);
92,94c92
<                                      char *source, unsigned int sourceLen,
<                                      int blockSize100k, int verbosity,
<                                      int workFactor);
---
>                                      char *source, unsigned int workFactor);
92,94c92
<                                      char *source, unsigned int sourceLen,
<                                      int blockSize100k, int verbosity,
<                                      int workFactor);
---
>                                      char *source, unsigned int sourceLen);
93,94c93
<                                      int blockSize100k, int verbosity,
<                                      int workFactor);
---
>                                      ;
93,96c93
<                                      int blockSize100k, int verbosity,
<                                      int workFactor);
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>                                      int int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
93,96c93
<                                      int blockSize100k, int verbosity,
<                                      int workFactor);
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>                                      int blockSize100kBZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
93,96c93
<                                      int blockSize100k, int verbosity,
<                                      int workFactor);
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>                                      int blockSize100k, (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
93,96c93
<                                      int blockSize100k, int verbosity,
<                                      int workFactor);
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>                                      int blockSize100k, int BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
93,96c93
<                                      int blockSize100k, int verbosity,
<                                      int workFactor);
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>                                      int blockSize100k, int verbosity)(char *dest, unsigned int *destLen,
94,96c94
<                                      int workFactor);
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>                                      (char *dest, unsigned int *destLen,
94,96c94
<                                      int workFactor);
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>                                      int char *dest, unsigned int *destLen,
94,96c94
<                                      int workFactor);
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>                                      int workFactor*dest, unsigned int *destLen,
94,96c94
<                                      int workFactor);
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>                                      int workFactor)dest, unsigned int *destLen,
96c96
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> , unsigned int *destLen,
96c96
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> int unsigned int *destLen,
96c96
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> int BZ_APIint *destLen,
96c96
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> int BZ_API(*destLen,
96c96
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompressdestLen,
96c96
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompress),
96,97c96
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
<                                        char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompress)(char *source, unsigned int sourceLen,
96,97c96
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
<                                        char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompress)(char *source, unsigned int sourceLen,
96,97c96
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
<                                        char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompress)(char *source, unsigned int sourceLen,
96,97c96
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
<                                        char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int sourceLen,
96,97c96
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
<                                        char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int sourceLen,
96,97c96
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
<                                        char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int sourceLen,
96,97c96
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
<                                        char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int sourceLen,
96,97c96
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
<                                        char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *,
96,98c96
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
<                                        char *source, unsigned int sourceLen,
<                                        int small, int verbosity);
---
> int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLenint small, int verbosity);
97,98c97
<                                        char *source, unsigned int sourceLen,
<                                        int small, int verbosity);
---
>                                        small, int verbosity);
97,98c97
<                                        char *source, unsigned int sourceLen,
<                                        int small, int verbosity);
---
>                                        char , int verbosity);
97,98c97
<                                        char *source, unsigned int sourceLen,
<                                        int small, int verbosity);
---
>                                        char *int verbosity);
97,98c97
<                                        char *source, unsigned int sourceLen,
<                                        int small, int verbosity);
---
>                                        char *sourceverbosity);
97,98c97
<                                        char *source, unsigned int sourceLen,
<                                        int small, int verbosity);
---
>                                        char *source, );
97,98c97
<                                        char *source, unsigned int sourceLen,
<                                        int small, int verbosity);
---
>                                        char *source, unsigned ;
97,100c97
<                                        char *source, unsigned int sourceLen,
<                                        int small, int verbosity);
< 
< ;
---
>                                        char *source, unsigned int ;
97,102c97
<                                        char *source, unsigned int sourceLen,
<                                        int small, int verbosity);
< 
< ;
< 
< int BZ_API(BZ2_bzread)() {
---
>                                        char *source, unsigned int sourceLenint BZ_API(BZ2_bzread)() {
98,102c98
<                                        int small, int verbosity);
< 
< ;
< 
< int BZ_API(BZ2_bzread)() {
---
>                                        BZ_API(BZ2_bzread)() {
98,102c98
<                                        int small, int verbosity);
< 
< ;
< 
< int BZ_API(BZ2_bzread)() {
---
>                                        int (BZ2_bzread)() {
98,102c98
<                                        int small, int verbosity);
< 
< ;
< 
< int BZ_API(BZ2_bzread)() {
---
>                                        int smallBZ2_bzread)() {
98,102c98
<                                        int small, int verbosity);
< 
< ;
< 
< int BZ_API(BZ2_bzread)() {
---
>                                        int small, )() {
98,102c98
<                                        int small, int verbosity);
< 
< ;
< 
< int BZ_API(BZ2_bzread)() {
---
>                                        int small, int () {
98,102c98
<                                        int small, int verbosity);
< 
< ;
< 
< int BZ_API(BZ2_bzread)() {
---
>                                        int small, int verbosity) {
98,102c98
<                                        int small, int verbosity);
< 
< ;
< 
< int BZ_API(BZ2_bzread)() {
---
>                                        int small, int verbosity){
(98.2 %, 3658 bytes)
98,100c98
<                                        int small, int verbosity) {
<   int bzerr, nread;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>                                        int small, int verbositybzerr == BZ_OK || bzerr == BZ_STREAM_END)
98,100c98
<                                        int small, int verbosity) {
<   int bzerr, nread;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>                                        int small, int verbosity) == BZ_OK || bzerr == BZ_STREAM_END)
99,100c99
<   int bzerr, nread;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   BZ_OK || bzerr == BZ_STREAM_END)
99,100c99
<   int bzerr, nread;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   int || bzerr == BZ_STREAM_END)
99,100c99
<   int bzerr, nread;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   int bzerrbzerr == BZ_STREAM_END)
99,100c99
<   int bzerr, nread;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   int bzerr, == BZ_STREAM_END)
99,100c99
<   int bzerr, nread;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   int bzerr, nreadBZ_STREAM_END)
100c100
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   )
100,101c100
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
---
>   if ;
100,102c100
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
---
>   if (else
100,103c100
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
<     ;
---
>   if (bzerr ;
100,104c100
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
<     ;
< }
---
>   if (bzerr == }
100,106c100
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
<     ;
< }
< 
< int BZ_API(BZ2_bzwrite)();
---
>   if (bzerr == BZ_OK int BZ_API(BZ2_bzwrite)();
100,106c100
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
<     ;
< }
< 
< int BZ_API(BZ2_bzwrite)();
---
>   if (bzerr == BZ_OK || BZ_API(BZ2_bzwrite)();
100,106c100
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
<     ;
< }
< 
< int BZ_API(BZ2_bzwrite)();
---
>   if (bzerr == BZ_OK || bzerr (BZ2_bzwrite)();
100,106c100
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
<     ;
< }
< 
< int BZ_API(BZ2_bzwrite)();
---
>   if (bzerr == BZ_OK || bzerr == BZ2_bzwrite)();
100,106c100
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
<     ;
< }
< 
< int BZ_API(BZ2_bzwrite)();
---
>   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)();
101,106c101
<     ;
<   else
<     ;
< }
< 
< int BZ_API(BZ2_bzwrite)();
---
>     ();
102,106c102
<   else
<     ;
< }
< 
< int BZ_API(BZ2_bzwrite)();
---
>   );
104,106d103
< }
< 
< int BZ_API(BZ2_bzwrite)();
104,106d103
< }
< 
< int BZ_API(BZ2_bzwrite)();
106d105
< int BZ_API(BZ2_bzwrite)();
106c106
< int BZ_API(BZ2_bzwrite)();
---
> int 
\ No newline at end of file
106c106
< int BZ_API(BZ2_bzwrite)();
---
> int BZ_API
\ No newline at end of file
106c106
< int BZ_API(BZ2_bzwrite)();
---
> int BZ_API(
\ No newline at end of file
106c106
< int BZ_API(BZ2_bzwrite)();
---
> int BZ_API(BZ2_bzwrite
\ No newline at end of file
106c106
< int BZ_API(BZ2_bzwrite)();
---
> int BZ_API(BZ2_bzwrite)
\ No newline at end of file
106c106
< int BZ_API(BZ2_bzwrite)();
---
> int BZ_API(BZ2_bzwrite)(
\ No newline at end of file
106c106
< int BZ_API(BZ2_bzwrite)();
---
> int BZ_API(BZ2_bzwrite)()
\ No newline at end of file
(98.2 %, 3631 bytes)
===< pass_clex :: rm-toks-8 >===
3,4d2
< #define BZ_OK 2
< #define BZ_FINISH_OK 3
3,4d2
< #define BZ_OK 2
< #define BZ_FINISH_OK 3
3,4d2
< #define BZ_OK 2
< #define BZ_FINISH_OK 3
3,5c3
< #define BZ_OK 2
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
---
> #define BZ_OK 4
4,5d3
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
4,6c4
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
< typedef struct {
---
> #struct {
4,6c4
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
< typedef struct {
---
> #define {
4,7c4
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
< typedef struct {
<   int next_out;
---
> #define BZ_FINISH_OK int next_out;
5,7c5
< #define BZ_STREAM_END 4
< typedef struct {
<   int next_out;
---
> next_out;
5,7c5
< #define BZ_STREAM_END 4
< typedef struct {
<   int next_out;
---
> #;
5,8c5
< #define BZ_STREAM_END 4
< typedef struct {
<   int next_out;
<   ;
---
> #define ;
5,9c5
< #define BZ_STREAM_END 4
< typedef struct {
<   int next_out;
<   ;
< } bz_stream;
---
> #define BZ_STREAM_END } bz_stream;
6,9c6
< typedef struct {
<   int next_out;
<   ;
< } bz_stream;
---
> bz_stream;
6,9c6
< typedef struct {
<   int next_out;
<   ;
< } bz_stream;
---
> typedef ;
6,11c6
< typedef struct {
<   int next_out;
<   ;
< } bz_stream;
< 
< #include <stdio.h>
---
> typedef struct #include <stdio.h>
7,11c7
<   int next_out;
<   ;
< } bz_stream;
< 
< #include <stdio.h>
---
>   include <stdio.h>
7,11c7
<   int next_out;
<   ;
< } bz_stream;
< 
< #include <stdio.h>
---
>   int <stdio.h>
7,11c7
<   int next_out;
<   ;
< } bz_stream;
< 
< #include <stdio.h>
---
>   int next_outstdio.h>
8,11c8
<   ;
< } bz_stream;
< 
< #include <stdio.h>
---
>   .h>
9,11c9
< } bz_stream;
< 
< #include <stdio.h>
---
> h>
9,11c9
< } bz_stream;
< 
< #include <stdio.h>
---
> } >
9,13c9
< } bz_stream;
< 
< #include <stdio.h>
< 
< #define BZ_API(func) func
---
> } bz_stream#define BZ_API(func) func
11,13c11
< #include <stdio.h>
< 
< #define BZ_API(func) func
---
> define BZ_API(func) func
11,13c11
< #include <stdio.h>
< 
< #define BZ_API(func) func
---
> #BZ_API(func) func
11,13c11
< #include <stdio.h>
< 
< #define BZ_API(func) func
---
> #include (func) func
11,13c11
< #include <stdio.h>
< 
< #define BZ_API(func) func
---
> #include <func) func
11,13c11
< #include <stdio.h>
< 
< #define BZ_API(func) func
---
> #include <stdio) func
11,13c11
< #include <stdio.h>
< 
< #define BZ_API(func) func
---
> #include <stdio.func
11,14c11
< #include <stdio.h>
< 
< #define BZ_API(func) func
< #define BZ_EXTERN extern
---
> #include <stdio.h#define BZ_EXTERN extern
13,14c13
< #define BZ_API(func) func
< #define BZ_EXTERN extern
---
> define BZ_EXTERN extern
13,14c13
< #define BZ_API(func) func
< #define BZ_EXTERN extern
---
> #BZ_EXTERN extern
13,14c13
< #define BZ_API(func) func
< #define BZ_EXTERN extern
---
> #define extern
13,16c13
< #define BZ_API(func) func
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> #define BZ_APIBZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
13,16c13
< #define BZ_API(func) func
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> #define BZ_API(int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
13,16c13
< #define BZ_API(func) func
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> #define BZ_API(funcBZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
13,16c13
< #define BZ_API(func) func
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> #define BZ_API(func) (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
14,16c14
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
14,16c14
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> #)(bz_stream *strm, int blockSize100k,
14,16c14
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> #define (bz_stream *strm, int blockSize100k,
14,16c14
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> #define BZ_EXTERN bz_stream *strm, int blockSize100k,
16c16
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> *strm, int blockSize100k,
16c16
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> BZ_EXTERN strm, int blockSize100k,
16c16
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> BZ_EXTERN int , int blockSize100k,
16c16
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> BZ_EXTERN int BZ_APIint blockSize100k,
16c16
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> BZ_EXTERN int BZ_API(blockSize100k,
16c16
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit,
16,17c16
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                          int verbosity, int workFactor);
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit)int verbosity, int workFactor);
16,17c16
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                          int verbosity, int workFactor);
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(verbosity, int workFactor);
16,17c16
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                          int verbosity, int workFactor);
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream , int workFactor);
16,17c16
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                          int verbosity, int workFactor);
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *int workFactor);
16,17c16
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                          int verbosity, int workFactor);
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strmworkFactor);
16,17c16
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                          int verbosity, int workFactor);
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, );
16,17c16
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                          int verbosity, int workFactor);
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int ;
16,19c16
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                          int verbosity, int workFactor);
< 
< typedef void BZFILE;
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100ktypedef void BZFILE;
17,19c17
<                                          int verbosity, int workFactor);
< 
< typedef void BZFILE;
---
>                                          void BZFILE;
17,19c17
<                                          int verbosity, int workFactor);
< 
< typedef void BZFILE;
---
>                                          int BZFILE;
17,19c17
<                                          int verbosity, int workFactor);
< 
< typedef void BZFILE;
---
>                                          int verbosity;
17,21c17
<                                          int verbosity, int workFactor);
< 
< typedef void BZFILE;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>                                          int verbosity, BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
17,21c17
<                                          int verbosity, int workFactor);
< 
< typedef void BZFILE;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>                                          int verbosity, int void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
17,21c17
<                                          int verbosity, int workFactor);
< 
< typedef void BZFILE;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>                                          int verbosity, int workFactorBZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
17,21c17
<                                          int verbosity, int workFactor);
< 
< typedef void BZFILE;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>                                          int verbosity, int workFactor)(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
19,21c19
< typedef void BZFILE;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
19,21c19
< typedef void BZFILE;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> typedef )(int *bzerror, BZFILE *b,
19,21c19
< typedef void BZFILE;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> typedef void (int *bzerror, BZFILE *b,
19,21c19
< typedef void BZFILE;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> typedef void BZFILEint *bzerror, BZFILE *b,
21c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> *bzerror, BZFILE *b,
21c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> BZ_EXTERN bzerror, BZFILE *b,
21c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> BZ_EXTERN void , BZFILE *b,
21c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> BZ_EXTERN void BZ_APIBZFILE *b,
21c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> BZ_EXTERN void BZ_API(*b,
21c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnusedb,
21c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused),
21,22c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
<                                            void **unused, int *nUnused);
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(void **unused, int *nUnused);
21,22c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
<                                            void **unused, int *nUnused);
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int **unused, int *nUnused);
21,22c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
<                                            void **unused, int *nUnused);
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int **unused, int *nUnused);
21,22c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
<                                            void **unused, int *nUnused);
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerrorunused, int *nUnused);
21,22c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
<                                            void **unused, int *nUnused);
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, , int *nUnused);
21,22c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
<                                            void **unused, int *nUnused);
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE int *nUnused);
21,22c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
<                                            void **unused, int *nUnused);
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE **nUnused);
21,22c21
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
<                                            void **unused, int *nUnused);
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *bnUnused);
22c22
<                                            void **unused, int *nUnused);
---
>                                            );
22c22
<                                            void **unused, int *nUnused);
---
>                                            void ;
22,24c22
<                                            void **unused, int *nUnused);
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead);
---
>                                            void *BZ_EXTERN int BZ_API(BZ2_bzRead);
22,24c22
<                                            void **unused, int *nUnused);
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead);
---
>                                            void **int BZ_API(BZ2_bzRead);
22,24c22
<                                            void **unused, int *nUnused);
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead);
---
>                                            void **unusedBZ_API(BZ2_bzRead);
22,24c22
<                                            void **unused, int *nUnused);
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead);
---
>                                            void **unused, (BZ2_bzRead);
22,24c22
<                                            void **unused, int *nUnused);
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead);
---
>                                            void **unused, int BZ2_bzRead);
22,24c22
<                                            void **unused, int *nUnused);
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead);
---
>                                            void **unused, int *);
22,24c22
<                                            void **unused, int *nUnused);
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead);
---
>                                            void **unused, int *nUnused;
22,26c22
<                                            void **unused, int *nUnused);
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead);
< 
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>                                            void **unused, int *nUnused)BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
24,26c24
< BZ_EXTERN int BZ_API(BZ2_bzRead);
< 
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
(98.2 %, 3589 bytes)
22,24c22
<                                            void **unused, int *);
< 
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>                                            void **unused, int *)(int *bzerror, FILE *f,
22,24c22
<                                            void **unused, int *);
< 
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>                                            void **unused, int *)(int *bzerror, FILE *f,
24c24
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> int *bzerror, FILE *f,
24c24
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN *bzerror, FILE *f,
24c24
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE bzerror, FILE *f,
24c24
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE *, FILE *f,
24c24
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE *BZ_APIFILE *f,
24c24
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE *BZ_API(*f,
24c24
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpenf,
24c24
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen),
24,25c24
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
<                                           int blockSize100k, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int blockSize100k, int verbosity,
24,25c24
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
<                                           int blockSize100k, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int blockSize100k, int verbosity,
24,25c24
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
<                                           int blockSize100k, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *, int verbosity,
24,25c24
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
<                                           int blockSize100k, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerrorint verbosity,
24,25c24
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
<                                           int blockSize100k, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, verbosity,
24,25c24
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
<                                           int blockSize100k, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE ,
24,26c24
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
<                                           int blockSize100k, int verbosity,
<                                           int workFactor);
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *int workFactor);
24,26c24
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
<                                           int blockSize100k, int verbosity,
<                                           int workFactor);
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *fworkFactor);
25,26c25
<                                           int blockSize100k, int verbosity,
<                                           int workFactor);
---
>                                           );
25,26c25
<                                           int blockSize100k, int verbosity,
<                                           int workFactor);
---
>                                           int ;
25,28c25
<                                           int blockSize100k, int verbosity,
<                                           int workFactor);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                           int blockSize100kBZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
25,28c25
<                                           int blockSize100k, int verbosity,
<                                           int workFactor);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                           int blockSize100k, void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
25,28c25
<                                           int blockSize100k, int verbosity,
<                                           int workFactor);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                           int blockSize100k, int BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
25,28c25
<                                           int blockSize100k, int verbosity,
<                                           int workFactor);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                           int blockSize100k, int verbosity(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
26,28c26
<                                           int workFactor);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                           BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
26,28c26
<                                           int workFactor);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                           int )(int *bzerror, BZFILE *b, void *buf, int len);
26,28c26
<                                           int workFactor);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                           int workFactor(int *bzerror, BZFILE *b, void *buf, int len);
26,28c26
<                                           int workFactor);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                           int workFactor)int *bzerror, BZFILE *b, void *buf, int len);
28c28
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> *bzerror, BZFILE *b, void *buf, int len);
28c28
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN bzerror, BZFILE *b, void *buf, int len);
28c28
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void , BZFILE *b, void *buf, int len);
28c28
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_APIBZFILE *b, void *buf, int len);
28c28
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_API(*b, void *buf, int len);
28c28
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteb, void *buf, int len);
28c28
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite), void *buf, int len);
28c28
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(void *buf, int len);
28c28
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *buf, int len);
28c28
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *buf, int len);
28c28
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, int len);
28c28
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, int len);
28c28
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE len);
28c28
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *);
28c28
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b;
28,30c28
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
28,30c28
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
28,30c28
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
28,30c28
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
28,30c28
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
28,30c28
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int )(int *bzerror, BZFILE *b, int abandon,
28,30c28
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len(int *bzerror, BZFILE *b, int abandon,
28,30c28
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len)int *bzerror, BZFILE *b, int abandon,
30c30
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> *bzerror, BZFILE *b, int abandon,
30c30
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN bzerror, BZFILE *b, int abandon,
30c30
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void , BZFILE *b, int abandon,
30c30
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZFILE *b, int abandon,
30c30
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(*b, int abandon,
30c30
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteCloseb, int abandon,
30c30
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose), int abandon,
30c30
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int abandon,
30c30
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int abandon,
30c30
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *,
30,31c30
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerrorunsigned int *nbytes_in,
30,31c30
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, int *nbytes_in,
30,31c30
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *nbytes_in,
30,31c30
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *nbytes_in,
30,31c30
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b,
30,32c30
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in,
<                                         unsigned int *nbytes_out);
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, unsigned int *nbytes_out);
30,32c30
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in,
<                                         unsigned int *nbytes_out);
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int int *nbytes_out);
30,32c30
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in,
<                                         unsigned int *nbytes_out);
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon*nbytes_out);
31,32c31
<                                         unsigned int *nbytes_in,
<                                         unsigned int *nbytes_out);
---
>                                         nbytes_out);
31,32c31
<                                         unsigned int *nbytes_in,
<                                         unsigned int *nbytes_out);
---
>                                         unsigned );
31,32c31
<                                         unsigned int *nbytes_in,
<                                         unsigned int *nbytes_out);
---
>                                         unsigned int ;
31,34c31
<                                         unsigned int *nbytes_in,
<                                         unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                                         unsigned int *BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
31,34c31
<                                         unsigned int *nbytes_in,
<                                         unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                                         unsigned int *nbytes_invoid BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
32,34c32
<                                         unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                                         BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
32,34c32
<                                         unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                                         unsigned (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
32,34c32
<                                         unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                                         unsigned int BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
32,34c32
<                                         unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                                         unsigned int *)(int *bzerror, BZFILE *b, int abandon,
32,34c32
<                                         unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                                         unsigned int *nbytes_out(int *bzerror, BZFILE *b, int abandon,
32,34c32
<                                         unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                                         unsigned int *nbytes_out)int *bzerror, BZFILE *b, int abandon,
34c34
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> *bzerror, BZFILE *b, int abandon,
34c34
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN bzerror, BZFILE *b, int abandon,
34c34
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void , BZFILE *b, int abandon,
34c34
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZFILE *b, int abandon,
34c34
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(*b, int abandon,
34c34
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64b, int abandon,
34c34
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64), int abandon,
34c34
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int abandon,
34c34
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int abandon,
34c34
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *,
34,35c34
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                           unsigned int *nbytes_in_lo32,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerrorunsigned int *nbytes_in_lo32,
34,35c34
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                           unsigned int *nbytes_in_lo32,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, int *nbytes_in_lo32,
34,35c34
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                           unsigned int *nbytes_in_lo32,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *nbytes_in_lo32,
34,35c34
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                           unsigned int *nbytes_in_lo32,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *nbytes_in_lo32,
34,35c34
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                           unsigned int *nbytes_in_lo32,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b,
34,36c34
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                           unsigned int *nbytes_in_lo32,
<                                           unsigned int *nbytes_in_hi32,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, unsigned int *nbytes_in_hi32,
34,36c34
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                           unsigned int *nbytes_in_lo32,
<                                           unsigned int *nbytes_in_hi32,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int int *nbytes_in_hi32,
34,36c34
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                           unsigned int *nbytes_in_lo32,
<                                           unsigned int *nbytes_in_hi32,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon*nbytes_in_hi32,
35,36c35
<                                           unsigned int *nbytes_in_lo32,
<                                           unsigned int *nbytes_in_hi32,
---
>                                           nbytes_in_hi32,
35,36c35
<                                           unsigned int *nbytes_in_lo32,
<                                           unsigned int *nbytes_in_hi32,
---
>                                           unsigned ,
35,37c35
<                                           unsigned int *nbytes_in_lo32,
<                                           unsigned int *nbytes_in_hi32,
<                                           unsigned int *nbytes_out_lo32,
---
>                                           unsigned int unsigned int *nbytes_out_lo32,
35,37c35
<                                           unsigned int *nbytes_in_lo32,
<                                           unsigned int *nbytes_in_hi32,
<                                           unsigned int *nbytes_out_lo32,
---
>                                           unsigned int *int *nbytes_out_lo32,
35,37c35
<                                           unsigned int *nbytes_in_lo32,
<                                           unsigned int *nbytes_in_hi32,
<                                           unsigned int *nbytes_out_lo32,
---
>                                           unsigned int *nbytes_in_lo32*nbytes_out_lo32,
36,37c36
<                                           unsigned int *nbytes_in_hi32,
<                                           unsigned int *nbytes_out_lo32,
---
>                                           nbytes_out_lo32,
36,37c36
<                                           unsigned int *nbytes_in_hi32,
<                                           unsigned int *nbytes_out_lo32,
---
>                                           unsigned ,
36,38c36
<                                           unsigned int *nbytes_in_hi32,
<                                           unsigned int *nbytes_out_lo32,
<                                           unsigned int *nbytes_out_hi32);
---
>                                           unsigned int unsigned int *nbytes_out_hi32);
36,38c36
<                                           unsigned int *nbytes_in_hi32,
<                                           unsigned int *nbytes_out_lo32,
<                                           unsigned int *nbytes_out_hi32);
---
>                                           unsigned int *int *nbytes_out_hi32);
36,38c36
<                                           unsigned int *nbytes_in_hi32,
<                                           unsigned int *nbytes_out_lo32,
<                                           unsigned int *nbytes_out_hi32);
---
>                                           unsigned int *nbytes_in_hi32*nbytes_out_hi32);
37,38c37
<                                           unsigned int *nbytes_out_lo32,
<                                           unsigned int *nbytes_out_hi32);
---
>                                           nbytes_out_hi32);
37,38c37
<                                           unsigned int *nbytes_out_lo32,
<                                           unsigned int *nbytes_out_hi32);
---
>                                           unsigned );
37,38c37
<                                           unsigned int *nbytes_out_lo32,
<                                           unsigned int *nbytes_out_hi32);
---
>                                           unsigned int ;
37,40c37
<                                           unsigned int *nbytes_out_lo32,
<                                           unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
>                                           unsigned int *BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
37,40c37
<                                           unsigned int *nbytes_out_lo32,
<                                           unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
>                                           unsigned int *nbytes_out_lo32int BZ_API(BZ2_bzBuffToBuffCompress)(
38,40c38
<                                           unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
>                                           BZ_API(BZ2_bzBuffToBuffCompress)(
38,40c38
<                                           unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
>                                           unsigned (BZ2_bzBuffToBuffCompress)(
38,40c38
<                                           unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
>                                           unsigned int BZ2_bzBuffToBuffCompress)(
38,40c38
<                                           unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
>                                           unsigned int *)(
38,40c38
<                                           unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
>                                           unsigned int *nbytes_out_hi32(
38,41c38
<                                           unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>                                           unsigned int *nbytes_out_hi32)char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
40,41c40
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
> *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
40,41c40
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
> BZ_EXTERN dest, unsigned int *destLen, char *source, unsigned int sourceLen,
40,41c40
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
> BZ_EXTERN int , unsigned int *destLen, char *source, unsigned int sourceLen,
40,41c40
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
> BZ_EXTERN int BZ_APIunsigned int *destLen, char *source, unsigned int sourceLen,
40,41c40
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
> BZ_EXTERN int BZ_API(int *destLen, char *source, unsigned int sourceLen,
40,41c40
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress*destLen, char *source, unsigned int sourceLen,
40,41c40
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)destLen, char *source, unsigned int sourceLen,
41c41
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     , char *source, unsigned int sourceLen,
41c41
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char char *source, unsigned int sourceLen,
41c41
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char **source, unsigned int sourceLen,
41c41
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *destsource, unsigned int sourceLen,
41c41
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *dest, , unsigned int sourceLen,
41c41
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *dest, unsigned unsigned int sourceLen,
41c41
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *dest, unsigned int int sourceLen,
41c41
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *dest, unsigned int *sourceLen,
41c41
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *dest, unsigned int *destLen,
41,42c41
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *dest, unsigned int *destLen, int blockSize100k, int verbosity, int workFactor);
41,42c41
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *dest, unsigned int *destLen, char blockSize100k, int verbosity, int workFactor);
41,42c41
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *dest, unsigned int *destLen, char *, int verbosity, int workFactor);
41,42c41
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *dest, unsigned int *destLen, char *sourceint verbosity, int workFactor);
41,42c41
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *dest, unsigned int *destLen, char *source, verbosity, int workFactor);
41,42c41
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *dest, unsigned int *destLen, char *source, unsigned , int workFactor);
41,42c41
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *dest, unsigned int *destLen, char *source, unsigned int int workFactor);
41,42c41
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *dest, unsigned int *destLen, char *source, unsigned int sourceLenworkFactor);
42c42
<     int blockSize100k, int verbosity, int workFactor);
---
>     );
42c42
<     int blockSize100k, int verbosity, int workFactor);
---
>     int ;
42,44c42
<     int blockSize100k, int verbosity, int workFactor);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>     int blockSize100kBZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
42,44c42
<     int blockSize100k, int verbosity, int workFactor);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>     int blockSize100k, int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
42,44c42
<     int blockSize100k, int verbosity, int workFactor);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>     int blockSize100k, int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
42,44c42
<     int blockSize100k, int verbosity, int workFactor);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>     int blockSize100k, int verbosity(BZ2_bzBuffToBuffDecompress)(char *dest,
42,44c42
<     int blockSize100k, int verbosity, int workFactor);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>     int blockSize100k, int verbosity, BZ2_bzBuffToBuffDecompress)(char *dest,
42,44c42
<     int blockSize100k, int verbosity, int workFactor);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>     int blockSize100k, int verbosity, int )(char *dest,
42,44c42
<     int blockSize100k, int verbosity, int workFactor);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>     int blockSize100k, int verbosity, int workFactor(char *dest,
42,44c42
<     int blockSize100k, int verbosity, int workFactor);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>     int blockSize100k, int verbosity, int workFactor)char *dest,
44c44
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
> *dest,
44c44
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
> BZ_EXTERN dest,
44c44
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
> BZ_EXTERN int ,
44,45c44
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
<                                                  unsigned int *destLen,
---
> BZ_EXTERN int BZ_APIunsigned int *destLen,
44,45c44
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
<                                                  unsigned int *destLen,
---
> BZ_EXTERN int BZ_API(int *destLen,
44,45c44
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
<                                                  unsigned int *destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress*destLen,
44,45c44
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
<                                                  unsigned int *destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)destLen,
44,45c44
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
<                                                  unsigned int *destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(,
44,46c44
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
<                                                  unsigned int *destLen,
<                                                  char *source,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char char *source,
44,46c44
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
<                                                  unsigned int *destLen,
<                                                  char *source,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char **source,
44,46c44
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
<                                                  unsigned int *destLen,
<                                                  char *source,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *destsource,
45,46c45
<                                                  unsigned int *destLen,
<                                                  char *source,
---
>                                                  ,
45,47c45
<                                                  unsigned int *destLen,
<                                                  char *source,
<                                                  unsigned int sourceLen,
---
>                                                  unsigned unsigned int sourceLen,
45,47c45
<                                                  unsigned int *destLen,
<                                                  char *source,
<                                                  unsigned int sourceLen,
---
>                                                  unsigned int int sourceLen,
45,47c45
<                                                  unsigned int *destLen,
<                                                  char *source,
<                                                  unsigned int sourceLen,
---
>                                                  unsigned int *sourceLen,
46,47d45
<                                                  char *source,
<                                                  unsigned int sourceLen,
46,47d45
<                                                  char *source,
<                                                  unsigned int sourceLen,
46,48c46
<                                                  char *source,
<                                                  unsigned int sourceLen,
<                                                  int small, int );
---
>                                                  char small, int );
46,48c46
<                                                  char *source,
<                                                  unsigned int sourceLen,
<                                                  int small, int );
---
>                                                  char *, int );
46,48c46
<                                                  char *source,
<                                                  unsigned int sourceLen,
<                                                  int small, int );
---
>                                                  char *sourceint );
47,48c47
<                                                  unsigned int sourceLen,
<                                                  int small, int );
---
>                                                  );
47,48c47
<                                                  unsigned int sourceLen,
<                                                  int small, int );
---
>                                                  unsigned ;
47,50c47
<                                                  unsigned int sourceLen,
<                                                  int small, int );
< 
< Char;
---
>                                                  unsigned int Char;
47,50c47
<                                                  unsigned int sourceLen,
<                                                  int small, int );
< 
< Char;
---
>                                                  unsigned int sourceLen;
48,51c48
<                                                  int small, int );
< 
< Char;
< typedef unsigned char Bool;
---
>                                                  typedef unsigned char Bool;
48,51c48
<                                                  int small, int );
< 
< Char;
< typedef unsigned char Bool;
---
>                                                  int unsigned char Bool;
48,51c48
<                                                  int small, int );
< 
< Char;
< typedef unsigned char Bool;
---
>                                                  int smallchar Bool;
48,51c48
<                                                  int small, int );
< 
< Char;
< typedef unsigned char Bool;
---
>                                                  int small, Bool;
48,51c48
<                                                  int small, int );
< 
< Char;
< typedef unsigned char Bool;
---
>                                                  int small, int ;
48,52c48
<                                                  int small, int );
< 
< Char;
< typedef unsigned char Bool;
< typedef Int32;
---
>                                                  int small, int )typedef Int32;
50,52c50
< Char;
< typedef unsigned char Bool;
< typedef Int32;
---
> Int32;
51,52d50
< typedef unsigned char Bool;
< typedef Int32;
(98.3 %, 3547 bytes)
50,51c50
< Int32;
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> strm, int blockSize100k,
50,51c50
< Int32;
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> Int32, int blockSize100k,
51c51
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> int blockSize100k,
51c51
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> (blockSize100k,
51c51
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> (BZ2_bzCompressInit,
51,52c51
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                int verbosity, int);
---
> (BZ2_bzCompressInit)int verbosity, int);
51,52c51
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                int verbosity, int);
---
> (BZ2_bzCompressInit)(verbosity, int);
51,52c51
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                int verbosity, int);
---
> (BZ2_bzCompressInit)(bz_stream , int);
51,52c51
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                int verbosity, int);
---
> (BZ2_bzCompressInit)(bz_stream *int);
51,52c51
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                int verbosity, int);
---
> (BZ2_bzCompressInit)(bz_stream *strm);
51,52c51
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                int verbosity, int);
---
> (BZ2_bzCompressInit)(bz_stream *strm, ;
51,54c51
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                int verbosity, int);
< 
< int;
---
> (BZ2_bzCompressInit)(bz_stream *strm, int int;
51,54c51
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                int verbosity, int);
< 
< int;
---
> (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k;
52,56c52
<                                int verbosity, int);
< 
< int;
< 
< #define BZ_SETERR
---
>                                #define BZ_SETERR
52,56c52
<                                int verbosity, int);
< 
< int;
< 
< #define BZ_SETERR
---
>                                int define BZ_SETERR
52,56c52
<                                int verbosity, int);
< 
< int;
< 
< #define BZ_SETERR
---
>                                int verbosityBZ_SETERR
52,58c52
<                                int verbosity, int);
< 
< int;
< 
< #define BZ_SETERR
< 
< typedef struct {
---
>                                int verbosity, typedef struct {
52,58c52
<                                int verbosity, int);
< 
< int;
< 
< #define BZ_SETERR
< 
< typedef struct {
---
>                                int verbosity, intstruct {
52,58c52
<                                int verbosity, int);
< 
< int;
< 
< #define BZ_SETERR
< 
< typedef struct {
---
>                                int verbosity, int){
54,59c54
< int;
< 
< #define BZ_SETERR
< 
< typedef struct {
<   ;
---
> ;
54,60c54
< int;
< 
< #define BZ_SETERR
< 
< typedef struct {
<   ;
< } bzFile;
---
> int} bzFile;
56,60c56
< #define BZ_SETERR
< 
< typedef struct {
<   ;
< } bzFile;
---
> bzFile;
56,60c56
< #define BZ_SETERR
< 
< typedef struct {
<   ;
< } bzFile;
---
> #;
56,62c56
< #define BZ_SETERR
< 
< typedef struct {
<   ;
< } bzFile;
< 
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> #define BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
58,62c58
< typedef struct {
<   ;
< } bzFile;
< 
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
58,62c58
< typedef struct {
<   ;
< } bzFile;
< 
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> typedef BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
58,62c58
< typedef struct {
<   ;
< } bzFile;
< 
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> typedef struct (BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
59,62c59
<   ;
< } bzFile;
< 
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>   BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
60,62c60
< } bzFile;
< 
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> )(int *bzerror, FILE *f, int blockSize100k,
60,62c60
< } bzFile;
< 
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> } (int *bzerror, FILE *f, int blockSize100k,
60,62c60
< } bzFile;
< 
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> } bzFileint *bzerror, FILE *f, int blockSize100k,
62c62
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> *bzerror, FILE *f, int blockSize100k,
62c62
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE bzerror, FILE *f, int blockSize100k,
62c62
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *, FILE *f, int blockSize100k,
62c62
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_APIFILE *f, int blockSize100k,
62c62
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_API(*f, int blockSize100k,
62c62
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_API(BZ2_bzWriteOpenf, int blockSize100k,
62c62
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_API(BZ2_bzWriteOpen), int blockSize100k,
62c62
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int blockSize100k,
62c62
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int blockSize100k,
62c62
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int *,
62,63c62
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor);
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerrorint verbosity, int workFactor);
62,63c62
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor);
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, verbosity, int workFactor);
62,63c62
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor);
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE , int workFactor);
62,63c62
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor);
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *int workFactor);
62,63c62
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor);
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *fworkFactor);
62,63c62
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor);
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, );
62,63c62
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor);
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int ;
62,65c62
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor);
< 
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100kvoid BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
63,65c63
<                                 int verbosity, int workFactor);
< 
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                 BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
63,65c63
<                                 int verbosity, int workFactor);
< 
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                 int (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
63,65c63
<                                 int verbosity, int workFactor);
< 
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                 int verbosityBZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
63,65c63
<                                 int verbosity, int workFactor);
< 
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                 int verbosity, )(int *bzerror, BZFILE *b, void *buf, int len);
63,65c63
<                                 int verbosity, int workFactor);
< 
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                 int verbosity, int (int *bzerror, BZFILE *b, void *buf, int len);
63,65c63
<                                 int verbosity, int workFactor);
< 
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                 int verbosity, int workFactorint *bzerror, BZFILE *b, void *buf, int len);
63,65c63
<                                 int verbosity, int workFactor);
< 
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                 int verbosity, int workFactor)*bzerror, BZFILE *b, void *buf, int len);
65c65
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> bzerror, BZFILE *b, void *buf, int len);
65c65
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void , BZFILE *b, void *buf, int len);
65c65
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZFILE *b, void *buf, int len);
65c65
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(*b, void *buf, int len);
65c65
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWriteb, void *buf, int len);
65c65
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite), void *buf, int len);
65c65
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite)(void *buf, int len);
65c65
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite)(int *buf, int len);
65c65
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite)(int *buf, int len);
65c65
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, int len);
65c65
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, int len);
65c65
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE len);
65c65
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *);
65c65
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b;
65,67c65
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
65,67c65
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
65,67c65
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
65,67c65
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *bufBZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
65,67c65
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, )(int *bzerror, BZFILE *b, int abandon,
65,67c65
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int (int *bzerror, BZFILE *b, int abandon,
65,67c65
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int lenint *bzerror, BZFILE *b, int abandon,
65,67c65
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len)*bzerror, BZFILE *b, int abandon,
67c67
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> bzerror, BZFILE *b, int abandon,
67c67
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void , BZFILE *b, int abandon,
67c67
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZFILE *b, int abandon,
67c67
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(*b, int abandon,
67c67
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteCloseb, int abandon,
67c67
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose), int abandon,
67c67
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose)(int abandon,
67c67
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose)(int abandon,
67c67
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose)(int *,
67,68c67
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
---
> void BZ_API(BZ2_bzWriteClose)(int *bzerrorunsigned int *nbytes_in,
67,68c67
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
---
> void BZ_API(BZ2_bzWriteClose)(int *bzerror, int *nbytes_in,
67,68c67
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
---
> void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *nbytes_in,
67,68c67
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
---
> void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *nbytes_in,
67,68c67
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
---
> void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b,
67,69c67
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
<                               unsigned int *nbytes_out);
---
> void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, unsigned int *nbytes_out);
67,69c67
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
<                               unsigned int *nbytes_out);
---
> void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int int *nbytes_out);
67,69c67
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
<                               unsigned int *nbytes_out);
---
> void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon*nbytes_out);
68,69c68
<                               unsigned int *nbytes_in,
<                               unsigned int *nbytes_out);
---
>                               nbytes_out);
68,69c68
<                               unsigned int *nbytes_in,
<                               unsigned int *nbytes_out);
---
>                               unsigned );
68,69c68
<                               unsigned int *nbytes_in,
<                               unsigned int *nbytes_out);
---
>                               unsigned int ;
68,71c68
<                               unsigned int *nbytes_in,
<                               unsigned int *nbytes_out);
< 
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                               unsigned int *void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
68,71c68
<                               unsigned int *nbytes_in,
<                               unsigned int *nbytes_out);
< 
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                               unsigned int *nbytes_inBZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
69,71c69
<                               unsigned int *nbytes_out);
< 
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                               (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
69,71c69
<                               unsigned int *nbytes_out);
< 
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                               unsigned BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
69,71c69
<                               unsigned int *nbytes_out);
< 
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                               unsigned int )(int *bzerror, BZFILE *b, int abandon,
69,71c69
<                               unsigned int *nbytes_out);
< 
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                               unsigned int *(int *bzerror, BZFILE *b, int abandon,
69,71c69
<                               unsigned int *nbytes_out);
< 
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                               unsigned int *nbytes_outint *bzerror, BZFILE *b, int abandon,
69,71c69
<                               unsigned int *nbytes_out);
< 
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                               unsigned int *nbytes_out)*bzerror, BZFILE *b, int abandon,
71c71
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> bzerror, BZFILE *b, int abandon,
71c71
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void , BZFILE *b, int abandon,
71c71
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZFILE *b, int abandon,
71c71
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(*b, int abandon,
71c71
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose64b, int abandon,
71c71
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose64), int abandon,
71c71
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose64)(int abandon,
71c71
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose64)(int abandon,
71c71
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose64)(int *,
71,72c71
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
---
> void BZ_API(BZ2_bzWriteClose64)(int *bzerrorunsigned int *nbytes_in_lo32,
71,72c71
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
---
> void BZ_API(BZ2_bzWriteClose64)(int *bzerror, int *nbytes_in_lo32,
71,72c71
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
---
> void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *nbytes_in_lo32,
71,72c71
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
---
> void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *nbytes_in_lo32,
71,72c71
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
---
> void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b,
71,73c71
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
---
> void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, unsigned int *nbytes_in_hi32,
71,73c71
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
---
> void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int int *nbytes_in_hi32,
71,73c71
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
---
> void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon*nbytes_in_hi32,
72,73c72
<                                 unsigned int *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
---
>                                 nbytes_in_hi32,
72,73c72
<                                 unsigned int *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
---
>                                 unsigned ,
72,74c72
<                                 unsigned int *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned int unsigned int *nbytes_out_lo32,
72,74c72
<                                 unsigned int *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned int *int *nbytes_out_lo32,
72,74c72
<                                 unsigned int *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned int *nbytes_in_lo32*nbytes_out_lo32,
73,74c73
<                                 unsigned int *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
---
>                                 nbytes_out_lo32,
73,74c73
<                                 unsigned int *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned ,
73,75c73
<                                 unsigned int *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32);
---
>                                 unsigned int unsigned int *nbytes_out_hi32);
73,75c73
<                                 unsigned int *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32);
---
>                                 unsigned int *int *nbytes_out_hi32);
73,75c73
<                                 unsigned int *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32);
---
>                                 unsigned int *nbytes_in_hi32*nbytes_out_hi32);
74,75c74
<                                 unsigned int *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32);
---
>                                 nbytes_out_hi32);
74,75c74
<                                 unsigned int *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32);
---
>                                 unsigned );
74,75c74
<                                 unsigned int *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32);
---
>                                 unsigned int ;
74,77c74
<                                 unsigned int *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
---
>                                 unsigned int *BZFILE *BZ_API (*b)(int *bzerrorlen) {
74,77c74
<                                 unsigned int *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
---
>                                 unsigned int *nbytes_out_lo32*BZ_API (*b)(int *bzerrorlen) {
75,77c75
<                                 unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
---
>                                 BZ_API (*b)(int *bzerrorlen) {
75,77c75
<                                 unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
---
>                                 unsigned (*b)(int *bzerrorlen) {
75,77c75
<                                 unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
---
>                                 unsigned int *b)(int *bzerrorlen) {
75,77c75
<                                 unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
---
>                                 unsigned int *b)(int *bzerrorlen) {
75,77c75
<                                 unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
---
>                                 unsigned int *nbytes_out_hi32)(int *bzerrorlen) {
75,77c75
<                                 unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
---
>                                 unsigned int *nbytes_out_hi32)(int *bzerrorlen) {
77c77
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
---
> int *bzerrorlen) {
77c77
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
---
> BZFILE *bzerrorlen) {
77c77
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
---
> BZFILE *bzerrorlen) {
77c77
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
---
> BZFILE *BZ_API ) {
77c77
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
---
> BZFILE *BZ_API ({
77,79c77
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
< 
<   bzFile *bzf = b;
---
> BZFILE *BZ_API (*bzFile *bzf = b;
77,79c77
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
< 
<   bzFile *bzf = b;
---
> BZFILE *BZ_API (*b*bzf = b;
77,79c77
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
< 
<   bzFile *bzf = b;
---
> BZFILE *BZ_API (*b)bzf = b;
77,79c77
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
< 
<   bzFile *bzf = b;
---
> BZFILE *BZ_API (*b)(= b;
77,79c77
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
< 
<   bzFile *bzf = b;
---
> BZFILE *BZ_API (*b)(int b;
77,79c77
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
< 
<   bzFile *bzf = b;
---
> BZFILE *BZ_API (*b)(int *;
77,81c77
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
< 
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
---
> BZFILE *BZ_API (*b)(int *bzerrorlenBZ_SETERR;
77,81c77
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
< 
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
---
> BZFILE *BZ_API (*b)(int *bzerrorlen) ;
79,82c79
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
< }
---
>   }
79,84c79
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
< }
< 
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
>   bzFile void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
79,84c79
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
< }
< 
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
>   bzFile *BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
79,84c79
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
< }
< 
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
>   bzFile *bzf (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
79,84c79
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
< }
< 
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
>   bzFile *bzf = BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
79,84c79
<   bzFile *bzf = b;
< 
<   BZ_SETERR;
< }
< 
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
>   bzFile *bzf = b)(int *bzerror, BZFILE *b, void **unused,
81,84c81
<   BZ_SETERR;
< }
< 
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
>   (int *bzerror, BZFILE *b, void **unused,
81,84c81
<   BZ_SETERR;
< }
< 
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
>   BZ_SETERRint *bzerror, BZFILE *b, void **unused,
82,84c82
< }
< 
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> *bzerror, BZFILE *b, void **unused,
84c84
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> bzerror, BZFILE *b, void **unused,
84c84
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void , BZFILE *b, void **unused,
84c84
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_APIBZFILE *b, void **unused,
(98.3 %, 3516 bytes)
79,81c79
<   }
< 
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
>   *bzerror, BZFILE *b, void **unused,
81c81
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> bzerror, BZFILE *b, void **unused,
81c81
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void , BZFILE *b, void **unused,
81c81
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_APIBZFILE *b, void **unused,
81c81
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_API(*b, void **unused,
81c81
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_API(BZ2_bzReadGetUnusedb, void **unused,
81c81
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_API(BZ2_bzReadGetUnused), void **unused,
81c81
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_API(BZ2_bzReadGetUnused)(void **unused,
81c81
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_API(BZ2_bzReadGetUnused)(int **unused,
81c81
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_API(BZ2_bzReadGetUnused)(int **unused,
81c81
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerrorunused,
81c81
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, ,
81,82c81
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused);
---
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE int *nUnused);
81,82c81
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused);
---
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE **nUnused);
81,82c81
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused);
---
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *bnUnused);
81,82c81
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused);
---
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, );
81,82c81
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused);
---
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void ;
81,84c81
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused);
< 
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void *int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
81,84c81
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused);
< 
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
81,84c81
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused);
< 
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
82,84c82
<                                  int *nUnused);
< 
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
>                                  BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
82,84c82
<                                  int *nUnused);
< 
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
>                                  int )(char *dest, unsigned int *destLen,
82,84c82
<                                  int *nUnused);
< 
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
>                                  int *(char *dest, unsigned int *destLen,
82,84c82
<                                  int *nUnused);
< 
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
>                                  int *nUnusedchar *dest, unsigned int *destLen,
82,84c82
<                                  int *nUnused);
< 
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
>                                  int *nUnused)*dest, unsigned int *destLen,
84c84
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> dest, unsigned int *destLen,
84c84
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> int , unsigned int *destLen,
84c84
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> int BZ_APIunsigned int *destLen,
84c84
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> int BZ_API(int *destLen,
84c84
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompress*destLen,
84c84
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompress)destLen,
84c84
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompress)(,
84,85c84
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompress)(char char *source, unsigned int sourceLen,
84,85c84
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompress)(char **source, unsigned int sourceLen,
84,85c84
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompress)(char *destsource, unsigned int sourceLen,
84,85c84
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, , unsigned int sourceLen,
84,85c84
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned unsigned int sourceLen,
84,85c84
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int int sourceLen,
84,85c84
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *sourceLen,
85d84
<                                      char *source, unsigned int sourceLen,
85d84
<                                      char *source, unsigned int sourceLen,
85,86c85
<                                      char *source, unsigned int sourceLen,
<                                      int blockSize100k, int verbosity,
---
>                                      char blockSize100k, int verbosity,
85,86c85
<                                      char *source, unsigned int sourceLen,
<                                      int blockSize100k, int verbosity,
---
>                                      char *, int verbosity,
85,86c85
<                                      char *source, unsigned int sourceLen,
<                                      int blockSize100k, int verbosity,
---
>                                      char *sourceint verbosity,
85,86c85
<                                      char *source, unsigned int sourceLen,
<                                      int blockSize100k, int verbosity,
---
>                                      char *source, verbosity,
85,86c85
<                                      char *source, unsigned int sourceLen,
<                                      int blockSize100k, int verbosity,
---
>                                      char *source, unsigned ,
85,87c85
<                                      char *source, unsigned int sourceLen,
<                                      int blockSize100k, int verbosity,
<                                      int workFactor);
---
>                                      char *source, unsigned int int workFactor);
85,87c85
<                                      char *source, unsigned int sourceLen,
<                                      int blockSize100k, int verbosity,
<                                      int workFactor);
---
>                                      char *source, unsigned int sourceLenworkFactor);
86,87c86
<                                      int blockSize100k, int verbosity,
<                                      int workFactor);
---
>                                      );
86,87c86
<                                      int blockSize100k, int verbosity,
<                                      int workFactor);
---
>                                      int ;
86,89c86
<                                      int blockSize100k, int verbosity,
<                                      int workFactor);
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>                                      int blockSize100kint BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
86,89c86
<                                      int blockSize100k, int verbosity,
<                                      int workFactor);
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>                                      int blockSize100k, BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
86,89c86
<                                      int blockSize100k, int verbosity,
<                                      int workFactor);
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>                                      int blockSize100k, int (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
86,89c86
<                                      int blockSize100k, int verbosity,
<                                      int workFactor);
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>                                      int blockSize100k, int verbosityBZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
87,89c87
<                                      int workFactor);
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>                                      )(char *dest, unsigned int *destLen,
87,89c87
<                                      int workFactor);
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>                                      int (char *dest, unsigned int *destLen,
87,89c87
<                                      int workFactor);
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>                                      int workFactorchar *dest, unsigned int *destLen,
87,89c87
<                                      int workFactor);
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>                                      int workFactor)*dest, unsigned int *destLen,
89c89
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> dest, unsigned int *destLen,
89c89
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> int , unsigned int *destLen,
89c89
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> int BZ_APIunsigned int *destLen,
89c89
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> int BZ_API(int *destLen,
89c89
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompress*destLen,
89c89
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompress)destLen,
89c89
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompress)(,
89,90c89
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
<                                        char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompress)(char char *source, unsigned int sourceLen,
89,90c89
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
<                                        char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompress)(char **source, unsigned int sourceLen,
89,90c89
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
<                                        char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompress)(char *destsource, unsigned int sourceLen,
89,90c89
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
<                                        char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, , unsigned int sourceLen,
89,90c89
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
<                                        char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned unsigned int sourceLen,
89,90c89
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
<                                        char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int int sourceLen,
89,90c89
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
<                                        char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *sourceLen,
90d89
<                                        char *source, unsigned int sourceLen,
90d89
<                                        char *source, unsigned int sourceLen,
90,91c90
<                                        char *source, unsigned int sourceLen,
<                                        int small, int verbosity) {
---
>                                        char small, int verbosity) {
90,91c90
<                                        char *source, unsigned int sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *, int verbosity) {
90,91c90
<                                        char *source, unsigned int sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *sourceint verbosity) {
90,91c90
<                                        char *source, unsigned int sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *source, verbosity) {
90,91c90
<                                        char *source, unsigned int sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *source, unsigned ) {
90,91c90
<                                        char *source, unsigned int sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *source, unsigned int {
90,92c90
<                                        char *source, unsigned int sourceLen,
<                                        int small, int verbosity) {
<   int bzerr, nread;
---
>                                        char *source, unsigned int sourceLenint bzerr, nread;
91,92c91
<                                        int small, int verbosity) {
<   int bzerr, nread;
---
>                                        bzerr, nread;
91,92c91
<                                        int small, int verbosity) {
<   int bzerr, nread;
---
>                                        int , nread;
91,92c91
<                                        int small, int verbosity) {
<   int bzerr, nread;
---
>                                        int smallnread;
91,92c91
<                                        int small, int verbosity) {
<   int bzerr, nread;
---
>                                        int small, ;
91,93c91
<                                        int small, int verbosity) {
<   int bzerr, nread;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>                                        int small, int if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
91,93c91
<                                        int small, int verbosity) {
<   int bzerr, nread;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>                                        int small, int verbosity(bzerr == BZ_OK || bzerr == BZ_STREAM_END)
91,93c91
<                                        int small, int verbosity) {
<   int bzerr, nread;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>                                        int small, int verbosity) bzerr == BZ_OK || bzerr == BZ_STREAM_END)
92,93c92
<   int bzerr, nread;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   == BZ_OK || bzerr == BZ_STREAM_END)
92,93c92
<   int bzerr, nread;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   int BZ_OK || bzerr == BZ_STREAM_END)
92,93c92
<   int bzerr, nread;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   int bzerr|| bzerr == BZ_STREAM_END)
92,93c92
<   int bzerr, nread;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   int bzerr, bzerr == BZ_STREAM_END)
92,93c92
<   int bzerr, nread;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   int bzerr, nread== BZ_STREAM_END)
93c93
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   BZ_STREAM_END)
93c93
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   if )
93,94c93
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
---
>   if (;
93,95c93
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
---
>   if (bzerr else
93,96c93
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
<     ;
---
>   if (bzerr == ;
93,97c93
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
<     ;
< }
---
>   if (bzerr == BZ_OK }
93,98c93
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
<     ;
< }
< 
---
>   if (bzerr == BZ_OK || 
\ No newline at end of file
93,98c93
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
<     ;
< }
< 
---
>   if (bzerr == BZ_OK || bzerr 
\ No newline at end of file
93,98c93
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
<     ;
< }
< 
---
>   if (bzerr == BZ_OK || bzerr == 
\ No newline at end of file
93,98c93
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
<     ;
< }
< 
---
>   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END
\ No newline at end of file
94,98c94
<     ;
<   else
<     ;
< }
< 
---
>     
\ No newline at end of file
95,98c95
<   else
<     ;
< }
< 
---
>   
\ No newline at end of file
96,98c96
<     ;
< }
< 
---
>     
\ No newline at end of file
97,98d96
< }
< 
===< pass_clex :: rm-toks-7 >===
3,4c3
< #define BZ_OK 2
< #define BZ_FINISH_OK 3
---
> 3
3,5c3
< #define BZ_OK 2
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
---
> ##define BZ_STREAM_END 4
3,5c3
< #define BZ_OK 2
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
---
> #define define BZ_STREAM_END 4
3,5c3
< #define BZ_OK 2
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
---
> #define BZ_OK BZ_STREAM_END 4
4,5c4
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
---
> 4
4,6c4
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
< typedef struct {
---
> #typedef struct {
4,6c4
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
< typedef struct {
---
> #define struct {
4,6c4
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
< typedef struct {
---
> #define BZ_FINISH_OK {
5,7c5
< #define BZ_STREAM_END 4
< typedef struct {
<   int next_out;
---
> int next_out;
5,7c5
< #define BZ_STREAM_END 4
< typedef struct {
<   int next_out;
---
> #next_out;
5,7c5
< #define BZ_STREAM_END 4
< typedef struct {
<   int next_out;
---
> #define ;
5,8c5
< #define BZ_STREAM_END 4
< typedef struct {
<   int next_out;
<   ;
---
> #define BZ_STREAM_END ;
6,8d5
< typedef struct {
<   int next_out;
<   ;
6,9c6
< typedef struct {
<   int next_out;
<   ;
< } bz_stream;
---
> typedef bz_stream;
6,9c6
< typedef struct {
<   int next_out;
<   ;
< } bz_stream;
---
> typedef struct ;
7,11c7
<   int next_out;
<   ;
< } bz_stream;
< 
< #include <stdio.h>
---
>   #include <stdio.h>
7,11c7
<   int next_out;
<   ;
< } bz_stream;
< 
< #include <stdio.h>
---
>   int include <stdio.h>
7,11c7
<   int next_out;
<   ;
< } bz_stream;
< 
< #include <stdio.h>
---
>   int next_out<stdio.h>
8,11c8
<   ;
< } bz_stream;
< 
< #include <stdio.h>
---
>   stdio.h>
9,11c9
< } bz_stream;
< 
< #include <stdio.h>
---
> .h>
9,11c9
< } bz_stream;
< 
< #include <stdio.h>
---
> } h>
9,11c9
< } bz_stream;
< 
< #include <stdio.h>
---
> } bz_stream>
11,12d10
< #include <stdio.h>
< 
(98.3 %, 3485 bytes)
6,8c6
< typedef bz_stream;
< 
< #include <stdio.h>
---
> typedef h>
6,8c6
< typedef bz_stream;
< 
< #include <stdio.h>
---
> typedef bz_stream>
8,9d7
< #include <stdio.h>
< 
8,9d7
< #include <stdio.h>
< 
8,10c8
< #include <stdio.h>
< 
< #define BZ_API(func) func
---
> #include BZ_API(func) func
8,10c8
< #include <stdio.h>
< 
< #define BZ_API(func) func
---
> #include <(func) func
8,10c8
< #include <stdio.h>
< 
< #define BZ_API(func) func
---
> #include <stdiofunc) func
8,10c8
< #include <stdio.h>
< 
< #define BZ_API(func) func
---
> #include <stdio.) func
8,10c8
< #include <stdio.h>
< 
< #define BZ_API(func) func
---
> #include <stdio.hfunc
10d9
< #define BZ_API(func) func
10d9
< #define BZ_API(func) func
10d9
< #define BZ_API(func) func
10,11c10
< #define BZ_API(func) func
< #define BZ_EXTERN extern
---
> #define BZ_APIextern
10,13c10
< #define BZ_API(func) func
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> #define BZ_API(BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
10,13c10
< #define BZ_API(func) func
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> #define BZ_API(funcint BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
10,13c10
< #define BZ_API(func) func
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> #define BZ_API(func) BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
11,13c11
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
11,13c11
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> #BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
11,13c11
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> #define )(bz_stream *strm, int blockSize100k,
11,13c11
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> #define BZ_EXTERN (bz_stream *strm, int blockSize100k,
13c13
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> bz_stream *strm, int blockSize100k,
13c13
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> BZ_EXTERN *strm, int blockSize100k,
13c13
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> BZ_EXTERN int strm, int blockSize100k,
13c13
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> BZ_EXTERN int BZ_API, int blockSize100k,
13c13
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> BZ_EXTERN int BZ_API(int blockSize100k,
13c13
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInitblockSize100k,
13c13
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit),
13,14c13
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                          int verbosity, int workFactor);
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(int verbosity, int workFactor);
13,14c13
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                          int verbosity, int workFactor);
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream verbosity, int workFactor);
13,14c13
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                          int verbosity, int workFactor);
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *, int workFactor);
13,14c13
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                          int verbosity, int workFactor);
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strmint workFactor);
13,14c13
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                          int verbosity, int workFactor);
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, workFactor);
13,14c13
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                          int verbosity, int workFactor);
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int );
13,14c13
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                          int verbosity, int workFactor);
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k;
14,16c14
<                                          int verbosity, int workFactor);
< 
< typedef void BZFILE;
---
>                                          typedef void BZFILE;
14,16c14
<                                          int verbosity, int workFactor);
< 
< typedef void BZFILE;
---
>                                          int void BZFILE;
14,16c14
<                                          int verbosity, int workFactor);
< 
< typedef void BZFILE;
---
>                                          int verbosityBZFILE;
14,16c14
<                                          int verbosity, int workFactor);
< 
< typedef void BZFILE;
---
>                                          int verbosity, ;
14,18c14
<                                          int verbosity, int workFactor);
< 
< typedef void BZFILE;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>                                          int verbosity, int BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
14,18c14
<                                          int verbosity, int workFactor);
< 
< typedef void BZFILE;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>                                          int verbosity, int workFactorvoid BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
14,18c14
<                                          int verbosity, int workFactor);
< 
< typedef void BZFILE;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
>                                          int verbosity, int workFactor)BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
16,18c16
< typedef void BZFILE;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
16,18c16
< typedef void BZFILE;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> typedef BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
16,18c16
< typedef void BZFILE;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> typedef void )(int *bzerror, BZFILE *b,
16,18c16
< typedef void BZFILE;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> typedef void BZFILE(int *bzerror, BZFILE *b,
18c18
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> int *bzerror, BZFILE *b,
18c18
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> BZ_EXTERN *bzerror, BZFILE *b,
18c18
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> BZ_EXTERN void bzerror, BZFILE *b,
18c18
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> BZ_EXTERN void BZ_API, BZFILE *b,
18c18
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> BZ_EXTERN void BZ_API(BZFILE *b,
18c18
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused*b,
18c18
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)b,
18c18
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(,
18,19c18
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
<                                            void **unused, int *);
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int void **unused, int *);
18,19c18
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
<                                            void **unused, int *);
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int ***unused, int *);
18,19c18
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
<                                            void **unused, int *);
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror*unused, int *);
18,19c18
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
<                                            void **unused, int *);
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, unused, int *);
18,19c18
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
<                                            void **unused, int *);
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE , int *);
18,19c18
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
<                                            void **unused, int *);
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *int *);
18,19c18
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
<                                            void **unused, int *);
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b*);
19c19
<                                            void **unused, int *);
---
>                                            );
19c19
<                                            void **unused, int *);
---
>                                            void ;
19,21c19
<                                            void **unused, int *);
< 
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>                                            void *BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
19,21c19
<                                            void **unused, int *);
< 
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>                                            void **BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
19,21c19
<                                            void **unused, int *);
< 
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>                                            void **unused*BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
19,21c19
<                                            void **unused, int *);
< 
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>                                            void **unused, BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
19,21c19
<                                            void **unused, int *);
< 
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>                                            void **unused, int (BZ2_bzWriteOpen)(int *bzerror, FILE *f,
19,21c19
<                                            void **unused, int *);
< 
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>                                            void **unused, int *BZ2_bzWriteOpen)(int *bzerror, FILE *f,
19,21c19
<                                            void **unused, int *);
< 
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>                                            void **unused, int *))(int *bzerror, FILE *f,
21c21
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> (int *bzerror, FILE *f,
21c21
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN int *bzerror, FILE *f,
21c21
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE *bzerror, FILE *f,
21c21
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE *bzerror, FILE *f,
21c21
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE *BZ_API, FILE *f,
21c21
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE *BZ_API(FILE *f,
21c21
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen*f,
21c21
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)f,
21c21
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(,
21,22c21
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
<                                           int blockSize100k, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int int blockSize100k, int verbosity,
21,22c21
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
<                                           int blockSize100k, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *blockSize100k, int verbosity,
21,22c21
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
<                                           int blockSize100k, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, int verbosity,
21,22c21
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
<                                           int blockSize100k, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, int verbosity,
21,22c21
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
<                                           int blockSize100k, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE verbosity,
21,22c21
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
<                                           int blockSize100k, int verbosity,
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *,
21,23c21
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
<                                           int blockSize100k, int verbosity,
<                                           int workFactor);
---
> BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *fint workFactor);
22,23c22
<                                           int blockSize100k, int verbosity,
<                                           int workFactor);
---
>                                           workFactor);
22,23c22
<                                           int blockSize100k, int verbosity,
<                                           int workFactor);
---
>                                           int );
22,23c22
<                                           int blockSize100k, int verbosity,
<                                           int workFactor);
---
>                                           int blockSize100k;
22,25c22
<                                           int blockSize100k, int verbosity,
<                                           int workFactor);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                           int blockSize100k, BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
22,25c22
<                                           int blockSize100k, int verbosity,
<                                           int workFactor);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                           int blockSize100k, int void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
22,25c22
<                                           int blockSize100k, int verbosity,
<                                           int workFactor);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                           int blockSize100k, int verbosityBZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
23,25c23
<                                           int workFactor);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                           (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
23,25c23
<                                           int workFactor);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                           int BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
23,25c23
<                                           int workFactor);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                           int workFactor)(int *bzerror, BZFILE *b, void *buf, int len);
23,25c23
<                                           int workFactor);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                           int workFactor)(int *bzerror, BZFILE *b, void *buf, int len);
25c25
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> int *bzerror, BZFILE *b, void *buf, int len);
25c25
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN *bzerror, BZFILE *b, void *buf, int len);
25c25
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void bzerror, BZFILE *b, void *buf, int len);
25c25
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_API, BZFILE *b, void *buf, int len);
25c25
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_API(BZFILE *b, void *buf, int len);
25c25
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite*b, void *buf, int len);
25c25
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)b, void *buf, int len);
25c25
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(, void *buf, int len);
25c25
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int void *buf, int len);
25c25
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int **buf, int len);
25c25
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerrorbuf, int len);
25c25
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, , int len);
25c25
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE int len);
25c25
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *len);
25c25
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b);
25c25
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, ;
25,27c25
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
25,27c25
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
25,27c25
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *bufBZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
25,27c25
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
25,27c25
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
25,27c25
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len)(int *bzerror, BZFILE *b, int abandon,
25,27c25
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len)(int *bzerror, BZFILE *b, int abandon,
27c27
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> int *bzerror, BZFILE *b, int abandon,
27c27
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN *bzerror, BZFILE *b, int abandon,
27c27
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void bzerror, BZFILE *b, int abandon,
27c27
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API, BZFILE *b, int abandon,
27c27
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZFILE *b, int abandon,
27c27
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose*b, int abandon,
27c27
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)b, int abandon,
27c27
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(, int abandon,
27c27
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int int abandon,
27c27
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *abandon,
27c27
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror,
27,28c27
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, unsigned int *nbytes_in,
27,28c27
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE int *nbytes_in,
27,28c27
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE **nbytes_in,
27,28c27
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *bnbytes_in,
27,28c27
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, ,
27,29c27
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in,
<                                         unsigned int *nbytes_out);
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int unsigned int *nbytes_out);
27,29c27
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                                         unsigned int *nbytes_in,
<                                         unsigned int *nbytes_out);
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandonint *nbytes_out);
28,29c28
<                                         unsigned int *nbytes_in,
<                                         unsigned int *nbytes_out);
---
>                                         *nbytes_out);
28,29c28
<                                         unsigned int *nbytes_in,
<                                         unsigned int *nbytes_out);
---
>                                         unsigned nbytes_out);
28,29c28
<                                         unsigned int *nbytes_in,
<                                         unsigned int *nbytes_out);
---
>                                         unsigned int );
28,29c28
<                                         unsigned int *nbytes_in,
<                                         unsigned int *nbytes_out);
---
>                                         unsigned int *;
28,31c28
<                                         unsigned int *nbytes_in,
<                                         unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                                         unsigned int *nbytes_inBZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
29,31c29
<                                         unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                                         void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
29,31c29
<                                         unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                                         unsigned BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
29,31c29
<                                         unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                                         unsigned int (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
29,31c29
<                                         unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                                         unsigned int *BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
29,31c29
<                                         unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                                         unsigned int *nbytes_out)(int *bzerror, BZFILE *b, int abandon,
29,31c29
<                                         unsigned int *nbytes_out);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                                         unsigned int *nbytes_out)(int *bzerror, BZFILE *b, int abandon,
31c31
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> int *bzerror, BZFILE *b, int abandon,
31c31
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN *bzerror, BZFILE *b, int abandon,
31c31
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void bzerror, BZFILE *b, int abandon,
31c31
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API, BZFILE *b, int abandon,
31c31
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZFILE *b, int abandon,
31c31
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64*b, int abandon,
31c31
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)b, int abandon,
31c31
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(, int abandon,
31c31
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int int abandon,
31c31
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *abandon,
31c31
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror,
31,32c31
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                           unsigned int *nbytes_in_lo32,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, unsigned int *nbytes_in_lo32,
31,32c31
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                           unsigned int *nbytes_in_lo32,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE int *nbytes_in_lo32,
31,32c31
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                           unsigned int *nbytes_in_lo32,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE **nbytes_in_lo32,
31,32c31
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                           unsigned int *nbytes_in_lo32,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *bnbytes_in_lo32,
31,32c31
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                           unsigned int *nbytes_in_lo32,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, ,
31,33c31
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                           unsigned int *nbytes_in_lo32,
<                                           unsigned int *nbytes_in_hi32,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int unsigned int *nbytes_in_hi32,
31,33c31
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                           unsigned int *nbytes_in_lo32,
<                                           unsigned int *nbytes_in_hi32,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandonint *nbytes_in_hi32,
32,33c32
<                                           unsigned int *nbytes_in_lo32,
<                                           unsigned int *nbytes_in_hi32,
---
>                                           *nbytes_in_hi32,
32,33c32
<                                           unsigned int *nbytes_in_lo32,
<                                           unsigned int *nbytes_in_hi32,
---
>                                           unsigned nbytes_in_hi32,
32,33c32
<                                           unsigned int *nbytes_in_lo32,
<                                           unsigned int *nbytes_in_hi32,
---
>                                           unsigned int ,
32,34c32
<                                           unsigned int *nbytes_in_lo32,
<                                           unsigned int *nbytes_in_hi32,
<                                           unsigned int *nbytes_out_lo32,
---
>                                           unsigned int *unsigned int *nbytes_out_lo32,
32,34c32
<                                           unsigned int *nbytes_in_lo32,
<                                           unsigned int *nbytes_in_hi32,
<                                           unsigned int *nbytes_out_lo32,
---
>                                           unsigned int *nbytes_in_lo32int *nbytes_out_lo32,
33,34c33
<                                           unsigned int *nbytes_in_hi32,
<                                           unsigned int *nbytes_out_lo32,
---
>                                           *nbytes_out_lo32,
33,34c33
<                                           unsigned int *nbytes_in_hi32,
<                                           unsigned int *nbytes_out_lo32,
---
>                                           unsigned nbytes_out_lo32,
33,34c33
<                                           unsigned int *nbytes_in_hi32,
<                                           unsigned int *nbytes_out_lo32,
---
>                                           unsigned int ,
33,35c33
<                                           unsigned int *nbytes_in_hi32,
<                                           unsigned int *nbytes_out_lo32,
<                                           unsigned int *nbytes_out_hi32);
---
>                                           unsigned int *unsigned int *nbytes_out_hi32);
33,35c33
<                                           unsigned int *nbytes_in_hi32,
<                                           unsigned int *nbytes_out_lo32,
<                                           unsigned int *nbytes_out_hi32);
---
>                                           unsigned int *nbytes_in_hi32int *nbytes_out_hi32);
34,35c34
<                                           unsigned int *nbytes_out_lo32,
<                                           unsigned int *nbytes_out_hi32);
---
>                                           *nbytes_out_hi32);
34,35c34
<                                           unsigned int *nbytes_out_lo32,
<                                           unsigned int *nbytes_out_hi32);
---
>                                           unsigned nbytes_out_hi32);
34,35c34
<                                           unsigned int *nbytes_out_lo32,
<                                           unsigned int *nbytes_out_hi32);
---
>                                           unsigned int );
34,35c34
<                                           unsigned int *nbytes_out_lo32,
<                                           unsigned int *nbytes_out_hi32);
---
>                                           unsigned int *;
34,37c34
<                                           unsigned int *nbytes_out_lo32,
<                                           unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
>                                           unsigned int *nbytes_out_lo32BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
35,37c35
<                                           unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
>                                           int BZ_API(BZ2_bzBuffToBuffCompress)(
35,37c35
<                                           unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
>                                           unsigned BZ_API(BZ2_bzBuffToBuffCompress)(
35,37c35
<                                           unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
>                                           unsigned int (BZ2_bzBuffToBuffCompress)(
35,37c35
<                                           unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
>                                           unsigned int *BZ2_bzBuffToBuffCompress)(
35,37c35
<                                           unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
>                                           unsigned int *nbytes_out_hi32)(
35,37c35
<                                           unsigned int *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
>                                           unsigned int *nbytes_out_hi32)(
37,38c37
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
> char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
37,38c37
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
> BZ_EXTERN *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
37,38c37
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
> BZ_EXTERN int dest, unsigned int *destLen, char *source, unsigned int sourceLen,
37,38c37
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
> BZ_EXTERN int BZ_API, unsigned int *destLen, char *source, unsigned int sourceLen,
37,38c37
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
> BZ_EXTERN int BZ_API(unsigned int *destLen, char *source, unsigned int sourceLen,
37,38c37
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompressint *destLen, char *source, unsigned int sourceLen,
37,38c37
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)*destLen, char *source, unsigned int sourceLen,
38c38
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     destLen, char *source, unsigned int sourceLen,
38c38
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char , char *source, unsigned int sourceLen,
38c38
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *char *source, unsigned int sourceLen,
38c38
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *dest*source, unsigned int sourceLen,
38c38
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *dest, source, unsigned int sourceLen,
38c38
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *dest, unsigned , unsigned int sourceLen,
38c38
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *dest, unsigned int unsigned int sourceLen,
38c38
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *dest, unsigned int *int sourceLen,
38c38
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *dest, unsigned int *destLensourceLen,
38c38
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *dest, unsigned int *destLen, ,
38,39c38
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *dest, unsigned int *destLen, char int blockSize100k, int verbosity, int workFactor);
38,39c38
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *dest, unsigned int *destLen, char *blockSize100k, int verbosity, int workFactor);
38,39c38
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *dest, unsigned int *destLen, char *source, int verbosity, int workFactor);
38,39c38
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *dest, unsigned int *destLen, char *source, int verbosity, int workFactor);
38,39c38
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *dest, unsigned int *destLen, char *source, unsigned verbosity, int workFactor);
38,39c38
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *dest, unsigned int *destLen, char *source, unsigned int , int workFactor);
38,39c38
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *dest, unsigned int *destLen, char *source, unsigned int sourceLenint workFactor);
39c39
<     int blockSize100k, int verbosity, int workFactor);
---
>     workFactor);
39c39
<     int blockSize100k, int verbosity, int workFactor);
---
>     int );
39c39
<     int blockSize100k, int verbosity, int workFactor);
---
>     int blockSize100k;
39,41c39
<     int blockSize100k, int verbosity, int workFactor);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>     int blockSize100k, BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
39,41c39
<     int blockSize100k, int verbosity, int workFactor);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>     int blockSize100k, int int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
39,41c39
<     int blockSize100k, int verbosity, int workFactor);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>     int blockSize100k, int verbosityBZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
39,41c39
<     int blockSize100k, int verbosity, int workFactor);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>     int blockSize100k, int verbosity, (BZ2_bzBuffToBuffDecompress)(char *dest,
39,41c39
<     int blockSize100k, int verbosity, int workFactor);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>     int blockSize100k, int verbosity, int BZ2_bzBuffToBuffDecompress)(char *dest,
39,41c39
<     int blockSize100k, int verbosity, int workFactor);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>     int blockSize100k, int verbosity, int workFactor)(char *dest,
39,41c39
<     int blockSize100k, int verbosity, int workFactor);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>     int blockSize100k, int verbosity, int workFactor)(char *dest,
41c41
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
> char *dest,
41c41
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
> BZ_EXTERN *dest,
41c41
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
> BZ_EXTERN int dest,
41c41
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
> BZ_EXTERN int BZ_API,
41,42c41
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
<                                                  unsigned int *destLen,
---
> BZ_EXTERN int BZ_API(unsigned int *destLen,
41,42c41
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
<                                                  unsigned int *destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompressint *destLen,
41,42c41
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
<                                                  unsigned int *destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)*destLen,
41,42c41
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
<                                                  unsigned int *destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(destLen,
41,42c41
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
<                                                  unsigned int *destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char ,
41,43c41
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
<                                                  unsigned int *destLen,
<                                                  char *source,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *char *source,
41,43c41
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
<                                                  unsigned int *destLen,
<                                                  char *source,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest*source,
42,43c42
<                                                  unsigned int *destLen,
<                                                  char *source,
---
>                                                  source,
42,43c42
<                                                  unsigned int *destLen,
<                                                  char *source,
---
>                                                  unsigned ,
42,44c42
<                                                  unsigned int *destLen,
<                                                  char *source,
<                                                  unsigned int sourceLen,
---
>                                                  unsigned int unsigned int sourceLen,
42,44c42
<                                                  unsigned int *destLen,
<                                                  char *source,
<                                                  unsigned int sourceLen,
---
>                                                  unsigned int *int sourceLen,
42,44c42
<                                                  unsigned int *destLen,
<                                                  char *source,
<                                                  unsigned int sourceLen,
---
>                                                  unsigned int *destLensourceLen,
43,44c43
<                                                  char *source,
<                                                  unsigned int sourceLen,
---
>                                                  ,
43,45c43
<                                                  char *source,
<                                                  unsigned int sourceLen,
<                                                  int small, int );
---
>                                                  char int small, int );
43,45c43
<                                                  char *source,
<                                                  unsigned int sourceLen,
<                                                  int small, int );
---
>                                                  char *small, int );
43,45c43
<                                                  char *source,
<                                                  unsigned int sourceLen,
<                                                  int small, int );
---
>                                                  char *source, int );
44,45c44
<                                                  unsigned int sourceLen,
<                                                  int small, int );
---
>                                                  int );
44,45c44
<                                                  unsigned int sourceLen,
<                                                  int small, int );
---
>                                                  unsigned );
44,45c44
<                                                  unsigned int sourceLen,
<                                                  int small, int );
---
>                                                  unsigned int ;
44,47c44
<                                                  unsigned int sourceLen,
<                                                  int small, int );
< 
< Int32;
---
>                                                  unsigned int sourceLenInt32;
45,47c45
<                                                  int small, int );
< 
< Int32;
---
>                                                  ;
45,48c45
<                                                  int small, int );
< 
< Int32;
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>                                                  int (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
45,48c45
<                                                  int small, int );
< 
< Int32;
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>                                                  int smallBZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
45,48c45
<                                                  int small, int );
< 
< Int32;
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>                                                  int small, )(bz_stream *strm, int blockSize100k,
45,48c45
<                                                  int small, int );
< 
< Int32;
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>                                                  int small, int (bz_stream *strm, int blockSize100k,
45,48c45
<                                                  int small, int );
< 
< Int32;
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
>                                                  int small, int )bz_stream *strm, int blockSize100k,
47,48c47
< Int32;
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> *strm, int blockSize100k,
47,48c47
< Int32;
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> Int32strm, int blockSize100k,
48c48
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> , int blockSize100k,
48c48
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> (int blockSize100k,
48c48
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> (BZ2_bzCompressInitblockSize100k,
48c48
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> (BZ2_bzCompressInit),
48,49c48
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                int verbosity, int);
---
> (BZ2_bzCompressInit)(int verbosity, int);
48,49c48
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                int verbosity, int);
---
> (BZ2_bzCompressInit)(bz_stream verbosity, int);
48,49c48
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                int verbosity, int);
---
> (BZ2_bzCompressInit)(bz_stream *, int);
48,49c48
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                int verbosity, int);
---
> (BZ2_bzCompressInit)(bz_stream *strmint);
48,49c48
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                int verbosity, int);
---
> (BZ2_bzCompressInit)(bz_stream *strm, );
48,49c48
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                int verbosity, int);
---
> (BZ2_bzCompressInit)(bz_stream *strm, int ;
48,51c48
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
<                                int verbosity, int);
< 
< int;
---
> (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100kint;
49,51c49
<                                int verbosity, int);
< 
< int;
---
>                                ;
49,53c49
<                                int verbosity, int);
< 
< int;
< 
< #define BZ_SETERR
---
>                                int #define BZ_SETERR
49,53c49
<                                int verbosity, int);
< 
< int;
< 
< #define BZ_SETERR
---
>                                int verbositydefine BZ_SETERR
49,53c49
<                                int verbosity, int);
< 
< int;
< 
< #define BZ_SETERR
---
>                                int verbosity, BZ_SETERR
49,55c49
<                                int verbosity, int);
< 
< int;
< 
< #define BZ_SETERR
< 
< typedef struct {
---
>                                int verbosity, inttypedef struct {
49,55c49
<                                int verbosity, int);
< 
< int;
< 
< #define BZ_SETERR
< 
< typedef struct {
---
>                                int verbosity, int)struct {
51,55c51
< int;
< 
< #define BZ_SETERR
< 
< typedef struct {
---
> {
52,56d51
< 
< #define BZ_SETERR
< 
< typedef struct {
<   ;
53,56d52
< #define BZ_SETERR
< 
< typedef struct {
<   ;
53,57c53
< #define BZ_SETERR
< 
< typedef struct {
<   ;
< } bzFile;
---
> #bzFile;
53,57c53
< #define BZ_SETERR
< 
< typedef struct {
<   ;
< } bzFile;
---
> #define ;
55,58d54
< typedef struct {
<   ;
< } bzFile;
< 
55,59c55
< typedef struct {
<   ;
< } bzFile;
< 
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> typedef *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
55,59c55
< typedef struct {
<   ;
< } bzFile;
< 
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> typedef struct BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
56,59c56
<   ;
< } bzFile;
< 
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
>   (BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
57,59c57
< } bzFile;
< 
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
57,59c57
< } bzFile;
< 
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> } )(int *bzerror, FILE *f, int blockSize100k,
57,59c57
< } bzFile;
< 
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> } bzFile(int *bzerror, FILE *f, int blockSize100k,
(98.3 %, 3453 bytes)
55c55
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> int *bzerror, FILE *f, int blockSize100k,
55c55
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *bzerror, FILE *f, int blockSize100k,
55c55
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *bzerror, FILE *f, int blockSize100k,
55c55
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_API, FILE *f, int blockSize100k,
55c55
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_API(FILE *f, int blockSize100k,
55c55
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_API(BZ2_bzWriteOpen*f, int blockSize100k,
55c55
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)f, int blockSize100k,
55c55
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(, int blockSize100k,
55c55
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int int blockSize100k,
55c55
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int *blockSize100k,
55c55
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror,
55,56c55
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor);
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, int verbosity, int workFactor);
55,56c55
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor);
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE verbosity, int workFactor);
55,56c55
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor);
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *, int workFactor);
55,56c55
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor);
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *fint workFactor);
55,56c55
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor);
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, workFactor);
55,56c55
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor);
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int );
55,56c55
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
<                                 int verbosity, int workFactor);
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k;
56,58c56
<                                 int verbosity, int workFactor);
< 
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                 void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
56,58c56
<                                 int verbosity, int workFactor);
< 
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                 int BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
56,58c56
<                                 int verbosity, int workFactor);
< 
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                 int verbosity(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
56,58c56
<                                 int verbosity, int workFactor);
< 
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                 int verbosity, BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
56,58c56
<                                 int verbosity, int workFactor);
< 
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                 int verbosity, int )(int *bzerror, BZFILE *b, void *buf, int len);
56,58c56
<                                 int verbosity, int workFactor);
< 
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                 int verbosity, int workFactor(int *bzerror, BZFILE *b, void *buf, int len);
56,58c56
<                                 int verbosity, int workFactor);
< 
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                 int verbosity, int workFactor)int *bzerror, BZFILE *b, void *buf, int len);
58c58
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> *bzerror, BZFILE *b, void *buf, int len);
58c58
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void bzerror, BZFILE *b, void *buf, int len);
58c58
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API, BZFILE *b, void *buf, int len);
58c58
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZFILE *b, void *buf, int len);
58c58
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite*b, void *buf, int len);
58c58
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite)b, void *buf, int len);
58c58
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite)(, void *buf, int len);
58c58
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite)(int void *buf, int len);
58c58
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite)(int **buf, int len);
58c58
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite)(int *bzerrorbuf, int len);
58c58
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, , int len);
58c58
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE int len);
58c58
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *len);
58c58
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b);
58c58
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, ;
58,60c58
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
58,60c58
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
58,60c58
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
58,60c58
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
58,60c58
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int )(int *bzerror, BZFILE *b, int abandon,
58,60c58
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len(int *bzerror, BZFILE *b, int abandon,
58,60c58
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
< 
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len)int *bzerror, BZFILE *b, int abandon,
60c60
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> *bzerror, BZFILE *b, int abandon,
60c60
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void bzerror, BZFILE *b, int abandon,
60c60
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API, BZFILE *b, int abandon,
60c60
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZFILE *b, int abandon,
60c60
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose*b, int abandon,
60c60
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose)b, int abandon,
60c60
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose)(, int abandon,
60c60
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose)(int int abandon,
60c60
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose)(int *abandon,
60c60
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose)(int *bzerror,
60,61c60
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
---
> void BZ_API(BZ2_bzWriteClose)(int *bzerror, unsigned int *nbytes_in,
60,61c60
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
---
> void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE int *nbytes_in,
60,61c60
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
---
> void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE **nbytes_in,
60,61c60
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
---
> void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *bnbytes_in,
60,61c60
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
---
> void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, ,
60,62c60
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
<                               unsigned int *nbytes_out);
---
> void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int unsigned int *nbytes_out);
60,62c60
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
<                               unsigned int *nbytes_in,
<                               unsigned int *nbytes_out);
---
> void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandonint *nbytes_out);
61,62c61
<                               unsigned int *nbytes_in,
<                               unsigned int *nbytes_out);
---
>                               *nbytes_out);
61,62c61
<                               unsigned int *nbytes_in,
<                               unsigned int *nbytes_out);
---
>                               unsigned nbytes_out);
61,62c61
<                               unsigned int *nbytes_in,
<                               unsigned int *nbytes_out);
---
>                               unsigned int );
61,62c61
<                               unsigned int *nbytes_in,
<                               unsigned int *nbytes_out);
---
>                               unsigned int *;
61,64c61
<                               unsigned int *nbytes_in,
<                               unsigned int *nbytes_out);
< 
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                               unsigned int *nbytes_invoid BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
62,64c62
<                               unsigned int *nbytes_out);
< 
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                               BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
62,64c62
<                               unsigned int *nbytes_out);
< 
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                               unsigned (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
62,64c62
<                               unsigned int *nbytes_out);
< 
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                               unsigned int BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
62,64c62
<                               unsigned int *nbytes_out);
< 
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                               unsigned int *)(int *bzerror, BZFILE *b, int abandon,
62,64c62
<                               unsigned int *nbytes_out);
< 
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                               unsigned int *nbytes_out(int *bzerror, BZFILE *b, int abandon,
62,64c62
<                               unsigned int *nbytes_out);
< 
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                               unsigned int *nbytes_out)int *bzerror, BZFILE *b, int abandon,
64c64
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> *bzerror, BZFILE *b, int abandon,
64c64
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void bzerror, BZFILE *b, int abandon,
64c64
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API, BZFILE *b, int abandon,
64c64
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZFILE *b, int abandon,
64c64
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose64*b, int abandon,
64c64
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose64)b, int abandon,
64c64
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose64)(, int abandon,
64c64
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose64)(int int abandon,
64c64
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose64)(int *abandon,
64c64
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose64)(int *bzerror,
64,65c64
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
---
> void BZ_API(BZ2_bzWriteClose64)(int *bzerror, unsigned int *nbytes_in_lo32,
64,65c64
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
---
> void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE int *nbytes_in_lo32,
64,65c64
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
---
> void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE **nbytes_in_lo32,
64,65c64
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
---
> void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *bnbytes_in_lo32,
64,65c64
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
---
> void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, ,
64,66c64
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
---
> void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int unsigned int *nbytes_in_hi32,
64,66c64
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                 unsigned int *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
---
> void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandonint *nbytes_in_hi32,
65,66c65
<                                 unsigned int *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
---
>                                 *nbytes_in_hi32,
65,66c65
<                                 unsigned int *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
---
>                                 unsigned nbytes_in_hi32,
65,66c65
<                                 unsigned int *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
---
>                                 unsigned int ,
65,67c65
<                                 unsigned int *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned int *unsigned int *nbytes_out_lo32,
65,67c65
<                                 unsigned int *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned int *nbytes_in_lo32int *nbytes_out_lo32,
66,67c66
<                                 unsigned int *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
---
>                                 *nbytes_out_lo32,
66,67c66
<                                 unsigned int *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned nbytes_out_lo32,
66,67c66
<                                 unsigned int *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned int ,
66,68c66
<                                 unsigned int *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32);
---
>                                 unsigned int *unsigned int *nbytes_out_hi32);
66,68c66
<                                 unsigned int *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32);
---
>                                 unsigned int *nbytes_in_hi32int *nbytes_out_hi32);
67,68c67
<                                 unsigned int *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32);
---
>                                 *nbytes_out_hi32);
67,68c67
<                                 unsigned int *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32);
---
>                                 unsigned nbytes_out_hi32);
67,68c67
<                                 unsigned int *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32);
---
>                                 unsigned int );
67,68c67
<                                 unsigned int *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32);
---
>                                 unsigned int *;
67,70c67
<                                 unsigned int *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
---
>                                 unsigned int *nbytes_out_lo32BZFILE *BZ_API (*b)(int *bzerrorlen) {
68,70c68
<                                 unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
---
>                                 *BZ_API (*b)(int *bzerrorlen) {
68,70c68
<                                 unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
---
>                                 unsigned BZ_API (*b)(int *bzerrorlen) {
68,70c68
<                                 unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
---
>                                 unsigned int (*b)(int *bzerrorlen) {
68,70c68
<                                 unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
---
>                                 unsigned int **b)(int *bzerrorlen) {
68,70c68
<                                 unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
---
>                                 unsigned int *nbytes_out_hi32b)(int *bzerrorlen) {
68,70c68
<                                 unsigned int *nbytes_out_hi32);
< 
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
---
>                                 unsigned int *nbytes_out_hi32))(int *bzerrorlen) {
70c70
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
---
> (int *bzerrorlen) {
70c70
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
---
> BZFILE int *bzerrorlen) {
70c70
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
---
> BZFILE **bzerrorlen) {
70c70
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
---
> BZFILE *BZ_API bzerrorlen) {
70c70
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
---
> BZFILE *BZ_API () {
70c70
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
---
> BZFILE *BZ_API (*{
70,72c70
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
< 
<   }
---
> BZFILE *BZ_API (*b}
70,74c70
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
< 
<   }
< 
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> BZFILE *BZ_API (*b)void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
70,74c70
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
< 
<   }
< 
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> BZFILE *BZ_API (*b)(BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
70,74c70
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
< 
<   }
< 
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> BZFILE *BZ_API (*b)(int (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
70,74c70
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
< 
<   }
< 
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> BZFILE *BZ_API (*b)(int *BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
70,74c70
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
< 
<   }
< 
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> BZFILE *BZ_API (*b)(int *bzerrorlen)(int *bzerror, BZFILE *b, void **unused,
70,74c70
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
< 
<   }
< 
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> BZFILE *BZ_API (*b)(int *bzerrorlen) (int *bzerror, BZFILE *b, void **unused,
72,74c72
<   }
< 
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
>   int *bzerror, BZFILE *b, void **unused,
74c74
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> *bzerror, BZFILE *b, void **unused,
74c74
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void bzerror, BZFILE *b, void **unused,
74c74
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_API, BZFILE *b, void **unused,
74c74
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_API(BZFILE *b, void **unused,
74c74
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_API(BZ2_bzReadGetUnused*b, void **unused,
74c74
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_API(BZ2_bzReadGetUnused)b, void **unused,
74c74
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_API(BZ2_bzReadGetUnused)(, void **unused,
74c74
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_API(BZ2_bzReadGetUnused)(int void **unused,
74c74
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_API(BZ2_bzReadGetUnused)(int ***unused,
74c74
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerror*unused,
74c74
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, unused,
74c74
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE ,
74,75c74
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused);
---
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *int *nUnused);
74,75c74
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused);
---
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b*nUnused);
74,75c74
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused);
---
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, nUnused);
74,75c74
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused);
---
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void );
74,75c74
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused);
---
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void *;
74,77c74
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused);
< 
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
74,77c74
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
<                                  int *nUnused);
< 
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unusedBZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
75,77c75
<                                  int *nUnused);
< 
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
>                                  (BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
75,77c75
<                                  int *nUnused);
< 
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
>                                  int BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
75,77c75
<                                  int *nUnused);
< 
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
>                                  int *)(char *dest, unsigned int *destLen,
75,77c75
<                                  int *nUnused);
< 
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
>                                  int *nUnused(char *dest, unsigned int *destLen,
75,77c75
<                                  int *nUnused);
< 
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
>                                  int *nUnused)char *dest, unsigned int *destLen,
77c77
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> *dest, unsigned int *destLen,
77c77
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> int dest, unsigned int *destLen,
77c77
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> int BZ_API, unsigned int *destLen,
77c77
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> int BZ_API(unsigned int *destLen,
77c77
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompressint *destLen,
77c77
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompress)*destLen,
77c77
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompress)(destLen,
77c77
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompress)(char ,
77,78c77
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompress)(char *char *source, unsigned int sourceLen,
77,78c77
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest*source, unsigned int sourceLen,
77,78c77
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, source, unsigned int sourceLen,
77,78c77
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned , unsigned int sourceLen,
77,78c77
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int unsigned int sourceLen,
77,78c77
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *int sourceLen,
77,78c77
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
<                                      char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLensourceLen,
78c78
<                                      char *source, unsigned int sourceLen,
---
>                                      ,
78,79c78
<                                      char *source, unsigned int sourceLen,
<                                      int blockSize100k, int verbosity,
---
>                                      char int blockSize100k, int verbosity,
78,79c78
<                                      char *source, unsigned int sourceLen,
<                                      int blockSize100k, int verbosity,
---
>                                      char *blockSize100k, int verbosity,
78,79c78
<                                      char *source, unsigned int sourceLen,
<                                      int blockSize100k, int verbosity,
---
>                                      char *source, int verbosity,
78,79c78
<                                      char *source, unsigned int sourceLen,
<                                      int blockSize100k, int verbosity,
---
>                                      char *source, int verbosity,
78,79c78
<                                      char *source, unsigned int sourceLen,
<                                      int blockSize100k, int verbosity,
---
>                                      char *source, unsigned verbosity,
78,79c78
<                                      char *source, unsigned int sourceLen,
<                                      int blockSize100k, int verbosity,
---
>                                      char *source, unsigned int ,
78,80c78
<                                      char *source, unsigned int sourceLen,
<                                      int blockSize100k, int verbosity,
<                                      int workFactor);
---
>                                      char *source, unsigned int sourceLenint workFactor);
79,80c79
<                                      int blockSize100k, int verbosity,
<                                      int workFactor);
---
>                                      workFactor);
79,80c79
<                                      int blockSize100k, int verbosity,
<                                      int workFactor);
---
>                                      int );
79,80c79
<                                      int blockSize100k, int verbosity,
<                                      int workFactor);
---
>                                      int blockSize100k;
79,82c79
<                                      int blockSize100k, int verbosity,
<                                      int workFactor);
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>                                      int blockSize100k, int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
79,82c79
<                                      int blockSize100k, int verbosity,
<                                      int workFactor);
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>                                      int blockSize100k, int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
79,82c79
<                                      int blockSize100k, int verbosity,
<                                      int workFactor);
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>                                      int blockSize100k, int verbosity(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
80,82c80
<                                      int workFactor);
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>                                      BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
80,82c80
<                                      int workFactor);
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>                                      int )(char *dest, unsigned int *destLen,
80,82c80
<                                      int workFactor);
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>                                      int workFactor(char *dest, unsigned int *destLen,
80,82c80
<                                      int workFactor);
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>                                      int workFactor)char *dest, unsigned int *destLen,
82c82
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> *dest, unsigned int *destLen,
82c82
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> int dest, unsigned int *destLen,
82c82
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> int BZ_API, unsigned int *destLen,
82c82
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> int BZ_API(unsigned int *destLen,
82c82
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompressint *destLen,
82c82
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompress)*destLen,
82c82
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompress)(destLen,
82c82
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompress)(char ,
82,83c82
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
<                                        char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompress)(char *char *source, unsigned int sourceLen,
82,83c82
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
<                                        char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest*source, unsigned int sourceLen,
82,83c82
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
<                                        char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, source, unsigned int sourceLen,
82,83c82
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
<                                        char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned , unsigned int sourceLen,
82,83c82
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
<                                        char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int unsigned int sourceLen,
82,83c82
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
<                                        char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *int sourceLen,
82,83c82
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
<                                        char *source, unsigned int sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLensourceLen,
83c83
<                                        char *source, unsigned int sourceLen,
---
>                                        ,
83,84c83
<                                        char *source, unsigned int sourceLen,
<                                        int small, int verbosity) {
---
>                                        char int small, int verbosity) {
83,84c83
<                                        char *source, unsigned int sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *small, int verbosity) {
83,84c83
<                                        char *source, unsigned int sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *source, int verbosity) {
83,84c83
<                                        char *source, unsigned int sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *source, int verbosity) {
83,84c83
<                                        char *source, unsigned int sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *source, unsigned verbosity) {
83,84c83
<                                        char *source, unsigned int sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *source, unsigned int ) {
83,84c83
<                                        char *source, unsigned int sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *source, unsigned int sourceLen{
84,85c84
<                                        int small, int verbosity) {
<   int bzerr, nread;
---
>                                        int bzerr, nread;
84,85c84
<                                        int small, int verbosity) {
<   int bzerr, nread;
---
>                                        int bzerr, nread;
84,85c84
<                                        int small, int verbosity) {
<   int bzerr, nread;
---
>                                        int small, nread;
84,85c84
<                                        int small, int verbosity) {
<   int bzerr, nread;
---
>                                        int small, nread;
84,85c84
<                                        int small, int verbosity) {
<   int bzerr, nread;
---
>                                        int small, int ;
84,86c84
<                                        int small, int verbosity) {
<   int bzerr, nread;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>                                        int small, int verbosityif (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
84,86c84
<                                        int small, int verbosity) {
<   int bzerr, nread;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>                                        int small, int verbosity) (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
85,86c85
<   int bzerr, nread;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   bzerr == BZ_OK || bzerr == BZ_STREAM_END)
85,86c85
<   int bzerr, nread;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   int == BZ_OK || bzerr == BZ_STREAM_END)
85,86c85
<   int bzerr, nread;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   int bzerrBZ_OK || bzerr == BZ_STREAM_END)
85,86c85
<   int bzerr, nread;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   int bzerr, || bzerr == BZ_STREAM_END)
85,86c85
<   int bzerr, nread;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   int bzerr, nreadbzerr == BZ_STREAM_END)
86c86
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   == BZ_STREAM_END)
86c86
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   if BZ_STREAM_END)
86c86
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   if ()
86,87c86
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
---
>   if (bzerr ;
86,88c86
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
---
>   if (bzerr == else
86,89c86
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
<     ;
---
>   if (bzerr == BZ_OK ;
86,90c86
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
<     ;
< }
---
>   if (bzerr == BZ_OK || }
86,91c86
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
<     ;
< }
< 
---
>   if (bzerr == BZ_OK || bzerr 
\ No newline at end of file
86,91c86
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
<     ;
< }
< 
---
>   if (bzerr == BZ_OK || bzerr == 
\ No newline at end of file
86,91c86
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
<   else
<     ;
< }
< 
---
>   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END
\ No newline at end of file
87,91c87
<     ;
<   else
<     ;
< }
< 
---
>     
\ No newline at end of file
88,91c88
<   else
<     ;
< }
< 
---
>   
\ No newline at end of file
89,91c89
<     ;
< }
< 
---
>     
\ No newline at end of file
90,91d89
< }
< 
===< pass_clex :: rm-toks-1 >===
3c3
< #define BZ_OK 2
---
> define BZ_OK 2
3c3
< #define BZ_OK 2
---
> #BZ_OK 2
3c3
< #define BZ_OK 2
---
> #define 2
3,4c3
< #define BZ_OK 2
< #define BZ_FINISH_OK 3
---
> #define BZ_OK #define BZ_FINISH_OK 3
4c4
< #define BZ_FINISH_OK 3
---
> define BZ_FINISH_OK 3
4c4
< #define BZ_FINISH_OK 3
---
> #BZ_FINISH_OK 3
4c4
< #define BZ_FINISH_OK 3
---
> #define 3
4,5c4
< #define BZ_FINISH_OK 3
< #define BZ_STREAM_END 4
---
> #define BZ_FINISH_OK #define BZ_STREAM_END 4
5c5
< #define BZ_STREAM_END 4
---
> define BZ_STREAM_END 4
5c5
< #define BZ_STREAM_END 4
---
> #BZ_STREAM_END 4
5c5
< #define BZ_STREAM_END 4
---
> #define 4
5,6c5
< #define BZ_STREAM_END 4
< typedef bz_stream;
---
> #define BZ_STREAM_END typedef bz_stream;
6c6
< typedef bz_stream;
---
> bz_stream;
6c6
< typedef bz_stream;
---
> typedef ;
6,8c6
< typedef bz_stream;
< 
< #include <stdio.h>
---
> typedef bz_stream#include <stdio.h>
8c8
< #include <stdio.h>
---
> include <stdio.h>
8c8
< #include <stdio.h>
---
> #<stdio.h>
8c8
< #include <stdio.h>
---
> #include stdio.h>
8c8
< #include <stdio.h>
---
> #include <.h>
8c8
< #include <stdio.h>
---
> #include <stdioh>
8c8
< #include <stdio.h>
---
> #include <stdio.>
8,10c8
< #include <stdio.h>
< 
< #define BZ_API(func) func
---
> #include <stdio.h#define BZ_API(func) func
10c10
< #define BZ_API(func) func
---
> define BZ_API(func) func
10c10
< #define BZ_API(func) func
---
> #BZ_API(func) func
10c10
< #define BZ_API(func) func
---
> #define (func) func
10c10
< #define BZ_API(func) func
---
> #define BZ_APIfunc) func
10c10
< #define BZ_API(func) func
---
> #define BZ_API() func
10c10
< #define BZ_API(func) func
---
> #define BZ_API(funcfunc
10,11c10
< #define BZ_API(func) func
< #define BZ_EXTERN extern
---
> #define BZ_API(func) #define BZ_EXTERN extern
11c11
< #define BZ_EXTERN extern
---
> define BZ_EXTERN extern
11c11
< #define BZ_EXTERN extern
---
> #BZ_EXTERN extern
11c11
< #define BZ_EXTERN extern
---
> #define extern
11,13c11
< #define BZ_EXTERN extern
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> #define BZ_EXTERN BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
13c13
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
13c13
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> BZ_EXTERN BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
(98.3 %, 3443 bytes)
13c13
< int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
13c13
< int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> int (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
13c13
< int BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> int BZ_APIBZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
(98.3 %, 3439 bytes)
13c13
< BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
13c13
< BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> BZ_APIBZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
13c13
< BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> BZ_API()(bz_stream *strm, int blockSize100k,
13c13
< BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> BZ_API(BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
13c13
< BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> BZ_API(BZ2_bzCompressInit)bz_stream *strm, int blockSize100k,
13c13
< BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> BZ_API(BZ2_bzCompressInit)(*strm, int blockSize100k,
13c13
< BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> BZ_API(BZ2_bzCompressInit)(bz_stream strm, int blockSize100k,
13c13
< BZ_API(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> BZ_API(BZ2_bzCompressInit)(bz_stream *, int blockSize100k,
(98.3 %, 3433 bytes)
13c13
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
13c13
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> ()(bz_stream *strm, int blockSize100k,
13c13
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> (BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
13c13
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> (BZ2_bzCompressInit)bz_stream *strm, int blockSize100k,
13c13
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> (BZ2_bzCompressInit)(*strm, int blockSize100k,
13c13
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> (BZ2_bzCompressInit)(bz_stream strm, int blockSize100k,
13c13
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> (BZ2_bzCompressInit)(bz_stream *, int blockSize100k,
13c13
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> (BZ2_bzCompressInit)(bz_stream *strmint blockSize100k,
13c13
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> (BZ2_bzCompressInit)(bz_stream *strm, blockSize100k,
13c13
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> (BZ2_bzCompressInit)(bz_stream *strm, int ,
(98.3 %, 3429 bytes)
13c13
< (BZ2_bzCompressInit)(bz_stream *, int blockSize100k,
---
> (BZ2_bzCompressInit)(bz_stream *int blockSize100k,
13c13
< (BZ2_bzCompressInit)(bz_stream *, int blockSize100k,
---
> (BZ2_bzCompressInit)(bz_stream *, blockSize100k,
13c13
< (BZ2_bzCompressInit)(bz_stream *, int blockSize100k,
---
> (BZ2_bzCompressInit)(bz_stream *, int ,
13,14c13
< (BZ2_bzCompressInit)(bz_stream *, int blockSize100k,
<                                          int verbosity, int workFactor);
---
> (BZ2_bzCompressInit)(bz_stream *, int blockSize100kint verbosity, int workFactor);
14c14
<                                          int verbosity, int workFactor);
---
>                                          verbosity, int workFactor);
14c14
<                                          int verbosity, int workFactor);
---
>                                          int , int workFactor);
(98.3 %, 3416 bytes)
13,14c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
<                                          int verbosity, int workFactor);
---
> (BZ2_bzCompressInit)(bz_stream *, int int verbosity, int workFactor);
14c14
<                                          int verbosity, int workFactor);
---
>                                          verbosity, int workFactor);
14c14
<                                          int verbosity, int workFactor);
---
>                                          int , int workFactor);
14c14
<                                          int verbosity, int workFactor);
---
>                                          int verbosityint workFactor);
14c14
<                                          int verbosity, int workFactor);
---
>                                          int verbosity, workFactor);
14c14
<                                          int verbosity, int workFactor);
---
>                                          int verbosity, int );
(98.3 %, 3407 bytes)
14c14
<                                          int , int workFactor);
---
>                                          int int workFactor);
14c14
<                                          int , int workFactor);
---
>                                          int , workFactor);
14c14
<                                          int , int workFactor);
---
>                                          int , int );
14c14
<                                          int , int workFactor);
---
>                                          int , int workFactor;
14,16c14
<                                          int , int workFactor);
< 
< typedef void BZFILE;
---
>                                          int , int workFactor)typedef void BZFILE;
16c16
< typedef void BZFILE;
---
> void BZFILE;
16c16
< typedef void BZFILE;
---
> typedef BZFILE;
(98.3 %, 3397 bytes)
14c14
<                                          int , int );
---
>                                          int , int ;
14,16c14
<                                          int , int );
< 
< typedef void BZFILE;
---
>                                          int , int )typedef void BZFILE;
16c16
< typedef void BZFILE;
---
> void BZFILE;
16c16
< typedef void BZFILE;
---
> typedef BZFILE;
16c16
< typedef void BZFILE;
---
> typedef void ;
16,18c16
< typedef void BZFILE;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> typedef void BZFILEBZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
18c18
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
(98.3 %, 3392 bytes)
16c16
< typedef BZFILE;
---
> typedef ;
16,18c16
< typedef BZFILE;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> typedef BZFILEBZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
18c18
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
18c18
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> BZ_EXTERN BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
18c18
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> BZ_EXTERN void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
(98.3 %, 3382 bytes)
18c18
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
18c18
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
18c18
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> void BZ_APIBZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
18c18
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> void BZ_API()(int *bzerror, BZFILE *b,
18c18
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> void BZ_API(BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
18c18
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> void BZ_API(BZ2_bzReadGetUnused)int *bzerror, BZFILE *b,
18c18
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> void BZ_API(BZ2_bzReadGetUnused)(*bzerror, BZFILE *b,
18c18
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> void BZ_API(BZ2_bzReadGetUnused)(int bzerror, BZFILE *b,
18c18
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> void BZ_API(BZ2_bzReadGetUnused)(int *, BZFILE *b,
(98.4 %, 3376 bytes)
18c18
< void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> void BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
18c18
< void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> void ()(int *bzerror, BZFILE *b,
18c18
< void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> void (BZ2_bzReadGetUnused(int *bzerror, BZFILE *b,
18c18
< void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> void (BZ2_bzReadGetUnused)int *bzerror, BZFILE *b,
18c18
< void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> void (BZ2_bzReadGetUnused)(*bzerror, BZFILE *b,
18c18
< void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> void (BZ2_bzReadGetUnused)(int bzerror, BZFILE *b,
18c18
< void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> void (BZ2_bzReadGetUnused)(int *, BZFILE *b,
18c18
< void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> void (BZ2_bzReadGetUnused)(int *bzerrorBZFILE *b,
18c18
< void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> void (BZ2_bzReadGetUnused)(int *bzerror, *b,
18c18
< void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE b,
18c18
< void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b,
---
> void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *,
(98.4 %, 3369 bytes)
18c18
< void (BZ2_bzReadGetUnused)(int *, BZFILE *b,
---
> void (BZ2_bzReadGetUnused)(int *BZFILE *b,
18c18
< void (BZ2_bzReadGetUnused)(int *, BZFILE *b,
---
> void (BZ2_bzReadGetUnused)(int *, *b,
18c18
< void (BZ2_bzReadGetUnused)(int *, BZFILE *b,
---
> void (BZ2_bzReadGetUnused)(int *, BZFILE b,
18c18
< void (BZ2_bzReadGetUnused)(int *, BZFILE *b,
---
> void (BZ2_bzReadGetUnused)(int *, BZFILE *,
18,19c18
< void (BZ2_bzReadGetUnused)(int *, BZFILE *b,
<                                            void **unused, int *);
---
> void (BZ2_bzReadGetUnused)(int *, BZFILE *bvoid **unused, int *);
19c19
<                                            void **unused, int *);
---
>                                            **unused, int *);
19c19
<                                            void **unused, int *);
---
>                                            void *unused, int *);
19c19
<                                            void **unused, int *);
---
>                                            void *unused, int *);
19c19
<                                            void **unused, int *);
---
>                                            void **, int *);
(98.4 %, 3368 bytes)
18,19c18
< void (BZ2_bzReadGetUnused)(int *, BZFILE *,
<                                            void **unused, int *);
---
> void (BZ2_bzReadGetUnused)(int *, BZFILE *void **unused, int *);
19c19
<                                            void **unused, int *);
---
>                                            **unused, int *);
19c19
<                                            void **unused, int *);
---
>                                            void *unused, int *);
19c19
<                                            void **unused, int *);
---
>                                            void *unused, int *);
19c19
<                                            void **unused, int *);
---
>                                            void **, int *);
19c19
<                                            void **unused, int *);
---
>                                            void **unusedint *);
19c19
<                                            void **unused, int *);
---
>                                            void **unused, *);
19c19
<                                            void **unused, int *);
---
>                                            void **unused, int );
19c19
<                                            void **unused, int *);
---
>                                            void **unused, int *;
19,21c19
<                                            void **unused, int *);
< 
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>                                            void **unused, int *)BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
21c21
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
(98.4 %, 3362 bytes)
19c19
<                                            void **, int *);
---
>                                            void **int *);
19c19
<                                            void **, int *);
---
>                                            void **, *);
19c19
<                                            void **, int *);
---
>                                            void **, int );
19c19
<                                            void **, int *);
---
>                                            void **, int *;
19,21c19
<                                            void **, int *);
< 
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
>                                            void **, int *)BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
21c21
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
21c21
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
21c21
< BZ_EXTERN BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
(98.4 %, 3352 bytes)
21c21
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
21c21
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZFILE BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
21c21
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZFILE *(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
(98.4 %, 3345 bytes)
21c21
< *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
21c21
< *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> *(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
21c21
< *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> *BZ_APIBZ2_bzWriteOpen)(int *bzerror, FILE *f,
21c21
< *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> *BZ_API()(int *bzerror, FILE *f,
21c21
< *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> *BZ_API(BZ2_bzWriteOpen(int *bzerror, FILE *f,
21c21
< *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> *BZ_API(BZ2_bzWriteOpen)int *bzerror, FILE *f,
21c21
< *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> *BZ_API(BZ2_bzWriteOpen)(*bzerror, FILE *f,
21c21
< *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> *BZ_API(BZ2_bzWriteOpen)(int bzerror, FILE *f,
(98.4 %, 3339 bytes)
21c21
< *(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> *BZ2_bzWriteOpen)(int *bzerror, FILE *f,
21c21
< *(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> *()(int *bzerror, FILE *f,
21c21
< *(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> *(BZ2_bzWriteOpen(int *bzerror, FILE *f,
21c21
< *(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> *(BZ2_bzWriteOpen)int *bzerror, FILE *f,
21c21
< *(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> *(BZ2_bzWriteOpen)(*bzerror, FILE *f,
21c21
< *(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> *(BZ2_bzWriteOpen)(int bzerror, FILE *f,
21c21
< *(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> *(BZ2_bzWriteOpen)(int *, FILE *f,
21c21
< *(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> *(BZ2_bzWriteOpen)(int *bzerrorFILE *f,
21c21
< *(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> *(BZ2_bzWriteOpen)(int *bzerror, *f,
21c21
< *(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> *(BZ2_bzWriteOpen)(int *bzerror, FILE f,
21c21
< *(BZ2_bzWriteOpen)(int *bzerror, FILE *f,
---
> *(BZ2_bzWriteOpen)(int *bzerror, FILE *,
(98.4 %, 3332 bytes)
21c21
< *(BZ2_bzWriteOpen)(int *, FILE *f,
---
> *(BZ2_bzWriteOpen)(int *FILE *f,
21c21
< *(BZ2_bzWriteOpen)(int *, FILE *f,
---
> *(BZ2_bzWriteOpen)(int *, *f,
21c21
< *(BZ2_bzWriteOpen)(int *, FILE *f,
---
> *(BZ2_bzWriteOpen)(int *, FILE f,
21c21
< *(BZ2_bzWriteOpen)(int *, FILE *f,
---
> *(BZ2_bzWriteOpen)(int *, FILE *,
21,22c21
< *(BZ2_bzWriteOpen)(int *, FILE *f,
<                                           int blockSize100k, int verbosity,
---
> *(BZ2_bzWriteOpen)(int *, FILE *fint blockSize100k, int verbosity,
22c22
<                                           int blockSize100k, int verbosity,
---
>                                           blockSize100k, int verbosity,
22c22
<                                           int blockSize100k, int verbosity,
---
>                                           int , int verbosity,
(98.4 %, 3331 bytes)
21,22c21
< *(BZ2_bzWriteOpen)(int *, FILE *,
<                                           int blockSize100k, int verbosity,
---
> *(BZ2_bzWriteOpen)(int *, FILE *int blockSize100k, int verbosity,
22c22
<                                           int blockSize100k, int verbosity,
---
>                                           blockSize100k, int verbosity,
22c22
<                                           int blockSize100k, int verbosity,
---
>                                           int , int verbosity,
22c22
<                                           int blockSize100k, int verbosity,
---
>                                           int blockSize100kint verbosity,
22c22
<                                           int blockSize100k, int verbosity,
---
>                                           int blockSize100k, verbosity,
22c22
<                                           int blockSize100k, int verbosity,
---
>                                           int blockSize100k, int ,
(98.4 %, 3318 bytes)
22c22
<                                           int , int verbosity,
---
>                                           int int verbosity,
22c22
<                                           int , int verbosity,
---
>                                           int , verbosity,
22c22
<                                           int , int verbosity,
---
>                                           int , int ,
22,23c22
<                                           int , int verbosity,
<                                           int workFactor);
---
>                                           int , int verbosityint workFactor);
23c23
<                                           int workFactor);
---
>                                           workFactor);
23c23
<                                           int workFactor);
---
>                                           int );
(98.4 %, 3309 bytes)
22,23c22
<                                           int , int ,
<                                           int workFactor);
---
>                                           int , int int workFactor);
23c23
<                                           int workFactor);
---
>                                           workFactor);
23c23
<                                           int workFactor);
---
>                                           int );
23c23
<                                           int workFactor);
---
>                                           int workFactor;
23,25c23
<                                           int workFactor);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                           int workFactor)BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
25c25
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
(98.4 %, 3299 bytes)
23c23
<                                           int );
---
>                                           int ;
23,25c23
<                                           int );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                           int )BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
25c25
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
25c25
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
25c25
< BZ_EXTERN void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_EXTERN void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
(98.4 %, 3289 bytes)
25c25
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
25c25
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
25c25
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
25c25
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API()(int *bzerror, BZFILE *b, void *buf, int len);
25c25
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
25c25
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite)int *bzerror, BZFILE *b, void *buf, int len);
25c25
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite)(*bzerror, BZFILE *b, void *buf, int len);
25c25
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite)(int bzerror, BZFILE *b, void *buf, int len);
25c25
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite)(int *, BZFILE *b, void *buf, int len);
(98.4 %, 3283 bytes)
25c25
< void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
25c25
< void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void ()(int *bzerror, BZFILE *b, void *buf, int len);
25c25
< void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void (BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
25c25
< void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void (BZ2_bzWrite)int *bzerror, BZFILE *b, void *buf, int len);
25c25
< void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void (BZ2_bzWrite)(*bzerror, BZFILE *b, void *buf, int len);
25c25
< void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void (BZ2_bzWrite)(int bzerror, BZFILE *b, void *buf, int len);
25c25
< void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void (BZ2_bzWrite)(int *, BZFILE *b, void *buf, int len);
25c25
< void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void (BZ2_bzWrite)(int *bzerrorBZFILE *b, void *buf, int len);
25c25
< void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void (BZ2_bzWrite)(int *bzerror, *b, void *buf, int len);
25c25
< void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void (BZ2_bzWrite)(int *bzerror, BZFILE b, void *buf, int len);
25c25
< void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void (BZ2_bzWrite)(int *bzerror, BZFILE *, void *buf, int len);
(98.4 %, 3276 bytes)
25c25
< void (BZ2_bzWrite)(int *, BZFILE *b, void *buf, int len);
---
> void (BZ2_bzWrite)(int *BZFILE *b, void *buf, int len);
25c25
< void (BZ2_bzWrite)(int *, BZFILE *b, void *buf, int len);
---
> void (BZ2_bzWrite)(int *, *b, void *buf, int len);
25c25
< void (BZ2_bzWrite)(int *, BZFILE *b, void *buf, int len);
---
> void (BZ2_bzWrite)(int *, BZFILE b, void *buf, int len);
25c25
< void (BZ2_bzWrite)(int *, BZFILE *b, void *buf, int len);
---
> void (BZ2_bzWrite)(int *, BZFILE *, void *buf, int len);
25c25
< void (BZ2_bzWrite)(int *, BZFILE *b, void *buf, int len);
---
> void (BZ2_bzWrite)(int *, BZFILE *bvoid *buf, int len);
25c25
< void (BZ2_bzWrite)(int *, BZFILE *b, void *buf, int len);
---
> void (BZ2_bzWrite)(int *, BZFILE *b, *buf, int len);
25c25
< void (BZ2_bzWrite)(int *, BZFILE *b, void *buf, int len);
---
> void (BZ2_bzWrite)(int *, BZFILE *b, void buf, int len);
25c25
< void (BZ2_bzWrite)(int *, BZFILE *b, void *buf, int len);
---
> void (BZ2_bzWrite)(int *, BZFILE *b, void *, int len);
(98.4 %, 3275 bytes)
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *buf, int len);
---
> void (BZ2_bzWrite)(int *, BZFILE *void *buf, int len);
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *buf, int len);
---
> void (BZ2_bzWrite)(int *, BZFILE *, *buf, int len);
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *buf, int len);
---
> void (BZ2_bzWrite)(int *, BZFILE *, void buf, int len);
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *buf, int len);
---
> void (BZ2_bzWrite)(int *, BZFILE *, void *, int len);
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *buf, int len);
---
> void (BZ2_bzWrite)(int *, BZFILE *, void *bufint len);
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *buf, int len);
---
> void (BZ2_bzWrite)(int *, BZFILE *, void *buf, len);
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *buf, int len);
---
> void (BZ2_bzWrite)(int *, BZFILE *, void *buf, int );
(98.4 %, 3272 bytes)
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int len);
---
> void (BZ2_bzWrite)(int *, BZFILE *, void *int len);
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int len);
---
> void (BZ2_bzWrite)(int *, BZFILE *, void *, len);
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int len);
---
> void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int len);
---
> void (BZ2_bzWrite)(int *, BZFILE *, void *, int len;
25,27c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int len);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWrite)(int *, BZFILE *, void *, int len)BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
27c27
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
(98.4 %, 3269 bytes)
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
> void (BZ2_bzWrite)(int *, BZFILE *, void *, int ;
25,27c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWrite)(int *, BZFILE *, void *, int )BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
27c27
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
27c27
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
27c27
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
(98.4 %, 3259 bytes)
27c27
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
27c27
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
27c27
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
27c27
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API()(int *bzerror, BZFILE *b, int abandon,
27c27
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
27c27
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose)int *bzerror, BZFILE *b, int abandon,
27c27
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose)(*bzerror, BZFILE *b, int abandon,
27c27
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose)(int bzerror, BZFILE *b, int abandon,
27c27
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose)(int *, BZFILE *b, int abandon,
(98.4 %, 3253 bytes)
27c27
< void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
27c27
< void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void ()(int *bzerror, BZFILE *b, int abandon,
27c27
< void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
27c27
< void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose)int *bzerror, BZFILE *b, int abandon,
27c27
< void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose)(*bzerror, BZFILE *b, int abandon,
27c27
< void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose)(int bzerror, BZFILE *b, int abandon,
27c27
< void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose)(int *, BZFILE *b, int abandon,
27c27
< void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose)(int *bzerrorBZFILE *b, int abandon,
27c27
< void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose)(int *bzerror, *b, int abandon,
27c27
< void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose)(int *bzerror, BZFILE b, int abandon,
27c27
< void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose)(int *bzerror, BZFILE *, int abandon,
(98.4 %, 3246 bytes)
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose)(int *BZFILE *b, int abandon,
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose)(int *, *b, int abandon,
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose)(int *, BZFILE b, int abandon,
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose)(int *, BZFILE *, int abandon,
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose)(int *, BZFILE *bint abandon,
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose)(int *, BZFILE *b, abandon,
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose)(int *, BZFILE *b, int ,
(98.4 %, 3245 bytes)
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *, int abandon,
---
> void (BZ2_bzWriteClose)(int *, BZFILE *int abandon,
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *, int abandon,
---
> void (BZ2_bzWriteClose)(int *, BZFILE *, abandon,
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *, int abandon,
---
> void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
27,28c27
< void (BZ2_bzWriteClose)(int *, BZFILE *, int abandon,
<                                         unsigned int *nbytes_in,
---
> void (BZ2_bzWriteClose)(int *, BZFILE *, int abandonunsigned int *nbytes_in,
28c28
<                                         unsigned int *nbytes_in,
---
>                                         int *nbytes_in,
28c28
<                                         unsigned int *nbytes_in,
---
>                                         unsigned *nbytes_in,
(98.4 %, 3238 bytes)
27,28c27
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
<                                         unsigned int *nbytes_in,
---
> void (BZ2_bzWriteClose)(int *, BZFILE *, int unsigned int *nbytes_in,
28c28
<                                         unsigned int *nbytes_in,
---
>                                         int *nbytes_in,
28c28
<                                         unsigned int *nbytes_in,
---
>                                         unsigned *nbytes_in,
28c28
<                                         unsigned int *nbytes_in,
---
>                                         unsigned int nbytes_in,
28c28
<                                         unsigned int *nbytes_in,
---
>                                         unsigned int *,
(98.4 %, 3234 bytes)
28c28
<                                         unsigned *nbytes_in,
---
>                                         unsigned nbytes_in,
28c28
<                                         unsigned *nbytes_in,
---
>                                         unsigned *,
28,29c28
<                                         unsigned *nbytes_in,
<                                         unsigned int *nbytes_out);
---
>                                         unsigned *nbytes_inunsigned int *nbytes_out);
29c29
<                                         unsigned int *nbytes_out);
---
>                                         int *nbytes_out);
29c29
<                                         unsigned int *nbytes_out);
---
>                                         unsigned *nbytes_out);
(98.4 %, 3225 bytes)
28,29c28
<                                         unsigned *,
<                                         unsigned int *nbytes_out);
---
>                                         unsigned *unsigned int *nbytes_out);
29c29
<                                         unsigned int *nbytes_out);
---
>                                         int *nbytes_out);
29c29
<                                         unsigned int *nbytes_out);
---
>                                         unsigned *nbytes_out);
29c29
<                                         unsigned int *nbytes_out);
---
>                                         unsigned int nbytes_out);
29c29
<                                         unsigned int *nbytes_out);
---
>                                         unsigned int *);
(98.4 %, 3221 bytes)
29c29
<                                         unsigned *nbytes_out);
---
>                                         unsigned nbytes_out);
29c29
<                                         unsigned *nbytes_out);
---
>                                         unsigned *);
29c29
<                                         unsigned *nbytes_out);
---
>                                         unsigned *nbytes_out;
29,31c29
<                                         unsigned *nbytes_out);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                                         unsigned *nbytes_out)BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
31c31
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
(98.4 %, 3211 bytes)
29c29
<                                         unsigned *);
---
>                                         unsigned *;
29,31c29
<                                         unsigned *);
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                                         unsigned *)BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
31c31
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
31c31
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
31c31
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
(98.4 %, 3201 bytes)
31c31
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
31c31
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
31c31
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
31c31
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API()(int *bzerror, BZFILE *b, int abandon,
31c31
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
31c31
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose64)int *bzerror, BZFILE *b, int abandon,
31c31
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose64)(*bzerror, BZFILE *b, int abandon,
31c31
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose64)(int bzerror, BZFILE *b, int abandon,
(98.4 %, 3195 bytes)
31c31
< void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
31c31
< void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void ()(int *bzerror, BZFILE *b, int abandon,
31c31
< void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
31c31
< void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose64)int *bzerror, BZFILE *b, int abandon,
31c31
< void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose64)(*bzerror, BZFILE *b, int abandon,
31c31
< void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose64)(int bzerror, BZFILE *b, int abandon,
31c31
< void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose64)(int *, BZFILE *b, int abandon,
31c31
< void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose64)(int *bzerrorBZFILE *b, int abandon,
31c31
< void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose64)(int *bzerror, *b, int abandon,
31c31
< void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose64)(int *bzerror, BZFILE b, int abandon,
31c31
< void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *, int abandon,
(98.4 %, 3188 bytes)
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose64)(int *BZFILE *b, int abandon,
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose64)(int *, *b, int abandon,
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose64)(int *, BZFILE b, int abandon,
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose64)(int *, BZFILE *, int abandon,
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose64)(int *, BZFILE *bint abandon,
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose64)(int *, BZFILE *b, abandon,
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose64)(int *, BZFILE *b, int ,
(98.4 %, 3187 bytes)
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int abandon,
---
> void (BZ2_bzWriteClose64)(int *, BZFILE *int abandon,
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int abandon,
---
> void (BZ2_bzWriteClose64)(int *, BZFILE *, abandon,
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int abandon,
---
> void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
31,32c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int abandon,
<                                           unsigned int *nbytes_in_lo32,
---
> void (BZ2_bzWriteClose64)(int *, BZFILE *, int abandonunsigned int *nbytes_in_lo32,
32c32
<                                           unsigned int *nbytes_in_lo32,
---
>                                           int *nbytes_in_lo32,
32c32
<                                           unsigned int *nbytes_in_lo32,
---
>                                           unsigned *nbytes_in_lo32,
(98.4 %, 3180 bytes)
31,32c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
<                                           unsigned int *nbytes_in_lo32,
---
> void (BZ2_bzWriteClose64)(int *, BZFILE *, int unsigned int *nbytes_in_lo32,
32c32
<                                           unsigned int *nbytes_in_lo32,
---
>                                           int *nbytes_in_lo32,
32c32
<                                           unsigned int *nbytes_in_lo32,
---
>                                           unsigned *nbytes_in_lo32,
32c32
<                                           unsigned int *nbytes_in_lo32,
---
>                                           unsigned int nbytes_in_lo32,
32c32
<                                           unsigned int *nbytes_in_lo32,
---
>                                           unsigned int *,
(98.5 %, 3176 bytes)
32c32
<                                           unsigned *nbytes_in_lo32,
---
>                                           unsigned nbytes_in_lo32,
32c32
<                                           unsigned *nbytes_in_lo32,
---
>                                           unsigned *,
32,33c32
<                                           unsigned *nbytes_in_lo32,
<                                           unsigned int *nbytes_in_hi32,
---
>                                           unsigned *nbytes_in_lo32unsigned int *nbytes_in_hi32,
33c33
<                                           unsigned int *nbytes_in_hi32,
---
>                                           int *nbytes_in_hi32,
33c33
<                                           unsigned int *nbytes_in_hi32,
---
>                                           unsigned *nbytes_in_hi32,
(98.5 %, 3162 bytes)
32,33c32
<                                           unsigned *,
<                                           unsigned int *nbytes_in_hi32,
---
>                                           unsigned *unsigned int *nbytes_in_hi32,
33c33
<                                           unsigned int *nbytes_in_hi32,
---
>                                           int *nbytes_in_hi32,
33c33
<                                           unsigned int *nbytes_in_hi32,
---
>                                           unsigned *nbytes_in_hi32,
33c33
<                                           unsigned int *nbytes_in_hi32,
---
>                                           unsigned int nbytes_in_hi32,
33c33
<                                           unsigned int *nbytes_in_hi32,
---
>                                           unsigned int *,
(98.5 %, 3158 bytes)
33c33
<                                           unsigned *nbytes_in_hi32,
---
>                                           unsigned nbytes_in_hi32,
33c33
<                                           unsigned *nbytes_in_hi32,
---
>                                           unsigned *,
33,34c33
<                                           unsigned *nbytes_in_hi32,
<                                           unsigned int *nbytes_out_lo32,
---
>                                           unsigned *nbytes_in_hi32unsigned int *nbytes_out_lo32,
34c34
<                                           unsigned int *nbytes_out_lo32,
---
>                                           int *nbytes_out_lo32,
34c34
<                                           unsigned int *nbytes_out_lo32,
---
>                                           unsigned *nbytes_out_lo32,
(98.5 %, 3144 bytes)
33,34c33
<                                           unsigned *,
<                                           unsigned int *nbytes_out_lo32,
---
>                                           unsigned *unsigned int *nbytes_out_lo32,
34c34
<                                           unsigned int *nbytes_out_lo32,
---
>                                           int *nbytes_out_lo32,
34c34
<                                           unsigned int *nbytes_out_lo32,
---
>                                           unsigned *nbytes_out_lo32,
34c34
<                                           unsigned int *nbytes_out_lo32,
---
>                                           unsigned int nbytes_out_lo32,
34c34
<                                           unsigned int *nbytes_out_lo32,
---
>                                           unsigned int *,
(98.5 %, 3140 bytes)
34c34
<                                           unsigned *nbytes_out_lo32,
---
>                                           unsigned nbytes_out_lo32,
34c34
<                                           unsigned *nbytes_out_lo32,
---
>                                           unsigned *,
34,35c34
<                                           unsigned *nbytes_out_lo32,
<                                           unsigned int *nbytes_out_hi32);
---
>                                           unsigned *nbytes_out_lo32unsigned int *nbytes_out_hi32);
35c35
<                                           unsigned int *nbytes_out_hi32);
---
>                                           int *nbytes_out_hi32);
35c35
<                                           unsigned int *nbytes_out_hi32);
---
>                                           unsigned *nbytes_out_hi32);
(98.5 %, 3125 bytes)
34,35c34
<                                           unsigned *,
<                                           unsigned int *nbytes_out_hi32);
---
>                                           unsigned *unsigned int *nbytes_out_hi32);
35c35
<                                           unsigned int *nbytes_out_hi32);
---
>                                           int *nbytes_out_hi32);
35c35
<                                           unsigned int *nbytes_out_hi32);
---
>                                           unsigned *nbytes_out_hi32);
35c35
<                                           unsigned int *nbytes_out_hi32);
---
>                                           unsigned int nbytes_out_hi32);
35c35
<                                           unsigned int *nbytes_out_hi32);
---
>                                           unsigned int *);
(98.5 %, 3121 bytes)
35c35
<                                           unsigned *nbytes_out_hi32);
---
>                                           unsigned nbytes_out_hi32);
35c35
<                                           unsigned *nbytes_out_hi32);
---
>                                           unsigned *);
35c35
<                                           unsigned *nbytes_out_hi32);
---
>                                           unsigned *nbytes_out_hi32;
35,37c35
<                                           unsigned *nbytes_out_hi32);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
>                                           unsigned *nbytes_out_hi32)BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
37c37
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
> int BZ_API(BZ2_bzBuffToBuffCompress)(
(98.5 %, 3106 bytes)
35c35
<                                           unsigned *);
---
>                                           unsigned *;
35,37c35
<                                           unsigned *);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
>                                           unsigned *)BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
37c37
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
> int BZ_API(BZ2_bzBuffToBuffCompress)(
37c37
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)(
---
> BZ_EXTERN BZ_API(BZ2_bzBuffToBuffCompress)(
(98.5 %, 3096 bytes)
37c37
< int BZ_API(BZ2_bzBuffToBuffCompress)(
---
> BZ_API(BZ2_bzBuffToBuffCompress)(
37c37
< int BZ_API(BZ2_bzBuffToBuffCompress)(
---
> int (BZ2_bzBuffToBuffCompress)(
(98.5 %, 3092 bytes)
37c37
< BZ_API(BZ2_bzBuffToBuffCompress)(
---
> (BZ2_bzBuffToBuffCompress)(
37c37
< BZ_API(BZ2_bzBuffToBuffCompress)(
---
> BZ_APIBZ2_bzBuffToBuffCompress)(
37c37
< BZ_API(BZ2_bzBuffToBuffCompress)(
---
> BZ_API()(
37c37
< BZ_API(BZ2_bzBuffToBuffCompress)(
---
> BZ_API(BZ2_bzBuffToBuffCompress(
37,38c37
< BZ_API(BZ2_bzBuffToBuffCompress)(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
> BZ_API(BZ2_bzBuffToBuffCompress)char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
38c38
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
38c38
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char dest, unsigned int *destLen, char *source, unsigned int sourceLen,
38c38
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *, unsigned int *destLen, char *source, unsigned int sourceLen,
(98.5 %, 3086 bytes)
37c37
< (BZ2_bzBuffToBuffCompress)(
---
> BZ2_bzBuffToBuffCompress)(
37c37
< (BZ2_bzBuffToBuffCompress)(
---
> ()(
37c37
< (BZ2_bzBuffToBuffCompress)(
---
> (BZ2_bzBuffToBuffCompress(
37,38c37
< (BZ2_bzBuffToBuffCompress)(
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
> (BZ2_bzBuffToBuffCompress)char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
38c38
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
38c38
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char dest, unsigned int *destLen, char *source, unsigned int sourceLen,
38c38
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *, unsigned int *destLen, char *source, unsigned int sourceLen,
38c38
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *destunsigned int *destLen, char *source, unsigned int sourceLen,
38c38
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *dest, int *destLen, char *source, unsigned int sourceLen,
38c38
<     char *dest, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *dest, unsigned *destLen, char *source, unsigned int sourceLen,
(98.5 %, 3082 bytes)
38c38
<     char *, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *unsigned int *destLen, char *source, unsigned int sourceLen,
38c38
<     char *, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *, int *destLen, char *source, unsigned int sourceLen,
38c38
<     char *, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *, unsigned *destLen, char *source, unsigned int sourceLen,
38c38
<     char *, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *, unsigned int destLen, char *source, unsigned int sourceLen,
38c38
<     char *, unsigned int *destLen, char *source, unsigned int sourceLen,
---
>     char *, unsigned int *, char *source, unsigned int sourceLen,
(98.5 %, 3078 bytes)
38c38
<     char *, unsigned *destLen, char *source, unsigned int sourceLen,
---
>     char *, unsigned destLen, char *source, unsigned int sourceLen,
38c38
<     char *, unsigned *destLen, char *source, unsigned int sourceLen,
---
>     char *, unsigned *, char *source, unsigned int sourceLen,
38c38
<     char *, unsigned *destLen, char *source, unsigned int sourceLen,
---
>     char *, unsigned *destLenchar *source, unsigned int sourceLen,
38c38
<     char *, unsigned *destLen, char *source, unsigned int sourceLen,
---
>     char *, unsigned *destLen, *source, unsigned int sourceLen,
38c38
<     char *, unsigned *destLen, char *source, unsigned int sourceLen,
---
>     char *, unsigned *destLen, char source, unsigned int sourceLen,
38c38
<     char *, unsigned *destLen, char *source, unsigned int sourceLen,
---
>     char *, unsigned *destLen, char *, unsigned int sourceLen,
(98.5 %, 3071 bytes)
38c38
<     char *, unsigned *, char *source, unsigned int sourceLen,
---
>     char *, unsigned *char *source, unsigned int sourceLen,
38c38
<     char *, unsigned *, char *source, unsigned int sourceLen,
---
>     char *, unsigned *, *source, unsigned int sourceLen,
38c38
<     char *, unsigned *, char *source, unsigned int sourceLen,
---
>     char *, unsigned *, char source, unsigned int sourceLen,
38c38
<     char *, unsigned *, char *source, unsigned int sourceLen,
---
>     char *, unsigned *, char *, unsigned int sourceLen,
38c38
<     char *, unsigned *, char *source, unsigned int sourceLen,
---
>     char *, unsigned *, char *sourceunsigned int sourceLen,
38c38
<     char *, unsigned *, char *source, unsigned int sourceLen,
---
>     char *, unsigned *, char *source, int sourceLen,
38c38
<     char *, unsigned *, char *source, unsigned int sourceLen,
---
>     char *, unsigned *, char *source, unsigned sourceLen,
(98.5 %, 3065 bytes)
38c38
<     char *, unsigned *, char *, unsigned int sourceLen,
---
>     char *, unsigned *, char *unsigned int sourceLen,
38c38
<     char *, unsigned *, char *, unsigned int sourceLen,
---
>     char *, unsigned *, char *, int sourceLen,
38c38
<     char *, unsigned *, char *, unsigned int sourceLen,
---
>     char *, unsigned *, char *, unsigned sourceLen,
38c38
<     char *, unsigned *, char *, unsigned int sourceLen,
---
>     char *, unsigned *, char *, unsigned int ,
38,39c38
<     char *, unsigned *, char *, unsigned int sourceLen,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *, unsigned *, char *, unsigned int sourceLenint blockSize100k, int verbosity, int workFactor);
(98.5 %, 3061 bytes)
38c38
<     char *, unsigned *, char *, unsigned sourceLen,
---
>     char *, unsigned *, char *, unsigned ,
38,39c38
<     char *, unsigned *, char *, unsigned sourceLen,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *, unsigned *, char *, unsigned sourceLenint blockSize100k, int verbosity, int workFactor);
39c39
<     int blockSize100k, int verbosity, int workFactor);
---
>     blockSize100k, int verbosity, int workFactor);
39c39
<     int blockSize100k, int verbosity, int workFactor);
---
>     int , int verbosity, int workFactor);
(98.5 %, 3052 bytes)
38,39c38
<     char *, unsigned *, char *, unsigned ,
<     int blockSize100k, int verbosity, int workFactor);
---
>     char *, unsigned *, char *, unsigned int blockSize100k, int verbosity, int workFactor);
39c39
<     int blockSize100k, int verbosity, int workFactor);
---
>     blockSize100k, int verbosity, int workFactor);
39c39
<     int blockSize100k, int verbosity, int workFactor);
---
>     int , int verbosity, int workFactor);
39c39
<     int blockSize100k, int verbosity, int workFactor);
---
>     int blockSize100kint verbosity, int workFactor);
39c39
<     int blockSize100k, int verbosity, int workFactor);
---
>     int blockSize100k, verbosity, int workFactor);
39c39
<     int blockSize100k, int verbosity, int workFactor);
---
>     int blockSize100k, int , int workFactor);
(98.5 %, 3039 bytes)
39c39
<     int , int verbosity, int workFactor);
---
>     int int verbosity, int workFactor);
39c39
<     int , int verbosity, int workFactor);
---
>     int , verbosity, int workFactor);
39c39
<     int , int verbosity, int workFactor);
---
>     int , int , int workFactor);
39c39
<     int , int verbosity, int workFactor);
---
>     int , int verbosityint workFactor);
39c39
<     int , int verbosity, int workFactor);
---
>     int , int verbosity, workFactor);
39c39
<     int , int verbosity, int workFactor);
---
>     int , int verbosity, int );
(98.5 %, 3030 bytes)
39c39
<     int , int , int workFactor);
---
>     int , int int workFactor);
39c39
<     int , int , int workFactor);
---
>     int , int , workFactor);
39c39
<     int , int , int workFactor);
---
>     int , int , int );
39c39
<     int , int , int workFactor);
---
>     int , int , int workFactor;
39,41c39
<     int , int , int workFactor);
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>     int , int , int workFactor)BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
41c41
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
> int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
(98.5 %, 3020 bytes)
39c39
<     int , int , int );
---
>     int , int , int ;
39,41c39
<     int , int , int );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
>     int , int , int )BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
41c41
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
> int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
41c41
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
> BZ_EXTERN BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
(98.5 %, 3010 bytes)
41c41
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
> BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
41c41
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
> int (BZ2_bzBuffToBuffDecompress)(char *dest,
41c41
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
> int BZ_APIBZ2_bzBuffToBuffDecompress)(char *dest,
(98.5 %, 3006 bytes)
41c41
< BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
> (BZ2_bzBuffToBuffDecompress)(char *dest,
41c41
< BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
> BZ_APIBZ2_bzBuffToBuffDecompress)(char *dest,
41c41
< BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
> BZ_API()(char *dest,
41c41
< BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
> BZ_API(BZ2_bzBuffToBuffDecompress(char *dest,
41c41
< BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
> BZ_API(BZ2_bzBuffToBuffDecompress)char *dest,
41c41
< BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
> BZ_API(BZ2_bzBuffToBuffDecompress)(*dest,
41c41
< BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
> BZ_API(BZ2_bzBuffToBuffDecompress)(char dest,
41c41
< BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest,
---
> BZ_API(BZ2_bzBuffToBuffDecompress)(char *,
(98.5 %, 3000 bytes)
41c41
< (BZ2_bzBuffToBuffDecompress)(char *dest,
---
> BZ2_bzBuffToBuffDecompress)(char *dest,
41c41
< (BZ2_bzBuffToBuffDecompress)(char *dest,
---
> ()(char *dest,
41c41
< (BZ2_bzBuffToBuffDecompress)(char *dest,
---
> (BZ2_bzBuffToBuffDecompress(char *dest,
41c41
< (BZ2_bzBuffToBuffDecompress)(char *dest,
---
> (BZ2_bzBuffToBuffDecompress)char *dest,
41c41
< (BZ2_bzBuffToBuffDecompress)(char *dest,
---
> (BZ2_bzBuffToBuffDecompress)(*dest,
41c41
< (BZ2_bzBuffToBuffDecompress)(char *dest,
---
> (BZ2_bzBuffToBuffDecompress)(char dest,
41c41
< (BZ2_bzBuffToBuffDecompress)(char *dest,
---
> (BZ2_bzBuffToBuffDecompress)(char *,
41,42c41
< (BZ2_bzBuffToBuffDecompress)(char *dest,
<                                                  unsigned int *destLen,
---
> (BZ2_bzBuffToBuffDecompress)(char *destunsigned int *destLen,
42c42
<                                                  unsigned int *destLen,
---
>                                                  int *destLen,
42c42
<                                                  unsigned int *destLen,
---
>                                                  unsigned *destLen,
(98.5 %, 2996 bytes)
41,42c41
< (BZ2_bzBuffToBuffDecompress)(char *,
<                                                  unsigned int *destLen,
---
> (BZ2_bzBuffToBuffDecompress)(char *unsigned int *destLen,
42c42
<                                                  unsigned int *destLen,
---
>                                                  int *destLen,
42c42
<                                                  unsigned int *destLen,
---
>                                                  unsigned *destLen,
42c42
<                                                  unsigned int *destLen,
---
>                                                  unsigned int destLen,
42c42
<                                                  unsigned int *destLen,
---
>                                                  unsigned int *,
(98.5 %, 2992 bytes)
42c42
<                                                  unsigned *destLen,
---
>                                                  unsigned destLen,
42c42
<                                                  unsigned *destLen,
---
>                                                  unsigned *,
42,43c42
<                                                  unsigned *destLen,
<                                                  char *source,
---
>                                                  unsigned *destLenchar *source,
43c43
<                                                  char *source,
---
>                                                  *source,
43c43
<                                                  char *source,
---
>                                                  char source,
43c43
<                                                  char *source,
---
>                                                  char *,
(98.5 %, 2985 bytes)
42,43c42
<                                                  unsigned *,
<                                                  char *source,
---
>                                                  unsigned *char *source,
43c43
<                                                  char *source,
---
>                                                  *source,
43c43
<                                                  char *source,
---
>                                                  char source,
43c43
<                                                  char *source,
---
>                                                  char *,
43,44c43
<                                                  char *source,
<                                                  unsigned int sourceLen,
---
>                                                  char *sourceunsigned int sourceLen,
44c44
<                                                  unsigned int sourceLen,
---
>                                                  int sourceLen,
44c44
<                                                  unsigned int sourceLen,
---
>                                                  unsigned sourceLen,
(98.5 %, 2979 bytes)
43,44c43
<                                                  char *,
<                                                  unsigned int sourceLen,
---
>                                                  char *unsigned int sourceLen,
44c44
<                                                  unsigned int sourceLen,
---
>                                                  int sourceLen,
44c44
<                                                  unsigned int sourceLen,
---
>                                                  unsigned sourceLen,
44c44
<                                                  unsigned int sourceLen,
---
>                                                  unsigned int ,
44,45c44
<                                                  unsigned int sourceLen,
<                                                  int small, int );
---
>                                                  unsigned int sourceLenint small, int );
45c45
<                                                  int small, int );
---
>                                                  small, int );
(98.5 %, 2975 bytes)
44c44
<                                                  unsigned sourceLen,
---
>                                                  unsigned ,
44,45c44
<                                                  unsigned sourceLen,
<                                                  int small, int );
---
>                                                  unsigned sourceLenint small, int );
45c45
<                                                  int small, int );
---
>                                                  small, int );
45c45
<                                                  int small, int );
---
>                                                  int , int );
(98.6 %, 2966 bytes)
44,45c44
<                                                  unsigned ,
<                                                  int small, int );
---
>                                                  unsigned int small, int );
45c45
<                                                  int small, int );
---
>                                                  small, int );
45c45
<                                                  int small, int );
---
>                                                  int , int );
45c45
<                                                  int small, int );
---
>                                                  int smallint );
45c45
<                                                  int small, int );
---
>                                                  int small, );
45c45
<                                                  int small, int );
---
>                                                  int small, int ;
45,47c45
<                                                  int small, int );
< 
< Int32;
---
>                                                  int small, int )Int32;
47c47
< Int32;
---
> ;
(98.6 %, 2961 bytes)
45c45
<                                                  int , int );
---
>                                                  int int );
45c45
<                                                  int , int );
---
>                                                  int , );
45c45
<                                                  int , int );
---
>                                                  int , int ;
45,47c45
<                                                  int , int );
< 
< Int32;
---
>                                                  int , int )Int32;
47c47
< Int32;
---
> ;
47,48c47
< Int32;
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> Int32(BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
48c48
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
48c48
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> ()(bz_stream *strm, int blockSize100k,
48c48
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> (BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
48c48
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> (BZ2_bzCompressInit)bz_stream *strm, int blockSize100k,
48c48
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> (BZ2_bzCompressInit)(*strm, int blockSize100k,
48c48
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> (BZ2_bzCompressInit)(bz_stream strm, int blockSize100k,
48c48
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> (BZ2_bzCompressInit)(bz_stream *, int blockSize100k,
(98.6 %, 2956 bytes)
47d46
< ;
48c48
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
48c48
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> ()(bz_stream *strm, int blockSize100k,
48c48
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> (BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
48c48
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> (BZ2_bzCompressInit)bz_stream *strm, int blockSize100k,
48c48
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> (BZ2_bzCompressInit)(*strm, int blockSize100k,
48c48
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> (BZ2_bzCompressInit)(bz_stream strm, int blockSize100k,
48c48
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> (BZ2_bzCompressInit)(bz_stream *, int blockSize100k,
(98.6 %, 2954 bytes)
47c47
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
47c47
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> ()(bz_stream *strm, int blockSize100k,
47c47
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> (BZ2_bzCompressInit(bz_stream *strm, int blockSize100k,
47c47
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> (BZ2_bzCompressInit)bz_stream *strm, int blockSize100k,
47c47
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> (BZ2_bzCompressInit)(*strm, int blockSize100k,
47c47
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> (BZ2_bzCompressInit)(bz_stream strm, int blockSize100k,
47c47
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> (BZ2_bzCompressInit)(bz_stream *, int blockSize100k,
47c47
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> (BZ2_bzCompressInit)(bz_stream *strmint blockSize100k,
47c47
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> (BZ2_bzCompressInit)(bz_stream *strm, blockSize100k,
47c47
< (BZ2_bzCompressInit)(bz_stream *strm, int blockSize100k,
---
> (BZ2_bzCompressInit)(bz_stream *strm, int ,
(98.6 %, 2950 bytes)
47c47
< (BZ2_bzCompressInit)(bz_stream *, int blockSize100k,
---
> (BZ2_bzCompressInit)(bz_stream *int blockSize100k,
47c47
< (BZ2_bzCompressInit)(bz_stream *, int blockSize100k,
---
> (BZ2_bzCompressInit)(bz_stream *, blockSize100k,
47c47
< (BZ2_bzCompressInit)(bz_stream *, int blockSize100k,
---
> (BZ2_bzCompressInit)(bz_stream *, int ,
47,48c47
< (BZ2_bzCompressInit)(bz_stream *, int blockSize100k,
<                                int verbosity, int);
---
> (BZ2_bzCompressInit)(bz_stream *, int blockSize100kint verbosity, int);
48c48
<                                int verbosity, int);
---
>                                verbosity, int);
48c48
<                                int verbosity, int);
---
>                                int , int);
(98.6 %, 2937 bytes)
47,48c47
< (BZ2_bzCompressInit)(bz_stream *, int ,
<                                int verbosity, int);
---
> (BZ2_bzCompressInit)(bz_stream *, int int verbosity, int);
48c48
<                                int verbosity, int);
---
>                                verbosity, int);
48c48
<                                int verbosity, int);
---
>                                int , int);
48c48
<                                int verbosity, int);
---
>                                int verbosityint);
48c48
<                                int verbosity, int);
---
>                                int verbosity, );
48c48
<                                int verbosity, int);
---
>                                int verbosity, int;
48,50c48
<                                int verbosity, int);
< 
< int;
---
>                                int verbosity, int)int;
50c50
< int;
---
> ;
(98.6 %, 2928 bytes)
48c48
<                                int , int);
---
>                                int int);
48c48
<                                int , int);
---
>                                int , );
48c48
<                                int , int);
---
>                                int , int;
48,50c48
<                                int , int);
< 
< int;
---
>                                int , int)int;
50c50
< int;
---
> ;
50,52c50
< int;
< 
< #define BZ_SETERR
---
> int#define BZ_SETERR
52c52
< #define BZ_SETERR
---
> define BZ_SETERR
52c52
< #define BZ_SETERR
---
> #BZ_SETERR
52,54c52
< #define BZ_SETERR
< 
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> #define BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
54c54
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
(98.6 %, 2925 bytes)
50,51d49
< ;
< 
52c52
< #define BZ_SETERR
---
> define BZ_SETERR
52c52
< #define BZ_SETERR
---
> #BZ_SETERR
52,54c52
< #define BZ_SETERR
< 
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> #define BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
54c54
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
(98.6 %, 2922 bytes)
50c50
< #define BZ_SETERR
---
> define BZ_SETERR
50c50
< #define BZ_SETERR
---
> #BZ_SETERR
50,52c50
< #define BZ_SETERR
< 
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> #define BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
52c52
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
52c52
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
52c52
< BZFILE *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
(98.6 %, 2915 bytes)
52c52
< *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
52c52
< *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> *(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
52c52
< *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> *BZ_APIBZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
52c52
< *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> *BZ_API()(int *bzerror, FILE *f, int blockSize100k,
52c52
< *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> *BZ_API(BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
52c52
< *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> *BZ_API(BZ2_bzWriteOpen)int *bzerror, FILE *f, int blockSize100k,
52c52
< *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> *BZ_API(BZ2_bzWriteOpen)(*bzerror, FILE *f, int blockSize100k,
52c52
< *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> *BZ_API(BZ2_bzWriteOpen)(int bzerror, FILE *f, int blockSize100k,
52c52
< *BZ_API(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> *BZ_API(BZ2_bzWriteOpen)(int *, FILE *f, int blockSize100k,
(98.6 %, 2909 bytes)
52c52
< *(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> *BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
52c52
< *(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> *()(int *bzerror, FILE *f, int blockSize100k,
52c52
< *(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> *(BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
52c52
< *(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> *(BZ2_bzWriteOpen)int *bzerror, FILE *f, int blockSize100k,
52c52
< *(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> *(BZ2_bzWriteOpen)(*bzerror, FILE *f, int blockSize100k,
52c52
< *(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> *(BZ2_bzWriteOpen)(int bzerror, FILE *f, int blockSize100k,
52c52
< *(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> *(BZ2_bzWriteOpen)(int *, FILE *f, int blockSize100k,
52c52
< *(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> *(BZ2_bzWriteOpen)(int *bzerrorFILE *f, int blockSize100k,
52c52
< *(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> *(BZ2_bzWriteOpen)(int *bzerror, *f, int blockSize100k,
52c52
< *(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> *(BZ2_bzWriteOpen)(int *bzerror, FILE f, int blockSize100k,
52c52
< *(BZ2_bzWriteOpen)(int *bzerror, FILE *f, int blockSize100k,
---
> *(BZ2_bzWriteOpen)(int *bzerror, FILE *, int blockSize100k,
(98.6 %, 2902 bytes)
52c52
< *(BZ2_bzWriteOpen)(int *, FILE *f, int blockSize100k,
---
> *(BZ2_bzWriteOpen)(int *FILE *f, int blockSize100k,
52c52
< *(BZ2_bzWriteOpen)(int *, FILE *f, int blockSize100k,
---
> *(BZ2_bzWriteOpen)(int *, *f, int blockSize100k,
52c52
< *(BZ2_bzWriteOpen)(int *, FILE *f, int blockSize100k,
---
> *(BZ2_bzWriteOpen)(int *, FILE f, int blockSize100k,
52c52
< *(BZ2_bzWriteOpen)(int *, FILE *f, int blockSize100k,
---
> *(BZ2_bzWriteOpen)(int *, FILE *, int blockSize100k,
52c52
< *(BZ2_bzWriteOpen)(int *, FILE *f, int blockSize100k,
---
> *(BZ2_bzWriteOpen)(int *, FILE *fint blockSize100k,
52c52
< *(BZ2_bzWriteOpen)(int *, FILE *f, int blockSize100k,
---
> *(BZ2_bzWriteOpen)(int *, FILE *f, blockSize100k,
52c52
< *(BZ2_bzWriteOpen)(int *, FILE *f, int blockSize100k,
---
> *(BZ2_bzWriteOpen)(int *, FILE *f, int ,
(98.6 %, 2901 bytes)
52c52
< *(BZ2_bzWriteOpen)(int *, FILE *, int blockSize100k,
---
> *(BZ2_bzWriteOpen)(int *, FILE *int blockSize100k,
52c52
< *(BZ2_bzWriteOpen)(int *, FILE *, int blockSize100k,
---
> *(BZ2_bzWriteOpen)(int *, FILE *, blockSize100k,
52c52
< *(BZ2_bzWriteOpen)(int *, FILE *, int blockSize100k,
---
> *(BZ2_bzWriteOpen)(int *, FILE *, int ,
52,53c52
< *(BZ2_bzWriteOpen)(int *, FILE *, int blockSize100k,
<                                 int verbosity, int workFactor);
---
> *(BZ2_bzWriteOpen)(int *, FILE *, int blockSize100kint verbosity, int workFactor);
53c53
<                                 int verbosity, int workFactor);
---
>                                 verbosity, int workFactor);
53c53
<                                 int verbosity, int workFactor);
---
>                                 int , int workFactor);
(98.6 %, 2888 bytes)
52,53c52
< *(BZ2_bzWriteOpen)(int *, FILE *, int ,
<                                 int verbosity, int workFactor);
---
> *(BZ2_bzWriteOpen)(int *, FILE *, int int verbosity, int workFactor);
53c53
<                                 int verbosity, int workFactor);
---
>                                 verbosity, int workFactor);
53c53
<                                 int verbosity, int workFactor);
---
>                                 int , int workFactor);
53c53
<                                 int verbosity, int workFactor);
---
>                                 int verbosityint workFactor);
53c53
<                                 int verbosity, int workFactor);
---
>                                 int verbosity, workFactor);
53c53
<                                 int verbosity, int workFactor);
---
>                                 int verbosity, int );
(98.6 %, 2879 bytes)
53c53
<                                 int , int workFactor);
---
>                                 int int workFactor);
53c53
<                                 int , int workFactor);
---
>                                 int , workFactor);
53c53
<                                 int , int workFactor);
---
>                                 int , int );
53c53
<                                 int , int workFactor);
---
>                                 int , int workFactor;
53,55c53
<                                 int , int workFactor);
< 
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                 int , int workFactor)void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
55c55
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
55c55
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
(98.6 %, 2869 bytes)
53c53
<                                 int , int );
---
>                                 int , int ;
53,55c53
<                                 int , int );
< 
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
>                                 int , int )void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
55c55
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
55c55
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
55c55
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_APIBZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
55c55
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API()(int *bzerror, BZFILE *b, void *buf, int len);
55c55
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
55c55
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite)int *bzerror, BZFILE *b, void *buf, int len);
55c55
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite)(*bzerror, BZFILE *b, void *buf, int len);
55c55
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite)(int bzerror, BZFILE *b, void *buf, int len);
55c55
< void BZ_API(BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ_API(BZ2_bzWrite)(int *, BZFILE *b, void *buf, int len);
(98.6 %, 2863 bytes)
55c55
< void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
55c55
< void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void ()(int *bzerror, BZFILE *b, void *buf, int len);
55c55
< void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void (BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
55c55
< void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void (BZ2_bzWrite)int *bzerror, BZFILE *b, void *buf, int len);
55c55
< void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void (BZ2_bzWrite)(*bzerror, BZFILE *b, void *buf, int len);
55c55
< void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void (BZ2_bzWrite)(int bzerror, BZFILE *b, void *buf, int len);
55c55
< void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void (BZ2_bzWrite)(int *, BZFILE *b, void *buf, int len);
55c55
< void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void (BZ2_bzWrite)(int *bzerrorBZFILE *b, void *buf, int len);
55c55
< void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void (BZ2_bzWrite)(int *bzerror, *b, void *buf, int len);
55c55
< void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void (BZ2_bzWrite)(int *bzerror, BZFILE b, void *buf, int len);
55c55
< void (BZ2_bzWrite)(int *bzerror, BZFILE *b, void *buf, int len);
---
> void (BZ2_bzWrite)(int *bzerror, BZFILE *, void *buf, int len);
(98.6 %, 2856 bytes)
55c55
< void (BZ2_bzWrite)(int *, BZFILE *b, void *buf, int len);
---
> void (BZ2_bzWrite)(int *BZFILE *b, void *buf, int len);
55c55
< void (BZ2_bzWrite)(int *, BZFILE *b, void *buf, int len);
---
> void (BZ2_bzWrite)(int *, *b, void *buf, int len);
55c55
< void (BZ2_bzWrite)(int *, BZFILE *b, void *buf, int len);
---
> void (BZ2_bzWrite)(int *, BZFILE b, void *buf, int len);
55c55
< void (BZ2_bzWrite)(int *, BZFILE *b, void *buf, int len);
---
> void (BZ2_bzWrite)(int *, BZFILE *, void *buf, int len);
55c55
< void (BZ2_bzWrite)(int *, BZFILE *b, void *buf, int len);
---
> void (BZ2_bzWrite)(int *, BZFILE *bvoid *buf, int len);
55c55
< void (BZ2_bzWrite)(int *, BZFILE *b, void *buf, int len);
---
> void (BZ2_bzWrite)(int *, BZFILE *b, *buf, int len);
55c55
< void (BZ2_bzWrite)(int *, BZFILE *b, void *buf, int len);
---
> void (BZ2_bzWrite)(int *, BZFILE *b, void buf, int len);
55c55
< void (BZ2_bzWrite)(int *, BZFILE *b, void *buf, int len);
---
> void (BZ2_bzWrite)(int *, BZFILE *b, void *, int len);
(98.6 %, 2855 bytes)
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *buf, int len);
---
> void (BZ2_bzWrite)(int *, BZFILE *void *buf, int len);
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *buf, int len);
---
> void (BZ2_bzWrite)(int *, BZFILE *, *buf, int len);
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *buf, int len);
---
> void (BZ2_bzWrite)(int *, BZFILE *, void buf, int len);
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *buf, int len);
---
> void (BZ2_bzWrite)(int *, BZFILE *, void *, int len);
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *buf, int len);
---
> void (BZ2_bzWrite)(int *, BZFILE *, void *bufint len);
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *buf, int len);
---
> void (BZ2_bzWrite)(int *, BZFILE *, void *buf, len);
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *buf, int len);
---
> void (BZ2_bzWrite)(int *, BZFILE *, void *buf, int );
(98.6 %, 2852 bytes)
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int len);
---
> void (BZ2_bzWrite)(int *, BZFILE *, void *int len);
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int len);
---
> void (BZ2_bzWrite)(int *, BZFILE *, void *, len);
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int len);
---
> void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int len);
---
> void (BZ2_bzWrite)(int *, BZFILE *, void *, int len;
55,57c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int len);
< 
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWrite)(int *, BZFILE *, void *, int len)void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
57c57
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
57c57
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
(98.6 %, 2849 bytes)
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
> void (BZ2_bzWrite)(int *, BZFILE *, void *, int ;
55,57c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
< 
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWrite)(int *, BZFILE *, void *, int )void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
57c57
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
57c57
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
57c57
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
57c57
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API()(int *bzerror, BZFILE *b, int abandon,
57c57
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
57c57
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose)int *bzerror, BZFILE *b, int abandon,
57c57
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose)(*bzerror, BZFILE *b, int abandon,
57c57
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose)(int bzerror, BZFILE *b, int abandon,
57c57
< void BZ_API(BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose)(int *, BZFILE *b, int abandon,
(98.6 %, 2843 bytes)
57c57
< void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
57c57
< void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void ()(int *bzerror, BZFILE *b, int abandon,
57c57
< void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon,
57c57
< void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose)int *bzerror, BZFILE *b, int abandon,
57c57
< void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose)(*bzerror, BZFILE *b, int abandon,
57c57
< void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose)(int bzerror, BZFILE *b, int abandon,
57c57
< void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose)(int *, BZFILE *b, int abandon,
57c57
< void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose)(int *bzerrorBZFILE *b, int abandon,
57c57
< void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose)(int *bzerror, *b, int abandon,
57c57
< void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose)(int *bzerror, BZFILE b, int abandon,
57c57
< void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose)(int *bzerror, BZFILE *, int abandon,
57c57
< void (BZ2_bzWriteClose)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose)(int *bzerror, BZFILE *bint abandon,
(98.6 %, 2836 bytes)
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose)(int *BZFILE *b, int abandon,
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose)(int *, *b, int abandon,
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose)(int *, BZFILE b, int abandon,
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose)(int *, BZFILE *, int abandon,
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose)(int *, BZFILE *bint abandon,
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose)(int *, BZFILE *b, abandon,
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose)(int *, BZFILE *b, int ,
(98.6 %, 2835 bytes)
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *, int abandon,
---
> void (BZ2_bzWriteClose)(int *, BZFILE *int abandon,
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *, int abandon,
---
> void (BZ2_bzWriteClose)(int *, BZFILE *, abandon,
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *, int abandon,
---
> void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
57,58c57
< void (BZ2_bzWriteClose)(int *, BZFILE *, int abandon,
<                               unsigned int *nbytes_in,
---
> void (BZ2_bzWriteClose)(int *, BZFILE *, int abandonunsigned int *nbytes_in,
58c58
<                               unsigned int *nbytes_in,
---
>                               int *nbytes_in,
58c58
<                               unsigned int *nbytes_in,
---
>                               unsigned *nbytes_in,
(98.6 %, 2828 bytes)
57,58c57
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
<                               unsigned int *nbytes_in,
---
> void (BZ2_bzWriteClose)(int *, BZFILE *, int unsigned int *nbytes_in,
58c58
<                               unsigned int *nbytes_in,
---
>                               int *nbytes_in,
58c58
<                               unsigned int *nbytes_in,
---
>                               unsigned *nbytes_in,
58c58
<                               unsigned int *nbytes_in,
---
>                               unsigned int nbytes_in,
58c58
<                               unsigned int *nbytes_in,
---
>                               unsigned int *,
58,59c58
<                               unsigned int *nbytes_in,
<                               unsigned int *nbytes_out);
---
>                               unsigned int *nbytes_inunsigned int *nbytes_out);
59c59
<                               unsigned int *nbytes_out);
---
>                               int *nbytes_out);
(98.6 %, 2824 bytes)
58c58
<                               unsigned *nbytes_in,
---
>                               unsigned nbytes_in,
58c58
<                               unsigned *nbytes_in,
---
>                               unsigned *,
58,59c58
<                               unsigned *nbytes_in,
<                               unsigned int *nbytes_out);
---
>                               unsigned *nbytes_inunsigned int *nbytes_out);
59c59
<                               unsigned int *nbytes_out);
---
>                               int *nbytes_out);
59c59
<                               unsigned int *nbytes_out);
---
>                               unsigned *nbytes_out);
(98.6 %, 2815 bytes)
58,59c58
<                               unsigned *,
<                               unsigned int *nbytes_out);
---
>                               unsigned *unsigned int *nbytes_out);
59c59
<                               unsigned int *nbytes_out);
---
>                               int *nbytes_out);
59c59
<                               unsigned int *nbytes_out);
---
>                               unsigned *nbytes_out);
59c59
<                               unsigned int *nbytes_out);
---
>                               unsigned int nbytes_out);
59c59
<                               unsigned int *nbytes_out);
---
>                               unsigned int *);
(98.6 %, 2811 bytes)
59c59
<                               unsigned *nbytes_out);
---
>                               unsigned nbytes_out);
59c59
<                               unsigned *nbytes_out);
---
>                               unsigned *);
59c59
<                               unsigned *nbytes_out);
---
>                               unsigned *nbytes_out;
59,61c59
<                               unsigned *nbytes_out);
< 
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                               unsigned *nbytes_out)void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
61c61
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
61c61
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
(98.6 %, 2801 bytes)
59c59
<                               unsigned *);
---
>                               unsigned *;
59,61c59
<                               unsigned *);
< 
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>                               unsigned *)void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
61c61
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
61c61
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
61c61
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_APIBZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
61c61
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API()(int *bzerror, BZFILE *b, int abandon,
61c61
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
61c61
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose64)int *bzerror, BZFILE *b, int abandon,
61c61
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose64)(*bzerror, BZFILE *b, int abandon,
61c61
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose64)(int bzerror, BZFILE *b, int abandon,
61c61
< void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ_API(BZ2_bzWriteClose64)(int *, BZFILE *b, int abandon,
(98.6 %, 2795 bytes)
61c61
< void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
61c61
< void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void ()(int *bzerror, BZFILE *b, int abandon,
61c61
< void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
61c61
< void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose64)int *bzerror, BZFILE *b, int abandon,
61c61
< void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose64)(*bzerror, BZFILE *b, int abandon,
61c61
< void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose64)(int bzerror, BZFILE *b, int abandon,
61c61
< void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose64)(int *, BZFILE *b, int abandon,
61c61
< void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose64)(int *bzerrorBZFILE *b, int abandon,
61c61
< void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose64)(int *bzerror, *b, int abandon,
61c61
< void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose64)(int *bzerror, BZFILE b, int abandon,
61c61
< void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose64)(int *bzerror, BZFILE *, int abandon,
(98.6 %, 2788 bytes)
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose64)(int *BZFILE *b, int abandon,
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose64)(int *, *b, int abandon,
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose64)(int *, BZFILE b, int abandon,
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose64)(int *, BZFILE *, int abandon,
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose64)(int *, BZFILE *bint abandon,
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose64)(int *, BZFILE *b, abandon,
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *b, int abandon,
---
> void (BZ2_bzWriteClose64)(int *, BZFILE *b, int ,
(98.6 %, 2787 bytes)
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int abandon,
---
> void (BZ2_bzWriteClose64)(int *, BZFILE *int abandon,
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int abandon,
---
> void (BZ2_bzWriteClose64)(int *, BZFILE *, abandon,
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int abandon,
---
> void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
61,62c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int abandon,
<                                 unsigned int *nbytes_in_lo32,
---
> void (BZ2_bzWriteClose64)(int *, BZFILE *, int abandonunsigned int *nbytes_in_lo32,
62c62
<                                 unsigned int *nbytes_in_lo32,
---
>                                 int *nbytes_in_lo32,
62c62
<                                 unsigned int *nbytes_in_lo32,
---
>                                 unsigned *nbytes_in_lo32,
(98.6 %, 2780 bytes)
61,62c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
<                                 unsigned int *nbytes_in_lo32,
---
> void (BZ2_bzWriteClose64)(int *, BZFILE *, int unsigned int *nbytes_in_lo32,
62c62
<                                 unsigned int *nbytes_in_lo32,
---
>                                 int *nbytes_in_lo32,
62c62
<                                 unsigned int *nbytes_in_lo32,
---
>                                 unsigned *nbytes_in_lo32,
62c62
<                                 unsigned int *nbytes_in_lo32,
---
>                                 unsigned int nbytes_in_lo32,
62c62
<                                 unsigned int *nbytes_in_lo32,
---
>                                 unsigned int *,
(98.6 %, 2776 bytes)
62c62
<                                 unsigned *nbytes_in_lo32,
---
>                                 unsigned nbytes_in_lo32,
62c62
<                                 unsigned *nbytes_in_lo32,
---
>                                 unsigned *,
62,63c62
<                                 unsigned *nbytes_in_lo32,
<                                 unsigned int *nbytes_in_hi32,
---
>                                 unsigned *nbytes_in_lo32unsigned int *nbytes_in_hi32,
63c63
<                                 unsigned int *nbytes_in_hi32,
---
>                                 int *nbytes_in_hi32,
63c63
<                                 unsigned int *nbytes_in_hi32,
---
>                                 unsigned *nbytes_in_hi32,
(98.7 %, 2762 bytes)
62,63c62
<                                 unsigned *,
<                                 unsigned int *nbytes_in_hi32,
---
>                                 unsigned *unsigned int *nbytes_in_hi32,
63c63
<                                 unsigned int *nbytes_in_hi32,
---
>                                 int *nbytes_in_hi32,
63c63
<                                 unsigned int *nbytes_in_hi32,
---
>                                 unsigned *nbytes_in_hi32,
63c63
<                                 unsigned int *nbytes_in_hi32,
---
>                                 unsigned int nbytes_in_hi32,
63c63
<                                 unsigned int *nbytes_in_hi32,
---
>                                 unsigned int *,
(98.7 %, 2758 bytes)
63c63
<                                 unsigned *nbytes_in_hi32,
---
>                                 unsigned nbytes_in_hi32,
63c63
<                                 unsigned *nbytes_in_hi32,
---
>                                 unsigned *,
63,64c63
<                                 unsigned *nbytes_in_hi32,
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned *nbytes_in_hi32unsigned int *nbytes_out_lo32,
64c64
<                                 unsigned int *nbytes_out_lo32,
---
>                                 int *nbytes_out_lo32,
64c64
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned *nbytes_out_lo32,
(98.7 %, 2744 bytes)
63,64c63
<                                 unsigned *,
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned *unsigned int *nbytes_out_lo32,
64c64
<                                 unsigned int *nbytes_out_lo32,
---
>                                 int *nbytes_out_lo32,
64c64
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned *nbytes_out_lo32,
64c64
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned int nbytes_out_lo32,
64c64
<                                 unsigned int *nbytes_out_lo32,
---
>                                 unsigned int *,
(98.7 %, 2740 bytes)
64c64
<                                 unsigned *nbytes_out_lo32,
---
>                                 unsigned nbytes_out_lo32,
64c64
<                                 unsigned *nbytes_out_lo32,
---
>                                 unsigned *,
64,65c64
<                                 unsigned *nbytes_out_lo32,
<                                 unsigned int *nbytes_out_hi32);
---
>                                 unsigned *nbytes_out_lo32unsigned int *nbytes_out_hi32);
65c65
<                                 unsigned int *nbytes_out_hi32);
---
>                                 int *nbytes_out_hi32);
65c65
<                                 unsigned int *nbytes_out_hi32);
---
>                                 unsigned *nbytes_out_hi32);
(98.7 %, 2725 bytes)
64,65c64
<                                 unsigned *,
<                                 unsigned int *nbytes_out_hi32);
---
>                                 unsigned *unsigned int *nbytes_out_hi32);
65c65
<                                 unsigned int *nbytes_out_hi32);
---
>                                 int *nbytes_out_hi32);
65c65
<                                 unsigned int *nbytes_out_hi32);
---
>                                 unsigned *nbytes_out_hi32);
65c65
<                                 unsigned int *nbytes_out_hi32);
---
>                                 unsigned int nbytes_out_hi32);
65c65
<                                 unsigned int *nbytes_out_hi32);
---
>                                 unsigned int *);
(98.7 %, 2721 bytes)
65c65
<                                 unsigned *nbytes_out_hi32);
---
>                                 unsigned nbytes_out_hi32);
65c65
<                                 unsigned *nbytes_out_hi32);
---
>                                 unsigned *);
65c65
<                                 unsigned *nbytes_out_hi32);
---
>                                 unsigned *nbytes_out_hi32;
65,67c65
<                                 unsigned *nbytes_out_hi32);
< 
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
---
>                                 unsigned *nbytes_out_hi32)BZFILE *BZ_API (*b)(int *bzerrorlen) {
67c67
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
---
> *BZ_API (*b)(int *bzerrorlen) {
(98.7 %, 2706 bytes)
65c65
<                                 unsigned *);
---
>                                 unsigned *;
65,67c65
<                                 unsigned *);
< 
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
---
>                                 unsigned *)BZFILE *BZ_API (*b)(int *bzerrorlen) {
67c67
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
---
> *BZ_API (*b)(int *bzerrorlen) {
67c67
< BZFILE *BZ_API (*b)(int *bzerrorlen) {
---
> BZFILE BZ_API (*b)(int *bzerrorlen) {
(98.7 %, 2699 bytes)
67c67
< *BZ_API (*b)(int *bzerrorlen) {
---
> BZ_API (*b)(int *bzerrorlen) {
67c67
< *BZ_API (*b)(int *bzerrorlen) {
---
> *(*b)(int *bzerrorlen) {
67c67
< *BZ_API (*b)(int *bzerrorlen) {
---
> *BZ_API *b)(int *bzerrorlen) {
67c67
< *BZ_API (*b)(int *bzerrorlen) {
---
> *BZ_API (b)(int *bzerrorlen) {
(98.7 %, 2698 bytes)
67c67
< BZ_API (*b)(int *bzerrorlen) {
---
> (*b)(int *bzerrorlen) {
67c67
< BZ_API (*b)(int *bzerrorlen) {
---
> BZ_API *b)(int *bzerrorlen) {
67c67
< BZ_API (*b)(int *bzerrorlen) {
---
> BZ_API (b)(int *bzerrorlen) {
67c67
< BZ_API (*b)(int *bzerrorlen) {
---
> BZ_API (*)(int *bzerrorlen) {
67c67
< BZ_API (*b)(int *bzerrorlen) {
---
> BZ_API (*b(int *bzerrorlen) {
67c67
< BZ_API (*b)(int *bzerrorlen) {
---
> BZ_API (*b)int *bzerrorlen) {
67c67
< BZ_API (*b)(int *bzerrorlen) {
---
> BZ_API (*b)(*bzerrorlen) {
67c67
< BZ_API (*b)(int *bzerrorlen) {
---
> BZ_API (*b)(int bzerrorlen) {
(98.7 %, 2697 bytes)
67c67
< BZ_API (b)(int *bzerrorlen) {
---
> BZ_API ()(int *bzerrorlen) {
67c67
< BZ_API (b)(int *bzerrorlen) {
---
> BZ_API (b(int *bzerrorlen) {
67c67
< BZ_API (b)(int *bzerrorlen) {
---
> BZ_API (b)int *bzerrorlen) {
67c67
< BZ_API (b)(int *bzerrorlen) {
---
> BZ_API (b)(*bzerrorlen) {
67c67
< BZ_API (b)(int *bzerrorlen) {
---
> BZ_API (b)(int bzerrorlen) {
67c67
< BZ_API (b)(int *bzerrorlen) {
---
> BZ_API (b)(int *) {
67c67
< BZ_API (b)(int *bzerrorlen) {
---
> BZ_API (b)(int *bzerrorlen{
67,69c67
< BZ_API (b)(int *bzerrorlen) {
< 
<   }
---
> BZ_API (b)(int *bzerrorlen) }
69,71c69
<   }
< 
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
>   void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
71c71
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
71c71
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
(98.7 %, 2696 bytes)
67c67
< BZ_API (b)(int bzerrorlen) {
---
> BZ_API (b)(int ) {
67c67
< BZ_API (b)(int bzerrorlen) {
---
> BZ_API (b)(int bzerrorlen{
67,69c67
< BZ_API (b)(int bzerrorlen) {
< 
<   }
---
> BZ_API (b)(int bzerrorlen) }
69,71c69
<   }
< 
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
>   void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
71c71
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
71c71
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
71c71
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_APIBZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
71c71
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_API()(int *bzerror, BZFILE *b, void **unused,
71c71
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_API(BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
71c71
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_API(BZ2_bzReadGetUnused)int *bzerror, BZFILE *b, void **unused,
71c71
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_API(BZ2_bzReadGetUnused)(*bzerror, BZFILE *b, void **unused,
71c71
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_API(BZ2_bzReadGetUnused)(int bzerror, BZFILE *b, void **unused,
71c71
< void BZ_API(BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ_API(BZ2_bzReadGetUnused)(int *, BZFILE *b, void **unused,
(98.7 %, 2690 bytes)
71c71
< void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
71c71
< void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void ()(int *bzerror, BZFILE *b, void **unused,
71c71
< void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void (BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused,
71c71
< void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void (BZ2_bzReadGetUnused)int *bzerror, BZFILE *b, void **unused,
71c71
< void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void (BZ2_bzReadGetUnused)(*bzerror, BZFILE *b, void **unused,
71c71
< void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void (BZ2_bzReadGetUnused)(int bzerror, BZFILE *b, void **unused,
71c71
< void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void (BZ2_bzReadGetUnused)(int *, BZFILE *b, void **unused,
71c71
< void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void (BZ2_bzReadGetUnused)(int *bzerrorBZFILE *b, void **unused,
71c71
< void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void (BZ2_bzReadGetUnused)(int *bzerror, *b, void **unused,
71c71
< void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE b, void **unused,
71c71
< void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *b, void **unused,
---
> void (BZ2_bzReadGetUnused)(int *bzerror, BZFILE *, void **unused,
(98.7 %, 2683 bytes)
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *b, void **unused,
---
> void (BZ2_bzReadGetUnused)(int *BZFILE *b, void **unused,
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *b, void **unused,
---
> void (BZ2_bzReadGetUnused)(int *, *b, void **unused,
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *b, void **unused,
---
> void (BZ2_bzReadGetUnused)(int *, BZFILE b, void **unused,
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *b, void **unused,
---
> void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **unused,
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *b, void **unused,
---
> void (BZ2_bzReadGetUnused)(int *, BZFILE *bvoid **unused,
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *b, void **unused,
---
> void (BZ2_bzReadGetUnused)(int *, BZFILE *b, **unused,
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *b, void **unused,
---
> void (BZ2_bzReadGetUnused)(int *, BZFILE *b, void *unused,
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *b, void **unused,
---
> void (BZ2_bzReadGetUnused)(int *, BZFILE *b, void *unused,
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *b, void **unused,
---
> void (BZ2_bzReadGetUnused)(int *, BZFILE *b, void **,
(98.7 %, 2682 bytes)
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **unused,
---
> void (BZ2_bzReadGetUnused)(int *, BZFILE *void **unused,
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **unused,
---
> void (BZ2_bzReadGetUnused)(int *, BZFILE *, **unused,
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **unused,
---
> void (BZ2_bzReadGetUnused)(int *, BZFILE *, void *unused,
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **unused,
---
> void (BZ2_bzReadGetUnused)(int *, BZFILE *, void *unused,
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **unused,
---
> void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
71,72c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **unused,
<                                  int *nUnused);
---
> void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **unusedint *nUnused);
72c72
<                                  int *nUnused);
---
>                                  *nUnused);
72c72
<                                  int *nUnused);
---
>                                  int nUnused);
72c72
<                                  int *nUnused);
---
>                                  int *);
(98.7 %, 2676 bytes)
71,72c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
<                                  int *nUnused);
---
> void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **int *nUnused);
72c72
<                                  int *nUnused);
---
>                                  *nUnused);
72c72
<                                  int *nUnused);
---
>                                  int nUnused);
72c72
<                                  int *nUnused);
---
>                                  int *);
72c72
<                                  int *nUnused);
---
>                                  int *nUnused;
72,74c72
<                                  int *nUnused);
< 
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
>                                  int *nUnused)int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
74c74
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
(98.7 %, 2669 bytes)
72c72
<                                  int *);
---
>                                  int *;
72,74c72
<                                  int *);
< 
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
>                                  int *)int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
74c74
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
74c74
< int BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> int (BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
(98.7 %, 2665 bytes)
74c74
< BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> (BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
74c74
< BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
74c74
< BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> BZ_API()(char *dest, unsigned int *destLen,
74c74
< BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> BZ_API(BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
74c74
< BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> BZ_API(BZ2_bzBuffToBuffCompress)char *dest, unsigned int *destLen,
74c74
< BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> BZ_API(BZ2_bzBuffToBuffCompress)(*dest, unsigned int *destLen,
74c74
< BZ_API(BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> BZ_API(BZ2_bzBuffToBuffCompress)(char dest, unsigned int *destLen,
(98.7 %, 2659 bytes)
74c74
< (BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
74c74
< (BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> ()(char *dest, unsigned int *destLen,
74c74
< (BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> (BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen,
74c74
< (BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> (BZ2_bzBuffToBuffCompress)char *dest, unsigned int *destLen,
74c74
< (BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> (BZ2_bzBuffToBuffCompress)(*dest, unsigned int *destLen,
74c74
< (BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> (BZ2_bzBuffToBuffCompress)(char dest, unsigned int *destLen,
74c74
< (BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> (BZ2_bzBuffToBuffCompress)(char *, unsigned int *destLen,
74c74
< (BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> (BZ2_bzBuffToBuffCompress)(char *destunsigned int *destLen,
74c74
< (BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> (BZ2_bzBuffToBuffCompress)(char *dest, int *destLen,
74c74
< (BZ2_bzBuffToBuffCompress)(char *dest, unsigned int *destLen,
---
> (BZ2_bzBuffToBuffCompress)(char *dest, unsigned *destLen,
(98.7 %, 2655 bytes)
74c74
< (BZ2_bzBuffToBuffCompress)(char *, unsigned int *destLen,
---
> (BZ2_bzBuffToBuffCompress)(char *unsigned int *destLen,
74c74
< (BZ2_bzBuffToBuffCompress)(char *, unsigned int *destLen,
---
> (BZ2_bzBuffToBuffCompress)(char *, int *destLen,
74c74
< (BZ2_bzBuffToBuffCompress)(char *, unsigned int *destLen,
---
> (BZ2_bzBuffToBuffCompress)(char *, unsigned *destLen,
74c74
< (BZ2_bzBuffToBuffCompress)(char *, unsigned int *destLen,
---
> (BZ2_bzBuffToBuffCompress)(char *, unsigned int destLen,
74c74
< (BZ2_bzBuffToBuffCompress)(char *, unsigned int *destLen,
---
> (BZ2_bzBuffToBuffCompress)(char *, unsigned int *,
(98.7 %, 2651 bytes)
74c74
< (BZ2_bzBuffToBuffCompress)(char *, unsigned *destLen,
---
> (BZ2_bzBuffToBuffCompress)(char *, unsigned destLen,
74c74
< (BZ2_bzBuffToBuffCompress)(char *, unsigned *destLen,
---
> (BZ2_bzBuffToBuffCompress)(char *, unsigned *,
74,75c74
< (BZ2_bzBuffToBuffCompress)(char *, unsigned *destLen,
<                                      char *source, unsigned int sourceLen,
---
> (BZ2_bzBuffToBuffCompress)(char *, unsigned *destLenchar *source, unsigned int sourceLen,
75c75
<                                      char *source, unsigned int sourceLen,
---
>                                      *source, unsigned int sourceLen,
75c75
<                                      char *source, unsigned int sourceLen,
---
>                                      char source, unsigned int sourceLen,
75c75
<                                      char *source, unsigned int sourceLen,
---
>                                      char *, unsigned int sourceLen,
(98.7 %, 2644 bytes)
74,75c74
< (BZ2_bzBuffToBuffCompress)(char *, unsigned *,
<                                      char *source, unsigned int sourceLen,
---
> (BZ2_bzBuffToBuffCompress)(char *, unsigned *char *source, unsigned int sourceLen,
75c75
<                                      char *source, unsigned int sourceLen,
---
>                                      *source, unsigned int sourceLen,
75c75
<                                      char *source, unsigned int sourceLen,
---
>                                      char source, unsigned int sourceLen,
75c75
<                                      char *source, unsigned int sourceLen,
---
>                                      char *, unsigned int sourceLen,
75c75
<                                      char *source, unsigned int sourceLen,
---
>                                      char *sourceunsigned int sourceLen,
75c75
<                                      char *source, unsigned int sourceLen,
---
>                                      char *source, int sourceLen,
75c75
<                                      char *source, unsigned int sourceLen,
---
>                                      char *source, unsigned sourceLen,
(98.7 %, 2638 bytes)
75c75
<                                      char *, unsigned int sourceLen,
---
>                                      char *unsigned int sourceLen,
75c75
<                                      char *, unsigned int sourceLen,
---
>                                      char *, int sourceLen,
75c75
<                                      char *, unsigned int sourceLen,
---
>                                      char *, unsigned sourceLen,
75c75
<                                      char *, unsigned int sourceLen,
---
>                                      char *, unsigned int ,
(98.7 %, 2634 bytes)
75c75
<                                      char *, unsigned sourceLen,
---
>                                      char *, unsigned ,
75,76c75
<                                      char *, unsigned sourceLen,
<                                      int blockSize100k, int verbosity,
---
>                                      char *, unsigned sourceLenint blockSize100k, int verbosity,
76c76
<                                      int blockSize100k, int verbosity,
---
>                                      blockSize100k, int verbosity,
76c76
<                                      int blockSize100k, int verbosity,
---
>                                      int , int verbosity,
(98.7 %, 2625 bytes)
75,76c75
<                                      char *, unsigned ,
<                                      int blockSize100k, int verbosity,
---
>                                      char *, unsigned int blockSize100k, int verbosity,
76c76
<                                      int blockSize100k, int verbosity,
---
>                                      blockSize100k, int verbosity,
76c76
<                                      int blockSize100k, int verbosity,
---
>                                      int , int verbosity,
76c76
<                                      int blockSize100k, int verbosity,
---
>                                      int blockSize100kint verbosity,
76c76
<                                      int blockSize100k, int verbosity,
---
>                                      int blockSize100k, verbosity,
76c76
<                                      int blockSize100k, int verbosity,
---
>                                      int blockSize100k, int ,
(98.7 %, 2612 bytes)
76c76
<                                      int , int verbosity,
---
>                                      int int verbosity,
76c76
<                                      int , int verbosity,
---
>                                      int , verbosity,
76c76
<                                      int , int verbosity,
---
>                                      int , int ,
76,77c76
<                                      int , int verbosity,
<                                      int workFactor);
---
>                                      int , int verbosityint workFactor);
77c77
<                                      int workFactor);
---
>                                      workFactor);
77c77
<                                      int workFactor);
---
>                                      int );
(98.7 %, 2603 bytes)
76,77c76
<                                      int , int ,
<                                      int workFactor);
---
>                                      int , int int workFactor);
77c77
<                                      int workFactor);
---
>                                      workFactor);
77c77
<                                      int workFactor);
---
>                                      int );
77c77
<                                      int workFactor);
---
>                                      int workFactor;
77,79c77
<                                      int workFactor);
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>                                      int workFactor)int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
79c79
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
(98.7 %, 2593 bytes)
77c77
<                                      int );
---
>                                      int ;
77,79c77
<                                      int );
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
>                                      int )int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
79c79
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
79c79
< int BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> int (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
(98.7 %, 2589 bytes)
79c79
< BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
79c79
< BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> BZ_APIBZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
79c79
< BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> BZ_API()(char *dest, unsigned int *destLen,
79c79
< BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> BZ_API(BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
79c79
< BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> BZ_API(BZ2_bzBuffToBuffDecompress)char *dest, unsigned int *destLen,
79c79
< BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> BZ_API(BZ2_bzBuffToBuffDecompress)(*dest, unsigned int *destLen,
79c79
< BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> BZ_API(BZ2_bzBuffToBuffDecompress)(char dest, unsigned int *destLen,
79c79
< BZ_API(BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> BZ_API(BZ2_bzBuffToBuffDecompress)(char *, unsigned int *destLen,
(98.7 %, 2583 bytes)
79c79
< (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
79c79
< (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> ()(char *dest, unsigned int *destLen,
79c79
< (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> (BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen,
79c79
< (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> (BZ2_bzBuffToBuffDecompress)char *dest, unsigned int *destLen,
79c79
< (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> (BZ2_bzBuffToBuffDecompress)(*dest, unsigned int *destLen,
79c79
< (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> (BZ2_bzBuffToBuffDecompress)(char dest, unsigned int *destLen,
79c79
< (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> (BZ2_bzBuffToBuffDecompress)(char *, unsigned int *destLen,
79c79
< (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> (BZ2_bzBuffToBuffDecompress)(char *destunsigned int *destLen,
79c79
< (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> (BZ2_bzBuffToBuffDecompress)(char *dest, int *destLen,
79c79
< (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned *destLen,
79c79
< (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int destLen,
79c79
< (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
---
> (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *,
79,80c79
< (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLen,
<                                        char *source, unsigned int sourceLen,
---
> (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned int *destLenchar *source, unsigned int sourceLen,
80c80
<                                        char *source, unsigned int sourceLen,
---
>                                        *source, unsigned int sourceLen,
80c80
<                                        char *source, unsigned int sourceLen,
---
>                                        char source, unsigned int sourceLen,
80c80
<                                        char *source, unsigned int sourceLen,
---
>                                        char *, unsigned int sourceLen,
80c80
<                                        char *source, unsigned int sourceLen,
---
>                                        char *sourceunsigned int sourceLen,
80c80
<                                        char *source, unsigned int sourceLen,
---
>                                        char *source, int sourceLen,
(98.7 %, 2579 bytes)
79c79
< (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned *destLen,
---
> (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned destLen,
79c79
< (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned *destLen,
---
> (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned *,
79,80c79
< (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned *destLen,
<                                        char *source, unsigned int sourceLen,
---
> (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned *destLenchar *source, unsigned int sourceLen,
80c80
<                                        char *source, unsigned int sourceLen,
---
>                                        *source, unsigned int sourceLen,
80c80
<                                        char *source, unsigned int sourceLen,
---
>                                        char source, unsigned int sourceLen,
80c80
<                                        char *source, unsigned int sourceLen,
---
>                                        char *, unsigned int sourceLen,
80c80
<                                        char *source, unsigned int sourceLen,
---
>                                        char *sourceunsigned int sourceLen,
80c80
<                                        char *source, unsigned int sourceLen,
---
>                                        char *source, int sourceLen,
80c80
<                                        char *source, unsigned int sourceLen,
---
>                                        char *source, unsigned sourceLen,
80c80
<                                        char *source, unsigned int sourceLen,
---
>                                        char *source, unsigned int ,
80,81c80
<                                        char *source, unsigned int sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *source, unsigned int sourceLenint small, int verbosity) {
81c81
<                                        int small, int verbosity) {
---
>                                        small, int verbosity) {
81c81
<                                        int small, int verbosity) {
---
>                                        int , int verbosity) {
81c81
<                                        int small, int verbosity) {
---
>                                        int smallint verbosity) {
81c81
<                                        int small, int verbosity) {
---
>                                        int small, verbosity) {
81c81
<                                        int small, int verbosity) {
---
>                                        int small, int ) {
(98.7 %, 2575 bytes)
80c80
<                                        char *source, unsigned sourceLen,
---
>                                        char *source, unsigned ,
80,81c80
<                                        char *source, unsigned sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *source, unsigned sourceLenint small, int verbosity) {
81c81
<                                        int small, int verbosity) {
---
>                                        small, int verbosity) {
81c81
<                                        int small, int verbosity) {
---
>                                        int , int verbosity) {
81c81
<                                        int small, int verbosity) {
---
>                                        int smallint verbosity) {
81c81
<                                        int small, int verbosity) {
---
>                                        int small, verbosity) {
81c81
<                                        int small, int verbosity) {
---
>                                        int small, int ) {
81c81
<                                        int small, int verbosity) {
---
>                                        int small, int verbosity{
81,82c81
<                                        int small, int verbosity) {
<   int bzerr, nread;
---
>                                        int small, int verbosity) int bzerr, nread;
82c82
<   int bzerr, nread;
---
>   bzerr, nread;
82c82
<   int bzerr, nread;
---
>   int , nread;
82c82
<   int bzerr, nread;
---
>   int bzerrnread;
82c82
<   int bzerr, nread;
---
>   int bzerr, ;
82,83c82
<   int bzerr, nread;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   int bzerr, nreadif (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
83c83
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
83c83
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   if bzerr == BZ_OK || bzerr == BZ_STREAM_END)
83c83
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   if (== BZ_OK || bzerr == BZ_STREAM_END)
83c83
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   if (bzerr BZ_OK || bzerr == BZ_STREAM_END)
83c83
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   if (bzerr == || bzerr == BZ_STREAM_END)
83c83
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   if (bzerr == BZ_OK bzerr == BZ_STREAM_END)
83c83
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   if (bzerr == BZ_OK || == BZ_STREAM_END)
83c83
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   if (bzerr == BZ_OK || bzerr BZ_STREAM_END)
83c83
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   if (bzerr == BZ_OK || bzerr == )
83,84c83
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
<     ;
---
>   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END;
84,85c84
<     ;
<   else
---
>     else
85,86c85
<   else
<     ;
---
>   ;
86,87c86
<     ;
< }
---
>     }
87,88d86
< }
< 
(98.7 %, 2566 bytes)
85,86c85
<   ;
< }
---
>   }
86,87d85
< }
< 
(98.7 %, 2564 bytes)
85,86c85
<   }
< 
---
>   
\ No newline at end of file
===< pass_clex :: rm-tok-pattern-4 >===
3c3
< #define BZ_OK 2
---
> define BZ_OK 2
3c3
< #define BZ_OK 2
---
>  BZ_OK 2
3c3
< #define BZ_OK 2
---
> define  2
3c3
< #define BZ_OK 2
---
>   2
3c3
< #define BZ_OK 2
---
> define BZ_OK 
3c3
< #define BZ_OK 2
---
>  BZ_OK 
3c3
< #define BZ_OK 2
---
> define  
3c3
< #define BZ_OK 2
---
>   
3c3
< #define BZ_OK 2
---
> # BZ_OK 2
3c3
< #define BZ_OK 2
---
> #  2
3c3
< #define BZ_OK 2
---
> # BZ_OK 
3c3
< #define BZ_OK 2
---
> #  
3,4c3,4
< #define BZ_OK 2
< #define BZ_FINISH_OK 3
---
> # BZ_OK 2
> define BZ_FINISH_OK 3
3,4c3,4
< #define BZ_OK 2
< #define BZ_FINISH_OK 3
---
> #  2
> define BZ_FINISH_OK 3
3,4c3,4
< #define BZ_OK 2
< #define BZ_FINISH_OK 3
---
> # BZ_OK 
> define BZ_FINISH_OK 3
3,4c3,4
< #define BZ_OK 2
< #define BZ_FINISH_OK 3
---
> #  
> define BZ_FINISH_OK 3
3c3
< #define BZ_OK 2
---
> #define  2
3c3
< #define BZ_OK 2
---
> #define  
3,4c3,4
< #define BZ_OK 2
< #define BZ_FINISH_OK 3
---
> #define  2
> define BZ_FINISH_OK 3
3,4c3,4
< #define BZ_OK 2
< #define BZ_FINISH_OK 3
---
> #define  
> define BZ_FINISH_OK 3
3,4c3,4
< #define BZ_OK 2
< #define BZ_FINISH_OK 3
---
> #define  2
> # BZ_FINISH_OK 3
3,4c3,4
< #define BZ_OK 2
< #define BZ_FINISH_OK 3
---
> #define  
> # BZ_FINISH_OK 3
3,4c3,4
< #define BZ_OK 2
< #define BZ_FINISH_OK 3
---
> #define  2
>  BZ_FINISH_OK 3
3,4c3,4
< #define BZ_OK 2
< #define BZ_FINISH_OK 3
---
> #define  
>  BZ_FINISH_OK 3
3c3
< #define BZ_OK 2
---
> #define BZ_OK 
3,4c3,4
< #define BZ_OK 2
< #define BZ_FINISH_OK 3
---
> #define BZ_OK 
> define BZ_FINISH_OK 3
3,4c3,4
< #define BZ_OK 2
< #define BZ_FINISH_OK 3
---
> #define BZ_OK 
> # BZ_FINISH_OK 3
3,4c3,4
< #define BZ_OK 2
< #define BZ_FINISH_OK 3
---
> #define BZ_OK 
>  BZ_FINISH_OK 3
3,4c3,4
< #define BZ_OK 2
< #define BZ_FINISH_OK 3
---
> #define BZ_OK 
> #define  3
3,4c3,4
< #define BZ_OK 2
< #define BZ_FINISH_OK 3
---
> #define BZ_OK 
> define  3
3,4c3,4
< #define BZ_OK 2
< #define BZ_FINISH_OK 3
---
> #define BZ_OK 
> #  3
3,4c3,4
< #define BZ_OK 2
< #define BZ_FINISH_OK 3
---
> #define BZ_OK 
>   3
4c4
< #define BZ_FINISH_OK 3
---
> define BZ_FINISH_OK 3
4c4
< #define BZ_FINISH_OK 3
---
>  BZ_FINISH_OK 3
4c4
< #define BZ_FINISH_OK 3
---
> define  3
4c4
< #define BZ_FINISH_OK 3
---
>   3
4c4
< #define BZ_FINISH_OK 3
---
> define BZ_FINISH_OK 
4c4
< #define BZ_FINISH_OK 3
---
>  BZ_FINISH_OK 
4c4
< #define BZ_FINISH_OK 3
---
> define  
4c4
< #define BZ_FINISH_OK 3
---
>   
4c4
< #define BZ_FINISH_OK 3
---
> # BZ_FINISH_OK 3
4c4
< #define BZ_FINISH_OK 3
---
> #  3
(98.8 %, 2544 bytes)
5c5
< #define BZ_STREAM_END 4
---
>   
5c5
< #define BZ_STREAM_END 4
---
> # BZ_STREAM_END 4
5c5
< #define BZ_STREAM_END 4
---
> #  4
5c5
< #define BZ_STREAM_END 4
---
> # BZ_STREAM_END 
5c5
< #define BZ_STREAM_END 4
---
> #  
5,6c5,6
< #define BZ_STREAM_END 4
< typedef bz_stream;
---
> # BZ_STREAM_END 4
>  bz_stream;
5,6c5,6
< #define BZ_STREAM_END 4
< typedef bz_stream;
---
> #  4
>  bz_stream;
5,6c5,6
< #define BZ_STREAM_END 4
< typedef bz_stream;
---
> # BZ_STREAM_END 
>  bz_stream;
5,6c5,6
< #define BZ_STREAM_END 4
< typedef bz_stream;
---
> #  
>  bz_stream;
5c5
< #define BZ_STREAM_END 4
---
> #define  4
5c5
< #define BZ_STREAM_END 4
---
> #define  
5,6c5,6
< #define BZ_STREAM_END 4
< typedef bz_stream;
---
> #define  4
>  bz_stream;
5,6c5,6
< #define BZ_STREAM_END 4
< typedef bz_stream;
---
> #define  
>  bz_stream;
5,6c5,6
< #define BZ_STREAM_END 4
< typedef bz_stream;
---
> #define  4
> typedef ;
5,6c5,6
< #define BZ_STREAM_END 4
< typedef bz_stream;
---
> #define  
> typedef ;
5,6c5,6
< #define BZ_STREAM_END 4
< typedef bz_stream;
---
> #define  4
>  ;
5,6c5,6
< #define BZ_STREAM_END 4
< typedef bz_stream;
---
> #define  
>  ;
5c5
< #define BZ_STREAM_END 4
---
> #define BZ_STREAM_END 
5,6c5,6
< #define BZ_STREAM_END 4
< typedef bz_stream;
---
> #define BZ_STREAM_END 
>  bz_stream;
5,6c5,6
< #define BZ_STREAM_END 4
< typedef bz_stream;
---
> #define BZ_STREAM_END 
> typedef ;
5,6c5,6
< #define BZ_STREAM_END 4
< typedef bz_stream;
---
> #define BZ_STREAM_END 
>  ;
5,6c5,6
< #define BZ_STREAM_END 4
< typedef bz_stream;
---
> #define BZ_STREAM_END 
> typedef bz_stream
5,6c5,6
< #define BZ_STREAM_END 4
< typedef bz_stream;
---
> #define BZ_STREAM_END 
>  bz_stream
5,6c5,6
< #define BZ_STREAM_END 4
< typedef bz_stream;
---
> #define BZ_STREAM_END 
> typedef 
5,6c5,6
< #define BZ_STREAM_END 4
< typedef bz_stream;
---
> #define BZ_STREAM_END 
>  
6c6
< typedef bz_stream;
---
>  bz_stream;
6c6
< typedef bz_stream;
---
>  ;
6c6
< typedef bz_stream;
---
>  bz_stream
6c6
< typedef bz_stream;
---
>  
6c6
< typedef bz_stream;
---
>  bz_stream;
8c8
< #include <stdio.h>
---
> include <stdio.h>
6c6
< typedef bz_stream;
---
>  ;
8c8
< #include <stdio.h>
---
> include <stdio.h>
6c6
< typedef bz_stream;
---
>  bz_stream
8c8
< #include <stdio.h>
---
> include <stdio.h>
6c6
< typedef bz_stream;
---
>  
8c8
< #include <stdio.h>
---
> include <stdio.h>
6c6
< typedef bz_stream;
---
> typedef ;
6c6
< typedef bz_stream;
---
> typedef 
6c6
< typedef bz_stream;
---
> typedef ;
8c8
< #include <stdio.h>
---
> include <stdio.h>
6c6
< typedef bz_stream;
---
> typedef 
8c8
< #include <stdio.h>
---
> include <stdio.h>
6c6
< typedef bz_stream;
---
> typedef ;
8c8
< #include <stdio.h>
---
> # <stdio.h>
6c6
< typedef bz_stream;
---
> typedef 
8c8
< #include <stdio.h>
---
> # <stdio.h>
6c6
< typedef bz_stream;
---
> typedef ;
8c8
< #include <stdio.h>
---
>  <stdio.h>
6c6
< typedef bz_stream;
---
> typedef 
8c8
< #include <stdio.h>
---
>  <stdio.h>
6c6
< typedef bz_stream;
---
> typedef bz_stream
6c6
< typedef bz_stream;
---
> typedef bz_stream
8c8
< #include <stdio.h>
---
> include <stdio.h>
6c6
< typedef bz_stream;
---
> typedef bz_stream
8c8
< #include <stdio.h>
---
> # <stdio.h>
6c6
< typedef bz_stream;
---
> typedef bz_stream
8c8
< #include <stdio.h>
---
>  <stdio.h>
6c6
< typedef bz_stream;
---
> typedef bz_stream
8c8
< #include <stdio.h>
---
> #include stdio.h>
6c6
< typedef bz_stream;
---
> typedef bz_stream
8c8
< #include <stdio.h>
---
> include stdio.h>
6c6
< typedef bz_stream;
---
> typedef bz_stream
8c8
< #include <stdio.h>
---
> # stdio.h>
6c6
< typedef bz_stream;
---
> typedef bz_stream
8c8
< #include <stdio.h>
---
>  stdio.h>
8c8
< #include <stdio.h>
---
> include <stdio.h>
8c8
< #include <stdio.h>
---
>  <stdio.h>
8c8
< #include <stdio.h>
---
> include stdio.h>
8c8
< #include <stdio.h>
---
>  stdio.h>
8c8
< #include <stdio.h>
---
> include <.h>
8c8
< #include <stdio.h>
---
>  <.h>
8c8
< #include <stdio.h>
---
> include .h>
8c8
< #include <stdio.h>
---
>  .h>
8c8
< #include <stdio.h>
---
> # <stdio.h>
8c8
< #include <stdio.h>
---
> # stdio.h>
8c8
< #include <stdio.h>
---
> # <.h>
8c8
< #include <stdio.h>
---
> # .h>
8c8
< #include <stdio.h>
---
> # <stdioh>
8c8
< #include <stdio.h>
---
> # stdioh>
8c8
< #include <stdio.h>
---
> # <h>
8c8
< #include <stdio.h>
---
> # h>
8c8
< #include <stdio.h>
---
> #include stdio.h>
8c8
< #include <stdio.h>
---
> #include .h>
8c8
< #include <stdio.h>
---
> #include stdioh>
8c8
< #include <stdio.h>
---
> #include h>
8c8
< #include <stdio.h>
---
> #include stdio.>
8c8
< #include <stdio.h>
---
> #include .>
8c8
< #include <stdio.h>
---
> #include stdio>
8c8
< #include <stdio.h>
---
> #include >
8c8
< #include <stdio.h>
---
> #include <.h>
8c8
< #include <stdio.h>
---
> #include <h>
8c8
< #include <stdio.h>
---
> #include <.>
8c8
< #include <stdio.h>
---
> #include <>
8c8
< #include <stdio.h>
---
> #include <.h
8c8
< #include <stdio.h>
---
> #include <h
8c8
< #include <stdio.h>
---
> #include <.
8c8
< #include <stdio.h>
---
> #include <
8c8
< #include <stdio.h>
---
> #include <stdioh>
8c8
< #include <stdio.h>
---
> #include <stdio>
8c8
< #include <stdio.h>
---
> #include <stdioh
8c8
< #include <stdio.h>
---
> #include <stdio
8c8
< #include <stdio.h>
---
> #include <stdioh>
10c10
< #define BZ_API(func) func
---
> define BZ_API(func) func
8c8
< #include <stdio.h>
---
> #include <stdio>
10c10
< #define BZ_API(func) func
---
> define BZ_API(func) func
8c8
< #include <stdio.h>
---
> #include <stdioh
10c10
< #define BZ_API(func) func
---
> define BZ_API(func) func
8c8
< #include <stdio.h>
---
> #include <stdio
10c10
< #define BZ_API(func) func
---
> define BZ_API(func) func
8c8
< #include <stdio.h>
---
> #include <stdio.>
8c8
< #include <stdio.h>
---
> #include <stdio.
8c8
< #include <stdio.h>
---
> #include <stdio.>
10c10
< #define BZ_API(func) func
---
> define BZ_API(func) func
8c8
< #include <stdio.h>
---
> #include <stdio.
10c10
< #define BZ_API(func) func
---
> define BZ_API(func) func
8c8
< #include <stdio.h>
---
> #include <stdio.>
10c10
< #define BZ_API(func) func
---
> # BZ_API(func) func
8c8
< #include <stdio.h>
---
> #include <stdio.
10c10
< #define BZ_API(func) func
---
> # BZ_API(func) func
8c8
< #include <stdio.h>
---
> #include <stdio.>
10c10
< #define BZ_API(func) func
---
>  BZ_API(func) func
8c8
< #include <stdio.h>
---
> #include <stdio.
10c10
< #define BZ_API(func) func
---
>  BZ_API(func) func
8c8
< #include <stdio.h>
---
> #include <stdio.h
8c8
< #include <stdio.h>
---
> #include <stdio.h
10c10
< #define BZ_API(func) func
---
> define BZ_API(func) func
8c8
< #include <stdio.h>
---
> #include <stdio.h
10c10
< #define BZ_API(func) func
---
> # BZ_API(func) func
8c8
< #include <stdio.h>
---
> #include <stdio.h
10c10
< #define BZ_API(func) func
---
>  BZ_API(func) func
8c8
< #include <stdio.h>
---
> #include <stdio.h
10c10
< #define BZ_API(func) func
---
> #define (func) func
8c8
< #include <stdio.h>
---
> #include <stdio.h
10c10
< #define BZ_API(func) func
---
> define (func) func
8c8
< #include <stdio.h>
---
> #include <stdio.h
10c10
< #define BZ_API(func) func
---
> # (func) func
8c8
< #include <stdio.h>
---
> #include <stdio.h
10c10
< #define BZ_API(func) func
---
>  (func) func
10c10
< #define BZ_API(func) func
---
> define BZ_API(func) func
10c10
< #define BZ_API(func) func
---
>  BZ_API(func) func
10c10
< #define BZ_API(func) func
---
> define (func) func
10c10
< #define BZ_API(func) func
---
>  (func) func
10c10
< #define BZ_API(func) func
---
> define BZ_APIfunc) func
10c10
< #define BZ_API(func) func
---
>  BZ_APIfunc) func
10c10
< #define BZ_API(func) func
---
> define func) func
10c10
< #define BZ_API(func) func
---
>  func) func
10c10
< #define BZ_API(func) func
---
> # BZ_API(func) func
10c10
< #define BZ_API(func) func
---
> # (func) func
10c10
< #define BZ_API(func) func
---
> # BZ_APIfunc) func
10c10
< #define BZ_API(func) func
---
> # func) func
10c10
< #define BZ_API(func) func
---
> # BZ_API() func
10c10
< #define BZ_API(func) func
---
> # () func
10c10
< #define BZ_API(func) func
---
> # BZ_API) func
10c10
< #define BZ_API(func) func
---
> # ) func
10c10
< #define BZ_API(func) func
---
> #define (func) func
10c10
< #define BZ_API(func) func
---
> #define func) func
10c10
< #define BZ_API(func) func
---
> #define () func
10c10
< #define BZ_API(func) func
---
> #define ) func
10c10
< #define BZ_API(func) func
---
> #define (func func
10c10
< #define BZ_API(func) func
---
> #define func func
10c10
< #define BZ_API(func) func
---
> #define ( func
10c10
< #define BZ_API(func) func
---
> #define  func
10c10
< #define BZ_API(func) func
---
> #define BZ_APIfunc) func
10c10
< #define BZ_API(func) func
---
> #define BZ_API) func
10c10
< #define BZ_API(func) func
---
> #define BZ_APIfunc func
10c10
< #define BZ_API(func) func
---
> #define BZ_API func
10c10
< #define BZ_API(func) func
---
> #define BZ_APIfunc) 
10c10
< #define BZ_API(func) func
---
> #define BZ_API) 
10c10
< #define BZ_API(func) func
---
> #define BZ_APIfunc 
10c10
< #define BZ_API(func) func
---
> #define BZ_API 
10c10
< #define BZ_API(func) func
---
> #define BZ_API() func
10c10
< #define BZ_API(func) func
---
> #define BZ_API( func
10c10
< #define BZ_API(func) func
---
> #define BZ_API() 
10c10
< #define BZ_API(func) func
---
> #define BZ_API( 
10,11c10,11
< #define BZ_API(func) func
< #define BZ_EXTERN extern
---
> #define BZ_API() func
> define BZ_EXTERN extern
10,11c10,11
< #define BZ_API(func) func
< #define BZ_EXTERN extern
---
> #define BZ_API( func
> define BZ_EXTERN extern
10,11c10,11
< #define BZ_API(func) func
< #define BZ_EXTERN extern
---
> #define BZ_API() 
> define BZ_EXTERN extern
(98.8 %, 2534 bytes)
11c11
< #define BZ_EXTERN extern
---
>   
11c11
< #define BZ_EXTERN extern
---
> # BZ_EXTERN extern
11c11
< #define BZ_EXTERN extern
---
> #  extern
11c11
< #define BZ_EXTERN extern
---
> # BZ_EXTERN 
11c11
< #define BZ_EXTERN extern
---
> #  
(98.8 %, 2512 bytes)
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> bz_stream *, int ,
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> ()(bz_stream *, int ,
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> ((bz_stream *, int ,
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> ()bz_stream *, int ,
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> ()( *, int ,
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (( *, int ,
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> () *, int ,
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> ( *, int ,
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (BZ2_bzCompressInit(bz_stream *, int ,
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (BZ2_bzCompressInitbz_stream *, int ,
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (BZ2_bzCompressInit( *, int ,
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (BZ2_bzCompressInit *, int ,
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (BZ2_bzCompressInit(bz_stream , int ,
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (BZ2_bzCompressInitbz_stream , int ,
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (BZ2_bzCompressInit( , int ,
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (BZ2_bzCompressInit , int ,
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (BZ2_bzCompressInit)bz_stream *, int ,
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (BZ2_bzCompressInit) *, int ,
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (BZ2_bzCompressInit)bz_stream , int ,
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (BZ2_bzCompressInit) , int ,
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (BZ2_bzCompressInit)bz_stream * int ,
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (BZ2_bzCompressInit) * int ,
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (BZ2_bzCompressInit)bz_stream  int ,
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (BZ2_bzCompressInit)  int ,
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (BZ2_bzCompressInit)( *, int ,
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (BZ2_bzCompressInit)( , int ,
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (BZ2_bzCompressInit)( * int ,
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (BZ2_bzCompressInit)(  int ,
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (BZ2_bzCompressInit)( *,  ,
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (BZ2_bzCompressInit)( ,  ,
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (BZ2_bzCompressInit)( *  ,
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (BZ2_bzCompressInit)(   ,
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (BZ2_bzCompressInit)(bz_stream , int ,
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (BZ2_bzCompressInit)(bz_stream  int ,
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (BZ2_bzCompressInit)(bz_stream ,  ,
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (BZ2_bzCompressInit)(bz_stream   ,
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (BZ2_bzCompressInit)(bz_stream , int 
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (BZ2_bzCompressInit)(bz_stream  int 
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (BZ2_bzCompressInit)(bz_stream ,  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (BZ2_bzCompressInit)(bz_stream   
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (BZ2_bzCompressInit)(bz_stream * int ,
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (BZ2_bzCompressInit)(bz_stream *  ,
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (BZ2_bzCompressInit)(bz_stream * int 
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (BZ2_bzCompressInit)(bz_stream *  
13,14c13,14
< (BZ2_bzCompressInit)(bz_stream *, int ,
<                                          int , int );
---
> (BZ2_bzCompressInit)(bz_stream * int ,
>                                           , int );
13,14c13,14
< (BZ2_bzCompressInit)(bz_stream *, int ,
<                                          int , int );
---
> (BZ2_bzCompressInit)(bz_stream *  ,
>                                           , int );
13,14c13,14
< (BZ2_bzCompressInit)(bz_stream *, int ,
<                                          int , int );
---
> (BZ2_bzCompressInit)(bz_stream * int 
>                                           , int );
13,14c13,14
< (BZ2_bzCompressInit)(bz_stream *, int ,
<                                          int , int );
---
> (BZ2_bzCompressInit)(bz_stream *  
>                                           , int );
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (BZ2_bzCompressInit)(bz_stream *,  ,
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (BZ2_bzCompressInit)(bz_stream *,  
13,14c13,14
< (BZ2_bzCompressInit)(bz_stream *, int ,
<                                          int , int );
---
> (BZ2_bzCompressInit)(bz_stream *,  ,
>                                           , int );
13,14c13,14
< (BZ2_bzCompressInit)(bz_stream *, int ,
<                                          int , int );
---
> (BZ2_bzCompressInit)(bz_stream *,  
>                                           , int );
13,14c13,14
< (BZ2_bzCompressInit)(bz_stream *, int ,
<                                          int , int );
---
> (BZ2_bzCompressInit)(bz_stream *,  ,
>                                          int  int );
13,14c13,14
< (BZ2_bzCompressInit)(bz_stream *, int ,
<                                          int , int );
---
> (BZ2_bzCompressInit)(bz_stream *,  
>                                          int  int );
13,14c13,14
< (BZ2_bzCompressInit)(bz_stream *, int ,
<                                          int , int );
---
> (BZ2_bzCompressInit)(bz_stream *,  ,
>                                            int );
13,14c13,14
< (BZ2_bzCompressInit)(bz_stream *, int ,
<                                          int , int );
---
> (BZ2_bzCompressInit)(bz_stream *,  
>                                            int );
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (BZ2_bzCompressInit)(bz_stream *, int 
13,14c13,14
< (BZ2_bzCompressInit)(bz_stream *, int ,
<                                          int , int );
---
> (BZ2_bzCompressInit)(bz_stream *, int 
>                                           , int );
13,14c13,14
< (BZ2_bzCompressInit)(bz_stream *, int ,
<                                          int , int );
---
> (BZ2_bzCompressInit)(bz_stream *, int 
>                                          int  int );
13,14c13,14
< (BZ2_bzCompressInit)(bz_stream *, int ,
<                                          int , int );
---
> (BZ2_bzCompressInit)(bz_stream *, int 
>                                            int );
13,14c13,14
< (BZ2_bzCompressInit)(bz_stream *, int ,
<                                          int , int );
---
> (BZ2_bzCompressInit)(bz_stream *, int 
>                                          int ,  );
13,14c13,14
< (BZ2_bzCompressInit)(bz_stream *, int ,
<                                          int , int );
---
> (BZ2_bzCompressInit)(bz_stream *, int 
>                                           ,  );
13,14c13,14
< (BZ2_bzCompressInit)(bz_stream *, int ,
<                                          int , int );
---
> (BZ2_bzCompressInit)(bz_stream *, int 
>                                          int   );
13,14c13,14
< (BZ2_bzCompressInit)(bz_stream *, int ,
<                                          int , int );
---
> (BZ2_bzCompressInit)(bz_stream *, int 
>                                             );
14c14
<                                          int , int );
---
>                                           , int );
14c14
<                                          int , int );
---
>                                            int );
14c14
<                                          int , int );
---
>                                           ,  );
14c14
<                                          int , int );
---
>                                             );
14c14
<                                          int , int );
---
>                                           , int ;
14c14
<                                          int , int );
---
>                                            int ;
14c14
<                                          int , int );
---
>                                           ,  ;
14c14
<                                          int , int );
---
>                                             ;
14c14
<                                          int , int );
---
>                                          int  int );
14c14
<                                          int , int );
---
>                                          int   );
14c14
<                                          int , int );
---
>                                          int  int ;
14c14
<                                          int , int );
---
>                                          int   ;
14c14
<                                          int , int );
---
>                                          int  int )
14c14
<                                          int , int );
---
>                                          int   )
14c14
<                                          int , int );
---
>                                          int  int 
14c14
<                                          int , int );
---
>                                          int   
14c14
<                                          int , int );
---
>                                          int ,  );
14c14
<                                          int , int );
---
>                                          int ,  ;
14c14
<                                          int , int );
---
>                                          int ,  )
14c14
<                                          int , int );
---
>                                          int ,  
14c14
<                                          int , int );
---
>                                          int ,  );
16c16
< typedef BZFILE;
---
>  BZFILE;
14c14
<                                          int , int );
---
>                                          int ,  ;
16c16
< typedef BZFILE;
---
>  BZFILE;
14c14
<                                          int , int );
---
>                                          int ,  )
16c16
< typedef BZFILE;
---
>  BZFILE;
14c14
<                                          int , int );
---
>                                          int ,  
16c16
< typedef BZFILE;
---
>  BZFILE;
14c14
<                                          int , int );
---
>                                          int , int ;
14c14
<                                          int , int );
---
>                                          int , int 
14c14
<                                          int , int );
---
>                                          int , int ;
16c16
< typedef BZFILE;
---
>  BZFILE;
14c14
<                                          int , int );
---
>                                          int , int 
16c16
< typedef BZFILE;
---
>  BZFILE;
14c14
<                                          int , int );
---
>                                          int , int ;
16c16
< typedef BZFILE;
---
> typedef ;
14c14
<                                          int , int );
---
>                                          int , int 
16c16
< typedef BZFILE;
---
> typedef ;
14c14
<                                          int , int );
---
>                                          int , int ;
16c16
< typedef BZFILE;
---
>  ;
14c14
<                                          int , int );
---
>                                          int , int 
16c16
< typedef BZFILE;
---
>  ;
14c14
<                                          int , int );
---
>                                          int , int )
14c14
<                                          int , int );
---
>                                          int , int )
16c16
< typedef BZFILE;
---
>  BZFILE;
14c14
<                                          int , int );
---
>                                          int , int )
16c16
< typedef BZFILE;
---
> typedef ;
14c14
<                                          int , int );
---
>                                          int , int )
16c16
< typedef BZFILE;
---
>  ;
14c14
<                                          int , int );
---
>                                          int , int )
16c16
< typedef BZFILE;
---
> typedef BZFILE
14c14
<                                          int , int );
---
>                                          int , int )
16c16
< typedef BZFILE;
---
>  BZFILE
14c14
<                                          int , int );
---
>                                          int , int )
16c16
< typedef BZFILE;
---
> typedef 
14c14
<                                          int , int );
---
>                                          int , int )
16c16
< typedef BZFILE;
---
>  
16c16
< typedef BZFILE;
---
>  BZFILE;
16c16
< typedef BZFILE;
---
>  ;
16c16
< typedef BZFILE;
---
>  BZFILE
16c16
< typedef BZFILE;
---
>  
16c16
< typedef BZFILE;
---
>  BZFILE;
18c18
< void (BZ2_bzReadGetUnused)(int *, BZFILE *,
---
>  (BZ2_bzReadGetUnused)(int *, BZFILE *,
16c16
< typedef BZFILE;
---
>  ;
18c18
< void (BZ2_bzReadGetUnused)(int *, BZFILE *,
---
>  (BZ2_bzReadGetUnused)(int *, BZFILE *,
16c16
< typedef BZFILE;
---
>  BZFILE
18c18
< void (BZ2_bzReadGetUnused)(int *, BZFILE *,
---
>  (BZ2_bzReadGetUnused)(int *, BZFILE *,
16c16
< typedef BZFILE;
---
>  
18c18
< void (BZ2_bzReadGetUnused)(int *, BZFILE *,
---
>  (BZ2_bzReadGetUnused)(int *, BZFILE *,
16c16
< typedef BZFILE;
---
> typedef ;
16c16
< typedef BZFILE;
---
> typedef 
16c16
< typedef BZFILE;
---
> typedef ;
18c18
< void (BZ2_bzReadGetUnused)(int *, BZFILE *,
---
>  (BZ2_bzReadGetUnused)(int *, BZFILE *,
16c16
< typedef BZFILE;
---
> typedef 
18c18
< void (BZ2_bzReadGetUnused)(int *, BZFILE *,
---
>  (BZ2_bzReadGetUnused)(int *, BZFILE *,
16c16
< typedef BZFILE;
---
> typedef ;
18c18
< void (BZ2_bzReadGetUnused)(int *, BZFILE *,
---
> void BZ2_bzReadGetUnused)(int *, BZFILE *,
16c16
< typedef BZFILE;
---
> typedef 
18c18
< void (BZ2_bzReadGetUnused)(int *, BZFILE *,
---
> void BZ2_bzReadGetUnused)(int *, BZFILE *,
16c16
< typedef BZFILE;
---
> typedef ;
18c18
< void (BZ2_bzReadGetUnused)(int *, BZFILE *,
---
>  BZ2_bzReadGetUnused)(int *, BZFILE *,
16c16
< typedef BZFILE;
---
> typedef 
18c18
< void (BZ2_bzReadGetUnused)(int *, BZFILE *,
---
>  BZ2_bzReadGetUnused)(int *, BZFILE *,
16c16
< typedef BZFILE;
---
> typedef BZFILE
16c16
< typedef BZFILE;
---
> typedef BZFILE
18c18
< void (BZ2_bzReadGetUnused)(int *, BZFILE *,
---
>  (BZ2_bzReadGetUnused)(int *, BZFILE *,
16c16
< typedef BZFILE;
---
> typedef BZFILE
18c18
< void (BZ2_bzReadGetUnused)(int *, BZFILE *,
---
> void BZ2_bzReadGetUnused)(int *, BZFILE *,
16c16
< typedef BZFILE;
---
> typedef BZFILE
18c18
< void (BZ2_bzReadGetUnused)(int *, BZFILE *,
---
>  BZ2_bzReadGetUnused)(int *, BZFILE *,
16c16
< typedef BZFILE;
---
> typedef BZFILE
18c18
< void (BZ2_bzReadGetUnused)(int *, BZFILE *,
---
> void ()(int *, BZFILE *,
16c16
< typedef BZFILE;
---
> typedef BZFILE
18c18
< void (BZ2_bzReadGetUnused)(int *, BZFILE *,
---
>  ()(int *, BZFILE *,
16c16
< typedef BZFILE;
---
> typedef BZFILE
18c18
< void (BZ2_bzReadGetUnused)(int *, BZFILE *,
---
> void )(int *, BZFILE *,
16c16
< typedef BZFILE;
---
> typedef BZFILE
18c18
< void (BZ2_bzReadGetUnused)(int *, BZFILE *,
---
>  )(int *, BZFILE *,
18c18
< void (BZ2_bzReadGetUnused)(int *, BZFILE *,
---
>  (BZ2_bzReadGetUnused)(int *, BZFILE *,
18c18
< void (BZ2_bzReadGetUnused)(int *, BZFILE *,
---
>  BZ2_bzReadGetUnused)(int *, BZFILE *,
18c18
< void (BZ2_bzReadGetUnused)(int *, BZFILE *,
---
>  ()(int *, BZFILE *,
18c18
< void (BZ2_bzReadGetUnused)(int *, BZFILE *,
---
>  )(int *, BZFILE *,
18c18
< void (BZ2_bzReadGetUnused)(int *, BZFILE *,
---
>  (BZ2_bzReadGetUnused(int *, BZFILE *,
18c18
< void (BZ2_bzReadGetUnused)(int *, BZFILE *,
---
>  BZ2_bzReadGetUnused(int *, BZFILE *,
18c18
< void (BZ2_bzReadGetUnused)(int *, BZFILE *,
---
>  ((int *, BZFILE *,
18c18
< void (BZ2_bzReadGetUnused)(int *, BZFILE *,
---
>  (int *, BZFILE *,
18c18
< void (BZ2_bzReadGetUnused)(int *, BZFILE *,
---
> void BZ2_bzReadGetUnused)(int *, BZFILE *,
18c18
< void (BZ2_bzReadGetUnused)(int *, BZFILE *,
---
> void )(int *, BZFILE *,
18c18
< void (BZ2_bzReadGetUnused)(int *, BZFILE *,
---
> void BZ2_bzReadGetUnused(int *, BZFILE *,
18c18
< void (BZ2_bzReadGetUnused)(int *, BZFILE *,
---
> void (int *, BZFILE *,
18c18
< void (BZ2_bzReadGetUnused)(int *, BZFILE *,
---
> void BZ2_bzReadGetUnused)int *, BZFILE *,
18c18
< void (BZ2_bzReadGetUnused)(int *, BZFILE *,
---
> void )int *, BZFILE *,
18c18
< void (BZ2_bzReadGetUnused)(int *, BZFILE *,
---
> void BZ2_bzReadGetUnusedint *, BZFILE *,
18c18
< void (BZ2_bzReadGetUnused)(int *, BZFILE *,
---
> void int *, BZFILE *,
18c18
< void (BZ2_bzReadGetUnused)(int *, BZFILE *,
---
> void ()(int *, BZFILE *,
18c18
< void (BZ2_bzReadGetUnused)(int *, BZFILE *,
---
> void ((int *, BZFILE *,
(98.8 %, 2510 bytes)
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void ( *, BZFILE *,
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void  *, BZFILE *,
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void (int , BZFILE *,
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void int , BZFILE *,
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void ( , BZFILE *,
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void  , BZFILE *,
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void BZ2_bzReadGetUnusedint *, BZFILE *,
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void BZ2_bzReadGetUnused *, BZFILE *,
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void BZ2_bzReadGetUnusedint , BZFILE *,
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void BZ2_bzReadGetUnused , BZFILE *,
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void BZ2_bzReadGetUnusedint * BZFILE *,
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void BZ2_bzReadGetUnused * BZFILE *,
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void BZ2_bzReadGetUnusedint  BZFILE *,
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void BZ2_bzReadGetUnused  BZFILE *,
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void BZ2_bzReadGetUnused( *, BZFILE *,
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void BZ2_bzReadGetUnused( , BZFILE *,
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void BZ2_bzReadGetUnused( * BZFILE *,
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void BZ2_bzReadGetUnused(  BZFILE *,
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void BZ2_bzReadGetUnused( *,  *,
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void BZ2_bzReadGetUnused( ,  *,
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void BZ2_bzReadGetUnused( *  *,
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void BZ2_bzReadGetUnused(   *,
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void BZ2_bzReadGetUnused(int , BZFILE *,
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void BZ2_bzReadGetUnused(int  BZFILE *,
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void BZ2_bzReadGetUnused(int ,  *,
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void BZ2_bzReadGetUnused(int   *,
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void BZ2_bzReadGetUnused(int , BZFILE ,
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void BZ2_bzReadGetUnused(int  BZFILE ,
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void BZ2_bzReadGetUnused(int ,  ,
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void BZ2_bzReadGetUnused(int   ,
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void BZ2_bzReadGetUnused(int * BZFILE *,
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void BZ2_bzReadGetUnused(int *  *,
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void BZ2_bzReadGetUnused(int * BZFILE ,
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void BZ2_bzReadGetUnused(int *  ,
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void BZ2_bzReadGetUnused(int * BZFILE *
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void BZ2_bzReadGetUnused(int *  *
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void BZ2_bzReadGetUnused(int * BZFILE 
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void BZ2_bzReadGetUnused(int *  
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void BZ2_bzReadGetUnused(int *,  *,
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void BZ2_bzReadGetUnused(int *,  ,
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void BZ2_bzReadGetUnused(int *,  *
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void BZ2_bzReadGetUnused(int *,  
18,19c18,19
< void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **, int *);
---
> void BZ2_bzReadGetUnused(int *,  *,
>                                             **, int *);
18,19c18,19
< void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **, int *);
---
> void BZ2_bzReadGetUnused(int *,  ,
>                                             **, int *);
18,19c18,19
< void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **, int *);
---
> void BZ2_bzReadGetUnused(int *,  *
>                                             **, int *);
18,19c18,19
< void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **, int *);
---
> void BZ2_bzReadGetUnused(int *,  
>                                             **, int *);
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void BZ2_bzReadGetUnused(int *, BZFILE ,
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void BZ2_bzReadGetUnused(int *, BZFILE 
18,19c18,19
< void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **, int *);
---
> void BZ2_bzReadGetUnused(int *, BZFILE ,
>                                             **, int *);
18,19c18,19
< void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **, int *);
---
> void BZ2_bzReadGetUnused(int *, BZFILE 
>                                             **, int *);
18,19c18,19
< void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **, int *);
---
> void BZ2_bzReadGetUnused(int *, BZFILE ,
>                                            void *, int *);
18,19c18,19
< void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **, int *);
---
> void BZ2_bzReadGetUnused(int *, BZFILE 
>                                            void *, int *);
18,19c18,19
< void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **, int *);
---
> void BZ2_bzReadGetUnused(int *, BZFILE ,
>                                             *, int *);
18,19c18,19
< void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **, int *);
---
> void BZ2_bzReadGetUnused(int *, BZFILE 
>                                             *, int *);
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void BZ2_bzReadGetUnused(int *, BZFILE *
18,19c18,19
< void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **, int *);
---
> void BZ2_bzReadGetUnused(int *, BZFILE *
>                                             **, int *);
18,19c18,19
< void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **, int *);
---
> void BZ2_bzReadGetUnused(int *, BZFILE *
>                                            void *, int *);
18,19c18,19
< void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **, int *);
---
> void BZ2_bzReadGetUnused(int *, BZFILE *
>                                             *, int *);
18,19c18,19
< void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **, int *);
---
> void BZ2_bzReadGetUnused(int *, BZFILE *
>                                            void *, int *);
18,19c18,19
< void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **, int *);
---
> void BZ2_bzReadGetUnused(int *, BZFILE *
>                                             *, int *);
18,19c18,19
< void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **, int *);
---
> void BZ2_bzReadGetUnused(int *, BZFILE *
>                                            void , int *);
18,19c18,19
< void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **, int *);
---
> void BZ2_bzReadGetUnused(int *, BZFILE *
>                                             , int *);
19c19
<                                            void **, int *);
---
>                                             **, int *);
19c19
<                                            void **, int *);
---
>                                             *, int *);
19c19
<                                            void **, int *);
---
>                                             *, int *);
19c19
<                                            void **, int *);
---
>                                             , int *);
19c19
<                                            void **, int *);
---
>                                             ** int *);
19c19
<                                            void **, int *);
---
>                                             * int *);
19c19
<                                            void **, int *);
---
>                                             * int *);
19c19
<                                            void **, int *);
---
>                                              int *);
19c19
<                                            void **, int *);
---
>                                            void *, int *);
19c19
<                                            void **, int *);
---
>                                            void , int *);
19c19
<                                            void **, int *);
---
>                                            void * int *);
19c19
<                                            void **, int *);
---
>                                            void  int *);
19c19
<                                            void **, int *);
---
>                                            void *,  *);
19c19
<                                            void **, int *);
---
>                                            void ,  *);
19c19
<                                            void **, int *);
---
>                                            void *  *);
19c19
<                                            void **, int *);
---
>                                            void   *);
19c19
<                                            void **, int *);
---
>                                            void *, int *);
19c19
<                                            void **, int *);
---
>                                            void * int *);
19c19
<                                            void **, int *);
---
>                                            void *,  *);
19c19
<                                            void **, int *);
---
>                                            void *  *);
19c19
<                                            void **, int *);
---
>                                            void *, int );
19c19
<                                            void **, int *);
---
>                                            void * int );
19c19
<                                            void **, int *);
---
>                                            void *,  );
19c19
<                                            void **, int *);
---
>                                            void *  );
19c19
<                                            void **, int *);
---
>                                            void ** int *);
19c19
<                                            void **, int *);
---
>                                            void **  *);
19c19
<                                            void **, int *);
---
>                                            void ** int );
19c19
<                                            void **, int *);
---
>                                            void **  );
19c19
<                                            void **, int *);
---
>                                            void ** int *;
19c19
<                                            void **, int *);
---
>                                            void **  *;
19c19
<                                            void **, int *);
---
>                                            void ** int ;
19c19
<                                            void **, int *);
---
>                                            void **  ;
19c19
<                                            void **, int *);
---
>                                            void **,  *);
19c19
<                                            void **, int *);
---
>                                            void **,  );
19c19
<                                            void **, int *);
---
>                                            void **,  *;
19c19
<                                            void **, int *);
---
>                                            void **,  ;
19c19
<                                            void **, int *);
---
>                                            void **,  *)
19c19
<                                            void **, int *);
---
>                                            void **,  )
19c19
<                                            void **, int *);
---
>                                            void **,  *
19c19
<                                            void **, int *);
---
>                                            void **,  
19c19
<                                            void **, int *);
---
>                                            void **, int );
19c19
<                                            void **, int *);
---
>                                            void **, int ;
19c19
<                                            void **, int *);
---
>                                            void **, int )
19c19
<                                            void **, int *);
---
>                                            void **, int 
19c19
<                                            void **, int *);
---
>                                            void **, int );
21c21
< *(BZ2_bzWriteOpen)(int *, FILE *,
---
> (BZ2_bzWriteOpen)(int *, FILE *,
19c19
<                                            void **, int *);
---
>                                            void **, int ;
21c21
< *(BZ2_bzWriteOpen)(int *, FILE *,
---
> (BZ2_bzWriteOpen)(int *, FILE *,
19c19
<                                            void **, int *);
---
>                                            void **, int )
21c21
< *(BZ2_bzWriteOpen)(int *, FILE *,
---
> (BZ2_bzWriteOpen)(int *, FILE *,
19c19
<                                            void **, int *);
---
>                                            void **, int 
21c21
< *(BZ2_bzWriteOpen)(int *, FILE *,
---
> (BZ2_bzWriteOpen)(int *, FILE *,
19c19
<                                            void **, int *);
---
>                                            void **, int *;
19c19
<                                            void **, int *);
---
>                                            void **, int *
19c19
<                                            void **, int *);
---
>                                            void **, int *;
21c21
< *(BZ2_bzWriteOpen)(int *, FILE *,
---
> (BZ2_bzWriteOpen)(int *, FILE *,
19c19
<                                            void **, int *);
---
>                                            void **, int *
21c21
< *(BZ2_bzWriteOpen)(int *, FILE *,
---
> (BZ2_bzWriteOpen)(int *, FILE *,
19c19
<                                            void **, int *);
---
>                                            void **, int *;
21c21
< *(BZ2_bzWriteOpen)(int *, FILE *,
---
> *BZ2_bzWriteOpen)(int *, FILE *,
19c19
<                                            void **, int *);
---
>                                            void **, int *
21c21
< *(BZ2_bzWriteOpen)(int *, FILE *,
---
> *BZ2_bzWriteOpen)(int *, FILE *,
19c19
<                                            void **, int *);
---
>                                            void **, int *;
21c21
< *(BZ2_bzWriteOpen)(int *, FILE *,
---
> BZ2_bzWriteOpen)(int *, FILE *,
19c19
<                                            void **, int *);
---
>                                            void **, int *
21c21
< *(BZ2_bzWriteOpen)(int *, FILE *,
---
> BZ2_bzWriteOpen)(int *, FILE *,
19c19
<                                            void **, int *);
---
>                                            void **, int *)
19c19
<                                            void **, int *);
---
>                                            void **, int *)
21c21
< *(BZ2_bzWriteOpen)(int *, FILE *,
---
> (BZ2_bzWriteOpen)(int *, FILE *,
19c19
<                                            void **, int *);
---
>                                            void **, int *)
21c21
< *(BZ2_bzWriteOpen)(int *, FILE *,
---
> *BZ2_bzWriteOpen)(int *, FILE *,
19c19
<                                            void **, int *);
---
>                                            void **, int *)
21c21
< *(BZ2_bzWriteOpen)(int *, FILE *,
---
> BZ2_bzWriteOpen)(int *, FILE *,
19c19
<                                            void **, int *);
---
>                                            void **, int *)
21c21
< *(BZ2_bzWriteOpen)(int *, FILE *,
---
> *()(int *, FILE *,
19c19
<                                            void **, int *);
---
>                                            void **, int *)
21c21
< *(BZ2_bzWriteOpen)(int *, FILE *,
---
> ()(int *, FILE *,
19c19
<                                            void **, int *);
---
>                                            void **, int *)
21c21
< *(BZ2_bzWriteOpen)(int *, FILE *,
---
> *)(int *, FILE *,
19c19
<                                            void **, int *);
---
>                                            void **, int *)
21c21
< *(BZ2_bzWriteOpen)(int *, FILE *,
---
> )(int *, FILE *,
21c21
< *(BZ2_bzWriteOpen)(int *, FILE *,
---
> (BZ2_bzWriteOpen)(int *, FILE *,
21c21
< *(BZ2_bzWriteOpen)(int *, FILE *,
---
> BZ2_bzWriteOpen)(int *, FILE *,
21c21
< *(BZ2_bzWriteOpen)(int *, FILE *,
---
> ()(int *, FILE *,
21c21
< *(BZ2_bzWriteOpen)(int *, FILE *,
---
> )(int *, FILE *,
21c21
< *(BZ2_bzWriteOpen)(int *, FILE *,
---
> (BZ2_bzWriteOpen(int *, FILE *,
21c21
< *(BZ2_bzWriteOpen)(int *, FILE *,
---
> BZ2_bzWriteOpen(int *, FILE *,
21c21
< *(BZ2_bzWriteOpen)(int *, FILE *,
---
> ((int *, FILE *,
21c21
< *(BZ2_bzWriteOpen)(int *, FILE *,
---
> (int *, FILE *,
21c21
< *(BZ2_bzWriteOpen)(int *, FILE *,
---
> *BZ2_bzWriteOpen)(int *, FILE *,
21c21
< *(BZ2_bzWriteOpen)(int *, FILE *,
---
> *)(int *, FILE *,
21c21
< *(BZ2_bzWriteOpen)(int *, FILE *,
---
> *BZ2_bzWriteOpen(int *, FILE *,
21c21
< *(BZ2_bzWriteOpen)(int *, FILE *,
---
> *(int *, FILE *,
21c21
< *(BZ2_bzWriteOpen)(int *, FILE *,
---
> *BZ2_bzWriteOpen)int *, FILE *,
21c21
< *(BZ2_bzWriteOpen)(int *, FILE *,
---
> *)int *, FILE *,
21c21
< *(BZ2_bzWriteOpen)(int *, FILE *,
---
> *BZ2_bzWriteOpenint *, FILE *,
21c21
< *(BZ2_bzWriteOpen)(int *, FILE *,
---
> *int *, FILE *,
21c21
< *(BZ2_bzWriteOpen)(int *, FILE *,
---
> *()(int *, FILE *,
21c21
< *(BZ2_bzWriteOpen)(int *, FILE *,
---
> *((int *, FILE *,
21c21
< *(BZ2_bzWriteOpen)(int *, FILE *,
---
> *()int *, FILE *,
(98.8 %, 2508 bytes)
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *( *, FILE *,
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> * *, FILE *,
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *(int , FILE *,
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *int , FILE *,
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *( , FILE *,
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> * , FILE *,
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *BZ2_bzWriteOpenint *, FILE *,
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *BZ2_bzWriteOpen *, FILE *,
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *BZ2_bzWriteOpenint , FILE *,
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *BZ2_bzWriteOpen , FILE *,
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *BZ2_bzWriteOpenint * FILE *,
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *BZ2_bzWriteOpen * FILE *,
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *BZ2_bzWriteOpenint  FILE *,
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *BZ2_bzWriteOpen  FILE *,
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *BZ2_bzWriteOpen( *, FILE *,
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *BZ2_bzWriteOpen( , FILE *,
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *BZ2_bzWriteOpen( * FILE *,
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *BZ2_bzWriteOpen(  FILE *,
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *BZ2_bzWriteOpen( *,  *,
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *BZ2_bzWriteOpen( ,  *,
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *BZ2_bzWriteOpen( *  *,
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *BZ2_bzWriteOpen(   *,
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *BZ2_bzWriteOpen(int , FILE *,
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *BZ2_bzWriteOpen(int  FILE *,
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *BZ2_bzWriteOpen(int ,  *,
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *BZ2_bzWriteOpen(int   *,
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *BZ2_bzWriteOpen(int , FILE ,
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *BZ2_bzWriteOpen(int  FILE ,
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *BZ2_bzWriteOpen(int ,  ,
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *BZ2_bzWriteOpen(int   ,
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *BZ2_bzWriteOpen(int * FILE *,
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *BZ2_bzWriteOpen(int *  *,
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *BZ2_bzWriteOpen(int * FILE ,
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *BZ2_bzWriteOpen(int *  ,
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *BZ2_bzWriteOpen(int * FILE *
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *BZ2_bzWriteOpen(int *  *
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *BZ2_bzWriteOpen(int * FILE 
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *BZ2_bzWriteOpen(int *  
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *BZ2_bzWriteOpen(int *,  *,
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *BZ2_bzWriteOpen(int *,  ,
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *BZ2_bzWriteOpen(int *,  *
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *BZ2_bzWriteOpen(int *,  
21,22c21,22
< *BZ2_bzWriteOpen(int *, FILE *,
<                                           int , int ,
---
> *BZ2_bzWriteOpen(int *,  *,
>                                            , int ,
21,22c21,22
< *BZ2_bzWriteOpen(int *, FILE *,
<                                           int , int ,
---
> *BZ2_bzWriteOpen(int *,  ,
>                                            , int ,
21,22c21,22
< *BZ2_bzWriteOpen(int *, FILE *,
<                                           int , int ,
---
> *BZ2_bzWriteOpen(int *,  *
>                                            , int ,
21,22c21,22
< *BZ2_bzWriteOpen(int *, FILE *,
<                                           int , int ,
---
> *BZ2_bzWriteOpen(int *,  
>                                            , int ,
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *BZ2_bzWriteOpen(int *, FILE ,
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *BZ2_bzWriteOpen(int *, FILE 
21,22c21,22
< *BZ2_bzWriteOpen(int *, FILE *,
<                                           int , int ,
---
> *BZ2_bzWriteOpen(int *, FILE ,
>                                            , int ,
21,22c21,22
< *BZ2_bzWriteOpen(int *, FILE *,
<                                           int , int ,
---
> *BZ2_bzWriteOpen(int *, FILE 
>                                            , int ,
21,22c21,22
< *BZ2_bzWriteOpen(int *, FILE *,
<                                           int , int ,
---
> *BZ2_bzWriteOpen(int *, FILE ,
>                                           int  int ,
21,22c21,22
< *BZ2_bzWriteOpen(int *, FILE *,
<                                           int , int ,
---
> *BZ2_bzWriteOpen(int *, FILE 
>                                           int  int ,
21,22c21,22
< *BZ2_bzWriteOpen(int *, FILE *,
<                                           int , int ,
---
> *BZ2_bzWriteOpen(int *, FILE ,
>                                             int ,
21,22c21,22
< *BZ2_bzWriteOpen(int *, FILE *,
<                                           int , int ,
---
> *BZ2_bzWriteOpen(int *, FILE 
>                                             int ,
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *BZ2_bzWriteOpen(int *, FILE *
21,22c21,22
< *BZ2_bzWriteOpen(int *, FILE *,
<                                           int , int ,
---
> *BZ2_bzWriteOpen(int *, FILE *
>                                            , int ,
21,22c21,22
< *BZ2_bzWriteOpen(int *, FILE *,
<                                           int , int ,
---
> *BZ2_bzWriteOpen(int *, FILE *
>                                           int  int ,
21,22c21,22
< *BZ2_bzWriteOpen(int *, FILE *,
<                                           int , int ,
---
> *BZ2_bzWriteOpen(int *, FILE *
>                                             int ,
21,22c21,22
< *BZ2_bzWriteOpen(int *, FILE *,
<                                           int , int ,
---
> *BZ2_bzWriteOpen(int *, FILE *
>                                           int ,  ,
21,22c21,22
< *BZ2_bzWriteOpen(int *, FILE *,
<                                           int , int ,
---
> *BZ2_bzWriteOpen(int *, FILE *
>                                            ,  ,
21,22c21,22
< *BZ2_bzWriteOpen(int *, FILE *,
<                                           int , int ,
---
> *BZ2_bzWriteOpen(int *, FILE *
>                                           int   ,
21,22c21,22
< *BZ2_bzWriteOpen(int *, FILE *,
<                                           int , int ,
---
> *BZ2_bzWriteOpen(int *, FILE *
>                                              ,
22c22
<                                           int , int ,
---
>                                            , int ,
22c22
<                                           int , int ,
---
>                                             int ,
22c22
<                                           int , int ,
---
>                                            ,  ,
22c22
<                                           int , int ,
---
>                                              ,
22c22
<                                           int , int ,
---
>                                            , int 
22c22
<                                           int , int ,
---
>                                             int 
22c22
<                                           int , int ,
---
>                                            ,  
22c22
<                                           int , int ,
---
>                                              
22c22
<                                           int , int ,
---
>                                           int  int ,
22c22
<                                           int , int ,
---
>                                           int   ,
22c22
<                                           int , int ,
---
>                                           int  int 
22c22
<                                           int , int ,
---
>                                           int   
22,23c22,23
<                                           int , int ,
<                                           int );
---
>                                           int  int ,
>                                            );
22,23c22,23
<                                           int , int ,
<                                           int );
---
>                                           int   ,
>                                            );
22,23c22,23
<                                           int , int ,
<                                           int );
---
>                                           int  int 
>                                            );
22,23c22,23
<                                           int , int ,
<                                           int );
---
>                                           int   
>                                            );
22c22
<                                           int , int ,
---
>                                           int ,  ,
22c22
<                                           int , int ,
---
>                                           int ,  
22,23c22,23
<                                           int , int ,
<                                           int );
---
>                                           int ,  ,
>                                            );
22,23c22,23
<                                           int , int ,
<                                           int );
---
>                                           int ,  
>                                            );
22,23c22,23
<                                           int , int ,
<                                           int );
---
>                                           int ,  ,
>                                           int ;
22,23c22,23
<                                           int , int ,
<                                           int );
---
>                                           int ,  
>                                           int ;
22,23c22,23
<                                           int , int ,
<                                           int );
---
>                                           int ,  ,
>                                            ;
22,23c22,23
<                                           int , int ,
<                                           int );
---
>                                           int ,  
>                                            ;
22c22
<                                           int , int ,
---
>                                           int , int 
22,23c22,23
<                                           int , int ,
<                                           int );
---
>                                           int , int 
>                                            );
22,23c22,23
<                                           int , int ,
<                                           int );
---
>                                           int , int 
>                                           int ;
22,23c22,23
<                                           int , int ,
<                                           int );
---
>                                           int , int 
>                                            ;
22,23c22,23
<                                           int , int ,
<                                           int );
---
>                                           int , int 
>                                           int )
22,23c22,23
<                                           int , int ,
<                                           int );
---
>                                           int , int 
>                                            )
22,23c22,23
<                                           int , int ,
<                                           int );
---
>                                           int , int 
>                                           int 
22,23c22,23
<                                           int , int ,
<                                           int );
---
>                                           int , int 
>                                            
23c23
<                                           int );
---
>                                            );
23c23
<                                           int );
---
>                                            ;
23c23
<                                           int );
---
>                                            )
23c23
<                                           int );
---
>                                            
23c23
<                                           int );
---
>                                            );
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
>  (BZ2_bzWrite)(int *, BZFILE *, void *, int );
23c23
<                                           int );
---
>                                            ;
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
>  (BZ2_bzWrite)(int *, BZFILE *, void *, int );
23c23
<                                           int );
---
>                                            )
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
>  (BZ2_bzWrite)(int *, BZFILE *, void *, int );
23c23
<                                           int );
---
>                                            
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
>  (BZ2_bzWrite)(int *, BZFILE *, void *, int );
23c23
<                                           int );
---
>                                           int ;
23c23
<                                           int );
---
>                                           int 
23c23
<                                           int );
---
>                                           int ;
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
>  (BZ2_bzWrite)(int *, BZFILE *, void *, int );
23c23
<                                           int );
---
>                                           int 
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
>  (BZ2_bzWrite)(int *, BZFILE *, void *, int );
23c23
<                                           int );
---
>                                           int ;
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite)(int *, BZFILE *, void *, int );
23c23
<                                           int );
---
>                                           int 
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite)(int *, BZFILE *, void *, int );
23c23
<                                           int );
---
>                                           int ;
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
>  BZ2_bzWrite)(int *, BZFILE *, void *, int );
23c23
<                                           int );
---
>                                           int 
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
>  BZ2_bzWrite)(int *, BZFILE *, void *, int );
23c23
<                                           int );
---
>                                           int )
23c23
<                                           int );
---
>                                           int )
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
>  (BZ2_bzWrite)(int *, BZFILE *, void *, int );
23c23
<                                           int );
---
>                                           int )
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite)(int *, BZFILE *, void *, int );
23c23
<                                           int );
---
>                                           int )
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
>  BZ2_bzWrite)(int *, BZFILE *, void *, int );
23c23
<                                           int );
---
>                                           int )
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
> void ()(int *, BZFILE *, void *, int );
23c23
<                                           int );
---
>                                           int )
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
>  ()(int *, BZFILE *, void *, int );
23c23
<                                           int );
---
>                                           int )
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
> void )(int *, BZFILE *, void *, int );
23c23
<                                           int );
---
>                                           int )
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
>  )(int *, BZFILE *, void *, int );
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
>  (BZ2_bzWrite)(int *, BZFILE *, void *, int );
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
>  BZ2_bzWrite)(int *, BZFILE *, void *, int );
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
>  ()(int *, BZFILE *, void *, int );
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
>  )(int *, BZFILE *, void *, int );
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
>  (BZ2_bzWrite(int *, BZFILE *, void *, int );
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
>  BZ2_bzWrite(int *, BZFILE *, void *, int );
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
>  ((int *, BZFILE *, void *, int );
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
>  (int *, BZFILE *, void *, int );
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite)(int *, BZFILE *, void *, int );
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
> void )(int *, BZFILE *, void *, int );
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *, int );
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
> void (int *, BZFILE *, void *, int );
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite)int *, BZFILE *, void *, int );
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
> void )int *, BZFILE *, void *, int );
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
> void BZ2_bzWriteint *, BZFILE *, void *, int );
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
> void int *, BZFILE *, void *, int );
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
> void ()(int *, BZFILE *, void *, int );
25c25
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
> void ((int *, BZFILE *, void *, int );
(98.8 %, 2506 bytes)
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void ( *, BZFILE *, void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void  *, BZFILE *, void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void (int , BZFILE *, void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void int , BZFILE *, void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void ( , BZFILE *, void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void  , BZFILE *, void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWriteint *, BZFILE *, void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite *, BZFILE *, void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWriteint , BZFILE *, void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite , BZFILE *, void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWriteint * BZFILE *, void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite * BZFILE *, void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWriteint  BZFILE *, void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite  BZFILE *, void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite( *, BZFILE *, void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite( , BZFILE *, void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite( * BZFILE *, void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(  BZFILE *, void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite( *,  *, void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite( ,  *, void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite( *  *, void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(   *, void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int , BZFILE *, void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int  BZFILE *, void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int ,  *, void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int   *, void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int , BZFILE , void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int  BZFILE , void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int ,  , void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int   , void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int * BZFILE *, void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *  *, void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int * BZFILE , void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *  , void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int * BZFILE * void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *  * void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int * BZFILE  void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *   void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *,  *, void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *,  , void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *,  * void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *,   void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *,  *,  *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *,  ,  *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *,  *  *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *,    *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE , void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE  void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE ,  *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE   *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE , void , int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE  void , int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE ,  , int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE   , int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE * void *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *  *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE * void , int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *  , int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE * void * int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *  * int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE * void  int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *   int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *,  *, int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *,  , int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *,  * int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *,   int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *,  *,  );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *,  ,  );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *,  *  );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *,    );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void , int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void  int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void ,  );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void   );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void , int ;
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void  int ;
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void ,  ;
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void   ;
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void * int );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *  );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void * int ;
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *  ;
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void * int )
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *  )
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void * int 
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *  
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *,  );
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *,  ;
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *,  )
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *,  
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *,  );
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
>  (BZ2_bzWriteClose)(int *, BZFILE *, int ,
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *,  ;
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
>  (BZ2_bzWriteClose)(int *, BZFILE *, int ,
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *,  )
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
>  (BZ2_bzWriteClose)(int *, BZFILE *, int ,
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *,  
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
>  (BZ2_bzWriteClose)(int *, BZFILE *, int ,
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *, int ;
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *, int 
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *, int ;
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
>  (BZ2_bzWriteClose)(int *, BZFILE *, int ,
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *, int 
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
>  (BZ2_bzWriteClose)(int *, BZFILE *, int ,
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *, int ;
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose)(int *, BZFILE *, int ,
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *, int 
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose)(int *, BZFILE *, int ,
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *, int ;
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
>  BZ2_bzWriteClose)(int *, BZFILE *, int ,
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *, int 
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
>  BZ2_bzWriteClose)(int *, BZFILE *, int ,
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *, int )
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *, int )
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
>  (BZ2_bzWriteClose)(int *, BZFILE *, int ,
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *, int )
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose)(int *, BZFILE *, int ,
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *, int )
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
>  BZ2_bzWriteClose)(int *, BZFILE *, int ,
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *, int )
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
> void ()(int *, BZFILE *, int ,
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *, int )
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
>  ()(int *, BZFILE *, int ,
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *, int )
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
> void )(int *, BZFILE *, int ,
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *, int )
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
>  )(int *, BZFILE *, int ,
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
>  (BZ2_bzWriteClose)(int *, BZFILE *, int ,
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
>  BZ2_bzWriteClose)(int *, BZFILE *, int ,
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
>  ()(int *, BZFILE *, int ,
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
>  )(int *, BZFILE *, int ,
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
>  (BZ2_bzWriteClose(int *, BZFILE *, int ,
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
>  BZ2_bzWriteClose(int *, BZFILE *, int ,
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
>  ((int *, BZFILE *, int ,
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
>  (int *, BZFILE *, int ,
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose)(int *, BZFILE *, int ,
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
> void )(int *, BZFILE *, int ,
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *, BZFILE *, int ,
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
> void (int *, BZFILE *, int ,
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose)int *, BZFILE *, int ,
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
> void )int *, BZFILE *, int ,
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
> void BZ2_bzWriteCloseint *, BZFILE *, int ,
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
> void int *, BZFILE *, int ,
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
> void ()(int *, BZFILE *, int ,
27c27
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
> void ((int *, BZFILE *, int ,
(98.8 %, 2504 bytes)
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void ( *, BZFILE *, int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void  *, BZFILE *, int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void (int , BZFILE *, int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void int , BZFILE *, int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void ( , BZFILE *, int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void  , BZFILE *, int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteCloseint *, BZFILE *, int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose *, BZFILE *, int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteCloseint , BZFILE *, int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose , BZFILE *, int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteCloseint * BZFILE *, int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose * BZFILE *, int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteCloseint  BZFILE *, int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose  BZFILE *, int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose( *, BZFILE *, int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose( , BZFILE *, int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose( * BZFILE *, int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(  BZFILE *, int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose( *,  *, int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose( ,  *, int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose( *  *, int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(   *, int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int , BZFILE *, int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int  BZFILE *, int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int ,  *, int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int   *, int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int , BZFILE , int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int  BZFILE , int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int ,  , int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int   , int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int * BZFILE *, int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *  *, int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int * BZFILE , int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *  , int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int * BZFILE * int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *  * int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int * BZFILE  int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *   int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *,  *, int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *,  , int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *,  * int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *,   int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *,  *,  ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *,  ,  ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *,  *  ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *,    ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *, BZFILE , int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *, BZFILE  int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *, BZFILE ,  ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *, BZFILE   ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *, BZFILE , int 
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *, BZFILE  int 
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *, BZFILE ,  
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *, BZFILE   
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *, BZFILE * int ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *, BZFILE *  ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *, BZFILE * int 
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *, BZFILE *  
27,28c27,28
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                                         unsigned *,
---
> void BZ2_bzWriteClose(int *, BZFILE * int ,
>                                          *,
27,28c27,28
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                                         unsigned *,
---
> void BZ2_bzWriteClose(int *, BZFILE *  ,
>                                          *,
27,28c27,28
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                                         unsigned *,
---
> void BZ2_bzWriteClose(int *, BZFILE * int 
>                                          *,
27,28c27,28
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                                         unsigned *,
---
> void BZ2_bzWriteClose(int *, BZFILE *  
>                                          *,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *, BZFILE *,  ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *, BZFILE *,  
27,28c27,28
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                                         unsigned *,
---
> void BZ2_bzWriteClose(int *, BZFILE *,  ,
>                                          *,
27,28c27,28
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                                         unsigned *,
---
> void BZ2_bzWriteClose(int *, BZFILE *,  
>                                          *,
27,28c27,28
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                                         unsigned *,
---
> void BZ2_bzWriteClose(int *, BZFILE *,  ,
>                                         unsigned ,
27,28c27,28
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                                         unsigned *,
---
> void BZ2_bzWriteClose(int *, BZFILE *,  
>                                         unsigned ,
27,28c27,28
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                                         unsigned *,
---
> void BZ2_bzWriteClose(int *, BZFILE *,  ,
>                                          ,
27,28c27,28
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                                         unsigned *,
---
> void BZ2_bzWriteClose(int *, BZFILE *,  
>                                          ,
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *, BZFILE *, int 
27,28c27,28
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                                         unsigned *,
---
> void BZ2_bzWriteClose(int *, BZFILE *, int 
>                                          *,
27,28c27,28
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                                         unsigned *,
---
> void BZ2_bzWriteClose(int *, BZFILE *, int 
>                                         unsigned ,
27,28c27,28
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                                         unsigned *,
---
> void BZ2_bzWriteClose(int *, BZFILE *, int 
>                                          ,
27,28c27,28
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                                         unsigned *,
---
> void BZ2_bzWriteClose(int *, BZFILE *, int 
>                                         unsigned *
27,28c27,28
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                                         unsigned *,
---
> void BZ2_bzWriteClose(int *, BZFILE *, int 
>                                          *
27,28c27,28
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                                         unsigned *,
---
> void BZ2_bzWriteClose(int *, BZFILE *, int 
>                                         unsigned 
27,28c27,28
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                                         unsigned *,
---
> void BZ2_bzWriteClose(int *, BZFILE *, int 
>                                          
28c28
<                                         unsigned *,
---
>                                          *,
28c28
<                                         unsigned *,
---
>                                          ,
28c28
<                                         unsigned *,
---
>                                          *
28c28
<                                         unsigned *,
---
>                                          
28,29c28,29
<                                         unsigned *,
<                                         unsigned *);
---
>                                          *,
>                                          *);
28,29c28,29
<                                         unsigned *,
<                                         unsigned *);
---
>                                          ,
>                                          *);
28,29c28,29
<                                         unsigned *,
<                                         unsigned *);
---
>                                          *
>                                          *);
28,29c28,29
<                                         unsigned *,
<                                         unsigned *);
---
>                                          
>                                          *);
28c28
<                                         unsigned *,
---
>                                         unsigned ,
28c28
<                                         unsigned *,
---
>                                         unsigned 
28,29c28,29
<                                         unsigned *,
<                                         unsigned *);
---
>                                         unsigned ,
>                                          *);
28,29c28,29
<                                         unsigned *,
<                                         unsigned *);
---
>                                         unsigned 
>                                          *);
28,29c28,29
<                                         unsigned *,
<                                         unsigned *);
---
>                                         unsigned ,
>                                         unsigned );
28,29c28,29
<                                         unsigned *,
<                                         unsigned *);
---
>                                         unsigned 
>                                         unsigned );
28,29c28,29
<                                         unsigned *,
<                                         unsigned *);
---
>                                         unsigned ,
>                                          );
28,29c28,29
<                                         unsigned *,
<                                         unsigned *);
---
>                                         unsigned 
>                                          );
28c28
<                                         unsigned *,
---
>                                         unsigned *
28,29c28,29
<                                         unsigned *,
<                                         unsigned *);
---
>                                         unsigned *
>                                          *);
28,29c28,29
<                                         unsigned *,
<                                         unsigned *);
---
>                                         unsigned *
>                                         unsigned );
28,29c28,29
<                                         unsigned *,
<                                         unsigned *);
---
>                                         unsigned *
>                                          );
28,29c28,29
<                                         unsigned *,
<                                         unsigned *);
---
>                                         unsigned *
>                                         unsigned *;
28,29c28,29
<                                         unsigned *,
<                                         unsigned *);
---
>                                         unsigned *
>                                          *;
28,29c28,29
<                                         unsigned *,
<                                         unsigned *);
---
>                                         unsigned *
>                                         unsigned ;
28,29c28,29
<                                         unsigned *,
<                                         unsigned *);
---
>                                         unsigned *
>                                          ;
29c29
<                                         unsigned *);
---
>                                          *);
29c29
<                                         unsigned *);
---
>                                          );
29c29
<                                         unsigned *);
---
>                                          *;
29c29
<                                         unsigned *);
---
>                                          ;
29c29
<                                         unsigned *);
---
>                                          *)
29c29
<                                         unsigned *);
---
>                                          )
29c29
<                                         unsigned *);
---
>                                          *
29c29
<                                         unsigned *);
---
>                                          
29c29
<                                         unsigned *);
---
>                                         unsigned );
29c29
<                                         unsigned *);
---
>                                         unsigned ;
29c29
<                                         unsigned *);
---
>                                         unsigned )
29c29
<                                         unsigned *);
---
>                                         unsigned 
29c29
<                                         unsigned *);
---
>                                         unsigned );
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
>  (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
29c29
<                                         unsigned *);
---
>                                         unsigned ;
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
>  (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
29c29
<                                         unsigned *);
---
>                                         unsigned )
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
>  (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
29c29
<                                         unsigned *);
---
>                                         unsigned 
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
>  (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
29c29
<                                         unsigned *);
---
>                                         unsigned *;
29c29
<                                         unsigned *);
---
>                                         unsigned *
29c29
<                                         unsigned *);
---
>                                         unsigned *;
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
>  (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
29c29
<                                         unsigned *);
---
>                                         unsigned *
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
>  (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
29c29
<                                         unsigned *);
---
>                                         unsigned *;
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64)(int *, BZFILE *, int ,
29c29
<                                         unsigned *);
---
>                                         unsigned *
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64)(int *, BZFILE *, int ,
29c29
<                                         unsigned *);
---
>                                         unsigned *;
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
>  BZ2_bzWriteClose64)(int *, BZFILE *, int ,
29c29
<                                         unsigned *);
---
>                                         unsigned *
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
>  BZ2_bzWriteClose64)(int *, BZFILE *, int ,
29c29
<                                         unsigned *);
---
>                                         unsigned *)
29c29
<                                         unsigned *);
---
>                                         unsigned *)
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
>  (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
29c29
<                                         unsigned *);
---
>                                         unsigned *)
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64)(int *, BZFILE *, int ,
29c29
<                                         unsigned *);
---
>                                         unsigned *)
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
>  BZ2_bzWriteClose64)(int *, BZFILE *, int ,
29c29
<                                         unsigned *);
---
>                                         unsigned *)
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
> void ()(int *, BZFILE *, int ,
29c29
<                                         unsigned *);
---
>                                         unsigned *)
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
>  ()(int *, BZFILE *, int ,
29c29
<                                         unsigned *);
---
>                                         unsigned *)
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
> void )(int *, BZFILE *, int ,
29c29
<                                         unsigned *);
---
>                                         unsigned *)
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
>  )(int *, BZFILE *, int ,
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
>  (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
>  BZ2_bzWriteClose64)(int *, BZFILE *, int ,
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
>  ()(int *, BZFILE *, int ,
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
>  )(int *, BZFILE *, int ,
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
>  (BZ2_bzWriteClose64(int *, BZFILE *, int ,
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
>  BZ2_bzWriteClose64(int *, BZFILE *, int ,
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
>  ((int *, BZFILE *, int ,
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
>  (int *, BZFILE *, int ,
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64)(int *, BZFILE *, int ,
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
> void )(int *, BZFILE *, int ,
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *, BZFILE *, int ,
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
> void (int *, BZFILE *, int ,
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64)int *, BZFILE *, int ,
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
> void )int *, BZFILE *, int ,
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64int *, BZFILE *, int ,
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
> void int *, BZFILE *, int ,
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
> void ()(int *, BZFILE *, int ,
31c31
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
> void ((int *, BZFILE *, int ,
(98.8 %, 2502 bytes)
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void ( *, BZFILE *, int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void  *, BZFILE *, int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void (int , BZFILE *, int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void int , BZFILE *, int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void ( , BZFILE *, int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void  , BZFILE *, int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64int *, BZFILE *, int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64 *, BZFILE *, int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64int , BZFILE *, int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64 , BZFILE *, int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64int * BZFILE *, int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64 * BZFILE *, int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64int  BZFILE *, int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64  BZFILE *, int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64( *, BZFILE *, int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64( , BZFILE *, int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64( * BZFILE *, int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(  BZFILE *, int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64( *,  *, int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64( ,  *, int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64( *  *, int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(   *, int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int , BZFILE *, int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int  BZFILE *, int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int ,  *, int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int   *, int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int , BZFILE , int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int  BZFILE , int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int ,  , int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int   , int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int * BZFILE *, int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *  *, int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int * BZFILE , int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *  , int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int * BZFILE * int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *  * int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int * BZFILE  int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *   int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *,  *, int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *,  , int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *,  * int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *,   int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *,  *,  ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *,  ,  ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *,  *  ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *,    ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *, BZFILE , int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *, BZFILE  int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *, BZFILE ,  ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *, BZFILE   ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *, BZFILE , int 
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *, BZFILE  int 
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *, BZFILE ,  
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *, BZFILE   
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *, BZFILE * int ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *, BZFILE *  ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *, BZFILE * int 
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *, BZFILE *  
31,32c31,32
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                           unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE * int ,
>                                            *,
31,32c31,32
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                           unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE *  ,
>                                            *,
31,32c31,32
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                           unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE * int 
>                                            *,
31,32c31,32
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                           unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE *  
>                                            *,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *, BZFILE *,  ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *, BZFILE *,  
31,32c31,32
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                           unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE *,  ,
>                                            *,
31,32c31,32
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                           unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE *,  
>                                            *,
31,32c31,32
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                           unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE *,  ,
>                                           unsigned ,
31,32c31,32
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                           unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE *,  
>                                           unsigned ,
31,32c31,32
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                           unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE *,  ,
>                                            ,
31,32c31,32
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                           unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE *,  
>                                            ,
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *, BZFILE *, int 
31,32c31,32
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                           unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE *, int 
>                                            *,
31,32c31,32
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                           unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE *, int 
>                                           unsigned ,
31,32c31,32
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                           unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE *, int 
>                                            ,
31,32c31,32
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                           unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE *, int 
>                                           unsigned *
31,32c31,32
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                           unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE *, int 
>                                            *
31,32c31,32
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                           unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE *, int 
>                                           unsigned 
31,32c31,32
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                           unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE *, int 
>                                            
32c32
<                                           unsigned *,
---
>                                            *,
32c32
<                                           unsigned *,
---
>                                            ,
32c32
<                                           unsigned *,
---
>                                            *
32c32
<                                           unsigned *,
---
>                                            
32,33c32,33
<                                           unsigned *,
<                                           unsigned *,
---
>                                            *,
>                                            *,
32,33c32,33
<                                           unsigned *,
<                                           unsigned *,
---
>                                            ,
>                                            *,
32,33c32,33
<                                           unsigned *,
<                                           unsigned *,
---
>                                            *
>                                            *,
32,33c32,33
<                                           unsigned *,
<                                           unsigned *,
---
>                                            
>                                            *,
32c32
<                                           unsigned *,
---
>                                           unsigned ,
32c32
<                                           unsigned *,
---
>                                           unsigned 
32,33c32,33
<                                           unsigned *,
<                                           unsigned *,
---
>                                           unsigned ,
>                                            *,
32,33c32,33
<                                           unsigned *,
<                                           unsigned *,
---
>                                           unsigned 
>                                            *,
32,33c32,33
<                                           unsigned *,
<                                           unsigned *,
---
>                                           unsigned ,
>                                           unsigned ,
32,33c32,33
<                                           unsigned *,
<                                           unsigned *,
---
>                                           unsigned 
>                                           unsigned ,
32,33c32,33
<                                           unsigned *,
<                                           unsigned *,
---
>                                           unsigned ,
>                                            ,
32,33c32,33
<                                           unsigned *,
<                                           unsigned *,
---
>                                           unsigned 
>                                            ,
32c32
<                                           unsigned *,
---
>                                           unsigned *
32,33c32,33
<                                           unsigned *,
<                                           unsigned *,
---
>                                           unsigned *
>                                            *,
32,33c32,33
<                                           unsigned *,
<                                           unsigned *,
---
>                                           unsigned *
>                                           unsigned ,
32,33c32,33
<                                           unsigned *,
<                                           unsigned *,
---
>                                           unsigned *
>                                            ,
32,33c32,33
<                                           unsigned *,
<                                           unsigned *,
---
>                                           unsigned *
>                                           unsigned *
32,33c32,33
<                                           unsigned *,
<                                           unsigned *,
---
>                                           unsigned *
>                                            *
32,33c32,33
<                                           unsigned *,
<                                           unsigned *,
---
>                                           unsigned *
>                                           unsigned 
32,33c32,33
<                                           unsigned *,
<                                           unsigned *,
---
>                                           unsigned *
>                                            
33c33
<                                           unsigned *,
---
>                                            *,
33c33
<                                           unsigned *,
---
>                                            ,
33c33
<                                           unsigned *,
---
>                                            *
33c33
<                                           unsigned *,
---
>                                            
33,34c33,34
<                                           unsigned *,
<                                           unsigned *,
---
>                                            *,
>                                            *,
33,34c33,34
<                                           unsigned *,
<                                           unsigned *,
---
>                                            ,
>                                            *,
33,34c33,34
<                                           unsigned *,
<                                           unsigned *,
---
>                                            *
>                                            *,
33,34c33,34
<                                           unsigned *,
<                                           unsigned *,
---
>                                            
>                                            *,
33c33
<                                           unsigned *,
---
>                                           unsigned ,
33c33
<                                           unsigned *,
---
>                                           unsigned 
33,34c33,34
<                                           unsigned *,
<                                           unsigned *,
---
>                                           unsigned ,
>                                            *,
33,34c33,34
<                                           unsigned *,
<                                           unsigned *,
---
>                                           unsigned 
>                                            *,
33,34c33,34
<                                           unsigned *,
<                                           unsigned *,
---
>                                           unsigned ,
>                                           unsigned ,
33,34c33,34
<                                           unsigned *,
<                                           unsigned *,
---
>                                           unsigned 
>                                           unsigned ,
33,34c33,34
<                                           unsigned *,
<                                           unsigned *,
---
>                                           unsigned ,
>                                            ,
33,34c33,34
<                                           unsigned *,
<                                           unsigned *,
---
>                                           unsigned 
>                                            ,
33c33
<                                           unsigned *,
---
>                                           unsigned *
33,34c33,34
<                                           unsigned *,
<                                           unsigned *,
---
>                                           unsigned *
>                                            *,
33,34c33,34
<                                           unsigned *,
<                                           unsigned *,
---
>                                           unsigned *
>                                           unsigned ,
33,34c33,34
<                                           unsigned *,
<                                           unsigned *,
---
>                                           unsigned *
>                                            ,
33,34c33,34
<                                           unsigned *,
<                                           unsigned *,
---
>                                           unsigned *
>                                           unsigned *
33,34c33,34
<                                           unsigned *,
<                                           unsigned *,
---
>                                           unsigned *
>                                            *
33,34c33,34
<                                           unsigned *,
<                                           unsigned *,
---
>                                           unsigned *
>                                           unsigned 
33,34c33,34
<                                           unsigned *,
<                                           unsigned *,
---
>                                           unsigned *
>                                            
34c34
<                                           unsigned *,
---
>                                            *,
34c34
<                                           unsigned *,
---
>                                            ,
34c34
<                                           unsigned *,
---
>                                            *
34c34
<                                           unsigned *,
---
>                                            
34,35c34,35
<                                           unsigned *,
<                                           unsigned *);
---
>                                            *,
>                                            *);
34,35c34,35
<                                           unsigned *,
<                                           unsigned *);
---
>                                            ,
>                                            *);
34,35c34,35
<                                           unsigned *,
<                                           unsigned *);
---
>                                            *
>                                            *);
34,35c34,35
<                                           unsigned *,
<                                           unsigned *);
---
>                                            
>                                            *);
34c34
<                                           unsigned *,
---
>                                           unsigned ,
34c34
<                                           unsigned *,
---
>                                           unsigned 
34,35c34,35
<                                           unsigned *,
<                                           unsigned *);
---
>                                           unsigned ,
>                                            *);
34,35c34,35
<                                           unsigned *,
<                                           unsigned *);
---
>                                           unsigned 
>                                            *);
34,35c34,35
<                                           unsigned *,
<                                           unsigned *);
---
>                                           unsigned ,
>                                           unsigned );
34,35c34,35
<                                           unsigned *,
<                                           unsigned *);
---
>                                           unsigned 
>                                           unsigned );
34,35c34,35
<                                           unsigned *,
<                                           unsigned *);
---
>                                           unsigned ,
>                                            );
34,35c34,35
<                                           unsigned *,
<                                           unsigned *);
---
>                                           unsigned 
>                                            );
34c34
<                                           unsigned *,
---
>                                           unsigned *
34,35c34,35
<                                           unsigned *,
<                                           unsigned *);
---
>                                           unsigned *
>                                            *);
34,35c34,35
<                                           unsigned *,
<                                           unsigned *);
---
>                                           unsigned *
>                                           unsigned );
34,35c34,35
<                                           unsigned *,
<                                           unsigned *);
---
>                                           unsigned *
>                                            );
34,35c34,35
<                                           unsigned *,
<                                           unsigned *);
---
>                                           unsigned *
>                                           unsigned *;
34,35c34,35
<                                           unsigned *,
<                                           unsigned *);
---
>                                           unsigned *
>                                            *;
34,35c34,35
<                                           unsigned *,
<                                           unsigned *);
---
>                                           unsigned *
>                                           unsigned ;
34,35c34,35
<                                           unsigned *,
<                                           unsigned *);
---
>                                           unsigned *
>                                            ;
35c35
<                                           unsigned *);
---
>                                            *);
35c35
<                                           unsigned *);
---
>                                            );
35c35
<                                           unsigned *);
---
>                                            *;
35c35
<                                           unsigned *);
---
>                                            ;
35c35
<                                           unsigned *);
---
>                                            *)
35c35
<                                           unsigned *);
---
>                                            )
35c35
<                                           unsigned *);
---
>                                            *
35c35
<                                           unsigned *);
---
>                                            
35c35
<                                           unsigned *);
---
>                                           unsigned );
35c35
<                                           unsigned *);
---
>                                           unsigned ;
35c35
<                                           unsigned *);
---
>                                           unsigned )
35c35
<                                           unsigned *);
---
>                                           unsigned 
35c35
<                                           unsigned *);
---
>                                           unsigned );
37c37
< (BZ2_bzBuffToBuffCompress)(
---
> BZ2_bzBuffToBuffCompress)(
35c35
<                                           unsigned *);
---
>                                           unsigned ;
37c37
< (BZ2_bzBuffToBuffCompress)(
---
> BZ2_bzBuffToBuffCompress)(
35c35
<                                           unsigned *);
---
>                                           unsigned )
37c37
< (BZ2_bzBuffToBuffCompress)(
---
> BZ2_bzBuffToBuffCompress)(
35c35
<                                           unsigned *);
---
>                                           unsigned 
37c37
< (BZ2_bzBuffToBuffCompress)(
---
> BZ2_bzBuffToBuffCompress)(
35c35
<                                           unsigned *);
---
>                                           unsigned *;
35c35
<                                           unsigned *);
---
>                                           unsigned *
35c35
<                                           unsigned *);
---
>                                           unsigned *;
37c37
< (BZ2_bzBuffToBuffCompress)(
---
> BZ2_bzBuffToBuffCompress)(
35c35
<                                           unsigned *);
---
>                                           unsigned *
37c37
< (BZ2_bzBuffToBuffCompress)(
---
> BZ2_bzBuffToBuffCompress)(
35c35
<                                           unsigned *);
---
>                                           unsigned *;
37c37
< (BZ2_bzBuffToBuffCompress)(
---
> ()(
35c35
<                                           unsigned *);
---
>                                           unsigned *
37c37
< (BZ2_bzBuffToBuffCompress)(
---
> ()(
35c35
<                                           unsigned *);
---
>                                           unsigned *;
37c37
< (BZ2_bzBuffToBuffCompress)(
---
> )(
35c35
<                                           unsigned *);
---
>                                           unsigned *
37c37
< (BZ2_bzBuffToBuffCompress)(
---
> )(
35c35
<                                           unsigned *);
---
>                                           unsigned *)
35c35
<                                           unsigned *);
---
>                                           unsigned *)
37c37
< (BZ2_bzBuffToBuffCompress)(
---
> BZ2_bzBuffToBuffCompress)(
35c35
<                                           unsigned *);
---
>                                           unsigned *)
37c37
< (BZ2_bzBuffToBuffCompress)(
---
> ()(
35c35
<                                           unsigned *);
---
>                                           unsigned *)
37c37
< (BZ2_bzBuffToBuffCompress)(
---
> )(
35c35
<                                           unsigned *);
---
>                                           unsigned *)
37c37
< (BZ2_bzBuffToBuffCompress)(
---
> (BZ2_bzBuffToBuffCompress(
35c35
<                                           unsigned *);
---
>                                           unsigned *)
37c37
< (BZ2_bzBuffToBuffCompress)(
---
> BZ2_bzBuffToBuffCompress(
35c35
<                                           unsigned *);
---
>                                           unsigned *)
37c37
< (BZ2_bzBuffToBuffCompress)(
---
> ((
35c35
<                                           unsigned *);
---
>                                           unsigned *)
37c37
< (BZ2_bzBuffToBuffCompress)(
---
> (
37c37
< (BZ2_bzBuffToBuffCompress)(
---
> BZ2_bzBuffToBuffCompress)(
37c37
< (BZ2_bzBuffToBuffCompress)(
---
> )(
37c37
< (BZ2_bzBuffToBuffCompress)(
---
> BZ2_bzBuffToBuffCompress(
37c37
< (BZ2_bzBuffToBuffCompress)(
---
> (
37c37
< (BZ2_bzBuffToBuffCompress)(
---
> BZ2_bzBuffToBuffCompress)
37c37
< (BZ2_bzBuffToBuffCompress)(
---
> )
37c37
< (BZ2_bzBuffToBuffCompress)(
---
> BZ2_bzBuffToBuffCompress
37c37
< (BZ2_bzBuffToBuffCompress)(
---
> 
37c37
< (BZ2_bzBuffToBuffCompress)(
---
> ()(
37c37
< (BZ2_bzBuffToBuffCompress)(
---
> ((
37c37
< (BZ2_bzBuffToBuffCompress)(
---
> ()
(98.8 %, 2500 bytes)
37,38c37,38
< BZ2_bzBuffToBuffCompress(
<     char *, unsigned *, char *, unsigned ,
---
> (
>      *, unsigned *, char *, unsigned ,
37,38c37,38
< BZ2_bzBuffToBuffCompress(
<     char *, unsigned *, char *, unsigned ,
---
> 
>      *, unsigned *, char *, unsigned ,
37,38c37,38
< BZ2_bzBuffToBuffCompress(
<     char *, unsigned *, char *, unsigned ,
---
> (
>     char , unsigned *, char *, unsigned ,
37,38c37,38
< BZ2_bzBuffToBuffCompress(
<     char *, unsigned *, char *, unsigned ,
---
> 
>     char , unsigned *, char *, unsigned ,
37,38c37,38
< BZ2_bzBuffToBuffCompress(
<     char *, unsigned *, char *, unsigned ,
---
> (
>      , unsigned *, char *, unsigned ,
37,38c37,38
< BZ2_bzBuffToBuffCompress(
<     char *, unsigned *, char *, unsigned ,
---
> 
>      , unsigned *, char *, unsigned ,
37c37
< BZ2_bzBuffToBuffCompress(
---
> BZ2_bzBuffToBuffCompress
37,38c37,38
< BZ2_bzBuffToBuffCompress(
<     char *, unsigned *, char *, unsigned ,
---
> BZ2_bzBuffToBuffCompress
>      *, unsigned *, char *, unsigned ,
37,38c37,38
< BZ2_bzBuffToBuffCompress(
<     char *, unsigned *, char *, unsigned ,
---
> BZ2_bzBuffToBuffCompress
>     char , unsigned *, char *, unsigned ,
37,38c37,38
< BZ2_bzBuffToBuffCompress(
<     char *, unsigned *, char *, unsigned ,
---
> BZ2_bzBuffToBuffCompress
>      , unsigned *, char *, unsigned ,
37,38c37,38
< BZ2_bzBuffToBuffCompress(
<     char *, unsigned *, char *, unsigned ,
---
> BZ2_bzBuffToBuffCompress
>     char * unsigned *, char *, unsigned ,
37,38c37,38
< BZ2_bzBuffToBuffCompress(
<     char *, unsigned *, char *, unsigned ,
---
> BZ2_bzBuffToBuffCompress
>      * unsigned *, char *, unsigned ,
37,38c37,38
< BZ2_bzBuffToBuffCompress(
<     char *, unsigned *, char *, unsigned ,
---
> BZ2_bzBuffToBuffCompress
>     char  unsigned *, char *, unsigned ,
37,38c37,38
< BZ2_bzBuffToBuffCompress(
<     char *, unsigned *, char *, unsigned ,
---
> BZ2_bzBuffToBuffCompress
>       unsigned *, char *, unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>      *, unsigned *, char *, unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>      , unsigned *, char *, unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>      * unsigned *, char *, unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>       unsigned *, char *, unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>      *,  *, char *, unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>      ,  *, char *, unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>      *  *, char *, unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>        *, char *, unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char , unsigned *, char *, unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char  unsigned *, char *, unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char ,  *, char *, unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char   *, char *, unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char , unsigned , char *, unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char  unsigned , char *, unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char ,  , char *, unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char   , char *, unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char * unsigned *, char *, unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *  *, char *, unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char * unsigned , char *, unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *  , char *, unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char * unsigned * char *, unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *  * char *, unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char * unsigned  char *, unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *   char *, unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *,  *, char *, unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *,  , char *, unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *,  * char *, unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *,   char *, unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *,  *,  *, unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *,  ,  *, unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *,  *  *, unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *,    *, unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *, unsigned , char *, unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *, unsigned  char *, unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *, unsigned ,  *, unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *, unsigned   *, unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *, unsigned , char , unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *, unsigned  char , unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *, unsigned ,  , unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *, unsigned   , unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *, unsigned * char *, unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *, unsigned *  *, unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *, unsigned * char , unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *, unsigned *  , unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *, unsigned * char * unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *, unsigned *  * unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *, unsigned * char  unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *, unsigned *   unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *, unsigned *,  *, unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *, unsigned *,  , unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *, unsigned *,  * unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *, unsigned *,   unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *, unsigned *,  *,  ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *, unsigned *,  ,  ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *, unsigned *,  *  ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *, unsigned *,    ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *, unsigned *, char , unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *, unsigned *, char  unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *, unsigned *, char ,  ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *, unsigned *, char   ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *, unsigned *, char , unsigned 
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *, unsigned *, char  unsigned 
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *, unsigned *, char ,  
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *, unsigned *, char   
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *, unsigned *, char * unsigned ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *, unsigned *, char *  ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *, unsigned *, char * unsigned 
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *, unsigned *, char *  
38,39c38,39
<     char *, unsigned *, char *, unsigned ,
<     int , int , int );
---
>     char *, unsigned *, char * unsigned ,
>      , int , int );
38,39c38,39
<     char *, unsigned *, char *, unsigned ,
<     int , int , int );
---
>     char *, unsigned *, char *  ,
>      , int , int );
38,39c38,39
<     char *, unsigned *, char *, unsigned ,
<     int , int , int );
---
>     char *, unsigned *, char * unsigned 
>      , int , int );
38,39c38,39
<     char *, unsigned *, char *, unsigned ,
<     int , int , int );
---
>     char *, unsigned *, char *  
>      , int , int );
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *, unsigned *, char *,  ,
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *, unsigned *, char *,  
38,39c38,39
<     char *, unsigned *, char *, unsigned ,
<     int , int , int );
---
>     char *, unsigned *, char *,  ,
>      , int , int );
38,39c38,39
<     char *, unsigned *, char *, unsigned ,
<     int , int , int );
---
>     char *, unsigned *, char *,  
>      , int , int );
38,39c38,39
<     char *, unsigned *, char *, unsigned ,
<     int , int , int );
---
>     char *, unsigned *, char *,  ,
>     int  int , int );
38,39c38,39
<     char *, unsigned *, char *, unsigned ,
<     int , int , int );
---
>     char *, unsigned *, char *,  
>     int  int , int );
38,39c38,39
<     char *, unsigned *, char *, unsigned ,
<     int , int , int );
---
>     char *, unsigned *, char *,  ,
>       int , int );
38,39c38,39
<     char *, unsigned *, char *, unsigned ,
<     int , int , int );
---
>     char *, unsigned *, char *,  
>       int , int );
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *, unsigned *, char *, unsigned 
38,39c38,39
<     char *, unsigned *, char *, unsigned ,
<     int , int , int );
---
>     char *, unsigned *, char *, unsigned 
>      , int , int );
38,39c38,39
<     char *, unsigned *, char *, unsigned ,
<     int , int , int );
---
>     char *, unsigned *, char *, unsigned 
>     int  int , int );
38,39c38,39
<     char *, unsigned *, char *, unsigned ,
<     int , int , int );
---
>     char *, unsigned *, char *, unsigned 
>       int , int );
38,39c38,39
<     char *, unsigned *, char *, unsigned ,
<     int , int , int );
---
>     char *, unsigned *, char *, unsigned 
>     int ,  , int );
38,39c38,39
<     char *, unsigned *, char *, unsigned ,
<     int , int , int );
---
>     char *, unsigned *, char *, unsigned 
>      ,  , int );
38,39c38,39
<     char *, unsigned *, char *, unsigned ,
<     int , int , int );
---
>     char *, unsigned *, char *, unsigned 
>     int   , int );
38,39c38,39
<     char *, unsigned *, char *, unsigned ,
<     int , int , int );
---
>     char *, unsigned *, char *, unsigned 
>        , int );
39c39
<     int , int , int );
---
>      , int , int );
39c39
<     int , int , int );
---
>       int , int );
39c39
<     int , int , int );
---
>      ,  , int );
39c39
<     int , int , int );
---
>        , int );
39c39
<     int , int , int );
---
>      , int  int );
39c39
<     int , int , int );
---
>       int  int );
39c39
<     int , int , int );
---
>      ,   int );
39c39
<     int , int , int );
---
>         int );
39c39
<     int , int , int );
---
>     int  int , int );
39c39
<     int , int , int );
---
>     int   , int );
39c39
<     int , int , int );
---
>     int  int  int );
39c39
<     int , int , int );
---
>     int    int );
39c39
<     int , int , int );
---
>     int  int ,  );
39c39
<     int , int , int );
---
>     int   ,  );
39c39
<     int , int , int );
---
>     int  int   );
39c39
<     int , int , int );
---
>     int     );
39c39
<     int , int , int );
---
>     int ,  , int );
39c39
<     int , int , int );
---
>     int ,   int );
39c39
<     int , int , int );
---
>     int ,  ,  );
39c39
<     int , int , int );
---
>     int ,    );
39c39
<     int , int , int );
---
>     int ,  , int ;
39c39
<     int , int , int );
---
>     int ,   int ;
39c39
<     int , int , int );
---
>     int ,  ,  ;
39c39
<     int , int , int );
---
>     int ,    ;
39c39
<     int , int , int );
---
>     int , int  int );
39c39
<     int , int , int );
---
>     int , int   );
39c39
<     int , int , int );
---
>     int , int  int ;
39c39
<     int , int , int );
---
>     int , int   ;
39c39
<     int , int , int );
---
>     int , int  int )
39c39
<     int , int , int );
---
>     int , int   )
39c39
<     int , int , int );
---
>     int , int  int 
39c39
<     int , int , int );
---
>     int , int   
39c39
<     int , int , int );
---
>     int , int ,  );
39c39
<     int , int , int );
---
>     int , int ,  ;
39c39
<     int , int , int );
---
>     int , int ,  )
39c39
<     int , int , int );
---
>     int , int ,  
39c39
<     int , int , int );
---
>     int , int ,  );
41c41
< (BZ2_bzBuffToBuffDecompress)(char *,
---
> BZ2_bzBuffToBuffDecompress)(char *,
39c39
<     int , int , int );
---
>     int , int ,  ;
41c41
< (BZ2_bzBuffToBuffDecompress)(char *,
---
> BZ2_bzBuffToBuffDecompress)(char *,
39c39
<     int , int , int );
---
>     int , int ,  )
41c41
< (BZ2_bzBuffToBuffDecompress)(char *,
---
> BZ2_bzBuffToBuffDecompress)(char *,
39c39
<     int , int , int );
---
>     int , int ,  
41c41
< (BZ2_bzBuffToBuffDecompress)(char *,
---
> BZ2_bzBuffToBuffDecompress)(char *,
39c39
<     int , int , int );
---
>     int , int , int ;
39c39
<     int , int , int );
---
>     int , int , int 
39c39
<     int , int , int );
---
>     int , int , int ;
41c41
< (BZ2_bzBuffToBuffDecompress)(char *,
---
> BZ2_bzBuffToBuffDecompress)(char *,
39c39
<     int , int , int );
---
>     int , int , int 
41c41
< (BZ2_bzBuffToBuffDecompress)(char *,
---
> BZ2_bzBuffToBuffDecompress)(char *,
39c39
<     int , int , int );
---
>     int , int , int ;
41c41
< (BZ2_bzBuffToBuffDecompress)(char *,
---
> ()(char *,
39c39
<     int , int , int );
---
>     int , int , int 
41c41
< (BZ2_bzBuffToBuffDecompress)(char *,
---
> ()(char *,
39c39
<     int , int , int );
---
>     int , int , int ;
41c41
< (BZ2_bzBuffToBuffDecompress)(char *,
---
> )(char *,
39c39
<     int , int , int );
---
>     int , int , int 
41c41
< (BZ2_bzBuffToBuffDecompress)(char *,
---
> )(char *,
39c39
<     int , int , int );
---
>     int , int , int )
39c39
<     int , int , int );
---
>     int , int , int )
41c41
< (BZ2_bzBuffToBuffDecompress)(char *,
---
> BZ2_bzBuffToBuffDecompress)(char *,
39c39
<     int , int , int );
---
>     int , int , int )
41c41
< (BZ2_bzBuffToBuffDecompress)(char *,
---
> ()(char *,
39c39
<     int , int , int );
---
>     int , int , int )
41c41
< (BZ2_bzBuffToBuffDecompress)(char *,
---
> )(char *,
39c39
<     int , int , int );
---
>     int , int , int )
41c41
< (BZ2_bzBuffToBuffDecompress)(char *,
---
> (BZ2_bzBuffToBuffDecompress(char *,
39c39
<     int , int , int );
---
>     int , int , int )
41c41
< (BZ2_bzBuffToBuffDecompress)(char *,
---
> BZ2_bzBuffToBuffDecompress(char *,
39c39
<     int , int , int );
---
>     int , int , int )
41c41
< (BZ2_bzBuffToBuffDecompress)(char *,
---
> ((char *,
39c39
<     int , int , int );
---
>     int , int , int )
41c41
< (BZ2_bzBuffToBuffDecompress)(char *,
---
> (char *,
41c41
< (BZ2_bzBuffToBuffDecompress)(char *,
---
> BZ2_bzBuffToBuffDecompress)(char *,
41c41
< (BZ2_bzBuffToBuffDecompress)(char *,
---
> )(char *,
41c41
< (BZ2_bzBuffToBuffDecompress)(char *,
---
> BZ2_bzBuffToBuffDecompress(char *,
41c41
< (BZ2_bzBuffToBuffDecompress)(char *,
---
> (char *,
41c41
< (BZ2_bzBuffToBuffDecompress)(char *,
---
> BZ2_bzBuffToBuffDecompress)char *,
41c41
< (BZ2_bzBuffToBuffDecompress)(char *,
---
> )char *,
41c41
< (BZ2_bzBuffToBuffDecompress)(char *,
---
> BZ2_bzBuffToBuffDecompresschar *,
41c41
< (BZ2_bzBuffToBuffDecompress)(char *,
---
> char *,
41c41
< (BZ2_bzBuffToBuffDecompress)(char *,
---
> ()(char *,
41c41
< (BZ2_bzBuffToBuffDecompress)(char *,
---
> ((char *,
41c41
< (BZ2_bzBuffToBuffDecompress)(char *,
---
> ()char *,
(98.8 %, 2498 bytes)
41c41
< BZ2_bzBuffToBuffDecompress(char *,
---
> ( *,
41c41
< BZ2_bzBuffToBuffDecompress(char *,
---
>  *,
41c41
< BZ2_bzBuffToBuffDecompress(char *,
---
> (char ,
41c41
< BZ2_bzBuffToBuffDecompress(char *,
---
> char ,
41c41
< BZ2_bzBuffToBuffDecompress(char *,
---
> ( ,
41c41
< BZ2_bzBuffToBuffDecompress(char *,
---
>  ,
41c41
< BZ2_bzBuffToBuffDecompress(char *,
---
> BZ2_bzBuffToBuffDecompresschar *,
41c41
< BZ2_bzBuffToBuffDecompress(char *,
---
> BZ2_bzBuffToBuffDecompress *,
41c41
< BZ2_bzBuffToBuffDecompress(char *,
---
> BZ2_bzBuffToBuffDecompresschar ,
41c41
< BZ2_bzBuffToBuffDecompress(char *,
---
> BZ2_bzBuffToBuffDecompress ,
41c41
< BZ2_bzBuffToBuffDecompress(char *,
---
> BZ2_bzBuffToBuffDecompresschar *
41c41
< BZ2_bzBuffToBuffDecompress(char *,
---
> BZ2_bzBuffToBuffDecompress *
41c41
< BZ2_bzBuffToBuffDecompress(char *,
---
> BZ2_bzBuffToBuffDecompresschar 
41c41
< BZ2_bzBuffToBuffDecompress(char *,
---
> BZ2_bzBuffToBuffDecompress 
41c41
< BZ2_bzBuffToBuffDecompress(char *,
---
> BZ2_bzBuffToBuffDecompress( *,
41c41
< BZ2_bzBuffToBuffDecompress(char *,
---
> BZ2_bzBuffToBuffDecompress( ,
41c41
< BZ2_bzBuffToBuffDecompress(char *,
---
> BZ2_bzBuffToBuffDecompress( *
41c41
< BZ2_bzBuffToBuffDecompress(char *,
---
> BZ2_bzBuffToBuffDecompress( 
41,42c41,42
< BZ2_bzBuffToBuffDecompress(char *,
<                                                  unsigned *,
---
> BZ2_bzBuffToBuffDecompress( *,
>                                                   *,
41,42c41,42
< BZ2_bzBuffToBuffDecompress(char *,
<                                                  unsigned *,
---
> BZ2_bzBuffToBuffDecompress( ,
>                                                   *,
41,42c41,42
< BZ2_bzBuffToBuffDecompress(char *,
<                                                  unsigned *,
---
> BZ2_bzBuffToBuffDecompress( *
>                                                   *,
41,42c41,42
< BZ2_bzBuffToBuffDecompress(char *,
<                                                  unsigned *,
---
> BZ2_bzBuffToBuffDecompress( 
>                                                   *,
41c41
< BZ2_bzBuffToBuffDecompress(char *,
---
> BZ2_bzBuffToBuffDecompress(char ,
41c41
< BZ2_bzBuffToBuffDecompress(char *,
---
> BZ2_bzBuffToBuffDecompress(char 
41,42c41,42
< BZ2_bzBuffToBuffDecompress(char *,
<                                                  unsigned *,
---
> BZ2_bzBuffToBuffDecompress(char ,
>                                                   *,
41,42c41,42
< BZ2_bzBuffToBuffDecompress(char *,
<                                                  unsigned *,
---
> BZ2_bzBuffToBuffDecompress(char 
>                                                   *,
41,42c41,42
< BZ2_bzBuffToBuffDecompress(char *,
<                                                  unsigned *,
---
> BZ2_bzBuffToBuffDecompress(char ,
>                                                  unsigned ,
41,42c41,42
< BZ2_bzBuffToBuffDecompress(char *,
<                                                  unsigned *,
---
> BZ2_bzBuffToBuffDecompress(char 
>                                                  unsigned ,
41,42c41,42
< BZ2_bzBuffToBuffDecompress(char *,
<                                                  unsigned *,
---
> BZ2_bzBuffToBuffDecompress(char ,
>                                                   ,
41,42c41,42
< BZ2_bzBuffToBuffDecompress(char *,
<                                                  unsigned *,
---
> BZ2_bzBuffToBuffDecompress(char 
>                                                   ,
41c41
< BZ2_bzBuffToBuffDecompress(char *,
---
> BZ2_bzBuffToBuffDecompress(char *
41,42c41,42
< BZ2_bzBuffToBuffDecompress(char *,
<                                                  unsigned *,
---
> BZ2_bzBuffToBuffDecompress(char *
>                                                   *,
41,42c41,42
< BZ2_bzBuffToBuffDecompress(char *,
<                                                  unsigned *,
---
> BZ2_bzBuffToBuffDecompress(char *
>                                                  unsigned ,
41,42c41,42
< BZ2_bzBuffToBuffDecompress(char *,
<                                                  unsigned *,
---
> BZ2_bzBuffToBuffDecompress(char *
>                                                   ,
41,42c41,42
< BZ2_bzBuffToBuffDecompress(char *,
<                                                  unsigned *,
---
> BZ2_bzBuffToBuffDecompress(char *
>                                                  unsigned *
41,42c41,42
< BZ2_bzBuffToBuffDecompress(char *,
<                                                  unsigned *,
---
> BZ2_bzBuffToBuffDecompress(char *
>                                                   *
41,42c41,42
< BZ2_bzBuffToBuffDecompress(char *,
<                                                  unsigned *,
---
> BZ2_bzBuffToBuffDecompress(char *
>                                                  unsigned 
41,42c41,42
< BZ2_bzBuffToBuffDecompress(char *,
<                                                  unsigned *,
---
> BZ2_bzBuffToBuffDecompress(char *
>                                                   
42c42
<                                                  unsigned *,
---
>                                                   *,
42c42
<                                                  unsigned *,
---
>                                                   ,
42c42
<                                                  unsigned *,
---
>                                                   *
42c42
<                                                  unsigned *,
---
>                                                   
42,43c42,43
<                                                  unsigned *,
<                                                  char *,
---
>                                                   *,
>                                                   *,
42,43c42,43
<                                                  unsigned *,
<                                                  char *,
---
>                                                   ,
>                                                   *,
42,43c42,43
<                                                  unsigned *,
<                                                  char *,
---
>                                                   *
>                                                   *,
42,43c42,43
<                                                  unsigned *,
<                                                  char *,
---
>                                                   
>                                                   *,
42c42
<                                                  unsigned *,
---
>                                                  unsigned ,
42c42
<                                                  unsigned *,
---
>                                                  unsigned 
42,43c42,43
<                                                  unsigned *,
<                                                  char *,
---
>                                                  unsigned ,
>                                                   *,
42,43c42,43
<                                                  unsigned *,
<                                                  char *,
---
>                                                  unsigned 
>                                                   *,
42,43c42,43
<                                                  unsigned *,
<                                                  char *,
---
>                                                  unsigned ,
>                                                  char ,
42,43c42,43
<                                                  unsigned *,
<                                                  char *,
---
>                                                  unsigned 
>                                                  char ,
42,43c42,43
<                                                  unsigned *,
<                                                  char *,
---
>                                                  unsigned ,
>                                                   ,
42,43c42,43
<                                                  unsigned *,
<                                                  char *,
---
>                                                  unsigned 
>                                                   ,
42c42
<                                                  unsigned *,
---
>                                                  unsigned *
42,43c42,43
<                                                  unsigned *,
<                                                  char *,
---
>                                                  unsigned *
>                                                   *,
42,43c42,43
<                                                  unsigned *,
<                                                  char *,
---
>                                                  unsigned *
>                                                  char ,
42,43c42,43
<                                                  unsigned *,
<                                                  char *,
---
>                                                  unsigned *
>                                                   ,
42,43c42,43
<                                                  unsigned *,
<                                                  char *,
---
>                                                  unsigned *
>                                                  char *
42,43c42,43
<                                                  unsigned *,
<                                                  char *,
---
>                                                  unsigned *
>                                                   *
42,43c42,43
<                                                  unsigned *,
<                                                  char *,
---
>                                                  unsigned *
>                                                  char 
42,43c42,43
<                                                  unsigned *,
<                                                  char *,
---
>                                                  unsigned *
>                                                   
43c43
<                                                  char *,
---
>                                                   *,
43c43
<                                                  char *,
---
>                                                   ,
43c43
<                                                  char *,
---
>                                                   *
43c43
<                                                  char *,
---
>                                                   
43,44c43,44
<                                                  char *,
<                                                  unsigned ,
---
>                                                   *,
>                                                   ,
43,44c43,44
<                                                  char *,
<                                                  unsigned ,
---
>                                                   ,
>                                                   ,
43,44c43,44
<                                                  char *,
<                                                  unsigned ,
---
>                                                   *
>                                                   ,
43,44c43,44
<                                                  char *,
<                                                  unsigned ,
---
>                                                   
>                                                   ,
43c43
<                                                  char *,
---
>                                                  char ,
43c43
<                                                  char *,
---
>                                                  char 
43,44c43,44
<                                                  char *,
<                                                  unsigned ,
---
>                                                  char ,
>                                                   ,
43,44c43,44
<                                                  char *,
<                                                  unsigned ,
---
>                                                  char 
>                                                   ,
43,44c43,44
<                                                  char *,
<                                                  unsigned ,
---
>                                                  char ,
>                                                  unsigned 
43,44c43,44
<                                                  char *,
<                                                  unsigned ,
---
>                                                  char 
>                                                  unsigned 
43,44c43,44
<                                                  char *,
<                                                  unsigned ,
---
>                                                  char ,
>                                                   
43,44c43,44
<                                                  char *,
<                                                  unsigned ,
---
>                                                  char 
>                                                   
43c43
<                                                  char *,
---
>                                                  char *
43,44c43,44
<                                                  char *,
<                                                  unsigned ,
---
>                                                  char *
>                                                   ,
43,44c43,44
<                                                  char *,
<                                                  unsigned ,
---
>                                                  char *
>                                                  unsigned 
43,44c43,44
<                                                  char *,
<                                                  unsigned ,
---
>                                                  char *
>                                                   
43c43
<                                                  char *,
---
>                                                  char *
45c45
<                                                  int , int );
---
>                                                   , int );
43,45c43,45
<                                                  char *,
<                                                  unsigned ,
<                                                  int , int );
---
>                                                  char *
>                                                   ,
>                                                   , int );
43,45c43,45
<                                                  char *,
<                                                  unsigned ,
<                                                  int , int );
---
>                                                  char *
>                                                  unsigned 
>                                                   , int );
43,45c43,45
<                                                  char *,
<                                                  unsigned ,
<                                                  int , int );
---
>                                                  char *
>                                                   
>                                                   , int );
44c44
<                                                  unsigned ,
---
>                                                   ,
44c44
<                                                  unsigned ,
---
>                                                   
44,45c44,45
<                                                  unsigned ,
<                                                  int , int );
---
>                                                   ,
>                                                   , int );
44,45c44,45
<                                                  unsigned ,
<                                                  int , int );
---
>                                                   
>                                                   , int );
44,45c44,45
<                                                  unsigned ,
<                                                  int , int );
---
>                                                   ,
>                                                  int  int );
44,45c44,45
<                                                  unsigned ,
<                                                  int , int );
---
>                                                   
>                                                  int  int );
44,45c44,45
<                                                  unsigned ,
<                                                  int , int );
---
>                                                   ,
>                                                    int );
44,45c44,45
<                                                  unsigned ,
<                                                  int , int );
---
>                                                   
>                                                    int );
44c44
<                                                  unsigned ,
---
>                                                  unsigned 
44,45c44,45
<                                                  unsigned ,
<                                                  int , int );
---
>                                                  unsigned 
>                                                   , int );
44,45c44,45
<                                                  unsigned ,
<                                                  int , int );
---
>                                                  unsigned 
>                                                  int  int );
44,45c44,45
<                                                  unsigned ,
<                                                  int , int );
---
>                                                  unsigned 
>                                                    int );
44,45c44,45
<                                                  unsigned ,
<                                                  int , int );
---
>                                                  unsigned 
>                                                  int ,  );
44,45c44,45
<                                                  unsigned ,
<                                                  int , int );
---
>                                                  unsigned 
>                                                   ,  );
44,45c44,45
<                                                  unsigned ,
<                                                  int , int );
---
>                                                  unsigned 
>                                                  int   );
44,45c44,45
<                                                  unsigned ,
<                                                  int , int );
---
>                                                  unsigned 
>                                                     );
45c45
<                                                  int , int );
---
>                                                   , int );
45c45
<                                                  int , int );
---
>                                                    int );
45c45
<                                                  int , int );
---
>                                                   ,  );
45c45
<                                                  int , int );
---
>                                                     );
45c45
<                                                  int , int );
---
>                                                   , int ;
45c45
<                                                  int , int );
---
>                                                    int ;
45c45
<                                                  int , int );
---
>                                                   ,  ;
45c45
<                                                  int , int );
---
>                                                     ;
45c45
<                                                  int , int );
---
>                                                  int  int );
45c45
<                                                  int , int );
---
>                                                  int   );
45c45
<                                                  int , int );
---
>                                                  int  int ;
45c45
<                                                  int , int );
---
>                                                  int   ;
45c45
<                                                  int , int );
---
>                                                  int  int )
45c45
<                                                  int , int );
---
>                                                  int   )
45c45
<                                                  int , int );
---
>                                                  int  int 
45c45
<                                                  int , int );
---
>                                                  int   
45c45
<                                                  int , int );
---
>                                                  int ,  );
45c45
<                                                  int , int );
---
>                                                  int ,  ;
45c45
<                                                  int , int );
---
>                                                  int ,  )
45c45
<                                                  int , int );
---
>                                                  int ,  
45c45
<                                                  int , int );
---
>                                                  int ,  );
47c47
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> BZ2_bzCompressInit)(bz_stream *, int ,
45c45
<                                                  int , int );
---
>                                                  int ,  ;
47c47
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> BZ2_bzCompressInit)(bz_stream *, int ,
45c45
<                                                  int , int );
---
>                                                  int ,  )
47c47
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> BZ2_bzCompressInit)(bz_stream *, int ,
45c45
<                                                  int , int );
---
>                                                  int ,  
47c47
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> BZ2_bzCompressInit)(bz_stream *, int ,
45c45
<                                                  int , int );
---
>                                                  int , int ;
45c45
<                                                  int , int );
---
>                                                  int , int 
45c45
<                                                  int , int );
---
>                                                  int , int ;
47c47
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> BZ2_bzCompressInit)(bz_stream *, int ,
45c45
<                                                  int , int );
---
>                                                  int , int 
47c47
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> BZ2_bzCompressInit)(bz_stream *, int ,
45c45
<                                                  int , int );
---
>                                                  int , int ;
47c47
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> ()(bz_stream *, int ,
45c45
<                                                  int , int );
---
>                                                  int , int 
47c47
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> ()(bz_stream *, int ,
45c45
<                                                  int , int );
---
>                                                  int , int ;
47c47
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> )(bz_stream *, int ,
45c45
<                                                  int , int );
---
>                                                  int , int 
47c47
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> )(bz_stream *, int ,
45c45
<                                                  int , int );
---
>                                                  int , int )
45c45
<                                                  int , int );
---
>                                                  int , int )
47c47
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> BZ2_bzCompressInit)(bz_stream *, int ,
45c45
<                                                  int , int );
---
>                                                  int , int )
47c47
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> ()(bz_stream *, int ,
45c45
<                                                  int , int );
---
>                                                  int , int )
47c47
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> )(bz_stream *, int ,
45c45
<                                                  int , int );
---
>                                                  int , int )
47c47
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (BZ2_bzCompressInit(bz_stream *, int ,
45c45
<                                                  int , int );
---
>                                                  int , int )
47c47
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> BZ2_bzCompressInit(bz_stream *, int ,
45c45
<                                                  int , int );
---
>                                                  int , int )
47c47
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> ((bz_stream *, int ,
45c45
<                                                  int , int );
---
>                                                  int , int )
47c47
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
47c47
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> BZ2_bzCompressInit)(bz_stream *, int ,
47c47
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> )(bz_stream *, int ,
47c47
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> BZ2_bzCompressInit(bz_stream *, int ,
47c47
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
47c47
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> BZ2_bzCompressInit)bz_stream *, int ,
47c47
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> )bz_stream *, int ,
47c47
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> BZ2_bzCompressInitbz_stream *, int ,
47c47
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> bz_stream *, int ,
47c47
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> ()(bz_stream *, int ,
47c47
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> ((bz_stream *, int ,
(98.8 %, 2496 bytes)
47c47
< BZ2_bzCompressInit(bz_stream *, int ,
---
> ( *, int ,
47c47
< BZ2_bzCompressInit(bz_stream *, int ,
---
>  *, int ,
47c47
< BZ2_bzCompressInit(bz_stream *, int ,
---
> (bz_stream , int ,
47c47
< BZ2_bzCompressInit(bz_stream *, int ,
---
> bz_stream , int ,
47c47
< BZ2_bzCompressInit(bz_stream *, int ,
---
> ( , int ,
47c47
< BZ2_bzCompressInit(bz_stream *, int ,
---
>  , int ,
47c47
< BZ2_bzCompressInit(bz_stream *, int ,
---
> BZ2_bzCompressInitbz_stream *, int ,
47c47
< BZ2_bzCompressInit(bz_stream *, int ,
---
> BZ2_bzCompressInit *, int ,
47c47
< BZ2_bzCompressInit(bz_stream *, int ,
---
> BZ2_bzCompressInitbz_stream , int ,
47c47
< BZ2_bzCompressInit(bz_stream *, int ,
---
> BZ2_bzCompressInit , int ,
47c47
< BZ2_bzCompressInit(bz_stream *, int ,
---
> BZ2_bzCompressInitbz_stream * int ,
47c47
< BZ2_bzCompressInit(bz_stream *, int ,
---
> BZ2_bzCompressInit * int ,
47c47
< BZ2_bzCompressInit(bz_stream *, int ,
---
> BZ2_bzCompressInitbz_stream  int ,
47c47
< BZ2_bzCompressInit(bz_stream *, int ,
---
> BZ2_bzCompressInit  int ,
47c47
< BZ2_bzCompressInit(bz_stream *, int ,
---
> BZ2_bzCompressInit( *, int ,
47c47
< BZ2_bzCompressInit(bz_stream *, int ,
---
> BZ2_bzCompressInit( , int ,
47c47
< BZ2_bzCompressInit(bz_stream *, int ,
---
> BZ2_bzCompressInit( * int ,
47c47
< BZ2_bzCompressInit(bz_stream *, int ,
---
> BZ2_bzCompressInit(  int ,
47c47
< BZ2_bzCompressInit(bz_stream *, int ,
---
> BZ2_bzCompressInit( *,  ,
47c47
< BZ2_bzCompressInit(bz_stream *, int ,
---
> BZ2_bzCompressInit( ,  ,
47c47
< BZ2_bzCompressInit(bz_stream *, int ,
---
> BZ2_bzCompressInit( *  ,
47c47
< BZ2_bzCompressInit(bz_stream *, int ,
---
> BZ2_bzCompressInit(   ,
47c47
< BZ2_bzCompressInit(bz_stream *, int ,
---
> BZ2_bzCompressInit(bz_stream , int ,
47c47
< BZ2_bzCompressInit(bz_stream *, int ,
---
> BZ2_bzCompressInit(bz_stream  int ,
47c47
< BZ2_bzCompressInit(bz_stream *, int ,
---
> BZ2_bzCompressInit(bz_stream ,  ,
47c47
< BZ2_bzCompressInit(bz_stream *, int ,
---
> BZ2_bzCompressInit(bz_stream   ,
47c47
< BZ2_bzCompressInit(bz_stream *, int ,
---
> BZ2_bzCompressInit(bz_stream , int 
47c47
< BZ2_bzCompressInit(bz_stream *, int ,
---
> BZ2_bzCompressInit(bz_stream  int 
47c47
< BZ2_bzCompressInit(bz_stream *, int ,
---
> BZ2_bzCompressInit(bz_stream ,  
47c47
< BZ2_bzCompressInit(bz_stream *, int ,
---
> BZ2_bzCompressInit(bz_stream   
47c47
< BZ2_bzCompressInit(bz_stream *, int ,
---
> BZ2_bzCompressInit(bz_stream * int ,
47c47
< BZ2_bzCompressInit(bz_stream *, int ,
---
> BZ2_bzCompressInit(bz_stream *  ,
47c47
< BZ2_bzCompressInit(bz_stream *, int ,
---
> BZ2_bzCompressInit(bz_stream * int 
47c47
< BZ2_bzCompressInit(bz_stream *, int ,
---
> BZ2_bzCompressInit(bz_stream *  
47,48c47,48
< BZ2_bzCompressInit(bz_stream *, int ,
<                                int , int);
---
> BZ2_bzCompressInit(bz_stream * int ,
>                                 , int);
47,48c47,48
< BZ2_bzCompressInit(bz_stream *, int ,
<                                int , int);
---
> BZ2_bzCompressInit(bz_stream *  ,
>                                 , int);
47,48c47,48
< BZ2_bzCompressInit(bz_stream *, int ,
<                                int , int);
---
> BZ2_bzCompressInit(bz_stream * int 
>                                 , int);
47,48c47,48
< BZ2_bzCompressInit(bz_stream *, int ,
<                                int , int);
---
> BZ2_bzCompressInit(bz_stream *  
>                                 , int);
47c47
< BZ2_bzCompressInit(bz_stream *, int ,
---
> BZ2_bzCompressInit(bz_stream *,  ,
47c47
< BZ2_bzCompressInit(bz_stream *, int ,
---
> BZ2_bzCompressInit(bz_stream *,  
47,48c47,48
< BZ2_bzCompressInit(bz_stream *, int ,
<                                int , int);
---
> BZ2_bzCompressInit(bz_stream *,  ,
>                                 , int);
47,48c47,48
< BZ2_bzCompressInit(bz_stream *, int ,
<                                int , int);
---
> BZ2_bzCompressInit(bz_stream *,  
>                                 , int);
47,48c47,48
< BZ2_bzCompressInit(bz_stream *, int ,
<                                int , int);
---
> BZ2_bzCompressInit(bz_stream *,  ,
>                                int  int);
47,48c47,48
< BZ2_bzCompressInit(bz_stream *, int ,
<                                int , int);
---
> BZ2_bzCompressInit(bz_stream *,  
>                                int  int);
47,48c47,48
< BZ2_bzCompressInit(bz_stream *, int ,
<                                int , int);
---
> BZ2_bzCompressInit(bz_stream *,  ,
>                                  int);
47,48c47,48
< BZ2_bzCompressInit(bz_stream *, int ,
<                                int , int);
---
> BZ2_bzCompressInit(bz_stream *,  
>                                  int);
47c47
< BZ2_bzCompressInit(bz_stream *, int ,
---
> BZ2_bzCompressInit(bz_stream *, int 
47,48c47,48
< BZ2_bzCompressInit(bz_stream *, int ,
<                                int , int);
---
> BZ2_bzCompressInit(bz_stream *, int 
>                                 , int);
47,48c47,48
< BZ2_bzCompressInit(bz_stream *, int ,
<                                int , int);
---
> BZ2_bzCompressInit(bz_stream *, int 
>                                int  int);
47,48c47,48
< BZ2_bzCompressInit(bz_stream *, int ,
<                                int , int);
---
> BZ2_bzCompressInit(bz_stream *, int 
>                                  int);
47,48c47,48
< BZ2_bzCompressInit(bz_stream *, int ,
<                                int , int);
---
> BZ2_bzCompressInit(bz_stream *, int 
>                                int , );
47,48c47,48
< BZ2_bzCompressInit(bz_stream *, int ,
<                                int , int);
---
> BZ2_bzCompressInit(bz_stream *, int 
>                                 , );
47,48c47,48
< BZ2_bzCompressInit(bz_stream *, int ,
<                                int , int);
---
> BZ2_bzCompressInit(bz_stream *, int 
>                                int  );
47,48c47,48
< BZ2_bzCompressInit(bz_stream *, int ,
<                                int , int);
---
> BZ2_bzCompressInit(bz_stream *, int 
>                                  );
48c48
<                                int , int);
---
>                                 , int);
48c48
<                                int , int);
---
>                                  int);
48c48
<                                int , int);
---
>                                 , );
48c48
<                                int , int);
---
>                                  );
48c48
<                                int , int);
---
>                                 , int;
48c48
<                                int , int);
---
>                                  int;
48c48
<                                int , int);
---
>                                 , ;
48c48
<                                int , int);
---
>                                  ;
48c48
<                                int , int);
---
>                                int  int);
48c48
<                                int , int);
---
>                                int  );
48c48
<                                int , int);
---
>                                int  int;
48c48
<                                int , int);
---
>                                int  ;
48c48
<                                int , int);
---
>                                int  int)
48c48
<                                int , int);
---
>                                int  )
48c48
<                                int , int);
---
>                                int  int
48c48
<                                int , int);
---
>                                int  
48c48
<                                int , int);
---
>                                int , );
48c48
<                                int , int);
---
>                                int , ;
48c48
<                                int , int);
---
>                                int , )
48c48
<                                int , int);
---
>                                int , 
48c48
<                                int , int);
---
>                                int , );
50c50
< #define BZ_SETERR
---
> define BZ_SETERR
48c48
<                                int , int);
---
>                                int , ;
50c50
< #define BZ_SETERR
---
> define BZ_SETERR
48c48
<                                int , int);
---
>                                int , )
50c50
< #define BZ_SETERR
---
> define BZ_SETERR
48c48
<                                int , int);
---
>                                int , 
50c50
< #define BZ_SETERR
---
> define BZ_SETERR
48c48
<                                int , int);
---
>                                int , int;
48c48
<                                int , int);
---
>                                int , int
48c48
<                                int , int);
---
>                                int , int;
50c50
< #define BZ_SETERR
---
> define BZ_SETERR
48c48
<                                int , int);
---
>                                int , int
50c50
< #define BZ_SETERR
---
> define BZ_SETERR
48c48
<                                int , int);
---
>                                int , int;
50c50
< #define BZ_SETERR
---
> # BZ_SETERR
48c48
<                                int , int);
---
>                                int , int
50c50
< #define BZ_SETERR
---
> # BZ_SETERR
48c48
<                                int , int);
---
>                                int , int;
50c50
< #define BZ_SETERR
---
>  BZ_SETERR
48c48
<                                int , int);
---
>                                int , int
50c50
< #define BZ_SETERR
---
>  BZ_SETERR
48c48
<                                int , int);
---
>                                int , int)
48c48
<                                int , int);
---
>                                int , int)
50c50
< #define BZ_SETERR
---
> define BZ_SETERR
48c48
<                                int , int);
---
>                                int , int)
50c50
< #define BZ_SETERR
---
> # BZ_SETERR
48c48
<                                int , int);
---
>                                int , int)
50c50
< #define BZ_SETERR
---
>  BZ_SETERR
48c48
<                                int , int);
---
>                                int , int)
50c50
< #define BZ_SETERR
---
> #define 
48c48
<                                int , int);
---
>                                int , int)
50c50
< #define BZ_SETERR
---
> define 
48c48
<                                int , int);
---
>                                int , int)
50c50
< #define BZ_SETERR
---
> # 
48c48
<                                int , int);
---
>                                int , int)
50c50
< #define BZ_SETERR
---
>  
50c50
< #define BZ_SETERR
---
> define BZ_SETERR
50c50
< #define BZ_SETERR
---
>  BZ_SETERR
50c50
< #define BZ_SETERR
---
> define 
50c50
< #define BZ_SETERR
---
>  
50c50
< #define BZ_SETERR
---
> define BZ_SETERR
52c52
< *(BZ2_bzWriteOpen)(int *, FILE *, int ,
---
> (BZ2_bzWriteOpen)(int *, FILE *, int ,
50c50
< #define BZ_SETERR
---
>  BZ_SETERR
52c52
< *(BZ2_bzWriteOpen)(int *, FILE *, int ,
---
> (BZ2_bzWriteOpen)(int *, FILE *, int ,
50c50
< #define BZ_SETERR
---
> define 
52c52
< *(BZ2_bzWriteOpen)(int *, FILE *, int ,
---
> (BZ2_bzWriteOpen)(int *, FILE *, int ,
50c50
< #define BZ_SETERR
---
>  
52c52
< *(BZ2_bzWriteOpen)(int *, FILE *, int ,
---
> (BZ2_bzWriteOpen)(int *, FILE *, int ,
50c50
< #define BZ_SETERR
---
> # BZ_SETERR
50c50
< #define BZ_SETERR
---
> # 
(98.8 %, 2480 bytes)
52c52
< *(BZ2_bzWriteOpen)(int *, FILE *, int ,
---
> )(int *, FILE *, int ,
52c52
< *(BZ2_bzWriteOpen)(int *, FILE *, int ,
---
> (BZ2_bzWriteOpen(int *, FILE *, int ,
52c52
< *(BZ2_bzWriteOpen)(int *, FILE *, int ,
---
> BZ2_bzWriteOpen(int *, FILE *, int ,
52c52
< *(BZ2_bzWriteOpen)(int *, FILE *, int ,
---
> ((int *, FILE *, int ,
52c52
< *(BZ2_bzWriteOpen)(int *, FILE *, int ,
---
> (int *, FILE *, int ,
52c52
< *(BZ2_bzWriteOpen)(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen)(int *, FILE *, int ,
52c52
< *(BZ2_bzWriteOpen)(int *, FILE *, int ,
---
> *)(int *, FILE *, int ,
52c52
< *(BZ2_bzWriteOpen)(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(int *, FILE *, int ,
52c52
< *(BZ2_bzWriteOpen)(int *, FILE *, int ,
---
> *(int *, FILE *, int ,
52c52
< *(BZ2_bzWriteOpen)(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen)int *, FILE *, int ,
52c52
< *(BZ2_bzWriteOpen)(int *, FILE *, int ,
---
> *)int *, FILE *, int ,
52c52
< *(BZ2_bzWriteOpen)(int *, FILE *, int ,
---
> *BZ2_bzWriteOpenint *, FILE *, int ,
52c52
< *(BZ2_bzWriteOpen)(int *, FILE *, int ,
---
> *int *, FILE *, int ,
52c52
< *(BZ2_bzWriteOpen)(int *, FILE *, int ,
---
> *()(int *, FILE *, int ,
52c52
< *(BZ2_bzWriteOpen)(int *, FILE *, int ,
---
> *((int *, FILE *, int ,
52c52
< *(BZ2_bzWriteOpen)(int *, FILE *, int ,
---
> *()int *, FILE *, int ,
(98.8 %, 2478 bytes)
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *( *, FILE *, int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> * *, FILE *, int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *(int , FILE *, int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *int , FILE *, int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *( , FILE *, int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> * , FILE *, int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpenint *, FILE *, int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen *, FILE *, int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpenint , FILE *, int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen , FILE *, int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpenint * FILE *, int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen * FILE *, int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpenint  FILE *, int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen  FILE *, int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen( *, FILE *, int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen( , FILE *, int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen( * FILE *, int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(  FILE *, int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen( *,  *, int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen( ,  *, int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen( *  *, int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(   *, int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(int , FILE *, int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(int  FILE *, int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(int ,  *, int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(int   *, int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(int , FILE , int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(int  FILE , int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(int ,  , int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(int   , int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(int * FILE *, int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(int *  *, int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(int * FILE , int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(int *  , int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(int * FILE * int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(int *  * int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(int * FILE  int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(int *   int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(int *,  *, int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(int *,  , int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(int *,  * int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(int *,   int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(int *,  *,  ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(int *,  ,  ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(int *,  *  ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(int *,    ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(int *, FILE , int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(int *, FILE  int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(int *, FILE ,  ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(int *, FILE   ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(int *, FILE , int 
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(int *, FILE  int 
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(int *, FILE ,  
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(int *, FILE   
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(int *, FILE * int ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(int *, FILE *  ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(int *, FILE * int 
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(int *, FILE *  
52,53c52,53
< *BZ2_bzWriteOpen(int *, FILE *, int ,
<                                 int , int );
---
> *BZ2_bzWriteOpen(int *, FILE * int ,
>                                  , int );
52,53c52,53
< *BZ2_bzWriteOpen(int *, FILE *, int ,
<                                 int , int );
---
> *BZ2_bzWriteOpen(int *, FILE *  ,
>                                  , int );
52,53c52,53
< *BZ2_bzWriteOpen(int *, FILE *, int ,
<                                 int , int );
---
> *BZ2_bzWriteOpen(int *, FILE * int 
>                                  , int );
52,53c52,53
< *BZ2_bzWriteOpen(int *, FILE *, int ,
<                                 int , int );
---
> *BZ2_bzWriteOpen(int *, FILE *  
>                                  , int );
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(int *, FILE *,  ,
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(int *, FILE *,  
52,53c52,53
< *BZ2_bzWriteOpen(int *, FILE *, int ,
<                                 int , int );
---
> *BZ2_bzWriteOpen(int *, FILE *,  ,
>                                  , int );
52,53c52,53
< *BZ2_bzWriteOpen(int *, FILE *, int ,
<                                 int , int );
---
> *BZ2_bzWriteOpen(int *, FILE *,  
>                                  , int );
52,53c52,53
< *BZ2_bzWriteOpen(int *, FILE *, int ,
<                                 int , int );
---
> *BZ2_bzWriteOpen(int *, FILE *,  ,
>                                 int  int );
52,53c52,53
< *BZ2_bzWriteOpen(int *, FILE *, int ,
<                                 int , int );
---
> *BZ2_bzWriteOpen(int *, FILE *,  
>                                 int  int );
52,53c52,53
< *BZ2_bzWriteOpen(int *, FILE *, int ,
<                                 int , int );
---
> *BZ2_bzWriteOpen(int *, FILE *,  ,
>                                   int );
52,53c52,53
< *BZ2_bzWriteOpen(int *, FILE *, int ,
<                                 int , int );
---
> *BZ2_bzWriteOpen(int *, FILE *,  
>                                   int );
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(int *, FILE *, int 
52,53c52,53
< *BZ2_bzWriteOpen(int *, FILE *, int ,
<                                 int , int );
---
> *BZ2_bzWriteOpen(int *, FILE *, int 
>                                  , int );
52,53c52,53
< *BZ2_bzWriteOpen(int *, FILE *, int ,
<                                 int , int );
---
> *BZ2_bzWriteOpen(int *, FILE *, int 
>                                 int  int );
52,53c52,53
< *BZ2_bzWriteOpen(int *, FILE *, int ,
<                                 int , int );
---
> *BZ2_bzWriteOpen(int *, FILE *, int 
>                                   int );
52,53c52,53
< *BZ2_bzWriteOpen(int *, FILE *, int ,
<                                 int , int );
---
> *BZ2_bzWriteOpen(int *, FILE *, int 
>                                 int ,  );
52,53c52,53
< *BZ2_bzWriteOpen(int *, FILE *, int ,
<                                 int , int );
---
> *BZ2_bzWriteOpen(int *, FILE *, int 
>                                  ,  );
52,53c52,53
< *BZ2_bzWriteOpen(int *, FILE *, int ,
<                                 int , int );
---
> *BZ2_bzWriteOpen(int *, FILE *, int 
>                                 int   );
52,53c52,53
< *BZ2_bzWriteOpen(int *, FILE *, int ,
<                                 int , int );
---
> *BZ2_bzWriteOpen(int *, FILE *, int 
>                                    );
53c53
<                                 int , int );
---
>                                  , int );
53c53
<                                 int , int );
---
>                                   int );
53c53
<                                 int , int );
---
>                                  ,  );
53c53
<                                 int , int );
---
>                                    );
53c53
<                                 int , int );
---
>                                  , int ;
53c53
<                                 int , int );
---
>                                   int ;
53c53
<                                 int , int );
---
>                                  ,  ;
53c53
<                                 int , int );
---
>                                    ;
53c53
<                                 int , int );
---
>                                 int  int );
53c53
<                                 int , int );
---
>                                 int   );
53c53
<                                 int , int );
---
>                                 int  int ;
53c53
<                                 int , int );
---
>                                 int   ;
53c53
<                                 int , int );
---
>                                 int  int )
53c53
<                                 int , int );
---
>                                 int   )
53c53
<                                 int , int );
---
>                                 int  int 
53c53
<                                 int , int );
---
>                                 int   
53c53
<                                 int , int );
---
>                                 int ,  );
53c53
<                                 int , int );
---
>                                 int ,  ;
53c53
<                                 int , int );
---
>                                 int ,  )
53c53
<                                 int , int );
---
>                                 int ,  
53c53
<                                 int , int );
---
>                                 int ,  );
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
>  (BZ2_bzWrite)(int *, BZFILE *, void *, int );
53c53
<                                 int , int );
---
>                                 int ,  ;
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
>  (BZ2_bzWrite)(int *, BZFILE *, void *, int );
53c53
<                                 int , int );
---
>                                 int ,  )
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
>  (BZ2_bzWrite)(int *, BZFILE *, void *, int );
53c53
<                                 int , int );
---
>                                 int ,  
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
>  (BZ2_bzWrite)(int *, BZFILE *, void *, int );
53c53
<                                 int , int );
---
>                                 int , int ;
53c53
<                                 int , int );
---
>                                 int , int 
53c53
<                                 int , int );
---
>                                 int , int ;
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
>  (BZ2_bzWrite)(int *, BZFILE *, void *, int );
53c53
<                                 int , int );
---
>                                 int , int 
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
>  (BZ2_bzWrite)(int *, BZFILE *, void *, int );
53c53
<                                 int , int );
---
>                                 int , int ;
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite)(int *, BZFILE *, void *, int );
53c53
<                                 int , int );
---
>                                 int , int 
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite)(int *, BZFILE *, void *, int );
53c53
<                                 int , int );
---
>                                 int , int ;
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
>  BZ2_bzWrite)(int *, BZFILE *, void *, int );
53c53
<                                 int , int );
---
>                                 int , int 
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
>  BZ2_bzWrite)(int *, BZFILE *, void *, int );
53c53
<                                 int , int );
---
>                                 int , int )
53c53
<                                 int , int );
---
>                                 int , int )
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
>  (BZ2_bzWrite)(int *, BZFILE *, void *, int );
53c53
<                                 int , int );
---
>                                 int , int )
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite)(int *, BZFILE *, void *, int );
53c53
<                                 int , int );
---
>                                 int , int )
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
>  BZ2_bzWrite)(int *, BZFILE *, void *, int );
53c53
<                                 int , int );
---
>                                 int , int )
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
> void ()(int *, BZFILE *, void *, int );
53c53
<                                 int , int );
---
>                                 int , int )
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
>  ()(int *, BZFILE *, void *, int );
53c53
<                                 int , int );
---
>                                 int , int )
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
> void )(int *, BZFILE *, void *, int );
53c53
<                                 int , int );
---
>                                 int , int )
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
>  )(int *, BZFILE *, void *, int );
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
>  (BZ2_bzWrite)(int *, BZFILE *, void *, int );
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
>  BZ2_bzWrite)(int *, BZFILE *, void *, int );
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
>  ()(int *, BZFILE *, void *, int );
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
>  )(int *, BZFILE *, void *, int );
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
>  (BZ2_bzWrite(int *, BZFILE *, void *, int );
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
>  BZ2_bzWrite(int *, BZFILE *, void *, int );
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
>  ((int *, BZFILE *, void *, int );
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
>  (int *, BZFILE *, void *, int );
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite)(int *, BZFILE *, void *, int );
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
> void )(int *, BZFILE *, void *, int );
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *, int );
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
> void (int *, BZFILE *, void *, int );
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite)int *, BZFILE *, void *, int );
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
> void )int *, BZFILE *, void *, int );
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
> void BZ2_bzWriteint *, BZFILE *, void *, int );
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
> void int *, BZFILE *, void *, int );
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
> void ()(int *, BZFILE *, void *, int );
55c55
< void (BZ2_bzWrite)(int *, BZFILE *, void *, int );
---
> void ((int *, BZFILE *, void *, int );
(98.8 %, 2476 bytes)
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void ( *, BZFILE *, void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void  *, BZFILE *, void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void (int , BZFILE *, void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void int , BZFILE *, void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void ( , BZFILE *, void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void  , BZFILE *, void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWriteint *, BZFILE *, void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite *, BZFILE *, void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWriteint , BZFILE *, void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite , BZFILE *, void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWriteint * BZFILE *, void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite * BZFILE *, void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWriteint  BZFILE *, void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite  BZFILE *, void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite( *, BZFILE *, void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite( , BZFILE *, void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite( * BZFILE *, void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(  BZFILE *, void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite( *,  *, void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite( ,  *, void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite( *  *, void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(   *, void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int , BZFILE *, void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int  BZFILE *, void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int ,  *, void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int   *, void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int , BZFILE , void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int  BZFILE , void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int ,  , void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int   , void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int * BZFILE *, void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *  *, void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int * BZFILE , void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *  , void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int * BZFILE * void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *  * void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int * BZFILE  void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *   void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *,  *, void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *,  , void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *,  * void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *,   void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *,  *,  *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *,  ,  *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *,  *  *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *,    *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE , void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE  void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE ,  *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE   *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE , void , int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE  void , int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE ,  , int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE   , int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE * void *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *  *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE * void , int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *  , int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE * void * int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *  * int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE * void  int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *   int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *,  *, int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *,  , int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *,  * int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *,   int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *,  *,  );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *,  ,  );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *,  *  );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *,    );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void , int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void  int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void ,  );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void   );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void , int ;
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void  int ;
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void ,  ;
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void   ;
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void * int );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *  );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void * int ;
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *  ;
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void * int )
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *  )
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void * int 
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *  
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *,  );
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *,  ;
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *,  )
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *,  
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *,  );
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
>  (BZ2_bzWriteClose)(int *, BZFILE *, int ,
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *,  ;
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
>  (BZ2_bzWriteClose)(int *, BZFILE *, int ,
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *,  )
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
>  (BZ2_bzWriteClose)(int *, BZFILE *, int ,
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *,  
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
>  (BZ2_bzWriteClose)(int *, BZFILE *, int ,
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *, int ;
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *, int 
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *, int ;
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
>  (BZ2_bzWriteClose)(int *, BZFILE *, int ,
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *, int 
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
>  (BZ2_bzWriteClose)(int *, BZFILE *, int ,
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *, int ;
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose)(int *, BZFILE *, int ,
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *, int 
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose)(int *, BZFILE *, int ,
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *, int ;
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
>  BZ2_bzWriteClose)(int *, BZFILE *, int ,
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *, int 
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
>  BZ2_bzWriteClose)(int *, BZFILE *, int ,
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *, int )
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *, int )
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
>  (BZ2_bzWriteClose)(int *, BZFILE *, int ,
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *, int )
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose)(int *, BZFILE *, int ,
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *, int )
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
>  BZ2_bzWriteClose)(int *, BZFILE *, int ,
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *, int )
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
> void ()(int *, BZFILE *, int ,
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *, int )
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
>  ()(int *, BZFILE *, int ,
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *, int )
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
> void )(int *, BZFILE *, int ,
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *, int )
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
>  )(int *, BZFILE *, int ,
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
>  (BZ2_bzWriteClose)(int *, BZFILE *, int ,
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
>  BZ2_bzWriteClose)(int *, BZFILE *, int ,
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
>  ()(int *, BZFILE *, int ,
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
>  )(int *, BZFILE *, int ,
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
>  (BZ2_bzWriteClose(int *, BZFILE *, int ,
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
>  BZ2_bzWriteClose(int *, BZFILE *, int ,
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
>  ((int *, BZFILE *, int ,
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
>  (int *, BZFILE *, int ,
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose)(int *, BZFILE *, int ,
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
> void )(int *, BZFILE *, int ,
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *, BZFILE *, int ,
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
> void (int *, BZFILE *, int ,
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose)int *, BZFILE *, int ,
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
> void )int *, BZFILE *, int ,
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
> void BZ2_bzWriteCloseint *, BZFILE *, int ,
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
> void int *, BZFILE *, int ,
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
> void ()(int *, BZFILE *, int ,
57c57
< void (BZ2_bzWriteClose)(int *, BZFILE *, int ,
---
> void ((int *, BZFILE *, int ,
(98.8 %, 2474 bytes)
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void ( *, BZFILE *, int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void  *, BZFILE *, int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void (int , BZFILE *, int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void int , BZFILE *, int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void ( , BZFILE *, int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void  , BZFILE *, int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteCloseint *, BZFILE *, int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose *, BZFILE *, int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteCloseint , BZFILE *, int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose , BZFILE *, int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteCloseint * BZFILE *, int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose * BZFILE *, int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteCloseint  BZFILE *, int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose  BZFILE *, int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose( *, BZFILE *, int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose( , BZFILE *, int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose( * BZFILE *, int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(  BZFILE *, int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose( *,  *, int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose( ,  *, int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose( *  *, int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(   *, int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int , BZFILE *, int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int  BZFILE *, int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int ,  *, int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int   *, int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int , BZFILE , int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int  BZFILE , int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int ,  , int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int   , int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int * BZFILE *, int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *  *, int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int * BZFILE , int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *  , int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int * BZFILE * int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *  * int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int * BZFILE  int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *   int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *,  *, int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *,  , int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *,  * int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *,   int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *,  *,  ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *,  ,  ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *,  *  ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *,    ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *, BZFILE , int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *, BZFILE  int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *, BZFILE ,  ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *, BZFILE   ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *, BZFILE , int 
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *, BZFILE  int 
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *, BZFILE ,  
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *, BZFILE   
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *, BZFILE * int ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *, BZFILE *  ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *, BZFILE * int 
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *, BZFILE *  
57,58c57,58
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                               unsigned *,
---
> void BZ2_bzWriteClose(int *, BZFILE * int ,
>                                *,
57,58c57,58
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                               unsigned *,
---
> void BZ2_bzWriteClose(int *, BZFILE *  ,
>                                *,
57,58c57,58
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                               unsigned *,
---
> void BZ2_bzWriteClose(int *, BZFILE * int 
>                                *,
57,58c57,58
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                               unsigned *,
---
> void BZ2_bzWriteClose(int *, BZFILE *  
>                                *,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *, BZFILE *,  ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *, BZFILE *,  
57,58c57,58
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                               unsigned *,
---
> void BZ2_bzWriteClose(int *, BZFILE *,  ,
>                                *,
57,58c57,58
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                               unsigned *,
---
> void BZ2_bzWriteClose(int *, BZFILE *,  
>                                *,
57,58c57,58
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                               unsigned *,
---
> void BZ2_bzWriteClose(int *, BZFILE *,  ,
>                               unsigned ,
57,58c57,58
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                               unsigned *,
---
> void BZ2_bzWriteClose(int *, BZFILE *,  
>                               unsigned ,
57,58c57,58
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                               unsigned *,
---
> void BZ2_bzWriteClose(int *, BZFILE *,  ,
>                                ,
57,58c57,58
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                               unsigned *,
---
> void BZ2_bzWriteClose(int *, BZFILE *,  
>                                ,
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *, BZFILE *, int 
57,58c57,58
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                               unsigned *,
---
> void BZ2_bzWriteClose(int *, BZFILE *, int 
>                                *,
57,58c57,58
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                               unsigned *,
---
> void BZ2_bzWriteClose(int *, BZFILE *, int 
>                               unsigned ,
57,58c57,58
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                               unsigned *,
---
> void BZ2_bzWriteClose(int *, BZFILE *, int 
>                                ,
57,58c57,58
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                               unsigned *,
---
> void BZ2_bzWriteClose(int *, BZFILE *, int 
>                               unsigned *
57,58c57,58
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                               unsigned *,
---
> void BZ2_bzWriteClose(int *, BZFILE *, int 
>                                *
57,58c57,58
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                               unsigned *,
---
> void BZ2_bzWriteClose(int *, BZFILE *, int 
>                               unsigned 
57,58c57,58
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                               unsigned *,
---
> void BZ2_bzWriteClose(int *, BZFILE *, int 
>                                
58c58
<                               unsigned *,
---
>                                *,
58c58
<                               unsigned *,
---
>                                ,
58c58
<                               unsigned *,
---
>                                *
58c58
<                               unsigned *,
---
>                                
58,59c58,59
<                               unsigned *,
<                               unsigned *);
---
>                                *,
>                                *);
58,59c58,59
<                               unsigned *,
<                               unsigned *);
---
>                                ,
>                                *);
58,59c58,59
<                               unsigned *,
<                               unsigned *);
---
>                                *
>                                *);
58,59c58,59
<                               unsigned *,
<                               unsigned *);
---
>                                
>                                *);
58c58
<                               unsigned *,
---
>                               unsigned ,
58c58
<                               unsigned *,
---
>                               unsigned 
58,59c58,59
<                               unsigned *,
<                               unsigned *);
---
>                               unsigned ,
>                                *);
58,59c58,59
<                               unsigned *,
<                               unsigned *);
---
>                               unsigned 
>                                *);
58,59c58,59
<                               unsigned *,
<                               unsigned *);
---
>                               unsigned ,
>                               unsigned );
58,59c58,59
<                               unsigned *,
<                               unsigned *);
---
>                               unsigned 
>                               unsigned );
58,59c58,59
<                               unsigned *,
<                               unsigned *);
---
>                               unsigned ,
>                                );
58,59c58,59
<                               unsigned *,
<                               unsigned *);
---
>                               unsigned 
>                                );
58c58
<                               unsigned *,
---
>                               unsigned *
58,59c58,59
<                               unsigned *,
<                               unsigned *);
---
>                               unsigned *
>                                *);
58,59c58,59
<                               unsigned *,
<                               unsigned *);
---
>                               unsigned *
>                               unsigned );
58,59c58,59
<                               unsigned *,
<                               unsigned *);
---
>                               unsigned *
>                                );
58,59c58,59
<                               unsigned *,
<                               unsigned *);
---
>                               unsigned *
>                               unsigned *;
58,59c58,59
<                               unsigned *,
<                               unsigned *);
---
>                               unsigned *
>                                *;
58,59c58,59
<                               unsigned *,
<                               unsigned *);
---
>                               unsigned *
>                               unsigned ;
58,59c58,59
<                               unsigned *,
<                               unsigned *);
---
>                               unsigned *
>                                ;
59c59
<                               unsigned *);
---
>                                *);
59c59
<                               unsigned *);
---
>                                );
59c59
<                               unsigned *);
---
>                                *;
59c59
<                               unsigned *);
---
>                                ;
59c59
<                               unsigned *);
---
>                                *)
59c59
<                               unsigned *);
---
>                                )
59c59
<                               unsigned *);
---
>                                *
59c59
<                               unsigned *);
---
>                                
59c59
<                               unsigned *);
---
>                               unsigned );
59c59
<                               unsigned *);
---
>                               unsigned ;
59c59
<                               unsigned *);
---
>                               unsigned )
59c59
<                               unsigned *);
---
>                               unsigned 
59c59
<                               unsigned *);
---
>                               unsigned );
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
>  (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
59c59
<                               unsigned *);
---
>                               unsigned ;
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
>  (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
59c59
<                               unsigned *);
---
>                               unsigned )
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
>  (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
59c59
<                               unsigned *);
---
>                               unsigned 
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
>  (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
59c59
<                               unsigned *);
---
>                               unsigned *;
59c59
<                               unsigned *);
---
>                               unsigned *
59c59
<                               unsigned *);
---
>                               unsigned *;
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
>  (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
59c59
<                               unsigned *);
---
>                               unsigned *
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
>  (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
59c59
<                               unsigned *);
---
>                               unsigned *;
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64)(int *, BZFILE *, int ,
59c59
<                               unsigned *);
---
>                               unsigned *
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64)(int *, BZFILE *, int ,
59c59
<                               unsigned *);
---
>                               unsigned *;
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
>  BZ2_bzWriteClose64)(int *, BZFILE *, int ,
59c59
<                               unsigned *);
---
>                               unsigned *
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
>  BZ2_bzWriteClose64)(int *, BZFILE *, int ,
59c59
<                               unsigned *);
---
>                               unsigned *)
59c59
<                               unsigned *);
---
>                               unsigned *)
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
>  (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
59c59
<                               unsigned *);
---
>                               unsigned *)
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64)(int *, BZFILE *, int ,
59c59
<                               unsigned *);
---
>                               unsigned *)
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
>  BZ2_bzWriteClose64)(int *, BZFILE *, int ,
59c59
<                               unsigned *);
---
>                               unsigned *)
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
> void ()(int *, BZFILE *, int ,
59c59
<                               unsigned *);
---
>                               unsigned *)
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
>  ()(int *, BZFILE *, int ,
59c59
<                               unsigned *);
---
>                               unsigned *)
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
> void )(int *, BZFILE *, int ,
59c59
<                               unsigned *);
---
>                               unsigned *)
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
>  )(int *, BZFILE *, int ,
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
>  (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
>  BZ2_bzWriteClose64)(int *, BZFILE *, int ,
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
>  ()(int *, BZFILE *, int ,
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
>  )(int *, BZFILE *, int ,
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
>  (BZ2_bzWriteClose64(int *, BZFILE *, int ,
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
>  BZ2_bzWriteClose64(int *, BZFILE *, int ,
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
>  ((int *, BZFILE *, int ,
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
>  (int *, BZFILE *, int ,
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64)(int *, BZFILE *, int ,
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
> void )(int *, BZFILE *, int ,
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *, BZFILE *, int ,
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
> void (int *, BZFILE *, int ,
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64)int *, BZFILE *, int ,
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
> void )int *, BZFILE *, int ,
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64int *, BZFILE *, int ,
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
> void int *, BZFILE *, int ,
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
> void ()(int *, BZFILE *, int ,
61c61
< void (BZ2_bzWriteClose64)(int *, BZFILE *, int ,
---
> void ((int *, BZFILE *, int ,
(98.8 %, 2472 bytes)
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void ( *, BZFILE *, int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void  *, BZFILE *, int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void (int , BZFILE *, int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void int , BZFILE *, int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void ( , BZFILE *, int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void  , BZFILE *, int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64int *, BZFILE *, int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64 *, BZFILE *, int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64int , BZFILE *, int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64 , BZFILE *, int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64int * BZFILE *, int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64 * BZFILE *, int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64int  BZFILE *, int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64  BZFILE *, int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64( *, BZFILE *, int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64( , BZFILE *, int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64( * BZFILE *, int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(  BZFILE *, int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64( *,  *, int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64( ,  *, int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64( *  *, int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(   *, int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int , BZFILE *, int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int  BZFILE *, int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int ,  *, int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int   *, int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int , BZFILE , int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int  BZFILE , int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int ,  , int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int   , int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int * BZFILE *, int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *  *, int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int * BZFILE , int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *  , int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int * BZFILE * int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *  * int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int * BZFILE  int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *   int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *,  *, int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *,  , int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *,  * int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *,   int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *,  *,  ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *,  ,  ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *,  *  ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *,    ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *, BZFILE , int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *, BZFILE  int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *, BZFILE ,  ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *, BZFILE   ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *, BZFILE , int 
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *, BZFILE  int 
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *, BZFILE ,  
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *, BZFILE   
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *, BZFILE * int ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *, BZFILE *  ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *, BZFILE * int 
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *, BZFILE *  
61,62c61,62
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                 unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE * int ,
>                                  *,
61,62c61,62
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                 unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE *  ,
>                                  *,
61,62c61,62
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                 unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE * int 
>                                  *,
61,62c61,62
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                 unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE *  
>                                  *,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *, BZFILE *,  ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *, BZFILE *,  
61,62c61,62
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                 unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE *,  ,
>                                  *,
61,62c61,62
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                 unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE *,  
>                                  *,
61,62c61,62
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                 unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE *,  ,
>                                 unsigned ,
61,62c61,62
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                 unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE *,  
>                                 unsigned ,
61,62c61,62
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                 unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE *,  ,
>                                  ,
61,62c61,62
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                 unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE *,  
>                                  ,
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *, BZFILE *, int 
61,62c61,62
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                 unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE *, int 
>                                  *,
61,62c61,62
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                 unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE *, int 
>                                 unsigned ,
61,62c61,62
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                 unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE *, int 
>                                  ,
61,62c61,62
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                 unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE *, int 
>                                 unsigned *
61,62c61,62
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                 unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE *, int 
>                                  *
61,62c61,62
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                 unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE *, int 
>                                 unsigned 
61,62c61,62
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                 unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE *, int 
>                                  
62c62
<                                 unsigned *,
---
>                                  *,
62c62
<                                 unsigned *,
---
>                                  ,
62c62
<                                 unsigned *,
---
>                                  *
62c62
<                                 unsigned *,
---
>                                  
62,63c62,63
<                                 unsigned *,
<                                 unsigned *,
---
>                                  *,
>                                  *,
62,63c62,63
<                                 unsigned *,
<                                 unsigned *,
---
>                                  ,
>                                  *,
62,63c62,63
<                                 unsigned *,
<                                 unsigned *,
---
>                                  *
>                                  *,
62,63c62,63
<                                 unsigned *,
<                                 unsigned *,
---
>                                  
>                                  *,
62c62
<                                 unsigned *,
---
>                                 unsigned ,
62c62
<                                 unsigned *,
---
>                                 unsigned 
62,63c62,63
<                                 unsigned *,
<                                 unsigned *,
---
>                                 unsigned ,
>                                  *,
62,63c62,63
<                                 unsigned *,
<                                 unsigned *,
---
>                                 unsigned 
>                                  *,
62,63c62,63
<                                 unsigned *,
<                                 unsigned *,
---
>                                 unsigned ,
>                                 unsigned ,
62,63c62,63
<                                 unsigned *,
<                                 unsigned *,
---
>                                 unsigned 
>                                 unsigned ,
62,63c62,63
<                                 unsigned *,
<                                 unsigned *,
---
>                                 unsigned ,
>                                  ,
62,63c62,63
<                                 unsigned *,
<                                 unsigned *,
---
>                                 unsigned 
>                                  ,
62c62
<                                 unsigned *,
---
>                                 unsigned *
62,63c62,63
<                                 unsigned *,
<                                 unsigned *,
---
>                                 unsigned *
>                                  *,
62,63c62,63
<                                 unsigned *,
<                                 unsigned *,
---
>                                 unsigned *
>                                 unsigned ,
62,63c62,63
<                                 unsigned *,
<                                 unsigned *,
---
>                                 unsigned *
>                                  ,
62,63c62,63
<                                 unsigned *,
<                                 unsigned *,
---
>                                 unsigned *
>                                 unsigned *
62,63c62,63
<                                 unsigned *,
<                                 unsigned *,
---
>                                 unsigned *
>                                  *
62,63c62,63
<                                 unsigned *,
<                                 unsigned *,
---
>                                 unsigned *
>                                 unsigned 
62,63c62,63
<                                 unsigned *,
<                                 unsigned *,
---
>                                 unsigned *
>                                  
63c63
<                                 unsigned *,
---
>                                  *,
63c63
<                                 unsigned *,
---
>                                  ,
63c63
<                                 unsigned *,
---
>                                  *
63c63
<                                 unsigned *,
---
>                                  
63,64c63,64
<                                 unsigned *,
<                                 unsigned *,
---
>                                  *,
>                                  *,
63,64c63,64
<                                 unsigned *,
<                                 unsigned *,
---
>                                  ,
>                                  *,
63,64c63,64
<                                 unsigned *,
<                                 unsigned *,
---
>                                  *
>                                  *,
63,64c63,64
<                                 unsigned *,
<                                 unsigned *,
---
>                                  
>                                  *,
63c63
<                                 unsigned *,
---
>                                 unsigned ,
63c63
<                                 unsigned *,
---
>                                 unsigned 
63,64c63,64
<                                 unsigned *,
<                                 unsigned *,
---
>                                 unsigned ,
>                                  *,
63,64c63,64
<                                 unsigned *,
<                                 unsigned *,
---
>                                 unsigned 
>                                  *,
63,64c63,64
<                                 unsigned *,
<                                 unsigned *,
---
>                                 unsigned ,
>                                 unsigned ,
63,64c63,64
<                                 unsigned *,
<                                 unsigned *,
---
>                                 unsigned 
>                                 unsigned ,
63,64c63,64
<                                 unsigned *,
<                                 unsigned *,
---
>                                 unsigned ,
>                                  ,
63,64c63,64
<                                 unsigned *,
<                                 unsigned *,
---
>                                 unsigned 
>                                  ,
63c63
<                                 unsigned *,
---
>                                 unsigned *
63,64c63,64
<                                 unsigned *,
<                                 unsigned *,
---
>                                 unsigned *
>                                  *,
63,64c63,64
<                                 unsigned *,
<                                 unsigned *,
---
>                                 unsigned *
>                                 unsigned ,
63,64c63,64
<                                 unsigned *,
<                                 unsigned *,
---
>                                 unsigned *
>                                  ,
63,64c63,64
<                                 unsigned *,
<                                 unsigned *,
---
>                                 unsigned *
>                                 unsigned *
63,64c63,64
<                                 unsigned *,
<                                 unsigned *,
---
>                                 unsigned *
>                                  *
63,64c63,64
<                                 unsigned *,
<                                 unsigned *,
---
>                                 unsigned *
>                                 unsigned 
63,64c63,64
<                                 unsigned *,
<                                 unsigned *,
---
>                                 unsigned *
>                                  
64c64
<                                 unsigned *,
---
>                                  *,
64c64
<                                 unsigned *,
---
>                                  ,
64c64
<                                 unsigned *,
---
>                                  *
64c64
<                                 unsigned *,
---
>                                  
64,65c64,65
<                                 unsigned *,
<                                 unsigned *);
---
>                                  *,
>                                  *);
64,65c64,65
<                                 unsigned *,
<                                 unsigned *);
---
>                                  ,
>                                  *);
64,65c64,65
<                                 unsigned *,
<                                 unsigned *);
---
>                                  *
>                                  *);
64,65c64,65
<                                 unsigned *,
<                                 unsigned *);
---
>                                  
>                                  *);
64c64
<                                 unsigned *,
---
>                                 unsigned ,
64c64
<                                 unsigned *,
---
>                                 unsigned 
64,65c64,65
<                                 unsigned *,
<                                 unsigned *);
---
>                                 unsigned ,
>                                  *);
64,65c64,65
<                                 unsigned *,
<                                 unsigned *);
---
>                                 unsigned 
>                                  *);
64,65c64,65
<                                 unsigned *,
<                                 unsigned *);
---
>                                 unsigned ,
>                                 unsigned );
64,65c64,65
<                                 unsigned *,
<                                 unsigned *);
---
>                                 unsigned 
>                                 unsigned );
64,65c64,65
<                                 unsigned *,
<                                 unsigned *);
---
>                                 unsigned ,
>                                  );
64,65c64,65
<                                 unsigned *,
<                                 unsigned *);
---
>                                 unsigned 
>                                  );
64c64
<                                 unsigned *,
---
>                                 unsigned *
64,65c64,65
<                                 unsigned *,
<                                 unsigned *);
---
>                                 unsigned *
>                                  *);
64,65c64,65
<                                 unsigned *,
<                                 unsigned *);
---
>                                 unsigned *
>                                 unsigned );
64,65c64,65
<                                 unsigned *,
<                                 unsigned *);
---
>                                 unsigned *
>                                  );
64,65c64,65
<                                 unsigned *,
<                                 unsigned *);
---
>                                 unsigned *
>                                 unsigned *;
64,65c64,65
<                                 unsigned *,
<                                 unsigned *);
---
>                                 unsigned *
>                                  *;
64,65c64,65
<                                 unsigned *,
<                                 unsigned *);
---
>                                 unsigned *
>                                 unsigned ;
64,65c64,65
<                                 unsigned *,
<                                 unsigned *);
---
>                                 unsigned *
>                                  ;
65c65
<                                 unsigned *);
---
>                                  *);
65c65
<                                 unsigned *);
---
>                                  );
65c65
<                                 unsigned *);
---
>                                  *;
65c65
<                                 unsigned *);
---
>                                  ;
65c65
<                                 unsigned *);
---
>                                  *)
65c65
<                                 unsigned *);
---
>                                  )
65c65
<                                 unsigned *);
---
>                                  *
65c65
<                                 unsigned *);
---
>                                  
65c65
<                                 unsigned *);
---
>                                 unsigned );
65c65
<                                 unsigned *);
---
>                                 unsigned ;
65c65
<                                 unsigned *);
---
>                                 unsigned )
65c65
<                                 unsigned *);
---
>                                 unsigned 
65c65
<                                 unsigned *);
---
>                                 unsigned );
67c67
< BZ_API (b)(int bzerrorlen) {
---
>  (b)(int bzerrorlen) {
65c65
<                                 unsigned *);
---
>                                 unsigned ;
67c67
< BZ_API (b)(int bzerrorlen) {
---
>  (b)(int bzerrorlen) {
65c65
<                                 unsigned *);
---
>                                 unsigned )
67c67
< BZ_API (b)(int bzerrorlen) {
---
>  (b)(int bzerrorlen) {
65c65
<                                 unsigned *);
---
>                                 unsigned 
67c67
< BZ_API (b)(int bzerrorlen) {
---
>  (b)(int bzerrorlen) {
65c65
<                                 unsigned *);
---
>                                 unsigned *;
65c65
<                                 unsigned *);
---
>                                 unsigned *
65c65
<                                 unsigned *);
---
>                                 unsigned *;
67c67
< BZ_API (b)(int bzerrorlen) {
---
>  (b)(int bzerrorlen) {
65c65
<                                 unsigned *);
---
>                                 unsigned *
67c67
< BZ_API (b)(int bzerrorlen) {
---
>  (b)(int bzerrorlen) {
65c65
<                                 unsigned *);
---
>                                 unsigned *;
67c67
< BZ_API (b)(int bzerrorlen) {
---
> BZ_API b)(int bzerrorlen) {
65c65
<                                 unsigned *);
---
>                                 unsigned *
67c67
< BZ_API (b)(int bzerrorlen) {
---
> BZ_API b)(int bzerrorlen) {
65c65
<                                 unsigned *);
---
>                                 unsigned *;
67c67
< BZ_API (b)(int bzerrorlen) {
---
>  b)(int bzerrorlen) {
65c65
<                                 unsigned *);
---
>                                 unsigned *
67c67
< BZ_API (b)(int bzerrorlen) {
---
>  b)(int bzerrorlen) {
65c65
<                                 unsigned *);
---
>                                 unsigned *)
65c65
<                                 unsigned *);
---
>                                 unsigned *)
67c67
< BZ_API (b)(int bzerrorlen) {
---
>  (b)(int bzerrorlen) {
65c65
<                                 unsigned *);
---
>                                 unsigned *)
67c67
< BZ_API (b)(int bzerrorlen) {
---
> BZ_API b)(int bzerrorlen) {
65c65
<                                 unsigned *);
---
>                                 unsigned *)
67c67
< BZ_API (b)(int bzerrorlen) {
---
>  b)(int bzerrorlen) {
65c65
<                                 unsigned *);
---
>                                 unsigned *)
67c67
< BZ_API (b)(int bzerrorlen) {
---
> BZ_API ()(int bzerrorlen) {
65c65
<                                 unsigned *);
---
>                                 unsigned *)
67c67
< BZ_API (b)(int bzerrorlen) {
---
>  ()(int bzerrorlen) {
65c65
<                                 unsigned *);
---
>                                 unsigned *)
67c67
< BZ_API (b)(int bzerrorlen) {
---
> BZ_API )(int bzerrorlen) {
65c65
<                                 unsigned *);
---
>                                 unsigned *)
67c67
< BZ_API (b)(int bzerrorlen) {
---
>  )(int bzerrorlen) {
67c67
< BZ_API (b)(int bzerrorlen) {
---
>  (b)(int bzerrorlen) {
67c67
< BZ_API (b)(int bzerrorlen) {
---
>  b)(int bzerrorlen) {
67c67
< BZ_API (b)(int bzerrorlen) {
---
>  ()(int bzerrorlen) {
67c67
< BZ_API (b)(int bzerrorlen) {
---
>  )(int bzerrorlen) {
67c67
< BZ_API (b)(int bzerrorlen) {
---
>  (b(int bzerrorlen) {
67c67
< BZ_API (b)(int bzerrorlen) {
---
>  b(int bzerrorlen) {
(98.8 %, 2466 bytes)
67c67
<  (b)(int bzerrorlen) {
---
>  b)(int bzerrorlen) {
67c67
<  (b)(int bzerrorlen) {
---
>  )(int bzerrorlen) {
67c67
<  (b)(int bzerrorlen) {
---
>  b(int bzerrorlen) {
67c67
<  (b)(int bzerrorlen) {
---
>  (int bzerrorlen) {
67c67
<  (b)(int bzerrorlen) {
---
>  b)int bzerrorlen) {
67c67
<  (b)(int bzerrorlen) {
---
>  )int bzerrorlen) {
67c67
<  (b)(int bzerrorlen) {
---
>  bint bzerrorlen) {
67c67
<  (b)(int bzerrorlen) {
---
>  int bzerrorlen) {
67c67
<  (b)(int bzerrorlen) {
---
>  ()(int bzerrorlen) {
67c67
<  (b)(int bzerrorlen) {
---
>  ((int bzerrorlen) {
(98.8 %, 2464 bytes)
67c67
<  b(int bzerrorlen) {
---
>  ( bzerrorlen) {
67c67
<  b(int bzerrorlen) {
---
>   bzerrorlen) {
67c67
<  b(int bzerrorlen) {
---
>  (int ) {
67c67
<  b(int bzerrorlen) {
---
>  int ) {
67c67
<  b(int bzerrorlen) {
---
>  ( ) {
67c67
<  b(int bzerrorlen) {
---
>   ) {
67c67
<  b(int bzerrorlen) {
---
>  bint bzerrorlen) {
67c67
<  b(int bzerrorlen) {
---
>  b bzerrorlen) {
67c67
<  b(int bzerrorlen) {
---
>  bint ) {
67c67
<  b(int bzerrorlen) {
---
>  b ) {
67c67
<  b(int bzerrorlen) {
---
>  bint bzerrorlen {
67c67
<  b(int bzerrorlen) {
---
>  b bzerrorlen {
67c67
<  b(int bzerrorlen) {
---
>  bint  {
67c67
<  b(int bzerrorlen) {
---
>  b  {
67c67
<  b(int bzerrorlen) {
---
>  b( bzerrorlen) {
67c67
<  b(int bzerrorlen) {
---
>  b( ) {
(98.8 %, 2461 bytes)
67c67
<  b( bzerrorlen) {
---
>  b( ) {
67c67
<  b( bzerrorlen) {
---
>  b(  {
67c67
<  b( bzerrorlen) {
---
>  b( ) 
67c67
<  b( bzerrorlen) {
---
>  b(  
67c67
<  b( bzerrorlen) {
---
>  b( ) {
69c69
<   }
---
>   
67c67
<  b( bzerrorlen) {
---
>  b(  {
69c69
<   }
---
>   
67c67
<  b( bzerrorlen) {
---
>  b( ) 
69c69
<   }
---
>   
67c67
<  b( bzerrorlen) {
---
>  b(  
69c69
<   }
---
>   
67c67
<  b( bzerrorlen) {
---
>  b( bzerrorlen {
(98.8 %, 2451 bytes)
67c67
<  b( ) {
---
>  b(  {
67c67
<  b( ) {
---
>  b(  
67c67
<  b( ) {
---
>  b(  {
69c69
<   }
---
>   
67c67
<  b( ) {
---
>  b(  
69c69
<   }
---
>   
67c67
<  b( ) {
---
>  b(  {
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
---
>  (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
67c67
<  b( ) {
---
>  b(  
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
---
>  (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
67c67
<  b( ) {
---
>  b(  {
69c69
<   }
---
>   
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
---
>  (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
67c67
<  b( ) {
---
>  b(  
69c69
<   }
---
>   
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
---
>  (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
67c67
<  b( ) {
---
>  b( ) 
67c67
<  b( ) {
---
>  b( ) 
69c69
<   }
---
>   
67c67
<  b( ) {
---
>  b( ) 
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
---
>  (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
67c67
<  b( ) {
---
>  b( ) 
69c69
<   }
---
>   
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
---
>  (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
67c67
<  b( ) {
---
>  b( ) 
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
67c67
<  b( ) {
---
>  b( ) 
69c69
<   }
---
>   
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
67c67
<  b( ) {
---
>  b( ) 
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
---
>  BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
67c67
<  b( ) {
---
>  b( ) 
69c69
<   }
---
>   
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
---
>  BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
69c69
<   }
---
>   
69c69
<   }
---
>   
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
---
>  (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
69c69
<   }
---
>   
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
69c69
<   }
---
>   
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
---
>  BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
69c69
<   }
---
>   
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
---
> void ()(int *, BZFILE *, void **,
69c69
<   }
---
>   
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
---
>  ()(int *, BZFILE *, void **,
69c69
<   }
---
>   
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
---
> void )(int *, BZFILE *, void **,
69c69
<   }
---
>   
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
---
>  )(int *, BZFILE *, void **,
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
---
>  (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
---
>  BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
---
>  ()(int *, BZFILE *, void **,
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
---
>  )(int *, BZFILE *, void **,
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
---
>  (BZ2_bzReadGetUnused(int *, BZFILE *, void **,
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
---
>  BZ2_bzReadGetUnused(int *, BZFILE *, void **,
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
---
>  ((int *, BZFILE *, void **,
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
---
>  (int *, BZFILE *, void **,
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
---
> void )(int *, BZFILE *, void **,
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
---
> void (int *, BZFILE *, void **,
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused)int *, BZFILE *, void **,
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
---
> void )int *, BZFILE *, void **,
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnusedint *, BZFILE *, void **,
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
---
> void int *, BZFILE *, void **,
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
---
> void ()(int *, BZFILE *, void **,
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
---
> void ((int *, BZFILE *, void **,
71c71
< void (BZ2_bzReadGetUnused)(int *, BZFILE *, void **,
---
> void ()int *, BZFILE *, void **,
(98.8 %, 2449 bytes)
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void ( *, BZFILE *, void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void  *, BZFILE *, void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void (int , BZFILE *, void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void int , BZFILE *, void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void ( , BZFILE *, void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void  , BZFILE *, void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnusedint *, BZFILE *, void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused *, BZFILE *, void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnusedint , BZFILE *, void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused , BZFILE *, void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnusedint * BZFILE *, void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused * BZFILE *, void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnusedint  BZFILE *, void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused  BZFILE *, void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused( *, BZFILE *, void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused( , BZFILE *, void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused( * BZFILE *, void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(  BZFILE *, void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused( *,  *, void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused( ,  *, void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused( *  *, void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(   *, void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int , BZFILE *, void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int  BZFILE *, void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int ,  *, void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int   *, void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int , BZFILE , void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int  BZFILE , void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int ,  , void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int   , void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int * BZFILE *, void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *  *, void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int * BZFILE , void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *  , void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int * BZFILE * void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *  * void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int * BZFILE  void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *   void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *,  *, void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *,  , void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *,  * void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *,   void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *,  *,  **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *,  ,  **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *,  *  **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *,    **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *, BZFILE , void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *, BZFILE  void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *, BZFILE ,  **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *, BZFILE   **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *, BZFILE , void *,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *, BZFILE  void *,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *, BZFILE ,  *,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *, BZFILE   *,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *, BZFILE * void **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *, BZFILE *  **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *, BZFILE * void *,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *, BZFILE *  *,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *, BZFILE * void *,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *, BZFILE *  *,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *, BZFILE * void ,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *, BZFILE *  ,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *, BZFILE *,  **,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *, BZFILE *,  *,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *, BZFILE *,  *,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *, BZFILE *,  ,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *, BZFILE *,  **
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *, BZFILE *,  *
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *, BZFILE *,  *
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *, BZFILE *,  
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *, BZFILE *, void *,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *, BZFILE *, void ,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *, BZFILE *, void *
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *, BZFILE *, void 
71,72c71,72
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
<                                  int *);
---
> void BZ2_bzReadGetUnused(int *, BZFILE *, void *,
>                                   *);
71,72c71,72
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
<                                  int *);
---
> void BZ2_bzReadGetUnused(int *, BZFILE *, void ,
>                                   *);
71,72c71,72
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
<                                  int *);
---
> void BZ2_bzReadGetUnused(int *, BZFILE *, void *
>                                   *);
71,72c71,72
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
<                                  int *);
---
> void BZ2_bzReadGetUnused(int *, BZFILE *, void 
>                                   *);
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *, BZFILE *, void *,
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *, BZFILE *, void *
71,72c71,72
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
<                                  int *);
---
> void BZ2_bzReadGetUnused(int *, BZFILE *, void *,
>                                   *);
71,72c71,72
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
<                                  int *);
---
> void BZ2_bzReadGetUnused(int *, BZFILE *, void *
>                                   *);
71,72c71,72
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
<                                  int *);
---
> void BZ2_bzReadGetUnused(int *, BZFILE *, void *,
>                                  int );
71,72c71,72
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
<                                  int *);
---
> void BZ2_bzReadGetUnused(int *, BZFILE *, void *
>                                  int );
71,72c71,72
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
<                                  int *);
---
> void BZ2_bzReadGetUnused(int *, BZFILE *, void *,
>                                   );
71,72c71,72
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
<                                  int *);
---
> void BZ2_bzReadGetUnused(int *, BZFILE *, void *
>                                   );
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *, BZFILE *, void **
71,72c71,72
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
<                                  int *);
---
> void BZ2_bzReadGetUnused(int *, BZFILE *, void **
>                                   *);
71,72c71,72
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
<                                  int *);
---
> void BZ2_bzReadGetUnused(int *, BZFILE *, void **
>                                  int );
71,72c71,72
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
<                                  int *);
---
> void BZ2_bzReadGetUnused(int *, BZFILE *, void **
>                                   );
71,72c71,72
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
<                                  int *);
---
> void BZ2_bzReadGetUnused(int *, BZFILE *, void **
>                                  int *;
71,72c71,72
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
<                                  int *);
---
> void BZ2_bzReadGetUnused(int *, BZFILE *, void **
>                                   *;
71,72c71,72
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
<                                  int *);
---
> void BZ2_bzReadGetUnused(int *, BZFILE *, void **
>                                  int ;
71,72c71,72
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
<                                  int *);
---
> void BZ2_bzReadGetUnused(int *, BZFILE *, void **
>                                   ;
72c72
<                                  int *);
---
>                                   *);
72c72
<                                  int *);
---
>                                   );
72c72
<                                  int *);
---
>                                   *;
72c72
<                                  int *);
---
>                                   ;
72c72
<                                  int *);
---
>                                   *)
72c72
<                                  int *);
---
>                                   )
72c72
<                                  int *);
---
>                                   *
72c72
<                                  int *);
---
>                                   
72c72
<                                  int *);
---
>                                  int );
72c72
<                                  int *);
---
>                                  int ;
72c72
<                                  int *);
---
>                                  int )
72c72
<                                  int *);
---
>                                  int 
72c72
<                                  int *);
---
>                                  int );
74c74
< (BZ2_bzBuffToBuffCompress)(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress)(char *, unsigned *,
72c72
<                                  int *);
---
>                                  int ;
74c74
< (BZ2_bzBuffToBuffCompress)(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress)(char *, unsigned *,
72c72
<                                  int *);
---
>                                  int )
74c74
< (BZ2_bzBuffToBuffCompress)(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress)(char *, unsigned *,
72c72
<                                  int *);
---
>                                  int 
74c74
< (BZ2_bzBuffToBuffCompress)(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress)(char *, unsigned *,
72c72
<                                  int *);
---
>                                  int *;
72c72
<                                  int *);
---
>                                  int *
72c72
<                                  int *);
---
>                                  int *;
74c74
< (BZ2_bzBuffToBuffCompress)(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress)(char *, unsigned *,
72c72
<                                  int *);
---
>                                  int *
74c74
< (BZ2_bzBuffToBuffCompress)(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress)(char *, unsigned *,
72c72
<                                  int *);
---
>                                  int *;
74c74
< (BZ2_bzBuffToBuffCompress)(char *, unsigned *,
---
> ()(char *, unsigned *,
72c72
<                                  int *);
---
>                                  int *
74c74
< (BZ2_bzBuffToBuffCompress)(char *, unsigned *,
---
> ()(char *, unsigned *,
72c72
<                                  int *);
---
>                                  int *;
74c74
< (BZ2_bzBuffToBuffCompress)(char *, unsigned *,
---
> )(char *, unsigned *,
72c72
<                                  int *);
---
>                                  int *
74c74
< (BZ2_bzBuffToBuffCompress)(char *, unsigned *,
---
> )(char *, unsigned *,
72c72
<                                  int *);
---
>                                  int *)
72c72
<                                  int *);
---
>                                  int *)
74c74
< (BZ2_bzBuffToBuffCompress)(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress)(char *, unsigned *,
72c72
<                                  int *);
---
>                                  int *)
74c74
< (BZ2_bzBuffToBuffCompress)(char *, unsigned *,
---
> ()(char *, unsigned *,
72c72
<                                  int *);
---
>                                  int *)
74c74
< (BZ2_bzBuffToBuffCompress)(char *, unsigned *,
---
> )(char *, unsigned *,
72c72
<                                  int *);
---
>                                  int *)
74c74
< (BZ2_bzBuffToBuffCompress)(char *, unsigned *,
---
> (BZ2_bzBuffToBuffCompress(char *, unsigned *,
72c72
<                                  int *);
---
>                                  int *)
74c74
< (BZ2_bzBuffToBuffCompress)(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *,
72c72
<                                  int *);
---
>                                  int *)
74c74
< (BZ2_bzBuffToBuffCompress)(char *, unsigned *,
---
> ((char *, unsigned *,
72c72
<                                  int *);
---
>                                  int *)
74c74
< (BZ2_bzBuffToBuffCompress)(char *, unsigned *,
---
> (char *, unsigned *,
74c74
< (BZ2_bzBuffToBuffCompress)(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress)(char *, unsigned *,
74c74
< (BZ2_bzBuffToBuffCompress)(char *, unsigned *,
---
> )(char *, unsigned *,
74c74
< (BZ2_bzBuffToBuffCompress)(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *,
74c74
< (BZ2_bzBuffToBuffCompress)(char *, unsigned *,
---
> (char *, unsigned *,
74c74
< (BZ2_bzBuffToBuffCompress)(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress)char *, unsigned *,
74c74
< (BZ2_bzBuffToBuffCompress)(char *, unsigned *,
---
> )char *, unsigned *,
74c74
< (BZ2_bzBuffToBuffCompress)(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompresschar *, unsigned *,
74c74
< (BZ2_bzBuffToBuffCompress)(char *, unsigned *,
---
> char *, unsigned *,
74c74
< (BZ2_bzBuffToBuffCompress)(char *, unsigned *,
---
> ()(char *, unsigned *,
(98.8 %, 2447 bytes)
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> ( *, unsigned *,
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
>  *, unsigned *,
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> (char , unsigned *,
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> char , unsigned *,
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> ( , unsigned *,
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
>  , unsigned *,
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompresschar *, unsigned *,
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress *, unsigned *,
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompresschar , unsigned *,
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress , unsigned *,
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompresschar * unsigned *,
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress * unsigned *,
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompresschar  unsigned *,
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress  unsigned *,
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress( *, unsigned *,
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress( , unsigned *,
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress( * unsigned *,
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress(  unsigned *,
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress( *,  *,
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress( ,  *,
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress( *  *,
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress(   *,
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress(char , unsigned *,
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress(char  unsigned *,
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress(char ,  *,
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress(char   *,
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress(char , unsigned ,
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress(char  unsigned ,
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress(char ,  ,
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress(char   ,
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress(char * unsigned *,
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress(char *  *,
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress(char * unsigned ,
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress(char *  ,
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress(char * unsigned *
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress(char *  *
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress(char * unsigned 
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress(char *  
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress(char *,  *,
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress(char *,  ,
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress(char *,  *
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress(char *,  
74,75c74,75
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
<                                      char *, unsigned ,
---
> BZ2_bzBuffToBuffCompress(char *,  *,
>                                       *, unsigned ,
74,75c74,75
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
<                                      char *, unsigned ,
---
> BZ2_bzBuffToBuffCompress(char *,  ,
>                                       *, unsigned ,
74,75c74,75
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
<                                      char *, unsigned ,
---
> BZ2_bzBuffToBuffCompress(char *,  *
>                                       *, unsigned ,
74,75c74,75
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
<                                      char *, unsigned ,
---
> BZ2_bzBuffToBuffCompress(char *,  
>                                       *, unsigned ,
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned ,
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned 
74,75c74,75
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
<                                      char *, unsigned ,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned ,
>                                       *, unsigned ,
74,75c74,75
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
<                                      char *, unsigned ,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned 
>                                       *, unsigned ,
74,75c74,75
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
<                                      char *, unsigned ,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned ,
>                                      char , unsigned ,
74,75c74,75
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
<                                      char *, unsigned ,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned 
>                                      char , unsigned ,
74,75c74,75
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
<                                      char *, unsigned ,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned ,
>                                       , unsigned ,
74,75c74,75
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
<                                      char *, unsigned ,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned 
>                                       , unsigned ,
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *
74,75c74,75
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
<                                      char *, unsigned ,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *
>                                       *, unsigned ,
74,75c74,75
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
<                                      char *, unsigned ,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *
>                                      char , unsigned ,
74,75c74,75
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
<                                      char *, unsigned ,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *
>                                       , unsigned ,
74,75c74,75
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
<                                      char *, unsigned ,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *
>                                      char * unsigned ,
74,75c74,75
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
<                                      char *, unsigned ,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *
>                                       * unsigned ,
74,75c74,75
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
<                                      char *, unsigned ,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *
>                                      char  unsigned ,
74,75c74,75
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
<                                      char *, unsigned ,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *
>                                        unsigned ,
75c75
<                                      char *, unsigned ,
---
>                                       *, unsigned ,
75c75
<                                      char *, unsigned ,
---
>                                       , unsigned ,
75c75
<                                      char *, unsigned ,
---
>                                       * unsigned ,
75c75
<                                      char *, unsigned ,
---
>                                        unsigned ,
75c75
<                                      char *, unsigned ,
---
>                                       *,  ,
75c75
<                                      char *, unsigned ,
---
>                                       ,  ,
75c75
<                                      char *, unsigned ,
---
>                                       *  ,
75c75
<                                      char *, unsigned ,
---
>                                         ,
75c75
<                                      char *, unsigned ,
---
>                                      char , unsigned ,
75c75
<                                      char *, unsigned ,
---
>                                      char  unsigned ,
75c75
<                                      char *, unsigned ,
---
>                                      char ,  ,
75c75
<                                      char *, unsigned ,
---
>                                      char   ,
75c75
<                                      char *, unsigned ,
---
>                                      char , unsigned 
75c75
<                                      char *, unsigned ,
---
>                                      char  unsigned 
75c75
<                                      char *, unsigned ,
---
>                                      char ,  
75c75
<                                      char *, unsigned ,
---
>                                      char   
75c75
<                                      char *, unsigned ,
---
>                                      char * unsigned ,
75c75
<                                      char *, unsigned ,
---
>                                      char *  ,
75c75
<                                      char *, unsigned ,
---
>                                      char * unsigned 
75c75
<                                      char *, unsigned ,
---
>                                      char *  
75,76c75,76
<                                      char *, unsigned ,
<                                      int , int ,
---
>                                      char * unsigned ,
>                                       , int ,
75,76c75,76
<                                      char *, unsigned ,
<                                      int , int ,
---
>                                      char *  ,
>                                       , int ,
75,76c75,76
<                                      char *, unsigned ,
<                                      int , int ,
---
>                                      char * unsigned 
>                                       , int ,
75,76c75,76
<                                      char *, unsigned ,
<                                      int , int ,
---
>                                      char *  
>                                       , int ,
75c75
<                                      char *, unsigned ,
---
>                                      char *,  ,
75c75
<                                      char *, unsigned ,
---
>                                      char *,  
75,76c75,76
<                                      char *, unsigned ,
<                                      int , int ,
---
>                                      char *,  ,
>                                       , int ,
75,76c75,76
<                                      char *, unsigned ,
<                                      int , int ,
---
>                                      char *,  
>                                       , int ,
75,76c75,76
<                                      char *, unsigned ,
<                                      int , int ,
---
>                                      char *,  ,
>                                      int  int ,
75,76c75,76
<                                      char *, unsigned ,
<                                      int , int ,
---
>                                      char *,  
>                                      int  int ,
75,76c75,76
<                                      char *, unsigned ,
<                                      int , int ,
---
>                                      char *,  ,
>                                        int ,
75,76c75,76
<                                      char *, unsigned ,
<                                      int , int ,
---
>                                      char *,  
>                                        int ,
75c75
<                                      char *, unsigned ,
---
>                                      char *, unsigned 
75,76c75,76
<                                      char *, unsigned ,
<                                      int , int ,
---
>                                      char *, unsigned 
>                                       , int ,
75,76c75,76
<                                      char *, unsigned ,
<                                      int , int ,
---
>                                      char *, unsigned 
>                                      int  int ,
75,76c75,76
<                                      char *, unsigned ,
<                                      int , int ,
---
>                                      char *, unsigned 
>                                        int ,
75,76c75,76
<                                      char *, unsigned ,
<                                      int , int ,
---
>                                      char *, unsigned 
>                                      int ,  ,
75,76c75,76
<                                      char *, unsigned ,
<                                      int , int ,
---
>                                      char *, unsigned 
>                                       ,  ,
75,76c75,76
<                                      char *, unsigned ,
<                                      int , int ,
---
>                                      char *, unsigned 
>                                      int   ,
75,76c75,76
<                                      char *, unsigned ,
<                                      int , int ,
---
>                                      char *, unsigned 
>                                         ,
76c76
<                                      int , int ,
---
>                                       , int ,
76c76
<                                      int , int ,
---
>                                        int ,
76c76
<                                      int , int ,
---
>                                       ,  ,
76c76
<                                      int , int ,
---
>                                         ,
76c76
<                                      int , int ,
---
>                                       , int 
76c76
<                                      int , int ,
---
>                                        int 
76c76
<                                      int , int ,
---
>                                       ,  
76c76
<                                      int , int ,
---
>                                         
76c76
<                                      int , int ,
---
>                                      int  int ,
76c76
<                                      int , int ,
---
>                                      int   ,
76c76
<                                      int , int ,
---
>                                      int  int 
76c76
<                                      int , int ,
---
>                                      int   
76,77c76,77
<                                      int , int ,
<                                      int );
---
>                                      int  int ,
>                                       );
76,77c76,77
<                                      int , int ,
<                                      int );
---
>                                      int   ,
>                                       );
76,77c76,77
<                                      int , int ,
<                                      int );
---
>                                      int  int 
>                                       );
76,77c76,77
<                                      int , int ,
<                                      int );
---
>                                      int   
>                                       );
76c76
<                                      int , int ,
---
>                                      int ,  ,
76c76
<                                      int , int ,
---
>                                      int ,  
76,77c76,77
<                                      int , int ,
<                                      int );
---
>                                      int ,  ,
>                                       );
76,77c76,77
<                                      int , int ,
<                                      int );
---
>                                      int ,  
>                                       );
76,77c76,77
<                                      int , int ,
<                                      int );
---
>                                      int ,  ,
>                                      int ;
76,77c76,77
<                                      int , int ,
<                                      int );
---
>                                      int ,  
>                                      int ;
76,77c76,77
<                                      int , int ,
<                                      int );
---
>                                      int ,  ,
>                                       ;
76,77c76,77
<                                      int , int ,
<                                      int );
---
>                                      int ,  
>                                       ;
76c76
<                                      int , int ,
---
>                                      int , int 
76,77c76,77
<                                      int , int ,
<                                      int );
---
>                                      int , int 
>                                       );
76,77c76,77
<                                      int , int ,
<                                      int );
---
>                                      int , int 
>                                      int ;
76,77c76,77
<                                      int , int ,
<                                      int );
---
>                                      int , int 
>                                       ;
76,77c76,77
<                                      int , int ,
<                                      int );
---
>                                      int , int 
>                                      int )
76,77c76,77
<                                      int , int ,
<                                      int );
---
>                                      int , int 
>                                       )
76,77c76,77
<                                      int , int ,
<                                      int );
---
>                                      int , int 
>                                      int 
76,77c76,77
<                                      int , int ,
<                                      int );
---
>                                      int , int 
>                                       
77c77
<                                      int );
---
>                                       );
77c77
<                                      int );
---
>                                       ;
77c77
<                                      int );
---
>                                       )
77c77
<                                      int );
---
>                                       
77c77
<                                      int );
---
>                                       );
79c79
< (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress)(char *dest, unsigned *destLen,
77c77
<                                      int );
---
>                                       ;
79c79
< (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress)(char *dest, unsigned *destLen,
77c77
<                                      int );
---
>                                       )
79c79
< (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress)(char *dest, unsigned *destLen,
77c77
<                                      int );
---
>                                       
79c79
< (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress)(char *dest, unsigned *destLen,
77c77
<                                      int );
---
>                                      int ;
77c77
<                                      int );
---
>                                      int 
77c77
<                                      int );
---
>                                      int ;
79c79
< (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress)(char *dest, unsigned *destLen,
77c77
<                                      int );
---
>                                      int 
79c79
< (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress)(char *dest, unsigned *destLen,
77c77
<                                      int );
---
>                                      int ;
79c79
< (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned *destLen,
---
> ()(char *dest, unsigned *destLen,
77c77
<                                      int );
---
>                                      int 
79c79
< (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned *destLen,
---
> ()(char *dest, unsigned *destLen,
77c77
<                                      int );
---
>                                      int ;
79c79
< (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned *destLen,
---
> )(char *dest, unsigned *destLen,
77c77
<                                      int );
---
>                                      int 
79c79
< (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned *destLen,
---
> )(char *dest, unsigned *destLen,
77c77
<                                      int );
---
>                                      int )
77c77
<                                      int );
---
>                                      int )
79c79
< (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress)(char *dest, unsigned *destLen,
77c77
<                                      int );
---
>                                      int )
79c79
< (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned *destLen,
---
> ()(char *dest, unsigned *destLen,
77c77
<                                      int );
---
>                                      int )
79c79
< (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned *destLen,
---
> )(char *dest, unsigned *destLen,
77c77
<                                      int );
---
>                                      int )
79c79
< (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned *destLen,
---
> (BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
77c77
<                                      int );
---
>                                      int )
79c79
< (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
77c77
<                                      int );
---
>                                      int )
79c79
< (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned *destLen,
---
> ((char *dest, unsigned *destLen,
77c77
<                                      int );
---
>                                      int )
79c79
< (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned *destLen,
---
> (char *dest, unsigned *destLen,
79c79
< (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress)(char *dest, unsigned *destLen,
79c79
< (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned *destLen,
---
> )(char *dest, unsigned *destLen,
79c79
< (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
79c79
< (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned *destLen,
---
> (char *dest, unsigned *destLen,
79c79
< (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress)char *dest, unsigned *destLen,
79c79
< (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned *destLen,
---
> )char *dest, unsigned *destLen,
79c79
< (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompresschar *dest, unsigned *destLen,
79c79
< (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned *destLen,
---
> char *dest, unsigned *destLen,
79c79
< (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned *destLen,
---
> ()(char *dest, unsigned *destLen,
79c79
< (BZ2_bzBuffToBuffDecompress)(char *dest, unsigned *destLen,
---
> ((char *dest, unsigned *destLen,
(98.8 %, 2445 bytes)
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> ( *dest, unsigned *destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
>  *dest, unsigned *destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> (char dest, unsigned *destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> char dest, unsigned *destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> ( dest, unsigned *destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
>  dest, unsigned *destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompresschar *dest, unsigned *destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress *dest, unsigned *destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompresschar dest, unsigned *destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress dest, unsigned *destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompresschar *, unsigned *destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress *, unsigned *destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompresschar , unsigned *destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress , unsigned *destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress( *dest, unsigned *destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress( dest, unsigned *destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress( *, unsigned *destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress( , unsigned *destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress( *dest unsigned *destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress( dest unsigned *destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress( * unsigned *destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress(  unsigned *destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress(char dest, unsigned *destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress(char , unsigned *destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress(char dest unsigned *destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress(char  unsigned *destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress(char dest,  *destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress(char ,  *destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress(char dest  *destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress(char   *destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress(char *, unsigned *destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress(char * unsigned *destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress(char *,  *destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress(char *  *destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress(char *, unsigned destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress(char * unsigned destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress(char *,  destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress(char *  destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress(char *dest unsigned *destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress(char *dest  *destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress(char *dest unsigned destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress(char *dest  destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress(char *dest unsigned *,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress(char *dest  *,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress(char *dest unsigned ,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress(char *dest  ,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress(char *dest,  *destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress(char *dest,  destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress(char *dest,  *,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress(char *dest,  ,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress(char *dest,  *destLen
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress(char *dest,  destLen
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress(char *dest,  *
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress(char *dest,  
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress(char *dest, unsigned destLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress(char *dest, unsigned ,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress(char *dest, unsigned destLen
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress(char *dest, unsigned 
79,80c79,80
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
<                                        char *source, unsigned sourceLen,
---
> BZ2_bzBuffToBuffDecompress(char *dest, unsigned destLen,
>                                         *source, unsigned sourceLen,
79,80c79,80
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
<                                        char *source, unsigned sourceLen,
---
> BZ2_bzBuffToBuffDecompress(char *dest, unsigned ,
>                                         *source, unsigned sourceLen,
79,80c79,80
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
<                                        char *source, unsigned sourceLen,
---
> BZ2_bzBuffToBuffDecompress(char *dest, unsigned destLen
>                                         *source, unsigned sourceLen,
79,80c79,80
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
<                                        char *source, unsigned sourceLen,
---
> BZ2_bzBuffToBuffDecompress(char *dest, unsigned 
>                                         *source, unsigned sourceLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress(char *dest, unsigned *,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress(char *dest, unsigned *
79,80c79,80
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
<                                        char *source, unsigned sourceLen,
---
> BZ2_bzBuffToBuffDecompress(char *dest, unsigned *,
>                                         *source, unsigned sourceLen,
79,80c79,80
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
<                                        char *source, unsigned sourceLen,
---
> BZ2_bzBuffToBuffDecompress(char *dest, unsigned *
>                                         *source, unsigned sourceLen,
79,80c79,80
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
<                                        char *source, unsigned sourceLen,
---
> BZ2_bzBuffToBuffDecompress(char *dest, unsigned *,
>                                        char source, unsigned sourceLen,
79,80c79,80
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
<                                        char *source, unsigned sourceLen,
---
> BZ2_bzBuffToBuffDecompress(char *dest, unsigned *
>                                        char source, unsigned sourceLen,
79,80c79,80
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
<                                        char *source, unsigned sourceLen,
---
> BZ2_bzBuffToBuffDecompress(char *dest, unsigned *,
>                                         source, unsigned sourceLen,
79,80c79,80
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
<                                        char *source, unsigned sourceLen,
---
> BZ2_bzBuffToBuffDecompress(char *dest, unsigned *
>                                         source, unsigned sourceLen,
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen
79,80c79,80
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
<                                        char *source, unsigned sourceLen,
---
> BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen
>                                         *source, unsigned sourceLen,
79,80c79,80
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
<                                        char *source, unsigned sourceLen,
---
> BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen
>                                        char source, unsigned sourceLen,
79,80c79,80
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
<                                        char *source, unsigned sourceLen,
---
> BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen
>                                         source, unsigned sourceLen,
79,80c79,80
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
<                                        char *source, unsigned sourceLen,
---
> BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen
>                                        char *, unsigned sourceLen,
79,80c79,80
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
<                                        char *source, unsigned sourceLen,
---
> BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen
>                                         *, unsigned sourceLen,
79,80c79,80
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
<                                        char *source, unsigned sourceLen,
---
> BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen
>                                        char , unsigned sourceLen,
79,80c79,80
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
<                                        char *source, unsigned sourceLen,
---
> BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen
>                                         , unsigned sourceLen,
80c80
<                                        char *source, unsigned sourceLen,
---
>                                         *source, unsigned sourceLen,
80c80
<                                        char *source, unsigned sourceLen,
---
>                                         source, unsigned sourceLen,
80c80
<                                        char *source, unsigned sourceLen,
---
>                                         *, unsigned sourceLen,
80c80
<                                        char *source, unsigned sourceLen,
---
>                                         , unsigned sourceLen,
80c80
<                                        char *source, unsigned sourceLen,
---
>                                         *source unsigned sourceLen,
80c80
<                                        char *source, unsigned sourceLen,
---
>                                         source unsigned sourceLen,
80c80
<                                        char *source, unsigned sourceLen,
---
>                                         * unsigned sourceLen,
80c80
<                                        char *source, unsigned sourceLen,
---
>                                          unsigned sourceLen,
80c80
<                                        char *source, unsigned sourceLen,
---
>                                        char source, unsigned sourceLen,
80c80
<                                        char *source, unsigned sourceLen,
---
>                                        char , unsigned sourceLen,
80c80
<                                        char *source, unsigned sourceLen,
---
>                                        char source unsigned sourceLen,
80c80
<                                        char *source, unsigned sourceLen,
---
>                                        char  unsigned sourceLen,
80c80
<                                        char *source, unsigned sourceLen,
---
>                                        char source,  sourceLen,
80c80
<                                        char *source, unsigned sourceLen,
---
>                                        char ,  sourceLen,
80c80
<                                        char *source, unsigned sourceLen,
---
>                                        char source  sourceLen,
80c80
<                                        char *source, unsigned sourceLen,
---
>                                        char   sourceLen,
80c80
<                                        char *source, unsigned sourceLen,
---
>                                        char *, unsigned sourceLen,
80c80
<                                        char *source, unsigned sourceLen,
---
>                                        char * unsigned sourceLen,
80c80
<                                        char *source, unsigned sourceLen,
---
>                                        char *,  sourceLen,
80c80
<                                        char *source, unsigned sourceLen,
---
>                                        char *  sourceLen,
80c80
<                                        char *source, unsigned sourceLen,
---
>                                        char *, unsigned ,
80c80
<                                        char *source, unsigned sourceLen,
---
>                                        char * unsigned ,
80c80
<                                        char *source, unsigned sourceLen,
---
>                                        char *,  ,
80c80
<                                        char *source, unsigned sourceLen,
---
>                                        char *  ,
80c80
<                                        char *source, unsigned sourceLen,
---
>                                        char *source unsigned sourceLen,
80c80
<                                        char *source, unsigned sourceLen,
---
>                                        char *source  sourceLen,
80c80
<                                        char *source, unsigned sourceLen,
---
>                                        char *source unsigned ,
80c80
<                                        char *source, unsigned sourceLen,
---
>                                        char *source  ,
80c80
<                                        char *source, unsigned sourceLen,
---
>                                        char *source unsigned sourceLen
80c80
<                                        char *source, unsigned sourceLen,
---
>                                        char *source  sourceLen
80c80
<                                        char *source, unsigned sourceLen,
---
>                                        char *source unsigned 
80c80
<                                        char *source, unsigned sourceLen,
---
>                                        char *source  
80c80
<                                        char *source, unsigned sourceLen,
---
>                                        char *source,  sourceLen,
80c80
<                                        char *source, unsigned sourceLen,
---
>                                        char *source,  ,
80c80
<                                        char *source, unsigned sourceLen,
---
>                                        char *source,  sourceLen
80c80
<                                        char *source, unsigned sourceLen,
---
>                                        char *source,  
80,81c80,81
<                                        char *source, unsigned sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *source,  sourceLen,
>                                         small, int verbosity) {
80,81c80,81
<                                        char *source, unsigned sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *source,  ,
>                                         small, int verbosity) {
80,81c80,81
<                                        char *source, unsigned sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *source,  sourceLen
>                                         small, int verbosity) {
80,81c80,81
<                                        char *source, unsigned sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *source,  
>                                         small, int verbosity) {
80c80
<                                        char *source, unsigned sourceLen,
---
>                                        char *source, unsigned ,
80c80
<                                        char *source, unsigned sourceLen,
---
>                                        char *source, unsigned 
80,81c80,81
<                                        char *source, unsigned sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *source, unsigned ,
>                                         small, int verbosity) {
80,81c80,81
<                                        char *source, unsigned sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *source, unsigned 
>                                         small, int verbosity) {
80,81c80,81
<                                        char *source, unsigned sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *source, unsigned ,
>                                        int , int verbosity) {
80,81c80,81
<                                        char *source, unsigned sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *source, unsigned 
>                                        int , int verbosity) {
80,81c80,81
<                                        char *source, unsigned sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *source, unsigned ,
>                                         , int verbosity) {
80,81c80,81
<                                        char *source, unsigned sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *source, unsigned 
>                                         , int verbosity) {
80c80
<                                        char *source, unsigned sourceLen,
---
>                                        char *source, unsigned sourceLen
80,81c80,81
<                                        char *source, unsigned sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *source, unsigned sourceLen
>                                         small, int verbosity) {
80,81c80,81
<                                        char *source, unsigned sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *source, unsigned sourceLen
>                                        int , int verbosity) {
80,81c80,81
<                                        char *source, unsigned sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *source, unsigned sourceLen
>                                         , int verbosity) {
80,81c80,81
<                                        char *source, unsigned sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *source, unsigned sourceLen
>                                        int small int verbosity) {
80,81c80,81
<                                        char *source, unsigned sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *source, unsigned sourceLen
>                                         small int verbosity) {
80,81c80,81
<                                        char *source, unsigned sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *source, unsigned sourceLen
>                                        int  int verbosity) {
80,81c80,81
<                                        char *source, unsigned sourceLen,
<                                        int small, int verbosity) {
---
>                                        char *source, unsigned sourceLen
>                                          int verbosity) {
81c81
<                                        int small, int verbosity) {
---
>                                         small, int verbosity) {
81c81
<                                        int small, int verbosity) {
---
>                                         , int verbosity) {
81c81
<                                        int small, int verbosity) {
---
>                                         small int verbosity) {
81c81
<                                        int small, int verbosity) {
---
>                                          int verbosity) {
81c81
<                                        int small, int verbosity) {
---
>                                         small,  verbosity) {
81c81
<                                        int small, int verbosity) {
---
>                                         ,  verbosity) {
81c81
<                                        int small, int verbosity) {
---
>                                         small  verbosity) {
81c81
<                                        int small, int verbosity) {
---
>                                           verbosity) {
81c81
<                                        int small, int verbosity) {
---
>                                        int , int verbosity) {
81c81
<                                        int small, int verbosity) {
---
>                                        int  int verbosity) {
81c81
<                                        int small, int verbosity) {
---
>                                        int ,  verbosity) {
81c81
<                                        int small, int verbosity) {
---
>                                        int   verbosity) {
81c81
<                                        int small, int verbosity) {
---
>                                        int , int ) {
81c81
<                                        int small, int verbosity) {
---
>                                        int  int ) {
81c81
<                                        int small, int verbosity) {
---
>                                        int ,  ) {
81c81
<                                        int small, int verbosity) {
---
>                                        int   ) {
81c81
<                                        int small, int verbosity) {
---
>                                        int small int verbosity) {
81c81
<                                        int small, int verbosity) {
---
>                                        int small  verbosity) {
81c81
<                                        int small, int verbosity) {
---
>                                        int small int ) {
81c81
<                                        int small, int verbosity) {
---
>                                        int small  ) {
81c81
<                                        int small, int verbosity) {
---
>                                        int small int verbosity {
81c81
<                                        int small, int verbosity) {
---
>                                        int small  verbosity {
81c81
<                                        int small, int verbosity) {
---
>                                        int small int  {
81c81
<                                        int small, int verbosity) {
---
>                                        int small   {
81c81
<                                        int small, int verbosity) {
---
>                                        int small,  verbosity) {
81c81
<                                        int small, int verbosity) {
---
>                                        int small,  ) {
81c81
<                                        int small, int verbosity) {
---
>                                        int small,  verbosity {
81c81
<                                        int small, int verbosity) {
---
>                                        int small,   {
81c81
<                                        int small, int verbosity) {
---
>                                        int small,  verbosity) 
81c81
<                                        int small, int verbosity) {
---
>                                        int small,  ) 
81c81
<                                        int small, int verbosity) {
---
>                                        int small,  verbosity 
81c81
<                                        int small, int verbosity) {
---
>                                        int small,   
81c81
<                                        int small, int verbosity) {
---
>                                        int small, int ) {
81c81
<                                        int small, int verbosity) {
---
>                                        int small, int  {
81c81
<                                        int small, int verbosity) {
---
>                                        int small, int ) 
81c81
<                                        int small, int verbosity) {
---
>                                        int small, int  
81,82c81,82
<                                        int small, int verbosity) {
<   int bzerr, nread;
---
>                                        int small, int ) {
>    bzerr, nread;
81,82c81,82
<                                        int small, int verbosity) {
<   int bzerr, nread;
---
>                                        int small, int  {
>    bzerr, nread;
81,82c81,82
<                                        int small, int verbosity) {
<   int bzerr, nread;
---
>                                        int small, int ) 
>    bzerr, nread;
81,82c81,82
<                                        int small, int verbosity) {
<   int bzerr, nread;
---
>                                        int small, int  
>    bzerr, nread;
81c81
<                                        int small, int verbosity) {
---
>                                        int small, int verbosity {
81c81
<                                        int small, int verbosity) {
---
>                                        int small, int verbosity 
81,82c81,82
<                                        int small, int verbosity) {
<   int bzerr, nread;
---
>                                        int small, int verbosity {
>    bzerr, nread;
81,82c81,82
<                                        int small, int verbosity) {
<   int bzerr, nread;
---
>                                        int small, int verbosity 
>    bzerr, nread;
81,82c81,82
<                                        int small, int verbosity) {
<   int bzerr, nread;
---
>                                        int small, int verbosity {
>   int , nread;
81,82c81,82
<                                        int small, int verbosity) {
<   int bzerr, nread;
---
>                                        int small, int verbosity 
>   int , nread;
81,82c81,82
<                                        int small, int verbosity) {
<   int bzerr, nread;
---
>                                        int small, int verbosity {
>    , nread;
81,82c81,82
<                                        int small, int verbosity) {
<   int bzerr, nread;
---
>                                        int small, int verbosity 
>    , nread;
81c81
<                                        int small, int verbosity) {
---
>                                        int small, int verbosity) 
81,82c81,82
<                                        int small, int verbosity) {
<   int bzerr, nread;
---
>                                        int small, int verbosity) 
>    bzerr, nread;
81,82c81,82
<                                        int small, int verbosity) {
<   int bzerr, nread;
---
>                                        int small, int verbosity) 
>   int , nread;
81,82c81,82
<                                        int small, int verbosity) {
<   int bzerr, nread;
---
>                                        int small, int verbosity) 
>    , nread;
81,82c81,82
<                                        int small, int verbosity) {
<   int bzerr, nread;
---
>                                        int small, int verbosity) 
>   int bzerr nread;
81,82c81,82
<                                        int small, int verbosity) {
<   int bzerr, nread;
---
>                                        int small, int verbosity) 
>    bzerr nread;
81,82c81,82
<                                        int small, int verbosity) {
<   int bzerr, nread;
---
>                                        int small, int verbosity) 
>   int  nread;
81,82c81,82
<                                        int small, int verbosity) {
<   int bzerr, nread;
---
>                                        int small, int verbosity) 
>     nread;
82c82
<   int bzerr, nread;
---
>    bzerr, nread;
82c82
<   int bzerr, nread;
---
>    , nread;
82c82
<   int bzerr, nread;
---
>    bzerr nread;
82c82
<   int bzerr, nread;
---
>     nread;
82c82
<   int bzerr, nread;
---
>    bzerr, ;
82c82
<   int bzerr, nread;
---
>    , ;
82c82
<   int bzerr, nread;
---
>    bzerr ;
82c82
<   int bzerr, nread;
---
>     ;
82c82
<   int bzerr, nread;
---
>   int , nread;
82c82
<   int bzerr, nread;
---
>   int  nread;
82c82
<   int bzerr, nread;
---
>   int , ;
82c82
<   int bzerr, nread;
---
>   int  ;
82c82
<   int bzerr, nread;
---
>   int , nread
82c82
<   int bzerr, nread;
---
>   int  nread
82c82
<   int bzerr, nread;
---
>   int , 
82c82
<   int bzerr, nread;
---
>   int  
82c82
<   int bzerr, nread;
---
>   int bzerr nread;
82c82
<   int bzerr, nread;
---
>   int bzerr ;
82c82
<   int bzerr, nread;
---
>   int bzerr nread
82c82
<   int bzerr, nread;
---
>   int bzerr 
82,83c82,83
<   int bzerr, nread;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   int bzerr nread;
>    (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
82,83c82,83
<   int bzerr, nread;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   int bzerr ;
>    (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
(98.8 %, 2439 bytes)
82,83c82,83
<   int bzerr ;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   int bzerr 
>    (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
82,83c82,83
<   int bzerr ;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   int bzerr 
>   if bzerr == BZ_OK || bzerr == BZ_STREAM_END)
82,83c82,83
<   int bzerr ;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   int bzerr 
>    bzerr == BZ_OK || bzerr == BZ_STREAM_END)
82,83c82,83
<   int bzerr ;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   int bzerr 
>   if ( == BZ_OK || bzerr == BZ_STREAM_END)
82,83c82,83
<   int bzerr ;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   int bzerr 
>    ( == BZ_OK || bzerr == BZ_STREAM_END)
82,83c82,83
<   int bzerr ;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   int bzerr 
>   if  == BZ_OK || bzerr == BZ_STREAM_END)
82,83c82,83
<   int bzerr ;
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>   int bzerr 
>     == BZ_OK || bzerr == BZ_STREAM_END)
83c83
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>    (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
83c83
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>    bzerr == BZ_OK || bzerr == BZ_STREAM_END)
83c83
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>    ( == BZ_OK || bzerr == BZ_STREAM_END)
83c83
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>     == BZ_OK || bzerr == BZ_STREAM_END)
83c83
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>    (bzerr  BZ_OK || bzerr == BZ_STREAM_END)
83c83
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>    bzerr  BZ_OK || bzerr == BZ_STREAM_END)
83c83
<   if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>    (  BZ_OK || bzerr == BZ_STREAM_END)
(98.8 %, 2437 bytes)
83c83
<    (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>    bzerr == BZ_OK || bzerr == BZ_STREAM_END)
83c83
<    (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>     == BZ_OK || bzerr == BZ_STREAM_END)
83c83
<    (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>    bzerr  BZ_OK || bzerr == BZ_STREAM_END)
83c83
<    (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>      BZ_OK || bzerr == BZ_STREAM_END)
83c83
<    (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>    bzerr ==  || bzerr == BZ_STREAM_END)
83c83
<    (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>     ==  || bzerr == BZ_STREAM_END)
83c83
<    (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>    bzerr   || bzerr == BZ_STREAM_END)
83c83
<    (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>       || bzerr == BZ_STREAM_END)
83c83
<    (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>    ( == BZ_OK || bzerr == BZ_STREAM_END)
83c83
<    (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>    (  BZ_OK || bzerr == BZ_STREAM_END)
83c83
<    (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>    ( ==  || bzerr == BZ_STREAM_END)
83c83
<    (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>    (   || bzerr == BZ_STREAM_END)
83c83
<    (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>    ( == BZ_OK  bzerr == BZ_STREAM_END)
83c83
<    (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>    (  BZ_OK  bzerr == BZ_STREAM_END)
83c83
<    (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>    ( ==   bzerr == BZ_STREAM_END)
83c83
<    (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>    (    bzerr == BZ_STREAM_END)
83c83
<    (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>    (bzerr  BZ_OK || bzerr == BZ_STREAM_END)
83c83
<    (bzerr == BZ_OK || bzerr == BZ_STREAM_END)
---
>    (bzerr   || bzerr == BZ_STREAM_END)
(98.8 %, 2423 bytes)
83c83
<    (    bzerr == BZ_STREAM_END)
---
>    (      
83c83
<    (    bzerr == BZ_STREAM_END)
---
>    (    bzerr  BZ_STREAM_END)
83c83
<    (    bzerr == BZ_STREAM_END)
---
>    (    bzerr  )
83c83
<    (    bzerr == BZ_STREAM_END)
---
>    (    bzerr  BZ_STREAM_END
83c83
<    (    bzerr == BZ_STREAM_END)
---
>    (    bzerr  
83,84c83,84
<    (    bzerr == BZ_STREAM_END)
<     ;
---
>    (    bzerr  BZ_STREAM_END)
>     
83,84c83,84
<    (    bzerr == BZ_STREAM_END)
<     ;
---
>    (    bzerr  )
>     
83,84c83,84
<    (    bzerr == BZ_STREAM_END)
<     ;
---
>    (    bzerr  BZ_STREAM_END
>     
83,84c83,84
<    (    bzerr == BZ_STREAM_END)
<     ;
---
>    (    bzerr  
>     
83c83
<    (    bzerr == BZ_STREAM_END)
---
>    (    bzerr == )
83c83
<    (    bzerr == BZ_STREAM_END)
---
>    (    bzerr == 
83,84c83,84
<    (    bzerr == BZ_STREAM_END)
<     ;
---
>    (    bzerr == )
>     
83,84c83,84
<    (    bzerr == BZ_STREAM_END)
<     ;
---
>    (    bzerr == 
>     
83c83
<    (    bzerr == BZ_STREAM_END)
---
>    (    bzerr == )
85c85
<   }
---
>   
83c83
<    (    bzerr == BZ_STREAM_END)
---
>    (    bzerr == 
85c85
<   }
---
>   
83,85c83,85
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
---
>    (    bzerr == )
>     
>   
83,85c83,85
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
---
>    (    bzerr == 
>     
>   
83c83
<    (    bzerr == BZ_STREAM_END)
---
>    (    bzerr == BZ_STREAM_END
83,84c83,84
<    (    bzerr == BZ_STREAM_END)
<     ;
---
>    (    bzerr == BZ_STREAM_END
>     
83c83
<    (    bzerr == BZ_STREAM_END)
---
>    (    bzerr == BZ_STREAM_END
85c85
<   }
---
>   
83,85c83,85
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
---
>    (    bzerr == BZ_STREAM_END
>     
>   
83c83
<    (    bzerr == BZ_STREAM_END)
---
>    (    bzerr == BZ_STREAM_END
83,84c83,84
<    (    bzerr == BZ_STREAM_END)
<     ;
---
>    (    bzerr == BZ_STREAM_END
>     
83c83
<    (    bzerr == BZ_STREAM_END)
---
>    (    bzerr == BZ_STREAM_END
85c85
<   }
---
>   
83,85c83,85
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
---
>    (    bzerr == BZ_STREAM_END
>     
>   
84c84
<     ;
---
>     
84,85c84,85
<     ;
<   }
---
>     
>   
84c84
<     ;
---
>     
84,85c84,85
<     ;
<   }
---
>     
>   
84c84
<     ;
---
>     
84,85c84,85
<     ;
<   }
---
>     
>   
84c84
<     ;
---
>     
84,85c84,85
<     ;
<   }
---
>     
>   
85c85
<   }
---
>   
85c85
<   }
---
>   
85c85
<   }
---
>   
85c85
<   }
---
>   
85c85
<   }
---
>   
85c85
<   }
---
>   
85c85
<   }
---
>   
85c85
<   }
---
>   
Termination check: size was 5283; now 2423
===< pass_ternary :: c >===
===< pass_balanced :: curly >===
1c1
< 
---
>  
67,69c67
<  b( ) {
< 
<   }
---
>  b( ) 
86a85
>  
\ No newline at end of file
1c1
< 
---
>  
81,85c81
<                                        int small, int verbosity) {
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
---
>                                        int small, int verbosity) 
86a83
>  
\ No newline at end of file
===< pass_clang :: lift-assignment-expr >===
===< pass_clang :: replace-callexpr >===
===< pass_clang :: simplify-callexpr >===
===< pass_clang :: reduce-array-dim >===
===< pass_clang :: instantiate-template-type-param-to-int >===
===< pass_clang :: instantiate-template-param >===
===< pass_clang :: reduce-class-template-param >===
===< pass_clang :: replace-derived-class >===
===< pass_clang :: simplify-nested-class >===
===< pass_clang :: empty-struct-to-int >===
===< pass_clang :: remove-pointer >===
===< pass_clang :: simplify-recursive-template-instantiation >===
===< pass_peep :: a >===
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
6c6
< typedef bz_stream;
---
> typedef bz_stream
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
8c8
< #include <stdio.h>
---
> #include 
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (bz_stream *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13,14c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
<                                          int , int );
---
> (BZ2_bzCompressInit);
86a86
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (BZ2_bzCompressInit)(bz_stream * int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
13c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> (BZ2_bzCompressInit)(bz_stream *, int 
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
14c14
<                                          int , int );
---
>                                          int  int );
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
14c14
<                                          int , int );
---
>                                          int , int )
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
16c16
< typedef BZFILE;
---
> typedef BZFILE
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
18,19c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **, int *);
---
> void BZ2_bzReadGetUnused;
86a86
>  
\ No newline at end of file
1c1
< 
---
>  
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void BZ2_bzReadGetUnused(int * BZFILE *,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
18c18
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> void BZ2_bzReadGetUnused(int *, BZFILE *
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
19c19
<                                            void **, int *);
---
>                                            void ** int *);
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
19c19
<                                            void **, int *);
---
>                                            void **, int *)
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
21,23c21
< *BZ2_bzWriteOpen(int *, FILE *,
<                                           int , int ,
<                                           int );
---
> *BZ2_bzWriteOpen;
86a85
>  
\ No newline at end of file
1c1
< 
---
>  
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *BZ2_bzWriteOpen(int * FILE *,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
21c21
< *BZ2_bzWriteOpen(int *, FILE *,
---
> *BZ2_bzWriteOpen(int *, FILE *
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
22c22
<                                           int , int ,
---
>                                           int  int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
22c22
<                                           int , int ,
---
>                                           int , int 
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
23c23
<                                           int );
---
>                                           int )
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite;
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int * BZFILE *, void *, int );
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE * void *, int );
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void * int );
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
25c25
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *, int )
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
27,29c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                                         unsigned *,
<                                         unsigned *);
---
> void BZ2_bzWriteClose;
86a85
>  
\ No newline at end of file
1c1
< 
---
>  
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int * BZFILE *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *, BZFILE * int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
27c27
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *, BZFILE *, int 
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
28c28
<                                         unsigned *,
---
>                                         unsigned *
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
29c29
<                                         unsigned *);
---
>                                         unsigned *)
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
31,35c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                           unsigned *,
<                                           unsigned *,
<                                           unsigned *,
<                                           unsigned *);
---
> void BZ2_bzWriteClose64;
86a83
>  
\ No newline at end of file
1c1
< 
---
>  
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int * BZFILE *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *, BZFILE * int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
31c31
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *, BZFILE *, int 
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
32c32
<                                           unsigned *,
---
>                                           unsigned *
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
33c33
<                                           unsigned *,
---
>                                           unsigned *
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
34c34
<                                           unsigned *,
---
>                                           unsigned *
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
35c35
<                                           unsigned *);
---
>                                           unsigned *)
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
37,39c37
< BZ2_bzBuffToBuffCompress(
<     char *, unsigned *, char *, unsigned ,
<     int , int , int );
---
> BZ2_bzBuffToBuffCompress;
86a85
>  
\ No newline at end of file
1c1
< 
---
>  
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char * unsigned *, char *, unsigned ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *, unsigned * char *, unsigned ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *, unsigned *, char * unsigned ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
38c38
<     char *, unsigned *, char *, unsigned ,
---
>     char *, unsigned *, char *, unsigned 
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
39c39
<     int , int , int );
---
>     int  int , int );
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
39c39
<     int , int , int );
---
>     int , int  int );
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
39c39
<     int , int , int );
---
>     int , int , int )
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
41,45c41
< BZ2_bzBuffToBuffDecompress(char *,
<                                                  unsigned *,
<                                                  char *,
<                                                  unsigned ,
<                                                  int , int );
---
> BZ2_bzBuffToBuffDecompress;
86a83
>  
\ No newline at end of file
1c1
< 
---
>  
41c41
< BZ2_bzBuffToBuffDecompress(char *,
---
> BZ2_bzBuffToBuffDecompress(char *
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
42c42
<                                                  unsigned *,
---
>                                                  unsigned *
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
43c43
<                                                  char *,
---
>                                                  char *
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
44c44
<                                                  unsigned ,
---
>                                                  unsigned 
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
45c45
<                                                  int , int );
---
>                                                  int  int );
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
45c45
<                                                  int , int );
---
>                                                  int , int )
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
47,48c47
< BZ2_bzCompressInit(bz_stream *, int ,
<                                int , int);
---
> BZ2_bzCompressInit;
86a86
>  
\ No newline at end of file
1c1
< 
---
>  
47c47
< BZ2_bzCompressInit(bz_stream *, int ,
---
> BZ2_bzCompressInit(bz_stream * int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
47c47
< BZ2_bzCompressInit(bz_stream *, int ,
---
> BZ2_bzCompressInit(bz_stream *, int 
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
48c48
<                                int , int);
---
>                                int  int);
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
48c48
<                                int , int);
---
>                                int , int)
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
52,53c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
<                                 int , int );
---
> *BZ2_bzWriteOpen;
86a86
>  
\ No newline at end of file
1c1
< 
---
>  
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(int * FILE *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(int *, FILE * int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
52c52
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> *BZ2_bzWriteOpen(int *, FILE *, int 
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
53c53
<                                 int , int );
---
>                                 int  int );
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
53c53
<                                 int , int );
---
>                                 int , int )
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite;
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int * BZFILE *, void *, int );
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE * void *, int );
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void * int );
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
55c55
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> void BZ2_bzWrite(int *, BZFILE *, void *, int )
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
57,59c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                               unsigned *,
<                               unsigned *);
---
> void BZ2_bzWriteClose;
86a85
>  
\ No newline at end of file
1c1
< 
---
>  
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int * BZFILE *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *, BZFILE * int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
57c57
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *, BZFILE *, int 
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
58c58
<                               unsigned *,
---
>                               unsigned *
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
59c59
<                               unsigned *);
---
>                               unsigned *)
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
61,65c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                 unsigned *,
<                                 unsigned *,
<                                 unsigned *,
<                                 unsigned *);
---
> void BZ2_bzWriteClose64;
86a83
>  
\ No newline at end of file
1c1
< 
---
>  
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int * BZFILE *, int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *, BZFILE * int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
61c61
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose64(int *, BZFILE *, int 
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
62c62
<                                 unsigned *,
---
>                                 unsigned *
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
63c63
<                                 unsigned *,
---
>                                 unsigned *
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
64c64
<                                 unsigned *,
---
>                                 unsigned *
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
65c65
<                                 unsigned *);
---
>                                 unsigned *)
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
67c67
<  b( ) {
---
>  b {
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
67,69c67
<  b( ) {
< 
<   }
---
>  b( ) 
86a85
>  
\ No newline at end of file
1c1
< 
---
>  
71,72c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
<                                  int *);
---
> void BZ2_bzReadGetUnused;
86a86
>  
\ No newline at end of file
1c1
< 
---
>  
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int * BZFILE *, void **,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *, BZFILE * void **,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
71c71
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> void BZ2_bzReadGetUnused(int *, BZFILE *, void **
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
72c72
<                                  int *);
---
>                                  int *)
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
74,77c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
<                                      char *, unsigned ,
<                                      int , int ,
<                                      int );
---
> BZ2_bzBuffToBuffCompress;
86a84
>  
\ No newline at end of file
1c1
< 
---
>  
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress(char * unsigned *,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
74c74
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
75c75
<                                      char *, unsigned ,
---
>                                      char * unsigned ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
75c75
<                                      char *, unsigned ,
---
>                                      char *, unsigned 
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
76c76
<                                      int , int ,
---
>                                      int  int ,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
76c76
<                                      int , int ,
---
>                                      int , int 
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
77c77
<                                      int );
---
>                                      int )
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
79,81c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
<                                        char *source, unsigned sourceLen,
<                                        int small, int verbosity) {
---
> BZ2_bzBuffToBuffDecompress {
86a85
>  
\ No newline at end of file
1c1
< 
---
>  
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress(char *dest unsigned *destLen,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
79c79
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
80c80
<                                        char *source, unsigned sourceLen,
---
>                                        char *source unsigned sourceLen,
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
80c80
<                                        char *source, unsigned sourceLen,
---
>                                        char *source, unsigned sourceLen
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
81c81
<                                        int small, int verbosity) {
---
>                                        int small int verbosity) {
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
81,85c81
<                                        int small, int verbosity) {
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
---
>                                        int small, int verbosity) 
86a83
>  
\ No newline at end of file
1c1
< 
---
>  
82c82
<   int bzerr ;
---
>   int bzerr 
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
83c83
<    (    bzerr == BZ_STREAM_END)
---
>    
86a87
>  
\ No newline at end of file
1c1
< 
---
>  
84c84
<     ;
---
>     
86a87
>  
\ No newline at end of file
===< pass_special :: b >===
===< pass_ints :: e >===
===< pass_clex :: rm-toks-14 >===
3,8c3
< #define BZ_OK 2
<   
< #define BZ_STREAM_END 4
< typedef bz_stream;
< 
< #include <stdio.h>
---
> stdio.h>
3,8c3
< #define BZ_OK 2
<   
< #define BZ_STREAM_END 4
< typedef bz_stream;
< 
< #include <stdio.h>
---
> #.h>
3,8c3
< #define BZ_OK 2
<   
< #define BZ_STREAM_END 4
< typedef bz_stream;
< 
< #include <stdio.h>
---
> #define h>
3,8c3
< #define BZ_OK 2
<   
< #define BZ_STREAM_END 4
< typedef bz_stream;
< 
< #include <stdio.h>
---
> #define BZ_OK >
5,9d4
< #define BZ_STREAM_END 4
< typedef bz_stream;
< 
< #include <stdio.h>
< 
5,9d4
< #define BZ_STREAM_END 4
< typedef bz_stream;
< 
< #include <stdio.h>
< 
5,9d4
< #define BZ_STREAM_END 4
< typedef bz_stream;
< 
< #include <stdio.h>
< 
5,13c5
< #define BZ_STREAM_END 4
< typedef bz_stream;
< 
< #include <stdio.h>
< 
< #define BZ_API 
<   
< 
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> #define BZ_STREAM_END (BZ2_bzCompressInit)(bz_stream *, int ,
6,13c6
< typedef bz_stream;
< 
< #include <stdio.h>
< 
< #define BZ_API 
<   
< 
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> BZ2_bzCompressInit)(bz_stream *, int ,
6,13c6
< typedef bz_stream;
< 
< #include <stdio.h>
< 
< #define BZ_API 
<   
< 
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> typedef )(bz_stream *, int ,
6,13c6
< typedef bz_stream;
< 
< #include <stdio.h>
< 
< #define BZ_API 
<   
< 
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> typedef bz_stream(bz_stream *, int ,
8,13c8
< #include <stdio.h>
< 
< #define BZ_API 
<   
< 
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> bz_stream *, int ,
8,13c8
< #include <stdio.h>
< 
< #define BZ_API 
<   
< 
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> #*, int ,
8,13c8
< #include <stdio.h>
< 
< #define BZ_API 
<   
< 
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> #include , int ,
8,13c8
< #include <stdio.h>
< 
< #define BZ_API 
<   
< 
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> #include <int ,
8,13c8
< #include <stdio.h>
< 
< #define BZ_API 
<   
< 
< (BZ2_bzCompressInit)(bz_stream *, int ,
---
> #include <stdio,
8,14c8
< #include <stdio.h>
< 
< #define BZ_API 
<   
< 
< (BZ2_bzCompressInit)(bz_stream *, int ,
<                                          int , int );
---
> #include <stdio.int , int );
8,14c8
< #include <stdio.h>
< 
< #define BZ_API 
<   
< 
< (BZ2_bzCompressInit)(bz_stream *, int ,
<                                          int , int );
---
> #include <stdio.h, int );
10,14c10
< #define BZ_API 
<   
< 
< (BZ2_bzCompressInit)(bz_stream *, int ,
<                                          int , int );
---
> int );
10,14c10
< #define BZ_API 
<   
< 
< (BZ2_bzCompressInit)(bz_stream *, int ,
<                                          int , int );
---
> #);
10,14c10
< #define BZ_API 
<   
< 
< (BZ2_bzCompressInit)(bz_stream *, int ,
<                                          int , int );
---
> #define ;
13,15d12
< (BZ2_bzCompressInit)(bz_stream *, int ,
<                                          int , int );
< 
13,16c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
<                                          int , int );
< 
< typedef BZFILE;
---
> (BZFILE;
13,16c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
<                                          int , int );
< 
< typedef BZFILE;
---
> (BZ2_bzCompressInit;
13,18c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
<                                          int , int );
< 
< typedef BZFILE;
< 
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> (BZ2_bzCompressInit)void BZ2_bzReadGetUnused(int *, BZFILE *,
13,18c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
<                                          int , int );
< 
< typedef BZFILE;
< 
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> (BZ2_bzCompressInit)(BZ2_bzReadGetUnused(int *, BZFILE *,
13,18c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
<                                          int , int );
< 
< typedef BZFILE;
< 
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> (BZ2_bzCompressInit)(bz_stream (int *, BZFILE *,
13,18c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
<                                          int , int );
< 
< typedef BZFILE;
< 
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> (BZ2_bzCompressInit)(bz_stream *int *, BZFILE *,
13,18c13
< (BZ2_bzCompressInit)(bz_stream *, int ,
<                                          int , int );
< 
< typedef BZFILE;
< 
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> (BZ2_bzCompressInit)(bz_stream *, *, BZFILE *,
(98.9 %, 2328 bytes)
13,16c13
< typedef BZFILE;
< 
< void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **, int *);
---
> *, int *);
13,16c13
< typedef BZFILE;
< 
< void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **, int *);
---
> typedef , int *);
13,16c13
< typedef BZFILE;
< 
< void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **, int *);
---
> typedef BZFILEint *);
15,16c15
< void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **, int *);
---
> *);
15,16c15
< void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **, int *);
---
> void );
15,16c15
< void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **, int *);
---
> void BZ2_bzReadGetUnused;
15,18c15
< void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **, int *);
< 
< *BZ2_bzWriteOpen(int *, FILE *,
---
> void BZ2_bzReadGetUnused(*BZ2_bzWriteOpen(int *, FILE *,
15,18c15
< void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **, int *);
< 
< *BZ2_bzWriteOpen(int *, FILE *,
---
> void BZ2_bzReadGetUnused(int BZ2_bzWriteOpen(int *, FILE *,
15,18c15
< void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **, int *);
< 
< *BZ2_bzWriteOpen(int *, FILE *,
---
> void BZ2_bzReadGetUnused(int *(int *, FILE *,
15,18c15
< void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **, int *);
< 
< *BZ2_bzWriteOpen(int *, FILE *,
---
> void BZ2_bzReadGetUnused(int *, int *, FILE *,
15,18c15
< void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **, int *);
< 
< *BZ2_bzWriteOpen(int *, FILE *,
---
> void BZ2_bzReadGetUnused(int *, BZFILE *, FILE *,
15,18c15
< void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **, int *);
< 
< *BZ2_bzWriteOpen(int *, FILE *,
---
> void BZ2_bzReadGetUnused(int *, BZFILE *, FILE *,
16,18c16
<                                            void **, int *);
< 
< *BZ2_bzWriteOpen(int *, FILE *,
---
>                                            FILE *,
16,18c16
<                                            void **, int *);
< 
< *BZ2_bzWriteOpen(int *, FILE *,
---
>                                            void *,
16,18c16
<                                            void **, int *);
< 
< *BZ2_bzWriteOpen(int *, FILE *,
---
>                                            void *,
16,19c16
<                                            void **, int *);
< 
< *BZ2_bzWriteOpen(int *, FILE *,
<                                           int , int ,
---
>                                            void **int , int ,
16,19c16
<                                            void **, int *);
< 
< *BZ2_bzWriteOpen(int *, FILE *,
<                                           int , int ,
---
>                                            void **, , int ,
16,19c16
<                                            void **, int *);
< 
< *BZ2_bzWriteOpen(int *, FILE *,
<                                           int , int ,
---
>                                            void **, int int ,
16,19c16
<                                            void **, int *);
< 
< *BZ2_bzWriteOpen(int *, FILE *,
<                                           int , int ,
---
>                                            void **, int *,
16,20c16
<                                            void **, int *);
< 
< *BZ2_bzWriteOpen(int *, FILE *,
<                                           int , int ,
<                                           int );
---
>                                            void **, int *)int );
18,20c18
< *BZ2_bzWriteOpen(int *, FILE *,
<                                           int , int ,
<                                           int );
---
> );
18,20c18
< *BZ2_bzWriteOpen(int *, FILE *,
<                                           int , int ,
<                                           int );
---
> *;
18,22c18
< *BZ2_bzWriteOpen(int *, FILE *,
<                                           int , int ,
<                                           int );
< 
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> *BZ2_bzWriteOpenvoid BZ2_bzWrite(int *, BZFILE *, void *, int );
18,22c18
< *BZ2_bzWriteOpen(int *, FILE *,
<                                           int , int ,
<                                           int );
< 
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> *BZ2_bzWriteOpen(BZ2_bzWrite(int *, BZFILE *, void *, int );
18,22c18
< *BZ2_bzWriteOpen(int *, FILE *,
<                                           int , int ,
<                                           int );
< 
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> *BZ2_bzWriteOpen(int (int *, BZFILE *, void *, int );
18,22c18
< *BZ2_bzWriteOpen(int *, FILE *,
<                                           int , int ,
<                                           int );
< 
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> *BZ2_bzWriteOpen(int *int *, BZFILE *, void *, int );
18,22c18
< *BZ2_bzWriteOpen(int *, FILE *,
<                                           int , int ,
<                                           int );
< 
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> *BZ2_bzWriteOpen(int *, *, BZFILE *, void *, int );
18,22c18
< *BZ2_bzWriteOpen(int *, FILE *,
<                                           int , int ,
<                                           int );
< 
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> *BZ2_bzWriteOpen(int *, FILE , BZFILE *, void *, int );
18,22c18
< *BZ2_bzWriteOpen(int *, FILE *,
<                                           int , int ,
<                                           int );
< 
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> *BZ2_bzWriteOpen(int *, FILE *BZFILE *, void *, int );
19,22c19
<                                           int , int ,
<                                           int );
< 
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
>                                           *, void *, int );
19,22c19
<                                           int , int ,
<                                           int );
< 
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
>                                           int , void *, int );
19,22c19
<                                           int , int ,
<                                           int );
< 
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
>                                           int , void *, int );
19,22c19
<                                           int , int ,
<                                           int );
< 
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
>                                           int , int *, int );
20,22c20
<                                           int );
< 
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
>                                           , int );
20,22c20
<                                           int );
< 
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
>                                           int int );
20,22c20
<                                           int );
< 
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
>                                           int ));
22c22
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> ;
22,24c22
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
< 
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void void BZ2_bzWriteClose(int *, BZFILE *, int ,
22,24c22
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
< 
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzWriteBZ2_bzWriteClose(int *, BZFILE *, int ,
(98.9 %, 2281 bytes)
22,25c22
< ;
< 
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                                         unsigned *,
---
> ,
24,26c24
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                                         unsigned *,
<                                         unsigned *);
---
> unsigned *);
24,26c24
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                                         unsigned *,
<                                         unsigned *);
---
> void *);
24,26c24
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                                         unsigned *,
<                                         unsigned *);
---
> void BZ2_bzWriteClose);
24,26c24
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                                         unsigned *,
<                                         unsigned *);
---
> void BZ2_bzWriteClose(;
24,28c24
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                                         unsigned *,
<                                         unsigned *);
< 
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int void BZ2_bzWriteClose64(int *, BZFILE *, int ,
24,28c24
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                                         unsigned *,
<                                         unsigned *);
< 
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *BZ2_bzWriteClose64(int *, BZFILE *, int ,
24,28c24
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                                         unsigned *,
<                                         unsigned *);
< 
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *, (int *, BZFILE *, int ,
24,28c24
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                                         unsigned *,
<                                         unsigned *);
< 
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *, BZFILE int *, BZFILE *, int ,
24,28c24
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                                         unsigned *,
<                                         unsigned *);
< 
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *, BZFILE **, BZFILE *, int ,
24,28c24
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                                         unsigned *,
<                                         unsigned *);
< 
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *, BZFILE *, , BZFILE *, int ,
24,28c24
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
<                                         unsigned *,
<                                         unsigned *);
< 
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> void BZ2_bzWriteClose(int *, BZFILE *, int BZFILE *, int ,
25,28c25
<                                         unsigned *,
<                                         unsigned *);
< 
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
>                                         *, int ,
25,28c25
<                                         unsigned *,
<                                         unsigned *);
< 
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
>                                         unsigned , int ,
25,28c25
<                                         unsigned *,
<                                         unsigned *);
< 
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
>                                         unsigned *int ,
26,28c26
<                                         unsigned *);
< 
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
>                                         ,
26,29c26
<                                         unsigned *);
< 
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                           unsigned *,
---
>                                         unsigned unsigned *,
26,29c26
<                                         unsigned *);
< 
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                           unsigned *,
---
>                                         unsigned **,
26,29c26
<                                         unsigned *);
< 
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                           unsigned *,
---
>                                         unsigned *),
28,30c28
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                           unsigned *,
<                                           unsigned *,
---
> unsigned *,
28,30c28
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                           unsigned *,
<                                           unsigned *,
---
> void *,
28,30c28
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                           unsigned *,
<                                           unsigned *,
---
> void BZ2_bzWriteClose64,
28,31c28
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                           unsigned *,
<                                           unsigned *,
<                                           unsigned *,
---
> void BZ2_bzWriteClose64(unsigned *,
28,31c28
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                           unsigned *,
<                                           unsigned *,
<                                           unsigned *,
---
> void BZ2_bzWriteClose64(int *,
28,31c28
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                           unsigned *,
<                                           unsigned *,
<                                           unsigned *,
---
> void BZ2_bzWriteClose64(int *,
28,32c28
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                           unsigned *,
<                                           unsigned *,
<                                           unsigned *,
<                                           unsigned *);
---
> void BZ2_bzWriteClose64(int *, unsigned *);
28,32c28
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                           unsigned *,
<                                           unsigned *,
<                                           unsigned *,
<                                           unsigned *);
---
> void BZ2_bzWriteClose64(int *, BZFILE *);
28,32c28
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                           unsigned *,
<                                           unsigned *,
<                                           unsigned *,
<                                           unsigned *);
---
> void BZ2_bzWriteClose64(int *, BZFILE *);
28,32c28
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                           unsigned *,
<                                           unsigned *,
<                                           unsigned *,
<                                           unsigned *);
---
> void BZ2_bzWriteClose64(int *, BZFILE *, ;
28,34c28
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
<                                           unsigned *,
<                                           unsigned *,
<                                           unsigned *,
<                                           unsigned *);
< 
< BZ2_bzBuffToBuffCompress(
---
> void BZ2_bzWriteClose64(int *, BZFILE *, int BZ2_bzBuffToBuffCompress(
29,34c29
<                                           unsigned *,
<                                           unsigned *,
<                                           unsigned *,
<                                           unsigned *);
< 
< BZ2_bzBuffToBuffCompress(
---
>                                           (
29,35c29
<                                           unsigned *,
<                                           unsigned *,
<                                           unsigned *,
<                                           unsigned *);
< 
< BZ2_bzBuffToBuffCompress(
<     char *, unsigned *, char *, unsigned ,
---
>                                           unsigned char *, unsigned *, char *, unsigned ,
29,35c29
<                                           unsigned *,
<                                           unsigned *,
<                                           unsigned *,
<                                           unsigned *);
< 
< BZ2_bzBuffToBuffCompress(
<     char *, unsigned *, char *, unsigned ,
---
>                                           unsigned **, unsigned *, char *, unsigned ,
30,35c30
<                                           unsigned *,
<                                           unsigned *,
<                                           unsigned *);
< 
< BZ2_bzBuffToBuffCompress(
<     char *, unsigned *, char *, unsigned ,
---
>                                           , unsigned *, char *, unsigned ,
30,35c30
<                                           unsigned *,
<                                           unsigned *,
<                                           unsigned *);
< 
< BZ2_bzBuffToBuffCompress(
<     char *, unsigned *, char *, unsigned ,
---
>                                           unsigned unsigned *, char *, unsigned ,
30,35c30
<                                           unsigned *,
<                                           unsigned *,
<                                           unsigned *);
< 
< BZ2_bzBuffToBuffCompress(
<     char *, unsigned *, char *, unsigned ,
---
>                                           unsigned **, char *, unsigned ,
31,35c31
<                                           unsigned *,
<                                           unsigned *);
< 
< BZ2_bzBuffToBuffCompress(
<     char *, unsigned *, char *, unsigned ,
---
>                                           , char *, unsigned ,
31,35c31
<                                           unsigned *,
<                                           unsigned *);
< 
< BZ2_bzBuffToBuffCompress(
<     char *, unsigned *, char *, unsigned ,
---
>                                           unsigned char *, unsigned ,
31,35c31
<                                           unsigned *,
<                                           unsigned *);
< 
< BZ2_bzBuffToBuffCompress(
<     char *, unsigned *, char *, unsigned ,
---
>                                           unsigned **, unsigned ,
32,35c32
<                                           unsigned *);
< 
< BZ2_bzBuffToBuffCompress(
<     char *, unsigned *, char *, unsigned ,
---
>                                           , unsigned ,
32,35c32
<                                           unsigned *);
< 
< BZ2_bzBuffToBuffCompress(
<     char *, unsigned *, char *, unsigned ,
---
>                                           unsigned unsigned ,
32,35c32
<                                           unsigned *);
< 
< BZ2_bzBuffToBuffCompress(
<     char *, unsigned *, char *, unsigned ,
---
>                                           unsigned *,
32,36c32
<                                           unsigned *);
< 
< BZ2_bzBuffToBuffCompress(
<     char *, unsigned *, char *, unsigned ,
<     int , int , int );
---
>                                           unsigned *)int , int , int );
34,36c34
< BZ2_bzBuffToBuffCompress(
<     char *, unsigned *, char *, unsigned ,
<     int , int , int );
---
> , int , int );
34,36c34
< BZ2_bzBuffToBuffCompress(
<     char *, unsigned *, char *, unsigned ,
<     int , int , int );
---
> BZ2_bzBuffToBuffCompressint , int );
35,36c35
<     char *, unsigned *, char *, unsigned ,
<     int , int , int );
---
>     , int );
35,36c35
<     char *, unsigned *, char *, unsigned ,
<     int , int , int );
---
>     char int );
35,36c35
<     char *, unsigned *, char *, unsigned ,
<     int , int , int );
---
>     char *);
35,36c35
<     char *, unsigned *, char *, unsigned ,
<     int , int , int );
---
>     char *, ;
35,38c35
<     char *, unsigned *, char *, unsigned ,
<     int , int , int );
< 
< BZ2_bzBuffToBuffDecompress(char *,
---
>     char *, unsigned BZ2_bzBuffToBuffDecompress(char *,
35,38c35
<     char *, unsigned *, char *, unsigned ,
<     int , int , int );
< 
< BZ2_bzBuffToBuffDecompress(char *,
---
>     char *, unsigned *(char *,
35,38c35
<     char *, unsigned *, char *, unsigned ,
<     int , int , int );
< 
< BZ2_bzBuffToBuffDecompress(char *,
---
>     char *, unsigned *, char *,
35,38c35
<     char *, unsigned *, char *, unsigned ,
<     int , int , int );
< 
< BZ2_bzBuffToBuffDecompress(char *,
---
>     char *, unsigned *, char *,
35,38c35
<     char *, unsigned *, char *, unsigned ,
<     int , int , int );
< 
< BZ2_bzBuffToBuffDecompress(char *,
---
>     char *, unsigned *, char *,
35,39c35
<     char *, unsigned *, char *, unsigned ,
<     int , int , int );
< 
< BZ2_bzBuffToBuffDecompress(char *,
<                                                  unsigned *,
---
>     char *, unsigned *, char *, unsigned *,
35,39c35
<     char *, unsigned *, char *, unsigned ,
<     int , int , int );
< 
< BZ2_bzBuffToBuffDecompress(char *,
<                                                  unsigned *,
---
>     char *, unsigned *, char *, unsigned *,
36,39c36
<     int , int , int );
< 
< BZ2_bzBuffToBuffDecompress(char *,
<                                                  unsigned *,
---
>     ,
36,40c36
<     int , int , int );
< 
< BZ2_bzBuffToBuffDecompress(char *,
<                                                  unsigned *,
<                                                  char *,
---
>     int char *,
36,40c36
<     int , int , int );
< 
< BZ2_bzBuffToBuffDecompress(char *,
<                                                  unsigned *,
<                                                  char *,
---
>     int , *,
36,40c36
<     int , int , int );
< 
< BZ2_bzBuffToBuffDecompress(char *,
<                                                  unsigned *,
<                                                  char *,
---
>     int , int ,
36,41c36
<     int , int , int );
< 
< BZ2_bzBuffToBuffDecompress(char *,
<                                                  unsigned *,
<                                                  char *,
<                                                  unsigned ,
---
>     int , int , unsigned ,
36,41c36
<     int , int , int );
< 
< BZ2_bzBuffToBuffDecompress(char *,
<                                                  unsigned *,
<                                                  char *,
<                                                  unsigned ,
---
>     int , int , int ,
36,42c36
<     int , int , int );
< 
< BZ2_bzBuffToBuffDecompress(char *,
<                                                  unsigned *,
<                                                  char *,
<                                                  unsigned ,
<                                                  int , int );
---
>     int , int , int )int , int );
38,42c38
< BZ2_bzBuffToBuffDecompress(char *,
<                                                  unsigned *,
<                                                  char *,
<                                                  unsigned ,
<                                                  int , int );
---
> , int );
38,42c38
< BZ2_bzBuffToBuffDecompress(char *,
<                                                  unsigned *,
<                                                  char *,
<                                                  unsigned ,
<                                                  int , int );
---
> BZ2_bzBuffToBuffDecompressint );
38,42c38
< BZ2_bzBuffToBuffDecompress(char *,
<                                                  unsigned *,
<                                                  char *,
<                                                  unsigned ,
<                                                  int , int );
---
> BZ2_bzBuffToBuffDecompress();
38,42c38
< BZ2_bzBuffToBuffDecompress(char *,
<                                                  unsigned *,
<                                                  char *,
<                                                  unsigned ,
<                                                  int , int );
---
> BZ2_bzBuffToBuffDecompress(char ;
38,44c38
< BZ2_bzBuffToBuffDecompress(char *,
<                                                  unsigned *,
<                                                  char *,
<                                                  unsigned ,
<                                                  int , int );
< 
< BZ2_bzCompressInit(bz_stream *, int ,
---
> BZ2_bzBuffToBuffDecompress(char *BZ2_bzCompressInit(bz_stream *, int ,
39,44c39
<                                                  unsigned *,
<                                                  char *,
<                                                  unsigned ,
<                                                  int , int );
< 
< BZ2_bzCompressInit(bz_stream *, int ,
---
>                                                  (bz_stream *, int ,
39,44c39
<                                                  unsigned *,
<                                                  char *,
<                                                  unsigned ,
<                                                  int , int );
< 
< BZ2_bzCompressInit(bz_stream *, int ,
---
>                                                  unsigned bz_stream *, int ,
39,44c39
<                                                  unsigned *,
<                                                  char *,
<                                                  unsigned ,
<                                                  int , int );
< 
< BZ2_bzCompressInit(bz_stream *, int ,
---
>                                                  unsigned **, int ,
40,44c40
<                                                  char *,
<                                                  unsigned ,
<                                                  int , int );
< 
< BZ2_bzCompressInit(bz_stream *, int ,
---
>                                                  , int ,
40,44c40
<                                                  char *,
<                                                  unsigned ,
<                                                  int , int );
< 
< BZ2_bzCompressInit(bz_stream *, int ,
---
>                                                  char int ,
(99.0 %, 2036 bytes)
38,45c38
< BZ2_bzBuffToBuffDecompress();
< 
< BZ2_bzCompressInit(bz_stream *, int ,
<                                int , int);
< 
<  
< 
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> BZ2_bzBuffToBuffDecompress(*BZ2_bzWriteOpen(int *, FILE *, int ,
38,45c38
< BZ2_bzBuffToBuffDecompress();
< 
< BZ2_bzCompressInit(bz_stream *, int ,
<                                int , int);
< 
<  
< 
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> BZ2_bzBuffToBuffDecompress()BZ2_bzWriteOpen(int *, FILE *, int ,
40,45c40
< BZ2_bzCompressInit(bz_stream *, int ,
<                                int , int);
< 
<  
< 
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> (int *, FILE *, int ,
40,45c40
< BZ2_bzCompressInit(bz_stream *, int ,
<                                int , int);
< 
<  
< 
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> BZ2_bzCompressInitint *, FILE *, int ,
40,45c40
< BZ2_bzCompressInit(bz_stream *, int ,
<                                int , int);
< 
<  
< 
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> BZ2_bzCompressInit(*, FILE *, int ,
40,45c40
< BZ2_bzCompressInit(bz_stream *, int ,
<                                int , int);
< 
<  
< 
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> BZ2_bzCompressInit(bz_stream , FILE *, int ,
40,45c40
< BZ2_bzCompressInit(bz_stream *, int ,
<                                int , int);
< 
<  
< 
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> BZ2_bzCompressInit(bz_stream *FILE *, int ,
40,45c40
< BZ2_bzCompressInit(bz_stream *, int ,
<                                int , int);
< 
<  
< 
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> BZ2_bzCompressInit(bz_stream *, *, int ,
40,45c40
< BZ2_bzCompressInit(bz_stream *, int ,
<                                int , int);
< 
<  
< 
< *BZ2_bzWriteOpen(int *, FILE *, int ,
---
> BZ2_bzCompressInit(bz_stream *, int , int ,
(99.0 %, 1958 bytes)
40,43c40
< BZ2_bzCompressInit(bz_stream , FILE *, int ,
<                                 int , int );
< 
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> BZ2_bzCompressInit(bz_stream int *, BZFILE *, void *, int );
40,43c40
< BZ2_bzCompressInit(bz_stream , FILE *, int ,
<                                 int , int );
< 
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> BZ2_bzCompressInit(bz_stream , *, BZFILE *, void *, int );
40,43c40
< BZ2_bzCompressInit(bz_stream , FILE *, int ,
<                                 int , int );
< 
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> BZ2_bzCompressInit(bz_stream , FILE , BZFILE *, void *, int );
40,43c40
< BZ2_bzCompressInit(bz_stream , FILE *, int ,
<                                 int , int );
< 
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> BZ2_bzCompressInit(bz_stream , FILE *BZFILE *, void *, int );
40,43c40
< BZ2_bzCompressInit(bz_stream , FILE *, int ,
<                                 int , int );
< 
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> BZ2_bzCompressInit(bz_stream , FILE *, *, void *, int );
40,43c40
< BZ2_bzCompressInit(bz_stream , FILE *, int ,
<                                 int , int );
< 
< void BZ2_bzWrite(int *, BZFILE *, void *, int );
---
> BZ2_bzCompressInit(bz_stream , FILE *, int , void *, int );
(99.1 %, 1881 bytes)
40,42c40
< BZ2_bzCompressInit(bz_stream , FILE , BZFILE *, void *, int );
< 
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> BZ2_bzCompressInit(bz_stream , FILE *, BZFILE *, int ,
40,42c40
< BZ2_bzCompressInit(bz_stream , FILE , BZFILE *, void *, int );
< 
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> BZ2_bzCompressInit(bz_stream , FILE , , BZFILE *, int ,
40,42c40
< BZ2_bzCompressInit(bz_stream , FILE , BZFILE *, void *, int );
< 
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> BZ2_bzCompressInit(bz_stream , FILE , BZFILE BZFILE *, int ,
40,42c40
< BZ2_bzCompressInit(bz_stream , FILE , BZFILE *, void *, int );
< 
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> BZ2_bzCompressInit(bz_stream , FILE , BZFILE **, int ,
(99.1 %, 1827 bytes)
40,44c40
< BZ2_bzCompressInit(bz_stream , FILE *, BZFILE *, int ,
<                               unsigned *,
<                               unsigned *);
< 
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> BZ2_bzCompressInit(bz_stream , FILE void BZ2_bzWriteClose64(int *, BZFILE *, int ,
40,44c40
< BZ2_bzCompressInit(bz_stream , FILE *, BZFILE *, int ,
<                               unsigned *,
<                               unsigned *);
< 
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> BZ2_bzCompressInit(bz_stream , FILE *BZ2_bzWriteClose64(int *, BZFILE *, int ,
40,44c40
< BZ2_bzCompressInit(bz_stream , FILE *, BZFILE *, int ,
<                               unsigned *,
<                               unsigned *);
< 
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> BZ2_bzCompressInit(bz_stream , FILE *, (int *, BZFILE *, int ,
40,44c40
< BZ2_bzCompressInit(bz_stream , FILE *, BZFILE *, int ,
<                               unsigned *,
<                               unsigned *);
< 
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> BZ2_bzCompressInit(bz_stream , FILE *, BZFILE int *, BZFILE *, int ,
40,44c40
< BZ2_bzCompressInit(bz_stream , FILE *, BZFILE *, int ,
<                               unsigned *,
<                               unsigned *);
< 
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> BZ2_bzCompressInit(bz_stream , FILE *, BZFILE **, BZFILE *, int ,
40,44c40
< BZ2_bzCompressInit(bz_stream , FILE *, BZFILE *, int ,
<                               unsigned *,
<                               unsigned *);
< 
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> BZ2_bzCompressInit(bz_stream , FILE *, BZFILE *, , BZFILE *, int ,
40,44c40
< BZ2_bzCompressInit(bz_stream , FILE *, BZFILE *, int ,
<                               unsigned *,
<                               unsigned *);
< 
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
> BZ2_bzCompressInit(bz_stream , FILE *, BZFILE *, int BZFILE *, int ,
41,44c41
<                               unsigned *,
<                               unsigned *);
< 
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
>                               *, int ,
41,44c41
<                               unsigned *,
<                               unsigned *);
< 
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
>                               unsigned , int ,
(99.2 %, 1705 bytes)
40,43c40
< BZ2_bzCompressInit(bz_stream , FILE *, BZFILE **, BZFILE *, int ,
<                                 unsigned *,
<                                 unsigned *,
<                                 unsigned *,
---
> BZ2_bzCompressInit(bz_stream , FILE *, BZFILE **,
40,43c40
< BZ2_bzCompressInit(bz_stream , FILE *, BZFILE **, BZFILE *, int ,
<                                 unsigned *,
<                                 unsigned *,
<                                 unsigned *,
---
> BZ2_bzCompressInit(bz_stream , FILE *, BZFILE **,
40,44c40
< BZ2_bzCompressInit(bz_stream , FILE *, BZFILE **, BZFILE *, int ,
<                                 unsigned *,
<                                 unsigned *,
<                                 unsigned *,
<                                 unsigned *);
---
> BZ2_bzCompressInit(bz_stream , FILE *, BZFILE **, unsigned *);
(99.2 %, 1557 bytes)
40,47c40
< BZ2_bzCompressInit(bz_stream , FILE *, BZFILE **,
<                                 unsigned *);
< 
<  b( ) {
< 
<   }
< 
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> BZ2_bzCompressInit(bz_stream , FILE *, BZFILE *int *, BZFILE *, void **,
40,47c40
< BZ2_bzCompressInit(bz_stream , FILE *, BZFILE **,
<                                 unsigned *);
< 
<  b( ) {
< 
<   }
< 
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
> BZ2_bzCompressInit(bz_stream , FILE *, BZFILE ***, BZFILE *, void **,
41,47c41
<                                 unsigned *);
< 
<  b( ) {
< 
<   }
< 
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
>                                 , BZFILE *, void **,
41,47c41
<                                 unsigned *);
< 
<  b( ) {
< 
<   }
< 
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
>                                 unsigned BZFILE *, void **,
41,47c41
<                                 unsigned *);
< 
<  b( ) {
< 
<   }
< 
< void BZ2_bzReadGetUnused(int *, BZFILE *, void **,
---
>                                 unsigned **, void **,
(99.3 %, 1466 bytes)
40,43c40
< BZ2_bzCompressInit(bz_stream , FILE *, BZFILE ***, BZFILE *, void **,
<                                  int *);
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzCompressInit(bz_stream , FILE *, BZFILE **(char *, unsigned *,
40,43c40
< BZ2_bzCompressInit(bz_stream , FILE *, BZFILE ***, BZFILE *, void **,
<                                  int *);
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzCompressInit(bz_stream , FILE *, BZFILE ***char *, unsigned *,
40,43c40
< BZ2_bzCompressInit(bz_stream , FILE *, BZFILE ***, BZFILE *, void **,
<                                  int *);
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzCompressInit(bz_stream , FILE *, BZFILE ***, *, unsigned *,
40,43c40
< BZ2_bzCompressInit(bz_stream , FILE *, BZFILE ***, BZFILE *, void **,
<                                  int *);
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzCompressInit(bz_stream , FILE *, BZFILE ***, BZFILE , unsigned *,
40,43c40
< BZ2_bzCompressInit(bz_stream , FILE *, BZFILE ***, BZFILE *, void **,
<                                  int *);
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzCompressInit(bz_stream , FILE *, BZFILE ***, BZFILE *unsigned *,
40,43c40
< BZ2_bzCompressInit(bz_stream , FILE *, BZFILE ***, BZFILE *, void **,
<                                  int *);
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzCompressInit(bz_stream , FILE *, BZFILE ***, BZFILE *, *,
40,43c40
< BZ2_bzCompressInit(bz_stream , FILE *, BZFILE ***, BZFILE *, void **,
<                                  int *);
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
---
> BZ2_bzCompressInit(bz_stream , FILE *, BZFILE ***, BZFILE *, void ,
40,44c40
< BZ2_bzCompressInit(bz_stream , FILE *, BZFILE ***, BZFILE *, void **,
<                                  int *);
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
<                                      char *, unsigned ,
---
> BZ2_bzCompressInit(bz_stream , FILE *, BZFILE ***, BZFILE *, void *char *, unsigned ,
40,44c40
< BZ2_bzCompressInit(bz_stream , FILE *, BZFILE ***, BZFILE *, void **,
<                                  int *);
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *,
<                                      char *, unsigned ,
---
> BZ2_bzCompressInit(bz_stream , FILE *, BZFILE ***, BZFILE *, void ***, unsigned ,
(99.3 %, 1381 bytes)
40,43c40
< BZ2_bzCompressInit(bz_stream , FILE *, BZFILE ***, BZFILE , unsigned *,
<                                      char *, unsigned ,
<                                      int , int ,
<                                      int );
---
> BZ2_bzCompressInit(bz_stream , FILE *, BZFILE ***, BZFILE );
40,43c40
< BZ2_bzCompressInit(bz_stream , FILE *, BZFILE ***, BZFILE , unsigned *,
<                                      char *, unsigned ,
<                                      int , int ,
<                                      int );
---
> BZ2_bzCompressInit(bz_stream , FILE *, BZFILE ***, BZFILE , ;
40,45c40
< BZ2_bzCompressInit(bz_stream , FILE *, BZFILE ***, BZFILE , unsigned *,
<                                      char *, unsigned ,
<                                      int , int ,
<                                      int );
< 
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzCompressInit(bz_stream , FILE *, BZFILE ***, BZFILE , unsigned BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
40,45c40
< BZ2_bzCompressInit(bz_stream , FILE *, BZFILE ***, BZFILE , unsigned *,
<                                      char *, unsigned ,
<                                      int , int ,
<                                      int );
< 
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
> BZ2_bzCompressInit(bz_stream , FILE *, BZFILE ***, BZFILE , unsigned *(char *dest, unsigned *destLen,
41,45c41
<                                      char *, unsigned ,
<                                      int , int ,
<                                      int );
< 
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
>                                      char *dest, unsigned *destLen,
41,45c41
<                                      char *, unsigned ,
<                                      int , int ,
<                                      int );
< 
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
>                                      char *dest, unsigned *destLen,
41,45c41
<                                      char *, unsigned ,
<                                      int , int ,
<                                      int );
< 
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
>                                      char *dest, unsigned *destLen,
41,45c41
<                                      char *, unsigned ,
<                                      int , int ,
<                                      int );
< 
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
---
>                                      char *, , unsigned *destLen,
(99.4 %, 1221 bytes)
40,43c40
< BZ2_bzCompressInit(bz_stream , FILE *, BZFILE ***, BZFILE );
< 
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
<                                        char *source, unsigned sourceLen,
---
> BZ2_bzCompressInit(bz_stream , FILE *, BZFILE ***, BZFILE source, unsigned sourceLen,
40,43c40
< BZ2_bzCompressInit(bz_stream , FILE *, BZFILE ***, BZFILE );
< 
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
<                                        char *source, unsigned sourceLen,
---
> BZ2_bzCompressInit(bz_stream , FILE *, BZFILE ***, BZFILE ), unsigned sourceLen,
42,43c42
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
<                                        char *source, unsigned sourceLen,
---
> unsigned sourceLen,
42,43c42
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
<                                        char *source, unsigned sourceLen,
---
> BZ2_bzBuffToBuffDecompresssourceLen,
42,43c42
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
<                                        char *source, unsigned sourceLen,
---
> BZ2_bzBuffToBuffDecompress(,
42,44c42
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
<                                        char *source, unsigned sourceLen,
<                                        int small, int verbosity) {
---
> BZ2_bzBuffToBuffDecompress(char int small, int verbosity) {
42,44c42
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
<                                        char *source, unsigned sourceLen,
<                                        int small, int verbosity) {
---
> BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
42,44c42
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen,
<                                        char *source, unsigned sourceLen,
<                                        int small, int verbosity) {
---
> BZ2_bzBuffToBuffDecompress(char *dest, int verbosity) {
(99.5 %, 1080 bytes)
42,45c42
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
<     ;
---
> BZ2_bzBuffToBuffDecompress(char *;
42,46c42
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
---
> BZ2_bzBuffToBuffDecompress(char *small}
42,47c42
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
> BZ2_bzBuffToBuffDecompress(char *small, 
\ No newline at end of file
42,47c42
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
> BZ2_bzBuffToBuffDecompress(char *small, int 
\ No newline at end of file
42,47c42
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
> BZ2_bzBuffToBuffDecompress(char *small, int verbosity
\ No newline at end of file
42,47c42
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
> BZ2_bzBuffToBuffDecompress(char *small, int verbosity) 
\ No newline at end of file
43,47c43
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>   
\ No newline at end of file
43,47c43
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>   int 
\ No newline at end of file
43,47c43
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>   int bzerr 
\ No newline at end of file
44,47c44
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>    
\ No newline at end of file
44,47c44
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>    (    
\ No newline at end of file
44,47c44
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>    (    bzerr 
\ No newline at end of file
44,47c44
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>    (    bzerr == 
\ No newline at end of file
44,47c44
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>    (    bzerr == BZ_STREAM_END
\ No newline at end of file
45,47c45
<     ;
<   }
< 
---
>     
\ No newline at end of file
46,47c46
<   }
< 
---
>   
\ No newline at end of file
===< pass_clex :: rm-toks-9 >===
3,6c3
< #define BZ_OK 2
<   
< #define BZ_STREAM_END 4
< typedef bz_stream;
---
> bz_stream;
3,6c3
< #define BZ_OK 2
<   
< #define BZ_STREAM_END 4
< typedef bz_stream;
---
> #;
3,8c3
< #define BZ_OK 2
<   
< #define BZ_STREAM_END 4
< typedef bz_stream;
< 
< #include <stdio.h>
---
> #define #include <stdio.h>
3,8c3
< #define BZ_OK 2
<   
< #define BZ_STREAM_END 4
< typedef bz_stream;
< 
< #include <stdio.h>
---
> #define BZ_OK include <stdio.h>
5,8c5
< #define BZ_STREAM_END 4
< typedef bz_stream;
< 
< #include <stdio.h>
---
> <stdio.h>
5,8c5
< #define BZ_STREAM_END 4
< typedef bz_stream;
< 
< #include <stdio.h>
---
> #stdio.h>
5,8c5
< #define BZ_STREAM_END 4
< typedef bz_stream;
< 
< #include <stdio.h>
---
> #define .h>
5,8c5
< #define BZ_STREAM_END 4
< typedef bz_stream;
< 
< #include <stdio.h>
---
> #define BZ_STREAM_END h>
6,8c6
< typedef bz_stream;
< 
< #include <stdio.h>
---
> >
6,10c6
< typedef bz_stream;
< 
< #include <stdio.h>
< 
< #define BZ_API 
---
> typedef #define BZ_API 
6,10c6
< typedef bz_stream;
< 
< #include <stdio.h>
< 
< #define BZ_API 
---
> typedef bz_streamdefine BZ_API 
8,10c8
< #include <stdio.h>
< 
< #define BZ_API 
---
> BZ_API 
8,13c8
< #include <stdio.h>
< 
< #define BZ_API 
<   
< 
< typedef BZFILE;
---
> #typedef BZFILE;
8,13c8
< #include <stdio.h>
< 
< #define BZ_API 
<   
< 
< typedef BZFILE;
---
> #include BZFILE;
8,13c8
< #include <stdio.h>
< 
< #define BZ_API 
<   
< 
< typedef BZFILE;
---
> #include <;
8,15c8
< #include <stdio.h>
< 
< #define BZ_API 
<   
< 
< typedef BZFILE;
< 
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> #include <stdiovoid BZ2_bzReadGetUnused(int *, BZFILE *,
8,15c8
< #include <stdio.h>
< 
< #define BZ_API 
<   
< 
< typedef BZFILE;
< 
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> #include <stdio.BZ2_bzReadGetUnused(int *, BZFILE *,
8,15c8
< #include <stdio.h>
< 
< #define BZ_API 
<   
< 
< typedef BZFILE;
< 
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> #include <stdio.h(int *, BZFILE *,
10,15c10
< #define BZ_API 
<   
< 
< typedef BZFILE;
< 
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> int *, BZFILE *,
10,15c10
< #define BZ_API 
<   
< 
< typedef BZFILE;
< 
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> #*, BZFILE *,
10,15c10
< #define BZ_API 
<   
< 
< typedef BZFILE;
< 
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> #define , BZFILE *,
13,15c13
< typedef BZFILE;
< 
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> BZFILE *,
13,15c13
< typedef BZFILE;
< 
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> typedef *,
13,15c13
< typedef BZFILE;
< 
< void BZ2_bzReadGetUnused(int *, BZFILE *,
---
> typedef BZFILE,
15,16c15
< void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **, int *);
---
> void **, int *);
15,16c15
< void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **, int *);
---
> void **, int *);
15,16c15
< void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **, int *);
---
> void BZ2_bzReadGetUnused*, int *);
15,16c15
< void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **, int *);
---
> void BZ2_bzReadGetUnused(, int *);
15,16c15
< void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **, int *);
---
> void BZ2_bzReadGetUnused(int int *);
15,16c15
< void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **, int *);
---
> void BZ2_bzReadGetUnused(int **);
15,16c15
< void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **, int *);
---
> void BZ2_bzReadGetUnused(int *, );
15,16c15
< void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **, int *);
---
> void BZ2_bzReadGetUnused(int *, BZFILE ;
15,18c15
< void BZ2_bzReadGetUnused(int *, BZFILE *,
<                                            void **, int *);
< 
< *BZ2_bzWriteOpen(int *, FILE *,
---
> void BZ2_bzReadGetUnused(int *, BZFILE **BZ2_bzWriteOpen(int *, FILE *,
16,18c16
<                                            void **, int *);
< 
< *BZ2_bzWriteOpen(int *, FILE *,
---
>                                            BZ2_bzWriteOpen(int *, FILE *,
16,18c16
<                                            void **, int *);
< 
< *BZ2_bzWriteOpen(int *, FILE *,
---
>                                            void (int *, FILE *,
16,18c16
<                                            void **, int *);
< 
< *BZ2_bzWriteOpen(int *, FILE *,
---
>                                            void *int *, FILE *,
16,18c16
<                                            void **, int *);
< 
< *BZ2_bzWriteOpen(int *, FILE *,
---
>                                            void ***, FILE *,
(99.5 %, 1012 bytes)
15,17c15
< void BZ2_bzReadGetUnused(int **);
< 
< *BZ2_bzWriteOpen(int *, FILE *,
---
> void BZ2_bzReadGetUnused(int *FILE *,
15,17c15
< void BZ2_bzReadGetUnused(int **);
< 
< *BZ2_bzWriteOpen(int *, FILE *,
---
> void BZ2_bzReadGetUnused(int ***,
15,17c15
< void BZ2_bzReadGetUnused(int **);
< 
< *BZ2_bzWriteOpen(int *, FILE *,
---
> void BZ2_bzReadGetUnused(int **),
17,18c17
< *BZ2_bzWriteOpen(int *, FILE *,
<                                           int , int ,
---
> int , int ,
17,18c17
< *BZ2_bzWriteOpen(int *, FILE *,
<                                           int , int ,
---
> *, int ,
17,18c17
< *BZ2_bzWriteOpen(int *, FILE *,
<                                           int , int ,
---
> *BZ2_bzWriteOpenint ,
17,18c17
< *BZ2_bzWriteOpen(int *, FILE *,
<                                           int , int ,
---
> *BZ2_bzWriteOpen(,
17,19c17
< *BZ2_bzWriteOpen(int *, FILE *,
<                                           int , int ,
<                                           int );
---
> *BZ2_bzWriteOpen(int int );
17,19c17
< *BZ2_bzWriteOpen(int *, FILE *,
<                                           int , int ,
<                                           int );
---
> *BZ2_bzWriteOpen(int *);
(99.5 %, 979 bytes)
15,19c15
< void BZ2_bzReadGetUnused(int ***,
<                                           int , int ,
<                                           int );
< 
< ;
---
> void BZ2_bzReadGetUnused(int **;
15,21c15
< void BZ2_bzReadGetUnused(int ***,
<                                           int , int ,
<                                           int );
< 
< ;
< 
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
> void BZ2_bzReadGetUnused(int ***void BZ2_bzWriteClose(int *, BZFILE *, int ,
16,21c16
<                                           int , int ,
<                                           int );
< 
< ;
< 
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
>                                           BZ2_bzWriteClose(int *, BZFILE *, int ,
16,21c16
<                                           int , int ,
<                                           int );
< 
< ;
< 
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
>                                           int (int *, BZFILE *, int ,
16,21c16
<                                           int , int ,
<                                           int );
< 
< ;
< 
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
>                                           int , int *, BZFILE *, int ,
16,21c16
<                                           int , int ,
<                                           int );
< 
< ;
< 
< void BZ2_bzWriteClose(int *, BZFILE *, int ,
---
>                                           int , int *, BZFILE *, int ,
(99.6 %, 898 bytes)
16,17c16
<                                           int , int *, BZFILE *, int ,
<                                         unsigned *,
---
>                                           int , *,
16,17c16
<                                           int , int *, BZFILE *, int ,
<                                         unsigned *,
---
>                                           int , int ,
16,18c16
<                                           int , int *, BZFILE *, int ,
<                                         unsigned *,
<                                         unsigned *);
---
>                                           int , int *unsigned *);
16,18c16
<                                           int , int *, BZFILE *, int ,
<                                         unsigned *,
<                                         unsigned *);
---
>                                           int , int *, *);
16,18c16
<                                           int , int *, BZFILE *, int ,
<                                         unsigned *,
<                                         unsigned *);
---
>                                           int , int *, BZFILE );
(99.6 %, 829 bytes)
16,19c16
<                                           int , int ,
<                                         unsigned *);
< 
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
>                                           int , int *, BZFILE *, int ,
17,19c17
<                                         unsigned *);
< 
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
>                                         , BZFILE *, int ,
17,19c17
<                                         unsigned *);
< 
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
>                                         unsigned BZFILE *, int ,
17,19c17
<                                         unsigned *);
< 
< void BZ2_bzWriteClose64(int *, BZFILE *, int ,
---
>                                         unsigned **, int ,
(99.6 %, 745 bytes)
16,17c16
<                                           int , int *, BZFILE *, int ,
<                                           unsigned *,
---
>                                           int , int ,
16,18c16
<                                           int , int *, BZFILE *, int ,
<                                           unsigned *,
<                                           unsigned *,
---
>                                           int , int *unsigned *,
16,18c16
<                                           int , int *, BZFILE *, int ,
<                                           unsigned *,
<                                           unsigned *,
---
>                                           int , int *, *,
16,18c16
<                                           int , int *, BZFILE *, int ,
<                                           unsigned *,
<                                           unsigned *,
---
>                                           int , int *, BZFILE ,
(99.7 %, 674 bytes)
16,19c16
<                                           int , int ,
<                                           unsigned *,
<                                           unsigned *,
<                                           unsigned *);
---
>                                           int , int );
17,19c17
<                                           unsigned *,
<                                           unsigned *,
<                                           unsigned *);
---
>                                           ;
17,21c17
<                                           unsigned *,
<                                           unsigned *,
<                                           unsigned *);
< 
< BZ2_bzBuffToBuffCompress(
---
>                                           unsigned BZ2_bzBuffToBuffCompress(
17,21c17
<                                           unsigned *,
<                                           unsigned *,
<                                           unsigned *);
< 
< BZ2_bzBuffToBuffCompress(
---
>                                           unsigned *(
18,22c18
<                                           unsigned *,
<                                           unsigned *);
< 
< BZ2_bzBuffToBuffCompress(
<     char *, unsigned *, char *, unsigned ,
---
>                                           char *, unsigned *, char *, unsigned ,
(99.8 %, 512 bytes)
16,19c16
<                                           int , int );
< 
< BZ2_bzBuffToBuffCompress(
<     char *, unsigned *, char *, unsigned ,
---
>                                           int , int , char *, unsigned ,
16,19c16
<                                           int , int );
< 
< BZ2_bzBuffToBuffCompress(
<     char *, unsigned *, char *, unsigned ,
---
>                                           int , int )char *, unsigned ,
18,19c18
< BZ2_bzBuffToBuffCompress(
<     char *, unsigned *, char *, unsigned ,
---
> *, unsigned ,
18,19c18
< BZ2_bzBuffToBuffCompress(
<     char *, unsigned *, char *, unsigned ,
---
> BZ2_bzBuffToBuffCompress, unsigned ,
19c19
<     char *, unsigned *, char *, unsigned ,
---
>     unsigned ,
(99.8 %, 460 bytes)
16,17c16
<                                           int , int , char *, unsigned ,
<     int , int , int );
---
>                                           int , int , int );
16,17c16
<                                           int , int , char *, unsigned ,
<     int , int , int );
---
>                                           int , int , int );
(99.8 %, 425 bytes)
16,20c16
<                                           int , int , int );
< 
< BZ2_bzBuffToBuffDecompress();
< 
< BZ2_bzCompressInit(bz_stream , FILE *, BZFILE ***, BZFILE );
---
>                                           int , int (bz_stream , FILE *, BZFILE ***, BZFILE );
16,20c16
<                                           int , int , int );
< 
< BZ2_bzBuffToBuffDecompress();
< 
< BZ2_bzCompressInit(bz_stream , FILE *, BZFILE ***, BZFILE );
---
>                                           int , int , bz_stream , FILE *, BZFILE ***, BZFILE );
16,20c16
<                                           int , int , int );
< 
< BZ2_bzBuffToBuffDecompress();
< 
< BZ2_bzCompressInit(bz_stream , FILE *, BZFILE ***, BZFILE );
---
>                                           int , int , int , FILE *, BZFILE ***, BZFILE );
(99.8 %, 367 bytes)
16c16
<                                           int , int , bz_stream , FILE *, BZFILE ***, BZFILE );
---
>                                           int , int , , BZFILE );
16c16
<                                           int , int , bz_stream , FILE *, BZFILE ***, BZFILE );
---
>                                           int , int , bz_stream BZFILE );
16c16
<                                           int , int , bz_stream , FILE *, BZFILE ***, BZFILE );
---
>                                           int , int , bz_stream , );
16c16
<                                           int , int , bz_stream , FILE *, BZFILE ***, BZFILE );
---
>                                           int , int , bz_stream , FILE ;
16,18c16
<                                           int , int , bz_stream , FILE *, BZFILE ***, BZFILE );
< 
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
---
>                                           int , int , bz_stream , FILE *BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
16,18c16
<                                           int , int , bz_stream , FILE *, BZFILE ***, BZFILE );
< 
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
---
>                                           int , int , bz_stream , FILE *, (char *small, int verbosity) {
16,18c16
<                                           int , int , bz_stream , FILE *, BZFILE ***, BZFILE );
< 
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
---
>                                           int , int , bz_stream , FILE *, BZFILE char *small, int verbosity) {
16,18c16
<                                           int , int , bz_stream , FILE *, BZFILE ***, BZFILE );
< 
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
---
>                                           int , int , bz_stream , FILE *, BZFILE **small, int verbosity) {
16,18c16
<                                           int , int , bz_stream , FILE *, BZFILE ***, BZFILE );
< 
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
---
>                                           int , int , bz_stream , FILE *, BZFILE **small, int verbosity) {
16,18c16
<                                           int , int , bz_stream , FILE *, BZFILE ***, BZFILE );
< 
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
---
>                                           int , int , bz_stream , FILE *, BZFILE ***, int verbosity) {
(99.8 %, 345 bytes)
16,18c16
<                                           int , int , bz_stream BZFILE );
< 
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
---
>                                           int , int , bz_stream int verbosity) {
16,18c16
<                                           int , int , bz_stream BZFILE );
< 
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
---
>                                           int , int , bz_stream BZFILE verbosity) {
16,18c16
<                                           int , int , bz_stream BZFILE );
< 
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
---
>                                           int , int , bz_stream BZFILE )) {
18c18
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
---
> {
18,19c18
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
<   int bzerr ;
---
> BZ2_bzBuffToBuffDecompressint bzerr ;
18,19c18
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
<   int bzerr ;
---
> BZ2_bzBuffToBuffDecompress(bzerr ;
18,19c18
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
<   int bzerr ;
---
> BZ2_bzBuffToBuffDecompress(char ;
18,20c18
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
> BZ2_bzBuffToBuffDecompress(char *(    bzerr == BZ_STREAM_END)
18,20c18
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
> BZ2_bzBuffToBuffDecompress(char *smallbzerr == BZ_STREAM_END)
18,20c18
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
> BZ2_bzBuffToBuffDecompress(char *small, == BZ_STREAM_END)
18,20c18
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
> BZ2_bzBuffToBuffDecompress(char *small, int BZ_STREAM_END)
18,20c18
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
> BZ2_bzBuffToBuffDecompress(char *small, int verbosity)
18,21c18
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
<     ;
---
> BZ2_bzBuffToBuffDecompress(char *small, int verbosity) ;
19,21d18
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
<     ;
19,23c19
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>   int 
\ No newline at end of file
19,23c19
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>   int bzerr 
\ No newline at end of file
20,23c20
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>    
\ No newline at end of file
20,23c20
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>    (    
\ No newline at end of file
20,23c20
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>    (    bzerr 
\ No newline at end of file
20,23c20
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>    (    bzerr == 
\ No newline at end of file
20,23c20
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>    (    bzerr == BZ_STREAM_END
\ No newline at end of file
21,23c21
<     ;
<   }
< 
---
>     
\ No newline at end of file
22,23c22
<   }
< 
---
>   
\ No newline at end of file
===< pass_clex :: rm-toks-8 >===
3,5d2
< #define BZ_OK 2
<   
< #define BZ_STREAM_END 4
3,6c3
< #define BZ_OK 2
<   
< #define BZ_STREAM_END 4
< typedef bz_stream;
---
> #bz_stream;
3,6c3
< #define BZ_OK 2
<   
< #define BZ_STREAM_END 4
< typedef bz_stream;
---
> #define ;
3,8c3
< #define BZ_OK 2
<   
< #define BZ_STREAM_END 4
< typedef bz_stream;
< 
< #include <stdio.h>
---
> #define BZ_OK #include <stdio.h>
5,8c5
< #define BZ_STREAM_END 4
< typedef bz_stream;
< 
< #include <stdio.h>
---
> include <stdio.h>
5,8c5
< #define BZ_STREAM_END 4
< typedef bz_stream;
< 
< #include <stdio.h>
---
> #<stdio.h>
5,8c5
< #define BZ_STREAM_END 4
< typedef bz_stream;
< 
< #include <stdio.h>
---
> #define stdio.h>
5,8c5
< #define BZ_STREAM_END 4
< typedef bz_stream;
< 
< #include <stdio.h>
---
> #define BZ_STREAM_END .h>
6,8c6
< typedef bz_stream;
< 
< #include <stdio.h>
---
> h>
6,8c6
< typedef bz_stream;
< 
< #include <stdio.h>
---
> typedef >
6,10c6
< typedef bz_stream;
< 
< #include <stdio.h>
< 
< #define BZ_API 
---
> typedef bz_stream#define BZ_API 
8,10c8
< #include <stdio.h>
< 
< #define BZ_API 
---
> define BZ_API 
8,10c8
< #include <stdio.h>
< 
< #define BZ_API 
---
> #BZ_API 
8,13c8
< #include <stdio.h>
< 
< #define BZ_API 
<   
< 
< typedef BZFILE;
---
> #include typedef BZFILE;
8,13c8
< #include <stdio.h>
< 
< #define BZ_API 
<   
< 
< typedef BZFILE;
---
> #include <BZFILE;
8,13c8
< #include <stdio.h>
< 
< #define BZ_API 
<   
< 
< typedef BZFILE;
---
> #include <stdio;
8,15c8
< #include <stdio.h>
< 
< #define BZ_API 
<   
< 
< typedef BZFILE;
< 
< void BZ2_bzReadGetUnused(int ***,
---
> #include <stdio.void BZ2_bzReadGetUnused(int ***,
8,15c8
< #include <stdio.h>
< 
< #define BZ_API 
<   
< 
< typedef BZFILE;
< 
< void BZ2_bzReadGetUnused(int ***,
---
> #include <stdio.hBZ2_bzReadGetUnused(int ***,
10,15c10
< #define BZ_API 
<   
< 
< typedef BZFILE;
< 
< void BZ2_bzReadGetUnused(int ***,
---
> (int ***,
10,15c10
< #define BZ_API 
<   
< 
< typedef BZFILE;
< 
< void BZ2_bzReadGetUnused(int ***,
---
> #int ***,
10,15c10
< #define BZ_API 
<   
< 
< typedef BZFILE;
< 
< void BZ2_bzReadGetUnused(int ***,
---
> #define ***,
13,15c13
< typedef BZFILE;
< 
< void BZ2_bzReadGetUnused(int ***,
---
> **,
13,15c13
< typedef BZFILE;
< 
< void BZ2_bzReadGetUnused(int ***,
---
> typedef *,
13,15c13
< typedef BZFILE;
< 
< void BZ2_bzReadGetUnused(int ***,
---
> typedef BZFILE,
15,16c15
< void BZ2_bzReadGetUnused(int ***,
<                                           int , int , bz_stream BZFILE );
---
> int , int , bz_stream BZFILE );
15,16c15
< void BZ2_bzReadGetUnused(int ***,
<                                           int , int , bz_stream BZFILE );
---
> void , int , bz_stream BZFILE );
15,16c15
< void BZ2_bzReadGetUnused(int ***,
<                                           int , int , bz_stream BZFILE );
---
> void BZ2_bzReadGetUnusedint , bz_stream BZFILE );
15,16c15
< void BZ2_bzReadGetUnused(int ***,
<                                           int , int , bz_stream BZFILE );
---
> void BZ2_bzReadGetUnused(, bz_stream BZFILE );
15,16c15
< void BZ2_bzReadGetUnused(int ***,
<                                           int , int , bz_stream BZFILE );
---
> void BZ2_bzReadGetUnused(int bz_stream BZFILE );
15,16c15
< void BZ2_bzReadGetUnused(int ***,
<                                           int , int , bz_stream BZFILE );
---
> void BZ2_bzReadGetUnused(int *BZFILE );
15,16c15
< void BZ2_bzReadGetUnused(int ***,
<                                           int , int , bz_stream BZFILE );
---
> void BZ2_bzReadGetUnused(int **);
(99.9 %, 277 bytes)
15,17c15
< void BZ2_bzReadGetUnused(int *BZFILE );
< 
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
---
> void BZ2_bzReadGetUnused(int *, int verbosity) {
15,17c15
< void BZ2_bzReadGetUnused(int *BZFILE );
< 
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
---
> void BZ2_bzReadGetUnused(int *BZFILE int verbosity) {
15,17c15
< void BZ2_bzReadGetUnused(int *BZFILE );
< 
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
---
> void BZ2_bzReadGetUnused(int *BZFILE )verbosity) {
17c17
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
---
> ) {
17c17
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
---
> BZ2_bzBuffToBuffDecompress{
17,18c17
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
<   int bzerr ;
---
> BZ2_bzBuffToBuffDecompress(int bzerr ;
17,18c17
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
<   int bzerr ;
---
> BZ2_bzBuffToBuffDecompress(char bzerr ;
17,18c17
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
<   int bzerr ;
---
> BZ2_bzBuffToBuffDecompress(char *;
17,19c17
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
> BZ2_bzBuffToBuffDecompress(char *small(    bzerr == BZ_STREAM_END)
17,19c17
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
> BZ2_bzBuffToBuffDecompress(char *small, bzerr == BZ_STREAM_END)
17,19c17
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
> BZ2_bzBuffToBuffDecompress(char *small, int == BZ_STREAM_END)
17,19c17
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
> BZ2_bzBuffToBuffDecompress(char *small, int verbosityBZ_STREAM_END)
17,19c17
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
> BZ2_bzBuffToBuffDecompress(char *small, int verbosity) )
18,20c18
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
<     ;
---
>   ;
18,21c18
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
---
>   int }
18,22c18
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>   int bzerr 
\ No newline at end of file
19,22c19
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>    
\ No newline at end of file
19,22c19
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>    (    
\ No newline at end of file
19,22c19
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>    (    bzerr 
\ No newline at end of file
19,22c19
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>    (    bzerr == 
\ No newline at end of file
19,22c19
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>    (    bzerr == BZ_STREAM_END
\ No newline at end of file
20,22c20
<     ;
<   }
< 
---
>     
\ No newline at end of file
21,22c21
<   }
< 
---
>   
\ No newline at end of file
===< pass_clex :: rm-toks-4 >===
3,4d2
< #define BZ_OK 2
<   
3,4d2
< #define BZ_OK 2
<   
(99.9 %, 258 bytes)
3d2
< #define BZ_STREAM_END 4
3,4c3
< #define BZ_STREAM_END 4
< typedef bz_stream;
---
> #bz_stream;
3,4c3
< #define BZ_STREAM_END 4
< typedef bz_stream;
---
> #define ;
3,6c3
< #define BZ_STREAM_END 4
< typedef bz_stream;
< 
< #include <stdio.h>
---
> #define BZ_STREAM_END #include <stdio.h>
4,6c4
< typedef bz_stream;
< 
< #include <stdio.h>
---
> include <stdio.h>
4,6c4
< typedef bz_stream;
< 
< #include <stdio.h>
---
> typedef <stdio.h>
4,6c4
< typedef bz_stream;
< 
< #include <stdio.h>
---
> typedef bz_streamstdio.h>
6c6
< #include <stdio.h>
---
> .h>
6c6
< #include <stdio.h>
---
> #h>
6c6
< #include <stdio.h>
---
> #include >
6,8c6
< #include <stdio.h>
< 
< #define BZ_API 
---
> #include <#define BZ_API 
6,8c6
< #include <stdio.h>
< 
< #define BZ_API 
---
> #include <stdiodefine BZ_API 
6,8c6
< #include <stdio.h>
< 
< #define BZ_API 
---
> #include <stdio.BZ_API 
6,11c6
< #include <stdio.h>
< 
< #define BZ_API 
<   
< 
< typedef BZFILE;
---
> #include <stdio.htypedef BZFILE;
8,11c8
< #define BZ_API 
<   
< 
< typedef BZFILE;
---
> BZFILE;
8,11c8
< #define BZ_API 
<   
< 
< typedef BZFILE;
---
> #;
8,13c8
< #define BZ_API 
<   
< 
< typedef BZFILE;
< 
< void BZ2_bzReadGetUnused(int *BZFILE );
---
> #define void BZ2_bzReadGetUnused(int *BZFILE );
(99.9 %, 230 bytes)
8,10c8
< BZFILE;
< 
< void BZ2_bzReadGetUnused(int *BZFILE );
---
> (int *BZFILE );
8,10c8
< BZFILE;
< 
< void BZ2_bzReadGetUnused(int *BZFILE );
---
> BZFILEint *BZFILE );
10c10
< void BZ2_bzReadGetUnused(int *BZFILE );
---
> *BZFILE );
10c10
< void BZ2_bzReadGetUnused(int *BZFILE );
---
> void BZFILE );
10c10
< void BZ2_bzReadGetUnused(int *BZFILE );
---
> void BZ2_bzReadGetUnused);
10c10
< void BZ2_bzReadGetUnused(int *BZFILE );
---
> void BZ2_bzReadGetUnused(;
10,12c10
< void BZ2_bzReadGetUnused(int *BZFILE );
< 
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
---
> void BZ2_bzReadGetUnused(int BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
10,12c10
< void BZ2_bzReadGetUnused(int *BZFILE );
< 
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
---
> void BZ2_bzReadGetUnused(int *(char *small, int verbosity) {
10,12c10
< void BZ2_bzReadGetUnused(int *BZFILE );
< 
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
---
> void BZ2_bzReadGetUnused(int *BZFILE char *small, int verbosity) {
10,12c10
< void BZ2_bzReadGetUnused(int *BZFILE );
< 
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
---
> void BZ2_bzReadGetUnused(int *BZFILE )*small, int verbosity) {
12c12
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
---
> small, int verbosity) {
12c12
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
---
> BZ2_bzBuffToBuffDecompress, int verbosity) {
12c12
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
---
> BZ2_bzBuffToBuffDecompress(int verbosity) {
12c12
< BZ2_bzBuffToBuffDecompress(char *small, int verbosity) {
---
> BZ2_bzBuffToBuffDecompress(char verbosity) {
(99.9 %, 217 bytes)
12,13c12
< BZ2_bzBuffToBuffDecompress(int verbosity) {
<   int bzerr ;
---
> BZ2_bzBuffToBuffDecompress(int bzerr ;
12,13c12
< BZ2_bzBuffToBuffDecompress(int verbosity) {
<   int bzerr ;
---
> BZ2_bzBuffToBuffDecompress(int bzerr ;
12,13c12
< BZ2_bzBuffToBuffDecompress(int verbosity) {
<   int bzerr ;
---
> BZ2_bzBuffToBuffDecompress(int verbosity;
12,14c12
< BZ2_bzBuffToBuffDecompress(int verbosity) {
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
> BZ2_bzBuffToBuffDecompress(int verbosity) (    bzerr == BZ_STREAM_END)
13,14c13
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
>   bzerr == BZ_STREAM_END)
13,14c13
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
>   int == BZ_STREAM_END)
13,14c13
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
>   int bzerr BZ_STREAM_END)
14c14
<    (    bzerr == BZ_STREAM_END)
---
>    )
14,15c14
<    (    bzerr == BZ_STREAM_END)
<     ;
---
>    (    ;
14,16c14
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
---
>    (    bzerr }
14,17c14
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>    (    bzerr == 
\ No newline at end of file
14,17c14
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>    (    bzerr == BZ_STREAM_END
\ No newline at end of file
15,17c15
<     ;
<   }
< 
---
>     
\ No newline at end of file
16,17c16
<   }
< 
---
>   
\ No newline at end of file
===< pass_clex :: rm-toks-2 >===
3c3
< #define BZ_STREAM_END 4
---
> BZ_STREAM_END 4
3c3
< #define BZ_STREAM_END 4
---
> #4
3,4c3
< #define BZ_STREAM_END 4
< typedef bz_stream;
---
> #define typedef bz_stream;
3,4c3
< #define BZ_STREAM_END 4
< typedef bz_stream;
---
> #define BZ_STREAM_END bz_stream;
4c4
< typedef bz_stream;
---
> ;
4,6c4
< typedef bz_stream;
< 
< #include <stdio.h>
---
> typedef #include <stdio.h>
4,6c4
< typedef bz_stream;
< 
< #include <stdio.h>
---
> typedef bz_streaminclude <stdio.h>
6c6
< #include <stdio.h>
---
> <stdio.h>
6c6
< #include <stdio.h>
---
> #stdio.h>
6c6
< #include <stdio.h>
---
> #include .h>
6c6
< #include <stdio.h>
---
> #include <h>
6c6
< #include <stdio.h>
---
> #include <stdio>
(99.9 %, 200 bytes)
4,6c4
< ;
< 
< #include <stdio.h>
---
> include <stdio.h>
6c6
< #include <stdio.h>
---
> <stdio.h>
6c6
< #include <stdio.h>
---
> #stdio.h>
6c6
< #include <stdio.h>
---
> #include .h>
6c6
< #include <stdio.h>
---
> #include <h>
6c6
< #include <stdio.h>
---
> #include <stdio>
6,8c6
< #include <stdio.h>
< 
< BZFILE;
---
> #include <stdio.BZFILE;
6,8c6
< #include <stdio.h>
< 
< BZFILE;
---
> #include <stdio.h;
8,9d7
< BZFILE;
< 
8,10c8
< BZFILE;
< 
< void BZ2_bzReadGetUnused(int *BZFILE );
---
> BZFILEBZ2_bzReadGetUnused(int *BZFILE );
(99.9 %, 191 bytes)
8c8
< void BZ2_bzReadGetUnused(int *BZFILE );
---
> (int *BZFILE );
8c8
< void BZ2_bzReadGetUnused(int *BZFILE );
---
> void int *BZFILE );
8c8
< void BZ2_bzReadGetUnused(int *BZFILE );
---
> void BZ2_bzReadGetUnused*BZFILE );
8c8
< void BZ2_bzReadGetUnused(int *BZFILE );
---
> void BZ2_bzReadGetUnused(BZFILE );
8c8
< void BZ2_bzReadGetUnused(int *BZFILE );
---
> void BZ2_bzReadGetUnused(int );
8c8
< void BZ2_bzReadGetUnused(int *BZFILE );
---
> void BZ2_bzReadGetUnused(int *;
(99.9 %, 183 bytes)
8,10c8
< void BZ2_bzReadGetUnused(int );
< 
< BZ2_bzBuffToBuffDecompress(int verbosity) {
---
> void BZ2_bzReadGetUnused(int BZ2_bzBuffToBuffDecompress(int verbosity) {
8,10c8
< void BZ2_bzReadGetUnused(int );
< 
< BZ2_bzBuffToBuffDecompress(int verbosity) {
---
> void BZ2_bzReadGetUnused(int )(int verbosity) {
10c10
< BZ2_bzBuffToBuffDecompress(int verbosity) {
---
> int verbosity) {
10c10
< BZ2_bzBuffToBuffDecompress(int verbosity) {
---
> BZ2_bzBuffToBuffDecompressverbosity) {
10c10
< BZ2_bzBuffToBuffDecompress(int verbosity) {
---
> BZ2_bzBuffToBuffDecompress() {
10c10
< BZ2_bzBuffToBuffDecompress(int verbosity) {
---
> BZ2_bzBuffToBuffDecompress(int {
10,11c10
< BZ2_bzBuffToBuffDecompress(int verbosity) {
<   int bzerr ;
---
> BZ2_bzBuffToBuffDecompress(int verbosityint bzerr ;
10,11c10
< BZ2_bzBuffToBuffDecompress(int verbosity) {
<   int bzerr ;
---
> BZ2_bzBuffToBuffDecompress(int verbosity) bzerr ;
11c11
<   int bzerr ;
---
>   ;
11,12c11
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
>   int (    bzerr == BZ_STREAM_END)
11,12c11
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
>   int bzerr bzerr == BZ_STREAM_END)
12c12
<    (    bzerr == BZ_STREAM_END)
---
>    == BZ_STREAM_END)
(99.9 %, 170 bytes)
10,11c10
< BZ2_bzBuffToBuffDecompress() {
<   int bzerr ;
---
> BZ2_bzBuffToBuffDecompress(int bzerr ;
10,11c10
< BZ2_bzBuffToBuffDecompress() {
<   int bzerr ;
---
> BZ2_bzBuffToBuffDecompress() bzerr ;
11c11
<   int bzerr ;
---
>   ;
11,12c11
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
>   int (    bzerr == BZ_STREAM_END)
11,12c11
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
>   int bzerr bzerr == BZ_STREAM_END)
12c12
<    (    bzerr == BZ_STREAM_END)
---
>    == BZ_STREAM_END)
12c12
<    (    bzerr == BZ_STREAM_END)
---
>    (    BZ_STREAM_END)
12c12
<    (    bzerr == BZ_STREAM_END)
---
>    (    bzerr )
12,13c12
<    (    bzerr == BZ_STREAM_END)
<     ;
---
>    (    bzerr == ;
12,14c12
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
---
>    (    bzerr == BZ_STREAM_END}
13,15c13
<     ;
<   }
< 
---
>     
\ No newline at end of file
14,15c14
<   }
< 
---
>   
\ No newline at end of file
===< pass_clex :: rm-tok-pattern-4 >===
3c3
< #define BZ_STREAM_END 4
---
> define BZ_STREAM_END 4
3c3
< #define BZ_STREAM_END 4
---
>  BZ_STREAM_END 4
3c3
< #define BZ_STREAM_END 4
---
> define  4
3c3
< #define BZ_STREAM_END 4
---
>   4
3c3
< #define BZ_STREAM_END 4
---
> define BZ_STREAM_END 
3c3
< #define BZ_STREAM_END 4
---
>  BZ_STREAM_END 
3c3
< #define BZ_STREAM_END 4
---
> define  
3c3
< #define BZ_STREAM_END 4
---
>   
3c3
< #define BZ_STREAM_END 4
---
> # BZ_STREAM_END 4
3c3
< #define BZ_STREAM_END 4
---
> #  4
3c3
< #define BZ_STREAM_END 4
---
> # BZ_STREAM_END 
3c3
< #define BZ_STREAM_END 4
---
> #  
3,4c3,4
< #define BZ_STREAM_END 4
< ;
---
> # BZ_STREAM_END 4
> 
(99.9 %, 162 bytes)
3,4c3
<  BZ_STREAM_END 
< ;
---
>   
6c5,6
< #include <stdio.h>
---
> 
> # <stdio.h>
3c3
<  BZ_STREAM_END 
---
>   
6c6
< #include <stdio.h>
---
>  <stdio.h>
3,4c3
<  BZ_STREAM_END 
< ;
---
>   
6c5,6
< #include <stdio.h>
---
> 
>  <stdio.h>
4c4
< ;
---
> 
4d3
< ;
6c5,6
< #include <stdio.h>
---
> 
> include <stdio.h>
4d3
< ;
6c5,6
< #include <stdio.h>
---
> 
> # <stdio.h>
4d3
< ;
6c5,6
< #include <stdio.h>
---
> 
>  <stdio.h>
4d3
< ;
6c5,6
< #include <stdio.h>
---
> 
> #include stdio.h>
4d3
< ;
6c5,6
< #include <stdio.h>
---
> 
> include stdio.h>
4d3
< ;
6c5,6
< #include <stdio.h>
---
> 
> # stdio.h>
4d3
< ;
6c5,6
< #include <stdio.h>
---
> 
>  stdio.h>
6c6
< #include <stdio.h>
---
> include <stdio.h>
6c6
< #include <stdio.h>
---
>  <stdio.h>
6c6
< #include <stdio.h>
---
> include stdio.h>
6c6
< #include <stdio.h>
---
>  stdio.h>
6c6
< #include <stdio.h>
---
> include <.h>
6c6
< #include <stdio.h>
---
>  <.h>
6c6
< #include <stdio.h>
---
> include .h>
6c6
< #include <stdio.h>
---
>  .h>
6c6
< #include <stdio.h>
---
> # <stdio.h>
6c6
< #include <stdio.h>
---
> # stdio.h>
6c6
< #include <stdio.h>
---
> # <.h>
6c6
< #include <stdio.h>
---
> # .h>
6c6
< #include <stdio.h>
---
> # <stdioh>
6c6
< #include <stdio.h>
---
> # stdioh>
6c6
< #include <stdio.h>
---
> # <h>
6c6
< #include <stdio.h>
---
> # h>
6c6
< #include <stdio.h>
---
> #include stdio.h>
6c6
< #include <stdio.h>
---
> #include .h>
6c6
< #include <stdio.h>
---
> #include stdioh>
6c6
< #include <stdio.h>
---
> #include h>
6c6
< #include <stdio.h>
---
> #include stdio.>
6c6
< #include <stdio.h>
---
> #include .>
6c6
< #include <stdio.h>
---
> #include stdio>
6c6
< #include <stdio.h>
---
> #include >
6c6
< #include <stdio.h>
---
> #include <.h>
6c6
< #include <stdio.h>
---
> #include <h>
6c6
< #include <stdio.h>
---
> #include <.>
6c6
< #include <stdio.h>
---
> #include <>
6c6
< #include <stdio.h>
---
> #include <.h
6c6
< #include <stdio.h>
---
> #include <h
6c6
< #include <stdio.h>
---
> #include <.
6c6
< #include <stdio.h>
---
> #include <
6c6
< #include <stdio.h>
---
> #include <stdioh>
6c6
< #include <stdio.h>
---
> #include <stdio>
6c6
< #include <stdio.h>
---
> #include <stdioh
6c6
< #include <stdio.h>
---
> #include <stdio
6c6
< #include <stdio.h>
---
> #include <stdioh>
8c8
< void BZ2_bzReadGetUnused(int );
---
>  BZ2_bzReadGetUnused(int );
6c6
< #include <stdio.h>
---
> #include <stdio>
8c8
< void BZ2_bzReadGetUnused(int );
---
>  BZ2_bzReadGetUnused(int );
6c6
< #include <stdio.h>
---
> #include <stdioh
8c8
< void BZ2_bzReadGetUnused(int );
---
>  BZ2_bzReadGetUnused(int );
6c6
< #include <stdio.h>
---
> #include <stdio
8c8
< void BZ2_bzReadGetUnused(int );
---
>  BZ2_bzReadGetUnused(int );
6c6
< #include <stdio.h>
---
> #include <stdio.>
6c6
< #include <stdio.h>
---
> #include <stdio.
6c6
< #include <stdio.h>
---
> #include <stdio.>
8c8
< void BZ2_bzReadGetUnused(int );
---
>  BZ2_bzReadGetUnused(int );
6c6
< #include <stdio.h>
---
> #include <stdio.
8c8
< void BZ2_bzReadGetUnused(int );
---
>  BZ2_bzReadGetUnused(int );
6c6
< #include <stdio.h>
---
> #include <stdio.>
8c8
< void BZ2_bzReadGetUnused(int );
---
> void (int );
6c6
< #include <stdio.h>
---
> #include <stdio.
8c8
< void BZ2_bzReadGetUnused(int );
---
> void (int );
6c6
< #include <stdio.h>
---
> #include <stdio.>
8c8
< void BZ2_bzReadGetUnused(int );
---
>  (int );
6c6
< #include <stdio.h>
---
> #include <stdio.
8c8
< void BZ2_bzReadGetUnused(int );
---
>  (int );
6c6
< #include <stdio.h>
---
> #include <stdio.h
6c6
< #include <stdio.h>
---
> #include <stdio.h
8c8
< void BZ2_bzReadGetUnused(int );
---
>  BZ2_bzReadGetUnused(int );
6c6
< #include <stdio.h>
---
> #include <stdio.h
8c8
< void BZ2_bzReadGetUnused(int );
---
> void (int );
6c6
< #include <stdio.h>
---
> #include <stdio.h
8c8
< void BZ2_bzReadGetUnused(int );
---
>  (int );
6c6
< #include <stdio.h>
---
> #include <stdio.h
8c8
< void BZ2_bzReadGetUnused(int );
---
> void BZ2_bzReadGetUnusedint );
6c6
< #include <stdio.h>
---
> #include <stdio.h
8c8
< void BZ2_bzReadGetUnused(int );
---
>  BZ2_bzReadGetUnusedint );
6c6
< #include <stdio.h>
---
> #include <stdio.h
8c8
< void BZ2_bzReadGetUnused(int );
---
> void int );
6c6
< #include <stdio.h>
---
> #include <stdio.h
8c8
< void BZ2_bzReadGetUnused(int );
---
>  int );
8c8
< void BZ2_bzReadGetUnused(int );
---
>  BZ2_bzReadGetUnused(int );
8c8
< void BZ2_bzReadGetUnused(int );
---
>  (int );
8c8
< void BZ2_bzReadGetUnused(int );
---
>  BZ2_bzReadGetUnusedint );
8c8
< void BZ2_bzReadGetUnused(int );
---
>  int );
8c8
< void BZ2_bzReadGetUnused(int );
---
>  BZ2_bzReadGetUnused( );
(99.9 %, 158 bytes)
8c8
<  BZ2_bzReadGetUnused(int );
---
>  (int );
8c8
<  BZ2_bzReadGetUnused(int );
---
>  int );
8c8
<  BZ2_bzReadGetUnused(int );
---
>  ( );
8c8
<  BZ2_bzReadGetUnused(int );
---
>   );
8c8
<  BZ2_bzReadGetUnused(int );
---
>  (int ;
8c8
<  BZ2_bzReadGetUnused(int );
---
>  int ;
8c8
<  BZ2_bzReadGetUnused(int );
---
>  ( ;
8c8
<  BZ2_bzReadGetUnused(int );
---
>   ;
(99.9 %, 137 bytes)
8c8
<  int ;
---
>   
10c10
< BZ2_bzBuffToBuffDecompress() {
---
> BZ2_bzBuffToBuffDecompress) {
8c8
<  int ;
---
>   ;
10c10
< BZ2_bzBuffToBuffDecompress() {
---
> ) {
8c8
<  int ;
---
>   
10c10
< BZ2_bzBuffToBuffDecompress() {
---
> ) {
8c8
<  int ;
---
>  int 
8c8
<  int ;
---
>  int 
10c10
< BZ2_bzBuffToBuffDecompress() {
---
> () {
8c8
<  int ;
---
>  int 
10c10
< BZ2_bzBuffToBuffDecompress() {
---
> BZ2_bzBuffToBuffDecompress) {
8c8
<  int ;
---
>  int 
10c10
< BZ2_bzBuffToBuffDecompress() {
---
> ) {
8c8
<  int ;
---
>  int 
10c10
< BZ2_bzBuffToBuffDecompress() {
---
> BZ2_bzBuffToBuffDecompress( {
8c8
<  int ;
---
>  int 
10c10
< BZ2_bzBuffToBuffDecompress() {
---
> ( {
8c8
<  int ;
---
>  int 
10c10
< BZ2_bzBuffToBuffDecompress() {
---
> BZ2_bzBuffToBuffDecompress {
(99.9 %, 136 bytes)
10c10
< BZ2_bzBuffToBuffDecompress() {
---
> () {
10c10
< BZ2_bzBuffToBuffDecompress() {
---
> ) {
10c10
< BZ2_bzBuffToBuffDecompress() {
---
> ( {
10c10
< BZ2_bzBuffToBuffDecompress() {
---
>  {
10c10
< BZ2_bzBuffToBuffDecompress() {
---
> () 
10c10
< BZ2_bzBuffToBuffDecompress() {
---
> ) 
10c10
< BZ2_bzBuffToBuffDecompress() {
---
> ( 
10c10
< BZ2_bzBuffToBuffDecompress() {
---
>  
10c10
< BZ2_bzBuffToBuffDecompress() {
---
> BZ2_bzBuffToBuffDecompress) {
10c10
< BZ2_bzBuffToBuffDecompress() {
---
> BZ2_bzBuffToBuffDecompress {
10c10
< BZ2_bzBuffToBuffDecompress() {
---
> BZ2_bzBuffToBuffDecompress) 
10c10
< BZ2_bzBuffToBuffDecompress() {
---
> BZ2_bzBuffToBuffDecompress 
10,11c10,11
< BZ2_bzBuffToBuffDecompress() {
<   int bzerr ;
---
> BZ2_bzBuffToBuffDecompress) {
>    bzerr ;
10,11c10,11
< BZ2_bzBuffToBuffDecompress() {
<   int bzerr ;
---
> BZ2_bzBuffToBuffDecompress {
>    bzerr ;
10,11c10,11
< BZ2_bzBuffToBuffDecompress() {
<   int bzerr ;
---
> BZ2_bzBuffToBuffDecompress) 
>    bzerr ;
10,11c10,11
< BZ2_bzBuffToBuffDecompress() {
<   int bzerr ;
---
> BZ2_bzBuffToBuffDecompress 
>    bzerr ;
10c10
< BZ2_bzBuffToBuffDecompress() {
---
> BZ2_bzBuffToBuffDecompress( {
10c10
< BZ2_bzBuffToBuffDecompress() {
---
> BZ2_bzBuffToBuffDecompress( 
10,11c10,11
< BZ2_bzBuffToBuffDecompress() {
<   int bzerr ;
---
> BZ2_bzBuffToBuffDecompress( {
>    bzerr ;
10,11c10,11
< BZ2_bzBuffToBuffDecompress() {
<   int bzerr ;
---
> BZ2_bzBuffToBuffDecompress( 
>    bzerr ;
10,11c10,11
< BZ2_bzBuffToBuffDecompress() {
<   int bzerr ;
---
> BZ2_bzBuffToBuffDecompress( {
>   int  ;
10,11c10,11
< BZ2_bzBuffToBuffDecompress() {
<   int bzerr ;
---
> BZ2_bzBuffToBuffDecompress( 
>   int  ;
10,11c10,11
< BZ2_bzBuffToBuffDecompress() {
<   int bzerr ;
---
> BZ2_bzBuffToBuffDecompress( {
>     ;
10,11c10,11
< BZ2_bzBuffToBuffDecompress() {
<   int bzerr ;
---
> BZ2_bzBuffToBuffDecompress( 
>     ;
10c10
< BZ2_bzBuffToBuffDecompress() {
---
> BZ2_bzBuffToBuffDecompress() 
10,11c10,11
< BZ2_bzBuffToBuffDecompress() {
<   int bzerr ;
---
> BZ2_bzBuffToBuffDecompress() 
>    bzerr ;
10,11c10,11
< BZ2_bzBuffToBuffDecompress() {
<   int bzerr ;
---
> BZ2_bzBuffToBuffDecompress() 
>   int  ;
10,11c10,11
< BZ2_bzBuffToBuffDecompress() {
<   int bzerr ;
---
> BZ2_bzBuffToBuffDecompress() 
>     ;
10,11c10,11
< BZ2_bzBuffToBuffDecompress() {
<   int bzerr ;
---
> BZ2_bzBuffToBuffDecompress() 
>   int bzerr 
10,11c10,11
< BZ2_bzBuffToBuffDecompress() {
<   int bzerr ;
---
> BZ2_bzBuffToBuffDecompress() 
>    bzerr 
10,11c10,11
< BZ2_bzBuffToBuffDecompress() {
<   int bzerr ;
---
> BZ2_bzBuffToBuffDecompress() 
>   int  
10,11c10,11
< BZ2_bzBuffToBuffDecompress() {
<   int bzerr ;
---
> BZ2_bzBuffToBuffDecompress() 
>     
11c11
<   int bzerr ;
---
>    bzerr ;
11c11
<   int bzerr ;
---
>     ;
11c11
<   int bzerr ;
---
>    bzerr 
11c11
<   int bzerr ;
---
>     
11,12c11,12
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
>    bzerr ;
>        bzerr == BZ_STREAM_END)
11,12c11,12
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
>     ;
>        bzerr == BZ_STREAM_END)
11,12c11,12
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
>    bzerr 
>        bzerr == BZ_STREAM_END)
11,12c11,12
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
>     
>        bzerr == BZ_STREAM_END)
11c11
<   int bzerr ;
---
>   int  ;
11c11
<   int bzerr ;
---
>   int  
11,12c11,12
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
>   int  ;
>        bzerr == BZ_STREAM_END)
11,12c11,12
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
>   int  
>        bzerr == BZ_STREAM_END)
11,12c11,12
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
>   int  ;
>    (     == BZ_STREAM_END)
11,12c11,12
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
>   int  
>    (     == BZ_STREAM_END)
11,12c11,12
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
>   int  ;
>         == BZ_STREAM_END)
11,12c11,12
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
>   int  
>         == BZ_STREAM_END)
11c11
<   int bzerr ;
---
>   int bzerr 
11,12c11,12
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
>   int bzerr 
>        bzerr == BZ_STREAM_END)
11,12c11,12
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
>   int bzerr 
>    (     == BZ_STREAM_END)
11,12c11,12
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
>   int bzerr 
>         == BZ_STREAM_END)
11,12c11,12
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
>   int bzerr 
>    (    bzerr  BZ_STREAM_END)
11,12c11,12
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
>   int bzerr 
>        bzerr  BZ_STREAM_END)
11,12c11,12
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
>   int bzerr 
>    (      BZ_STREAM_END)
11,12c11,12
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
>   int bzerr 
>          BZ_STREAM_END)
12c12
<    (    bzerr == BZ_STREAM_END)
---
>        bzerr == BZ_STREAM_END)
12c12
<    (    bzerr == BZ_STREAM_END)
---
>         == BZ_STREAM_END)
12c12
<    (    bzerr == BZ_STREAM_END)
---
>        bzerr  BZ_STREAM_END)
12c12
<    (    bzerr == BZ_STREAM_END)
---
>          BZ_STREAM_END)
12c12
<    (    bzerr == BZ_STREAM_END)
---
>        bzerr == )
12c12
<    (    bzerr == BZ_STREAM_END)
---
>         == )
12c12
<    (    bzerr == BZ_STREAM_END)
---
>        bzerr  )
12c12
<    (    bzerr == BZ_STREAM_END)
---
>          )
12c12
<    (    bzerr == BZ_STREAM_END)
---
>    (     == BZ_STREAM_END)
12c12
<    (    bzerr == BZ_STREAM_END)
---
>    (      BZ_STREAM_END)
12c12
<    (    bzerr == BZ_STREAM_END)
---
>    (     == )
12c12
<    (    bzerr == BZ_STREAM_END)
---
>    (      )
12c12
<    (    bzerr == BZ_STREAM_END)
---
>    (     == BZ_STREAM_END
12c12
<    (    bzerr == BZ_STREAM_END)
---
>    (      BZ_STREAM_END
12c12
<    (    bzerr == BZ_STREAM_END)
---
>    (     == 
12c12
<    (    bzerr == BZ_STREAM_END)
---
>    (      
12c12
<    (    bzerr == BZ_STREAM_END)
---
>    (    bzerr  BZ_STREAM_END)
12c12
<    (    bzerr == BZ_STREAM_END)
---
>    (    bzerr  )
12c12
<    (    bzerr == BZ_STREAM_END)
---
>    (    bzerr  BZ_STREAM_END
12c12
<    (    bzerr == BZ_STREAM_END)
---
>    (    bzerr  
12,13c12,13
<    (    bzerr == BZ_STREAM_END)
<     ;
---
>    (    bzerr  BZ_STREAM_END)
>     
12,13c12,13
<    (    bzerr == BZ_STREAM_END)
<     ;
---
>    (    bzerr  )
>     
12,13c12,13
<    (    bzerr == BZ_STREAM_END)
<     ;
---
>    (    bzerr  BZ_STREAM_END
>     
12,13c12,13
<    (    bzerr == BZ_STREAM_END)
<     ;
---
>    (    bzerr  
>     
12c12
<    (    bzerr == BZ_STREAM_END)
---
>    (    bzerr == )
12c12
<    (    bzerr == BZ_STREAM_END)
---
>    (    bzerr == 
12,13c12,13
<    (    bzerr == BZ_STREAM_END)
<     ;
---
>    (    bzerr == )
>     
12,13c12,13
<    (    bzerr == BZ_STREAM_END)
<     ;
---
>    (    bzerr == 
>     
12c12
<    (    bzerr == BZ_STREAM_END)
---
>    (    bzerr == )
14c14
<   }
---
>   
12c12
<    (    bzerr == BZ_STREAM_END)
---
>    (    bzerr == 
14c14
<   }
---
>   
12,14c12,14
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
---
>    (    bzerr == )
>     
>   
12,14c12,14
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
---
>    (    bzerr == 
>     
>   
12c12
<    (    bzerr == BZ_STREAM_END)
---
>    (    bzerr == BZ_STREAM_END
12,13c12,13
<    (    bzerr == BZ_STREAM_END)
<     ;
---
>    (    bzerr == BZ_STREAM_END
>     
12c12
<    (    bzerr == BZ_STREAM_END)
---
>    (    bzerr == BZ_STREAM_END
14c14
<   }
---
>   
12,14c12,14
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
---
>    (    bzerr == BZ_STREAM_END
>     
>   
12c12
<    (    bzerr == BZ_STREAM_END)
---
>    (    bzerr == BZ_STREAM_END
12,13c12,13
<    (    bzerr == BZ_STREAM_END)
<     ;
---
>    (    bzerr == BZ_STREAM_END
>     
12c12
<    (    bzerr == BZ_STREAM_END)
---
>    (    bzerr == BZ_STREAM_END
14c14
<   }
---
>   
12,14c12,14
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
---
>    (    bzerr == BZ_STREAM_END
>     
>   
13c13
<     ;
---
>     
13,14c13,14
<     ;
<   }
---
>     
>   
13c13
<     ;
---
>     
13,14c13,14
<     ;
<   }
---
>     
>   
13c13
<     ;
---
>     
13,14c13,14
<     ;
<   }
---
>     
>   
13c13
<     ;
---
>     
13,14c13,14
<     ;
<   }
---
>     
>   
14c14
<   }
---
>   
14c14
<   }
---
>   
14c14
<   }
---
>   
14c14
<   }
---
>   
14c14
<   }
---
>   
14c14
<   }
---
>   
14c14
<   }
---
>   
14c14
<   }
---
>   
Termination check: size was 2423; now 136
===< pass_balanced :: curly2 >===
1c1
< 
---
>  
10,14c10
< BZ2_bzBuffToBuffDecompress() {
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
---
> BZ2_bzBuffToBuffDecompress() ;
15a12
>  
\ No newline at end of file
===< pass_balanced :: curly3 >===
===< pass_clang :: remove-enum-member-value >===
===< pass_clang :: remove-unused-var >===
===< pass_clang :: simplify-comma-expr >===
===< pass_clang :: instantiate-template-type-param-to-int >===
===< pass_clang :: remove-trivial-base-template >===
===< pass_clang :: remove-base-class >===
===< pass_clang :: remove-ctor-initializer >===
===< pass_clang :: remove-unused-outer-class >===
===< pass_clang :: remove-pointer-pairs >===
===< pass_clang :: remove-array >===
===< pass_clang :: replace-dependent-name >===
===< pass_special :: c >===
===< pass_ints :: b >===
===< pass_ints :: d >===
===< pass_clex :: rm-toks-14 >===
3,11c3
<  BZ_STREAM_END 
< ;
< 
< #include <stdio.h>
< 
<  int 
< 
< BZ2_bzBuffToBuffDecompress() {
<   int bzerr ;
---
>  int bzerr ;
4,11c4
< ;
< 
< #include <stdio.h>
< 
<  int 
< 
< BZ2_bzBuffToBuffDecompress() {
<   int bzerr ;
---
> bzerr ;
6,11c6
< #include <stdio.h>
< 
<  int 
< 
< BZ2_bzBuffToBuffDecompress() {
<   int bzerr ;
---
> ;
6,12c6
< #include <stdio.h>
< 
<  int 
< 
< BZ2_bzBuffToBuffDecompress() {
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
> #(    bzerr == BZ_STREAM_END)
6,12c6
< #include <stdio.h>
< 
<  int 
< 
< BZ2_bzBuffToBuffDecompress() {
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
> #include bzerr == BZ_STREAM_END)
6,12c6
< #include <stdio.h>
< 
<  int 
< 
< BZ2_bzBuffToBuffDecompress() {
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
> #include <== BZ_STREAM_END)
6,12c6
< #include <stdio.h>
< 
<  int 
< 
< BZ2_bzBuffToBuffDecompress() {
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
> #include <stdioBZ_STREAM_END)
6,12c6
< #include <stdio.h>
< 
<  int 
< 
< BZ2_bzBuffToBuffDecompress() {
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
> #include <stdio.)
6,13c6
< #include <stdio.h>
< 
<  int 
< 
< BZ2_bzBuffToBuffDecompress() {
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
<     ;
---
> #include <stdio.h;
8,14c8
<  int 
< 
< BZ2_bzBuffToBuffDecompress() {
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
---
>  }
10,15d9
< BZ2_bzBuffToBuffDecompress() {
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
10,15c10
< BZ2_bzBuffToBuffDecompress() {
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
> BZ2_bzBuffToBuffDecompress
\ No newline at end of file
10,15c10
< BZ2_bzBuffToBuffDecompress() {
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
> BZ2_bzBuffToBuffDecompress(
\ No newline at end of file
10,15c10
< BZ2_bzBuffToBuffDecompress() {
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
> BZ2_bzBuffToBuffDecompress() 
\ No newline at end of file
11,15c11
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>   
\ No newline at end of file
11,15c11
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>   int 
\ No newline at end of file
11,15c11
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>   int bzerr 
\ No newline at end of file
12,15c12
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>    
\ No newline at end of file
12,15c12
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>    (    
\ No newline at end of file
12,15c12
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>    (    bzerr 
\ No newline at end of file
12,15c12
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>    (    bzerr == 
\ No newline at end of file
12,15c12
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>    (    bzerr == BZ_STREAM_END
\ No newline at end of file
13,15c13
<     ;
<   }
< 
---
>     
\ No newline at end of file
14,15c14
<   }
< 
---
>   
\ No newline at end of file
===< pass_clex :: rm-toks-10 >===
3,10c3
<  BZ_STREAM_END 
< ;
< 
< #include <stdio.h>
< 
<  int 
< 
< BZ2_bzBuffToBuffDecompress() {
---
>  BZ2_bzBuffToBuffDecompress() {
4,10c4
< ;
< 
< #include <stdio.h>
< 
<  int 
< 
< BZ2_bzBuffToBuffDecompress() {
---
> () {
6,10c6
< #include <stdio.h>
< 
<  int 
< 
< BZ2_bzBuffToBuffDecompress() {
---
> ) {
6,10c6
< #include <stdio.h>
< 
<  int 
< 
< BZ2_bzBuffToBuffDecompress() {
---
> #{
6,11c6
< #include <stdio.h>
< 
<  int 
< 
< BZ2_bzBuffToBuffDecompress() {
<   int bzerr ;
---
> #include int bzerr ;
6,11c6
< #include <stdio.h>
< 
<  int 
< 
< BZ2_bzBuffToBuffDecompress() {
<   int bzerr ;
---
> #include <bzerr ;
6,11c6
< #include <stdio.h>
< 
<  int 
< 
< BZ2_bzBuffToBuffDecompress() {
<   int bzerr ;
---
> #include <stdio;
6,12c6
< #include <stdio.h>
< 
<  int 
< 
< BZ2_bzBuffToBuffDecompress() {
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
> #include <stdio.(    bzerr == BZ_STREAM_END)
(100.0 %, 80 bytes)
4,6c4
< () {
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
> )
4,7c4
< () {
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
<     ;
---
> (;
4,8c4
< () {
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
---
> () }
5,9c5
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>   
\ No newline at end of file
5,9c5
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>   int 
\ No newline at end of file
5,9c5
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>   int bzerr 
\ No newline at end of file
6,9c6
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>    
\ No newline at end of file
6,9c6
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>    (    
\ No newline at end of file
6,9c6
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>    (    bzerr 
\ No newline at end of file
6,9c6
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>    (    bzerr == 
\ No newline at end of file
6,9c6
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>    (    bzerr == BZ_STREAM_END
\ No newline at end of file
7,9c7
<     ;
<   }
< 
---
>     
\ No newline at end of file
8,9c8
<   }
< 
---
>   
\ No newline at end of file
===< pass_clex :: rm-toks-3 >===
3,4c3
<  BZ_STREAM_END 
< () {
---
>  {
4,5c4
< () {
<   int bzerr ;
---
> int bzerr ;
4,5c4
< () {
<   int bzerr ;
---
> (bzerr ;
4,5c4
< () {
<   int bzerr ;
---
> () ;
5,6c5
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
>   (    bzerr == BZ_STREAM_END)
5,6c5
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
>   int bzerr == BZ_STREAM_END)
5,6c5
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
>   int bzerr == BZ_STREAM_END)
6c6
<    (    bzerr == BZ_STREAM_END)
---
>    BZ_STREAM_END)
6c6
<    (    bzerr == BZ_STREAM_END)
---
>    (    )
6,7c6
<    (    bzerr == BZ_STREAM_END)
<     ;
---
>    (    bzerr ;
6,8c6
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
---
>    (    bzerr == }
6,9c6
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>    (    bzerr == BZ_STREAM_END
\ No newline at end of file
7,9c7
<     ;
<   }
< 
---
>     
\ No newline at end of file
8,9c8
<   }
< 
---
>   
\ No newline at end of file
Termination check: size was 136; now 80
===< pass_ternary :: b >===
===< pass_balanced :: curly3 >===
===< pass_clang :: remove-namespace >===
===< pass_clang :: aggregate-to-scalar >===
===< pass_clang :: param-to-global >===
===< pass_clang :: remove-nested-function >===
===< pass_clang :: callexpr-to-value >===
===< pass_clang :: remove-unused-function >===
===< pass_clang :: reduce-array-dim >===
===< pass_clang :: move-function-body >===
===< pass_clang :: reduce-class-template-param >===
===< pass_clang :: remove-trivial-base-template >===
===< pass_clang :: remove-unresolved-base >===
===< pass_peep :: a >===
1c1
< 
---
>  
4c4
< () {
---
>  {
9a10
>  
\ No newline at end of file
1c1
< 
---
>  
4c4
< () {
---
>  {
9a10
>  
\ No newline at end of file
1c1
< 
---
>  
4c4
< () {
---
>  {
9a10
>  
\ No newline at end of file
1c1
< 
---
>  
4c4
< () {
---
>  {
9a10
>  
\ No newline at end of file
1c1
< 
---
>  
4c4
< () {
---
>  {
9a10
>  
\ No newline at end of file
1c1
< 
---
>  
4c4
< () {
---
>  {
9a10
>  
\ No newline at end of file
1c1
< 
---
>  
4c4
< () {
---
>  {
9a10
>  
\ No newline at end of file
1c1
< 
---
>  
4c4
< () {
---
>  {
9a10
>  
\ No newline at end of file
1c1
< 
---
>  
4c4
< () {
---
>  {
9a10
>  
\ No newline at end of file
1c1
< 
---
>  
4c4
< () {
---
>  {
9a10
>  
\ No newline at end of file
1c1
< 
---
>  
4c4
< () {
---
>  {
9a10
>  
\ No newline at end of file
1c1
< 
---
>  
4c4
< () {
---
>  {
9a10
>  
\ No newline at end of file
1c1
< 
---
>  
4c4
< () {
---
>  {
9a10
>  
\ No newline at end of file
1c1
< 
---
>  
4c4
< () {
---
>  {
9a10
>  
\ No newline at end of file
1c1
< 
---
>  
4c4
< () {
---
>  {
9a10
>  
\ No newline at end of file
1c1
< 
---
>  
4c4
< () {
---
>  {
9a10
>  
\ No newline at end of file
1c1
< 
---
>  
4c4
< () {
---
>  {
9a10
>  
\ No newline at end of file
1c1
< 
---
>  
4c4
< () {
---
>  {
9a10
>  
\ No newline at end of file
1c1
< 
---
>  
4c4
< () {
---
>  {
9a10
>  
\ No newline at end of file
1c1
< 
---
>  
4c4
< () {
---
>  {
9a10
>  
\ No newline at end of file
1c1
< 
---
>  
4,8c4
< () {
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
---
> () 
9a6
>  
\ No newline at end of file
1c1
< 
---
>  
5c5
<   int bzerr ;
---
>   int bzerr 
9a10
>  
\ No newline at end of file
1c1
< 
---
>  
6c6
<    (    bzerr == BZ_STREAM_END)
---
>    
9a10
>  
\ No newline at end of file
1c1
< 
---
>  
7c7
<     ;
---
>     
9a10
>  
\ No newline at end of file
===< pass_ints :: b >===
===< pass_clex :: rm-toks-12 >===
3,7c3
<  BZ_STREAM_END 
< () {
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
<     ;
---
>  ;
4,8c4
< () {
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
---
> }
4,9c4
< () {
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
> (
\ No newline at end of file
4,9c4
< () {
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
> () 
\ No newline at end of file
5,9c5
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>   
\ No newline at end of file
5,9c5
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>   int 
\ No newline at end of file
5,9c5
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>   int bzerr 
\ No newline at end of file
6,9c6
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>    
\ No newline at end of file
6,9c6
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>    (    
\ No newline at end of file
6,9c6
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>    (    bzerr 
\ No newline at end of file
6,9c6
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>    (    bzerr == 
\ No newline at end of file
6,9c6
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
< 
---
>    (    bzerr == BZ_STREAM_END
\ No newline at end of file
7,9c7
<     ;
<   }
< 
---
>     
\ No newline at end of file
8,9c8
<   }
< 
---
>   
\ No newline at end of file
===< pass_clex :: rm-toks-2 >===
3,4c3
<  BZ_STREAM_END 
< () {
---
>  ) {
4c4
< () {
---
> {
4,5c4
< () {
<   int bzerr ;
---
> (int bzerr ;
4,5c4
< () {
<   int bzerr ;
---
> () bzerr ;
5c5
<   int bzerr ;
---
>   ;
5,6c5
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
>   int (    bzerr == BZ_STREAM_END)
5,6c5
<   int bzerr ;
<    (    bzerr == BZ_STREAM_END)
---
>   int bzerr bzerr == BZ_STREAM_END)
6c6
<    (    bzerr == BZ_STREAM_END)
---
>    == BZ_STREAM_END)
6c6
<    (    bzerr == BZ_STREAM_END)
---
>    (    BZ_STREAM_END)
6c6
<    (    bzerr == BZ_STREAM_END)
---
>    (    bzerr )
6,7c6
<    (    bzerr == BZ_STREAM_END)
<     ;
---
>    (    bzerr == ;
6,8c6
<    (    bzerr == BZ_STREAM_END)
<     ;
<   }
---
>    (    bzerr == BZ_STREAM_END}
7,9c7
<     ;
<   }
< 
---
>     
\ No newline at end of file
8,9c8
<   }
< 
---
>   
\ No newline at end of file
Termination check: size was 80; now 80
===< pass_clang :: rename-fun >===
3c3
<  BZ_STREAM_END 
---
>  fn1 
6c6
<    (    bzerr == BZ_STREAM_END)
---
>    (    bzerr == fn1)
(100.0 %, 60 bytes)
===< pass_clang :: rename-param >===
===< pass_clang :: rename-var >===
5,6c5,6
<   int bzerr ;
<    (    bzerr == fn1)
---
>   int a ;
>    (    a == fn1)
(100.0 %, 52 bytes)
===< pass_clang :: rename-class >===
===< pass_clang :: rename-cxx-method >===
===< pass_clang :: combine-global-var >===
===< pass_clang :: combine-local-var >===
===< pass_clang :: simplify-struct-union-decl >===
===< pass_clang :: move-global-var >===
===< pass_clang :: unify-function-decl >===
===< pass_clex :: delete-string >===
===< pass_indent :: final >===
2,9c2,6
< 
<  fn1 
< () {
<   int a ;
<    (    a == fn1)
<     ;
<   }
< 
---
> fn1 (  )
> {
>   int a;
>   ( a == fn1 );
> }
3c3
<  fn1 
---
> fn1
5,6c5,6
<   int a ;
<    (    a == fn1)
---
>     int a ;
>     (    a == fn1)
8c8
<   }
---
> }
(100.0 %, 39 bytes)
4,5c4,5
<   int a;
<   ( a == fn1 );
---
>     int a;
>     ( a == fn1 );
2,3c2
< fn1 (  )
< {
---
> fn1() {
5c4
<   ( a == fn1 );
---
>   (a == fn1);
(100.0 %, 43 bytes)
2,5c2,4
< fn1 (  )
< {
<     int a;
<     ( a == fn1 );
---
> fn1() {
>   int a;
>   (a == fn1);
(100.0 %, 34 bytes)
===================== done ====================

pass statistics:
  method pass_balanced :: angles worked 0 times and failed 1 times
  method pass_balanced :: angles-only worked 0 times and failed 7 times
  method pass_balanced :: curly worked 69 times and failed 52 times
  method pass_balanced :: curly-only worked 0 times and failed 0 times
  method pass_balanced :: curly2 worked 26 times and failed 13 times
  method pass_balanced :: curly3 worked 6 times and failed 0 times
  method pass_balanced :: parens worked 135 times and failed 167 times
  method pass_balanced :: parens-only worked 0 times and failed 0 times
  method pass_blank :: 0 worked 0 times and failed 1 times
  method pass_clang :: aggregate-to-scalar worked 0 times and failed 0 times
  method pass_clang :: callexpr-to-value worked 1 times and failed 0 times
  method pass_clang :: class-template-to-class worked 0 times and failed 0 times
  method pass_clang :: combine-global-var worked 0 times and failed 0 times
  method pass_clang :: combine-local-var worked 0 times and failed 0 times
  method pass_clang :: copy-propagation worked 0 times and failed 0 times
  method pass_clang :: empty-struct-to-int worked 0 times and failed 0 times
  method pass_clang :: instantiate-template-param worked 0 times and failed 0 times
  method pass_clang :: instantiate-template-type-param-to-int worked 0 times and failed 0 times
  method pass_clang :: lift-assignment-expr worked 0 times and failed 0 times
  method pass_clang :: local-to-global worked 0 times and failed 0 times
  method pass_clang :: move-function-body worked 0 times and failed 0 times
  method pass_clang :: move-global-var worked 0 times and failed 0 times
  method pass_clang :: param-to-global worked 0 times and failed 0 times
  method pass_clang :: param-to-local worked 9 times and failed 0 times
  method pass_clang :: reduce-array-dim worked 0 times and failed 0 times
  method pass_clang :: reduce-array-size worked 0 times and failed 0 times
  method pass_clang :: reduce-class-template-param worked 0 times and failed 0 times
  method pass_clang :: reduce-pointer-level worked 0 times and failed 0 times
  method pass_clang :: remove-addr-taken worked 0 times and failed 0 times
  method pass_clang :: remove-array worked 0 times and failed 0 times
  method pass_clang :: remove-base-class worked 0 times and failed 0 times
  method pass_clang :: remove-ctor-initializer worked 0 times and failed 0 times
  method pass_clang :: remove-enum-member-value worked 0 times and failed 0 times
  method pass_clang :: remove-namespace worked 0 times and failed 0 times
  method pass_clang :: remove-nested-function worked 0 times and failed 0 times
  method pass_clang :: remove-pointer worked 0 times and failed 0 times
  method pass_clang :: remove-pointer-pairs worked 0 times and failed 0 times
  method pass_clang :: remove-trivial-base-template worked 0 times and failed 0 times
  method pass_clang :: remove-unresolved-base worked 0 times and failed 0 times
  method pass_clang :: remove-unused-enum-member worked 0 times and failed 0 times
  method pass_clang :: remove-unused-field worked 0 times and failed 0 times
  method pass_clang :: remove-unused-function worked 5 times and failed 1 times
  method pass_clang :: remove-unused-outer-class worked 0 times and failed 0 times
  method pass_clang :: remove-unused-var worked 33 times and failed 0 times
  method pass_clang :: rename-class worked 0 times and failed 0 times
  method pass_clang :: rename-cxx-method worked 0 times and failed 0 times
  method pass_clang :: rename-fun worked 1 times and failed 0 times
  method pass_clang :: rename-param worked 0 times and failed 0 times
  method pass_clang :: rename-var worked 1 times and failed 0 times
  method pass_clang :: replace-array-index-var worked 0 times and failed 0 times
  method pass_clang :: replace-callexpr worked 0 times and failed 0 times
  method pass_clang :: replace-class-with-base-template-spec worked 0 times and failed 0 times
  method pass_clang :: replace-dependent-name worked 0 times and failed 0 times
  method pass_clang :: replace-dependent-typedef worked 0 times and failed 0 times
  method pass_clang :: replace-derived-class worked 0 times and failed 0 times
  method pass_clang :: replace-one-level-typedef-type worked 0 times and failed 0 times
  method pass_clang :: replace-simple-typedef worked 0 times and failed 0 times
  method pass_clang :: replace-undefined-function worked 0 times and failed 0 times
  method pass_clang :: return-void worked 0 times and failed 0 times
  method pass_clang :: simple-inliner worked 0 times and failed 0 times
  method pass_clang :: simplify-callexpr worked 0 times and failed 0 times
  method pass_clang :: simplify-comma-expr worked 0 times and failed 0 times
  method pass_clang :: simplify-dependent-typedef worked 0 times and failed 0 times
  method pass_clang :: simplify-if worked 0 times and failed 0 times
  method pass_clang :: simplify-nested-class worked 0 times and failed 0 times
  method pass_clang :: simplify-recursive-template-instantiation worked 0 times and failed 0 times
  method pass_clang :: simplify-struct worked 0 times and failed 0 times
  method pass_clang :: simplify-struct-union-decl worked 0 times and failed 0 times
  method pass_clang :: template-arg-to-int worked 0 times and failed 0 times
  method pass_clang :: template-non-type-arg-to-int worked 0 times and failed 0 times
  method pass_clang :: unify-function-decl worked 0 times and failed 0 times
  method pass_clang :: union-to-struct worked 0 times and failed 0 times
  method pass_clang_binsrch :: remove-unused-function worked 2 times and failed 1 times
  method pass_clang_binsrch :: remove-unused-function worked 2 times and failed 1 times
  method pass_clang_binsrch :: replace-function-def-with-decl worked 4 times and failed 8 times
  method pass_clang_binsrch :: replace-function-def-with-decl worked 4 times and failed 8 times
  method pass_clex :: delete-string worked 0 times and failed 0 times
  method pass_clex :: rm-tok-pattern-4 worked 30 times and failed 2808 times
  method pass_clex :: rm-toks-1 worked 136 times and failed 384 times
  method pass_clex :: rm-toks-10 worked 10 times and failed 616 times
  method pass_clex :: rm-toks-11 worked 0 times and failed 0 times
  method pass_clex :: rm-toks-12 worked 0 times and failed 14 times
  method pass_clex :: rm-toks-13 worked 0 times and failed 0 times
  method pass_clex :: rm-toks-14 worked 12 times and failed 183 times
  method pass_clex :: rm-toks-15 worked 0 times and failed 0 times
  method pass_clex :: rm-toks-16 worked 0 times and failed 0 times
  method pass_clex :: rm-toks-2 worked 4 times and failed 46 times
  method pass_clex :: rm-toks-3 worked 0 times and failed 14 times
  method pass_clex :: rm-toks-4 worked 3 times and failed 40 times
  method pass_clex :: rm-toks-5 worked 0 times and failed 0 times
  method pass_clex :: rm-toks-6 worked 20 times and failed 728 times
  method pass_clex :: rm-toks-7 worked 2 times and failed 520 times
  method pass_clex :: rm-toks-8 worked 43 times and failed 1431 times
  method pass_clex :: rm-toks-9 worked 187 times and failed 1774 times
  method pass_comments :: 0 worked 1 times and failed 0 times
  method pass_include_includes :: 0 worked 0 times and failed 0 times
  method pass_includes :: 0 worked 20 times and failed 6 times
  method pass_indent :: final worked 3 times and failed 0 times
  method pass_indent :: regular worked 1 times and failed 0 times
  method pass_ints :: a worked 0 times and failed 0 times
  method pass_ints :: b worked 0 times and failed 0 times
  method pass_ints :: c worked 0 times and failed 0 times
  method pass_ints :: d worked 0 times and failed 0 times
  method pass_ints :: e worked 0 times and failed 0 times
  method pass_peep :: a worked 0 times and failed 239 times
  method pass_special :: a worked 0 times and failed 0 times
  method pass_special :: b worked 0 times and failed 0 times
  method pass_special :: c worked 0 times and failed 0 times
  method pass_ternary :: b worked 0 times and failed 0 times
  method pass_ternary :: c worked 0 times and failed 0 times
  method pass_unifdef :: 0 worked 13 times and failed 3 times


          '/home/ukoc/mangroveL/sut-bzip2/runs/run-1454546464.141/bzip2.c' reduced to:

fn1() {
  int a;
  (a == fn1);
}
1170.00user 256.73system 16:10.98elapsed 146%CPU (0avgtext+0avgdata 60148maxresident)k
312inputs+4202376outputs (4major+99412292minor)pagefaults 0swaps
