===< 8905 >===
running 2 interestingness tests in parallel
===< pass_includes :: 0 >===
113d112
< #include <stdio.h>
116d115
< #   include <windows.h>
329d328
< #include <stdlib.h>
332d331
< #include <stdio.h>
(0.0 %, 204912 bytes)
328d327
< #include <stdlib.h>
331d330
< #include <stdio.h>
332d331
< #include <ctype.h>
(0.0 %, 204893 bytes)
331d330
< #include <ctype.h>
332d331
< #include <string.h>
5053d5052
< #include <stdio.h>
(0.0 %, 204874 bytes)
331d330
< #include <string.h>
5052d5051
< #include <stdio.h>
(0.0 %, 204854 bytes)
5051d5050
< #include <stdio.h>
5052d5051
< #include <stdlib.h>
5053d5052
< #include <string.h>
(0.0 %, 204835 bytes)
5051d5050
< #include <stdlib.h>
5052d5051
< #include <string.h>
5053d5052
< #include <signal.h>
5054d5053
< #include <math.h>
(0.1 %, 204815 bytes)
5051d5050
< #include <string.h>
5052d5051
< #include <signal.h>
5053d5052
< #include <math.h>
(0.1 %, 204795 bytes)
5051d5050
< #include <signal.h>
5052d5051
< #include <math.h>
5053d5052
< #include <errno.h>
5054d5053
< #include <ctype.h>
(0.1 %, 204777 bytes)
5052d5051
< #include <errno.h>
5053d5052
< #include <ctype.h>
5066d5065
< #   include <fcntl.h>
5067d5066
< #   include <sys/types.h>
(0.1 %, 204758 bytes)
5065d5064
< #   include <fcntl.h>
5066d5065
< #   include <sys/types.h>
5067d5066
< #   include <utime.h>
5068d5067
< #   include <unistd.h>
(0.1 %, 204732 bytes)
5066d5065
< #   include <utime.h>
5067d5066
< #   include <unistd.h>
5068d5067
< #   include <sys/stat.h>
(0.1 %, 204709 bytes)
5067d5066
< #   include <sys/stat.h>
5068d5067
< #   include <sys/times.h>
5091d5090
< #     include <io.h>
(0.1 %, 204684 bytes)
5067d5066
< #   include <sys/times.h>
5090d5089
< #     include <io.h>
5091d5090
< #     include <fcntl.h>
(0.1 %, 204658 bytes)
5089d5088
< #     include <io.h>
5090d5089
< #     include <fcntl.h>
(0.1 %, 204637 bytes)
5089d5088
< #     include <fcntl.h>
5104d5103
< #     include <io.h>
5105d5104
< #     include <fcntl.h>
(0.2 %, 204613 bytes)
5103d5102
< #     include <io.h>
5104d5103
< #     include <fcntl.h>
(0.2 %, 204592 bytes)
5103d5102
< #     include <fcntl.h>
5117d5116
< #   include <io.h>
(0.2 %, 204568 bytes)
5116d5115
< #   include <io.h>
5117d5116
< #   include <fcntl.h>
5118d5117
< #   include <sys\stat.h>
(0.2 %, 204549 bytes)
5116d5115
< #   include <fcntl.h>
5117d5116
< #   include <sys\stat.h>
(0.2 %, 204527 bytes)
5116d5115
< #   include <sys\stat.h>
(0.2 %, 204502 bytes)
===< pass_unifdef :: 0 >===
357d356
< #if BZ_DEBUG
364,366d362
< #else
< #define AssertD(cond,msg) /* */
< #endif
357,364d356
< #if BZ_DEBUG
< #define AssertD(cond,msg) \
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
< #else
366d357
< #endif
(0.2 %, 204444 bytes)
120d119
< #   ifdef BZ_EXPORT
123,127d121
< #   else
<    /* import windows dll dynamically */
< #   define BZ_API(func) (WINAPI * func)
< #   define BZ_EXTERN
< #   endif
120,123d119
< #   ifdef BZ_EXPORT
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #   else
127d122
< #   endif
(0.3 %, 204304 bytes)
108,111d107
< #ifndef BZ_IMPORT
< #define BZ_EXPORT
< #endif
< 
108d107
< #ifndef BZ_IMPORT
110d108
< #endif
(0.3 %, 204260 bytes)
5101,5102d5100
< #if BZ_LCCWIN32
< 
5122,5123d5119
< 
< #endif /* BZ_LCCWIN32 */
5101,5125d5100
< #if BZ_LCCWIN32
< 
< #   define NORETURN       /**/
< #   define PATH_SEP       '\\'
< #   define MY_LSTAT       _stat
< #   define MY_STAT        _stat
< #   define MY_S_ISREG(x)  ((x) & _S_IFREG)
< #   define MY_S_ISDIR(x)  ((x) & _S_IFDIR)
< 
< #   define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
< 
< #   define APPEND_FILESPEC(root, name)                \
<       root = snocString ((root), (name))
< 
< #   define SET_BINARY_MODE(fd)                        \
<       do {                                            \
<          int retVal = setmode ( fileno ( fd ),        \
<                                 O_BINARY );           \
<          ERROR_IF_MINUS_ONE ( retVal );               \
<       } while ( 0 )
< 
< #endif /* BZ_LCCWIN32 */
< 
< 
160,226d159
< #ifndef BZ_NO_STDIO
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< #endif
< 
264,300d196
< #ifndef BZ_NO_STDIO
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< #endif
< 
320,322d215
< #ifndef BZ_NO_STDIO
< #endif
< 
343,365d235
< #ifndef BZ_NO_STDIO
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) BZ2_bz__AssertH__fail ( errcode ); }
< #define AssertD(cond,msg) \
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
< #define VPrintf1(zf,za1) \
<    fprintf(stderr,zf,za1)
< #define VPrintf2(zf,za1,za2) \
<    fprintf(stderr,zf,za1,za2)
< #define VPrintf3(zf,za1,za2,za3) \
<    fprintf(stderr,zf,za1,za2,za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
<    fprintf(stderr,zf,za1,za2,za3,za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
< #else
376d245
< #endif
771d639
< #ifdef BZ_NO_STDIO
775d642
< #endif
3448,3494d3314
< #ifndef BZ_NO_STDIO
< void BZ2_bz__AssertH__fail ( int errcode )
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
< #endif
4265,4625d4084
< #ifndef BZ_NO_STDIO
< /*---------------------------------------------------*/
< /*--- File I/O stuff                              ---*/
< /*---------------------------------------------------*/
< 
< #define BZ_SETERR(eee)                    \
< {                                         \
<    if (bzerror != NULL) *bzerror = eee;   \
<    if (bzf != NULL) bzf->lastErr = eee;   \
< }
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< /*---------------------------------------------*/
< static Bool myfeof ( FILE* f )
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
< 
< 
< /*---------------------------------------------------*/
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
< 
< 
< /*---------------------------------------------------*/
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return 0; };
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
< 
<    return 0; /*not reached*/
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (bzf->lastErr != BZ_STREAM_END)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (unused == NULL || nUnused == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
< 
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
< #endif
< 
< 
4755,4943d4213
< 
< 
< #ifndef BZ_NO_STDIO
< /*---------------------------------------------------*/
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   /* no use when bzdopen */
<                  int fd,             /* no use when bzdopen */
<                  const char *mode,
<                  int open_mode)      /* bzopen: 0, bzdopen:1 */
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   /* binary mode */
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
< #ifdef BZ_STRICT_ANSI
<       fp = NULL;
< #else
<       fp = fdopen(fd,mode2);
< #endif
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       /* Guard against total chaos and anarchy -- JRS */
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
< 
< 
< /*---------------------------------------------------*/
< /*--
<    open file for read or write.
<       ex) bzopen("file","w9")
<       case path="" or NULL => use stdin or stdout.
< --*/
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(path,-1,mode,/*bzopen*/0);
< }
< 
< 
< /*---------------------------------------------------*/
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,/*bzdopen*/1);
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< {
<    /* do nothing now... */
<    return 0;
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) {return;}
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< /*--
<    return last error code 
< --*/
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
< #endif
160d159
< #ifndef BZ_NO_STDIO
225d223
< #endif
264d261
< #ifndef BZ_NO_STDIO
299d295
< #endif
320,322d315
< #ifndef BZ_NO_STDIO
< #endif
< 
343d335
< #ifndef BZ_NO_STDIO
365,376d356
< #else
< extern void bz_internal_error ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) bz_internal_error ( errcode ); }
< #define AssertD(cond,msg) /* */
< #define VPrintf0(zf) /* */
< #define VPrintf1(zf,za1) /* */
< #define VPrintf2(zf,za1,za2) /* */
< #define VPrintf3(zf,za1,za2,za3) /* */
< #define VPrintf4(zf,za1,za2,za3,za4) /* */
< #define VPrintf5(zf,za1,za2,za3,za4,za5) /* */
< #endif
771,776d750
< #ifdef BZ_NO_STDIO
< #ifndef NULL
< #define NULL 0
< #endif
< #endif
< 
3448d3421
< #ifndef BZ_NO_STDIO
3494d3466
< #endif
4265d4236
< #ifndef BZ_NO_STDIO
4623d4593
< #endif
4757d4726
< #ifndef BZ_NO_STDIO
4943d4911
< #endif
(0.7 %, 203528 bytes)
160d159
< #ifndef BZ_NO_STDIO
225d223
< #endif
264d261
< #ifndef BZ_NO_STDIO
299d295
< #endif
320,322d315
< #ifndef BZ_NO_STDIO
< #endif
< 
343d335
< #ifndef BZ_NO_STDIO
365,376d356
< #else
< extern void bz_internal_error ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) bz_internal_error ( errcode ); }
< #define AssertD(cond,msg) /* */
< #define VPrintf0(zf) /* */
< #define VPrintf1(zf,za1) /* */
< #define VPrintf2(zf,za1,za2) /* */
< #define VPrintf3(zf,za1,za2,za3) /* */
< #define VPrintf4(zf,za1,za2,za3,za4) /* */
< #define VPrintf5(zf,za1,za2,za3,za4,za5) /* */
< #endif
771,776d750
< #ifdef BZ_NO_STDIO
< #ifndef NULL
< #define NULL 0
< #endif
< #endif
< 
3448d3421
< #ifndef BZ_NO_STDIO
3494d3466
< #endif
4265d4236
< #ifndef BZ_NO_STDIO
4623d4593
< #endif
4757d4726
< #ifndef BZ_NO_STDIO
4943d4911
< #endif
4805d4804
< #ifdef BZ_STRICT_ANSI
4807,4809d4805
< #else
<       fp = fdopen(fd,mode2);
< #endif
4805,4807d4804
< #ifdef BZ_STRICT_ANSI
<       fp = NULL;
< #else
4809d4805
< #endif
(1.0 %, 202886 bytes)
4774,4776d4773
< #ifdef BZ_STRICT_ANSI
<       fp = NULL;
< #else
4778d4774
< #endif
5018d5017
< #if BZ_UNIX
5065d5063
< #endif /* BZ_UNIX */
5844d5841
< #  if BZ_UNIX
5852,5854d5848
< #  else
<    return fopen(name, mode);
< #  endif
5914d5907
< #if BZ_UNIX
5917d5909
< #endif
5922d5913
< #  if BZ_UNIX
5927d5917
< #  endif
5934d5923
< #  if BZ_UNIX
5951d5939
< #  endif
5959d5946
< #  if BZ_UNIX
5964,5971d5950
< #  else /* ! BZ_UNIX */
<    /* On non-unix (Win* platforms), wildcard characters are not allowed in 
<     * filenames.
<     */
<    for (; *name != '\0'; name++)
<       if (*name == '?' || *name == '*') return True;
<    return False;
< #  endif /* BZ_UNIX */
6530d6508
< #     if BZ_UNIX
6532d6509
< #     endif
6682d6658
< #  if BZ_UNIX
6686d6661
< #  endif
6827d6801
< #     if BZ_UNIX
6829d6802
< #     endif
(1.0 %, 202834 bytes)
5014,5062d5013
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC(root, name) \
<       root=snocString((root), (name))
< 
< #   define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
< 
< #   define SET_BINARY_MODE(fd) /**/
< 
< #   ifdef __GNUC__
< #      define NORETURN __attribute__ ((noreturn))
< #   else
< #      define NORETURN /**/
< #   endif
< 
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< #endif /* BZ_UNIX */
< 
5840,5848d5790
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
5850d5791
< #  endif
5910,5913d5850
< #if BZ_UNIX
< static 
< struct MY_STAT fileMetaInfo;
< #endif
5918,5923d5854
< #  if BZ_UNIX
<    IntNative retVal;
<    /* Note use of stat here, not lstat. */
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
5930,5947d5860
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    /* chown() will in many cases return with EPERM, which can
<       be safely ignored.
<    */
< #  endif
5955,5960d5867
< #  if BZ_UNIX
<    /* On unix, files can contain any characters and the file expansion
<     * is performed by the shell.
<     */
<    return False;
< #  else /* ! BZ_UNIX */
5967d5873
< #  endif /* BZ_UNIX */
6526,6528d6431
< #     if BZ_UNIX
<       "\n"
< #     endif
6678,6682d6580
< #  if BZ_UNIX
< #  ifndef __DJGPP__
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< #  endif
6823,6825d6720
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
61,302d60
< #ifndef _BZLIB_H
< #define _BZLIB_H
< 
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< /* Need a definitition for FILE */
< #include <stdio.h>
< 
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< #endif
< 
< 
< /*-- Core (low-level) library functions --*/
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< /*-- High(er) level library functions --*/
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< /*-- Utility functions --*/
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< #ifdef __cplusplus
< }
< #endif
< 
< #endif
< 
61d60
< #ifndef _BZLIB_H
299,300d297
< #endif
< 
311,747d310
< #ifndef _BZLIB_PRIVATE_H
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< /*-- General stuff. --*/
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #ifndef __GNUC__
< #define __inline__  /* */
< #endif 
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) BZ2_bz__AssertH__fail ( errcode ); }
< #define AssertD(cond,msg) \
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
< #define VPrintf1(zf,za1) \
<    fprintf(stderr,zf,za1)
< #define VPrintf2(zf,za1,za2) \
<    fprintf(stderr,zf,za1,za2)
< #define VPrintf3(zf,za1,za2,za3) \
<    fprintf(stderr,zf,za1,za2,za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
<    fprintf(stderr,zf,za1,za2,za3,za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
< 
< 
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
< 
< 
< /*-- Header bytes. --*/
< 
< #define BZ_HDR_B 0x42   /* 'B' */
< #define BZ_HDR_Z 0x5a   /* 'Z' */
< #define BZ_HDR_h 0x68   /* 'h' */
< #define BZ_HDR_0 0x30   /* '0' */
<   
< /*-- Constants for the back end. --*/
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< /*-- Stuff for randomising repetitive blocks. --*/
< 
< extern Int32 BZ2_rNums[512];
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
< 
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
< 
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
<    s->rNToGo--;
< 
< 
< 
< /*-- Stuff for doing CRCs. --*/
< 
< extern UInt32 BZ2_crc32Table[256];
< 
< #define BZ_INITIALISE_CRC(crcVar)              \
< {                                              \
<    crcVar = 0xffffffffL;                       \
< }
< 
< #define BZ_FINALISE_CRC(crcVar)                \
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
< 
< #define BZ_UPDATE_CRC(crcVar,cha)              \
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
< 
< 
< 
< /*-- States and modes for compression. --*/
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< /*-- Structure holding all the compression-side stuff. --*/
< 
< typedef
<    struct {
<       /* pointer back to the struct bz_stream */
<       bz_stream* strm;
< 
<       /* mode this stream is in, and whether inputting */
<       /* or outputting data */
<       Int32    mode;
<       Int32    state;
< 
<       /* remembers avail_in when flush/finish requested */
<       UInt32   avail_in_expect;
< 
<       /* for doing the block sorting */
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       /* aliases for arr1 and arr2 */
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       /* for deciding when to use the fallback sorting algorithm */
<       Int32    workFactor;
< 
<       /* run-length-encoding of the input */
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       /* input and output limits and current posns */
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       /* map of bytes used in block */
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       /* the buffer for bit stream creation */
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       /* block and combined CRCs */
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       /* misc administratium */
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       /* stuff for coding the MTF values */
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       /* second dimension: only 3 needed; 4 makes index calculations faster */
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< /*-- externs for compression. --*/
< 
< extern void 
< BZ2_blockSort ( EState* );
< 
< extern void 
< BZ2_compressBlock ( EState*, Bool );
< 
< extern void 
< BZ2_bsInitWrite ( EState* );
< 
< extern void 
< BZ2_hbAssignCodes ( Int32*, UChar*, Int32, Int32, Int32 );
< 
< extern void 
< BZ2_hbMakeCodeLengths ( UChar*, Int32*, Int32, Int32 );
< 
< 
< 
< /*-- states for decompression. --*/
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
< #define BZ_X_BLKHDR_2    15
< #define BZ_X_BLKHDR_3    16
< #define BZ_X_BLKHDR_4    17
< #define BZ_X_BLKHDR_5    18
< #define BZ_X_BLKHDR_6    19
< #define BZ_X_BCRC_1      20
< #define BZ_X_BCRC_2      21
< #define BZ_X_BCRC_3      22
< #define BZ_X_BCRC_4      23
< #define BZ_X_RANDBIT     24
< #define BZ_X_ORIGPTR_1   25
< #define BZ_X_ORIGPTR_2   26
< #define BZ_X_ORIGPTR_3   27
< #define BZ_X_MAPPING_1   28
< #define BZ_X_MAPPING_2   29
< #define BZ_X_SELECTOR_1  30
< #define BZ_X_SELECTOR_2  31
< #define BZ_X_SELECTOR_3  32
< #define BZ_X_CODING_1    33
< #define BZ_X_CODING_2    34
< #define BZ_X_CODING_3    35
< #define BZ_X_MTF_1       36
< #define BZ_X_MTF_2       37
< #define BZ_X_MTF_3       38
< #define BZ_X_MTF_4       39
< #define BZ_X_MTF_5       40
< #define BZ_X_MTF_6       41
< #define BZ_X_ENDHDR_2    42
< #define BZ_X_ENDHDR_3    43
< #define BZ_X_ENDHDR_4    44
< #define BZ_X_ENDHDR_5    45
< #define BZ_X_ENDHDR_6    46
< #define BZ_X_CCRC_1      47
< #define BZ_X_CCRC_2      48
< #define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< /*-- Constants for the fast MTF decoder. --*/
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< /*-- Structure holding all the decompression-side stuff. --*/
< 
< typedef
<    struct {
<       /* pointer back to the struct bz_stream */
<       bz_stream* strm;
< 
<       /* state indicator for this stream */
<       Int32    state;
< 
<       /* for doing the final run-length decoding */
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       /* the buffer for bit stream reading */
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       /* misc administratium */
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       /* for undoing the Burrows-Wheeler transform */
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       /* for undoing the Burrows-Wheeler transform (FAST) */
<       UInt32   *tt;
< 
<       /* for undoing the Burrows-Wheeler transform (SMALL) */
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       /* stored and calculated CRCs */
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       /* map of bytes used in block */
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       /* for decoding the MTF values */
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       /* save area for scalars in the main decompress code */
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< /*-- Macros for decompression. --*/
< 
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
<     cccc = (UChar)(s->tPos & 0xff);           \
<     s->tPos >>= 8;
< 
< #define BZ_GET_FAST_C(cccc)                   \
<     c_tPos = c_tt[c_tPos];                    \
<     cccc = (UChar)(c_tPos & 0xff);            \
<     c_tPos >>= 8;
< 
< #define SET_LL4(i,n)                                          \
<    { if (((i) & 0x1) == 0)                                    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
<    }
< 
< #define GET_LL4(i)                             \
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
< 
< #define SET_LL(i,n)                          \
<    { s->ll16[i] = (UInt16)(n & 0x0000ffff);  \
<      SET_LL4(i, n >> 16);                    \
<    }
< 
< #define GET_LL(i) \
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
< 
< #define BZ_GET_SMALL(cccc)                            \
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
<       s->tPos = GET_LL(s->tPos);
< 
< 
< /*-- externs for decompression. --*/
< 
< extern Int32 
< BZ2_indexIntoF ( Int32, Int32* );
< 
< extern Int32 
< BZ2_decompress ( DState* );
< 
< extern void 
< BZ2_hbCreateDecodeTables ( Int32*, Int32*, Int32*, UChar*,
<                            Int32,  Int32, Int32 );
< 
< 
< #endif
< 
311d310
< #ifndef _BZLIB_PRIVATE_H
744,746d742
< 
< 
< #endif
111d110
< #ifdef _WIN32
118,121d116
< #else
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< #endif
(1.0 %, 202809 bytes)
308d307
< #ifndef _BZLIB_PRIVATE_H
741,743d739
< 
< 
< #endif
110d109
< #ifdef _WIN32
117,120d115
< #else
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< #endif
110,117d109
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
120d111
< #endif
4984,4990d4974
< 
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
4985,4991d4984
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
< 
5049d5041
< #   ifdef __CYGWIN__
5057d5048
< #   endif
5049,5057d5048
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
(1.1 %, 202775 bytes)
110,117d109
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
120d111
< #endif
4980,4986d4970
< 
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
4981,4987d4980
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
< 
5045d5037
< #   ifdef __CYGWIN__
5053d5044
< #   endif
5045,5053d5044
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
(1.2 %, 202468 bytes)
5029,5037d5028
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
5015d5014
< #   ifdef __DJGPP__
5027d5025
< #   endif
6656,6658d6653
< #  ifndef __DJGPP__
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
5015,5028d5014
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
6656d6641
< #  ifndef __DJGPP__
6658d6642
< #  endif
319,322d318
< #ifndef __GNUC__
< #define __inline__  /* */
< #endif 
< 
5009d5004
< #   ifdef __GNUC__
5011,5013d5005
< #   else
< #      define NORETURN /**/
< #   endif
(1.4 %, 202097 bytes)
5015,5028d5014
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
6647d6632
< #  ifndef __DJGPP__
6649d6633
< #  endif
319,322d318
< #ifndef __GNUC__
< #define __inline__  /* */
< #endif 
< 
5009d5004
< #   ifdef __GNUC__
5011,5013d5005
< #   else
< #      define NORETURN /**/
< #   endif
319d318
< #ifndef __GNUC__
321d319
< #endif 
5009,5011d5006
< #   ifdef __GNUC__
< #      define NORETURN __attribute__ ((noreturn))
< #   else
5013d5007
< #   endif
(1.6 %, 201603 bytes)
319d318
< #ifndef __GNUC__
321d319
< #endif 
5009,5011d5006
< #   ifdef __GNUC__
< #      define NORETURN __attribute__ ((noreturn))
< #   else
5013d5007
< #   endif
63d62
< #ifdef __cplusplus
65d63
< #endif
287d284
< #ifdef __cplusplus
289d285
< #endif
63,66d62
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
286,289d281
< 
< #ifdef __cplusplus
< }
< #endif
(1.7 %, 201490 bytes)
63,66d62
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
286,289d281
< 
< #ifdef __cplusplus
< }
< #endif
(1.7 %, 201421 bytes)
===< pass_comments :: 0 >===
1,55c1,5
< /*-------------------------------------------------------------*/
< /*--- Public header file for the library.                   ---*/
< /*---                                               bzlib.h ---*/
< /*-------------------------------------------------------------*/
< 
< /*--
<   This file is a part of bzip2 and/or libbzip2, a program and
<   library for lossless, block-sorting data compression.
< 
<   Copyright (C) 1996-2002 Julian R Seward.  All rights reserved.
< 
<   Redistribution and use in source and binary forms, with or without
<   modification, are permitted provided that the following conditions
<   are met:
< 
<   1. Redistributions of source code must retain the above copyright
<      notice, this list of conditions and the following disclaimer.
< 
<   2. The origin of this software must not be misrepresented; you must 
<      not claim that you wrote the original software.  If you use this 
<      software in a product, an acknowledgment in the product 
<      documentation would be appreciated but is not required.
< 
<   3. Altered source versions must be plainly marked as such, and must
<      not be misrepresented as being the original software.
< 
<   4. The name of the author may not be used to endorse or promote 
<      products derived from this software without specific prior written 
<      permission.
< 
<   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
<   OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
<   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
<   ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
<   DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
<   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
<   GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
<   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
<   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
<   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
<   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
< 
<   Julian Seward, Cambridge, UK.
<   jseward@acm.org
<   bzip2/libbzip2 version 1.0 of 21 March 2000
< 
<   This program is based on (at least) the work of:
<      Mike Burrows
<      David Wheeler
<      Peter Fenwick
<      Alistair Moffat
<      Radford Neal
<      Ian H. Witten
<      Robert Sedgewick
<      Jon L. Bentley
---
>  
> 
> 
> 
> 
57,58d6
<   For more information on these sources, see the manual.
< --*/
103c51
< /* Need a definitition for FILE */
---
> 
110c58
< /*-- Core (low-level) library functions --*/
---
> 
144c92
< /*-- High(er) level library functions --*/
---
> 
212c160
< /*-- Utility functions --*/
---
> 
234,242c182
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
---
> 
283,289c223,229
< /*-------------------------------------------------------------*/
< /*--- end                                           bzlib.h ---*/
< /*-------------------------------------------------------------*/
< /*-------------------------------------------------------------*/
< /*--- Private header file for the library.                  ---*/
< /*---                                       bzlib_private.h ---*/
< /*-------------------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
296c236
< /*-- General stuff. --*/
---
> 
311c251
< #define __inline__  /* */
---
> #define __inline__  
340d279
< /*-- Header bytes. --*/
342,345c281,285
< #define BZ_HDR_B 0x42   /* 'B' */
< #define BZ_HDR_Z 0x5a   /* 'Z' */
< #define BZ_HDR_h 0x68   /* 'h' */
< #define BZ_HDR_0 0x30   /* '0' */
---
> 
> #define BZ_HDR_B 0x42   
> #define BZ_HDR_Z 0x5a   
> #define BZ_HDR_h 0x68   
> #define BZ_HDR_0 0x30   
347c287
< /*-- Constants for the back end. --*/
---
> 
363c303
< /*-- Stuff for randomising repetitive blocks. --*/
---
> 
387c327
< /*-- Stuff for doing CRCs. --*/
---
> 
410c350
< /*-- States and modes for compression. --*/
---
> 
428c368
< /*-- Structure holding all the compression-side stuff. --*/
---
> 
432c372
<       /* pointer back to the struct bz_stream */
---
>       
435,436c375,376
<       /* mode this stream is in, and whether inputting */
<       /* or outputting data */
---
>       
>       
440c380
<       /* remembers avail_in when flush/finish requested */
---
>       
443c383
<       /* for doing the block sorting */
---
>       
449c389
<       /* aliases for arr1 and arr2 */
---
>       
455c395
<       /* for deciding when to use the fallback sorting algorithm */
---
>       
458c398
<       /* run-length-encoding of the input */
---
>       
463c403
<       /* input and output limits and current posns */
---
>       
469c409
<       /* map of bytes used in block */
---
>       
474c414
<       /* the buffer for bit stream creation */
---
>       
478c418
<       /* block and combined CRCs */
---
>       
482c422
<       /* misc administratium */
---
>       
487c427
<       /* stuff for coding the MTF values */
---
>       
496c436
<       /* second dimension: only 3 needed; 4 makes index calculations faster */
---
>       
504c444
< /*-- externs for compression. --*/
---
> 
523c463
< /*-- states for decompression. --*/
---
> 
572c512
< /*-- Constants for the fast MTF decoder. --*/
---
> 
579c519
< /*-- Structure holding all the decompression-side stuff. --*/
---
> 
583c523
<       /* pointer back to the struct bz_stream */
---
>       
586c526
<       /* state indicator for this stream */
---
>       
589c529
<       /* for doing the final run-length decoding */
---
>       
595c535
<       /* the buffer for bit stream reading */
---
>       
599c539
<       /* misc administratium */
---
>       
605c545
<       /* for undoing the Burrows-Wheeler transform */
---
>       
614c554
<       /* for undoing the Burrows-Wheeler transform (FAST) */
---
>       
617c557
<       /* for undoing the Burrows-Wheeler transform (SMALL) */
---
>       
621c561
<       /* stored and calculated CRCs */
---
>       
627c567
<       /* map of bytes used in block */
---
>       
633c573
<       /* for decoding the MTF values */
---
>       
645c585
<       /* save area for scalars in the main decompress code */
---
>       
676c616
< /*-- Macros for decompression. --*/
---
> 
710c650
< /*-- externs for decompression. --*/
---
> 
723d662
< /*-- BZ_NO_STDIO seems to make NULL disappear on some platforms. --*/
726,728d664
< /*-------------------------------------------------------------*/
< /*--- end                                   bzlib_private.h ---*/
< /*-------------------------------------------------------------*/
732,735d667
< /*-------------------------------------------------------------*/
< /*--- Block sorting machinery                               ---*/
< /*---                                           blocksort.c ---*/
< /*-------------------------------------------------------------*/
737,740d668
< /*---------------------------------------------*/
< /*--- Fallback O(N log(N)^2) sorting        ---*/
< /*--- algorithm, for repetitive blocks      ---*/
< /*---------------------------------------------*/
742c670,682
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
775c715
< /*---------------------------------------------*/
---
> 
832,838c772
<       /* Random partitioning.  Median of 3 sometimes fails to
<          avoid bad cases.  Median of 9 seems to help but 
<          looks rather expensive.  This too seems to work but
<          is cheaper.  Guidance for the magic constants 
<          7621 and 32768 is taken from Sedgewick's algorithms
<          book, chapter 35.
<       */
---
>       
904,916c838,839
< /*---------------------------------------------*/
< /* Pre:
<       nblock > 0
<       eclass exists for [0 .. nblock-1]
<       ((UChar*)eclass) [0 .. nblock-1] holds block
<       ptr exists for [0 .. nblock-1]
< 
<    Post:
<       ((UChar*)eclass) [0 .. nblock-1] holds block
<       All other areas of eclass destroyed
<       fmap [0 .. nblock-1] holds sorted order
<       bhtab [ 0 .. 2+(nblock/32) ] destroyed
< */
---
> 
> 
938,941c861
<    /*--
<       Initial 1-char radix sort to generate
<       initial fmap and initial BH bits.
<    --*/
---
>    
960,964c880
<    /*--
<       Inductively refine the buckets.  Kind-of an
<       "exponential radix sort" (!), inspired by the
<       Manber-Myers suffix array construction algorithm.
<    --*/
---
>    
966c882
<    /*-- set sentinel bits for block-end detection --*/
---
>    
972c888
<    /*-- the log(N) loop --*/
---
>    
990c906
< 	 /*-- find the next non-singleton bucket --*/
---
> 	 
1007c923
<          /*-- now [l, r] bracket current bucket --*/
---
>          
1012c928
<             /*-- scan bucket and generate header bits-- */
---
>             
1028,1032c944
<    /*-- 
<       Reconstruct the original block in
<       eclass8 [0 .. nblock-1], since the
<       previous phase destroyed it.
<    --*/
---
>    
1051,1055d962
< /*---------------------------------------------*/
< /*--- The main, O(N^2 log(N)) sorting       ---*/
< /*--- algorithm.  Faster for "normal"       ---*/
< /*--- non-repetitive blocks.                ---*/
< /*---------------------------------------------*/
1057c964,969
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
1072c984
<    /* 1 */
---
>    
1076c988
<    /* 2 */
---
>    
1080c992
<    /* 3 */
---
>    
1084c996
<    /* 4 */
---
>    
1088c1000
<    /* 5 */
---
>    
1092c1004
<    /* 6 */
---
>    
1096c1008
<    /* 7 */
---
>    
1100c1012
<    /* 8 */
---
>    
1104c1016
<    /* 9 */
---
>    
1108c1020
<    /* 10 */
---
>    
1112c1024
<    /* 11 */
---
>    
1116c1028
<    /* 12 */
---
>    
1124c1036
<       /* 1 */
---
>       
1130c1042
<       /* 2 */
---
>       
1136c1048
<       /* 3 */
---
>       
1142c1054
<       /* 4 */
---
>       
1148c1060
<       /* 5 */
---
>       
1154c1066
<       /* 6 */
---
>       
1160c1072
<       /* 7 */
---
>       
1166c1078
<       /* 8 */
---
>       
1185,1191c1097,1098
< /*---------------------------------------------*/
< /*--
<    Knuth's increments seem to work better
<    than Incerpi-Sedgewick here.  Possibly
<    because the number of elems to sort is
<    usually small, typically <= 20.
< --*/
---
> 
> 
1223c1130
<          /*-- copy 1 --*/
---
>          
1237c1144
<          /*-- copy 2 --*/
---
>          
1251c1158
<          /*-- copy 3 --*/
---
>          
1271,1278c1178,1179
< /*---------------------------------------------*/
< /*--
<    The following is an implementation of
<    an elegant 3-way quicksort for strings,
<    described in a paper "Fast Algorithms for
<    Sorting and Searching Strings", by Robert
<    Sedgewick and Jon L. Bentley.
< --*/
---
> 
> 
1444,1457c1345,1346
< /*---------------------------------------------*/
< /* Pre:
<       nblock > N_OVERSHOOT
<       block32 exists for [0 .. nblock-1 +N_OVERSHOOT]
<       ((UChar*)block32) [0 .. nblock-1] holds block
<       ptr exists for [0 .. nblock-1]
< 
<    Post:
<       ((UChar*)block32) [0 .. nblock-1] holds block
<       All other areas of block32 destroyed
<       ftab [0 .. 65536 ] destroyed
<       ptr [0 .. nblock-1] holds sorted order
<       if (*budget < 0), sorting was abandoned
< */
---
> 
> 
1482c1371
<    /*-- set up the 2-byte frequency table --*/
---
>    
1507c1396
<    /*-- (emphasises close relationship of block & quadrant) --*/
---
>    
1515c1404
<    /*-- Complete the initial radix sort --*/
---
>    
1545,1549c1434
<    /*--
<       Now ftab contains the first loc of every small bucket.
<       Calculate the running order, from smallest to largest
<       big bucket.
<    --*/
---
>    
1575,1577c1460
<    /*--
<       The main sorting loop.
<    --*/
---
>    
1583,1588c1466
<       /*--
<          Process big buckets, starting with the least full.
<          Basically this is a 3-step process in which we call
<          mainQSort3 to sort the small buckets [ss, j], but
<          also make a big effort to avoid the calls if we can.
<       --*/
---
>       
1591,1598c1469
<       /*--
<          Step 1:
<          Complete the big bucket [ss] by quicksorting
<          any unsorted small buckets [ss, j], for j != ss.  
<          Hopefully previous pointer-scanning phases have already
<          completed many of the small buckets [ss, j], so
<          we don't have to sort them at all.
<       --*/
---
>       
1624,1630c1495
<       /*--
<          Step 2:
<          Now scan this big bucket [ss] so as to synthesise the
<          sorted order for small buckets [t, ss] for all t,
<          including, magically, the bucket [ss,ss] too.
<          This will avoid doing Real Work in subsequent Step 1's.
<       --*/
---
>       
1652,1655c1517
<                 /* Extremely rare case missing in bzip2-1.0.0 and 1.0.1.
<                    Necessity for this case is demonstrated by compressing 
<                    a sequence of approximately 48.5 million of character 
<                    251; 1.0.0/1.0.1 will then die here. */
---
>                 
1661,1699c1523
<       /*--
<          Step 3:
<          The [ss] big bucket is now done.  Record this fact,
<          and update the quadrant descriptors.  Remember to
<          update quadrants in the overshoot area too, if
<          necessary.  The "if (i < 255)" test merely skips
<          this updating for the last bucket processed, since
<          updating for the last bucket is pointless.
< 
<          The quadrant array provides a way to incrementally
<          cache sort orderings, as they appear, so as to 
<          make subsequent comparisons in fullGtU() complete
<          faster.  For repetitive blocks this makes a big
<          difference (but not big enough to be able to avoid
<          the fallback sorting mechanism, exponential radix sort).
< 
<          The precise meaning is: at all times:
< 
<             for 0 <= i < nblock and 0 <= j <= nblock
< 
<             if block[i] != block[j], 
< 
<                then the relative values of quadrant[i] and 
<                     quadrant[j] are meaningless.
< 
<                else {
<                   if quadrant[i] < quadrant[j]
<                      then the string starting at i lexicographically
<                      precedes the string starting at j
< 
<                   else if quadrant[i] > quadrant[j]
<                      then the string starting at j lexicographically
<                      precedes the string starting at i
< 
<                   else
<                      the relative ordering of the strings starting
<                      at i and j has not yet been determined.
<                }
<       --*/
---
>       
1731,1743c1555,1556
< /*---------------------------------------------*/
< /* Pre:
<       nblock > 0
<       arr2 exists for [0 .. nblock-1 +N_OVERSHOOT]
<       ((UChar*)arr2)  [0 .. nblock-1] holds block
<       arr1 exists for [0 .. nblock-1]
< 
<    Post:
<       ((UChar*)arr2) [0 .. nblock-1] holds block
<       All other areas of block destroyed
<       ftab [ 0 .. 65536 ] destroyed
<       arr1 [0 .. nblock-1] holds sorted order
< */
---
> 
> 
1760,1764c1573
<       /* Calculate the location for quadrant, remembering to get
<          the alignment right.  Assumes that &(block[0]) is at least
<          2-byte aligned -- this should be ok since block is really
<          the first section of arr2.
<       */
---
>       
1769,1775c1578
<       /* (wfact-1) / 3 puts the default-factor-30
<          transition point at very roughly the same place as 
<          with v0.1 and v0.9.0.  
<          Not that it particularly matters any more, since the
<          resulting compressed stream is now the same regardless
<          of whether or not we use the main sort or fallback sort.
<       */
---
>       
1805,1807d1607
< /*-------------------------------------------------------------*/
< /*--- end                                       blocksort.c ---*/
< /*-------------------------------------------------------------*/
1809,1812d1608
< /*-------------------------------------------------------------*/
< /*--- Huffman coding low-level stuff                        ---*/
< /*---                                             huffman.c ---*/
< /*-------------------------------------------------------------*/
1815c1611,1618
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
1853c1656
< /*---------------------------------------------------*/
---
> 
1859,1862c1662
<    /*--
<       Nodes and heap entries run from 1.  Entry 0
<       for both the heap and nodes is a sentinel.
<    --*/
---
>    
1925c1725
< /*---------------------------------------------------*/
---
> 
1943c1743
< /*---------------------------------------------------*/
---
> 
1977,1992c1777,1787
< /*-------------------------------------------------------------*/
< /*--- end                                         huffman.c ---*/
< /*-------------------------------------------------------------*/
< 
< /*-------------------------------------------------------------*/
< /*--- Table for doing CRCs                                  ---*/
< /*---                                            crctable.c ---*/
< /*-------------------------------------------------------------*/
< 
< 
< /*--
<   I think this is an implementation of the AUTODIN-II,
<   Ethernet & FDDI 32-bit CRC standard.  Vaguely derived
<   from code by Rob Warnock, in Section 51 of the
<   comp.compression FAQ.
< --*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
1996c1791
<    /*-- Ugly, innit? --*/
---
>    
2065,2067d1859
< /*-------------------------------------------------------------*/
< /*--- end                                        crctable.c ---*/
< /*-------------------------------------------------------------*/
2069,2072d1860
< /*-------------------------------------------------------------*/
< /*--- Table for randomising repetitive blocks               ---*/
< /*---                                           randtable.c ---*/
< /*-------------------------------------------------------------*/
2075c1863,1870
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
2132,2134d1926
< /*-------------------------------------------------------------*/
< /*--- end                                       randtable.c ---*/
< /*-------------------------------------------------------------*/
2136,2139d1927
< /*-------------------------------------------------------------*/
< /*--- Compression machinery (not incl block sorting)        ---*/
< /*---                                            compress.c ---*/
< /*-------------------------------------------------------------*/
2142,2144d1929
< /*---------------------------------------------------*/
< /*--- Bit stream I/O                              ---*/
< /*---------------------------------------------------*/
2146c1931,1941
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
2154c1949
< /*---------------------------------------------------*/
---
> 
2167c1962
< /*---------------------------------------------------*/
---
> 
2180c1975
< /*---------------------------------------------------*/
---
> 
2191c1986
< /*---------------------------------------------------*/
---
> 
2202c1997
< /*---------------------------------------------------*/
---
> 
2210,2212d2004
< /*---------------------------------------------------*/
< /*--- The back end proper                         ---*/
< /*---------------------------------------------------*/
2214c2006,2009
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
2228c2023
< /*---------------------------------------------------*/
---
> 
2238,2259c2033
<    /* 
<       After sorting (eg, here),
<          s->arr1 [ 0 .. s->nblock-1 ] holds sorted order,
<          and
<          ((UChar*)s->arr2) [ 0 .. s->nblock-1 ] 
<          holds the original block data.
< 
<       The first thing to do is generate the MTF values,
<       and put them in
<          ((UInt16*)s->arr1) [ 0 .. s->nblock-1 ].
<       Because there are strictly fewer or equal MTF values
<       than block values, ptr values in this area are overwritten
<       with MTF values only when they are no longer needed.
< 
<       The final compressed bitstream is generated into the
<       area starting at
<          (UChar*) (&((UChar*)s->arr2)[s->nblock])
< 
<       These storage aliases are set up in bzCompressInit(),
<       except for the last one, which is arranged in 
<       compressBlock().
<    */
---
>    
2344c2118
< /*---------------------------------------------------*/
---
> 
2355,2363c2129
<    /*--
<    UChar  len [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<    is a global since the decoder also needs it.
< 
<    Int32  code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<    Int32  rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<    are also globals only used in this proc.
<    Made global to keep stack frame size small.
<    --*/
---
>    
2381c2147
<    /*--- Decide how many coding tables to use ---*/
---
>    
2389c2155
<    /*--- Generate an initial set of coding tables ---*/
---
>    
2429,2431c2195
<    /*--- 
<       Iterate up to BZ_N_ITERS times to improve the tables.
<    ---*/
---
>    
2440,2443c2204
<       /*---
<         Set up an auxiliary length table which is used to fast-track
< 	the common case (nGroups == 6). 
<       ---*/
---
>       
2457c2218
<          /*--- Set group start & end marks. --*/
---
>          
2462,2465c2223
<          /*-- 
<             Calculate the cost of this group as coded
<             by each of the coding tables.
<          --*/
---
>          
2469c2227
<             /*--- fast track the common case ---*/
---
>             
2498c2256
< 	    /*--- slow version which correctly handles all situations ---*/
---
> 	    
2505,2508c2263
<          /*-- 
<             Find the coding table which is best for this group,
<             and record its identity in the selector table.
<          --*/
---
>          
2517,2519c2272
<          /*-- 
<             Increment the symbol frequencies for the selected table.
<           --*/
---
>          
2521c2274
<             /*--- fast track the common case ---*/
---
>             
2539c2292
< 	    /*--- slow version which correctly handles all situations ---*/
---
> 	    
2554,2556c2307
<       /*--
<         Recompute the tables based on the accumulated frequencies.
<       --*/
---
>       
2569c2320
<    /*--- Compute MTF values for the selectors. ---*/
---
>    
2588c2339
<    /*--- Assign actual codes for the tables. --*/
---
>    
2602c2353
<    /*--- Transmit the mapping table. ---*/
---
>    
2625c2376
<    /*--- Now the selectors. ---*/
---
>    
2636c2387
<    /*--- Now the coding tables. ---*/
---
>    
2643,2644c2394,2395
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++; /* 10 */ };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--; /* 11 */ };
---
>          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
>          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
2652c2403
<    /*--- And finally, the block data proper ---*/
---
>    
2663c2414
<             /*--- fast track the common case ---*/
---
>             
2690c2441
< 	 /*--- slow version which correctly handles all situations ---*/
---
> 	 
2709c2460
< /*---------------------------------------------------*/
---
> 
2729c2480
<    /*-- If this is the first block, create the stream header. --*/
---
>    
2744c2495
<       /*-- Now the block's CRC, so it is in a known place. --*/
---
>       
2747,2755c2498
<       /*-- 
<          Now a single bit indicating (non-)randomisation. 
<          As of version 0.9.5, we use a better sorting algorithm
<          which makes randomisation unnecessary.  So always set
<          the randomised bit to 'no'.  Of course, the decoder
<          still needs to be able to handle randomised blocks
<          so as to maintain backwards compatibility with
<          older versions of bzip2.
<       --*/
---
>       
2764c2507
<    /*-- If this is the last block, add the stream trailer. --*/
---
>    
2778,2780d2520
< /*-------------------------------------------------------------*/
< /*--- end                                        compress.c ---*/
< /*-------------------------------------------------------------*/
2782,2785d2521
< /*-------------------------------------------------------------*/
< /*--- Decompression machinery                               ---*/
< /*---                                          decompress.c ---*/
< /*-------------------------------------------------------------*/
2788c2524,2531
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
2802c2545
< /*---------------------------------------------------*/
---
> 
2836c2579
< /*---------------------------------------------------*/
---
> 
2854c2597
<       if (zn > 20 /* the longest code */)         \
---
>       if (zn > 20 )         \
2868c2611
< /*---------------------------------------------------*/
---
> 
2876c2619
<    /* stuff that needs to be saved/restored */
---
>    
2903c2646
<       /*initialise the save area*/
---
>       
2930c2673
<    /*restore from the save area*/
---
>    
3029c2772
<       /*--- Receive the mapping table ---*/
---
>       
3049c2792
<       /*--- Now the selectors ---*/
---
>       
3065c2808
<       /*--- Undo the MTF values for the selectors. ---*/
---
>       
3079c2822
<       /*--- Now the coding tables ---*/
---
>       
3094c2837
<       /*--- Create the Huffman decoding tables ---*/
---
>       
3112c2855
<       /*--- Now the MTF values ---*/
---
>       
3121c2864
<       /*-- MTF init --*/
---
>       
3133c2876
<       /*-- end MTF init --*/
---
>       
3179c2922
<             /*-- uc = MTF ( nextSym-1 ) --*/
---
>             
3186c2929
<                   /* avoid general-case expense */
---
>                   
3202c2945
<                   /* general case */
---
>                   
3231c2974
<             /*-- end uc = MTF ( nextSym-1 ) --*/
---
>             
3244,3246c2987
<       /* Now we know what nblock is, we can do a better sanity
<          check on s->origPtr.
<       */
---
>       
3256c2997
<       /*-- Set up cftab to facilitate generation of T^(-1) --*/
---
>       
3263c3004
<          /*-- Make a copy of cftab, used in generation of T --*/
---
>          
3266c3007
<          /*-- compute the T vector --*/
---
>          
3273c3014
<          /*-- Compute T^(-1) by pointer reversal on T --*/
---
>          
3296c3037
<          /*-- compute the T^(-1) vector --*/
---
>          
3381,3383d3121
< /*-------------------------------------------------------------*/
< /*--- end                                      decompress.c ---*/
< /*-------------------------------------------------------------*/
3385,3388d3122
< /*-------------------------------------------------------------*/
< /*--- Library top-level functions.                          ---*/
< /*---                                               bzlib.c ---*/
< /*-------------------------------------------------------------*/
3390,3392d3123
< /*---------------------------------------------------*/
< /*--- Compression stuff                           ---*/
< /*---------------------------------------------------*/
3395c3126,3136
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
3443c3184
< /*---------------------------------------------------*/
---
> 
3454c3195
< /*---------------------------------------------------*/
---
> 
3469c3210
< /*---------------------------------------------------*/
---
> 
3483c3224
< /*---------------------------------------------------*/
---
> 
3501c3242
< /*---------------------------------------------------*/
---
> 
3568c3309
< /*---------------------------------------------------*/
---
> 
3604c3345
< /*---------------------------------------------------*/
---
> 
3613c3354
< /*---------------------------------------------------*/
---
> 
3617c3358
<    /*-- fast track the common case --*/           \
---
>               \
3628c3369
<    /*-- general, uncommon cases --*/              \
---
>                  \
3641c3382
< /*---------------------------------------------------*/
---
> 
3649c3390
<       /*-- fast track the common case --*/
---
>       
3651c3392
<          /*-- block full? --*/
---
>          
3653c3394
<          /*-- no input? --*/
---
>          
3665c3406
<       /*-- general, uncommon case --*/
---
>       
3667c3408
<          /*-- block full? --*/
---
>          
3669c3410
<          /*-- no input? --*/
---
>          
3671c3412
<          /*-- flush/finish end? --*/
---
>          
3686c3427
< /*---------------------------------------------------*/
---
> 
3694c3435
<       /*-- no output space? --*/
---
>       
3697c3438
<       /*-- block done? --*/
---
>       
3713c3454
< /*---------------------------------------------------*/
---
> 
3760c3501
< /*---------------------------------------------------*/
---
> 
3817c3558
<    return BZ_OK; /*--not reached--*/
---
>    return BZ_OK; 
3821c3562
< /*---------------------------------------------------*/
---
> 
3841,3843d3581
< /*---------------------------------------------------*/
< /*--- Decompression stuff                         ---*/
< /*---------------------------------------------------*/
3845c3583,3586
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
3885c3626
< /*---------------------------------------------------*/
---
> 
3894c3635
<          /* try to finish existing run */
---
>          
3907c3648
<          /* can a new run be started? */
---
>          
3939c3680
<       /* restore */
---
>       
3949c3690
<       /* end restore */
---
>       
3957c3698
<          /* try to finish existing run */
---
>          
3979c3720
<          /* can a new run be started? */
---
>          
4012c3753
<       /* save */
---
>       
4022c3763
<       /* end save */
---
>       
4028c3769
< /*---------------------------------------------------*/
---
> 
4043c3784
< /*---------------------------------------------------*/
---
> 
4052c3793
<          /* try to finish existing run */
---
>          
4065c3806
<          /* can a new run be started? */
---
>          
4098c3839
<          /* try to finish existing run */
---
>          
4111c3852
<          /* can a new run be started? */
---
>          
4139c3880
< /*---------------------------------------------------*/
---
> 
4187c3928
<    return 0;  /*NOTREACHED*/
---
>    return 0;  
4191c3932
< /*---------------------------------------------------*/
---
> 
4211,4213c3952,3954
< /*---------------------------------------------------*/
< /*--- File I/O stuff                              ---*/
< /*---------------------------------------------------*/
---
> 
> 
> 
4234c3975
< /*---------------------------------------------*/
---
> 
4244c3985
< /*---------------------------------------------------*/
---
> 
4292c4033
< /*---------------------------------------------------*/
---
> 
4337c4078
< /*---------------------------------------------------*/
---
> 
4415c4156
< /*---------------------------------------------------*/
---
> 
4471c4212
< /*---------------------------------------------------*/
---
> 
4489c4230
< /*---------------------------------------------------*/
---
> 
4545c4286
<    return 0; /*not reached*/
---
>    return 0; 
4549c4290
< /*---------------------------------------------------*/
---
> 
4570,4572d4310
< /*---------------------------------------------------*/
< /*--- Misc convenience stuff                      ---*/
< /*---------------------------------------------------*/
4574c4312,4315
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
4611c4352
<    /* normal termination */
---
>    
4626c4367
< /*---------------------------------------------------*/
---
> 
4659c4400
<    /* normal termination */
---
>    
4679,4694c4420,4425
< /*---------------------------------------------------*/
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
< /*---------------------------------------------------*/
< 
< /*---------------------------------------------------*/
< /*--
<    return version like "0.9.0c".
< --*/
---
> 
> 
> 
> 
> 
> 
4701c4432
< /*---------------------------------------------------*/
---
> 
4705,4706c4436,4437
<                ( const char *path,   /* no use when bzdopen */
<                  int fd,             /* no use when bzdopen */
---
>                ( const char *path,   
>                  int fd,             
4708c4439
<                  int open_mode)      /* bzopen: 0, bzdopen:1 */
---
>                  int open_mode)      
4739c4470
<    strcat(mode2,"b");   /* binary mode */
---
>    strcat(mode2,"b");   
4753c4484
<       /* Guard against total chaos and anarchy -- JRS */
---
>       
4770,4775c4501,4502
< /*---------------------------------------------------*/
< /*--
<    open file for read or write.
<       ex) bzopen("file","w9")
<       case path="" or NULL => use stdin or stdout.
< --*/
---
> 
> 
4780c4507
<    return bzopen_or_bzdopen(path,-1,mode,/*bzopen*/0);
---
>    return bzopen_or_bzdopen(path,-1,mode,0);
4784c4511
< /*---------------------------------------------------*/
---
> 
4789c4516
<    return bzopen_or_bzdopen(NULL,fd,mode,/*bzdopen*/1);
---
>    return bzopen_or_bzdopen(NULL,fd,mode,1);
4793c4520
< /*---------------------------------------------------*/
---
> 
4807c4534
< /*---------------------------------------------------*/
---
> 
4821c4548
< /*---------------------------------------------------*/
---
> 
4824c4551
<    /* do nothing now... */
---
>    
4829c4556
< /*---------------------------------------------------*/
---
> 
4850,4853c4577,4578
< /*---------------------------------------------------*/
< /*--
<    return last error code 
< --*/
---
> 
> 
4865,4870c4590,4595
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
---
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
4884,4950c4609,4634
< /*-------------------------------------------------------------*/
< /*--- end                                           bzlib.c ---*/
< /*-------------------------------------------------------------*/
< 
< /*-----------------------------------------------------------*/
< /*--- A block-sorting, lossless compressor        bzip2.c ---*/
< /*-----------------------------------------------------------*/
< 
< 
< 
< /*----------------------------------------------------*/
< /*--- IMPORTANT                                    ---*/
< /*----------------------------------------------------*/
< 
< /*--
<    WARNING:
<       This program and library (attempts to) compress data by 
<       performing several non-trivial transformations on it.  
<       Unless you are 100% familiar with *all* the algorithms 
<       contained herein, and with the consequences of modifying them, 
<       you should NOT meddle with the compression or decompression 
<       machinery.  Incorrect changes can and very likely *will* 
<       lead to disasterous loss of data.
< 
<    DISCLAIMER:
<       I TAKE NO RESPONSIBILITY FOR ANY LOSS OF DATA ARISING FROM THE
<       USE OF THIS PROGRAM, HOWSOEVER CAUSED.
< 
<       Every compression of a file implies an assumption that the
<       compressed file can be decompressed to reproduce the original.
<       Great efforts in design, coding and testing have been made to
<       ensure that this program works correctly.  However, the
<       complexity of the algorithms, and, in particular, the presence
<       of various special cases in the code which occur with very low
<       but non-zero probability make it impossible to rule out the
<       possibility of bugs remaining in the program.  DO NOT COMPRESS
<       ANY DATA WITH THIS PROGRAM AND/OR LIBRARY UNLESS YOU ARE PREPARED 
<       TO ACCEPT THE POSSIBILITY, HOWEVER SMALL, THAT THE DATA WILL 
<       NOT BE RECOVERABLE.
< 
<       That is not to say this program is inherently unreliable.
<       Indeed, I very much hope the opposite is true.  bzip2/libbzip2
<       has been carefully constructed and extensively tested.
< 
<    PATENTS:
<       To the best of my knowledge, bzip2/libbzip2 does not use any 
<       patented algorithms.  However, I do not have the resources 
<       available to carry out a full patent search.  Therefore I cannot 
<       give any guarantee of the above statement.
< --*/
< 
< 
< 
< /*----------------------------------------------------*/
< /*--- and now for something much more pleasant :-) ---*/
< /*----------------------------------------------------*/
< 
< /*---------------------------------------------*/
< /*--
<   Place a 1 beside your platform, and 0 elsewhere.
< --*/
< 
< /*--
<   Generic 32-bit Unix.
<   Also works on 64-bit Unix boxes.
<   This is the default.
< --*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
4953,4959c4637
< /*--
<   Win32, as seen by Jacob Navia's excellent
<   port of (Chris Fraser & David Hanson)'s excellent
<   lcc compiler.  Or with MS Visual C.
<   This is selected automatically if compiled by a compiler which
<   defines _WIN32, not including the Cygwin GCC.
< --*/
---
> 
4963,4966c4641,4642
< /*---------------------------------------------*/
< /*--
<   Some stuff for all platforms.
< --*/
---
> 
> 
4976,4979c4652,4653
< /*---------------------------------------------*/
< /*--
<    Platform-specific stuff.
< --*/
---
> 
> 
4997c4671,4675
< #   define SET_BINARY_MODE(fd) /**/
---
> #   define SET_BINARY_MODE(fd) 
> 
> #      define NORETURN 
> 
> #endif 
4999d4676
< #      define NORETURN /**/
5001d4677
< #endif /* BZ_UNIX */
5005,5008d4680
< /*---------------------------------------------*/
< /*--
<   Some more stuff for all platforms :-)
< --*/
5013,5016c4685
< /*--
<   IntNative is your platform's `native' int size.
<   Only here to avoid probs with 64-bit platforms.
< --*/
---
> 
5020,5022c4689,4691
< /*---------------------------------------------------*/
< /*--- Misc (file handling) data decls             ---*/
< /*---------------------------------------------------*/
---
> 
> 
> 
5030c4699
< /*-- source modes; F==file, I==stdin, O==stdout --*/
---
> 
5035c4704
< /*-- operation modes --*/
---
> 
5067,5070c4736,4739
< /*---------------------------------------------------*/
< /*--- An implementation of 64-bit ints.  Sigh.    ---*/
< /*--- Roll on widespread deployment of ANSI C9X ! ---*/
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
5115c4784
< /* Divide *n by 10, and return the remainder.  */
---
> 
5131,5133c4800
< /* ... and the Whole Entire Point of all this UInt64 stuff is
<    so that we can supply the following function.
< */
---
> 
5152,5154d4818
< /*---------------------------------------------------*/
< /*--- Processing of complete files and streams    ---*/
< /*---------------------------------------------------*/
5156d4819
< /*---------------------------------------------*/
5158c4821,4825
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
5254c4921
<    /*notreached*/
---
>    
5259c4926
< /*---------------------------------------------*/
---
> 
5369c5036
<    return True; /*notreached*/
---
>    return True; 
5373c5040
< /*---------------------------------------------*/
---
> 
5460c5127
<    return True; /*notreached*/
---
>    return True; 
5464,5466d5130
< /*---------------------------------------------------*/
< /*--- Error [non-] handling grunge                ---*/
< /*---------------------------------------------------*/
5468c5132,5135
< /*---------------------------------------------*/
---
> 
> 
> 
> 
5476c5143
< /*---------------------------------------------*/
---
> 
5491c5158
< /*---------------------------------------------*/
---
> 
5504c5171
< /*---------------------------------------------*/
---
> 
5515,5519c5182
<       /* Check whether input file still exists.  Delete output file
<          only if input exists to avoid loss of data.  Joerg Prante, 5
<          January 2002.  (JRS 06-Jan-2002: other changes in 1.0.2 mean
<          this is less likely to happen.  But to be ultra-paranoid, we
<          do the check anyway.)  */
---
>       
5563c5226
< /*---------------------------------------------*/
---
> 
5578c5241
< /*---------------------------------------------*/
---
> 
5591c5254
< /*---------------------------------------------*/
---
> 
5608c5271
< /*---------------------------------------------*/
---
> 
5622c5285
< /*---------------------------------------------*/
---
> 
5633c5296
< /*---------------------------------------------*/
---
> 
5689c5352
< /*---------------------------------------------*/
---
> 
5701c5364
< /*---------------------------------------------*/
---
> 
5716,5723d5378
< /*---------------------------------------------------*/
< /*--- The main driver machinery                   ---*/
< /*---------------------------------------------------*/
< 
< /* All rather crufty.  The main problem is that input files
<    are stat()d multiple times before use.  This should be
<    cleaned up. 
< */
5725c5380,5385
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
5736c5396
< /*---------------------------------------------*/
---
> 
5757c5417
< /*---------------------------------------------*/
---
> 
5768,5777c5428,5429
< /*---------------------------------------------*/
< /* Open an output file safely with O_EXCL and good permissions.
<    This avoids a race condition in versions < 1.0.2, in which
<    the file was first opened and then had its interim permissions
<    set safely.  We instead use open() to create the file with
<    the interim permissions required. (--- --- rw-).
< 
<    For non-Unix platforms, if we are not worrying about
<    security issues, simple this simply behaves like fopen.
< */
---
> 
> 
5794,5797c5446,5447
< /*---------------------------------------------*/
< /*--
<   if in doubt, return True
< --*/
---
> 
> 
5811,5814c5461,5462
< /*---------------------------------------------*/
< /*--
<   rac 11/21/98 see if file has hard links to it
< --*/
---
> 
> 
5827,5849c5475,5476
< /*---------------------------------------------*/
< /* Copy modification date, access date, permissions and owner from the
<    source to destination file.  We have to copy this meta-info off
<    into fileMetaInfo before starting to compress / decompress it,
<    because doing it afterwards means we get the wrong access time.
< 
<    To complicate matters, in compress() and decompress() below, the
<    sequence of tests preceding the call to saveInputFileMetaInfo()
<    involves calling fileExists(), which in turn establishes its result
<    by attempting to fopen() the file, and if successful, immediately
<    fclose()ing it again.  So we have to assume that the fopen() call
<    does not cause the access time field to be updated.
< 
<    Reading of the man page for stat() (man 2 stat) on RedHat 7.2 seems
<    to imply that merely doing open() will not affect the access time.
<    Therefore we merely need to hope that the C library only does
<    open() as a result of fopen(), and not any kind of read()-ahead
<    cleverness.
< 
<    It sounds pretty fragile to me.  Whether this carries across
<    robustly to arbitrary Unix-like platforms (or even works robustly
<    on this one, RedHat 7.2) is unknown to me.  Nevertheless ...  
< */
---
> 
> 
5860c5487
<    /* Note use of stat here, not lstat. */
---
>    
5884,5886c5511
<    /* chown() will in many cases return with EPERM, which can
<       be safely ignored.
<    */
---
>    
5891c5516
< /*---------------------------------------------*/
---
> 
5896,5898c5521
<    /* On unix, files can contain any characters and the file expansion
<     * is performed by the shell.
<     */
---
>    
5900,5903c5523,5524
< #  else /* ! BZ_UNIX */
<    /* On non-unix (Win* platforms), wildcard characters are not allowed in 
<     * filenames.
<     */
---
> #  else 
>    
5907c5528
< #  endif /* BZ_UNIX */
---
> #  endif 
5911c5532
< /*---------------------------------------------*/
---
> 
5940c5561
< /*---------------------------------------------*/
---
> 
6029,6030c5650
<       /* Save the file's meta-info before we open it.  Doing it later
<          means we mess up the access times. */
---
>       
6101c5721
<    /*--- Now the input and output handles are sane.  Do the Biz. ---*/
---
>    
6107c5727
<    /*--- If there was an I/O error, we won't get here. ---*/
---
>    
6121c5741
< /*---------------------------------------------*/
---
> 
6189c5809
<    if ( /* srcMode == SM_F2F implied && */ cantGuess ) {
---
>    if (  cantGuess ) {
6194c5814
<       /* just a warning, no return */
---
>       
6215,6216c5835
<       /* Save the file's meta-info before we open it.  Doing it later
<          means we mess up the access times. */
---
>       
6278c5897
<    /*--- Now the input and output handles are sane.  Do the Biz. ---*/
---
>    
6284c5903
<    /*--- If there was an I/O error, we won't get here. ---*/
---
>    
6319c5938
< /*---------------------------------------------*/
---
> 
6399c6018
<    /*--- Now the input handle is sane.  Do the Biz. ---*/
---
>    
6408c6027
< /*---------------------------------------------*/
---
> 
6433c6052
< /*---------------------------------------------*/
---
> 
6477c6096
< /*---------------------------------------------*/
---
> 
6488,6501c6107,6108
< /*---------------------------------------------*/
< /*--
<   All the garbage from here to main() is purely to
<   implement a linked list of command-line arguments,
<   into which main() copies argv[1 .. argc-1].
< 
<   The purpose of this exercise is to facilitate 
<   the expansion of wildcard characters * and ? in 
<   filenames for OSs which don't know how to do it
<   themselves, like MSDOS, Windows 95 and NT.
< 
<   The actual Dirty Work is done by the platform-
<   specific macro APPEND_FILESPEC.
< --*/
---
> 
> 
6511c6118
< /*---------------------------------------------*/
---
> 
6523c6130
< /*---------------------------------------------*/
---
> 
6536c6143
< /*---------------------------------------------*/
---
> 
6554c6161
< /*---------------------------------------------*/
---
> 
6582c6189
< /*---------------------------------------------*/
---
> 
6593c6200
<    /*-- Be really really really paranoid :-) --*/
---
>    
6599c6206
<    /*-- Initialise --*/
---
>    
6614c6221
<    i = j = 0; /* avoid bogus warning from egcs-1.1.X */
---
>    i = j = 0; 
6616c6223
<    /*-- Set up signal handlers for mem access errors --*/
---
>    
6631,6633c6238
<    /*-- Copy flags from env var BZIP2, and 
<         expand filename wildcards in arg list.
<    --*/
---
>    
6641c6246
<    /*-- Find the length of the longest filename --*/
---
>    
6654c6259
<    /*-- Determine source modes; flag handling may change this too. --*/
---
>    
6659,6660c6264,6265
<    /*-- Determine what to do (compress/uncompress/test/cat). --*/
<    /*-- Note that subsequent flag handling may change this. --*/
---
>    
>    
6676c6281
<    /*-- Look at the flags. --*/
---
>    
6715c6320
<    /*-- And again ... --*/
---
>    
6824,6826c6429
<    /* Free the argument list memory to mollify leak detectors 
<       (eg) Purify, Checker.  Serves no other useful purpose.
<    */
---
>    
6839,6841c6442,6444
< /*-----------------------------------------------------------*/
< /*--- end                                         bzip2.c ---*/
< /*-----------------------------------------------------------*/
\ No newline at end of file
---
> 
> 
>  
\ No newline at end of file
(19.2 %, 165542 bytes)
===< pass_blank :: 0 >===
1,8d0
<  
< 
< 
< 
< 
< 
< 
< 
10d1
< 
14d4
< 
29d18
< 
36d24
< 
41d28
< 
43d29
< 
49,51d34
< 
< 
< 
53d35
< 
56,59d37
< 
< 
< 
< 
66d43
< 
71d47
< 
75d50
< 
81d55
< 
85d58
< 
89,93d61
< 
< 
< 
< 
< 
95d62
< 
97d63
< 
106d71
< 
111d75
< 
118d81
< 
125d87
< 
133d94
< 
140d100
< 
148d107
< 
158,161d116
< 
< 
< 
< 
171d125
< 
180,183d133
< 
< 
< 
< 
187d136
< 
192d140
< 
197d144
<          
203d149
< 
209d154
< 
213d157
< 
217d160
< 
222,230d164
< 
< 
< 
< 
< 
< 
< 
< 
< 
232d165
< 
234,237d166
< 
< 
< 
< 
239d167
< 
247d174
< 
250d176
< 
252d177
< 
274,275d198
< 
< 
278,281d200
< 
< 
< 
< 
286,288d204
<   
< 
< 
291d206
< 
294d208
< 
298d211
< 
300,304d212
< 
< 
< 
< 
< 
306d213
< 
310d216
< 
314d219
< 
316d220
< 
324,328d227
< 
< 
< 
< 
< 
330d228
< 
335d232
< 
340d236
< 
347,351d242
< 
< 
< 
< 
< 
356d246
< 
359d248
< 
364,369d252
< 
< 
< 
< 
< 
< 
372d254
<       
374,376d255
< 
<       
<       
379,380d257
< 
<       
382,383d258
< 
<       
388,389d262
< 
<       
394,395d266
< 
<       
397,398d267
< 
<       
402,403d270
< 
<       
408,409d274
< 
<       
413,414d277
< 
<       
417,418d279
< 
<       
421,422d281
< 
<       
426,427d284
< 
<       
432d288
< 
436d291
<       
438d292
< 
441,445d294
< 
< 
< 
< 
< 
448d296
< 
451d298
< 
454d300
< 
457d302
< 
460,464d304
< 
< 
< 
< 
< 
467d306
< 
509,513d347
< 
< 
< 
< 
< 
516,520d349
< 
< 
< 
< 
< 
523d351
<       
525,526d352
< 
<       
528,529d353
< 
<       
534,535d357
< 
<       
538,539d359
< 
<       
544,545d363
< 
<       
553,554d370
< 
<       
556,557d371
< 
<       
560,561d373
< 
<       
566,567d377
< 
<       
572,573d381
< 
<       
579d386
< 
584,585d390
< 
<       
610d414
< 
613,617d416
< 
< 
< 
< 
< 
622d420
< 
627d424
< 
633d429
< 
636d431
< 
641d435
< 
644d437
< 
648,651d440
< 
< 
< 
< 
654d442
< 
657d444
< 
661,682d447
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
692d456
< 
694d457
< 
704d466
< 
713,715d474
< 
< 
< 
718d476
< 
729,730d486
< 
< 
732d487
< 
736d490
< 
740d493
< 
743,744d495
< 
< 
756d506
< 
758d507
< 
761d509
< 
763d510
< 
765d511
< 
771,772d516
< 
<       
778d521
< 
781d523
< 
808d549
< 
810d550
< 
812d551
< 
815d553
< 
818d555
< 
828d564
< 
836,840d571
< 
< 
< 
< 
< 
846d576
< 
860,861d589
< 
<    
868d595
< 
875d601
< 
879,882d604
< 
<    
< 
<    
887,888d608
< 
<    
891d610
< 
894d612
< 
901d618
< 
905,906d621
< 
< 	 
922,923d636
< 
<          
927,928d639
< 
<             
936d646
< 
939d648
< 
943,944d651
< 
<    
955d661
< 
961,969d666
< 
< 
< 
< 
< 
< 
< 
< 
< 
982d678
< 
984d679
<    
988d682
<    
992d685
<    
996d688
<    
1000d691
<    
1004d694
<    
1008d697
<    
1012d700
<    
1016d703
<    
1020d706
<    
1024d709
<    
1028d712
<    
1032d715
< 
1034d716
< 
1036d717
<       
1042d722
<       
1048d727
<       
1054d732
<       
1060d737
<       
1066d742
<       
1072d747
<       
1078d752
<       
1084d757
< 
1087d759
< 
1092d763
< 
1095,1098d765
< 
< 
< 
< 
1103d769
< 
1116d781
< 
1119d783
< 
1123d786
< 
1126d788
< 
1129,1130d790
< 
<          
1143,1144d802
< 
<          
1157,1158d814
< 
<          
1171d826
< 
1176,1180d830
< 
< 
< 
< 
< 
1183d832
< 
1194d842
< 
1207d854
< 
1209d855
< 
1214d859
< 
1219,1220d863
< 
< 
1222d864
< 
1228,1229d869
< 
< 
1233d872
< 
1246d884
< 
1250d887
< 
1254d890
< 
1257d892
< 
1259d893
< 
1261d894
< 
1269d901
< 
1274d905
< 
1277d907
< 
1302d931
< 
1304d932
< 
1309d936
< 
1312d938
< 
1315d940
< 
1319d943
< 
1323d946
< 
1326d948
< 
1332d953
< 
1343,1347d963
< 
< 
< 
< 
< 
1351d966
< 
1370,1371d984
< 
<    
1373d985
< 
1395,1396d1006
< 
<    
1401d1010
< 
1403,1404d1011
< 
<    
1406d1012
< 
1433,1434d1038
< 
<    
1439d1042
< 
1459,1461d1061
< 
<    
< 
1463d1062
< 
1465,1466d1063
< 
<       
1468,1469d1064
< 
<       
1492d1086
< 
1494,1495d1087
< 
<       
1514d1105
< 
1517d1107
<                 
1520d1109
< 
1522,1523d1110
< 
<       
1525d1111
< 
1530d1115
< 
1532d1116
< 
1542d1125
< 
1544d1126
< 
1549d1130
< 
1553,1556d1133
< 
< 
< 
< 
1569d1145
< 
1573d1148
<       
1577,1578d1151
< 
<       
1583d1155
< 
1598d1169
< 
1603d1173
< 
1606,1618d1175
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1622d1178
< 
1626d1181
< 
1637d1191
< 
1654,1656d1207
< 
< 
< 
1662d1212
<    
1665d1214
< 
1669d1217
< 
1672d1219
< 
1674d1220
< 
1677d1222
< 
1681d1225
< 
1688d1231
< 
1690d1232
<    
1702d1243
< 
1704d1244
< 
1713d1252
<       
1715d1253
< 
1723,1725d1260
< 
< 
< 
1733d1267
< 
1741,1743d1274
< 
< 
< 
1753d1283
< 
1758d1287
< 
1761d1289
< 
1763d1290
< 
1766d1292
< 
1775,1788d1300
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1790,1792d1301
< 
<    
< 
1858,1870d1366
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1925,1941d1420
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1947,1949d1425
< 
< 
< 
1960,1962d1435
< 
< 
< 
1973,1975d1445
< 
< 
< 
1984,1986d1453
< 
< 
< 
1995,1997d1461
< 
< 
< 
2003,2009d1466
< 
< 
< 
< 
< 
< 
< 
2021,2023d1477
< 
< 
< 
2032,2033d1485
< 
<    
2037d1488
< 
2040d1490
< 
2042d1491
< 
2046d1494
< 
2053d1500
< 
2057d1503
< 
2092d1537
< 
2095d1539
< 
2111d1554
< 
2113d1555
< 
2116,2118d1557
< 
< 
< 
2121d1559
< 
2128,2131d1565
< 
<    
< 
< 
2134d1567
< 
2136d1568
< 
2141d1572
< 
2146,2147d1576
< 
<    
2154,2155d1582
< 
<    
2158d1584
< 
2170d1595
< 
2177d1601
< 
2183d1606
<  
2188d1610
<  
2194,2195d1615
< 
<    
2197d1616
< 
2199d1617
< 
2203,2204d1620
< 
<       
2212d1627
< 
2217,2218d1631
< 
<          
2222,2223d1634
< 
<          
2225d1635
< 
2227d1636
<             
2231d1639
< 
2237d1644
< 
2248d1654
< 
2250d1655
< 
2254d1658
< 
2256d1659
< 	    
2262,2263d1664
<  
<          
2271,2272d1671
< 
<          
2274,2275d1672
<             
< 
2277d1673
< 
2288d1683
< 
2290d1684
< 
2292d1685
< 	    
2296d1688
< 
2306,2307d1697
< 
<       
2312,2313d1701
< 
< 
2318,2320d1705
< 
< 
<    
2338,2339d1722
< 
<    
2352,2353d1734
< 
<    
2361d1741
<      
2365d1744
< 
2371d1749
< 
2375,2376d1752
< 
<    
2386,2387d1761
< 
<    
2389d1762
< 
2399d1771
< 
2402,2403d1773
< 
<    
2412d1781
< 
2414d1782
<             
2420d1787
< 
2426d1792
< 
2437d1802
< 
2439d1803
< 
2441d1804
< 	 
2448,2449d1810
< 
< 
2454d1814
< 
2458,2460d1817
< 
< 
< 
2464d1820
< 
2469d1824
< 
2474d1828
< 
2477d1830
< 
2479,2480d1831
< 
<    
2488d1838
< 
2490d1839
< 
2494,2495d1842
< 
<       
2497,2498d1843
< 
<       
2500d1844
< 
2505,2507d1848
< 
< 
<    
2509d1849
< 
2519,2531d1858
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
2543,2545d1869
< 
< 
< 
2548d1871
< 
2572d1894
< 
2575d1896
< 
2578,2579d1898
< 
< 
2609,2611d1927
< 
< 
< 
2618,2619d1933
< 
<    
2644d1957
< 
2646d1958
<       
2672,2673d1983
< 
<    
2698d2007
< 
2700d2008
< 
2702d2009
< 
2705d2011
< 
2708d2013
< 
2711d2015
< 
2716d2019
< 
2727d2029
< 
2729d2030
< 
2742d2042
< 
2746d2045
<  
2756d2054
< 
2758d2055
< 
2766d2062
< 
2771,2772d2066
< 
<       
2779d2072
< 
2781d2073
< 
2791,2792d2082
< 
<       
2807,2808d2096
< 
<       
2812d2099
<    
2821,2822d2107
< 
<       
2836,2837d2120
< 
<       
2854,2856d2136
< 
<       
< 
2861d2140
< 
2863,2864d2141
< 
<       
2876,2877d2152
<       
< 
2880d2154
< 
2882d2155
< 
2884d2156
< 
2886d2157
< 
2896d2166
< 
2900d2169
< 
2915d2183
< 
2917d2184
< 
2919d2185
< 
2921,2922d2186
< 
<             
2927d2190
< 
2929d2191
<                   
2945d2206
<                   
2974,2975d2234
<             
< 
2981d2239
< 
2986,2987d2243
< 
<       
2990d2245
< 
2996,2997d2250
< 
<       
3001d2253
< 
3003,3004d2254
< 
<          
3006,3007d2255
< 
<          
3013,3014d2260
< 
<          
3024d2269
< 
3034d2278
< 
3036,3037d2279
< 
<          
3043d2284
< 
3053d2293
< 
3055d2294
< 
3057,3059d2295
< 
< 
< 
3061d2296
< 
3072d2306
< 
3082d2315
< 
3085d2317
< 
3088d2319
< 
3090d2320
< 
3092d2321
< 
3117d2345
< 
3120,3136d2347
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
3151d2361
< 
3179d2388
< 
3182,3184d2390
< 
< 
< 
3193,3195d2398
< 
< 
< 
3202d2404
< 
3208,3210d2409
< 
< 
< 
3222,3224d2420
< 
< 
< 
3231,3232d2426
< 
< 
3240,3242d2433
< 
< 
< 
3251d2441
< 
3253d2442
< 
3258d2446
< 
3262d2449
< 
3266d2452
< 
3270d2455
< 
3275d2459
< 
3283d2466
< 
3292d2474
< 
3297d2478
< 
3307,3309d2487
< 
< 
< 
3343,3345d2520
< 
< 
< 
3352,3354d2526
< 
< 
< 
3380,3382d2551
< 
< 
< 
3387d2555
< 
3389,3390d2556
< 
<       
3392d2557
<          
3394d2558
<          
3403d2566
< 
3405,3406d2567
< 
<       
3408d2568
<          
3410d2569
<          
3412d2570
<          
3425,3427d2582
< 
< 
< 
3432d2586
< 
3434,3435d2587
< 
<       
3437,3438d2588
< 
<       
3440d2589
< 
3449d2597
< 
3452,3454d2599
< 
< 
< 
3461d2605
<    
3463d2606
< 
3476d2618
< 
3494d2635
< 
3496d2636
< 
3499,3501d2638
< 
< 
< 
3510d2646
< 
3513d2648
< 
3516d2650
< 
3536d2669
< 
3546d2678
< 
3560,3562d2691
< 
< 
< 
3570d2698
< 
3575d2702
< 
3577d2703
< 
3580,3586d2705
< 
< 
< 
< 
< 
< 
< 
3593d2711
< 
3595d2712
< 
3599d2715
< 
3602d2717
< 
3621d2735
< 
3624,3626d2737
< 
< 
< 
3631d2741
< 
3633d2742
< 
3635d2743
<          
3647,3648d2754
<    
<          
3650,3651d2755
<                
<    
3658d2761
<    
3664d2766
<    
3670d2771
<    
3677d2777
< 
3679,3680d2778
< 
<       
3690,3691d2787
<       
< 
3695d2790
< 
3697,3698d2791
< 
<          
3720d2812
<          
3731d2822
<    
3736d2826
<    
3741d2830
<    
3746d2834
< 
3752,3753d2839
< 
<       
3763d2848
<       
3766,3769d2850
< 
< 
< 
< 
3782,3784d2862
< 
< 
< 
3789d2866
< 
3791d2867
< 
3793d2868
<          
3805,3806d2879
<    
<          
3808,3809d2880
<                
<    
3816d2886
<    
3822d2891
<    
3828d2896
<    
3835d2902
< 
3837d2903
< 
3839d2904
<          
3851,3852d2915
<    
<          
3854d2916
<    
3860d2921
<    
3865d2925
<    
3870d2929
<    
3875d2933
< 
3878,3880d2935
< 
< 
< 
3888d2942
< 
3925d2978
< 
3927d2979
< 
3930,3932d2981
< 
< 
< 
3940d2988
< 
3944d2991
< 
3947d2993
< 
3950,3955d2995
< 
< 
< 
< 
< 
< 
3961d3000
< 
3973,3975d3011
< 
< 
< 
3983,3985d3018
< 
< 
< 
3995d3027
< 
3997d3028
< 
4003d3033
< 
4006d3035
< 
4010d3038
< 
4019d3046
< 
4025d3051
< 
4030,4033d3055
< 
< 
< 
< 
4042d3063
< 
4050d3070
< 
4053d3072
< 
4056d3074
< 
4063d3080
< 
4071d3087
< 
4076,4078d3091
< 
< 
< 
4089,4090d3101
< 
< 
4102d3112
< 
4109d3118
< 
4114d3122
< 
4122d3129
< 
4130d3136
< 
4134d3139
< 
4140d3144
< 
4149d3152
< 
4154,4156d3156
< 
< 
< 
4167d3166
< 
4169d3167
< 
4176d3173
< 
4179d3175
< 
4183d3178
< 
4185d3179
< 
4193d3186
<    
4199d3191
< 
4203d3194
< 
4206d3196
< 
4210,4212d3199
< 
< 
< 
4216d3202
< 
4220d3205
< 
4223d3207
< 
4228,4230d3211
< 
< 
< 
4239d3219
< 
4241d3220
< 
4244d3222
< 
4247d3224
< 
4250d3226
< 
4253d3228
< 
4255d3229
< 
4258d3231
< 
4268d3240
< 
4270d3241
< 
4273d3243
< 
4277d3246
< 
4283d3251
<       
4285d3252
< 
4288,4290d3254
< 
< 
< 
4304d3267
< 
4309,4315d3271
< 
< 
< 
< 
< 
< 
< 
4327d3282
< 
4334d3288
< 
4342d3295
< 
4347d3299
< 
4351,4352d3302
< 
<    
4356d3305
< 
4360d3308
< 
4365,4367d3312
< 
< 
< 
4378d3322
< 
4384d3327
< 
4390d3332
< 
4395d3336
< 
4399,4400d3339
< 
<    
4404d3342
< 
4413d3350
< 
4418,4425d3354
< 
< 
< 
< 
< 
< 
< 
< 
4430,4433d3358
< 
< 
< 
< 
4452d3376
< 
4471d3394
< 
4482d3404
< 
4484d3405
<       
4499,4502d3419
< 
< 
< 
< 
4509,4511d3425
< 
< 
< 
4518,4520d3431
< 
< 
< 
4532,4534d3442
< 
< 
< 
4538d3445
< 
4546,4548d3452
< 
< 
< 
4551d3454
<    
4554,4556d3456
< 
< 
< 
4561d3460
<    
4575,4578d3473
< 
< 
< 
< 
4597,4598d3491
< 
< 
4602d3494
< 
4607,4634d3498
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
4636,4637d3499
< 
< 
4639,4643d3500
< 
< 
< 
< 
< 
4646d3502
< 
4650,4654d3505
< 
< 
< 
< 
< 
4658d3508
< 
4664d3513
< 
4667d3515
< 
4670d3517
< 
4672d3518
< 
4674d3519
< 
4676,4681d3520
< 
< 
< 
< 
< 
<                                        
4684,4685d3522
< 
< 
4687,4692d3523
< 
< 
< 
< 
< 
< 
4698,4699d3528
< 
< 
4703,4704d3531
< 
< 
4708d3534
< 
4711d3536
< 
4713d3537
< 
4722d3545
< 
4730d3552
< 
4733,4740d3554
< 
< 
< 
< 
< 
< 
< 
< 
4744,4745d3557
< 
< 
4758,4759d3569
< 
< 
4772,4773d3581
< 
< 
4782,4784d3589
< 
< 
< 
4798,4800d3602
< 
< 
< 
4817,4825d3618
< 
< 
< 
< 
< 
< 
< 
< 
< 
4835d3627
< 
4838d3629
< 
4841d3631
< 
4845d3634
< 
4847d3635
< 
4849d3636
< 
4855d3641
< 
4857d3642
< 
4862d3646
< 
4875d3658
< 
4901d3683
< 
4903d3684
< 
4919d3699
< 
4921d3700
<    
4923,4926d3701
< 
< 
< 
< 
4936d3710
< 
4939d3712
< 
4942d3714
< 
4945d3716
< 
4947d3717
< 
4954d3723
< 
4963d3731
< 
4966d3733
< 
4968d3734
< 
4971d3736
< 
4974d3738
< 
4979d3742
< 
4991d3753
< 
5004d3765
<   
5034d3794
< 
5038,5040d3797
< 
< 
< 
5050d3806
< 
5053d3808
< 
5056d3810
< 
5058d3811
< 
5065d3817
< 
5071d3822
< 
5074d3824
< 
5076d3825
< 
5080d3828
< 
5082d3829
< 
5086d3832
< 
5089d3834
< 
5125d3869
< 
5129,5135d3872
< 
< 
< 
< 
< 
< 
< 
5141,5143d3877
< 
< 
< 
5156,5158d3889
< 
< 
< 
5169,5171d3899
< 
< 
< 
5177d3904
< 
5181,5182d3907
< 
<       
5213d3937
< 
5224,5226d3947
< 
< 
< 
5239,5241d3959
< 
< 
< 
5252,5254d3969
< 
< 
< 
5269,5271d3983
< 
< 
< 
5283,5285d3994
< 
< 
< 
5294,5296d4002
< 
< 
< 
5344d4049
< 
5350,5352d4054
< 
< 
< 
5362,5364d4063
< 
< 
< 
5377,5385d4075
< 
< 
< 
< 
< 
< 
< 
< 
< 
5394,5396d4083
< 
< 
< 
5411d4097
< 
5415,5417d4100
< 
< 
< 
5426,5429d4108
< 
< 
< 
< 
5444,5447d4122
< 
< 
< 
< 
5453d4127
< 
5459,5462d4132
< 
< 
< 
< 
5468d4137
< 
5473,5476d4141
< 
< 
< 
< 
5481d4145
< 
5487d4150
<    
5492,5493d4154
< 
< 
5500d4160
< 
5503d4162
< 
5506d4164
< 
5509d4166
< 
5511d4167
<    
5514,5516d4169
< 
< 
< 
5521d4173
<    
5524d4175
<    
5530,5532d4180
< 
< 
< 
5534d4181
< 
5539d4185
< 
5549d4194
< 
5559,5561d4203
< 
< 
< 
5569d4210
< 
5571d4211
< 
5574d4213
< 
5590d4228
< 
5648d4285
< 
5650d4286
<       
5653d4288
< 
5655d4289
< 
5669d4302
< 
5690d4322
< 
5709d4340
< 
5714d4344
< 
5720,5721d4349
< 
<    
5726,5727d4353
< 
<    
5736d4361
< 
5739,5741d4363
< 
< 
< 
5751d4372
< 
5753d4373
< 
5756d4375
< 
5777d4395
< 
5814d4431
<       
5833d4449
< 
5835d4450
<       
5838d4452
< 
5840d4453
< 
5854d4466
< 
5866d4477
< 
5885d4495
< 
5890d4499
< 
5896,5897d4504
< 
<    
5902,5903d4508
< 
<    
5922d4526
< 
5934d4537
< 
5936,5938d4538
< 
< 
< 
5945d4544
< 
5947d4545
< 
5950d4547
< 
5957d4553
< 
5981d4576
< 
5983d4577
< 
5996d4589
< 
6006d4598
< 
6011d4602
< 
6017,6018d4607
< 
<    
6021d4609
< 
6025,6027d4612
< 
< 
< 
6032d4616
< 
6050,6052d4633
< 
< 
< 
6089d4669
< 
6094,6096d4673
< 
< 
< 
6105,6109d4681
< 
< 
< 
< 
< 
6116,6118d4687
< 
< 
< 
6123d4691
< 
6128,6130d4695
< 
< 
< 
6135d4699
< 
6141,6143d4704
< 
< 
< 
6159,6161d4719
< 
< 
< 
6167d4724
< 
6187,6189d4743
< 
< 
< 
6191d4744
< 
6199,6200d4751
< 
<    
6205,6206d4755
< 
<    
6222,6223d4770
< 
<    
6228d4774
< 
6231d4776
< 
6236,6238d4780
< 
< 
<    
6244,6246d4785
< 
< 
<    
6257,6259d4795
< 
< 
<    
6262,6265d4797
< 
< 
<    
<    
6267d4798
< 
6271d4801
< 
6279,6281d4808
< 
< 
<    
6319,6320d4845
<    
<    
6347d4871
< 
6351d4874
< 
6357d4879
< 
6360d4881
< 
6362d4882
< 
6370d4889
< 
6385d4903
< 
6404d4921
< 
6428,6429d4944
< 
<    
6437d4951
< 
6440,6444d4953
< 
< 
< 
< 
<  
\ No newline at end of file
===< pass_clang_binsrch :: replace-function-def-with-decl >===
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2127c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
---
> ;
2129d1204
<    
2132,2518c1207,1208
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
< 
< 
< 
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> void BZ2_compressBlock ( EState* s, Bool is_last_block )
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
2613,3119c1295
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
3138,3181c1314
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
3187,3192c1320
< {
<    if (sizeof(int)   != 4) return 0;
<    if (sizeof(short) != 2) return 0;
<    if (sizeof(char)  != 1) return 0;
<    return 1;
< }
---
> ;
3198,3201c1326
< {
<    void* v = malloc ( items * size );
<    return v;
< }
---
> ;
3205,3207c1330
< {
<    if (addr != NULL) free ( addr );
< }
---
> ;
3213,3221c1336
< {
<    Int32 i;
<    s->nblock = 0;
<    s->numZ = 0;
<    s->state_out_pos = 0;
<    BZ_INITIALISE_CRC ( s->blockCRC );
<    for (i = 0; i < 256; i++) s->inUse[i] = False;
<    s->blockNo++;
< }
---
> ;
3227,3230c1342
< {
<    s->state_in_ch  = 256;
<    s->state_in_len = 0;
< }
---
> ;
3235,3239c1347
< {
<    if (s->state_in_ch < 256 && s->state_in_len > 0)
<       return False; else
<       return True;
< }
---
> ;
3312,3342c1420
< {
<    Int32 i;
<    UChar ch = (UChar)(s->state_in_ch);
<    for (i = 0; i < s->state_in_len; i++) {
<       BZ_UPDATE_CRC( s->blockCRC, ch );
<    }
<    s->inUse[s->state_in_ch] = True;
<    switch (s->state_in_len) {
<       case 1:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 2:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 3:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       default:
<          s->inUse[s->state_in_len-4] = True;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = ((UChar)(s->state_in_len-4));
<          s->nblock++;
<          break;
<    }
< }
---
> ;
3348,3351c1426
< {
<    if (s->state_in_ch < 256) add_pair_to_block ( s );
<    init_RL ( s );
< }
---
> ;
3385,3424c1460
< {
<    Bool progress_in = False;
< 
<    if (s->mode == BZ_M_RUNNING) {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<       }
< 
<    } else {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          
<          if (s->avail_in_expect == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<          s->avail_in_expect--;
<       }
<    }
<    return progress_in;
< }
---
> ;
3430,3451c1466
< {
<    Bool progress_out = False;
< 
<    while (True) {
< 
<       
<       if (s->strm->avail_out == 0) break;
< 
<       
<       if (s->state_out_pos >= s->numZ) break;
< 
<       progress_out = True;
<       *(s->strm->next_out) = s->zbits[s->state_out_pos];
<       s->state_out_pos++;
<       s->strm->avail_out--;
<       s->strm->next_out++;
<       s->strm->total_out_lo32++;
<       if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<    }
< 
<    return progress_out;
< }
---
> ;
3457,3498c1472
< {
<    Bool progress_in  = False;
<    Bool progress_out = False;
<    EState* s = strm->state;
<    
<    while (True) {
< 
<       if (s->state == BZ_S_OUTPUT) {
<          progress_out |= copy_output_until_stop ( s );
<          if (s->state_out_pos < s->numZ) break;
<          if (s->mode == BZ_M_FINISHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<          prepare_new_block ( s );
<          s->state = BZ_S_INPUT;
<          if (s->mode == BZ_M_FLUSHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<       }
< 
<       if (s->state == BZ_S_INPUT) {
<          progress_in |= copy_input_until_stop ( s );
<          if (s->mode != BZ_M_RUNNING && s->avail_in_expect == 0) {
<             flush_RL ( s );
<             BZ2_compressBlock ( s, (Bool)(s->mode == BZ_M_FINISHING) );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->nblock >= s->nblockMAX) {
<             BZ2_compressBlock ( s, False );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->strm->avail_in == 0) {
<             break;
<          }
<       }
< 
<    }
< 
<    return progress_in || progress_out;
< }
---
> ;
3629,3630c1603
< {
<    UChar k1;
---
> ;
3632d1604
<    if (s->blockRandomised) {
3634,3676d1605
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
3678d1606
<    } else {
3680,3781c1608,1609
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
< 
< 
< 
< 
< Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
> ;
3787,3877c1615
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3977,3982c1715
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> ;
4440,4498c2173
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
4748,4757c2423
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
---
> ;
4762,4771c2428
< {
<    Int32  i;
<    double base = 1.0;
<    double sum  = 0.0;
<    for (i = 0; i < 8; i++) {
<       sum  += base * (double)(n->b[i]);
<       base *= 256.0;
<    }
<    return sum;
< }
---
> ;
4776,4781c2433
< {
<    Int32 i;
<    for (i = 0; i < 8; i++)
<       if (n->b[i] != 0) return 0;
<    return 1;
< }
---
> ;
4787,4797c2439
< {
<    UInt32 rem, tmp;
<    Int32  i;
<    rem = 0;
<    for (i = 7; i >= 0; i--) {
<       tmp = rem * 256 + n->b[i];
<       n->b[i] = tmp / 10;
<       rem = tmp % 10;
<    }
<    return rem;
< }
---
> ;
4803,4816c2445
< {
<    Int32  i, q;
<    UChar  buf[32];
<    Int32  nBuf   = 0;
<    UInt64 n_copy = *n;
<    do {
<       q = uInt64_qrm10 ( &n_copy );
<       buf[nBuf] = q + '0';
<       nBuf++;
<    } while (!uInt64_isZero(&n_copy));
<    outbuf[nBuf] = 0;
<    for (i = 0; i < nBuf; i++) 
<       outbuf[i] = buf[nBuf-i-1];
< }
---
> ;
4828,4922c2457
< {
<    BZFILE* bzf = NULL;
<    UChar   ibuf[5000];
<    Int32   nIbuf;
<    UInt32  nbytes_in_lo32, nbytes_in_hi32;
<    UInt32  nbytes_out_lo32, nbytes_out_hi32;
<    Int32   bzerr, bzerr_dummy, ret;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    bzf = BZ2_bzWriteOpen ( &bzerr, zStream, 
<                            blockSize100k, verbosity, workFactor );   
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n" );
< 
<    while (True) {
< 
<       if (myfeof(stream)) break;
<       nIbuf = fread ( ibuf, sizeof(UChar), 5000, stream );
<       if (ferror(stream)) goto errhandler_io;
<       if (nIbuf > 0) BZ2_bzWrite ( &bzerr, bzf, (void*)ibuf, nIbuf );
<       if (bzerr != BZ_OK) goto errhandler;
< 
<    }
< 
<    BZ2_bzWriteClose64 ( &bzerr, bzf, 0, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fflush ( zStream );
<    if (ret == EOF) goto errhandler_io;
<    if (zStream != stdout) {
<       ret = fclose ( zStream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (ferror(stream)) goto errhandler_io;
<    ret = fclose ( stream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 1) {
<       if (nbytes_in_lo32 == 0 && nbytes_in_hi32 == 0) {
< 	 fprintf ( stderr, " no data compressed.\n");
<       } else {
< 	 Char   buf_nin[32], buf_nout[32];
< 	 UInt64 nbytes_in,   nbytes_out;
< 	 double nbytes_in_d, nbytes_out_d;
< 	 uInt64_from_UInt32s ( &nbytes_in, 
< 			       nbytes_in_lo32, nbytes_in_hi32 );
< 	 uInt64_from_UInt32s ( &nbytes_out, 
< 			       nbytes_out_lo32, nbytes_out_hi32 );
< 	 nbytes_in_d  = uInt64_to_double ( &nbytes_in );
< 	 nbytes_out_d = uInt64_to_double ( &nbytes_out );
< 	 uInt64_toAscii ( buf_nin, &nbytes_in );
< 	 uInt64_toAscii ( buf_nout, &nbytes_out );
< 	 fprintf ( stderr, "%6.3f:1, %6.3f bits/byte, "
< 		   "%5.2f%% saved, %s in, %s out.\n",
< 		   nbytes_in_d / nbytes_out_d,
< 		   (8.0 * nbytes_out_d) / nbytes_in_d,
< 		   100.0 * (1.0 - nbytes_out_d / nbytes_in_d),
< 		   buf_nin,
< 		   buf_nout
< 		 );
<       }
<    }
< 
<    return;
< 
<    errhandler:
<    BZ2_bzWriteClose64 ( &bzerr_dummy, bzf, 1, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_MEM_ERROR:
<          outOfMemory (); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       default:
<          panic ( "compress:unexpected error" );
<    }
< 
<    panic ( "compress:end" );
<    
< }
---
> ;
4929,5037c2464
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto trycat;
<          if ((bzerr == BZ_OK || bzerr == BZ_STREAM_END) && nread > 0)
<             fwrite ( obuf, sizeof(UChar), nread, stream );
<          if (ferror(stream)) goto errhandler_io;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       if (nUnused == 0 && myfeof(zStream)) break;
<    }
< 
<    closeok:
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (ferror(stream)) goto errhandler_io;
<    ret = fflush ( stream );
<    if (ret != 0) goto errhandler_io;
<    if (stream != stdout) {
<       ret = fclose ( stream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    trycat: 
<    if (forceOverwrite) {
<       rewind(zStream);
<       while (True) {
<       	 if (myfeof(zStream)) break;
<       	 nread = fread ( obuf, sizeof(UChar), 5000, zStream );
<       	 if (ferror(zStream)) goto errhandler_io;
<       	 if (nread > 0) fwrite ( obuf, sizeof(UChar), nread, stream );
<       	 if (ferror(stream)) goto errhandler_io;
<       }
<       goto closeok;
<    }
<   
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          crcError();
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          compressedStreamEOF();
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (stream != stdout) fclose(stream);
<          if (streamNo == 1) {
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "\n%s: %s: trailing garbage after EOF ignored\n",
<                       progName, inName );
<             return True;       
<          }
<       default:
<          panic ( "decompress:unexpected error" );
<    }
< 
<    panic ( "decompress:end" );
<    return True; 
< }
---
> ;
5043,5128c2470
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(zStream);
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto errhandler;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
<       if (nUnused == 0 && myfeof(zStream)) break;
< 
<    }
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    if (verbosity == 0) 
<       fprintf ( stderr, "%s: %s: ", progName, inName );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          fprintf ( stderr,
<                    "data integrity (CRC) error in data\n" );
<          return False;
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          fprintf ( stderr,
<                    "file ends unexpectedly\n" );
<          return False;
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (streamNo == 1) {
<           fprintf ( stderr, 
<                     "bad magic number (file not created by bzip2)\n" );
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "trailing garbage after EOF ignored\n" );
<             return True;       
<          }
<       default:
<          panic ( "test:unexpected error" );
<    }
< 
<    panic ( "test:end" );
<    return True; 
< }
---
> ;
5138,5140c2480
< {
<    if (v > exitValue) exitValue = v;
< }
---
> ;
5146,5155c2486
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\nIt is possible that the compressed file(s) have become corrupted.\n"
<         "You can use the -tvv option to test integrity of such files.\n\n"
<         "You can use the `bzip2recover' program to attempt to recover\n"
<         "data from undamaged sections of corrupted files.\n\n"
<     );
< }
---
> ;
5161,5168c2492
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\tInput file = %s, output file = %s\n",
<       inName, outName 
<    );
< }
---
> ;
5174,5223c2498
< {
<    IntNative      retVal;
<    struct MY_STAT statBuf;
< 
<    if ( srcMode == SM_F2F 
<         && opMode != OM_TEST
<         && deleteOutputOnInterrupt ) {
< 
<       
<       retVal = MY_STAT ( inName, &statBuf );
<       if (retVal == 0) {
<          if (noisy)
<             fprintf ( stderr, 
<                       "%s: Deleting output file %s, if it exists.\n",
<                       progName, outName );
<          if (outputHandleJustInCase != NULL)
<             fclose ( outputHandleJustInCase );
<          retVal = remove ( outName );
<          if (retVal != 0)
<             fprintf ( stderr,
<                       "%s: WARNING: deletion of output file "
<                       "(apparently) failed.\n",
<                       progName );
<       } else {
<          fprintf ( stderr,
<                    "%s: WARNING: deletion of output file suppressed\n",
<                     progName );
<          fprintf ( stderr,
<                    "%s:    since input file no longer exists.  Output file\n",
<                    progName );
<          fprintf ( stderr,
<                    "%s:    `%s' may be incomplete.\n",
<                    progName, outName );
<          fprintf ( stderr, 
<                    "%s:    I suggest doing an integrity test (bzip2 -tv)"
<                    " of it.\n",
<                    progName );
<       }
<    }
< 
<    if (noisy && numFileNames > 0 && numFilesProcessed < numFileNames) {
<       fprintf ( stderr, 
<                 "%s: WARNING: some files have not been processed:\n"
<                 "%s:    %d specified on command line, %d not processed yet.\n\n",
<                 progName, progName,
<                 numFileNames, numFileNames - numFilesProcessed );
<    }
<    setExit(ec);
<    exit(exitValue);
< }
---
> ;
5229,5238c2504
< {
<    fprintf ( stderr,
<              "\n%s: PANIC -- internal consistency error:\n"
<              "\t%s\n"
<              "\tThis is a BUG.  Please report it to me at:\n"
<              "\tjseward@acm.org\n",
<              progName, s );
<    showFileNames();
<    cleanUpAndFail( 3 );
< }
---
> ;
5244,5251c2510
< {
<    fprintf ( stderr,
<              "\n%s: Data integrity error when decompressing.\n",
<              progName );
<    showFileNames();
<    cadvise();
<    cleanUpAndFail( 2 );
< }
---
> ;
5257,5268c2516
< {
<   if (noisy) {
<     fprintf ( stderr,
< 	      "\n%s: Compressed file ends unexpectedly;\n\t"
< 	      "perhaps it is corrupted?  *Possible* reason follows.\n",
< 	      progName );
<     perror ( progName );
<     showFileNames();
<     cadvise();
<   }
<   cleanUpAndFail( 2 );
< }
---
> ;
5274,5282c2522
< {
<    fprintf ( stderr,
<              "\n%s: I/O or other error, bailing out.  "
<              "Possible reason follows.\n",
<              progName );
<    perror ( progName );
<    showFileNames();
<    cleanUpAndFail( 1 );
< }
---
> ;
5288,5293c2528
< {
<    fprintf ( stderr,
<              "\n%s: Control-C or similar caught, quitting.\n",
<              progName );
<    cleanUpAndFail(1);
< }
---
> ;
5299,5349c2534
< {
<    if (opMode == OM_Z)
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst compressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (2) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (3) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (1) and (2).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (1)\n"
<       "   or (2), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
<       else
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst decompressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) The compressed data is corrupted, and bzip2's usual checks\n"
<       "       failed to detect this.  Try bzip2 -tvv my_file.bz2.\n"
<       "   (2) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (3) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (4) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (2) and (3).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (2)\n"
<       "   or (3), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
< 
<    showFileNames();
<    if (opMode == OM_Z)
<       cleanUpAndFail( 3 ); else
<       { cadvise(); cleanUpAndFail( 2 ); }
< }
---
> ;
5355,5361c2540
< {
<    fprintf ( stderr,
<              "\n%s: couldn't allocate enough memory\n",
<              progName );
<    showFileNames();
<    cleanUpAndFail(1);
< }
---
> ;
5367,5376c2546
< {
<    fprintf ( stderr,
<              "bzip2: I'm not configured correctly for this platform!\n"
<              "\tI require Int32, Int16 and Char to have sizes\n"
<              "\tof 4, 2 and 1 bytes to run properly, and they don't.\n"
<              "\tProbably you can fix this by defining them correctly,\n"
<              "\tand recompiling.  Bye!\n" );
<    setExit(3);
<    exit(exitValue);
< }
---
> ;
5388,5393c2558
< {
<    Int32 i;
<    if ( (Int32)strlen(s) >= longestFileName ) return;
<    for (i = 1; i <= longestFileName - (Int32)strlen(s); i++)
<       fprintf ( stderr, " " );
< }
---
> ;
5399,5414c2564
< {
<    if ( strlen(from) > FILE_NAME_LEN-10 )  {
<       fprintf (
<          stderr,
<          "bzip2: file name\n`%s'\n"
<          "is suspiciously (more than %d chars) long.\n"
<          "Try using a reasonable file name instead.  Sorry! :-)\n",
<          from, FILE_NAME_LEN-10
<       );
<       setExit(1);
<       exit(exitValue);
<    }
< 
<   strncpy(to,from,FILE_NAME_LEN-10);
<   to[FILE_NAME_LEN-10]='\0';
< }
---
> ;
5420,5425c2570
< {
<    FILE *tmp   = fopen ( name, "rb" );
<    Bool exists = (tmp != NULL);
<    if (tmp != NULL) fclose ( tmp );
<    return exists;
< }
---
> ;
5431,5443c2576
< {
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
<    return fopen(name, mode);
< #  endif
< }
---
> ;
5450,5458c2583
< {
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return True;
<    if (MY_S_ISREG(statBuf.st_mode)) return False;
<    return True;
< }
---
> ;
5465,5472c2590
< {  
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return 0;
<    return (statBuf.st_nlink - 1);
< }
---
> ;
5484,5491c2602
< {
< #  if BZ_UNIX
<    IntNative retVal;
<    
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
< }
---
> ;
5496,5513c2607
< {
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    
< #  endif
< }
---
> ;
5519,5529c2613
< {
< #  if BZ_UNIX
<    
<    return False;
< #  else 
<    
<    for (; *name != '\0'; name++)
<       if (*name == '?' || *name == '*') return True;
<    return False;
< #  endif 
< }
---
> ;
5542,5548c2626
< {
<    Int32 ns = strlen(s);
<    Int32 nx = strlen(suffix);
<    if (ns < nx) return False;
<    if (strcmp(s + ns - nx, suffix) == 0) return True;
<    return False;
< }
---
> ;
5553,5558c2631
< {
<    if (!hasSuffix(name,oldSuffix)) return False;
<    name[strlen(name)-strlen(oldSuffix)] = 0;
<    strcat ( name, newSuffix );
<    return True;
< }
---
> ;
5564,5738c2637
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "compress: bad modes\n" );
< 
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          strcat ( outName, ".bz2" ); 
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++) {
<       if (hasSuffix(inName, zSuffix[i])) {
<          if (noisy)
<          fprintf ( stderr, 
<                    "%s: Input file %s already has %s suffix.\n",
<                    progName, inName, zSuffix[i] );
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	 remove(outName);
<       } else {
< 	 fprintf ( stderr, "%s: Output file %s already exists.\n",
< 		   progName, outName );
< 	 setExit(1);
< 	 return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName )) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "compress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr,  "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    compressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( srcMode == SM_F2F ) {
<       applySavedMetaInfoToOutputFile ( outName );
<       deleteOutputOnInterrupt = False;
<       if ( !keepInputFiles ) {
<          IntNative retVal = remove ( inName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
< 
<    deleteOutputOnInterrupt = False;
< }
---
> ;
5744,5935c2643
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    Bool  magicNumberOK;
<    Bool  cantGuess;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "uncompress: bad modes\n" );
< 
<    cantGuess = False;
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++)
<             if (mapSuffix(outName,zSuffix[i],unzSuffix[i]))
<                goto zzz; 
<          cantGuess = True;
<          strcat ( outName, ".out" );
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    zzz:
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if (  cantGuess ) {
<       if (noisy)
<       fprintf ( stderr, 
<                 "%s: Can't guess original name for %s -- using %s\n",
<                 progName, inName, outName );
<       
<    }   
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	remove(outName);
<       } else {
<         fprintf ( stderr, "%s: Output file %s already exists.\n",
<                   progName, outName );
<         setExit(1);
<         return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName ) ) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "uncompress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    magicNumberOK = uncompressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( magicNumberOK ) {
<       if ( srcMode == SM_F2F ) {
<          applySavedMetaInfoToOutputFile ( outName );
<          deleteOutputOnInterrupt = False;
<          if ( !keepInputFiles ) {
<             IntNative retVal = remove ( inName );
<             ERROR_IF_NOT_ZERO ( retVal );
<          }
<       }
<    } else {
<       unzFailsExist = True;
<       deleteOutputOnInterrupt = False;
<       if ( srcMode == SM_F2F ) {
<          IntNative retVal = remove ( outName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
<    deleteOutputOnInterrupt = False;
< 
<    if ( magicNumberOK ) {
<       if (verbosity >= 1)
<          fprintf ( stderr, "done\n" );
<    } else {
<       setExit(2);
<       if (verbosity >= 1)
<          fprintf ( stderr, "not a bzip2 file.\n" ); else
<          fprintf ( stderr,
<                    "%s: %s is not a bzip2 file.\n",
<                    progName, inName );
<    }
< 
< }
---
> ;
5941,6024c2649
< {
<    FILE *inStr;
<    Bool allOK;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "testf: bad modes\n" );
< 
<    copyFileName ( outName, "(none)" );
<    switch (srcMode) {
<       case SM_I2O: copyFileName ( inName, "(stdin)" ); break;
<       case SM_F2F: copyFileName ( inName, name ); break;
<       case SM_F2O: copyFileName ( inName, name ); break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          inStr = stdin;
<          break;
< 
<       case SM_F2O: case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "testf: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = NULL;
<    allOK = testStream ( inStr );
< 
<    if (allOK && verbosity >= 1) fprintf ( stderr, "ok\n" );
<    if (!allOK) testFailsExist = True;
< }
---
> ;
6030,6049c2655
< {
<    fprintf ( stderr,
< 
<     "bzip2, a block-sorting file compressor.  "
<     "Version %s.\n"
<     "   \n"
<     "   Copyright (C) 1996-2002 by Julian Seward.\n"
<     "   \n"
<     "   This program is free software; you can redistribute it and/or modify\n"
<     "   it under the terms set out in the LICENSE file, which is included\n"
<     "   in the bzip2-1.0 source distribution.\n"
<     "   \n"
<     "   This program is distributed in the hope that it will be useful,\n"
<     "   but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
<     "   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
<     "   LICENSE file for more details.\n"
<     "   \n",
<     BZ2_bzlibVersion()
<    );
< }
---
> ;
6055,6093c2661
< {
<    fprintf (
<       stderr,
<       "bzip2, a block-sorting file compressor.  "
<       "Version %s.\n"
<       "\n   usage: %s [flags and input files in any order]\n"
<       "\n"
<       "   -h --help           print this message\n"
<       "   -d --decompress     force decompression\n"
<       "   -z --compress       force compression\n"
<       "   -k --keep           keep (don't delete) input files\n"
<       "   -f --force          overwrite existing output files\n"
<       "   -t --test           test compressed file integrity\n"
<       "   -c --stdout         output to standard out\n"
<       "   -q --quiet          suppress noncritical error messages\n"
<       "   -v --verbose        be verbose (a 2nd -v gives more)\n"
<       "   -L --license        display software version & license\n"
<       "   -V --version        display software version & license\n"
<       "   -s --small          use less memory (at most 2500k)\n"
<       "   -1 .. -9            set block size to 100k .. 900k\n"
<       "   --fast              alias for -1\n"
<       "   --best              alias for -9\n"
<       "\n"
<       "   If invoked as `bzip2', default action is to compress.\n"
<       "              as `bunzip2',  default action is to decompress.\n"
<       "              as `bzcat', default action is to decompress to stdout.\n"
<       "\n"
<       "   If no file names are given, bzip2 compresses or decompresses\n"
<       "   from standard input to standard output.  You can combine\n"
<       "   short flags, so `-v -4' means the same as -v4 or -4v, &c.\n"
< #     if BZ_UNIX
<       "\n"
< #     endif
<       ,
< 
<       BZ2_bzlibVersion(),
<       fullProgName
<    );
< }
---
> ;
6099,6104c2667
< {
<    fprintf ( 
<       stderr, 
<       "%s: %s is redundant in versions 0.9.5 and above\n",
<       progName, flag );
< }
---
> ;
6121,6127c2684
< {
<    void* p;
< 
<    p = malloc ( (size_t)n );
<    if (p == NULL) outOfMemory ();
<    return p;
< }
---
> ;
6133,6140c2690
< {
<    Cell *c;
< 
<    c = (Cell*) myMalloc ( sizeof ( Cell ) );
<    c->name = NULL;
<    c->link = NULL;
<    return c;
< }
---
> ;
6146,6158c2696
< {
<    if (root == NULL) {
<       Cell *tmp = mkCell();
<       tmp->name = (Char*) myMalloc ( 5 + strlen(name) );
<       strcpy ( tmp->name, name );
<       return tmp;
<    } else {
<       Cell *tmp = root;
<       while (tmp->link != NULL) tmp = tmp->link;
<       tmp->link = snocString ( tmp->link, name );
<       return root;
<    }
< }
---
> ;
6164,6186c2702
< {
<    Int32 i, j, k;
<    Char *envbase, *p;
< 
<    envbase = getenv(varName);
<    if (envbase != NULL) {
<       p = envbase;
<       i = 0;
<       while (True) {
<          if (p[i] == 0) break;
<          p += i;
<          i = 0;
<          while (isspace((Int32)(p[0]))) p++;
<          while (p[i] != 0 && !isspace((Int32)(p[i]))) i++;
<          if (i > 0) {
<             k = i; if (k > FILE_NAME_LEN-10) k = FILE_NAME_LEN-10;
<             for (j = 0; j < k; j++) tmpName[j] = p[j];
<             tmpName[k] = 0;
<             APPEND_FLAG(*argList, tmpName);
<          }
<       }
<    }
< }
---
> ;
6193,6439c2709
< {
<    Int32  i, j;
<    Char   *tmp;
<    Cell   *argList;
<    Cell   *aa;
<    Bool   decode;
< 
<    
<    if (sizeof(Int32) != 4 || sizeof(UInt32) != 4  ||
<        sizeof(Int16) != 2 || sizeof(UInt16) != 2  ||
<        sizeof(Char)  != 1 || sizeof(UChar)  != 1)
<       configError();
< 
<    
<    outputHandleJustInCase  = NULL;
<    smallMode               = False;
<    keepInputFiles          = False;
<    forceOverwrite          = False;
<    noisy                   = True;
<    verbosity               = 0;
<    blockSize100k           = 9;
<    testFailsExist          = False;
<    unzFailsExist           = False;
<    numFileNames            = 0;
<    numFilesProcessed       = 0;
<    workFactor              = 30;
<    deleteOutputOnInterrupt = False;
<    exitValue               = 0;
<    i = j = 0; 
< 
<    
<    signal (SIGSEGV, mySIGSEGVorSIGBUScatcher);
< #  if BZ_UNIX
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< 
<    copyFileName ( inName,  "(none)" );
<    copyFileName ( outName, "(none)" );
< 
<    copyFileName ( progNameReally, argv[0] );
<    progName = &progNameReally[0];
<    for (tmp = &progNameReally[0]; *tmp != '\0'; tmp++)
<       if (*tmp == PATH_SEP) progName = tmp + 1;
< 
< 
<    
<    argList = NULL;
<    addFlagsFromEnvVar ( &argList,  "BZIP2" );
<    addFlagsFromEnvVar ( &argList,  "BZIP" );
<    for (i = 1; i <= argc-1; i++)
<       APPEND_FILESPEC(argList, argv[i]);
< 
< 
<    
<    longestFileName = 7;
<    numFileNames    = 0;
<    decode          = True;
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) { decode = False; continue; }
<       if (aa->name[0] == '-' && decode) continue;
<       numFileNames++;
<       if (longestFileName < (Int32)strlen(aa->name) )
<          longestFileName = (Int32)strlen(aa->name);
<    }
< 
< 
<    
<    if (numFileNames == 0)
<       srcMode = SM_I2O; else srcMode = SM_F2F;
< 
< 
<    
<    
<    opMode = OM_Z;
< 
<    if ( (strstr ( progName, "unzip" ) != 0) ||
<         (strstr ( progName, "UNZIP" ) != 0) )
<       opMode = OM_UNZ;
< 
<    if ( (strstr ( progName, "z2cat" ) != 0) ||
<         (strstr ( progName, "Z2CAT" ) != 0) ||
<         (strstr ( progName, "zcat" ) != 0)  ||
<         (strstr ( progName, "ZCAT" ) != 0) )  {
<       opMode = OM_UNZ;
<       srcMode = (numFileNames == 0) ? SM_I2O : SM_F2O;
<    }
< 
< 
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (aa->name[0] == '-' && aa->name[1] != '-') {
<          for (j = 1; aa->name[j] != '\0'; j++) {
<             switch (aa->name[j]) {
<                case 'c': srcMode          = SM_F2O; break;
<                case 'd': opMode           = OM_UNZ; break;
<                case 'z': opMode           = OM_Z; break;
<                case 'f': forceOverwrite   = True; break;
<                case 't': opMode           = OM_TEST; break;
<                case 'k': keepInputFiles   = True; break;
<                case 's': smallMode        = True; break;
<                case 'q': noisy            = False; break;
<                case '1': blockSize100k    = 1; break;
<                case '2': blockSize100k    = 2; break;
<                case '3': blockSize100k    = 3; break;
<                case '4': blockSize100k    = 4; break;
<                case '5': blockSize100k    = 5; break;
<                case '6': blockSize100k    = 6; break;
<                case '7': blockSize100k    = 7; break;
<                case '8': blockSize100k    = 8; break;
<                case '9': blockSize100k    = 9; break;
<                case 'V':
<                case 'L': license();            break;
<                case 'v': verbosity++; break;
<                case 'h': usage ( progName );
<                          exit ( 0 );
<                          break;
<                default:  fprintf ( stderr, "%s: Bad flag `%s'\n",
<                                    progName, aa->name );
<                          usage ( progName );
<                          exit ( 1 );
<                          break;
<             }
<          }
<       }
<    }
<    
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (ISFLAG("--stdout"))            srcMode          = SM_F2O;  else
<       if (ISFLAG("--decompress"))        opMode           = OM_UNZ;  else
<       if (ISFLAG("--compress"))          opMode           = OM_Z;    else
<       if (ISFLAG("--force"))             forceOverwrite   = True;    else
<       if (ISFLAG("--test"))              opMode           = OM_TEST; else
<       if (ISFLAG("--keep"))              keepInputFiles   = True;    else
<       if (ISFLAG("--small"))             smallMode        = True;    else
<       if (ISFLAG("--quiet"))             noisy            = False;   else
<       if (ISFLAG("--version"))           license();                  else
<       if (ISFLAG("--license"))           license();                  else
<       if (ISFLAG("--exponential"))       workFactor = 1;             else 
<       if (ISFLAG("--repetitive-best"))   redundant(aa->name);        else
<       if (ISFLAG("--repetitive-fast"))   redundant(aa->name);        else
<       if (ISFLAG("--fast"))              blockSize100k = 1;          else
<       if (ISFLAG("--best"))              blockSize100k = 9;          else
<       if (ISFLAG("--verbose"))           verbosity++;                else
<       if (ISFLAG("--help"))              { usage ( progName ); exit ( 0 ); }
<          else
<          if (strncmp ( aa->name, "--", 2) == 0) {
<             fprintf ( stderr, "%s: Bad flag `%s'\n", progName, aa->name );
<             usage ( progName );
<             exit ( 1 );
<          }
<    }
< 
<    if (verbosity > 4) verbosity = 4;
<    if (opMode == OM_Z && smallMode && blockSize100k > 2) 
<       blockSize100k = 2;
< 
<    if (opMode == OM_TEST && srcMode == SM_F2O) {
<       fprintf ( stderr, "%s: -c and -t cannot be used together.\n",
<                 progName );
<       exit ( 1 );
<    }
< 
<    if (srcMode == SM_F2O && numFileNames == 0)
<       srcMode = SM_I2O;
< 
<    if (opMode != OM_Z) blockSize100k = 0;
< 
<    if (srcMode == SM_F2F) {
<       signal (SIGINT,  mySignalCatcher);
<       signal (SIGTERM, mySignalCatcher);
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
<    }
< 
<    if (opMode == OM_Z) {
<      if (srcMode == SM_I2O) {
<         compress ( NULL );
<      } else {
<         decode = True;
<         for (aa = argList; aa != NULL; aa = aa->link) {
<            if (ISFLAG("--")) { decode = False; continue; }
<            if (aa->name[0] == '-' && decode) continue;
<            numFilesProcessed++;
<            compress ( aa->name );
<         }
<      }
<    } 
<    else
< 
<    if (opMode == OM_UNZ) {
<       unzFailsExist = False;
<       if (srcMode == SM_I2O) {
<          uncompress ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
<             if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             uncompress ( aa->name );
<          }      
<       }
<       if (unzFailsExist) { 
<          setExit(2); 
<          exit(exitValue);
<       }
<    } 
< 
<    else {
<       testFailsExist = False;
<       if (srcMode == SM_I2O) {
<          testf ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
< 	    if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             testf ( aa->name );
< 	 }
<       }
<       if (testFailsExist && noisy) {
<          fprintf ( stderr,
<            "\n"
<            "You can use the `bzip2recover' program to attempt to recover\n"
<            "data from undamaged sections of corrupted files.\n\n"
<          );
<          setExit(2);
<          exit(exitValue);
<       }
<    }
< 
<    
<    aa = argList;
<    while (aa != NULL) {
<       Cell* aa2 = aa->link;
<       if (aa->name != NULL) free(aa->name);
<       free(aa);
<       aa = aa2;
<    }
< 
<    return exitValue;
< }
---
> ;
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2448c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
< 
< static
< void sendMTFValues ( EState* s )
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
---
> ;
2450,2453d1179
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
2455,2457d1180
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
2461,2463d1183
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
2465,2473d1184
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
2475,2476c1186,1188
<       BZ2_blockSort ( s );
<    }
---
> static
> void makeMaps_e ( EState* s )
> ;
2478d1189
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
2480,2487d1190
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
2489c1192,1194
<    if (s->nblock > 0) {
---
> static
> void generateMTFValues ( EState* s )
> ;
2491,2493d1195
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
2495,2496d1196
<       
<       bsPutUInt32 ( s, s->blockCRC );
2498,2499c1198,1199
<       
<       bsW(s,1,0);
---
> #define BZ_LESSER_ICOST  0
> #define BZ_GREATER_ICOST 15
2501,2504c1201,1203
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
---
> static
> void sendMTFValues ( EState* s )
> ;
2507,2508d1205
<    
<    if (is_last_block) {
2510,2518c1207,1208
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> void BZ2_compressBlock ( EState* s, Bool is_last_block )
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
2613,3119c1295
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
3138,3181c1314
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
3187,3192c1320
< {
<    if (sizeof(int)   != 4) return 0;
<    if (sizeof(short) != 2) return 0;
<    if (sizeof(char)  != 1) return 0;
<    return 1;
< }
---
> ;
3198,3201c1326
< {
<    void* v = malloc ( items * size );
<    return v;
< }
---
> ;
3205,3207c1330
< {
<    if (addr != NULL) free ( addr );
< }
---
> ;
3213,3221c1336
< {
<    Int32 i;
<    s->nblock = 0;
<    s->numZ = 0;
<    s->state_out_pos = 0;
<    BZ_INITIALISE_CRC ( s->blockCRC );
<    for (i = 0; i < 256; i++) s->inUse[i] = False;
<    s->blockNo++;
< }
---
> ;
3227,3230c1342
< {
<    s->state_in_ch  = 256;
<    s->state_in_len = 0;
< }
---
> ;
3235,3239c1347
< {
<    if (s->state_in_ch < 256 && s->state_in_len > 0)
<       return False; else
<       return True;
< }
---
> ;
3312,3342c1420
< {
<    Int32 i;
<    UChar ch = (UChar)(s->state_in_ch);
<    for (i = 0; i < s->state_in_len; i++) {
<       BZ_UPDATE_CRC( s->blockCRC, ch );
<    }
<    s->inUse[s->state_in_ch] = True;
<    switch (s->state_in_len) {
<       case 1:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 2:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 3:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       default:
<          s->inUse[s->state_in_len-4] = True;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = ((UChar)(s->state_in_len-4));
<          s->nblock++;
<          break;
<    }
< }
---
> ;
3348,3351c1426
< {
<    if (s->state_in_ch < 256) add_pair_to_block ( s );
<    init_RL ( s );
< }
---
> ;
3385,3424c1460
< {
<    Bool progress_in = False;
< 
<    if (s->mode == BZ_M_RUNNING) {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<       }
< 
<    } else {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          
<          if (s->avail_in_expect == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<          s->avail_in_expect--;
<       }
<    }
<    return progress_in;
< }
---
> ;
3430,3451c1466
< {
<    Bool progress_out = False;
< 
<    while (True) {
< 
<       
<       if (s->strm->avail_out == 0) break;
< 
<       
<       if (s->state_out_pos >= s->numZ) break;
< 
<       progress_out = True;
<       *(s->strm->next_out) = s->zbits[s->state_out_pos];
<       s->state_out_pos++;
<       s->strm->avail_out--;
<       s->strm->next_out++;
<       s->strm->total_out_lo32++;
<       if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<    }
< 
<    return progress_out;
< }
---
> ;
3457,3498c1472
< {
<    Bool progress_in  = False;
<    Bool progress_out = False;
<    EState* s = strm->state;
<    
<    while (True) {
< 
<       if (s->state == BZ_S_OUTPUT) {
<          progress_out |= copy_output_until_stop ( s );
<          if (s->state_out_pos < s->numZ) break;
<          if (s->mode == BZ_M_FINISHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<          prepare_new_block ( s );
<          s->state = BZ_S_INPUT;
<          if (s->mode == BZ_M_FLUSHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<       }
< 
<       if (s->state == BZ_S_INPUT) {
<          progress_in |= copy_input_until_stop ( s );
<          if (s->mode != BZ_M_RUNNING && s->avail_in_expect == 0) {
<             flush_RL ( s );
<             BZ2_compressBlock ( s, (Bool)(s->mode == BZ_M_FINISHING) );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->nblock >= s->nblockMAX) {
<             BZ2_compressBlock ( s, False );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->strm->avail_in == 0) {
<             break;
<          }
<       }
< 
<    }
< 
<    return progress_in || progress_out;
< }
---
> ;
3629,3765c1603
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
3771,3781c1609
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
3787,3877c1615
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3977,3982c1715
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> ;
4440,4498c2173
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
4748,4757c2423
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
---
> ;
4762,4771c2428
< {
<    Int32  i;
<    double base = 1.0;
<    double sum  = 0.0;
<    for (i = 0; i < 8; i++) {
<       sum  += base * (double)(n->b[i]);
<       base *= 256.0;
<    }
<    return sum;
< }
---
> ;
4762,4771c4762
< {
<    Int32  i;
<    double base = 1.0;
<    double sum  = 0.0;
<    for (i = 0; i < 8; i++) {
<       sum  += base * (double)(n->b[i]);
<       base *= 256.0;
<    }
<    return sum;
< }
---
> ;
4776,4781c4767
< {
<    Int32 i;
<    for (i = 0; i < 8; i++)
<       if (n->b[i] != 0) return 0;
<    return 1;
< }
---
> ;
4787,4797c4773
< {
<    UInt32 rem, tmp;
<    Int32  i;
<    rem = 0;
<    for (i = 7; i >= 0; i--) {
<       tmp = rem * 256 + n->b[i];
<       n->b[i] = tmp / 10;
<       rem = tmp % 10;
<    }
<    return rem;
< }
---
> ;
4803,4816c4779
< {
<    Int32  i, q;
<    UChar  buf[32];
<    Int32  nBuf   = 0;
<    UInt64 n_copy = *n;
<    do {
<       q = uInt64_qrm10 ( &n_copy );
<       buf[nBuf] = q + '0';
<       nBuf++;
<    } while (!uInt64_isZero(&n_copy));
<    outbuf[nBuf] = 0;
<    for (i = 0; i < nBuf; i++) 
<       outbuf[i] = buf[nBuf-i-1];
< }
---
> ;
4828,4922c4791
< {
<    BZFILE* bzf = NULL;
<    UChar   ibuf[5000];
<    Int32   nIbuf;
<    UInt32  nbytes_in_lo32, nbytes_in_hi32;
<    UInt32  nbytes_out_lo32, nbytes_out_hi32;
<    Int32   bzerr, bzerr_dummy, ret;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    bzf = BZ2_bzWriteOpen ( &bzerr, zStream, 
<                            blockSize100k, verbosity, workFactor );   
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n" );
< 
<    while (True) {
< 
<       if (myfeof(stream)) break;
<       nIbuf = fread ( ibuf, sizeof(UChar), 5000, stream );
<       if (ferror(stream)) goto errhandler_io;
<       if (nIbuf > 0) BZ2_bzWrite ( &bzerr, bzf, (void*)ibuf, nIbuf );
<       if (bzerr != BZ_OK) goto errhandler;
< 
<    }
< 
<    BZ2_bzWriteClose64 ( &bzerr, bzf, 0, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fflush ( zStream );
<    if (ret == EOF) goto errhandler_io;
<    if (zStream != stdout) {
<       ret = fclose ( zStream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (ferror(stream)) goto errhandler_io;
<    ret = fclose ( stream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 1) {
<       if (nbytes_in_lo32 == 0 && nbytes_in_hi32 == 0) {
< 	 fprintf ( stderr, " no data compressed.\n");
<       } else {
< 	 Char   buf_nin[32], buf_nout[32];
< 	 UInt64 nbytes_in,   nbytes_out;
< 	 double nbytes_in_d, nbytes_out_d;
< 	 uInt64_from_UInt32s ( &nbytes_in, 
< 			       nbytes_in_lo32, nbytes_in_hi32 );
< 	 uInt64_from_UInt32s ( &nbytes_out, 
< 			       nbytes_out_lo32, nbytes_out_hi32 );
< 	 nbytes_in_d  = uInt64_to_double ( &nbytes_in );
< 	 nbytes_out_d = uInt64_to_double ( &nbytes_out );
< 	 uInt64_toAscii ( buf_nin, &nbytes_in );
< 	 uInt64_toAscii ( buf_nout, &nbytes_out );
< 	 fprintf ( stderr, "%6.3f:1, %6.3f bits/byte, "
< 		   "%5.2f%% saved, %s in, %s out.\n",
< 		   nbytes_in_d / nbytes_out_d,
< 		   (8.0 * nbytes_out_d) / nbytes_in_d,
< 		   100.0 * (1.0 - nbytes_out_d / nbytes_in_d),
< 		   buf_nin,
< 		   buf_nout
< 		 );
<       }
<    }
< 
<    return;
< 
<    errhandler:
<    BZ2_bzWriteClose64 ( &bzerr_dummy, bzf, 1, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_MEM_ERROR:
<          outOfMemory (); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       default:
<          panic ( "compress:unexpected error" );
<    }
< 
<    panic ( "compress:end" );
<    
< }
---
> ;
4929,5037c4798
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto trycat;
<          if ((bzerr == BZ_OK || bzerr == BZ_STREAM_END) && nread > 0)
<             fwrite ( obuf, sizeof(UChar), nread, stream );
<          if (ferror(stream)) goto errhandler_io;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       if (nUnused == 0 && myfeof(zStream)) break;
<    }
< 
<    closeok:
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (ferror(stream)) goto errhandler_io;
<    ret = fflush ( stream );
<    if (ret != 0) goto errhandler_io;
<    if (stream != stdout) {
<       ret = fclose ( stream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    trycat: 
<    if (forceOverwrite) {
<       rewind(zStream);
<       while (True) {
<       	 if (myfeof(zStream)) break;
<       	 nread = fread ( obuf, sizeof(UChar), 5000, zStream );
<       	 if (ferror(zStream)) goto errhandler_io;
<       	 if (nread > 0) fwrite ( obuf, sizeof(UChar), nread, stream );
<       	 if (ferror(stream)) goto errhandler_io;
<       }
<       goto closeok;
<    }
<   
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          crcError();
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          compressedStreamEOF();
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (stream != stdout) fclose(stream);
<          if (streamNo == 1) {
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "\n%s: %s: trailing garbage after EOF ignored\n",
<                       progName, inName );
<             return True;       
<          }
<       default:
<          panic ( "decompress:unexpected error" );
<    }
< 
<    panic ( "decompress:end" );
<    return True; 
< }
---
> ;
5043,5128c4804
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(zStream);
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto errhandler;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
<       if (nUnused == 0 && myfeof(zStream)) break;
< 
<    }
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    if (verbosity == 0) 
<       fprintf ( stderr, "%s: %s: ", progName, inName );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          fprintf ( stderr,
<                    "data integrity (CRC) error in data\n" );
<          return False;
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          fprintf ( stderr,
<                    "file ends unexpectedly\n" );
<          return False;
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (streamNo == 1) {
<           fprintf ( stderr, 
<                     "bad magic number (file not created by bzip2)\n" );
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "trailing garbage after EOF ignored\n" );
<             return True;       
<          }
<       default:
<          panic ( "test:unexpected error" );
<    }
< 
<    panic ( "test:end" );
<    return True; 
< }
---
> ;
5138,5140c4814
< {
<    if (v > exitValue) exitValue = v;
< }
---
> ;
5146,5155c4820
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\nIt is possible that the compressed file(s) have become corrupted.\n"
<         "You can use the -tvv option to test integrity of such files.\n\n"
<         "You can use the `bzip2recover' program to attempt to recover\n"
<         "data from undamaged sections of corrupted files.\n\n"
<     );
< }
---
> ;
5161,5168c4826
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\tInput file = %s, output file = %s\n",
<       inName, outName 
<    );
< }
---
> ;
5174,5223c4832
< {
<    IntNative      retVal;
<    struct MY_STAT statBuf;
< 
<    if ( srcMode == SM_F2F 
<         && opMode != OM_TEST
<         && deleteOutputOnInterrupt ) {
< 
<       
<       retVal = MY_STAT ( inName, &statBuf );
<       if (retVal == 0) {
<          if (noisy)
<             fprintf ( stderr, 
<                       "%s: Deleting output file %s, if it exists.\n",
<                       progName, outName );
<          if (outputHandleJustInCase != NULL)
<             fclose ( outputHandleJustInCase );
<          retVal = remove ( outName );
<          if (retVal != 0)
<             fprintf ( stderr,
<                       "%s: WARNING: deletion of output file "
<                       "(apparently) failed.\n",
<                       progName );
<       } else {
<          fprintf ( stderr,
<                    "%s: WARNING: deletion of output file suppressed\n",
<                     progName );
<          fprintf ( stderr,
<                    "%s:    since input file no longer exists.  Output file\n",
<                    progName );
<          fprintf ( stderr,
<                    "%s:    `%s' may be incomplete.\n",
<                    progName, outName );
<          fprintf ( stderr, 
<                    "%s:    I suggest doing an integrity test (bzip2 -tv)"
<                    " of it.\n",
<                    progName );
<       }
<    }
< 
<    if (noisy && numFileNames > 0 && numFilesProcessed < numFileNames) {
<       fprintf ( stderr, 
<                 "%s: WARNING: some files have not been processed:\n"
<                 "%s:    %d specified on command line, %d not processed yet.\n\n",
<                 progName, progName,
<                 numFileNames, numFileNames - numFilesProcessed );
<    }
<    setExit(ec);
<    exit(exitValue);
< }
---
> ;
5229,5238c4838
< {
<    fprintf ( stderr,
<              "\n%s: PANIC -- internal consistency error:\n"
<              "\t%s\n"
<              "\tThis is a BUG.  Please report it to me at:\n"
<              "\tjseward@acm.org\n",
<              progName, s );
<    showFileNames();
<    cleanUpAndFail( 3 );
< }
---
> ;
5244,5251c4844
< {
<    fprintf ( stderr,
<              "\n%s: Data integrity error when decompressing.\n",
<              progName );
<    showFileNames();
<    cadvise();
<    cleanUpAndFail( 2 );
< }
---
> ;
5257,5268c4850
< {
<   if (noisy) {
<     fprintf ( stderr,
< 	      "\n%s: Compressed file ends unexpectedly;\n\t"
< 	      "perhaps it is corrupted?  *Possible* reason follows.\n",
< 	      progName );
<     perror ( progName );
<     showFileNames();
<     cadvise();
<   }
<   cleanUpAndFail( 2 );
< }
---
> ;
5274,5282c4856
< {
<    fprintf ( stderr,
<              "\n%s: I/O or other error, bailing out.  "
<              "Possible reason follows.\n",
<              progName );
<    perror ( progName );
<    showFileNames();
<    cleanUpAndFail( 1 );
< }
---
> ;
5288,5293c4862
< {
<    fprintf ( stderr,
<              "\n%s: Control-C or similar caught, quitting.\n",
<              progName );
<    cleanUpAndFail(1);
< }
---
> ;
5299,5349c4868
< {
<    if (opMode == OM_Z)
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst compressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (2) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (3) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (1) and (2).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (1)\n"
<       "   or (2), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
<       else
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst decompressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) The compressed data is corrupted, and bzip2's usual checks\n"
<       "       failed to detect this.  Try bzip2 -tvv my_file.bz2.\n"
<       "   (2) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (3) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (4) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (2) and (3).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (2)\n"
<       "   or (3), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
< 
<    showFileNames();
<    if (opMode == OM_Z)
<       cleanUpAndFail( 3 ); else
<       { cadvise(); cleanUpAndFail( 2 ); }
< }
---
> ;
5355,5361c4874
< {
<    fprintf ( stderr,
<              "\n%s: couldn't allocate enough memory\n",
<              progName );
<    showFileNames();
<    cleanUpAndFail(1);
< }
---
> ;
5367,5376c4880
< {
<    fprintf ( stderr,
<              "bzip2: I'm not configured correctly for this platform!\n"
<              "\tI require Int32, Int16 and Char to have sizes\n"
<              "\tof 4, 2 and 1 bytes to run properly, and they don't.\n"
<              "\tProbably you can fix this by defining them correctly,\n"
<              "\tand recompiling.  Bye!\n" );
<    setExit(3);
<    exit(exitValue);
< }
---
> ;
5388,5393c4892
< {
<    Int32 i;
<    if ( (Int32)strlen(s) >= longestFileName ) return;
<    for (i = 1; i <= longestFileName - (Int32)strlen(s); i++)
<       fprintf ( stderr, " " );
< }
---
> ;
5399,5414c4898
< {
<    if ( strlen(from) > FILE_NAME_LEN-10 )  {
<       fprintf (
<          stderr,
<          "bzip2: file name\n`%s'\n"
<          "is suspiciously (more than %d chars) long.\n"
<          "Try using a reasonable file name instead.  Sorry! :-)\n",
<          from, FILE_NAME_LEN-10
<       );
<       setExit(1);
<       exit(exitValue);
<    }
< 
<   strncpy(to,from,FILE_NAME_LEN-10);
<   to[FILE_NAME_LEN-10]='\0';
< }
---
> ;
5420,5425c4904
< {
<    FILE *tmp   = fopen ( name, "rb" );
<    Bool exists = (tmp != NULL);
<    if (tmp != NULL) fclose ( tmp );
<    return exists;
< }
---
> ;
5431,5443c4910
< {
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
<    return fopen(name, mode);
< #  endif
< }
---
> ;
5450,5458c4917
< {
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return True;
<    if (MY_S_ISREG(statBuf.st_mode)) return False;
<    return True;
< }
---
> ;
5465,5472c4924
< {  
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return 0;
<    return (statBuf.st_nlink - 1);
< }
---
> ;
5484,5491c4936
< {
< #  if BZ_UNIX
<    IntNative retVal;
<    
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
< }
---
> ;
5496,5513c4941
< {
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    
< #  endif
< }
---
> ;
5519,5529c4947
< {
< #  if BZ_UNIX
<    
<    return False;
< #  else 
<    
<    for (; *name != '\0'; name++)
<       if (*name == '?' || *name == '*') return True;
<    return False;
< #  endif 
< }
---
> ;
5542,5548c4960
< {
<    Int32 ns = strlen(s);
<    Int32 nx = strlen(suffix);
<    if (ns < nx) return False;
<    if (strcmp(s + ns - nx, suffix) == 0) return True;
<    return False;
< }
---
> ;
5553,5558c4965
< {
<    if (!hasSuffix(name,oldSuffix)) return False;
<    name[strlen(name)-strlen(oldSuffix)] = 0;
<    strcat ( name, newSuffix );
<    return True;
< }
---
> ;
5564,5738c4971
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "compress: bad modes\n" );
< 
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          strcat ( outName, ".bz2" ); 
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++) {
<       if (hasSuffix(inName, zSuffix[i])) {
<          if (noisy)
<          fprintf ( stderr, 
<                    "%s: Input file %s already has %s suffix.\n",
<                    progName, inName, zSuffix[i] );
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	 remove(outName);
<       } else {
< 	 fprintf ( stderr, "%s: Output file %s already exists.\n",
< 		   progName, outName );
< 	 setExit(1);
< 	 return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName )) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "compress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr,  "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    compressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( srcMode == SM_F2F ) {
<       applySavedMetaInfoToOutputFile ( outName );
<       deleteOutputOnInterrupt = False;
<       if ( !keepInputFiles ) {
<          IntNative retVal = remove ( inName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
< 
<    deleteOutputOnInterrupt = False;
< }
---
> ;
5744,5935c4977
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    Bool  magicNumberOK;
<    Bool  cantGuess;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "uncompress: bad modes\n" );
< 
<    cantGuess = False;
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++)
<             if (mapSuffix(outName,zSuffix[i],unzSuffix[i]))
<                goto zzz; 
<          cantGuess = True;
<          strcat ( outName, ".out" );
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    zzz:
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if (  cantGuess ) {
<       if (noisy)
<       fprintf ( stderr, 
<                 "%s: Can't guess original name for %s -- using %s\n",
<                 progName, inName, outName );
<       
<    }   
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	remove(outName);
<       } else {
<         fprintf ( stderr, "%s: Output file %s already exists.\n",
<                   progName, outName );
<         setExit(1);
<         return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName ) ) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "uncompress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    magicNumberOK = uncompressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( magicNumberOK ) {
<       if ( srcMode == SM_F2F ) {
<          applySavedMetaInfoToOutputFile ( outName );
<          deleteOutputOnInterrupt = False;
<          if ( !keepInputFiles ) {
<             IntNative retVal = remove ( inName );
<             ERROR_IF_NOT_ZERO ( retVal );
<          }
<       }
<    } else {
<       unzFailsExist = True;
<       deleteOutputOnInterrupt = False;
<       if ( srcMode == SM_F2F ) {
<          IntNative retVal = remove ( outName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
<    deleteOutputOnInterrupt = False;
< 
<    if ( magicNumberOK ) {
<       if (verbosity >= 1)
<          fprintf ( stderr, "done\n" );
<    } else {
<       setExit(2);
<       if (verbosity >= 1)
<          fprintf ( stderr, "not a bzip2 file.\n" ); else
<          fprintf ( stderr,
<                    "%s: %s is not a bzip2 file.\n",
<                    progName, inName );
<    }
< 
< }
---
> ;
5941,6024c4983
< {
<    FILE *inStr;
<    Bool allOK;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "testf: bad modes\n" );
< 
<    copyFileName ( outName, "(none)" );
<    switch (srcMode) {
<       case SM_I2O: copyFileName ( inName, "(stdin)" ); break;
<       case SM_F2F: copyFileName ( inName, name ); break;
<       case SM_F2O: copyFileName ( inName, name ); break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          inStr = stdin;
<          break;
< 
<       case SM_F2O: case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "testf: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = NULL;
<    allOK = testStream ( inStr );
< 
<    if (allOK && verbosity >= 1) fprintf ( stderr, "ok\n" );
<    if (!allOK) testFailsExist = True;
< }
---
> ;
6030,6049c4989
< {
<    fprintf ( stderr,
< 
<     "bzip2, a block-sorting file compressor.  "
<     "Version %s.\n"
<     "   \n"
<     "   Copyright (C) 1996-2002 by Julian Seward.\n"
<     "   \n"
<     "   This program is free software; you can redistribute it and/or modify\n"
<     "   it under the terms set out in the LICENSE file, which is included\n"
<     "   in the bzip2-1.0 source distribution.\n"
<     "   \n"
<     "   This program is distributed in the hope that it will be useful,\n"
<     "   but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
<     "   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
<     "   LICENSE file for more details.\n"
<     "   \n",
<     BZ2_bzlibVersion()
<    );
< }
---
> ;
6055,6093c4995
< {
<    fprintf (
<       stderr,
<       "bzip2, a block-sorting file compressor.  "
<       "Version %s.\n"
<       "\n   usage: %s [flags and input files in any order]\n"
<       "\n"
<       "   -h --help           print this message\n"
<       "   -d --decompress     force decompression\n"
<       "   -z --compress       force compression\n"
<       "   -k --keep           keep (don't delete) input files\n"
<       "   -f --force          overwrite existing output files\n"
<       "   -t --test           test compressed file integrity\n"
<       "   -c --stdout         output to standard out\n"
<       "   -q --quiet          suppress noncritical error messages\n"
<       "   -v --verbose        be verbose (a 2nd -v gives more)\n"
<       "   -L --license        display software version & license\n"
<       "   -V --version        display software version & license\n"
<       "   -s --small          use less memory (at most 2500k)\n"
<       "   -1 .. -9            set block size to 100k .. 900k\n"
<       "   --fast              alias for -1\n"
<       "   --best              alias for -9\n"
<       "\n"
<       "   If invoked as `bzip2', default action is to compress.\n"
<       "              as `bunzip2',  default action is to decompress.\n"
<       "              as `bzcat', default action is to decompress to stdout.\n"
<       "\n"
<       "   If no file names are given, bzip2 compresses or decompresses\n"
<       "   from standard input to standard output.  You can combine\n"
<       "   short flags, so `-v -4' means the same as -v4 or -4v, &c.\n"
< #     if BZ_UNIX
<       "\n"
< #     endif
<       ,
< 
<       BZ2_bzlibVersion(),
<       fullProgName
<    );
< }
---
> ;
6099,6104c5001
< {
<    fprintf ( 
<       stderr, 
<       "%s: %s is redundant in versions 0.9.5 and above\n",
<       progName, flag );
< }
---
> ;
6121,6127c5018
< {
<    void* p;
< 
<    p = malloc ( (size_t)n );
<    if (p == NULL) outOfMemory ();
<    return p;
< }
---
> ;
6133,6140c5024
< {
<    Cell *c;
< 
<    c = (Cell*) myMalloc ( sizeof ( Cell ) );
<    c->name = NULL;
<    c->link = NULL;
<    return c;
< }
---
> ;
6146,6158c5030
< {
<    if (root == NULL) {
<       Cell *tmp = mkCell();
<       tmp->name = (Char*) myMalloc ( 5 + strlen(name) );
<       strcpy ( tmp->name, name );
<       return tmp;
<    } else {
<       Cell *tmp = root;
<       while (tmp->link != NULL) tmp = tmp->link;
<       tmp->link = snocString ( tmp->link, name );
<       return root;
<    }
< }
---
> ;
6164,6186c5036
< {
<    Int32 i, j, k;
<    Char *envbase, *p;
< 
<    envbase = getenv(varName);
<    if (envbase != NULL) {
<       p = envbase;
<       i = 0;
<       while (True) {
<          if (p[i] == 0) break;
<          p += i;
<          i = 0;
<          while (isspace((Int32)(p[0]))) p++;
<          while (p[i] != 0 && !isspace((Int32)(p[i]))) i++;
<          if (i > 0) {
<             k = i; if (k > FILE_NAME_LEN-10) k = FILE_NAME_LEN-10;
<             for (j = 0; j < k; j++) tmpName[j] = p[j];
<             tmpName[k] = 0;
<             APPEND_FLAG(*argList, tmpName);
<          }
<       }
<    }
< }
---
> ;
6193,6439c5043
< {
<    Int32  i, j;
<    Char   *tmp;
<    Cell   *argList;
<    Cell   *aa;
<    Bool   decode;
< 
<    
<    if (sizeof(Int32) != 4 || sizeof(UInt32) != 4  ||
<        sizeof(Int16) != 2 || sizeof(UInt16) != 2  ||
<        sizeof(Char)  != 1 || sizeof(UChar)  != 1)
<       configError();
< 
<    
<    outputHandleJustInCase  = NULL;
<    smallMode               = False;
<    keepInputFiles          = False;
<    forceOverwrite          = False;
<    noisy                   = True;
<    verbosity               = 0;
<    blockSize100k           = 9;
<    testFailsExist          = False;
<    unzFailsExist           = False;
<    numFileNames            = 0;
<    numFilesProcessed       = 0;
<    workFactor              = 30;
<    deleteOutputOnInterrupt = False;
<    exitValue               = 0;
<    i = j = 0; 
< 
<    
<    signal (SIGSEGV, mySIGSEGVorSIGBUScatcher);
< #  if BZ_UNIX
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< 
<    copyFileName ( inName,  "(none)" );
<    copyFileName ( outName, "(none)" );
< 
<    copyFileName ( progNameReally, argv[0] );
<    progName = &progNameReally[0];
<    for (tmp = &progNameReally[0]; *tmp != '\0'; tmp++)
<       if (*tmp == PATH_SEP) progName = tmp + 1;
< 
< 
<    
<    argList = NULL;
<    addFlagsFromEnvVar ( &argList,  "BZIP2" );
<    addFlagsFromEnvVar ( &argList,  "BZIP" );
<    for (i = 1; i <= argc-1; i++)
<       APPEND_FILESPEC(argList, argv[i]);
< 
< 
<    
<    longestFileName = 7;
<    numFileNames    = 0;
<    decode          = True;
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) { decode = False; continue; }
<       if (aa->name[0] == '-' && decode) continue;
<       numFileNames++;
<       if (longestFileName < (Int32)strlen(aa->name) )
<          longestFileName = (Int32)strlen(aa->name);
<    }
< 
< 
<    
<    if (numFileNames == 0)
<       srcMode = SM_I2O; else srcMode = SM_F2F;
< 
< 
<    
<    
<    opMode = OM_Z;
< 
<    if ( (strstr ( progName, "unzip" ) != 0) ||
<         (strstr ( progName, "UNZIP" ) != 0) )
<       opMode = OM_UNZ;
< 
<    if ( (strstr ( progName, "z2cat" ) != 0) ||
<         (strstr ( progName, "Z2CAT" ) != 0) ||
<         (strstr ( progName, "zcat" ) != 0)  ||
<         (strstr ( progName, "ZCAT" ) != 0) )  {
<       opMode = OM_UNZ;
<       srcMode = (numFileNames == 0) ? SM_I2O : SM_F2O;
<    }
< 
< 
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (aa->name[0] == '-' && aa->name[1] != '-') {
<          for (j = 1; aa->name[j] != '\0'; j++) {
<             switch (aa->name[j]) {
<                case 'c': srcMode          = SM_F2O; break;
<                case 'd': opMode           = OM_UNZ; break;
<                case 'z': opMode           = OM_Z; break;
<                case 'f': forceOverwrite   = True; break;
<                case 't': opMode           = OM_TEST; break;
<                case 'k': keepInputFiles   = True; break;
<                case 's': smallMode        = True; break;
<                case 'q': noisy            = False; break;
<                case '1': blockSize100k    = 1; break;
<                case '2': blockSize100k    = 2; break;
<                case '3': blockSize100k    = 3; break;
<                case '4': blockSize100k    = 4; break;
<                case '5': blockSize100k    = 5; break;
<                case '6': blockSize100k    = 6; break;
<                case '7': blockSize100k    = 7; break;
<                case '8': blockSize100k    = 8; break;
<                case '9': blockSize100k    = 9; break;
<                case 'V':
<                case 'L': license();            break;
<                case 'v': verbosity++; break;
<                case 'h': usage ( progName );
<                          exit ( 0 );
<                          break;
<                default:  fprintf ( stderr, "%s: Bad flag `%s'\n",
<                                    progName, aa->name );
<                          usage ( progName );
<                          exit ( 1 );
<                          break;
<             }
<          }
<       }
<    }
<    
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (ISFLAG("--stdout"))            srcMode          = SM_F2O;  else
<       if (ISFLAG("--decompress"))        opMode           = OM_UNZ;  else
<       if (ISFLAG("--compress"))          opMode           = OM_Z;    else
<       if (ISFLAG("--force"))             forceOverwrite   = True;    else
<       if (ISFLAG("--test"))              opMode           = OM_TEST; else
<       if (ISFLAG("--keep"))              keepInputFiles   = True;    else
<       if (ISFLAG("--small"))             smallMode        = True;    else
<       if (ISFLAG("--quiet"))             noisy            = False;   else
<       if (ISFLAG("--version"))           license();                  else
<       if (ISFLAG("--license"))           license();                  else
<       if (ISFLAG("--exponential"))       workFactor = 1;             else 
<       if (ISFLAG("--repetitive-best"))   redundant(aa->name);        else
<       if (ISFLAG("--repetitive-fast"))   redundant(aa->name);        else
<       if (ISFLAG("--fast"))              blockSize100k = 1;          else
<       if (ISFLAG("--best"))              blockSize100k = 9;          else
<       if (ISFLAG("--verbose"))           verbosity++;                else
<       if (ISFLAG("--help"))              { usage ( progName ); exit ( 0 ); }
<          else
<          if (strncmp ( aa->name, "--", 2) == 0) {
<             fprintf ( stderr, "%s: Bad flag `%s'\n", progName, aa->name );
<             usage ( progName );
<             exit ( 1 );
<          }
<    }
< 
<    if (verbosity > 4) verbosity = 4;
<    if (opMode == OM_Z && smallMode && blockSize100k > 2) 
<       blockSize100k = 2;
< 
<    if (opMode == OM_TEST && srcMode == SM_F2O) {
<       fprintf ( stderr, "%s: -c and -t cannot be used together.\n",
<                 progName );
<       exit ( 1 );
<    }
< 
<    if (srcMode == SM_F2O && numFileNames == 0)
<       srcMode = SM_I2O;
< 
<    if (opMode != OM_Z) blockSize100k = 0;
< 
<    if (srcMode == SM_F2F) {
<       signal (SIGINT,  mySignalCatcher);
<       signal (SIGTERM, mySignalCatcher);
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
<    }
< 
<    if (opMode == OM_Z) {
<      if (srcMode == SM_I2O) {
<         compress ( NULL );
<      } else {
<         decode = True;
<         for (aa = argList; aa != NULL; aa = aa->link) {
<            if (ISFLAG("--")) { decode = False; continue; }
<            if (aa->name[0] == '-' && decode) continue;
<            numFilesProcessed++;
<            compress ( aa->name );
<         }
<      }
<    } 
<    else
< 
<    if (opMode == OM_UNZ) {
<       unzFailsExist = False;
<       if (srcMode == SM_I2O) {
<          uncompress ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
<             if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             uncompress ( aa->name );
<          }      
<       }
<       if (unzFailsExist) { 
<          setExit(2); 
<          exit(exitValue);
<       }
<    } 
< 
<    else {
<       testFailsExist = False;
<       if (srcMode == SM_I2O) {
<          testf ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
< 	    if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             testf ( aa->name );
< 	 }
<       }
<       if (testFailsExist && noisy) {
<          fprintf ( stderr,
<            "\n"
<            "You can use the `bzip2recover' program to attempt to recover\n"
<            "data from undamaged sections of corrupted files.\n\n"
<          );
<          setExit(2);
<          exit(exitValue);
<       }
<    }
< 
<    
<    aa = argList;
<    while (aa != NULL) {
<       Cell* aa2 = aa->link;
<       if (aa->name != NULL) free(aa->name);
<       free(aa);
<       aa = aa2;
<    }
< 
<    return exitValue;
< }
---
> ;
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2457c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
2462,2518c1208
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
(39.5 %, 124010 bytes)
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2457c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
2462,2518c1208
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1751,1774c1751
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1920
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1926
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1946
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1952
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1958
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1968
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1974
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2457c1983
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
2462,2518c1988
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
2534,2542c2004
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
2613,3119c2075
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
(49.3 %, 103928 bytes)
1140,1143c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1149,1156c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1176,1180c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1186,1191c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1197,1199c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1209,1217c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1223,1312c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1321,1654c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1659,1715c1208
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
1731,1739c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1810,2316c1295
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2335,2378c1314
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
2335,2378c2335
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
2384,2389c2341
< {
<    if (sizeof(int)   != 4) return 0;
<    if (sizeof(short) != 2) return 0;
<    if (sizeof(char)  != 1) return 0;
<    return 1;
< }
---
> ;
2395,2398c2347
< {
<    void* v = malloc ( items * size );
<    return v;
< }
---
> ;
2402,2404c2351
< {
<    if (addr != NULL) free ( addr );
< }
---
> ;
2410,2418c2357
< {
<    Int32 i;
<    s->nblock = 0;
<    s->numZ = 0;
<    s->state_out_pos = 0;
<    BZ_INITIALISE_CRC ( s->blockCRC );
<    for (i = 0; i < 256; i++) s->inUse[i] = False;
<    s->blockNo++;
< }
---
> ;
2424,2427c2363
< {
<    s->state_in_ch  = 256;
<    s->state_in_len = 0;
< }
---
> ;
2432,2436c2368
< {
<    if (s->state_in_ch < 256 && s->state_in_len > 0)
<       return False; else
<       return True;
< }
---
> ;
2509,2539c2441
< {
<    Int32 i;
<    UChar ch = (UChar)(s->state_in_ch);
<    for (i = 0; i < s->state_in_len; i++) {
<       BZ_UPDATE_CRC( s->blockCRC, ch );
<    }
<    s->inUse[s->state_in_ch] = True;
<    switch (s->state_in_len) {
<       case 1:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 2:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 3:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       default:
<          s->inUse[s->state_in_len-4] = True;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = ((UChar)(s->state_in_len-4));
<          s->nblock++;
<          break;
<    }
< }
---
> ;
2545,2548c2447
< {
<    if (s->state_in_ch < 256) add_pair_to_block ( s );
<    init_RL ( s );
< }
---
> ;
2582,2621c2481
< {
<    Bool progress_in = False;
< 
<    if (s->mode == BZ_M_RUNNING) {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<       }
< 
<    } else {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          
<          if (s->avail_in_expect == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<          s->avail_in_expect--;
<       }
<    }
<    return progress_in;
< }
---
> ;
2627,2648c2487
< {
<    Bool progress_out = False;
< 
<    while (True) {
< 
<       
<       if (s->strm->avail_out == 0) break;
< 
<       
<       if (s->state_out_pos >= s->numZ) break;
< 
<       progress_out = True;
<       *(s->strm->next_out) = s->zbits[s->state_out_pos];
<       s->state_out_pos++;
<       s->strm->avail_out--;
<       s->strm->next_out++;
<       s->strm->total_out_lo32++;
<       if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<    }
< 
<    return progress_out;
< }
---
> ;
2654,2695c2493
< {
<    Bool progress_in  = False;
<    Bool progress_out = False;
<    EState* s = strm->state;
<    
<    while (True) {
< 
<       if (s->state == BZ_S_OUTPUT) {
<          progress_out |= copy_output_until_stop ( s );
<          if (s->state_out_pos < s->numZ) break;
<          if (s->mode == BZ_M_FINISHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<          prepare_new_block ( s );
<          s->state = BZ_S_INPUT;
<          if (s->mode == BZ_M_FLUSHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<       }
< 
<       if (s->state == BZ_S_INPUT) {
<          progress_in |= copy_input_until_stop ( s );
<          if (s->mode != BZ_M_RUNNING && s->avail_in_expect == 0) {
<             flush_RL ( s );
<             BZ2_compressBlock ( s, (Bool)(s->mode == BZ_M_FINISHING) );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->nblock >= s->nblockMAX) {
<             BZ2_compressBlock ( s, False );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->strm->avail_in == 0) {
<             break;
<          }
<       }
< 
<    }
< 
<    return progress_in || progress_out;
< }
---
> ;
1140,1143c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1149,1156c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1176,1180c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1186,1191c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1197,1199c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1209,1217c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1223,1312c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
(52.3 %, 97724 bytes)
1140,1143c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1149,1156c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1176,1180c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1186,1191c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1197,1199c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1209,1217c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1223,1312c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1223,1312c1223
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1321,1654c1232
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1659,1715c1237
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
1731,1739c1253
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1810,2316c1324
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2624,2760c1632
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
2766,2776c1638
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
===< pass_clang_binsrch :: remove-unused-function >===
449,450c449
< extern void 
< BZ2_compressBlock ( EState*, Bool );
---
> ;
683,689c682
< static 
< __inline__
< void fallbackSimpleSort ( UInt32* fmap, 
<                           UInt32* eclass, 
<                           Int32   lo, 
<                           Int32   hi )
< ;
---
> 
722,727c715
< static
< void fallbackQSort3 ( UInt32* fmap, 
<                       UInt32* eclass,
<                       Int32   loSt, 
<                       Int32   hiSt )
< ;
---
> 
747,753c735
< static
< void fallbackSort ( UInt32* fmap, 
<                     UInt32* eclass, 
<                     UInt32* bhtab,
<                     Int32   nblock,
<                     Int32   verb )
< ;
---
> 
769,777c751
< static
< __inline__
< Bool mainGtU ( UInt32  i1, 
<                UInt32  i2,
<                UChar*  block, 
<                UInt16* quadrant,
<                UInt32  nblock,
<                Int32*  budget )
< ;
---
> 
787,796c761
< static
< void mainSimpleSort ( UInt32* ptr,
<                       UChar*  block,
<                       UInt16* quadrant,
<                       Int32   nblock,
<                       Int32   lo, 
<                       Int32   hi, 
<                       Int32   d,
<                       Int32*  budget )
< ;
---
> 
816,819c781
< static 
< __inline__
< UChar mmed3 ( UChar a, UChar b, UChar c )
< ;
---
> 
847,856c809
< static
< void mainQSort3 ( UInt32* ptr,
<                   UChar*  block,
<                   UInt16* quadrant,
<                   Int32   nblock,
<                   Int32   loSt, 
<                   Int32   hiSt, 
<                   Int32   dSt,
<                   Int32*  budget )
< ;
---
> 
877,885c830
< static
< void mainSort ( UInt32* ptr, 
<                 UChar*  block,
<                 UInt16* quadrant, 
<                 UInt32* ftab,
<                 Int32   nblock,
<                 Int32   verb,
<                 Int32*  budget )
< ;
---
> 
1658,1660d1602
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
1662,1715d1603
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
2439,2441d2326
< static
< void add_pair_to_block ( EState* s )
< ;
2445,2447c2330,2331
< static
< void flush_RL ( EState* s )
< ;
---
> 
> 
2479,2481d2362
< static
< Bool copy_input_until_stop ( EState* s )
< ;
2485,2487c2366,2367
< static
< Bool copy_output_until_stop ( EState* s )
< ;
---
> 
> 
2971,2977c2851
< static Bool myfeof ( FILE* f )
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> 
3718,3724d3591
< static void    panic                 ( Char* )   NORETURN;
< static void    ioError               ( void )    NORETURN;
< static void    outOfMemory           ( void )    NORETURN;
< static void    configError           ( void )    NORETURN;
< static void    crcError              ( void )    NORETURN;
< static void    cleanUpAndFail        ( Int32 )   NORETURN;
< static void    compressedStreamEOF   ( void )    NORETURN;
3726,3727c3593,3601
< static void    copyFileName ( Char*, Char* );
< static void*   myMalloc     ( Int32 );
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
3741,3752d3614
< static
< void uInt64_from_UInt32s ( UInt64* n, UInt32 lo32, UInt32 hi32 )
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
3755,3757d3616
< static
< double uInt64_to_double ( UInt64* n )
< ;
3760,3762d3618
< static
< Bool uInt64_isZero ( UInt64* n )
< ;
3766,3768d3621
< static 
< Int32 uInt64_qrm10 ( UInt64* n )
< ;
3772,3774d3624
< static
< void uInt64_toAscii ( char* outbuf, UInt64* n )
< ;
3784,3786d3633
< static 
< void compressStream ( FILE *stream, FILE *zStream )
< ;
3791,3793d3637
< static 
< Bool uncompressStream ( FILE *zStream, FILE *stream )
< ;
3797,3799d3640
< static 
< Bool testStream ( FILE *zStream )
< ;
3807,3809d3647
< static
< void setExit ( Int32 v )
< ;
3813,3815d3650
< static 
< void cadvise ( void )
< ;
3819,3821d3653
< static 
< void showFileNames ( void )
< ;
3825,3827d3656
< static 
< void cleanUpAndFail ( Int32 ec )
< ;
3831,3833d3659
< static 
< void panic ( Char* s )
< ;
3837,3839d3662
< static 
< void crcError ( void )
< ;
3843,3845d3665
< static 
< void compressedStreamEOF ( void )
< ;
3849,3851d3668
< static 
< void ioError ( void )
< ;
3855,3857d3671
< static 
< void mySignalCatcher ( IntNative n )
< ;
3861,3863d3674
< static 
< void mySIGSEGVorSIGBUScatcher ( IntNative n )
< ;
3867,3869d3677
< static 
< void outOfMemory ( void )
< ;
3873,3875d3680
< static 
< void configError ( void )
< ;
3885,3887d3689
< static 
< void pad ( Char *s )
< ;
3891,3893d3692
< static 
< void copyFileName ( Char* to, Char* from ) 
< ;
3897,3899d3695
< static 
< Bool fileExists ( Char* name )
< ;
3904,3905d3699
< FILE* fopen_output_safely ( Char* name, const char* mode )
< ;
3910,3912d3703
< static 
< Bool notAStandardFile ( Char* name )
< ;
3917,3919c3708,3733
< static 
< Int32 countHardLinks ( Char* name )
< ;
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
3929,3931d3742
< static 
< void saveInputFileMetaInfo ( Char *srcName )
< ;
3934,3936d3744
< static 
< void applySavedMetaInfoToOutputFile ( Char *dstName )
< ;
3940,3942c3748,3750
< static 
< Bool containsDubiousChars ( Char* name )
< ;
---
> 
> 
> 
3953,3955d3760
< static 
< Bool hasSuffix ( Char* s, Char* suffix )
< ;
3957,3960d3761
< static 
< Bool mapSuffix ( Char* name, 
<                  Char* oldSuffix, Char* newSuffix )
< ;
3964,3966d3764
< static 
< void compress ( Char *name )
< ;
3970,3972d3767
< static 
< void uncompress ( Char *name )
< ;
3976,3978d3770
< static 
< void testf ( Char *name )
< ;
3982,3984d3773
< static 
< void license ( void )
< ;
3988,3990d3776
< static 
< void usage ( Char *fullProgName )
< ;
3994,3996c3780,3787
< static 
< void redundant ( Char* flag )
< ;
---
> 
> 
> 
> 
> 
> 
> 
> 
4011,4013d3801
< static 
< void *myMalloc ( Int32 n )
< ;
4017,4019d3804
< static 
< Cell *mkCell ( void )
< ;
4023,4025d3807
< static 
< Cell *snocString ( Cell *root, Char *name )
< ;
4029,4031c3811,3814
< static 
< void addFlagsFromEnvVar ( Cell** argList, Char* varName ) 
< ;
---
> 
> 
> 
> 
449,450c449
< extern void 
< BZ2_compressBlock ( EState*, Bool );
---
> ;
683,689c682
< static 
< __inline__
< void fallbackSimpleSort ( UInt32* fmap, 
<                           UInt32* eclass, 
<                           Int32   lo, 
<                           Int32   hi )
< ;
---
> 
722,727c715
< static
< void fallbackQSort3 ( UInt32* fmap, 
<                       UInt32* eclass,
<                       Int32   loSt, 
<                       Int32   hiSt )
< ;
---
> 
747,753c735
< static
< void fallbackSort ( UInt32* fmap, 
<                     UInt32* eclass, 
<                     UInt32* bhtab,
<                     Int32   nblock,
<                     Int32   verb )
< ;
---
> 
769,777c751
< static
< __inline__
< Bool mainGtU ( UInt32  i1, 
<                UInt32  i2,
<                UChar*  block, 
<                UInt16* quadrant,
<                UInt32  nblock,
<                Int32*  budget )
< ;
---
> 
787,796c761
< static
< void mainSimpleSort ( UInt32* ptr,
<                       UChar*  block,
<                       UInt16* quadrant,
<                       Int32   nblock,
<                       Int32   lo, 
<                       Int32   hi, 
<                       Int32   d,
<                       Int32*  budget )
< ;
---
> 
816,819c781
< static 
< __inline__
< UChar mmed3 ( UChar a, UChar b, UChar c )
< ;
---
> 
847,856c809
< static
< void mainQSort3 ( UInt32* ptr,
<                   UChar*  block,
<                   UInt16* quadrant,
<                   Int32   nblock,
<                   Int32   loSt, 
<                   Int32   hiSt, 
<                   Int32   dSt,
<                   Int32*  budget )
< ;
---
> 
877,885c830
< static
< void mainSort ( UInt32* ptr, 
<                 UChar*  block,
<                 UInt16* quadrant, 
<                 UInt32* ftab,
<                 Int32   nblock,
<                 Int32   verb,
<                 Int32*  budget )
< ;
---
> 
1658,1684d1602
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
1686,1715d1603
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
2439,2441d2326
< static
< void add_pair_to_block ( EState* s )
< ;
2445,2447c2330,2331
< static
< void flush_RL ( EState* s )
< ;
---
> 
> 
2479,2481d2362
< static
< Bool copy_input_until_stop ( EState* s )
< ;
2485,2487c2366,2367
< static
< Bool copy_output_until_stop ( EState* s )
< ;
---
> 
> 
2971,2977c2851
< static Bool myfeof ( FILE* f )
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> 
3718,3724d3591
< static void    panic                 ( Char* )   NORETURN;
< static void    ioError               ( void )    NORETURN;
< static void    outOfMemory           ( void )    NORETURN;
< static void    configError           ( void )    NORETURN;
< static void    crcError              ( void )    NORETURN;
< static void    cleanUpAndFail        ( Int32 )   NORETURN;
< static void    compressedStreamEOF   ( void )    NORETURN;
3726,3727c3593,3601
< static void    copyFileName ( Char*, Char* );
< static void*   myMalloc     ( Int32 );
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
3741,3752d3614
< static
< void uInt64_from_UInt32s ( UInt64* n, UInt32 lo32, UInt32 hi32 )
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
3755,3757d3616
< static
< double uInt64_to_double ( UInt64* n )
< ;
3760,3762d3618
< static
< Bool uInt64_isZero ( UInt64* n )
< ;
3766,3768d3621
< static 
< Int32 uInt64_qrm10 ( UInt64* n )
< ;
3772,3774d3624
< static
< void uInt64_toAscii ( char* outbuf, UInt64* n )
< ;
3784,3786c3634,3639
< static 
< void compressStream ( FILE *stream, FILE *zStream )
< ;
---
> 
> 
> 
> 
> 
> 
3825,3827d3677
< static 
< void cleanUpAndFail ( Int32 ec )
< ;
3831,3833d3680
< static 
< void panic ( Char* s )
< ;
3837,3839d3683
< static 
< void crcError ( void )
< ;
3843,3845d3686
< static 
< void compressedStreamEOF ( void )
< ;
3849,3851c3690,3694
< static 
< void ioError ( void )
< ;
---
> 
> 
> 
> 
> 
3867,3869d3709
< static 
< void outOfMemory ( void )
< ;
3873,3875c3713,3714
< static 
< void configError ( void )
< ;
---
> 
> 
3891,3893c3730
< static 
< void copyFileName ( Char* to, Char* from ) 
< ;
---
> 
4011,4013c3848
< static 
< void *myMalloc ( Int32 n )
< ;
---
> 
3784,3786d3783
< static 
< void compressStream ( FILE *stream, FILE *zStream )
< ;
3791,3793d3787
< static 
< Bool uncompressStream ( FILE *zStream, FILE *stream )
< ;
3797,3799d3790
< static 
< Bool testStream ( FILE *zStream )
< ;
3807,3809d3797
< static
< void setExit ( Int32 v )
< ;
3813,3815d3800
< static 
< void cadvise ( void )
< ;
3819,3821c3804,3809
< static 
< void showFileNames ( void )
< ;
---
> 
> 
> 
> 
> 
> 
3855,3857d3842
< static 
< void mySignalCatcher ( IntNative n )
< ;
3861,3863c3846,3847
< static 
< void mySIGSEGVorSIGBUScatcher ( IntNative n )
< ;
---
> 
> 
3885,3887c3869
< static 
< void pad ( Char *s )
< ;
---
> 
3897,3899d3878
< static 
< Bool fileExists ( Char* name )
< ;
3904,3905d3882
< FILE* fopen_output_safely ( Char* name, const char* mode )
< ;
3910,3912d3886
< static 
< Bool notAStandardFile ( Char* name )
< ;
3917,3919c3891,3894
< static 
< Int32 countHardLinks ( Char* name )
< ;
---
> 
> 
> 
> 
3929,3931d3903
< static 
< void saveInputFileMetaInfo ( Char *srcName )
< ;
3934,3936d3905
< static 
< void applySavedMetaInfoToOutputFile ( Char *dstName )
< ;
3940,3942c3909,3911
< static 
< Bool containsDubiousChars ( Char* name )
< ;
---
> 
> 
> 
3953,3955d3921
< static 
< Bool hasSuffix ( Char* s, Char* suffix )
< ;
3957,3960d3922
< static 
< Bool mapSuffix ( Char* name, 
<                  Char* oldSuffix, Char* newSuffix )
< ;
3964,3966d3925
< static 
< void compress ( Char *name )
< ;
3970,3972d3928
< static 
< void uncompress ( Char *name )
< ;
3976,3978d3931
< static 
< void testf ( Char *name )
< ;
3982,3984d3934
< static 
< void license ( void )
< ;
3988,3990d3937
< static 
< void usage ( Char *fullProgName )
< ;
3994,3996c3941,3948
< static 
< void redundant ( Char* flag )
< ;
---
> 
> 
> 
> 
> 
> 
> 
> 
4017,4019d3968
< static 
< Cell *mkCell ( void )
< ;
4023,4025d3971
< static 
< Cell *snocString ( Cell *root, Char *name )
< ;
4029,4031c3975,3977
< static 
< void addFlagsFromEnvVar ( Cell** argList, Char* varName ) 
< ;
---
> 
> 
> 
(55.3 %, 91545 bytes)
===< pass_clang_binsrch :: replace-function-def-with-decl >===
1085,1088c1085
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1094,1101c1091
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1121,1125c1111
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1131,1136c1117
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1142,1144c1123
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1154,1162c1133
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1168,1257c1139
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1266,1599c1148
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1619,1627c1168
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1698,2204c1239
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2504,2640c1539
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
2646,2656c1545
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
2662,2752c1551
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3309,3367c2108
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
1085,1088c1085
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1094,1101c1091
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1121,1125c1111
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1131,1136c1117
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1142,1144c1123
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1154,1162c1133
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1168,1257c1139
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1266,1599c1148
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1266,1599c1266
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1619,1627c1286
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1698,2204c1357
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2504,2640c1657
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
2646,2656c1663
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
2662,2752c1669
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3309,3367c2226
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
(72.1 %, 57228 bytes)
===< pass_clang_binsrch :: remove-unused-function >===
446,447c446,448
< extern void 
< BZ2_blockSort ( EState* );
---
> 
> 
> ;
451,452d451
< extern void 
< BZ2_bsInitWrite ( EState* );
454,455d452
< extern void 
< BZ2_hbAssignCodes ( Int32*, UChar*, Int32, Int32, Int32 );
457,458c454
< extern void 
< BZ2_hbMakeCodeLengths ( UChar*, Int32*, Int32, Int32 );
---
> 
651,652c647
< extern Int32 
< BZ2_indexIntoF ( Int32, Int32* );
---
> 
657,659c652
< extern void 
< BZ2_hbCreateDecodeTables ( Int32*, Int32*, Int32*, UChar*,
<                            Int32,  Int32, Int32 );
---
> 
839,840c832
< void BZ2_blockSort ( EState* s )
< ;
---
> 
892,896d883
< void BZ2_hbMakeCodeLengths ( UChar *len, 
<                              Int32 *freq,
<                              Int32 alphaSize,
<                              Int32 maxLen )
< ;
900,905d886
< void BZ2_hbAssignCodes ( Int32 *code,
<                          UChar *length,
<                          Int32 minLen,
<                          Int32 maxLen,
<                          Int32 alphaSize )
< ;
909,916c890,892
< void BZ2_hbCreateDecodeTables ( Int32 *limit,
<                                 Int32 *base,
<                                 Int32 *perm,
<                                 UChar *length,
<                                 Int32 minLen,
<                                 Int32 maxLen,
<                                 Int32 alphaSize )
< ;
---
> 
> 
> 
1084,1088d1059
< void BZ2_bsInitWrite ( EState* s )
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
1092,1101c1063,1064
< static
< void bsFinishWrite ( EState* s )
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> 
> 
1129,1136d1091
< static
< void bsPutUInt32 ( EState* s, UInt32 u )
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
1140,1144c1095,1096
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
> 
1166,1254d1117
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
1256,1257d1118
<    s->nMTF = wr;
< }
1264,1266d1124
< static
< void sendMTFValues ( EState* s )
< ;
1284,1286c1142,1143
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
> 
1662,1663c1519
< Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
< ;
---
> 
446,447c446,448
< extern void 
< BZ2_blockSort ( EState* );
---
> 
> 
> ;
451,452d451
< extern void 
< BZ2_bsInitWrite ( EState* );
454,455d452
< extern void 
< BZ2_hbAssignCodes ( Int32*, UChar*, Int32, Int32, Int32 );
457,458c454
< extern void 
< BZ2_hbMakeCodeLengths ( UChar*, Int32*, Int32, Int32 );
---
> 
651,652c647
< extern Int32 
< BZ2_indexIntoF ( Int32, Int32* );
---
> 
657,659c652
< extern void 
< BZ2_hbCreateDecodeTables ( Int32*, Int32*, Int32*, UChar*,
<                            Int32,  Int32, Int32 );
---
> 
839,840c832
< void BZ2_blockSort ( EState* s )
< ;
---
> 
892,896d883
< void BZ2_hbMakeCodeLengths ( UChar *len, 
<                              Int32 *freq,
<                              Int32 alphaSize,
<                              Int32 maxLen )
< ;
900,905d886
< void BZ2_hbAssignCodes ( Int32 *code,
<                          UChar *length,
<                          Int32 minLen,
<                          Int32 maxLen,
<                          Int32 alphaSize )
< ;
909,916c890,892
< void BZ2_hbCreateDecodeTables ( Int32 *limit,
<                                 Int32 *base,
<                                 Int32 *perm,
<                                 UChar *length,
<                                 Int32 minLen,
<                                 Int32 maxLen,
<                                 Int32 alphaSize )
< ;
---
> 
> 
> 
1084,1088d1059
< void BZ2_bsInitWrite ( EState* s )
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
1092,1101c1063,1064
< static
< void bsFinishWrite ( EState* s )
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> 
> 
1662,1663c1625
< Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
< ;
---
> 
1092,1101c1092
< static
< void bsFinishWrite ( EState* s )
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> 
1129,1136d1119
< static
< void bsPutUInt32 ( EState* s, UInt32 u )
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
1140,1144c1123,1124
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
> 
1166,1252d1145
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
1254,1257d1146
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1264,1266d1152
< static
< void sendMTFValues ( EState* s )
< ;
1284,1286c1170,1171
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
> 
(72.8 %, 55792 bytes)
===< pass_clang :: remove-unused-function >===
1092,1099c1092
< static
< void bsPutUInt32 ( EState* s, UInt32 u )
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> 
1103,1107c1103
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
(72.9 %, 55597 bytes)
1096,1100c1096
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
1122,1129d1121
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1131,1213d1122
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
(72.9 %, 55521 bytes)
1081,1088c1081
< static
< __inline__
< void bsW ( EState* s, Int32 n, UInt32 v )
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> 
1118,1125d1117
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1127,1209d1118
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1216,1218c1216
< static
< void sendMTFValues ( EState* s )
< ;
---
> 
(73.0 %, 55376 bytes)
1111,1118d1110
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1120,1202d1111
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1209,1211c1209
< static
< void sendMTFValues ( EState* s )
< ;
---
> 
1229,1231c1229
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
(73.0 %, 55335 bytes)
1227,1229c1227
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
(73.0 %, 55297 bytes)
===< pass_balanced :: curly >===
31,47c31
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
---
>    struct  
255c255
<    { if (!(cond)) BZ2_bz__AssertH__fail ( errcode ); }
---
>    
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    
(73.0 %, 55246 bytes)
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    { if (!(cond)) }
318,322c318
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
---
>    if (s->rNToGo == 0)                                            \
332,334c332
< {                                              \
<    crcVar = 0xffffffffL;                       \
< }
---
> 
(73.1 %, 55102 bytes)
314,318c314
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
---
>    if (s->rNToGo == 0)                                            \
328,330c328
< {                                              \
<    crcVar = 0xffffffffL;                       \
< }
---
> 
(73.2 %, 54925 bytes)
324,326c324
< {                                              \
<    crcVar = 0xffffffffL;                       \
< }
---
> 
329,331c329
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
---
> 
334,338c334
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
---
> 
(73.2 %, 54826 bytes)
327,329c327
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
---
> 
332,336c332
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
---
> 
(73.3 %, 54727 bytes)
330,334c330
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
---
> 
359,427c359
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>    struct 
505,594c505
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
---
>    struct 
612,615c612
<    { if (((i) & 0x1) == 0)                                    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
<    }
---
>    
(73.4 %, 54530 bytes)
355,423c355
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>    struct 
501,590c501
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
---
>    struct 
608,611c608
<    { if (((i) & 0x1) == 0)                                    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
<    }
---
>    
617,619c617
<    { s->ll16[i] = (UInt16)(n & 0x0000ffff);  \
<      SET_LL4(i, n >> 16);                    \
<    }
---
>    
664c664
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
(73.5 %, 54325 bytes)
614,616c614
<    { s->ll16[i] = (UInt16)(n & 0x0000ffff);  \
<      SET_LL4(i, n >> 16);                    \
<    }
---
>    
661c661
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
(73.5 %, 54230 bytes)
659c659
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
662,670c662
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
(73.6 %, 54184 bytes)
662,670c662
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
666,669c666
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
---
>    while (yyn > 0)                                   \
(73.7 %, 53863 bytes)
667,669c667
< #define fpush(lz,hz) { stackLo[sp] = lz; \
<                        stackHi[sp] = hz; \
<                        sp++; }
---
> #define fpush(lz,hz) 
671,673c671
< #define fpop(lz,hz) { sp--;              \
<                       lz = stackLo[sp];  \
<                       hz = stackHi[sp]; }
---
> #define fpop(lz,hz) 
(73.8 %, 53768 bytes)
669,671c669
< #define fpop(lz,hz) { sp--;              \
<                       lz = stackLo[sp];  \
<                       hz = stackHi[sp]; }
---
> #define fpop(lz,hz) 
719,721c719
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] = ;
730c730
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
(73.8 %, 53661 bytes)
717,719c717
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] = ;
728c728
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
731,739c731
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
(73.8 %, 53615 bytes)
731,739c731
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
735,738c735
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
---
>    while (yyn > 0)                                   \
(74.0 %, 53294 bytes)
737,740c737
< #define mpush(lz,hz,dz) { stackLo[sp] = lz; \
<                           stackHi[sp] = hz; \
<                           stackD [sp] = dz; \
<                           sp++; }
---
> #define mpush(lz,hz,dz) 
742,745c742
< #define mpop(lz,hz,dz) { sp--;             \
<                          lz = stackLo[sp]; \
<                          hz = stackHi[sp]; \
<                          dz = stackD [sp]; }
---
> #define mpop(lz,hz,dz) 
751,754c751
<    { Int32 tz;                                                  \
<      tz = nextLo[az]; nextLo[az] = nextLo[bz]; nextLo[bz] = tz; \
<      tz = nextHi[az]; nextHi[az] = nextHi[bz]; nextHi[bz] = tz; \
<      tz = nextD [az]; nextD [az] = nextD [bz]; nextD [bz] = tz; }
---
>    
(74.1 %, 53147 bytes)
739,742c739
< #define mpop(lz,hz,dz) { sp--;             \
<                          lz = stackLo[sp]; \
<                          hz = stackHi[sp]; \
<                          dz = stackD [sp]; }
---
> #define mpop(lz,hz,dz) 
748,751c748
<    { Int32 tz;                                                  \
<      tz = nextLo[az]; nextLo[az] = nextLo[bz]; nextLo[bz] = tz; \
<      tz = nextHi[az]; nextHi[az] = nextHi[bz]; nextHi[bz] = tz; \
<      tz = nextD [az]; nextD [az] = nextD [bz]; nextD [bz] = tz; }
---
>    
(74.1 %, 52991 bytes)
745,748c745
<    { Int32 tz;                                                  \
<      tz = nextLo[az]; nextLo[az] = nextLo[bz]; nextLo[bz] = tz; \
<      tz = nextHi[az]; nextHi[az] = nextHi[bz]; nextHi[bz] = tz; \
<      tz = nextD [az]; nextD [az] = nextD [bz]; nextD [bz] = tz; }
---
>    
808,816c808
< {                                                     \
<    Int32 zz, tmp;                                     \
<    zz = z; tmp = heap[zz];                            \
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
(74.3 %, 52731 bytes)
805,813c805
< {                                                     \
<    Int32 zz, tmp;                                     \
<    zz = z; tmp = heap[zz];                            \
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
808,811c808
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
---
>    while (weight[tmp] < weight[heap[zz >> 1]])                                                   \
816,830c816
< {                                                     \
<    Int32 zz, yy, tmp;                                 \
<    zz = z; tmp = heap[zz];                            \
<    while (True) {                                     \
<       yy = zz << 1;                                   \
<       if (yy > nHeap) break;                          \
<       if (yy < nHeap &&                               \
<           weight[heap[yy+1]] < weight[heap[yy]])      \
<          yy++;                                        \
<       if (weight[tmp] < weight[heap[yy]]) break;      \
<       heap[zz] = heap[yy];                            \
<       zz = yy;                                        \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
(74.5 %, 52282 bytes)
808,822c808
< {                                                     \
<    Int32 zz, yy, tmp;                                 \
<    zz = z; tmp = heap[zz];                            \
<    while (True) {                                     \
<       yy = zz << 1;                                   \
<       if (yy > nHeap) break;                          \
<       if (yy < nHeap &&                               \
<           weight[heap[yy+1]] < weight[heap[yy]])      \
<          yy++;                                        \
<       if (weight[tmp] < weight[heap[yy]]) break;      \
<       heap[zz] = heap[yy];                            \
<       zz = yy;                                        \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
811,820c811
<    while (True) {                                     \
<       yy = zz << 1;                                   \
<       if (yy > nHeap) break;                          \
<       if (yy < nHeap &&                               \
<           weight[heap[yy+1]] < weight[heap[yy]])      \
<          yy++;                                        \
<       if (weight[tmp] < weight[heap[yy]]) break;      \
<       heap[zz] = heap[yy];                            \
<       zz = yy;                                        \
<    }                                                  \
---
>    while (True)                                                   \
849,917c849
< UInt32 BZ2_crc32Table[256] = {
< 
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
---
> UInt32 BZ2_crc32Table[256] = ;
(74.9 %, 51497 bytes)
835,903c835
< UInt32 BZ2_crc32Table[256] = {
< 
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
---
> UInt32 BZ2_crc32Table[256] = ;
917,970c917
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> Int32 BZ2_rNums[512] = ;
997,1005c997
< {                                             \
<    while (s->bsLive >= 8) {                   \
<       s->zbits[s->numZ]                       \
<          = (UChar)(s->bsBuff >> 24);          \
<       s->numZ++;                              \
<       s->bsBuff <<= 8;                        \
<       s->bsLive -= 8;                         \
<    }                                          \
< }
---
> 
998,1004c998
<    while (s->bsLive >= 8) {                   \
<       s->zbits[s->numZ]                       \
<          = (UChar)(s->bsBuff >> 24);          \
<       s->numZ++;                              \
<       s->bsBuff <<= 8;                        \
<       s->bsLive -= 8;                         \
<    }                                          \
---
>    while (s->bsLive >= 8)                                           \
1027,1035c1027
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> 
1031,1034c1031
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
---
>       if (s->inUse[i]) 
1041,1046d1040
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1048,1130d1041
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1062,1109c1062
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
---
>    for (i = 0; i < s->nblock; i++) 
(75.1 %, 51112 bytes)
1019,1027c1019
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> 
1023,1026c1023
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
---
>       if (s->inUse[i]) 
1033,1038d1032
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1040,1122d1033
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1054,1101c1054
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
---
>    for (i = 0; i < s->nblock; i++) 
1061,1063c1061
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
---
>       if (yy[0] == ll_i)  else {
1063,1100c1063
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
---
>       } else 
1065,1079c1065
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
---
>          if (zPend > 0) 
1067,1077c1067
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
---
>             while (True) ;
(75.3 %, 50690 bytes)
1066,1084c1066
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
---
>          
1074,1080c1074
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
---
>             while ( rll_i != rtmp ) ;
1089,1103c1089
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
---
>    if (zPend > 0) 
(75.3 %, 50521 bytes)
1083,1097c1083
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
---
>    if (zPend > 0) 
1085,1095c1085
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
---
>       while (True) ;
1086,1089c1086
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
---
>          if (zPend & 1)  else {
1089,1092c1089
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
---
>          } else 
(75.5 %, 50183 bytes)
1118c1118
<    { retVal = rrr; goto save_state_and_return; };
---
>    ;
1122,1142c1122
<    while (True) {                                 \
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
<       if (s->strm->avail_in == 0) RETURN(BZ_OK);  \
<       s->bsBuff                                   \
<          = (s->bsBuff << 8) |                     \
<            ((UInt32)                              \
<               (*((UChar*)(s->strm->next_in))));   \
<       s->bsLive += 8;                             \
<       s->strm->next_in++;                         \
<       s->strm->avail_in--;                        \
<       s->strm->total_in_lo32++;                   \
<       if (s->strm->total_in_lo32 == 0)            \
<          s->strm->total_in_hi32++;                \
<    }
---
>    while (True) 
(75.5 %, 50138 bytes)
1122,1142c1122
<    while (True) {                                 \
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
<       if (s->strm->avail_in == 0) RETURN(BZ_OK);  \
<       s->bsBuff                                   \
<          = (s->bsBuff << 8) |                     \
<            ((UInt32)                              \
<               (*((UChar*)(s->strm->next_in))));   \
<       s->bsLive += 8;                             \
<       s->strm->next_in++;                         \
<       s->strm->avail_in--;                        \
<       s->strm->total_in_lo32++;                   \
<       if (s->strm->total_in_lo32 == 0)            \
<          s->strm->total_in_hi32++;                \
<    }
---
>    while (True) 
1123,1130c1123
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
---
>       if (s->bsLive >= nnn)                                            \
(76.0 %, 49110 bytes)
1132,1159c1132
< {                                                 \
<    if (groupPos == 0) {                           \
<       groupNo++;                                  \
<       if (groupNo >= nSelectors)                  \
<          RETURN(BZ_DATA_ERROR);                   \
<       groupPos = BZ_G_SIZE;                       \
<       gSel = s->selector[groupNo];                \
<       gMinlen = s->minLens[gSel];                 \
<       gLimit = &(s->limit[gSel][0]);              \
<       gPerm = &(s->perm[gSel][0]);                \
<       gBase = &(s->base[gSel][0]);                \
<    }                                              \
<    groupPos--;                                    \
<    zn = gMinlen;                                  \
<    GET_BITS(label1, zvec, zn);                    \
<    while (1) {                                    \
<       if (zn > 20 )         \
<          RETURN(BZ_DATA_ERROR);                   \
<       if (zvec <= gLimit[zn]) break;              \
<       zn++;                                       \
<       GET_BIT(label2, zj);                        \
<       zvec = (zvec << 1) | zj;                    \
<    };                                             \
<    if (zvec - gBase[zn] < 0                       \
<        || zvec - gBase[zn] >= BZ_MAX_ALPHA_SIZE)  \
<       RETURN(BZ_DATA_ERROR);                      \
<    lval = gPerm[zvec - gBase[zn]];                \
< }
---
> 
1133,1143c1133
<    if (groupPos == 0) {                           \
<       groupNo++;                                  \
<       if (groupNo >= nSelectors)                  \
<          RETURN(BZ_DATA_ERROR);                   \
<       groupPos = BZ_G_SIZE;                       \
<       gSel = s->selector[groupNo];                \
<       gMinlen = s->minLens[gSel];                 \
<       gLimit = &(s->limit[gSel][0]);              \
<       gPerm = &(s->perm[gSel][0]);                \
<       gBase = &(s->base[gSel][0]);                \
<    }                                              \
---
>    if (groupPos == 0)                                               \
1147,1154c1147
<    while (1) {                                    \
<       if (zn > 20 )         \
<          RETURN(BZ_DATA_ERROR);                   \
<       if (zvec <= gLimit[zn]) break;              \
<       zn++;                                       \
<       GET_BIT(label2, zj);                        \
<       zvec = (zvec << 1) | zj;                    \
<    };                                             \
---
>    while (1) ;                                             \
(76.7 %, 47727 bytes)
1198,1200d1197
< {
<    Int32   n;
<    EState* s;
1202,1256d1198
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 250)
<      return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm = strm;
< 
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) {
<       if (s->arr1 != NULL) BZFREE(s->arr1);
<       if (s->arr2 != NULL) BZFREE(s->arr2);
<       if (s->ftab != NULL) BZFREE(s->ftab);
<       if (s       != NULL) BZFREE(s);
<       return BZ_MEM_ERROR;
<    }
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
<    init_RL ( s );
<    prepare_new_block ( s );
<    return BZ_OK;
< }
1226,1232c1226
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) {
<       if (s->arr1 != NULL) BZFREE(s->arr1);
<       if (s->arr2 != NULL) BZFREE(s->arr2);
<       if (s->ftab != NULL) BZFREE(s->ftab);
<       if (s       != NULL) BZFREE(s);
<       return BZ_MEM_ERROR;
<    }
---
>    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1269,1292c1269
< {                                                 \
<    UInt32 zchh = (UInt32)(zchh0);                 \
<               \
<    if (zchh != zs->state_in_ch &&                 \
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
<    else                                           \
<                  \
<    if (zchh != zs->state_in_ch ||                 \
<       zs->state_in_len == 255) {                  \
<       if (zs->state_in_ch < 256)                  \
<          add_pair_to_block ( zs );                \
<       zs->state_in_ch = zchh;                     \
<       zs->state_in_len = 1;                       \
<    } else {                                       \
<       zs->state_in_len++;                         \
<    }                                              \
< }
---
> 
1273,1280c1273
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
---
>        zs->state_in_len == 1)                                               \
(76.8 %, 47524 bytes)
1263,1286c1263
< {                                                 \
<    UInt32 zchh = (UInt32)(zchh0);                 \
<               \
<    if (zchh != zs->state_in_ch &&                 \
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
<    else                                           \
<                  \
<    if (zchh != zs->state_in_ch ||                 \
<       zs->state_in_len == 255) {                  \
<       if (zs->state_in_ch < 256)                  \
<          add_pair_to_block ( zs );                \
<       zs->state_in_ch = zchh;                     \
<       zs->state_in_len = 1;                       \
<    } else {                                       \
<       zs->state_in_len++;                         \
<    }                                              \
< }
---
> 
1267,1274c1267
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
---
>        zs->state_in_len == 1)                                               \
(77.4 %, 46396 bytes)
1282,1288d1281
< {
<    Bool progress;
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1290,1338d1282
<    preswitch:
<    switch (s->mode) {
< 
<       case BZ_M_IDLE:
<          return BZ_SEQUENCE_ERROR;
< 
<       case BZ_M_RUNNING:
<          if (action == BZ_RUN) {
<             progress = handle_compress ( strm );
<             return progress ? BZ_RUN_OK : BZ_PARAM_ERROR;
<          } 
<          else
< 	 if (action == BZ_FLUSH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FLUSHING;
<             goto preswitch;
<          }
<          else
<          if (action == BZ_FINISH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FINISHING;
<             goto preswitch;
<          }
<          else 
<             return BZ_PARAM_ERROR;
< 
<       case BZ_M_FLUSHING:
<          if (action != BZ_FLUSH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FLUSH_OK;
<          s->mode = BZ_M_RUNNING;
<          return BZ_RUN_OK;
< 
<       case BZ_M_FINISHING:
<          if (action != BZ_FINISH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (!progress) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FINISH_OK;
<          s->mode = BZ_M_IDLE;
<          return BZ_STREAM_END;
<    }
<    return BZ_OK; 
< }
1291,1336c1291
<    switch (s->mode) {
< 
<       case BZ_M_IDLE:
<          return BZ_SEQUENCE_ERROR;
< 
<       case BZ_M_RUNNING:
<          if (action == BZ_RUN) {
<             progress = handle_compress ( strm );
<             return progress ? BZ_RUN_OK : BZ_PARAM_ERROR;
<          } 
<          else
< 	 if (action == BZ_FLUSH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FLUSHING;
<             goto preswitch;
<          }
<          else
<          if (action == BZ_FINISH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FINISHING;
<             goto preswitch;
<          }
<          else 
<             return BZ_PARAM_ERROR;
< 
<       case BZ_M_FLUSHING:
<          if (action != BZ_FLUSH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FLUSH_OK;
<          s->mode = BZ_M_RUNNING;
<          return BZ_RUN_OK;
< 
<       case BZ_M_FINISHING:
<          if (action != BZ_FINISH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (!progress) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FINISH_OK;
<          s->mode = BZ_M_IDLE;
<          return BZ_STREAM_END;
<    }
---
>    switch (s->mode) 
1297,1300c1297
<          if (action == BZ_RUN) {
<             progress = handle_compress ( strm );
<             return progress ? BZ_RUN_OK : BZ_PARAM_ERROR;
<          } 
---
>          if (action == BZ_RUN)  
1302,1306c1302
< 	 if (action == BZ_FLUSH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FLUSHING;
<             goto preswitch;
<          }
---
> 	 if (action == BZ_FLUSH) 
1308,1312c1308
<          if (action == BZ_FINISH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FINISHING;
<             goto preswitch;
<          }
---
>          if (action == BZ_FINISH) 
1343,1348d1342
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1350,1358d1343
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
1370,1371d1369
< {
<    DState* s;
1373,1402d1370
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
1424,1429d1423
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1431,1471d1424
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
1431,1466c1431
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
---
>    while (True) 
(78.1 %, 44901 bytes)
1298,1303d1297
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1305,1313d1298
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
1325,1326d1324
< {
<    DState* s;
1328,1357d1325
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
1379,1384d1378
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1386,1426d1379
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
1386,1421c1386
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
---
>    while (True) 
1388,1408c1388
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
---
>       if (s->state == BZ_X_OUTPUT) 
1392,1405c1392
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
---
>          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0)  else {
(78.8 %, 43431 bytes)
1396,1401d1395
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1403,1411d1396
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
1419,1422c1419
< {                                         \
<    if (bzerror != NULL) *bzerror = eee;   \
<    if (bzf != NULL) bzf->lastErr = eee;   \
< }
---
> 
1425,1433c1425
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct 
1448,1450d1447
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
1452,1485d1448
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1458c1458
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
---
>       ;
(78.9 %, 43298 bytes)
1422,1430c1422
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct 
1445,1447d1444
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
1449,1482d1445
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1455c1455
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
---
>       ;
1458c1458
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1462c1462
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(78.9 %, 43255 bytes)
1458c1458
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1462c1462
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(78.9 %, 43215 bytes)
1462c1462
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
1477c1477
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
(78.9 %, 43174 bytes)
1477c1477
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
1492,1494d1491
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1496,1528d1492
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
1498c1498
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
(79.0 %, 43131 bytes)
1492,1494d1491
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1496,1528d1492
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
1498c1498
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1500c1500
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(79.0 %, 43093 bytes)
1500c1500
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1502c1502
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
1505c1505
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
(79.0 %, 43052 bytes)
1502c1502
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
1505c1505
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
(79.0 %, 43017 bytes)
1505c1505
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1510,1527c1510
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
---
>    while (True) 
1515c1515
<          { BZ_SETERR(ret); return; };
---
>          ;
(79.0 %, 42988 bytes)
1510,1527c1510
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
---
>    while (True) 
1515c1515
<          { BZ_SETERR(ret); return; };
---
>          ;
1517,1523c1517
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
---
>       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
(79.0 %, 42961 bytes)
1517,1523c1517
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
---
>       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
1522c1522
<             { BZ_SETERR(BZ_IO_ERROR); return; };
---
>             ;
(79.2 %, 42709 bytes)
1520c1520
<          { BZ_SETERR(BZ_OK); return; };
---
>          ;
1532,1535c1532
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
> 
1546,1548d1545
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1550,1600d1546
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1551c1551
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
(79.2 %, 42680 bytes)
1532,1535c1532
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
> 
1546,1548d1545
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1550,1600d1546
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1551c1551
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1553c1553
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(79.2 %, 42651 bytes)
1553c1553
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1555c1555
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
(79.2 %, 42610 bytes)
1555c1555
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
1562,1580c1562
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
---
>    if ((!abandon) && bzf->lastErr == BZ_OK) 
1563,1579c1563
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
---
>       while (True) 
1568c1568
<             { BZ_SETERR(ret); return; };
---
>             ;
(79.2 %, 42575 bytes)
1562,1580c1562
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
---
>    if ((!abandon) && bzf->lastErr == BZ_OK) 
1563,1579c1563
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
---
>       while (True) 
1568c1568
<             { BZ_SETERR(ret); return; };
---
>             ;
(79.5 %, 41931 bytes)
1564,1568c1564
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
---
>    if ( !abandon && !ferror ( bzf->handle ) ) 
1567c1567
<          { BZ_SETERR(BZ_IO_ERROR); return; };
---
>          ;
(79.6 %, 41818 bytes)
1589,1591d1588
< {
<    bzFile* bzf = NULL;
<    int     ret;
1593,1634d1589
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1600c1600
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
---
>       ;
1603c1603
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1607c1607
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(79.6 %, 41775 bytes)
1603c1603
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1607c1607
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(79.6 %, 41735 bytes)
1607c1607
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
1619,1623c1619
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
---
>    while (nUnused > 0) 
1627c1627
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
(79.7 %, 41694 bytes)
1619,1623c1619
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
---
>    while (nUnused > 0) 
1627c1627
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
1639,1640d1638
< {
<    bzFile* bzf = (bzFile*)b;
1642,1652d1639
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
(79.7 %, 41556 bytes)
1623c1623
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
1635,1636d1634
< {
<    bzFile* bzf = (bzFile*)b;
1638,1648d1635
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1640c1640
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
(79.7 %, 41513 bytes)
1635,1636d1634
< {
<    bzFile* bzf = (bzFile*)b;
1638,1648d1635
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1640c1640
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1643c1643
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(79.8 %, 41484 bytes)
1643c1643
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1657,1659d1656
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
1661,1708d1657
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return 0; };
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
< 
<    return 0; 
< }
1664c1664
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
---
>       ;
(79.8 %, 41443 bytes)
1657,1659d1656
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
1661,1708d1657
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return 0; };
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
< 
<    return 0; 
< }
1664c1664
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
---
>       ;
1667c1667
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
---
>       ;
(79.8 %, 41403 bytes)
1667c1667
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
---
>       ;
1670c1670
<       { BZ_SETERR(BZ_OK); return 0; };
---
>       ;
(79.8 %, 41360 bytes)
1670c1670
<       { BZ_SETERR(BZ_OK); return 0; };
---
>       ;
1675,1705c1675
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
---
>    while (True) 
1678c1678
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
---
>          ;
(79.8 %, 41329 bytes)
1675,1705c1675
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
---
>    while (True) 
1678c1678
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
---
>          ;
(80.3 %, 40376 bytes)
1687,1694d1686
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (bzf->lastErr != BZ_STREAM_END)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (unused == NULL || nUnused == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
1696,1699d1687
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
1690c1690
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1692c1692
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(80.3 %, 40338 bytes)
1692c1692
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1694c1694
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1715,1717d1714
< {
<    bz_stream strm;
<    int ret;
1719,1755d1715
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow:
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    BZ2_bzCompressEnd ( &strm );
<    return ret;
< }
(80.3 %, 40297 bytes)
1694c1694
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1715,1717d1714
< {
<    bz_stream strm;
<    int ret;
1719,1755d1715
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow:
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    BZ2_bzCompressEnd ( &strm );
<    return ret;
< }
1766,1768d1765
< {
<    bz_stream strm;
<    int ret;
1770,1808d1766
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzDecompress ( &strm );
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    BZ2_bzDecompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
< 
<    errhandler:
<    BZ2_bzDecompressEnd ( &strm );
<    return ret; 
< }
1797,1800c1797
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
---
>    if (strm.avail_out > 0)  else {
1800,1803c1800
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
---
>    } else ;      
(80.4 %, 40259 bytes)
1715,1717d1714
< {
<    bz_stream strm;
<    int ret;
1719,1755d1715
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow:
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    BZ2_bzCompressEnd ( &strm );
<    return ret;
< }
1766,1768d1765
< {
<    bz_stream strm;
<    int ret;
1770,1808d1766
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzDecompress ( &strm );
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    BZ2_bzDecompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
< 
<    errhandler:
<    BZ2_bzDecompressEnd ( &strm );
<    return ret; 
< }
1797,1800c1797
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
---
>    if (strm.avail_out > 0)  else {
1800,1803c1800
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
---
>    } else ;      
1818,1820c1818
< {
<    return BZ_VERSION;
< }
---
> 
1839,1841c1839
< {
<    return bzopen_or_bzdopen(path,-1,mode,0);
< }
---
> 
1848,1850c1848
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
> 
1855,1864c1855
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
> 
1859,1861c1859
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)  else {
1861,1863c1861
<    } else {
<       return -1;
<    }
---
>    } else 
1869,1870d1868
< {
<    int bzerr;
1872,1878d1869
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
1873,1875c1873
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
---
>    if(bzerr == BZ_OK)else{
1875,1877c1875
<    }else{
<       return -1;
<    }
---
>    }else
1883,1886c1883
< {
<    
<    return 0;
< }
---
> 
1891,1907c1891
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) {return;}
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
---
> 
1895c1895
<    if (b==NULL) {return;}
---
>    if (b==NULL) 
(80.4 %, 40186 bytes)
1815,1817c1815
< {
<    return BZ_VERSION;
< }
---
> 
1836,1838c1836
< {
<    return bzopen_or_bzdopen(path,-1,mode,0);
< }
---
> 
1845,1847c1845
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
> 
1852,1861c1852
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
> 
1856,1858c1856
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)  else {
1858,1860c1858
<    } else {
<       return -1;
<    }
---
>    } else 
1866,1867d1865
< {
<    int bzerr;
1869,1875d1866
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
1870,1872c1870
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
---
>    if(bzerr == BZ_OK)else{
1872,1874c1872
<    }else{
<       return -1;
<    }
---
>    }else
1880,1883c1880
< {
<    
<    return 0;
< }
---
> 
1888,1904c1888
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) {return;}
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
---
> 
1892c1892
<    if (b==NULL) {return;}
---
>    if (b==NULL) 
1893,1898c1893
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
---
>    if(((bzFile*)b)->writing)else{
1895,1897c1895
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
---
>       if(bzerr != BZ_OK)
1898,1900c1898
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
---
>    }else
1901,1903c1901
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
---
>    if(fp!=stdin && fp!=stdout)
1909,1926c1909
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = ;
1930,1931d1929
< {
<    int err = ((bzFile *)b)->lastErr;
1933,1936d1930
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
1977c1977
< #define ERROR_IF_EOF(i)       { if ((i) == EOF)  ioError(); }
---
> #define ERROR_IF_EOF(i)       
(80.4 %, 40177 bytes)
1893,1898c1893
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
---
>    if(((bzFile*)b)->writing)else{
1895,1897c1895
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
---
>       if(bzerr != BZ_OK)
1898,1900c1898
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
---
>    }else
1901,1903c1901
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
---
>    if(fp!=stdin && fp!=stdout)
1909,1926c1909
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = ;
1930,1931d1929
< {
<    int err = ((bzFile *)b)->lastErr;
1933,1936d1930
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
1977c1977
< #define ERROR_IF_EOF(i)       { if ((i) == EOF)  ioError(); }
---
> #define ERROR_IF_EOF(i)       
(80.4 %, 40138 bytes)
1899,1901c1899
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
---
>    if(fp!=stdin && fp!=stdout)
1907,1924c1907
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = ;
1928,1929d1927
< {
<    int err = ((bzFile *)b)->lastErr;
1931,1934d1928
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
1975c1975
< #define ERROR_IF_EOF(i)       { if ((i) == EOF)  ioError(); }
---
> #define ERROR_IF_EOF(i)       
1976c1976
< #define ERROR_IF_NOT_ZERO(i)  { if ((i) != 0)    ioError(); }
---
> #define ERROR_IF_NOT_ZERO(i)  
1977c1977
< #define ERROR_IF_MINUS_ONE(i) { if ((i) == (-1)) ioError(); }
---
> #define ERROR_IF_MINUS_ONE(i) 
(80.4 %, 40107 bytes)
1976c1976
< #define ERROR_IF_NOT_ZERO(i)  { if ((i) != 0)    ioError(); }
---
> #define ERROR_IF_NOT_ZERO(i)  
1977c1977
< #define ERROR_IF_MINUS_ONE(i) { if ((i) == (-1)) ioError(); }
---
> #define ERROR_IF_MINUS_ONE(i) 
(80.4 %, 40076 bytes)
1977c1977
< #define ERROR_IF_MINUS_ONE(i) { if ((i) == (-1)) ioError(); }
---
> #define ERROR_IF_MINUS_ONE(i) 
2070c2070
<    struct { UChar b[8]; } 
---
>    struct  
(80.5 %, 40045 bytes)
2070c2070
<    struct { UChar b[8]; } 
---
>    struct  
2216c2216
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    = ;
2218c2218
<    = { "", "", ".tar", ".tar" };
---
>    = ;
2253,2256c2253
<    struct zzzz {
<       Char        *name;
<       struct zzzz *link;
<    }
---
>    struct zzzz 
(80.5 %, 40030 bytes)
2216c2216
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    = ;
2218c2218
<    = { "", "", ".tar", ".tar" };
---
>    = ;
2253,2256c2253
<    struct zzzz {
<       Char        *name;
<       struct zzzz *link;
<    }
---
>    struct zzzz 
(80.5 %, 39974 bytes)
===< pass_clang :: callexpr-to-value >===
1045c1045
<    makeMaps_e ( s );
---
>    ;
1202c1202
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
---
>    if (!0) return BZ_CONFIG_ERROR;
(80.5 %, 39958 bytes)
1202c1202
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
---
>    if (!0) return BZ_CONFIG_ERROR;
1247c1247
<    init_RL ( s );
---
>    ;
(80.5 %, 39945 bytes)
1247c1247
<    init_RL ( s );
---
>    ;
1248c1248
<    prepare_new_block ( s );
---
>    ;
(80.5 %, 39932 bytes)
1248c1248
<    prepare_new_block ( s );
---
>    ;
1328c1328
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
---
>    if (!0) return BZ_CONFIG_ERROR;
(80.5 %, 39909 bytes)
1328c1328
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
---
>    if (!0) return BZ_CONFIG_ERROR;
1513c1513
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
---
>       ret = 0;
1576c1576
<    BZ2_bzCompressEnd ( &(bzf->strm) );
---
>    0;
(80.5 %, 39896 bytes)
1513c1513
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
---
>       ret = 0;
1576c1576
<    BZ2_bzCompressEnd ( &(bzf->strm) );
---
>    0;
1577c1577
<    free ( bzf );
---
>    0;
(80.6 %, 39858 bytes)
1576c1576
<    BZ2_bzCompressEnd ( &(bzf->strm) );
---
>    0;
1577c1577
<    free ( bzf );
---
>    0;
(80.6 %, 39825 bytes)
1577c1577
<    free ( bzf );
---
>    0;
1646c1646
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
---
>       (void)0;
(80.6 %, 39814 bytes)
1646c1646
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
---
>       (void)0;
1647c1647
<    free ( bzf );
---
>    0;
(80.6 %, 39779 bytes)
1647c1647
<    free ( bzf );
---
>    0;
1730,1731c1730
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
---
>    ret = 0;
(80.6 %, 39768 bytes)
1730,1731c1730
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
---
>    ret = 0;
1739c1739
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
---
>    ret = 0;
(80.6 %, 39672 bytes)
1738c1738
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
---
>    ret = 0;
1744c1744
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
(80.7 %, 39638 bytes)
1744c1744
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
1748c1748
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
(80.7 %, 39612 bytes)
1748c1748
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
1752c1752
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
(80.7 %, 39586 bytes)
1752c1752
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
1778c1778
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
---
>    ret = 0;
(80.7 %, 39560 bytes)
1778c1778
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
---
>    ret = 0;
1786c1786
<    ret = BZ2_bzDecompress ( &strm );
---
>    ret = 0;
(80.7 %, 39513 bytes)
1786c1786
<    ret = BZ2_bzDecompress ( &strm );
---
>    ret = 0;
1792c1792
<    BZ2_bzDecompressEnd ( &strm );
---
>    0;
(80.7 %, 39488 bytes)
1792c1792
<    BZ2_bzDecompressEnd ( &strm );
---
>    0;
1797c1797
<       BZ2_bzDecompressEnd ( &strm );
---
>       0;
(80.7 %, 39460 bytes)
1797c1797
<       BZ2_bzDecompressEnd ( &strm );
---
>       0;
1802c1802
<    BZ2_bzDecompressEnd ( &strm );
---
>    0;
(80.8 %, 39432 bytes)
1802c1802
<    BZ2_bzDecompressEnd ( &strm );
---
>    0;
1836c1836
<    return bzopen_or_bzdopen(path,-1,mode,0);
---
>    return 0;
(80.8 %, 39404 bytes)
1836c1836
<    return bzopen_or_bzdopen(path,-1,mode,0);
---
>    return 0;
1854c1854
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
---
>    nread = 0;
(80.8 %, 39372 bytes)
1854c1854
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
---
>    nread = 0;
1868c1868
<    BZ2_bzWrite(&bzerr,b,buf,len);
---
>    ;
(80.8 %, 39345 bytes)
1868c1868
<    BZ2_bzWrite(&bzerr,b,buf,len);
---
>    ;
(80.8 %, 39316 bytes)
===< pass_clang :: replace-callexpr >===
===< pass_clang :: simplify-callexpr >===
===< pass_clang :: remove-unused-enum-member >===
===< pass_clang :: remove-enum-member-value >===
===< pass_clang :: remove-unused-var >===
301c301
< extern Int32 BZ2_rNums[512];
---
> 
321c321
< extern UInt32 BZ2_crc32Table[256];
---
> 
(80.8 %, 39288 bytes)
321c321
< extern UInt32 BZ2_crc32Table[256];
---
> 
716,719c716
< static
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> 
(80.8 %, 39254 bytes)
716,719c716
< static
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> 
835d834
< UInt32 BZ2_crc32Table[256] = {
837,903d835
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
(80.9 %, 39108 bytes)
832d831
< UInt32 BZ2_crc32Table[256] = {
834,900d832
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
914,967c914
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> 
(82.7 %, 35550 bytes)
846,899c846
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> 
1212c1212
<    Bool progress;
---
>    
(84.0 %, 32784 bytes)
1159c1159
<    Bool progress;
---
>    
1369c1369
<    Int32 n, n2, ret;
---
>    Int32  n2, ret;
(84.0 %, 32770 bytes)
1369c1369
<    Int32 n, n2, ret;
---
>    Int32  n2, ret;
1369c1369
<    Int32 n, n2, ret;
---
>    Int32 n, ret;
(84.0 %, 32768 bytes)
1369c1369
<    Int32  n2, ret;
---
>    Int32   ret;
1423c1423
<    Int32   n, n2, ret;
---
>    Int32    n2, ret;
1423c1423
<    Int32   n, n2, ret;
---
>    Int32   n, ret;
(84.0 %, 32765 bytes)
1423c1423
<    Int32   n, n2, ret;
---
>    Int32    n2, ret;
1423c1423
<    Int32   n, n2, ret;
---
>    Int32   n, ret;
(84.0 %, 32763 bytes)
1423c1423
<    Int32    n2, ret;
---
>    Int32     ret;
1423c1423
<    Int32    n2, ret;
---
>    Int32    n2;
(84.0 %, 32760 bytes)
1423c1423
<    Int32     ret;
---
>    
1534c1534
<    Int32   n, ret;
---
>    Int32    ret;
(84.0 %, 32746 bytes)
1534c1534
<    Int32   n, ret;
---
>    Int32    ret;
1534c1534
<    Int32   n, ret;
---
>    Int32   n;
1896c1896
< Int32   verbosity;
---
> 
(84.0 %, 32744 bytes)
1534c1534
<    Int32    ret;
---
>    
1896c1896
< Int32   verbosity;
---
> 
(84.0 %, 32731 bytes)
1896c1896
< Int32   verbosity;
---
> 
1897c1897
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool     smallMode, deleteOutputOnInterrupt;
(84.0 %, 32713 bytes)
1897c1897
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool     smallMode, deleteOutputOnInterrupt;
1897c1897
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool    keepInputFiles, deleteOutputOnInterrupt;
(84.0 %, 32698 bytes)
1897c1897
< Bool     smallMode, deleteOutputOnInterrupt;
---
> Bool      deleteOutputOnInterrupt;
1897c1897
< Bool     smallMode, deleteOutputOnInterrupt;
---
> Bool     smallMode;
(84.0 %, 32688 bytes)
1897c1897
< Bool      deleteOutputOnInterrupt;
---
> 
1898c1898
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool     testFailsExist, unzFailsExist, noisy;
(84.1 %, 32654 bytes)
1898c1898
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool     testFailsExist, unzFailsExist, noisy;
1898c1898
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool    forceOverwrite, unzFailsExist, noisy;
(84.1 %, 32639 bytes)
1898c1898
< Bool     testFailsExist, unzFailsExist, noisy;
---
> Bool      unzFailsExist, noisy;
1898c1898
< Bool     testFailsExist, unzFailsExist, noisy;
---
> Bool     testFailsExist, noisy;
(84.1 %, 32624 bytes)
1898c1898
< Bool      unzFailsExist, noisy;
---
> Bool       noisy;
1898c1898
< Bool      unzFailsExist, noisy;
---
> Bool      unzFailsExist;
(84.1 %, 32610 bytes)
1898c1898
< Bool       noisy;
---
> 
1899c1899
< Int32   numFileNames, numFilesProcessed, blockSize100k;
---
> Int32    numFilesProcessed, blockSize100k;
(84.1 %, 32593 bytes)
1899c1899
< Int32   numFileNames, numFilesProcessed, blockSize100k;
---
> Int32    numFilesProcessed, blockSize100k;
1899c1899
< Int32   numFileNames, numFilesProcessed, blockSize100k;
---
> Int32   numFileNames, blockSize100k;
(84.1 %, 32580 bytes)
1899c1899
< Int32    numFilesProcessed, blockSize100k;
---
> Int32     blockSize100k;
1899c1899
< Int32    numFilesProcessed, blockSize100k;
---
> Int32    numFilesProcessed;
(84.1 %, 32562 bytes)
1899c1899
< Int32     blockSize100k;
---
> 
1900c1900
< Int32   exitValue;
---
> 
(84.1 %, 32538 bytes)
1900c1900
< Int32   exitValue;
---
> 
1912c1912
< Int32   opMode;
---
> 
(84.1 %, 32520 bytes)
1912c1912
< Int32   opMode;
---
> 
1913c1913
< Int32   srcMode;
---
> 
(84.1 %, 32505 bytes)
1913c1913
< Int32   srcMode;
---
> 
1917c1917
< Int32   longestFileName;
---
> 
(84.1 %, 32489 bytes)
1917c1917
< Int32   longestFileName;
---
> 
1918c1918
< Char    inName [FILE_NAME_LEN];
---
> 
(84.2 %, 32465 bytes)
1918c1918
< Char    inName [FILE_NAME_LEN];
---
> 
1919c1919
< Char    outName[FILE_NAME_LEN];
---
> 
(84.2 %, 32434 bytes)
1919c1919
< Char    outName[FILE_NAME_LEN];
---
> 
1920c1920
< Char    tmpName[FILE_NAME_LEN];
---
> 
(84.2 %, 32403 bytes)
1920c1920
< Char    tmpName[FILE_NAME_LEN];
---
> 
1921c1921
< Char    *progName;
---
> 
(84.2 %, 32372 bytes)
1921c1921
< Char    *progName;
---
> 
1922c1922
< Char    progNameReally[FILE_NAME_LEN];
---
> 
(84.2 %, 32354 bytes)
1922c1922
< Char    progNameReally[FILE_NAME_LEN];
---
> 
1923c1923
< FILE    *outputHandleJustInCase;
---
> 
(84.2 %, 32316 bytes)
1923c1923
< FILE    *outputHandleJustInCase;
---
> 
1924c1924
< Int32   workFactor;
---
> 
(84.2 %, 32284 bytes)
1924c1924
< Int32   workFactor;
---
> 
2073,2074c2073
< static 
< struct MY_STAT fileMetaInfo;
---
> 
(84.3 %, 32265 bytes)
2073,2074c2073
< static 
< struct MY_STAT fileMetaInfo;
---
> 
2090,2091c2090
< Char* zSuffix[BZ_N_SUFFIX_PAIRS] 
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
> 
(84.3 %, 32229 bytes)
2089,2090c2089
< Char* zSuffix[BZ_N_SUFFIX_PAIRS] 
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
> 
2091,2092c2091
< Char* unzSuffix[BZ_N_SUFFIX_PAIRS] 
<    = { "", "", ".tar", ".tar" };
---
> 
(84.3 %, 32155 bytes)
2090,2091c2090
< Char* unzSuffix[BZ_N_SUFFIX_PAIRS] 
<    = { "", "", ".tar", ".tar" };
---
> 
(84.3 %, 32087 bytes)
===< pass_special :: a >===
===< pass_special :: b >===
===< pass_special :: c >===
===< pass_balanced :: curly-only >===
31c31
<    struct {
---
>    struct 
47c47
<    } 
---
>     
355c355
<    struct {
---
>    struct 
423c423
<    }
---
>    
501c501
<    struct {
---
>    struct 
590c590
<    }
---
>    
895c895
< {
---
> 
903c903
< }
---
> 
899c899
<       if (s->inUse[i]) {
---
>       if (s->inUse[i]) 
902c902
<       }
---
>       
909c909
< {
---
> 
964c964
< }
---
> 
930c930
<    for (i = 0; i < s->nblock; i++) {
---
>    for (i = 0; i < s->nblock; i++) 
957c957
<    }
---
>    
937c937
<       if (yy[0] == ll_i) { 
---
>       if (yy[0] == ll_i)  
939c939
<       } else {
---
>        else {
(84.3 %, 32085 bytes)
909c909
< {
---
> 
964c964
< }
---
> 
930c930
<    for (i = 0; i < s->nblock; i++) {
---
>    for (i = 0; i < s->nblock; i++) 
957c957
<    }
---
>    
937c937
<       if (yy[0] == ll_i) { 
---
>       if (yy[0] == ll_i)  
939c939
<       } else {
---
>        else {
939c939
<       } else {
---
>       } else 
956c956
<       }
---
>       
942c942
<          {
---
>          
954c954
<          }
---
>          
1074c1074
< {
---
> 
1126c1126
< }
---
> 
(84.3 %, 32083 bytes)
939c939
<        else {
---
>        else 
956c956
<       }
---
>       
942c942
<          {
---
>          
954c954
<          }
---
>          
1074c1074
< {
---
> 
1126c1126
< }
---
> 
1158c1158
< {
---
> 
1169c1169
< }
---
> 
1174c1174
< {
---
> 
1189c1189
< }
---
> 
1201c1201
< {
---
> 
1233c1233
< }
---
> 
1255c1255
< {
---
> 
1267c1267
< }
---
> 
1272c1272
< {
---
> 
1287c1287
< }
---
> 
1298c1298
<    struct {
---
>    struct 
1306c1306
<    }
---
>    
1321c1321
< {
---
> 
1358c1358
< }
---
> 
(84.3 %, 32081 bytes)
942c942
<          {
---
>          
954c954
<          }
---
>          
1074c1074
< {
---
> 
1126c1126
< }
---
> 
1158c1158
< {
---
> 
1169c1169
< }
---
> 
1174c1174
< {
---
> 
1189c1189
< }
---
> 
1201c1201
< {
---
> 
1233c1233
< }
---
> 
1255c1255
< {
---
> 
1267c1267
< }
---
> 
1272c1272
< {
---
> 
1287c1287
< }
---
> 
1298c1298
<    struct {
---
>    struct 
1306c1306
<    }
---
>    
1321c1321
< {
---
> 
1358c1358
< }
---
> 
1368c1368
< {
---
> 
1398c1398
< }
---
> 
1386c1386
<    while (True) {
---
>    while (True) 
1397c1397
<    }
---
>    
1408c1408
< {
---
> 
1411c1411
< }
---
> 
1422c1422
< {
---
> 
1454c1454
< }
---
> 
1465c1465
< {
---
> 
1506c1506
< }
---
> 
1511c1511
< {
---
> 
1524c1524
< }
---
> 
1533c1533
< {
---
> 
1554c1554
< }
---
> 
1563c1563
< {
---
> 
1575c1575
< }
---
> 
1591c1591
< {
---
> 
1630c1630
< }
---
> 
1641c1641
< {
---
> 
1680c1680
< }
---
> 
(84.3 %, 32079 bytes)
1408c1408
< {
---
> 
1411c1411
< }
---
> 
1422c1422
< {
---
> 
1454c1454
< }
---
> 
1465c1465
< {
---
> 
1506c1506
< }
---
> 
1511c1511
< {
---
> 
1524c1524
< }
---
> 
1533c1533
< {
---
> 
1554c1554
< }
---
> 
1563c1563
< {
---
> 
1575c1575
< }
---
> 
1591c1591
< {
---
> 
1630c1630
< }
---
> 
1641c1641
< {
---
> 
1680c1680
< }
---
> 
1672c1672
<    if (strm.avail_out > 0) {
---
>    if (strm.avail_out > 0) 
1675c1675
<    } else ;      
---
>     else ;      
1690c1690
< {
---
> 
1692c1692
< }
---
> 
1711c1711
< {
---
> 
1713c1713
< }
---
> 
1720c1720
< {
---
> 
1722c1722
< }
---
> 
1727c1727
< {
---
> 
1736c1736
< }
---
> 
1731c1731
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) 
1733c1733
<    } else {
---
>     else {
1733c1733
<    } else {
---
>    } else 
1735c1735
<    }
---
>    
(84.3 %, 32077 bytes)
1733c1733
<     else {
---
>     else 
1735c1735
<    }
---
>    
1741c1741
< {
---
> 
1750c1750
< }
---
> 
1745c1745
<    if(bzerr == BZ_OK){
---
>    if(bzerr == BZ_OK)
1747c1747
<    }else{
---
>    else{
(84.3 %, 32075 bytes)
1741c1741
< {
---
> 
1750c1750
< }
---
> 
1745c1745
<    if(bzerr == BZ_OK){
---
>    if(bzerr == BZ_OK)
1747c1747
<    }else{
---
>    else{
1747c1747
<    }else{
---
>    }else
1749c1749
<    }
---
>    
(84.3 %, 32073 bytes)
1747c1747
<    else{
---
>    else
1749c1749
<    }
---
>    
1755c1755
< {
---
> 
1758c1758
< }
---
> 
1763c1763
< {
---
> 
1777c1777
< }
---
> 
1768c1768
<    if(((bzFile*)b)->writing){
---
>    if(((bzFile*)b)->writing)
1773c1773
<    }else
---
>    else
(84.4 %, 32071 bytes)
1755c1755
< {
---
> 
1758c1758
< }
---
> 
1763c1763
< {
---
> 
1777c1777
< }
---
> 
1768c1768
<    if(((bzFile*)b)->writing){
---
>    if(((bzFile*)b)->writing)
1773c1773
<    }else
---
>    else
1770c1770
<       if(bzerr != BZ_OK){
---
>       if(bzerr != BZ_OK)
1772c1772
<       }
---
>       
1774c1774
<    if(fp!=stdin && fp!=stdout){
---
>    if(fp!=stdin && fp!=stdout)
1776c1776
<    }
---
>    
(84.4 %, 32069 bytes)
1770c1770
<       if(bzerr != BZ_OK){
---
>       if(bzerr != BZ_OK)
1772c1772
<       }
---
>       
1774c1774
<    if(fp!=stdin && fp!=stdout){
---
>    if(fp!=stdin && fp!=stdout)
1776c1776
<    }
---
>    
1782c1782
< static char *bzerrorstrings[] = {
---
> static char *bzerrorstrings[] = 
1799c1799
< };
---
> ;
(84.4 %, 32067 bytes)
1774c1774
<    if(fp!=stdin && fp!=stdout){
---
>    if(fp!=stdin && fp!=stdout)
1776c1776
<    }
---
>    
1782c1782
< static char *bzerrorstrings[] = {
---
> static char *bzerrorstrings[] = 
1799c1799
< };
---
> ;
1803c1803
< {
---
> 
1809c1809
< }
---
> 
(84.4 %, 32065 bytes)
1782c1782
< static char *bzerrorstrings[] = {
---
> static char *bzerrorstrings[] = 
1799c1799
< };
---
> ;
1803c1803
< {
---
> 
1809c1809
< }
---
> 
===< pass_clang :: aggregate-to-scalar >===
910a911
>    UChar yy_0;
928c929
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
---
>    for (i = 0; i < s->nInUse; i++) yy_0 = (UChar) i;
937c938
<       if (yy[0] == ll_i)  
---
>       if (yy_0 == ll_i)  
947c948
<             yy[1] = yy[0];
---
>             yy[1] = yy_0;
951,952c952,953
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
---
>             yy_0 = rtmp;
>             j = ryy_j - &(yy_0);
917a918
>    UInt32 ptr_0;
933c934
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>       j = ptr_0-1; if (j < 0) j += s->nblock;
(84.3 %, 32075 bytes)
918a919
>    UInt32 ptr_0;
934c935
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>       j = ptr_0-1; if (j < 0) j += s->nblock;
919a920
>    UChar block_0;
935c936
<       ll_i = s->unseqToSeq[block[j]];
---
>       ll_i = s->unseqToSeq[block_0];
(84.3 %, 32091 bytes)
920a921
>    UChar block_0;
936c937
<       ll_i = s->unseqToSeq[block[j]];
---
>       ll_i = s->unseqToSeq[block_0];
910a911
>    UChar yy_1;
948,950c949,951
<             rtmp  = yy[1];
<             yy[1] = yy_0;
<             ryy_j = &(yy[1]);
---
>             rtmp  = yy_1;
>             yy_1 = yy_0;
>             ryy_j = &(yy_1);
(84.3 %, 32108 bytes)
910a911
>    UChar yy_1;
949,951c950,952
<             rtmp  = yy[1];
<             yy[1] = yy_0;
<             ryy_j = &(yy[1]);
---
>             rtmp  = yy_1;
>             yy_1 = yy_0;
>             ryy_j = &(yy_1);
922a923
>    UInt16 mtfv_0;
956c957
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
---
>             mtfv_0 = j+1; wr++; s->mtfFreq[j+1]++;
964c965
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
---
>    mtfv_0 = EOB; wr++; s->mtfFreq[EOB]++;
(84.3 %, 32120 bytes)
923a924
>    UInt16 mtfv_0;
957c958
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
---
>             mtfv_0 = j+1; wr++; s->mtfFreq[j+1]++;
965c966
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
---
>    mtfv_0 = EOB; wr++; s->mtfFreq[EOB]++;
1080a1081
>    bz_stream *s_0;
1095c1096
<    s->strm = strm;
---
>    s_0 = strm;
(84.3 %, 32134 bytes)
1081a1082
>    bz_stream *s_0;
1096c1097
<    s->strm = strm;
---
>    s_0 = strm;
1081a1082
>    UInt32 *s_4;
1103c1104
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    s_4 = BZALLOC( n                  * sizeof(UInt32) );
1119c1120
<    s->mtfv              = (UInt16*)s->arr1;
---
>    s->mtfv              = (UInt16*)s_4;
1121c1122
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->ptr               = (UInt32*)s_4;
(84.3 %, 32149 bytes)
1081a1082
>    UInt32 *s_4;
1104c1105
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    s_4 = BZALLOC( n                  * sizeof(UInt32) );
1120c1121
<    s->mtfv              = (UInt16*)s->arr1;
---
>    s->mtfv              = (UInt16*)s_4;
1122c1123
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->ptr               = (UInt32*)s_4;
1081a1082
>    UInt32 *s_5;
1105c1106
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s_5 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
1119c1120
<    s->block             = (UChar*)s->arr2;
---
>    s->block             = (UChar*)s_5;
(84.3 %, 32153 bytes)
1081a1082
>    UInt32 *s_5;
1106c1107
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s_5 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
1120c1121
<    s->block             = (UChar*)s->arr2;
---
>    s->block             = (UChar*)s_5;
1081a1082
>    UInt32 *s_6;
1107c1108
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s_6 = BZALLOC( 65537              * sizeof(UInt32) );
(84.3 %, 32161 bytes)
1081a1082
>    UInt32 *s_6;
1108c1109
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s_6 = BZALLOC( 65537              * sizeof(UInt32) );
1081a1082
>    Int32 s_2;
1113c1114
<    s->state             = BZ_S_INPUT;
---
>    s_2             = BZ_S_INPUT;
(84.3 %, 32173 bytes)
1081a1082
>    Int32 s_2;
1114c1115
<    s->state             = BZ_S_INPUT;
---
>    s_2             = BZ_S_INPUT;
1081a1082
>    Int32 s_1;
1115c1116
<    s->mode              = BZ_M_RUNNING;
---
>    s_1              = BZ_M_RUNNING;
(84.3 %, 32182 bytes)
1081a1082
>    Int32 s_1;
1116c1117
<    s->mode              = BZ_M_RUNNING;
---
>    s_1              = BZ_M_RUNNING;
1081a1082
>    UInt32 s_27;
1117c1118
<    s->combinedCRC       = 0;
---
>    s_27       = 0;
(84.3 %, 32192 bytes)
1081a1082
>    UInt32 s_27;
1118c1119
<    s->combinedCRC       = 0;
---
>    s_27       = 0;
1081a1082
>    Int32 s_30;
1119c1120
<    s->blockSize100k     = blockSize100k;
---
>    s_30     = blockSize100k;
(84.3 %, 32198 bytes)
1081a1082
>    Int32 s_30;
1120c1121
<    s->blockSize100k     = blockSize100k;
---
>    s_30     = blockSize100k;
1081a1082
>    Int32 s_18;
1121c1122
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s_18         = 100000 * blockSize100k - 19;
(84.3 %, 32201 bytes)
1081a1082
>    Int32 s_18;
1122c1123
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s_18         = 100000 * blockSize100k - 19;
1081a1082
>    Int32 s_28;
1123c1124
<    s->verbosity         = verbosity;
---
>    s_28         = verbosity;
(84.3 %, 32208 bytes)
1081a1082
>    Int32 s_28;
1124c1125
<    s->verbosity         = verbosity;
---
>    s_28         = verbosity;
1081a1082
>    Int32 s_12;
1125c1126
<    s->workFactor        = workFactor;
---
>    s_12        = workFactor;
(84.3 %, 32215 bytes)
1081a1082
>    Int32 s_12;
1126c1127
<    s->workFactor        = workFactor;
---
>    s_12        = workFactor;
1081a1082
>    UChar *s_9;
1128c1129
<    s->block             = (UChar*)s_5;
---
>    s_9             = (UChar*)s_5;
(84.3 %, 32221 bytes)
1081a1082
>    UChar *s_9;
1129c1130
<    s->block             = (UChar*)s_5;
---
>    s_9             = (UChar*)s_5;
1081a1082
>    UInt16 *s_10;
1130c1131
<    s->mtfv              = (UInt16*)s_4;
---
>    s_10              = (UInt16*)s_4;
(84.3 %, 32231 bytes)
1081a1082
>    UInt16 *s_10;
1131c1132
<    s->mtfv              = (UInt16*)s_4;
---
>    s_10              = (UInt16*)s_4;
1081a1082
>    UInt32 *s_8;
1133c1134
<    s->ptr               = (UInt32*)s_4;
---
>    s_8               = (UInt32*)s_4;
(84.3 %, 32245 bytes)
1081a1082
>    UInt32 *s_8;
1134c1135
<    s->ptr               = (UInt32*)s_4;
---
>    s_8               = (UInt32*)s_4;
1178a1179
>    bz_stream *s_0;
1182c1183
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s_0 != strm) return BZ_PARAM_ERROR;
(84.3 %, 32258 bytes)
1179a1180
>    bz_stream *s_0;
1183c1184
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s_0 != strm) return BZ_PARAM_ERROR;
1179a1180
>    Int32 s_1;
1186c1187
<    switch (s->mode) 
---
>    switch (s_1) 
1194a1195
>    bz_stream *s_0;
1198c1199
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s_0 != strm) return BZ_PARAM_ERROR;
(84.3 %, 32273 bytes)
1179a1180
>    Int32 s_1;
1187c1188
<    switch (s->mode) 
---
>    switch (s_1) 
1195a1196
>    bz_stream *s_0;
1199c1200
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s_0 != strm) return BZ_PARAM_ERROR;
(84.2 %, 32283 bytes)
1196a1197
>    bz_stream *s_0;
1200c1201
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s_0 != strm) return BZ_PARAM_ERROR;
1223a1224
>    bz_stream *s_0;
1236c1237
<    s->strm                  = strm;
---
>    s_0                  = strm;
1223a1224
>    Int32 s_1;
1238c1239
<    s->state                 = BZ_X_MAGIC_1;
---
>    s_1                 = BZ_X_MAGIC_1;
(84.2 %, 32298 bytes)
1224a1225
>    bz_stream *s_0;
1237c1238
<    s->strm                  = strm;
---
>    s_0                  = strm;
1224a1225
>    Int32 s_1;
1239c1240
<    s->state                 = BZ_X_MAGIC_1;
---
>    s_1                 = BZ_X_MAGIC_1;
(84.2 %, 32313 bytes)
1224a1225
>    Int32 s_1;
1240c1241
<    s->state                 = BZ_X_MAGIC_1;
---
>    s_1                 = BZ_X_MAGIC_1;
1224a1225
>    Int32 s_8;
1241c1242
<    s->bsLive                = 0;
---
>    s_8                = 0;
(84.2 %, 32322 bytes)
1224a1225
>    Int32 s_8;
1242c1243
<    s->bsLive                = 0;
---
>    s_8                = 0;
1224a1225
>    UInt32 s_7;
1243c1244
<    s->bsBuff                = 0;
---
>    s_7                = 0;
(84.2 %, 32330 bytes)
1224a1225
>    UInt32 s_7;
1244c1245
<    s->bsBuff                = 0;
---
>    s_7                = 0;
1224a1225
>    UInt32 s_26;
1245c1246
<    s->calculatedCombinedCRC = 0;
---
>    s_26 = 0;
(84.2 %, 32339 bytes)
1224a1225
>    UInt32 s_26;
1246c1247
<    s->calculatedCombinedCRC = 0;
---
>    s_26 = 0;
1224a1225
>    Bool s_10;
1251c1252
<    s->smallDecompress       = (Bool)small;
---
>    s_10       = (Bool)small;
(84.2 %, 32335 bytes)
1224a1225
>    Bool s_10;
1252c1253
<    s->smallDecompress       = (Bool)small;
---
>    s_10       = (Bool)small;
1224a1225
>    Int32 s_11;
1256c1257
<    s->currBlockNo           = 0;
---
>    s_11           = 0;
(84.2 %, 32335 bytes)
1224a1225
>    Int32 s_11;
1257c1258
<    s->currBlockNo           = 0;
---
>    s_11           = 0;
1224a1225
>    Int32 s_12;
1258c1259
<    s->verbosity             = verbosity;
---
>    s_12             = verbosity;
(84.2 %, 32340 bytes)
1224a1225
>    Int32 s_12;
1259c1260
<    s->verbosity             = verbosity;
---
>    s_12             = verbosity;
1285a1286
>    bz_stream *s_0;
1289c1290
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s_0 != strm) return BZ_PARAM_ERROR;
(84.2 %, 32347 bytes)
1286a1287
>    bz_stream *s_0;
1290c1291
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s_0 != strm) return BZ_PARAM_ERROR;
1303a1304
>    bz_stream *s_0;
1307c1308
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s_0 != strm) return BZ_PARAM_ERROR;
(84.2 %, 32362 bytes)
1304a1305
>    bz_stream *s_0;
1308c1309
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s_0 != strm) return BZ_PARAM_ERROR;
1401a1402
>    Bool bzf_3;
1406c1407
<    if (!(bzf->writing))
---
>    if (!(bzf_3))
(84.2 %, 32377 bytes)
1402a1403
>    Bool bzf_3;
1407c1408
<    if (!(bzf->writing))
---
>    if (!(bzf_3))
1402a1403
>    unsigned int bzf_4_1;
1415c1416
<    bzf->strm.avail_in = len;
---
>    bzf_4_1 = len;
1427c1428
<       if (bzf->strm.avail_in == 0)
---
>       if (bzf_4_1 == 0)
(84.2 %, 32385 bytes)
1402a1403
>    unsigned int bzf_4_1;
1416c1417
<    bzf->strm.avail_in = len;
---
>    bzf_4_1 = len;
1428c1429
<       if (bzf->strm.avail_in == 0)
---
>       if (bzf_4_1 == 0)
1402a1403
>    char *bzf_4_0;
1417c1418
<    bzf->strm.next_in  = buf;
---
>    bzf_4_0  = buf;
(84.2 %, 32388 bytes)
1402a1403
>    char *bzf_4_0;
1418c1419
<    bzf->strm.next_in  = buf;
---
>    bzf_4_0  = buf;
1402a1403
>    unsigned int bzf_4_5;
1421c1422
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>       bzf_4_5 = BZ_MAX_UNUSED;
1427c1428
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
---
>       if (bzf_4_5 < BZ_MAX_UNUSED) 
(84.2 %, 32396 bytes)
1402a1403
>    unsigned int bzf_4_5;
1422c1423
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>       bzf_4_5 = BZ_MAX_UNUSED;
1428c1429
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
---
>       if (bzf_4_5 < BZ_MAX_UNUSED) 
1402a1403
>    char *bzf_4_4;
1423c1424
<       bzf->strm.next_out = bzf->buf;
---
>       bzf_4_4 = bzf->buf;
(84.2 %, 32397 bytes)
1402a1403
>    char *bzf_4_4;
1424c1425
<       bzf->strm.next_out = bzf->buf;
---
>       bzf_4_4 = bzf->buf;
1460a1461
>    Bool bzf_3;
1464c1465
<    if (!(bzf->writing))
---
>    if (!(bzf_3))
1502a1503
>    Bool bzf_6;
1523c1524
<    bzf->initialisedOk = False;
---
>    bzf_6 = False;
1540c1541
<    bzf->initialisedOk = True;
---
>    bzf_6 = True;
(84.2 %, 32404 bytes)
1461a1462
>    Bool bzf_3;
1465c1466
<    if (!(bzf->writing))
---
>    if (!(bzf_3))
1503a1504
>    Bool bzf_6;
1524c1525
<    bzf->initialisedOk = False;
---
>    bzf_6 = False;
1541c1542
<    bzf->initialisedOk = True;
---
>    bzf_6 = True;
(84.2 %, 32412 bytes)
1504a1505
>    Bool bzf_6;
1525c1526
<    bzf->initialisedOk = False;
---
>    bzf_6 = False;
1542c1543
<    bzf->initialisedOk = True;
---
>    bzf_6 = True;
1504a1505
>    Int32 bzf_2;
1527c1528
<    bzf->bufN          = 0;
---
>    bzf_2          = 0;
1539c1540
<    bzf->strm.avail_in = bzf->bufN;
---
>    bzf->strm.avail_in = bzf_2;
(84.2 %, 32401 bytes)
1504a1505
>    Int32 bzf_2;
1528c1529
<    bzf->bufN          = 0;
---
>    bzf_2          = 0;
1540c1541
<    bzf->strm.avail_in = bzf->bufN;
---
>    bzf->strm.avail_in = bzf_2;
1504a1505
>    Bool bzf_3;
1529c1530
<    bzf->writing       = False;
---
>    bzf_3       = False;
1504a1505
>    unsigned int bzf_4_1;
1540c1541
<    bzf->strm.avail_in = bzf->bufN;
---
>    bzf_4_1 = bzf->bufN;
(84.2 %, 32409 bytes)
1504a1505
>    Bool bzf_3;
1530c1531
<    bzf->writing       = False;
---
>    bzf_3       = False;
1504a1505
>    unsigned int bzf_4_1;
1541c1542
<    bzf->strm.avail_in = bzf_2;
---
>    bzf_4_1 = bzf_2;
1504a1505
>    char *bzf_4_0;
1542c1543
<    bzf->strm.next_in  = bzf->buf;
---
>    bzf_4_0  = bzf->buf;
(84.2 %, 32417 bytes)
1504a1505
>    unsigned int bzf_4_1;
1542c1543
<    bzf->strm.avail_in = bzf_2;
---
>    bzf_4_1 = bzf_2;
1504a1505
>    char *bzf_4_0;
1543c1544
<    bzf->strm.next_in  = bzf->buf;
---
>    bzf_4_0  = bzf->buf;
(84.2 %, 32431 bytes)
1504a1505
>    char *bzf_4_0;
1544c1545
<    bzf->strm.next_in  = bzf->buf;
---
>    bzf_4_0  = bzf->buf;
1554a1555
>    Bool bzf_3;
1560c1561
<    if (bzf->writing)
---
>    if (bzf_3)
(84.2 %, 32439 bytes)
1555a1556
>    Bool bzf_3;
1561c1562
<    if (bzf->writing)
---
>    if (bzf_3)
1555a1556
>    Bool bzf_6;
1564c1565
<    if (bzf->initialisedOk)
---
>    if (bzf_6)
(84.2 %, 32447 bytes)
1555a1556
>    Bool bzf_6;
1565c1566
<    if (bzf->initialisedOk)
---
>    if (bzf_6)
1579a1580
>    Bool bzf_3;
1586c1587
<    if (bzf->writing)
---
>    if (bzf_3)
1579a1580
>    unsigned int bzf_4_5;
1592c1593
<    bzf->strm.avail_out = len;
---
>    bzf_4_5 = len;
(84.2 %, 32449 bytes)
1580a1581
>    Bool bzf_3;
1587c1588
<    if (bzf->writing)
---
>    if (bzf_3)
1580a1581
>    unsigned int bzf_4_5;
1593c1594
<    bzf->strm.avail_out = len;
---
>    bzf_4_5 = len;
(84.2 %, 32457 bytes)
1580a1581
>    unsigned int bzf_4_5;
1594c1595
<    bzf->strm.avail_out = len;
---
>    bzf_4_5 = len;
1580a1581
>    char *bzf_4_4;
1595c1596
<    bzf->strm.next_out = buf;
---
>    bzf_4_4 = buf;
(84.2 %, 32470 bytes)
1580a1581
>    char *bzf_4_4;
1596c1597
<    bzf->strm.next_out = buf;
---
>    bzf_4_4 = buf;
1611a1612
>    Int32 bzf_5;
1614c1615
<    if (bzf->lastErr != BZ_STREAM_END)
---
>    if (bzf_5 != BZ_STREAM_END)
(84.2 %, 32477 bytes)
1612a1613
>    Int32 bzf_5;
1615c1616
<    if (bzf->lastErr != BZ_STREAM_END)
---
>    if (bzf_5 != BZ_STREAM_END)
1612a1613
>    unsigned int bzf_4_1;
1621c1622
<    *nUnused = bzf->strm.avail_in;
---
>    *nUnused = bzf_4_1;
(84.1 %, 32486 bytes)
1612a1613
>    unsigned int bzf_4_1;
1622c1623
<    *nUnused = bzf->strm.avail_in;
---
>    *nUnused = bzf_4_1;
1612a1613
>    char *bzf_4_0;
1623c1624
<    *unused = bzf->strm.next_in;
---
>    *unused = bzf_4_0;
(84.1 %, 32500 bytes)
1612a1613
>    char *bzf_4_0;
1624c1625
<    *unused = bzf->strm.next_in;
---
>    *unused = bzf_4_0;
1642a1643
>    char *strm_0;
1659c1660
<    strm.next_in = source;
---
>    strm_0 = source;
(84.1 %, 32508 bytes)
1643a1644
>    char *strm_0;
1660c1661
<    strm.next_in = source;
---
>    strm_0 = source;
1643a1644
>    char *strm_4;
1661c1662
<    strm.next_out = dest;
---
>    strm_4 = dest;
(84.1 %, 32519 bytes)
1643a1644
>    char *strm_4;
1662c1663
<    strm.next_out = dest;
---
>    strm_4 = dest;
1643a1644
>    unsigned int strm_1;
1663c1664
<    strm.avail_in = sourceLen;
---
>    strm_1 = sourceLen;
(84.1 %, 32529 bytes)
1643a1644
>    unsigned int strm_1;
1664c1665
<    strm.avail_in = sourceLen;
---
>    strm_1 = sourceLen;
1643a1644
>    unsigned int strm_5;
1665c1666
<    strm.avail_out = *destLen;
---
>    strm_5 = *destLen;
1672c1673
<    *destLen -= strm.avail_out;   
---
>    *destLen -= strm_5;   
(84.1 %, 32546 bytes)
1643a1644
>    unsigned int strm_5;
1666c1667
<    strm.avail_out = *destLen;
---
>    strm_5 = *destLen;
1673c1674
<    *destLen -= strm.avail_out;   
---
>    *destLen -= strm_5;   
1696a1697
>    char *strm_0;
1711c1712
<    strm.next_in = source;
---
>    strm_0 = source;
(84.1 %, 32554 bytes)
1697a1698
>    char *strm_0;
1712c1713
<    strm.next_in = source;
---
>    strm_0 = source;
1697a1698
>    char *strm_4;
1713c1714
<    strm.next_out = dest;
---
>    strm_4 = dest;
(84.1 %, 32565 bytes)
1697a1698
>    char *strm_4;
1714c1715
<    strm.next_out = dest;
---
>    strm_4 = dest;
1697a1698
>    unsigned int strm_1;
1715c1716
<    strm.avail_in = sourceLen;
---
>    strm_1 = sourceLen;
(84.1 %, 32575 bytes)
1697a1698
>    unsigned int strm_1;
1716c1717
<    strm.avail_in = sourceLen;
---
>    strm_1 = sourceLen;
1697a1698
>    unsigned int strm_5;
1717c1718
<    strm.avail_out = *destLen;
---
>    strm_5 = *destLen;
1724c1725
<    *destLen -= strm.avail_out;
---
>    *destLen -= strm_5;
1729c1730
<    if (strm.avail_out > 0) {
---
>    if (strm_5 > 0) {
(84.1 %, 32592 bytes)
1697a1698
>    unsigned int strm_5;
1718c1719
<    strm.avail_out = *destLen;
---
>    strm_5 = *destLen;
1725c1726
<    *destLen -= strm.avail_out;
---
>    *destLen -= strm_5;
1730c1731
<    if (strm.avail_out > 0) {
---
>    if (strm_5 > 0) {
1857a1858
> static char *bzerrorstrings_0 = "OK";
1866c1867
<    return bzerrorstrings[err*-1];
---
>    return bzerrorstrings_0;
(84.1 %, 32592 bytes)
1858a1859
> static char *bzerrorstrings_0 = "OK";
1867c1868
<    return bzerrorstrings[err*-1];
---
>    return bzerrorstrings_0;
(84.1 %, 32624 bytes)
===< pass_clang :: param-to-global >===
253c253
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> extern void BZ2_bz__AssertH__fail ( void );
1036c1036
< void BZ2_bz__AssertH__fail ( int errcode )
---
> void BZ2_bz__AssertH__fail ( void )
892a893
> EState * makeMaps_e_s;
894c895
< void makeMaps_e ( EState* s )
---
> void makeMaps_e ( void )
897c898
<    s->nInUse = 0;
---
>    makeMaps_e_s->nInUse = 0;
899,901c900,902
<       if (s->inUse[i]) 
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
---
>       if (makeMaps_e_s->inUse[i]) 
>          makeMaps_e_s->unseqToSeq[i] = makeMaps_e_s->nInUse;
>          makeMaps_e_s->nInUse++;
(84.1 %, 32610 bytes)
892a893
> EState * makeMaps_e_s;
894c895
< void makeMaps_e ( EState* s )
---
> void makeMaps_e ( void )
897c898
<    s->nInUse = 0;
---
>    makeMaps_e_s->nInUse = 0;
899,901c900,902
<       if (s->inUse[i]) 
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
---
>       if (makeMaps_e_s->inUse[i]) 
>          makeMaps_e_s->unseqToSeq[i] = makeMaps_e_s->nInUse;
>          makeMaps_e_s->nInUse++;
906a907
> EState * generateMTFValues_s;
908c909
< void generateMTFValues ( EState* s )
---
> void generateMTFValues ( void )
919c920
<    UInt32* ptr   = s->ptr;
---
>    UInt32* ptr   = generateMTFValues_s->ptr;
921c922
<    UChar* block  = s->block;
---
>    UChar* block  = generateMTFValues_s->block;
923c924
<    UInt16* mtfv  = s->mtfv;
---
>    UInt16* mtfv  = generateMTFValues_s->mtfv;
927c928
<    EOB = s->nInUse+1;
---
>    EOB = generateMTFValues_s->nInUse+1;
929c930
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for (i = 0; i <= EOB; i++) generateMTFValues_s->mtfFreq[i] = 0;
933c934
<    for (i = 0; i < s->nInUse; i++) yy_0 = (UChar) i;
---
>    for (i = 0; i < generateMTFValues_s->nInUse; i++) yy_0 = (UChar) i;
935c936
<    for (i = 0; i < s->nblock; i++) {
---
>    for (i = 0; i < generateMTFValues_s->nblock; i++) {
938,939c939,940
<       j = ptr_0-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block_0];
---
>       j = ptr_0-1; if (j < 0) j += generateMTFValues_s->nblock;
>       ll_i = generateMTFValues_s->unseqToSeq[block_0];
958c959
<             mtfv_0 = j+1; wr++; s->mtfFreq[j+1]++;
---
>             mtfv_0 = j+1; wr++; generateMTFValues_s->mtfFreq[j+1]++;
966c967
<    mtfv_0 = EOB; wr++; s->mtfFreq[EOB]++;
---
>    mtfv_0 = EOB; wr++; generateMTFValues_s->mtfFreq[EOB]++;
968c969
<    s->nMTF = wr;
---
>    generateMTFValues_s->nMTF = wr;
(84.1 %, 32683 bytes)
907a908
> EState * generateMTFValues_s;
909c910
< void generateMTFValues ( EState* s )
---
> void generateMTFValues ( void )
920c921
<    UInt32* ptr   = s->ptr;
---
>    UInt32* ptr   = generateMTFValues_s->ptr;
922c923
<    UChar* block  = s->block;
---
>    UChar* block  = generateMTFValues_s->block;
924c925
<    UInt16* mtfv  = s->mtfv;
---
>    UInt16* mtfv  = generateMTFValues_s->mtfv;
928c929
<    EOB = s->nInUse+1;
---
>    EOB = generateMTFValues_s->nInUse+1;
930c931
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for (i = 0; i <= EOB; i++) generateMTFValues_s->mtfFreq[i] = 0;
934c935
<    for (i = 0; i < s->nInUse; i++) yy_0 = (UChar) i;
---
>    for (i = 0; i < generateMTFValues_s->nInUse; i++) yy_0 = (UChar) i;
936c937
<    for (i = 0; i < s->nblock; i++) {
---
>    for (i = 0; i < generateMTFValues_s->nblock; i++) {
939,940c940,941
<       j = ptr_0-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block_0];
---
>       j = ptr_0-1; if (j < 0) j += generateMTFValues_s->nblock;
>       ll_i = generateMTFValues_s->unseqToSeq[block_0];
959c960
<             mtfv_0 = j+1; wr++; s->mtfFreq[j+1]++;
---
>             mtfv_0 = j+1; wr++; generateMTFValues_s->mtfFreq[j+1]++;
967c968
<    mtfv_0 = EOB; wr++; s->mtfFreq[EOB]++;
---
>    mtfv_0 = EOB; wr++; generateMTFValues_s->mtfFreq[EOB]++;
969c970
<    s->nMTF = wr;
---
>    generateMTFValues_s->nMTF = wr;
1049c1049
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> void* default_bzalloc (  Int32 items, Int32 size )
(83.9 %, 32924 bytes)
1050c1050
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> void* default_bzalloc (  Int32 items, Int32 size )
1050c1050
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> void* default_bzalloc ( void* opaque,  Int32 size )
(83.9 %, 32911 bytes)
1050c1050
< void* default_bzalloc (  Int32 items, Int32 size )
---
> void* default_bzalloc (   Int32 size )
1050c1050
< void* default_bzalloc (  Int32 items, Int32 size )
---
> void* default_bzalloc (  Int32 items )
(83.9 %, 32899 bytes)
1050c1050
< void* default_bzalloc (   Int32 size )
---
> void* default_bzalloc (   void )
1054c1054
< void default_bzfree ( void* opaque, void* addr )
---
> void default_bzfree (  void* addr )
(83.9 %, 32893 bytes)
1054c1054
< void default_bzfree ( void* opaque, void* addr )
---
> void default_bzfree (  void* addr )
1054c1054
< void default_bzfree ( void* opaque, void* addr )
---
> void default_bzfree ( void* opaque )
(84.0 %, 32880 bytes)
1054c1054
< void default_bzfree (  void* addr )
---
> void default_bzfree (  void )
1060c1060
< void prepare_new_block ( EState* s )
---
> void prepare_new_block ( void )
(84.0 %, 32874 bytes)
1060c1060
< void prepare_new_block ( EState* s )
---
> void prepare_new_block ( void )
1066c1066
< void init_RL ( EState* s )
---
> void init_RL ( void )
(84.0 %, 32869 bytes)
1066c1066
< void init_RL ( EState* s )
---
> void init_RL ( void )
1071c1071
< Bool isempty_RL ( EState* s )
---
> Bool isempty_RL ( void )
(84.0 %, 32864 bytes)
1071c1071
< Bool isempty_RL ( EState* s )
---
> Bool isempty_RL ( void )
1173c1173
< Bool handle_compress ( bz_stream* strm )
---
> Bool handle_compress ( void )
(84.0 %, 32859 bytes)
1173c1173
< Bool handle_compress ( bz_stream* strm )
---
> Bool handle_compress ( void )
1270c1270
< void unRLE_obuf_to_output_FAST ( DState* s )
---
> void unRLE_obuf_to_output_FAST ( void )
(84.0 %, 32848 bytes)
1270c1270
< void unRLE_obuf_to_output_FAST ( DState* s )
---
> void unRLE_obuf_to_output_FAST ( void )
1281c1281
< void unRLE_obuf_to_output_SMALL ( DState* s )
---
> void unRLE_obuf_to_output_SMALL ( void )
(84.0 %, 32843 bytes)
1281c1281
< void unRLE_obuf_to_output_SMALL ( DState* s )
---
> void unRLE_obuf_to_output_SMALL ( void )
1760c1760
<                ( const char *path,   
---
>                (    
1761c1761
<                  int fd,             
---
>                               
1762c1762
<                  const char *mode,
---
>                  
1762,1763c1762
<                  const char *mode,
<                  int open_mode)      
---
>                  const char *mode)      
2210c2210
< IntNative main ( IntNative argc, Char *argv[] )
---
> IntNative main (  Char *argv[] )
(84.0 %, 32838 bytes)
1760c1760
<                ( const char *path,   
---
>                (    
1761c1761
<                  int fd,             
---
>                               
1762c1762
<                  const char *mode,
---
>                  
1762,1763c1762
<                  const char *mode,
<                  int open_mode)      
---
>                  const char *mode)      
2210c2210
< IntNative main ( IntNative argc, Char *argv[] )
---
> IntNative main (  Char *argv[] )
2210c2210
< IntNative main ( IntNative argc, Char *argv[] )
---
> IntNative main ( IntNative argc )
(84.0 %, 32824 bytes)
===< pass_clang :: remove-nested-function >===
===< pass_clang :: union-to-struct >===
===< pass_clang :: return-void >===
628c628
< extern Int32 
---
> void  
1019c1019
< Int32 BZ2_decompress ( DState* s )
---
> void  BZ2_decompress ( DState* s )
1043,1044c1043
< static
< int bz_config_ok ( void )
---
> void  bz_config_ok ( void )
(84.0 %, 32817 bytes)
1043,1044c1043
< static
< int bz_config_ok ( void )
---
> void  bz_config_ok ( void )
1049,1050c1049
< static
< void* default_bzalloc (   void )
---
> void  default_bzalloc (   void )
(84.0 %, 32812 bytes)
1048,1049c1048
< static
< void* default_bzalloc (   void )
---
> void  default_bzalloc (   void )
1069,1070c1069
< static
< Bool isempty_RL ( void )
---
> void  isempty_RL ( void )
(84.0 %, 32805 bytes)
1068,1069c1068
< static
< Bool isempty_RL ( void )
---
> void  isempty_RL ( void )
1170,1171c1170
< static
< Bool handle_compress ( void )
---
> void  handle_compress ( void )
(84.0 %, 32799 bytes)
1169,1170c1169
< static
< Bool handle_compress ( void )
---
> void  handle_compress ( void )
1755,1756c1755
< static
< BZFILE * bzopen_or_bzdopen
---
> void  bzopen_or_bzdopen
2207c2207
< IntNative main ( IntNative argc )
---
> void  main ( IntNative argc )
(84.0 %, 32793 bytes)
1754,1755c1754
< static
< BZFILE * bzopen_or_bzdopen
---
> void  bzopen_or_bzdopen
2206c2206
< IntNative main ( IntNative argc )
---
> void  main ( IntNative argc )
(84.0 %, 32789 bytes)
===< pass_clang :: copy-propagation >===
899,901c899,901
<    for (i = 0; i < 256; i++)
<       if (makeMaps_e_s->inUse[i]) 
<          makeMaps_e_s->unseqToSeq[i] = makeMaps_e_s->nInUse;
---
>    for (i = 0; 0 < 256; i++)
>       if (makeMaps_e_s->inUse[0]) 
>          makeMaps_e_s->unseqToSeq[0] = makeMaps_e_s->nInUse;
931c931
<    for (i = 0; i <= EOB; i++) generateMTFValues_s->mtfFreq[i] = 0;
---
>    for (i = 0; 0 <= EOB; i++) generateMTFValues_s->mtfFreq[0] = 0;
(84.0 %, 32789 bytes)
931c931
<    for (i = 0; i <= EOB; i++) generateMTFValues_s->mtfFreq[i] = 0;
---
>    for (i = 0; 0 <= EOB; i++) generateMTFValues_s->mtfFreq[0] = 0;
935c935
<    for (i = 0; i < generateMTFValues_s->nInUse; i++) yy_0 = (UChar) i;
---
>    for (i = 0; 0 < generateMTFValues_s->nInUse; i++) yy_0 = (UChar) 0;
(84.0 %, 32789 bytes)
935c935
<    for (i = 0; i < generateMTFValues_s->nInUse; i++) yy_0 = (UChar) i;
---
>    for (i = 0; 0 < generateMTFValues_s->nInUse; i++) yy_0 = (UChar) 0;
937c937
<    for (i = 0; i < generateMTFValues_s->nblock; i++) {
---
>    for (i = 0; 0 < generateMTFValues_s->nblock; i++) {
(84.0 %, 32789 bytes)
937c937
<    for (i = 0; i < generateMTFValues_s->nblock; i++) {
---
>    for (i = 0; 0 < generateMTFValues_s->nblock; i++) {
944c944
<       if (yy_0 == ll_i)  
---
>       if (0 == ll_i)  
954c954
<             yy_1 = yy_0;
---
>             yy_1 = 0;
(84.0 %, 32789 bytes)
944c944
<       if (yy_0 == ll_i)  
---
>       if (0 == ll_i)  
954c954
<             yy_1 = yy_0;
---
>             yy_1 = 0;
948c948
<          if (zPend > 0) 
---
>          if (0 > 0) 
966c966
<    if (zPend > 0) 
---
>    if (0 > 0) 
(84.0 %, 32783 bytes)
948c948
<          if (zPend > 0) 
---
>          if (0 > 0) 
966c966
<    if (zPend > 0) 
---
>    if (0 > 0) 
957c957
<             while ( rll_i != rtmp ) ;
---
>             while ( ll_i != rtmp ) ;
(84.0 %, 32775 bytes)
957c957
<             while ( rll_i != rtmp ) ;
---
>             while ( ll_i != rtmp ) ;
957,958c957,958
<             while ( rll_i != rtmp ) ;
<             yy_0 = rtmp;
---
>             while ( rll_i != yy_1 ) ;
>             yy_0 = yy_1;
970c970
<    generateMTFValues_s->nMTF = wr;
---
>    generateMTFValues_s->nMTF = 0;
(84.0 %, 32774 bytes)
957,958c957,958
<             while ( ll_i != rtmp ) ;
<             yy_0 = rtmp;
---
>             while ( ll_i != yy_1 ) ;
>             yy_0 = yy_1;
970c970
<    generateMTFValues_s->nMTF = wr;
---
>    generateMTFValues_s->nMTF = 0;
(84.0 %, 32774 bytes)
957,958c957,958
<             while ( ll_i != yy_1 ) ;
<             yy_0 = yy_1;
---
>             while ( ll_i != 0 ) ;
>             yy_0 = 0;
970c970
<    generateMTFValues_s->nMTF = wr;
---
>    generateMTFValues_s->nMTF = 0;
(84.0 %, 32768 bytes)
970c970
<    generateMTFValues_s->nMTF = wr;
---
>    generateMTFValues_s->nMTF = 0;
1129c1129
<    s_12        = workFactor;
---
>    s_12        = 30;
(84.0 %, 32767 bytes)
1129c1129
<    s_12        = workFactor;
---
>    s_12        = 30;
1425c1425
<       if (ret != BZ_RUN_OK)
---
>       if (0 != BZ_RUN_OK)
(84.0 %, 32759 bytes)
1425c1425
<       if (ret != BZ_RUN_OK)
---
>       if (0 != BZ_RUN_OK)
1430c1430
<       if (bzf_4_1 == 0)
---
>       if (len == 0)
(84.0 %, 32757 bytes)
1430c1430
<       if (bzf_4_1 == 0)
---
>       if (len == 0)
1542c1542
<    bzf_4_1 = bzf_2;
---
>    bzf_4_1 = 0;
1660c1660
<    if (ret != BZ_OK) return ret;
---
>    if (0 != BZ_OK) return 0;
(84.0 %, 32753 bytes)
1542c1542
<    bzf_4_1 = bzf_2;
---
>    bzf_4_1 = 0;
1660c1660
<    if (ret != BZ_OK) return ret;
---
>    if (0 != BZ_OK) return 0;
(84.0 %, 32749 bytes)
1660c1660
<    if (ret != BZ_OK) return ret;
---
>    if (0 != BZ_OK) return 0;
1668,1669c1668,1669
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if (0 == BZ_FINISH_OK) goto output_overflow;
>    if (0 != BZ_STREAM_END) goto errhandler;
1682c1682
<    return ret;
---
>    return 0;
(84.0 %, 32745 bytes)
1668,1669c1668,1669
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if (0 == BZ_FINISH_OK) goto output_overflow;
>    if (0 != BZ_STREAM_END) goto errhandler;
1682c1682
<    return ret;
---
>    return 0;
1712c1712
<    if (ret != BZ_OK) return ret;
---
>    if (0 != BZ_OK) return 0;
(84.0 %, 32739 bytes)
1712c1712
<    if (ret != BZ_OK) return ret;
---
>    if (0 != BZ_OK) return 0;
1720,1721c1720,1721
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if (0 == BZ_OK) goto output_overflow_or_eof;
>    if (0 != BZ_STREAM_END) goto errhandler;
1736c1736
<    return ret; 
---
>    return 0; 
(84.0 %, 32735 bytes)
1720,1721c1720,1721
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if (0 == BZ_OK) goto output_overflow_or_eof;
>    if (0 != BZ_STREAM_END) goto errhandler;
1736c1736
<    return ret; 
---
>    return 0; 
1789c1789
<       return nread;
---
>       return 0;
(84.0 %, 32729 bytes)
1789c1789
<       return nread;
---
>       return 0;
1864c1864
<    if(err>0) err = 0;
---
>    if(((bzFile *)b)->lastErr>0) err = 0;
(84.0 %, 32725 bytes)
1864c1864
<    if(err>0) err = 0;
---
>    if(((bzFile *)b)->lastErr>0) err = 0;
1865c1865
<    *errnum = err;
---
>    *errnum = 0;
1866c1866
<    return bzerrorstrings_0;
---
>    return "OK";
(84.0 %, 32744 bytes)
1865c1865
<    *errnum = err;
---
>    *errnum = 0;
1866c1866
<    return bzerrorstrings_0;
---
>    return "OK";
(84.0 %, 32742 bytes)
1866c1866
<    return bzerrorstrings_0;
---
>    return "OK";
(84.0 %, 32730 bytes)
===< pass_clang :: replace-callexpr >===
===< pass_clang :: simplify-if >===
900,901c900,904
<       if (makeMaps_e_s->inUse[0]) 
<          makeMaps_e_s->unseqToSeq[0] = makeMaps_e_s->nInUse;
---
>       {
>       makeMaps_e_s->inUse[0];
>       
>        makeMaps_e_s->unseqToSeq[0] = makeMaps_e_s->nInUse;
>       }
940c940,942
<       j = ptr_0-1; if (j < 0) j += generateMTFValues_s->nblock;
---
>       j = ptr_0-1; j < 0;
>       
>        j += generateMTFValues_s->nblock;
(84.0 %, 32746 bytes)
943c943,945
<       j = ptr_0-1; if (j < 0) j += generateMTFValues_s->nblock;
---
>       j = ptr_0-1; j < 0;
>       
>        j += generateMTFValues_s->nblock;
947,949c947,950
<       if (0 == ll_i)  
<          zPend++;
<        else 
---
>       0 == ll_i;
>       
>        zPend++;
>         
(84.0 %, 32756 bytes)
949,951c949,952
<       if (0 == ll_i)  
<          zPend++;
<        else 
---
>       0 == ll_i;
>       
>        zPend++;
>         
953d952
<          if (0 > 0) 
954a954,956
>          0 > 0;
>          
>           {
965a968
>          }
(84.0 %, 32751 bytes)
954,955c954,956
<          if (0 > 0) 
<          {
---
>          0 > 0;
>          
>           {
972,974c972,974
<    if (0 > 0) 
< 
<    mtfv_0 = EOB; wr++; generateMTFValues_s->mtfFreq[EOB]++;
---
>    0 > 0;
>    
>     mtfv_0 = EOB; wr++; generateMTFValues_s->mtfFreq[EOB]++;
(84.0 %, 32757 bytes)
973,975c973,975
<    if (0 > 0) 
< 
<    mtfv_0 = EOB; wr++; generateMTFValues_s->mtfFreq[EOB]++;
---
>    0 > 0;
>    
>     mtfv_0 = EOB; wr++; generateMTFValues_s->mtfFreq[EOB]++;
(84.0 %, 32756 bytes)
===< pass_clang :: simplify-comma-expr >===
===< pass_clang :: replace-simple-typedef >===
30,48c30
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
---
> 
61c43
<       bz_stream* strm, 
---
>       struct bz_stream* strm, 
68c50
<       bz_stream* strm, 
---
>       struct bz_stream* strm, 
73c55
<       bz_stream* strm 
---
>       struct bz_stream* strm 
77c59
<       bz_stream *strm, 
---
>       struct bz_stream *strm, 
83c65
<       bz_stream* strm 
---
>       struct bz_stream* strm 
87c69
<       bz_stream *strm 
---
>       struct bz_stream *strm 
357c339
<       bz_stream* strm;
---
>       struct bz_stream* strm;
503c485
<       bz_stream* strm;
---
>       struct bz_stream* strm;
1081c1063
<                     ( bz_stream* strm, 
---
>                     ( struct bz_stream* strm, 
1101c1083
<    bz_stream *s_0;
---
>    struct bz_stream *s_0;
1181c1163
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int BZ_API(BZ2_bzCompress) ( struct bz_stream *strm, int action )
1186c1168
<    bz_stream *s_0;
---
>    struct bz_stream *s_0;
1199c1181
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> int BZ_API(BZ2_bzCompressEnd)  ( struct bz_stream *strm )
1202c1184
<    bz_stream *s_0;
---
>    struct bz_stream *s_0;
1225c1207
<                      ( bz_stream* strm, 
---
>                      ( struct bz_stream* strm, 
1237c1219
<    bz_stream *s_0;
---
>    struct bz_stream *s_0;
1289c1271
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> int BZ_API(BZ2_bzDecompress) ( struct bz_stream *strm )
1292c1274
<    bz_stream *s_0;
---
>    struct bz_stream *s_0;
1307c1289
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> int BZ_API(BZ2_bzDecompressEnd)  ( struct bz_stream *strm )
1310c1292
<    bz_stream *s_0;
---
>    struct bz_stream *s_0;
1340c1322
<       bz_stream strm;
---
>       struct bz_stream strm;
1648c1630
<    bz_stream strm;
---
>    struct bz_stream strm;
1702c1684
<    bz_stream strm;
---
>    struct bz_stream strm;
240c240
< typedef char            Char;
---
> 
1337c1337
<       Char      buf[BZ_MAX_UNUSED];
---
>       char      buf[BZ_MAX_UNUSED];
241c241
< typedef unsigned char   Bool;
---
> 
395c395
<       Bool     inUse[256];
---
>       unsigned char     inUse[256];
511c511
<       Bool     blockRandomised;
---
>       unsigned char     blockRandomised;
520c520
<       Bool     smallDecompress;
---
>       unsigned char     smallDecompress;
548,549c548,549
<       Bool     inUse[256];
<       Bool     inUse16[16];
---
>       unsigned char     inUse[256];
>       unsigned char     inUse16[16];
1232c1232
<    Bool s_10;
---
>    unsigned char s_10;
1260c1260
<    s_10       = (Bool)small;
---
>    s_10       = (unsigned char)small;
1339c1339
<       Bool      writing;
---
>       unsigned char      writing;
1342c1342
<       Bool      initialisedOk;
---
>       unsigned char      initialisedOk;
1412c1412
<    Bool bzf_3;
---
>    unsigned char bzf_3;
1467c1467
<    Bool bzf_3;
---
>    unsigned char bzf_3;
1561,1562c1561,1562
<    Bool bzf_6;
<    Bool bzf_3;
---
>    unsigned char bzf_6;
>    unsigned char bzf_3;
1588c1588
<    Bool bzf_3;
---
>    unsigned char bzf_3;
242c242
< typedef unsigned char   UChar;
---
> 
375c375
<       UChar*   block;
---
>       unsigned char*   block;
377c377
<       UChar*   zbits;
---
>       unsigned char*   zbits;
396c396
<       UChar    unseqToSeq[256];
---
>       unsigned char    unseqToSeq[256];
414,415c414,415
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       unsigned char    selector   [BZ_MAX_SELECTORS];
>       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
417c417
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       unsigned char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
509c509
<       UChar    state_out_ch;
---
>       unsigned char    state_out_ch;
538c538
<       UChar    *ll4;
---
>       unsigned char    *ll4;
550c550
<       UChar    seqToUnseq[256];
---
>       unsigned char    seqToUnseq[256];
553c553
<       UChar    mtfa   [MTFA_SIZE];
---
>       unsigned char    mtfa   [MTFA_SIZE];
555,557c555,557
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       unsigned char    selector   [BZ_MAX_SELECTORS];
>       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
>       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
915,917c915,917
<    UChar   yy[256];
<    UChar yy_1;
<    UChar yy_0;
---
>    unsigned char   yy[256];
>    unsigned char yy_1;
>    unsigned char yy_0;
926,927c926,927
<    UChar* block  = generateMTFValues_s->block;
<    UChar block_0;
---
>    unsigned char* block  = generateMTFValues_s->block;
>    unsigned char block_0;
938c938
<    for (i = 0; 0 < generateMTFValues_s->nInUse; i++) yy_0 = (UChar) 0;
---
>    for (i = 0; 0 < generateMTFValues_s->nInUse; i++) yy_0 = (unsigned char) 0;
941c941
<       UChar ll_i;
---
>       unsigned char ll_i;
957,959c957,959
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
---
>             register unsigned char  rtmp;
>             register unsigned char* ryy_j;
>             register unsigned char  rll_i;
1090c1090
<    UChar *s_9;
---
>    unsigned char *s_9;
1138c1138
<    s_9             = (UChar*)s_5;
---
>    s_9             = (unsigned char*)s_5;
243c243
< typedef int             Int32;
---
> 
361,362c361,362
<       Int32    mode;
<       Int32    state;
---
>       int    mode;
>       int    state;
371c371
<       Int32    origPtr;
---
>       int    origPtr;
380c380
<       Int32    workFactor;
---
>       int    workFactor;
384c384
<       Int32    state_in_len;
---
>       int    state_in_len;
388,391c388,391
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
---
>       int    nblock;
>       int    nblockMAX;
>       int    numZ;
>       int    state_out_pos;
394c394
<       Int32    nInUse;
---
>       int    nInUse;
400c400
<       Int32    bsLive;
---
>       int    bsLive;
407,409c407,409
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
---
>       int    verbosity;
>       int    blockNo;
>       int    blockSize100k;
412,413c412,413
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       int    nMTF;
>       int    mtfFreq    [BZ_MAX_ALPHA_SIZE];
418,419c418,419
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       int    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       int    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
506c506
<       Int32    state;
---
>       int    state;
510c510
<       Int32    state_out_len;
---
>       int    state_out_len;
516c516
<       Int32    bsLive;
---
>       int    bsLive;
519c519
<       Int32    blockSize100k;
---
>       int    blockSize100k;
521,522c521,522
<       Int32    currBlockNo;
<       Int32    verbosity;
---
>       int    currBlockNo;
>       int    verbosity;
525c525
<       Int32    origPtr;
---
>       int    origPtr;
527,531c527,531
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
---
>       int    k0;
>       int    unzftab[256];
>       int    nblock_used;
>       int    cftab[257];
>       int    cftabCopy[257];
547c547
<       Int32    nInUse;
---
>       int    nInUse;
554c554
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       int    mtfbase[256 / MTFL_SIZE];
559,588c559,588
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
---
>       int    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       int    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       int    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       int    minLens[BZ_N_GROUPS];
> 
>       
>       int    save_i;
>       int    save_j;
>       int    save_t;
>       int    save_alphaSize;
>       int    save_nGroups;
>       int    save_nSelectors;
>       int    save_EOB;
>       int    save_groupNo;
>       int    save_groupPos;
>       int    save_nextSym;
>       int    save_nblockMAX;
>       int    save_nblock;
>       int    save_es;
>       int    save_N;
>       int    save_curr;
>       int    save_zt;
>       int    save_zn; 
>       int    save_zvec;
>       int    save_zj;
>       int    save_gSel;
>       int    save_gMinlen;
>       int*   save_gLimit;
>       int*   save_gBase;
>       int*   save_gPerm;
897c897
<    Int32 i;
---
>    int i;
918,921c918,921
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
---
>    int i, j;
>    int   zPend;
>    int   wr;
>    int   EOB;
1086c1086
<    Int32   n;
---
>    int   n;
1091,1094c1091,1094
<    Int32 s_12;
<    Int32 s_28;
<    Int32 s_18;
<    Int32 s_30;
---
>    int s_12;
>    int s_28;
>    int s_18;
>    int s_30;
1096,1097c1096,1097
<    Int32 s_1;
<    Int32 s_2;
---
>    int s_1;
>    int s_2;
1185c1185
<    Int32 s_1;
---
>    int s_1;
1230,1231c1230,1231
<    Int32 s_12;
<    Int32 s_11;
---
>    int s_12;
>    int s_11;
1235,1236c1235,1236
<    Int32 s_8;
<    Int32 s_1;
---
>    int s_8;
>    int s_1;
1338c1338
<       Int32     bufN;
---
>       int     bufN;
1341c1341
<       Int32     lastErr;
---
>       int     lastErr;
1406c1406
<    Int32   ret;
---
>    int   ret;
1620c1620
<    Int32 bzf_5;
---
>    int bzf_5;
(84.0 %, 32727 bytes)
241c241
< typedef unsigned char   Bool;
---
> 
395c395
<       Bool     inUse[256];
---
>       unsigned char     inUse[256];
511c511
<       Bool     blockRandomised;
---
>       unsigned char     blockRandomised;
520c520
<       Bool     smallDecompress;
---
>       unsigned char     smallDecompress;
548,549c548,549
<       Bool     inUse[256];
<       Bool     inUse16[16];
---
>       unsigned char     inUse[256];
>       unsigned char     inUse16[16];
1232c1232
<    Bool s_10;
---
>    unsigned char s_10;
1260c1260
<    s_10       = (Bool)small;
---
>    s_10       = (unsigned char)small;
1339c1339
<       Bool      writing;
---
>       unsigned char      writing;
1342c1342
<       Bool      initialisedOk;
---
>       unsigned char      initialisedOk;
1412c1412
<    Bool bzf_3;
---
>    unsigned char bzf_3;
1467c1467
<    Bool bzf_3;
---
>    unsigned char bzf_3;
1561,1562c1561,1562
<    Bool bzf_6;
<    Bool bzf_3;
---
>    unsigned char bzf_6;
>    unsigned char bzf_3;
1588c1588
<    Bool bzf_3;
---
>    unsigned char bzf_3;
242c242
< typedef unsigned char   UChar;
---
> 
375c375
<       UChar*   block;
---
>       unsigned char*   block;
377c377
<       UChar*   zbits;
---
>       unsigned char*   zbits;
396c396
<       UChar    unseqToSeq[256];
---
>       unsigned char    unseqToSeq[256];
414,415c414,415
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       unsigned char    selector   [BZ_MAX_SELECTORS];
>       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
417c417
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       unsigned char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
509c509
<       UChar    state_out_ch;
---
>       unsigned char    state_out_ch;
538c538
<       UChar    *ll4;
---
>       unsigned char    *ll4;
550c550
<       UChar    seqToUnseq[256];
---
>       unsigned char    seqToUnseq[256];
553c553
<       UChar    mtfa   [MTFA_SIZE];
---
>       unsigned char    mtfa   [MTFA_SIZE];
555,557c555,557
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       unsigned char    selector   [BZ_MAX_SELECTORS];
>       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
>       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
915,917c915,917
<    UChar   yy[256];
<    UChar yy_1;
<    UChar yy_0;
---
>    unsigned char   yy[256];
>    unsigned char yy_1;
>    unsigned char yy_0;
926,927c926,927
<    UChar* block  = generateMTFValues_s->block;
<    UChar block_0;
---
>    unsigned char* block  = generateMTFValues_s->block;
>    unsigned char block_0;
938c938
<    for (i = 0; 0 < generateMTFValues_s->nInUse; i++) yy_0 = (UChar) 0;
---
>    for (i = 0; 0 < generateMTFValues_s->nInUse; i++) yy_0 = (unsigned char) 0;
941c941
<       UChar ll_i;
---
>       unsigned char ll_i;
957,959c957,959
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
---
>             register unsigned char  rtmp;
>             register unsigned char* ryy_j;
>             register unsigned char  rll_i;
1090c1090
<    UChar *s_9;
---
>    unsigned char *s_9;
1138c1138
<    s_9             = (UChar*)s_5;
---
>    s_9             = (unsigned char*)s_5;
243c243
< typedef int             Int32;
---
> 
361,362c361,362
<       Int32    mode;
<       Int32    state;
---
>       int    mode;
>       int    state;
371c371
<       Int32    origPtr;
---
>       int    origPtr;
380c380
<       Int32    workFactor;
---
>       int    workFactor;
384c384
<       Int32    state_in_len;
---
>       int    state_in_len;
388,391c388,391
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
---
>       int    nblock;
>       int    nblockMAX;
>       int    numZ;
>       int    state_out_pos;
394c394
<       Int32    nInUse;
---
>       int    nInUse;
400c400
<       Int32    bsLive;
---
>       int    bsLive;
407,409c407,409
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
---
>       int    verbosity;
>       int    blockNo;
>       int    blockSize100k;
412,413c412,413
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       int    nMTF;
>       int    mtfFreq    [BZ_MAX_ALPHA_SIZE];
418,419c418,419
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       int    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       int    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
506c506
<       Int32    state;
---
>       int    state;
510c510
<       Int32    state_out_len;
---
>       int    state_out_len;
516c516
<       Int32    bsLive;
---
>       int    bsLive;
519c519
<       Int32    blockSize100k;
---
>       int    blockSize100k;
521,522c521,522
<       Int32    currBlockNo;
<       Int32    verbosity;
---
>       int    currBlockNo;
>       int    verbosity;
525c525
<       Int32    origPtr;
---
>       int    origPtr;
527,531c527,531
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
---
>       int    k0;
>       int    unzftab[256];
>       int    nblock_used;
>       int    cftab[257];
>       int    cftabCopy[257];
547c547
<       Int32    nInUse;
---
>       int    nInUse;
554c554
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       int    mtfbase[256 / MTFL_SIZE];
559,588c559,588
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
---
>       int    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       int    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       int    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       int    minLens[BZ_N_GROUPS];
> 
>       
>       int    save_i;
>       int    save_j;
>       int    save_t;
>       int    save_alphaSize;
>       int    save_nGroups;
>       int    save_nSelectors;
>       int    save_EOB;
>       int    save_groupNo;
>       int    save_groupPos;
>       int    save_nextSym;
>       int    save_nblockMAX;
>       int    save_nblock;
>       int    save_es;
>       int    save_N;
>       int    save_curr;
>       int    save_zt;
>       int    save_zn; 
>       int    save_zvec;
>       int    save_zj;
>       int    save_gSel;
>       int    save_gMinlen;
>       int*   save_gLimit;
>       int*   save_gBase;
>       int*   save_gPerm;
897c897
<    Int32 i;
---
>    int i;
918,921c918,921
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
---
>    int i, j;
>    int   zPend;
>    int   wr;
>    int   EOB;
1086c1086
<    Int32   n;
---
>    int   n;
1091,1094c1091,1094
<    Int32 s_12;
<    Int32 s_28;
<    Int32 s_18;
<    Int32 s_30;
---
>    int s_12;
>    int s_28;
>    int s_18;
>    int s_30;
1096,1097c1096,1097
<    Int32 s_1;
<    Int32 s_2;
---
>    int s_1;
>    int s_2;
1185c1185
<    Int32 s_1;
---
>    int s_1;
1230,1231c1230,1231
<    Int32 s_12;
<    Int32 s_11;
---
>    int s_12;
>    int s_11;
1235,1236c1235,1236
<    Int32 s_8;
<    Int32 s_1;
---
>    int s_8;
>    int s_1;
1338c1338
<       Int32     bufN;
---
>       int     bufN;
1341c1341
<       Int32     lastErr;
---
>       int     lastErr;
1406c1406
<    Int32   ret;
---
>    int   ret;
1620c1620
<    Int32 bzf_5;
---
>    int bzf_5;
244c244
< typedef unsigned int    UInt32;
---
> 
365c365
<       UInt32   avail_in_expect;
---
>       unsigned int   avail_in_expect;
368,370c368,370
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       unsigned int*  arr1;
>       unsigned int*  arr2;
>       unsigned int*  ftab;
374c374
<       UInt32*  ptr;
---
>       unsigned int*  ptr;
383c383
<       UInt32   state_in_ch;
---
>       unsigned int   state_in_ch;
399c399
<       UInt32   bsBuff;
---
>       unsigned int   bsBuff;
403,404c403,404
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
---
>       unsigned int   blockCRC;
>       unsigned int   combinedCRC;
421c421
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>       unsigned int   len_pack[BZ_MAX_ALPHA_SIZE][4];
515c515
<       UInt32   bsBuff;
---
>       unsigned int   bsBuff;
526c526
<       UInt32   tPos;
---
>       unsigned int   tPos;
534c534
<       UInt32   *tt;
---
>       unsigned int   *tt;
541,544c541,544
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
---
>       unsigned int   storedBlockCRC;
>       unsigned int   storedCombinedCRC;
>       unsigned int   calculatedBlockCRC;
>       unsigned int   calculatedCombinedCRC;
924,925c924,925
<    UInt32* ptr   = generateMTFValues_s->ptr;
<    UInt32 ptr_0;
---
>    unsigned int* ptr   = generateMTFValues_s->ptr;
>    unsigned int ptr_0;
1088c1088
<    UInt32 *s_8;
---
>    unsigned int *s_8;
1095c1095
<    UInt32 s_27;
---
>    unsigned int s_27;
1098,1100c1098,1100
<    UInt32 *s_6;
<    UInt32 *s_5;
<    UInt32 *s_4;
---
>    unsigned int *s_6;
>    unsigned int *s_5;
>    unsigned int *s_4;
1141c1141
<    s_8               = (UInt32*)s_4;
---
>    s_8               = (unsigned int*)s_4;
1233,1234c1233,1234
<    UInt32 s_26;
<    UInt32 s_7;
---
>    unsigned int s_26;
>    unsigned int s_7;
245c245
< typedef short           Int16;
---
> 
(83.9 %, 32897 bytes)
243c243
< typedef int             Int32;
---
> 
361,362c361,362
<       Int32    mode;
<       Int32    state;
---
>       int    mode;
>       int    state;
371c371
<       Int32    origPtr;
---
>       int    origPtr;
380c380
<       Int32    workFactor;
---
>       int    workFactor;
384c384
<       Int32    state_in_len;
---
>       int    state_in_len;
388,391c388,391
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
---
>       int    nblock;
>       int    nblockMAX;
>       int    numZ;
>       int    state_out_pos;
394c394
<       Int32    nInUse;
---
>       int    nInUse;
400c400
<       Int32    bsLive;
---
>       int    bsLive;
407,409c407,409
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
---
>       int    verbosity;
>       int    blockNo;
>       int    blockSize100k;
412,413c412,413
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       int    nMTF;
>       int    mtfFreq    [BZ_MAX_ALPHA_SIZE];
418,419c418,419
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       int    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       int    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
506c506
<       Int32    state;
---
>       int    state;
510c510
<       Int32    state_out_len;
---
>       int    state_out_len;
516c516
<       Int32    bsLive;
---
>       int    bsLive;
519c519
<       Int32    blockSize100k;
---
>       int    blockSize100k;
521,522c521,522
<       Int32    currBlockNo;
<       Int32    verbosity;
---
>       int    currBlockNo;
>       int    verbosity;
525c525
<       Int32    origPtr;
---
>       int    origPtr;
527,531c527,531
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
---
>       int    k0;
>       int    unzftab[256];
>       int    nblock_used;
>       int    cftab[257];
>       int    cftabCopy[257];
547c547
<       Int32    nInUse;
---
>       int    nInUse;
554c554
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       int    mtfbase[256 / MTFL_SIZE];
559,588c559,588
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
---
>       int    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       int    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       int    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       int    minLens[BZ_N_GROUPS];
> 
>       
>       int    save_i;
>       int    save_j;
>       int    save_t;
>       int    save_alphaSize;
>       int    save_nGroups;
>       int    save_nSelectors;
>       int    save_EOB;
>       int    save_groupNo;
>       int    save_groupPos;
>       int    save_nextSym;
>       int    save_nblockMAX;
>       int    save_nblock;
>       int    save_es;
>       int    save_N;
>       int    save_curr;
>       int    save_zt;
>       int    save_zn; 
>       int    save_zvec;
>       int    save_zj;
>       int    save_gSel;
>       int    save_gMinlen;
>       int*   save_gLimit;
>       int*   save_gBase;
>       int*   save_gPerm;
897c897
<    Int32 i;
---
>    int i;
918,921c918,921
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
---
>    int i, j;
>    int   zPend;
>    int   wr;
>    int   EOB;
1086c1086
<    Int32   n;
---
>    int   n;
1091,1094c1091,1094
<    Int32 s_12;
<    Int32 s_28;
<    Int32 s_18;
<    Int32 s_30;
---
>    int s_12;
>    int s_28;
>    int s_18;
>    int s_30;
1096,1097c1096,1097
<    Int32 s_1;
<    Int32 s_2;
---
>    int s_1;
>    int s_2;
1185c1185
<    Int32 s_1;
---
>    int s_1;
1230,1231c1230,1231
<    Int32 s_12;
<    Int32 s_11;
---
>    int s_12;
>    int s_11;
1235,1236c1235,1236
<    Int32 s_8;
<    Int32 s_1;
---
>    int s_8;
>    int s_1;
1338c1338
<       Int32     bufN;
---
>       int     bufN;
1341c1341
<       Int32     lastErr;
---
>       int     lastErr;
1406c1406
<    Int32   ret;
---
>    int   ret;
1620c1620
<    Int32 bzf_5;
---
>    int bzf_5;
244c244
< typedef unsigned int    UInt32;
---
> 
365c365
<       UInt32   avail_in_expect;
---
>       unsigned int   avail_in_expect;
368,370c368,370
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       unsigned int*  arr1;
>       unsigned int*  arr2;
>       unsigned int*  ftab;
374c374
<       UInt32*  ptr;
---
>       unsigned int*  ptr;
383c383
<       UInt32   state_in_ch;
---
>       unsigned int   state_in_ch;
399c399
<       UInt32   bsBuff;
---
>       unsigned int   bsBuff;
403,404c403,404
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
---
>       unsigned int   blockCRC;
>       unsigned int   combinedCRC;
421c421
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>       unsigned int   len_pack[BZ_MAX_ALPHA_SIZE][4];
515c515
<       UInt32   bsBuff;
---
>       unsigned int   bsBuff;
526c526
<       UInt32   tPos;
---
>       unsigned int   tPos;
534c534
<       UInt32   *tt;
---
>       unsigned int   *tt;
541,544c541,544
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
---
>       unsigned int   storedBlockCRC;
>       unsigned int   storedCombinedCRC;
>       unsigned int   calculatedBlockCRC;
>       unsigned int   calculatedCombinedCRC;
924,925c924,925
<    UInt32* ptr   = generateMTFValues_s->ptr;
<    UInt32 ptr_0;
---
>    unsigned int* ptr   = generateMTFValues_s->ptr;
>    unsigned int ptr_0;
1088c1088
<    UInt32 *s_8;
---
>    unsigned int *s_8;
1095c1095
<    UInt32 s_27;
---
>    unsigned int s_27;
1098,1100c1098,1100
<    UInt32 *s_6;
<    UInt32 *s_5;
<    UInt32 *s_4;
---
>    unsigned int *s_6;
>    unsigned int *s_5;
>    unsigned int *s_4;
1141c1141
<    s_8               = (UInt32*)s_4;
---
>    s_8               = (unsigned int*)s_4;
1233,1234c1233,1234
<    UInt32 s_26;
<    UInt32 s_7;
---
>    unsigned int s_26;
>    unsigned int s_7;
245c245
< typedef short           Int16;
---
> 
246c246
< typedef unsigned short  UInt16;
---
> 
376c376
<       UInt16*  mtfv;
---
>       unsigned short*  mtfv;
537c537
<       UInt16   *ll16;
---
>       unsigned short   *ll16;
928,929c928,929
<    UInt16* mtfv  = generateMTFValues_s->mtfv;
<    UInt16 mtfv_0;
---
>    unsigned short* mtfv  = generateMTFValues_s->mtfv;
>    unsigned short mtfv_0;
1089c1089
<    UInt16 *s_10;
---
>    unsigned short *s_10;
1139c1139
<    s_10              = (UInt16*)s_4;
---
>    s_10              = (unsigned short*)s_4;
(84.0 %, 32867 bytes)
246c246
< typedef unsigned short  UInt16;
---
> 
376c376
<       UInt16*  mtfv;
---
>       unsigned short*  mtfv;
537c537
<       UInt16   *ll16;
---
>       unsigned short   *ll16;
928,929c928,929
<    UInt16* mtfv  = generateMTFValues_s->mtfv;
<    UInt16 mtfv_0;
---
>    unsigned short* mtfv  = generateMTFValues_s->mtfv;
>    unsigned short mtfv_0;
1089c1089
<    UInt16 *s_10;
---
>    unsigned short *s_10;
1139c1139
<    s_10              = (UInt16*)s_4;
---
>    s_10              = (unsigned short*)s_4;
354,391d353
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       unsigned char*   block;
<       UInt16*  mtfv;
<       unsigned char*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
393,424d354
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       unsigned char    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
< 
<       unsigned char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
893c823
< EState * makeMaps_e_s;
---
> struct EState * makeMaps_e_s;
911c841
< EState * generateMTFValues_s;
---
> struct EState * generateMTFValues_s;
1087c1017
<    EState* s;
---
>    struct EState* s;
1184c1114
<    EState* s;
---
>    struct EState* s;
1201c1131
<    EState* s;
---
>    struct EState* s;
500,562d499
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       unsigned char    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       unsigned char    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       unsigned char    seqToUnseq[256];
< 
<       
<       unsigned char    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
564,591d500
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
629c538
< BZ2_decompress ( DState* );
---
> BZ2_decompress ( struct DState* );
1026c935
< void  BZ2_decompress ( DState* s )
---
> void  BZ2_decompress ( struct DState* s )
1229c1138
<    DState* s;
---
>    struct DState* s;
1291c1200
<    DState* s;
---
>    struct DState* s;
1309c1218
<    DState* s;
---
>    struct DState* s;
1334,1344c1334
< typedef 
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
---
> 
1407c1397
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1466c1456
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1560c1550
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1585c1575
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1617c1607
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1793c1783
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((struct bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1869c1859
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((struct bzFile *)b)->lastErr;
1871c1861
<    if(((bzFile *)b)->lastErr>0) err = 0;
---
>    if(((struct bzFile *)b)->lastErr>0) err = 0;
1954c1954
< typedef int IntNative;
---
> 
2213c2213
< void  main ( IntNative argc )
---
> void  main ( int argc )
(84.0 %, 32884 bytes)
354,391d353
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       unsigned char*   block;
<       unsigned short*  mtfv;
<       unsigned char*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
393,424d354
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       unsigned char    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
< 
<       unsigned char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
893c823
< EState * makeMaps_e_s;
---
> struct EState * makeMaps_e_s;
911c841
< EState * generateMTFValues_s;
---
> struct EState * generateMTFValues_s;
1087c1017
<    EState* s;
---
>    struct EState* s;
1184c1114
<    EState* s;
---
>    struct EState* s;
1201c1131
<    EState* s;
---
>    struct EState* s;
500,562d499
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       unsigned char    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       unsigned short   *ll16;
<       unsigned char    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       unsigned char    seqToUnseq[256];
< 
<       
<       unsigned char    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
564,591d500
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
629c538
< BZ2_decompress ( DState* );
---
> BZ2_decompress ( struct DState* );
1026c935
< void  BZ2_decompress ( DState* s )
---
> void  BZ2_decompress ( struct DState* s )
1229c1138
<    DState* s;
---
>    struct DState* s;
1291c1200
<    DState* s;
---
>    struct DState* s;
1309c1218
<    DState* s;
---
>    struct DState* s;
1334,1344c1334
< typedef 
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
---
> 
1407c1397
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1466c1456
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1560c1550
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1585c1575
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1617c1607
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1793c1783
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((struct bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1869c1859
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((struct bzFile *)b)->lastErr;
1871c1861
<    if(((bzFile *)b)->lastErr>0) err = 0;
---
>    if(((struct bzFile *)b)->lastErr>0) err = 0;
1954c1954
< typedef int IntNative;
---
> 
2213c2213
< void  main ( IntNative argc )
---
> void  main ( int argc )
2189,2191c2189
< typedef
<    struct zzzz 
<    Cell;
---
> 
(84.0 %, 32856 bytes)
2189,2191c2189
< typedef
<    struct zzzz 
<    Cell;
---
> 
(84.0 %, 32824 bytes)
===< pass_clang :: class-template-to-class >===
===< pass_clang :: replace-derived-class >===
===< pass_clang :: simplify-recursive-template-instantiation >===
===< pass_ints :: a >===
94c94
< #define BZ_MAX_UNUSED 5000
---
> #define BZ_MAX_UNUSED 000
194c194
<       int        fd,
---
>       int        d,
278c278
< #define BZ_HDR_B 0x42   
---
> #define BZ_HDR_B 0x2   
(84.0 %, 32823 bytes)
94c94
< #define BZ_MAX_UNUSED 000
---
> #define BZ_MAX_UNUSED 00
194c194
<       int        fd,
---
>       int        d,
278c278
< #define BZ_HDR_B 0x42   
---
> #define BZ_HDR_B 0x2   
(84.0 %, 32822 bytes)
94c94
< #define BZ_MAX_UNUSED 00
---
> #define BZ_MAX_UNUSED 0
194c194
<       int        fd,
---
>       int        d,
278c278
< #define BZ_HDR_B 0x42   
---
> #define BZ_HDR_B 0x2   
(84.0 %, 32821 bytes)
194c194
<       int        fd,
---
>       int        d,
278c278
< #define BZ_HDR_B 0x42   
---
> #define BZ_HDR_B 0x2   
279c279
< #define BZ_HDR_Z 0x5a   
---
> #define BZ_HDR_Z 0xa   
(84.0 %, 32820 bytes)
278c278
< #define BZ_HDR_B 0x42   
---
> #define BZ_HDR_B 0x2   
279c279
< #define BZ_HDR_Z 0x5a   
---
> #define BZ_HDR_Z 0xa   
280c280
< #define BZ_HDR_h 0x68   
---
> #define BZ_HDR_h 0x8   
(84.0 %, 32819 bytes)
279c279
< #define BZ_HDR_Z 0x5a   
---
> #define BZ_HDR_Z 0xa   
280c280
< #define BZ_HDR_h 0x68   
---
> #define BZ_HDR_h 0x8   
281c281
< #define BZ_HDR_0 0x30   
---
> #define BZ_HDR_0 0x0   
(84.0 %, 32818 bytes)
280c280
< #define BZ_HDR_h 0x68   
---
> #define BZ_HDR_h 0x8   
281c281
< #define BZ_HDR_0 0x30   
---
> #define BZ_HDR_0 0x0   
285c285
< #define BZ_MAX_ALPHA_SIZE 258
---
> #define BZ_MAX_ALPHA_SIZE 58
(84.0 %, 32817 bytes)
281c281
< #define BZ_HDR_0 0x30   
---
> #define BZ_HDR_0 0x0   
285c285
< #define BZ_MAX_ALPHA_SIZE 258
---
> #define BZ_MAX_ALPHA_SIZE 58
(84.0 %, 32816 bytes)
285c285
< #define BZ_MAX_ALPHA_SIZE 258
---
> #define BZ_MAX_ALPHA_SIZE 58
286c286
< #define BZ_MAX_CODE_LEN    23
---
> #define BZ_MAX_CODE_LEN    3
(84.0 %, 32815 bytes)
285c285
< #define BZ_MAX_ALPHA_SIZE 58
---
> #define BZ_MAX_ALPHA_SIZE 8
286c286
< #define BZ_MAX_CODE_LEN    23
---
> #define BZ_MAX_CODE_LEN    3
292c292
< #define BZ_G_SIZE   50
---
> #define BZ_G_SIZE   0
(84.0 %, 32814 bytes)
286c286
< #define BZ_MAX_CODE_LEN    23
---
> #define BZ_MAX_CODE_LEN    3
292c292
< #define BZ_G_SIZE   50
---
> #define BZ_G_SIZE   0
295c295
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + (00000 / BZ_G_SIZE))
(84.0 %, 32813 bytes)
292c292
< #define BZ_G_SIZE   50
---
> #define BZ_G_SIZE   0
295c295
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + (00000 / BZ_G_SIZE))
345c345
< #define BZ_N_QSORT 12
---
> #define BZ_N_QSORT 2
(84.0 %, 32812 bytes)
295c295
< #define BZ_MAX_SELECTORS (2 + (00000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + (0000 / BZ_G_SIZE))
345c345
< #define BZ_N_QSORT 12
---
> #define BZ_N_QSORT 2
(84.0 %, 32811 bytes)
295c295
< #define BZ_MAX_SELECTORS (2 + (0000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + (000 / BZ_G_SIZE))
345c345
< #define BZ_N_QSORT 12
---
> #define BZ_N_QSORT 2
(84.0 %, 32810 bytes)
295c295
< #define BZ_MAX_SELECTORS (2 + (000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + (00 / BZ_G_SIZE))
345c345
< #define BZ_N_QSORT 12
---
> #define BZ_N_QSORT 2
(84.0 %, 32809 bytes)
295c295
< #define BZ_MAX_SELECTORS (2 + (00 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
345c345
< #define BZ_N_QSORT 12
---
> #define BZ_N_QSORT 2
346c346
< #define BZ_N_SHELL 18
---
> #define BZ_N_SHELL 8
(84.0 %, 32808 bytes)
345c345
< #define BZ_N_QSORT 12
---
> #define BZ_N_QSORT 2
346c346
< #define BZ_N_SHELL 18
---
> #define BZ_N_SHELL 8
395c395
<       Bool     inUse[256];
---
>       Bool     inUse[56];
(84.0 %, 32807 bytes)
346c346
< #define BZ_N_SHELL 18
---
> #define BZ_N_SHELL 8
395c395
<       Bool     inUse[256];
---
>       Bool     inUse[56];
(84.0 %, 32806 bytes)
395c395
<       Bool     inUse[256];
---
>       Bool     inUse[56];
396c396
<       unsigned char    unseqToSeq[256];
---
>       unsigned char    unseqToSeq[56];
447c447
< #define BZ_X_MAGIC_1     10
---
> #define BZ_X_MAGIC_1     0
(84.0 %, 32805 bytes)
395c395
<       Bool     inUse[56];
---
>       Bool     inUse[6];
396c396
<       unsigned char    unseqToSeq[256];
---
>       unsigned char    unseqToSeq[56];
(84.0 %, 32804 bytes)
396c396
<       unsigned char    unseqToSeq[256];
---
>       unsigned char    unseqToSeq[56];
447c447
< #define BZ_X_MAGIC_1     10
---
> #define BZ_X_MAGIC_1     0
448c448
< #define BZ_X_MAGIC_2     11
---
> #define BZ_X_MAGIC_2     1
(84.0 %, 32803 bytes)
396c396
<       unsigned char    unseqToSeq[56];
---
>       unsigned char    unseqToSeq[6];
447c447
< #define BZ_X_MAGIC_1     10
---
> #define BZ_X_MAGIC_1     0
448c448
< #define BZ_X_MAGIC_2     11
---
> #define BZ_X_MAGIC_2     1
(84.0 %, 32802 bytes)
447c447
< #define BZ_X_MAGIC_1     10
---
> #define BZ_X_MAGIC_1     0
448c448
< #define BZ_X_MAGIC_2     11
---
> #define BZ_X_MAGIC_2     1
(84.0 %, 32801 bytes)
448c448
< #define BZ_X_MAGIC_2     11
---
> #define BZ_X_MAGIC_2     1
449c449
< #define BZ_X_MAGIC_3     12
---
> #define BZ_X_MAGIC_3     2
(84.0 %, 32800 bytes)
449c449
< #define BZ_X_MAGIC_3     12
---
> #define BZ_X_MAGIC_3     2
450c450
< #define BZ_X_MAGIC_4     13
---
> #define BZ_X_MAGIC_4     3
(84.0 %, 32799 bytes)
450c450
< #define BZ_X_MAGIC_4     13
---
> #define BZ_X_MAGIC_4     3
451c451
< #define BZ_X_BLKHDR_1    14
---
> #define BZ_X_BLKHDR_1    4
(84.0 %, 32798 bytes)
451c451
< #define BZ_X_BLKHDR_1    14
---
> #define BZ_X_BLKHDR_1    4
452c452
< #define BZ_X_BLKHDR_2    15
---
> #define BZ_X_BLKHDR_2    5
(84.0 %, 32797 bytes)
452c452
< #define BZ_X_BLKHDR_2    15
---
> #define BZ_X_BLKHDR_2    5
453c453
< #define BZ_X_BLKHDR_3    16
---
> #define BZ_X_BLKHDR_3    6
454c454
< #define BZ_X_BLKHDR_4    17
---
> #define BZ_X_BLKHDR_4    7
(84.0 %, 32796 bytes)
453c453
< #define BZ_X_BLKHDR_3    16
---
> #define BZ_X_BLKHDR_3    6
454c454
< #define BZ_X_BLKHDR_4    17
---
> #define BZ_X_BLKHDR_4    7
(84.0 %, 32795 bytes)
454c454
< #define BZ_X_BLKHDR_4    17
---
> #define BZ_X_BLKHDR_4    7
455c455
< #define BZ_X_BLKHDR_5    18
---
> #define BZ_X_BLKHDR_5    8
(84.0 %, 32794 bytes)
455c455
< #define BZ_X_BLKHDR_5    18
---
> #define BZ_X_BLKHDR_5    8
456c456
< #define BZ_X_BLKHDR_6    19
---
> #define BZ_X_BLKHDR_6    9
(84.0 %, 32793 bytes)
456c456
< #define BZ_X_BLKHDR_6    19
---
> #define BZ_X_BLKHDR_6    9
457c457
< #define BZ_X_BCRC_1      20
---
> #define BZ_X_BCRC_1      0
458c458
< #define BZ_X_BCRC_2      21
---
> #define BZ_X_BCRC_2      1
(84.0 %, 32792 bytes)
457c457
< #define BZ_X_BCRC_1      20
---
> #define BZ_X_BCRC_1      0
458c458
< #define BZ_X_BCRC_2      21
---
> #define BZ_X_BCRC_2      1
459c459
< #define BZ_X_BCRC_3      22
---
> #define BZ_X_BCRC_3      2
(84.0 %, 32791 bytes)
458c458
< #define BZ_X_BCRC_2      21
---
> #define BZ_X_BCRC_2      1
459c459
< #define BZ_X_BCRC_3      22
---
> #define BZ_X_BCRC_3      2
460c460
< #define BZ_X_BCRC_4      23
---
> #define BZ_X_BCRC_4      3
(84.0 %, 32790 bytes)
459c459
< #define BZ_X_BCRC_3      22
---
> #define BZ_X_BCRC_3      2
460c460
< #define BZ_X_BCRC_4      23
---
> #define BZ_X_BCRC_4      3
(84.0 %, 32789 bytes)
460c460
< #define BZ_X_BCRC_4      23
---
> #define BZ_X_BCRC_4      3
461c461
< #define BZ_X_RANDBIT     24
---
> #define BZ_X_RANDBIT     4
462c462
< #define BZ_X_ORIGPTR_1   25
---
> #define BZ_X_ORIGPTR_1   5
(84.0 %, 32788 bytes)
461c461
< #define BZ_X_RANDBIT     24
---
> #define BZ_X_RANDBIT     4
462c462
< #define BZ_X_ORIGPTR_1   25
---
> #define BZ_X_ORIGPTR_1   5
(84.0 %, 32787 bytes)
462c462
< #define BZ_X_ORIGPTR_1   25
---
> #define BZ_X_ORIGPTR_1   5
463c463
< #define BZ_X_ORIGPTR_2   26
---
> #define BZ_X_ORIGPTR_2   6
(84.0 %, 32786 bytes)
463c463
< #define BZ_X_ORIGPTR_2   26
---
> #define BZ_X_ORIGPTR_2   6
464c464
< #define BZ_X_ORIGPTR_3   27
---
> #define BZ_X_ORIGPTR_3   7
(84.0 %, 32785 bytes)
464c464
< #define BZ_X_ORIGPTR_3   27
---
> #define BZ_X_ORIGPTR_3   7
465c465
< #define BZ_X_MAPPING_1   28
---
> #define BZ_X_MAPPING_1   8
466c466
< #define BZ_X_MAPPING_2   29
---
> #define BZ_X_MAPPING_2   9
(84.0 %, 32784 bytes)
465c465
< #define BZ_X_MAPPING_1   28
---
> #define BZ_X_MAPPING_1   8
466c466
< #define BZ_X_MAPPING_2   29
---
> #define BZ_X_MAPPING_2   9
467c467
< #define BZ_X_SELECTOR_1  30
---
> #define BZ_X_SELECTOR_1  0
(84.0 %, 32783 bytes)
466c466
< #define BZ_X_MAPPING_2   29
---
> #define BZ_X_MAPPING_2   9
467c467
< #define BZ_X_SELECTOR_1  30
---
> #define BZ_X_SELECTOR_1  0
(84.0 %, 32782 bytes)
467c467
< #define BZ_X_SELECTOR_1  30
---
> #define BZ_X_SELECTOR_1  0
468c468
< #define BZ_X_SELECTOR_2  31
---
> #define BZ_X_SELECTOR_2  1
469c469
< #define BZ_X_SELECTOR_3  32
---
> #define BZ_X_SELECTOR_3  2
(84.0 %, 32781 bytes)
468c468
< #define BZ_X_SELECTOR_2  31
---
> #define BZ_X_SELECTOR_2  1
469c469
< #define BZ_X_SELECTOR_3  32
---
> #define BZ_X_SELECTOR_3  2
(84.0 %, 32780 bytes)
469c469
< #define BZ_X_SELECTOR_3  32
---
> #define BZ_X_SELECTOR_3  2
470c470
< #define BZ_X_CODING_1    33
---
> #define BZ_X_CODING_1    3
(84.0 %, 32779 bytes)
470c470
< #define BZ_X_CODING_1    33
---
> #define BZ_X_CODING_1    3
471c471
< #define BZ_X_CODING_2    34
---
> #define BZ_X_CODING_2    4
(84.0 %, 32778 bytes)
471c471
< #define BZ_X_CODING_2    34
---
> #define BZ_X_CODING_2    4
472c472
< #define BZ_X_CODING_3    35
---
> #define BZ_X_CODING_3    5
473c473
< #define BZ_X_MTF_1       36
---
> #define BZ_X_MTF_1       6
(84.0 %, 32777 bytes)
472c472
< #define BZ_X_CODING_3    35
---
> #define BZ_X_CODING_3    5
473c473
< #define BZ_X_MTF_1       36
---
> #define BZ_X_MTF_1       6
474c474
< #define BZ_X_MTF_2       37
---
> #define BZ_X_MTF_2       7
(84.0 %, 32776 bytes)
473c473
< #define BZ_X_MTF_1       36
---
> #define BZ_X_MTF_1       6
474c474
< #define BZ_X_MTF_2       37
---
> #define BZ_X_MTF_2       7
(84.0 %, 32775 bytes)
474c474
< #define BZ_X_MTF_2       37
---
> #define BZ_X_MTF_2       7
475c475
< #define BZ_X_MTF_3       38
---
> #define BZ_X_MTF_3       8
(84.0 %, 32774 bytes)
475c475
< #define BZ_X_MTF_3       38
---
> #define BZ_X_MTF_3       8
476c476
< #define BZ_X_MTF_4       39
---
> #define BZ_X_MTF_4       9
(84.0 %, 32773 bytes)
476c476
< #define BZ_X_MTF_4       39
---
> #define BZ_X_MTF_4       9
477c477
< #define BZ_X_MTF_5       40
---
> #define BZ_X_MTF_5       0
478c478
< #define BZ_X_MTF_6       41
---
> #define BZ_X_MTF_6       1
(84.0 %, 32772 bytes)
477c477
< #define BZ_X_MTF_5       40
---
> #define BZ_X_MTF_5       0
478c478
< #define BZ_X_MTF_6       41
---
> #define BZ_X_MTF_6       1
(84.0 %, 32771 bytes)
478c478
< #define BZ_X_MTF_6       41
---
> #define BZ_X_MTF_6       1
479c479
< #define BZ_X_ENDHDR_2    42
---
> #define BZ_X_ENDHDR_2    2
480c480
< #define BZ_X_ENDHDR_3    43
---
> #define BZ_X_ENDHDR_3    3
(84.0 %, 32770 bytes)
479c479
< #define BZ_X_ENDHDR_2    42
---
> #define BZ_X_ENDHDR_2    2
480c480
< #define BZ_X_ENDHDR_3    43
---
> #define BZ_X_ENDHDR_3    3
(84.0 %, 32769 bytes)
480c480
< #define BZ_X_ENDHDR_3    43
---
> #define BZ_X_ENDHDR_3    3
481c481
< #define BZ_X_ENDHDR_4    44
---
> #define BZ_X_ENDHDR_4    4
(84.0 %, 32768 bytes)
481c481
< #define BZ_X_ENDHDR_4    44
---
> #define BZ_X_ENDHDR_4    4
482c482
< #define BZ_X_ENDHDR_5    45
---
> #define BZ_X_ENDHDR_5    5
(84.0 %, 32767 bytes)
482c482
< #define BZ_X_ENDHDR_5    45
---
> #define BZ_X_ENDHDR_5    5
483c483
< #define BZ_X_ENDHDR_6    46
---
> #define BZ_X_ENDHDR_6    6
(84.0 %, 32766 bytes)
483c483
< #define BZ_X_ENDHDR_6    46
---
> #define BZ_X_ENDHDR_6    6
484c484
< #define BZ_X_CCRC_1      47
---
> #define BZ_X_CCRC_1      7
(84.0 %, 32765 bytes)
484c484
< #define BZ_X_CCRC_1      47
---
> #define BZ_X_CCRC_1      7
485c485
< #define BZ_X_CCRC_2      48
---
> #define BZ_X_CCRC_2      8
(84.0 %, 32764 bytes)
485c485
< #define BZ_X_CCRC_2      48
---
> #define BZ_X_CCRC_2      8
486c486
< #define BZ_X_CCRC_3      49
---
> #define BZ_X_CCRC_3      9
(84.0 %, 32763 bytes)
486c486
< #define BZ_X_CCRC_3      49
---
> #define BZ_X_CCRC_3      9
487c487
< #define BZ_X_CCRC_4      50
---
> #define BZ_X_CCRC_4      0
(84.0 %, 32762 bytes)
487c487
< #define BZ_X_CCRC_4      50
---
> #define BZ_X_CCRC_4      0
493c493
< #define MTFA_SIZE 4096
---
> #define MTFA_SIZE 096
494c494
< #define MTFL_SIZE 16
---
> #define MTFL_SIZE 6
(84.0 %, 32761 bytes)
493c493
< #define MTFA_SIZE 4096
---
> #define MTFA_SIZE 096
494c494
< #define MTFL_SIZE 16
---
> #define MTFL_SIZE 6
528c528
<       Int32    unzftab[256];
---
>       Int32    unzftab[56];
530c530
<       Int32    cftab[257];
---
>       Int32    cftab[57];
(84.0 %, 32760 bytes)
528c528
<       Int32    unzftab[256];
---
>       Int32    unzftab[56];
530c530
<       Int32    cftab[257];
---
>       Int32    cftab[57];
531c531
<       Int32    cftabCopy[257];
---
>       Int32    cftabCopy[57];
(84.0 %, 32759 bytes)
528c528
<       Int32    unzftab[56];
---
>       Int32    unzftab[6];
530c530
<       Int32    cftab[257];
---
>       Int32    cftab[57];
(84.0 %, 32758 bytes)
530c530
<       Int32    cftab[257];
---
>       Int32    cftab[57];
531c531
<       Int32    cftabCopy[257];
---
>       Int32    cftabCopy[57];
(84.0 %, 32757 bytes)
530c530
<       Int32    cftab[57];
---
>       Int32    cftab[7];
531c531
<       Int32    cftabCopy[257];
---
>       Int32    cftabCopy[57];
(84.0 %, 32756 bytes)
531c531
<       Int32    cftabCopy[257];
---
>       Int32    cftabCopy[57];
548c548
<       Bool     inUse[256];
---
>       Bool     inUse[56];
549c549
<       Bool     inUse16[16];
---
>       Bool     inUse16[6];
(84.0 %, 32755 bytes)
531c531
<       Int32    cftabCopy[57];
---
>       Int32    cftabCopy[7];
548c548
<       Bool     inUse[256];
---
>       Bool     inUse[56];
(84.0 %, 32754 bytes)
548c548
<       Bool     inUse[256];
---
>       Bool     inUse[56];
549c549
<       Bool     inUse16[16];
---
>       Bool     inUse16[6];
550c550
<       unsigned char    seqToUnseq[256];
---
>       unsigned char    seqToUnseq[56];
(84.0 %, 32753 bytes)
548c548
<       Bool     inUse[56];
---
>       Bool     inUse[6];
549c549
<       Bool     inUse16[16];
---
>       Bool     inUse16[6];
550c550
<       unsigned char    seqToUnseq[256];
---
>       unsigned char    seqToUnseq[56];
(84.0 %, 32752 bytes)
549c549
<       Bool     inUse16[16];
---
>       Bool     inUse16[6];
550c550
<       unsigned char    seqToUnseq[256];
---
>       unsigned char    seqToUnseq[56];
(84.0 %, 32751 bytes)
550c550
<       unsigned char    seqToUnseq[256];
---
>       unsigned char    seqToUnseq[56];
554c554
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       Int32    mtfbase[56 / MTFL_SIZE];
(84.0 %, 32750 bytes)
550c550
<       unsigned char    seqToUnseq[56];
---
>       unsigned char    seqToUnseq[6];
554c554
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       Int32    mtfbase[56 / MTFL_SIZE];
(84.0 %, 32749 bytes)
554c554
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       Int32    mtfbase[56 / MTFL_SIZE];
597c597
< #define BZ_GET_FAST(cccc)                     \
---
> #define BZ_GET_FAST(ccc)                     \
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     ccc = (UChar)(s->tPos & 0xff);           \
(84.0 %, 32748 bytes)
554c554
<       Int32    mtfbase[56 / MTFL_SIZE];
---
>       Int32    mtfbase[6 / MTFL_SIZE];
597c597
< #define BZ_GET_FAST(cccc)                     \
---
> #define BZ_GET_FAST(ccc)                     \
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     ccc = (UChar)(s->tPos & 0xff);           \
(84.0 %, 32747 bytes)
597c597
< #define BZ_GET_FAST(cccc)                     \
---
> #define BZ_GET_FAST(ccc)                     \
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     ccc = (UChar)(s->tPos & 0xff);           \
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     cccc = (UChar)(s->tPos & 0xf);           \
(84.0 %, 32746 bytes)
597c597
< #define BZ_GET_FAST(ccc)                     \
---
> #define BZ_GET_FAST(cc)                     \
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     ccc = (UChar)(s->tPos & 0xff);           \
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     cccc = (UChar)(s->tPos & 0xf);           \
(84.0 %, 32745 bytes)
597c597
< #define BZ_GET_FAST(cc)                     \
---
> #define BZ_GET_FAST(c)                     \
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     ccc = (UChar)(s->tPos & 0xff);           \
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     cccc = (UChar)(s->tPos & 0xf);           \
(84.0 %, 32744 bytes)
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     ccc = (UChar)(s->tPos & 0xff);           \
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     cccc = (UChar)(s->tPos & 0xf);           \
(84.0 %, 32743 bytes)
599c599
<     ccc = (UChar)(s->tPos & 0xff);           \
---
>     cc = (UChar)(s->tPos & 0xff);           \
599c599
<     ccc = (UChar)(s->tPos & 0xff);           \
---
>     ccc = (UChar)(s->tPos & 0xf);           \
(84.0 %, 32742 bytes)
599c599
<     cc = (UChar)(s->tPos & 0xff);           \
---
>     c = (UChar)(s->tPos & 0xff);           \
599c599
<     cc = (UChar)(s->tPos & 0xff);           \
---
>     cc = (UChar)(s->tPos & 0xf);           \
(84.0 %, 32741 bytes)
599c599
<     c = (UChar)(s->tPos & 0xff);           \
---
>     c = (UChar)(s->tPos & 0xf);           \
602c602
< #define BZ_GET_FAST_C(cccc)                   \
---
> #define BZ_GET_FAST_C(ccc)                   \
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     ccc = (UChar)(c_tPos & 0xff);            \
(84.0 %, 32740 bytes)
602c602
< #define BZ_GET_FAST_C(cccc)                   \
---
> #define BZ_GET_FAST_C(ccc)                   \
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     ccc = (UChar)(c_tPos & 0xff);            \
(84.0 %, 32739 bytes)
602c602
< #define BZ_GET_FAST_C(ccc)                   \
---
> #define BZ_GET_FAST_C(cc)                   \
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     ccc = (UChar)(c_tPos & 0xff);            \
(84.0 %, 32738 bytes)
602c602
< #define BZ_GET_FAST_C(cc)                   \
---
> #define BZ_GET_FAST_C(c)                   \
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     ccc = (UChar)(c_tPos & 0xff);            \
(84.0 %, 32737 bytes)
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     ccc = (UChar)(c_tPos & 0xff);            \
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     cccc = (UChar)(c_tPos & 0xf);            \
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
>    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
(84.0 %, 32736 bytes)
604c604
<     ccc = (UChar)(c_tPos & 0xff);            \
---
>     cc = (UChar)(c_tPos & 0xff);            \
604c604
<     ccc = (UChar)(c_tPos & 0xff);            \
---
>     ccc = (UChar)(c_tPos & 0xf);            \
(84.0 %, 32735 bytes)
604c604
<     cc = (UChar)(c_tPos & 0xff);            \
---
>     c = (UChar)(c_tPos & 0xff);            \
604c604
<     cc = (UChar)(c_tPos & 0xff);            \
---
>     cc = (UChar)(c_tPos & 0xf);            \
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
>    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
(84.0 %, 32734 bytes)
604c604
<     c = (UChar)(c_tPos & 0xff);            \
---
>     c = (UChar)(c_tPos & 0xf);            \
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
>    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
(84.0 %, 32733 bytes)
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
>    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
619c619
< #define BZ_GET_SMALL(cccc)                            \
---
> #define BZ_GET_SMALL(ccc)                            \
(84.0 %, 32732 bytes)
619c619
< #define BZ_GET_SMALL(cccc)                            \
---
> #define BZ_GET_SMALL(ccc)                            \
620c620
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>       ccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
(84.0 %, 32731 bytes)
619c619
< #define BZ_GET_SMALL(ccc)                            \
---
> #define BZ_GET_SMALL(cc)                            \
620c620
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>       ccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
> #define FALLBACK_QSORT_SMALL_THRESH 0
(84.0 %, 32730 bytes)
619c619
< #define BZ_GET_SMALL(cc)                            \
---
> #define BZ_GET_SMALL(c)                            \
620c620
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>       ccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
(84.0 %, 32729 bytes)
620c620
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>       ccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
> #define FALLBACK_QSORT_SMALL_THRESH 0
(84.0 %, 32728 bytes)
620c620
<       ccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>       cc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
> #define FALLBACK_QSORT_SMALL_THRESH 0
(84.0 %, 32727 bytes)
620c620
<       cc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>       c = BZ2_indexIntoF ( s->tPos, s->cftab );    \
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
> #define FALLBACK_QSORT_SMALL_THRESH 0
672c672
< #define FALLBACK_QSORT_STACK_SIZE   100
---
> #define FALLBACK_QSORT_STACK_SIZE   00
(84.0 %, 32726 bytes)
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
> #define FALLBACK_QSORT_SMALL_THRESH 0
672c672
< #define FALLBACK_QSORT_STACK_SIZE   100
---
> #define FALLBACK_QSORT_STACK_SIZE   00
(84.0 %, 32725 bytes)
672c672
< #define FALLBACK_QSORT_STACK_SIZE   100
---
> #define FALLBACK_QSORT_STACK_SIZE   00
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
(84.0 %, 32724 bytes)
672c672
< #define FALLBACK_QSORT_STACK_SIZE   00
---
> #define FALLBACK_QSORT_STACK_SIZE   0
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
(84.0 %, 32723 bytes)
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
(84.0 %, 32722 bytes)
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
(84.0 %, 32721 bytes)
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0x01f)
---
> #define UNALIGNED_BH(zz)  ((zz) & 0x1f)
745c745
< #define MAIN_QSORT_SMALL_THRESH 20
---
> #define MAIN_QSORT_SMALL_THRESH 0
(84.0 %, 32720 bytes)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0x01f)
---
> #define UNALIGNED_BH(zz)  ((zz) & 0x1f)
745c745
< #define MAIN_QSORT_SMALL_THRESH 20
---
> #define MAIN_QSORT_SMALL_THRESH 0
747c747
< #define MAIN_QSORT_STACK_SIZE 100
---
> #define MAIN_QSORT_STACK_SIZE 00
(84.0 %, 32719 bytes)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0x1f)
---
> #define UNALIGNED_BH(zz)  ((zz) & 0xf)
745c745
< #define MAIN_QSORT_SMALL_THRESH 20
---
> #define MAIN_QSORT_SMALL_THRESH 0
(84.0 %, 32718 bytes)
745c745
< #define MAIN_QSORT_SMALL_THRESH 20
---
> #define MAIN_QSORT_SMALL_THRESH 0
747c747
< #define MAIN_QSORT_STACK_SIZE 100
---
> #define MAIN_QSORT_STACK_SIZE 00
767c767
< #define SETMASK (1 << 21)
---
> #define SETMASK (1 << 1)
(84.0 %, 32717 bytes)
747c747
< #define MAIN_QSORT_STACK_SIZE 100
---
> #define MAIN_QSORT_STACK_SIZE 00
767c767
< #define SETMASK (1 << 21)
---
> #define SETMASK (1 << 1)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
---
> #define WEIGHTOF(zz0)  ((zz0) & 0xfffff00)
(84.0 %, 32716 bytes)
747c747
< #define MAIN_QSORT_STACK_SIZE 00
---
> #define MAIN_QSORT_STACK_SIZE 0
767c767
< #define SETMASK (1 << 21)
---
> #define SETMASK (1 << 1)
(84.0 %, 32715 bytes)
767c767
< #define SETMASK (1 << 21)
---
> #define SETMASK (1 << 1)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
---
> #define WEIGHTOF(zz0)  ((zz0) & 0xfffff00)
(84.0 %, 32714 bytes)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
---
> #define WEIGHTOF(zz0)  ((zz0) & 0xfffff00)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x00000ff)
899c899
<    for (i = 0; 0 < 256; i++)
---
>    for (i = 0; 0 < 56; i++)
(84.0 %, 32713 bytes)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xfffff00)
---
> #define WEIGHTOF(zz0)  ((zz0) & 0xffff00)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x00000ff)
899c899
<    for (i = 0; 0 < 256; i++)
---
>    for (i = 0; 0 < 56; i++)
(84.0 %, 32712 bytes)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xffff00)
---
> #define WEIGHTOF(zz0)  ((zz0) & 0xfff00)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x00000ff)
899c899
<    for (i = 0; 0 < 256; i++)
---
>    for (i = 0; 0 < 56; i++)
(84.0 %, 32711 bytes)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xfff00)
---
> #define WEIGHTOF(zz0)  ((zz0) & 0xff00)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x00000ff)
(84.0 %, 32710 bytes)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xff00)
---
> #define WEIGHTOF(zz0)  ((zz0) & 0xf00)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x00000ff)
(84.0 %, 32709 bytes)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xf00)
---
> #define WEIGHTOF(zz0)  ((zz0) & 0x00)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x00000ff)
(84.0 %, 32708 bytes)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0x00)
---
> #define WEIGHTOF(zz0)  ((zz0) & 0x0)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x00000ff)
899c899
<    for (i = 0; 0 < 256; i++)
---
>    for (i = 0; 0 < 56; i++)
(84.0 %, 32707 bytes)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x00000ff)
899c899
<    for (i = 0; 0 < 256; i++)
---
>    for (i = 0; 0 < 56; i++)
(84.0 %, 32706 bytes)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x00000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x0000ff)
899c899
<    for (i = 0; 0 < 256; i++)
---
>    for (i = 0; 0 < 56; i++)
915c915
<    unsigned char   yy[256];
---
>    unsigned char   yy[56];
(84.0 %, 32705 bytes)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x0000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x000ff)
899c899
<    for (i = 0; 0 < 256; i++)
---
>    for (i = 0; 0 < 56; i++)
(84.0 %, 32704 bytes)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x00ff)
899c899
<    for (i = 0; 0 < 256; i++)
---
>    for (i = 0; 0 < 56; i++)
(84.0 %, 32703 bytes)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x00ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0x0ff)
899c899
<    for (i = 0; 0 < 256; i++)
---
>    for (i = 0; 0 < 56; i++)
(84.0 %, 32702 bytes)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x0ff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0xff)
899c899
<    for (i = 0; 0 < 256; i++)
---
>    for (i = 0; 0 < 56; i++)
(84.0 %, 32701 bytes)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0xff)
---
> #define DEPTHOF(zz1)   ((zz1) & 0xf)
899c899
<    for (i = 0; 0 < 256; i++)
---
>    for (i = 0; 0 < 56; i++)
915c915
<    unsigned char   yy[256];
---
>    unsigned char   yy[56];
(84.0 %, 32700 bytes)
899c899
<    for (i = 0; 0 < 256; i++)
---
>    for (i = 0; 0 < 56; i++)
915c915
<    unsigned char   yy[256];
---
>    unsigned char   yy[56];
(84.0 %, 32699 bytes)
899c899
<    for (i = 0; 0 < 56; i++)
---
>    for (i = 0; 0 < 6; i++)
915c915
<    unsigned char   yy[256];
---
>    unsigned char   yy[56];
(84.0 %, 32698 bytes)
915c915
<    unsigned char   yy[256];
---
>    unsigned char   yy[56];
947c947
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
---
>       AssertD ( ll_i < s->nInUse, "generateMTFValues(a)" );
983c983
< #define BZ_GREATER_ICOST 15
---
> #define BZ_GREATER_ICOST 5
(84.0 %, 32697 bytes)
915c915
<    unsigned char   yy[56];
---
>    unsigned char   yy[6];
947c947
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
---
>       AssertD ( ll_i < s->nInUse, "generateMTFValues(a)" );
(84.0 %, 32696 bytes)
947c947
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
---
>       AssertD ( ll_i < s->nInUse, "generateMTFValues(a)" );
983c983
< #define BZ_GREATER_ICOST 15
---
> #define BZ_GREATER_ICOST 5
(84.0 %, 32695 bytes)
983c983
< #define BZ_GREATER_ICOST 15
---
> #define BZ_GREATER_ICOST 5
1107c1107
<        workFactor < 0 || workFactor > 250)
---
>        workFactor < 0 || workFactor > 50)
1110c1110
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
(84.0 %, 32694 bytes)
1107c1107
<        workFactor < 0 || workFactor > 250)
---
>        workFactor < 0 || workFactor > 50)
1110c1110
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
(84.0 %, 32693 bytes)
1107c1107
<        workFactor < 0 || workFactor > 50)
---
>        workFactor < 0 || workFactor > 0)
1110c1110
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
1122c1122
<    n       = 100000 * blockSize100k;
---
>    n       = 00000 * blockSize100k;
(84.0 %, 32692 bytes)
1110c1110
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
1122c1122
<    n       = 100000 * blockSize100k;
---
>    n       = 00000 * blockSize100k;
(84.0 %, 32691 bytes)
1122c1122
<    n       = 100000 * blockSize100k;
---
>    n       = 00000 * blockSize100k;
1125c1125
<    s_6 = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s_6 = BZALLOC( 5537              * sizeof(UInt32) );
1134c1134
<    s_18         = 100000 * blockSize100k - 19;
---
>    s_18         = 00000 * blockSize100k - 19;
(84.0 %, 32690 bytes)
1122c1122
<    n       = 00000 * blockSize100k;
---
>    n       = 0000 * blockSize100k;
1125c1125
<    s_6 = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s_6 = BZALLOC( 5537              * sizeof(UInt32) );
(84.0 %, 32689 bytes)
1122c1122
<    n       = 0000 * blockSize100k;
---
>    n       = 000 * blockSize100k;
1125c1125
<    s_6 = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s_6 = BZALLOC( 5537              * sizeof(UInt32) );
(84.0 %, 32688 bytes)
1122c1122
<    n       = 000 * blockSize100k;
---
>    n       = 00 * blockSize100k;
1125c1125
<    s_6 = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s_6 = BZALLOC( 5537              * sizeof(UInt32) );
1134c1134
<    s_18         = 100000 * blockSize100k - 19;
---
>    s_18         = 00000 * blockSize100k - 19;
(84.1 %, 32687 bytes)
1122c1122
<    n       = 00 * blockSize100k;
---
>    n       = 0 * blockSize100k;
1125c1125
<    s_6 = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s_6 = BZALLOC( 5537              * sizeof(UInt32) );
(84.1 %, 32686 bytes)
1125c1125
<    s_6 = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s_6 = BZALLOC( 5537              * sizeof(UInt32) );
1134c1134
<    s_18         = 100000 * blockSize100k - 19;
---
>    s_18         = 00000 * blockSize100k - 19;
1134c1134
<    s_18         = 100000 * blockSize100k - 19;
---
>    s_18         = 100000 * blockSize100k - 9;
(84.1 %, 32685 bytes)
1125c1125
<    s_6 = BZALLOC( 5537              * sizeof(UInt32) );
---
>    s_6 = BZALLOC( 537              * sizeof(UInt32) );
1134c1134
<    s_18         = 100000 * blockSize100k - 19;
---
>    s_18         = 00000 * blockSize100k - 19;
(84.1 %, 32684 bytes)
1125c1125
<    s_6 = BZALLOC( 537              * sizeof(UInt32) );
---
>    s_6 = BZALLOC( 37              * sizeof(UInt32) );
1134c1134
<    s_18         = 100000 * blockSize100k - 19;
---
>    s_18         = 00000 * blockSize100k - 19;
1134c1134
<    s_18         = 100000 * blockSize100k - 19;
---
>    s_18         = 100000 * blockSize100k - 9;
(84.1 %, 32683 bytes)
1125c1125
<    s_6 = BZALLOC( 37              * sizeof(UInt32) );
---
>    s_6 = BZALLOC( 7              * sizeof(UInt32) );
1134c1134
<    s_18         = 100000 * blockSize100k - 19;
---
>    s_18         = 00000 * blockSize100k - 19;
1134c1134
<    s_18         = 100000 * blockSize100k - 19;
---
>    s_18         = 100000 * blockSize100k - 9;
(84.1 %, 32682 bytes)
1134c1134
<    s_18         = 100000 * blockSize100k - 19;
---
>    s_18         = 00000 * blockSize100k - 19;
1134c1134
<    s_18         = 100000 * blockSize100k - 19;
---
>    s_18         = 100000 * blockSize100k - 9;
1136c1136
<    s_12        = 30;
---
>    s_12        = 0;
(84.1 %, 32681 bytes)
1134c1134
<    s_18         = 00000 * blockSize100k - 19;
---
>    s_18         = 0000 * blockSize100k - 19;
1134c1134
<    s_18         = 00000 * blockSize100k - 19;
---
>    s_18         = 00000 * blockSize100k - 9;
(84.1 %, 32680 bytes)
1134c1134
<    s_18         = 0000 * blockSize100k - 19;
---
>    s_18         = 000 * blockSize100k - 19;
1134c1134
<    s_18         = 0000 * blockSize100k - 19;
---
>    s_18         = 0000 * blockSize100k - 9;
(84.1 %, 32679 bytes)
1134c1134
<    s_18         = 000 * blockSize100k - 19;
---
>    s_18         = 00 * blockSize100k - 19;
1134c1134
<    s_18         = 000 * blockSize100k - 19;
---
>    s_18         = 000 * blockSize100k - 9;
(84.1 %, 32678 bytes)
1134c1134
<    s_18         = 00 * blockSize100k - 19;
---
>    s_18         = 0 * blockSize100k - 19;
1134c1134
<    s_18         = 00 * blockSize100k - 19;
---
>    s_18         = 00 * blockSize100k - 9;
(84.1 %, 32677 bytes)
1134c1134
<    s_18         = 0 * blockSize100k - 19;
---
>    s_18         = 0 * blockSize100k - 9;
1136c1136
<    s_12        = 30;
---
>    s_12        = 0;
1300c1300
<    AssertH ( 0, 6001 );
---
>    AssertH ( 0, 001 );
(84.1 %, 32676 bytes)
1136c1136
<    s_12        = 30;
---
>    s_12        = 0;
1300c1300
<    AssertH ( 0, 6001 );
---
>    AssertH ( 0, 001 );
1331c1331
< #define BZ_SETERR(eee)                    \
---
> #define BZ_SETERR(ee)                    \
(84.1 %, 32675 bytes)
1300c1300
<    AssertH ( 0, 6001 );
---
>    AssertH ( 0, 001 );
1331c1331
< #define BZ_SETERR(eee)                    \
---
> #define BZ_SETERR(ee)                    \
(84.1 %, 32674 bytes)
1300c1300
<    AssertH ( 0, 001 );
---
>    AssertH ( 0, 01 );
1331c1331
< #define BZ_SETERR(eee)                    \
---
> #define BZ_SETERR(ee)                    \
1366c1366
<        (workFactor < 0 || workFactor > 250) ||
---
>        (workFactor < 0 || workFactor > 50) ||
(84.1 %, 32673 bytes)
1300c1300
<    AssertH ( 0, 01 );
---
>    AssertH ( 0, 1 );
1331c1331
< #define BZ_SETERR(eee)                    \
---
> #define BZ_SETERR(ee)                    \
(84.1 %, 32672 bytes)
1331c1331
< #define BZ_SETERR(eee)                    \
---
> #define BZ_SETERR(ee)                    \
1366c1366
<        (workFactor < 0 || workFactor > 250) ||
---
>        (workFactor < 0 || workFactor > 50) ||
1386c1386
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
(84.1 %, 32671 bytes)
1331c1331
< #define BZ_SETERR(ee)                    \
---
> #define BZ_SETERR(e)                    \
1366c1366
<        (workFactor < 0 || workFactor > 250) ||
---
>        (workFactor < 0 || workFactor > 50) ||
(84.1 %, 32670 bytes)
1366c1366
<        (workFactor < 0 || workFactor > 250) ||
---
>        (workFactor < 0 || workFactor > 50) ||
1386c1386
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
(84.1 %, 32669 bytes)
1366c1366
<        (workFactor < 0 || workFactor > 50) ||
---
>        (workFactor < 0 || workFactor > 0) ||
1386c1386
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
1659c1659
<        workFactor < 0 || workFactor > 250) 
---
>        workFactor < 0 || workFactor > 50) 
(84.1 %, 32668 bytes)
1386c1386
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
1659c1659
<        workFactor < 0 || workFactor > 250) 
---
>        workFactor < 0 || workFactor > 50) 
1662c1662
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
(84.1 %, 32667 bytes)
1659c1659
<        workFactor < 0 || workFactor > 250) 
---
>        workFactor < 0 || workFactor > 50) 
1662c1662
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
(84.1 %, 32666 bytes)
1659c1659
<        workFactor < 0 || workFactor > 50) 
---
>        workFactor < 0 || workFactor > 0) 
1662c1662
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
1764c1764
<                  int fd,             
---
>                  int d,             
(84.1 %, 32665 bytes)
1662c1662
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
1764c1764
<                  int fd,             
---
>                  int d,             
(84.1 %, 32664 bytes)
1764c1764
<                  int fd,             
---
>                  int d,             
1782c1782
<                ( int fd,
---
>                ( int d,
1785c1785
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>    return bzopen_or_bzdopen(NULL,d,mode,1);
1939c1939
< #   define SET_BINARY_MODE(fd) 
---
> #   define SET_BINARY_MODE(d) 
(84.1 %, 32663 bytes)
1782c1782
<                ( int fd,
---
>                ( int d,
1785c1785
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>    return bzopen_or_bzdopen(NULL,d,mode,1);
1939c1939
< #   define SET_BINARY_MODE(fd) 
---
> #   define SET_BINARY_MODE(d) 
1980c1980
< #define FILE_NAME_LEN 1034
---
> #define FILE_NAME_LEN 034
(84.1 %, 32662 bytes)
1980c1980
< #define FILE_NAME_LEN 1034
---
> #define FILE_NAME_LEN 034
(84.1 %, 32661 bytes)
1980c1980
< #define FILE_NAME_LEN 034
---
> #define FILE_NAME_LEN 04
(84.1 %, 32660 bytes)
1980c1980
< #define FILE_NAME_LEN 04
---
> #define FILE_NAME_LEN 4
(84.1 %, 32659 bytes)
===< pass_ints :: b >===
===< pass_ints :: e >===
Termination check: size was 204936; now 32659
===< pass_include_includes :: 0 >===
===< pass_balanced :: curly >===
31,47c31
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
---
>    struct  
355,423c355
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       unsigned char*   block;
<       unsigned short*  mtfv;
<       unsigned char*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
< 
<       unsigned char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>    struct 
501,590c501
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       unsigned char    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[6];
<       Int32    nblock_used;
<       Int32    cftab[7];
<       Int32    cftabCopy[7];
< 
<       
<       UInt32   *tt;
< 
<       
<       unsigned short   *ll16;
<       unsigned char    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
<       Bool     inUse16[6];
<       unsigned char    seqToUnseq[6];
< 
<       
<       unsigned char    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[6 / MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
---
>    struct 
896,907c896
< {
<    Int32 i;
<    makeMaps_e_s->nInUse = 0;
<    for (i = 0; 0 < 6; i++)
<       {
<       makeMaps_e_s->inUse[0];
<       
<        makeMaps_e_s->unseqToSeq[0] = makeMaps_e_s->nInUse;
<       }
<          makeMaps_e_s->nInUse++;
<       
< }
---
> 
900,901d899
<       {
<       makeMaps_e_s->inUse[0];
903,904d900
<        makeMaps_e_s->unseqToSeq[0] = makeMaps_e_s->nInUse;
<       }
914,921d913
< {
<    unsigned char   yy[6];
<    unsigned char yy_1;
<    unsigned char yy_0;
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
923,978d914
<    
<    UInt32* ptr   = generateMTFValues_s->ptr;
<    UInt32 ptr_0;
<    unsigned char* block  = generateMTFValues_s->block;
<    unsigned char block_0;
<    unsigned short* mtfv  = generateMTFValues_s->mtfv;
<    unsigned short mtfv_0;
< 
<    ;
<    EOB = generateMTFValues_s->nInUse+1;
< 
<    for (i = 0; 0 <= EOB; i++) generateMTFValues_s->mtfFreq[0] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; 0 < generateMTFValues_s->nInUse; i++) yy_0 = (unsigned char) 0;
< 
<    for (i = 0; 0 < generateMTFValues_s->nblock; i++) {
<       unsigned char ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr_0-1; j < 0;
<       
<        j += generateMTFValues_s->nblock;
<       ll_i = generateMTFValues_s->unseqToSeq[block_0];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(a)" );
< 
<       0 == ll_i;
<       
<        zPend++;
<         
< 
<          0 > 0;
<          
<           {
<             register unsigned char  rtmp;
<             register unsigned char* ryy_j;
<             register unsigned char  rll_i;
<             rtmp  = yy_1;
<             yy_1 = 0;
<             ryy_j = &(yy_1);
<             rll_i = ll_i;
<             while ( ll_i != 0 ) ;
<             yy_0 = 0;
<             j = ryy_j - &(yy_0);
<             mtfv_0 = j+1; wr++; generateMTFValues_s->mtfFreq[j+1]++;
<          }
< 
<       
<    }
< 
<    0 > 0;
<    
<     mtfv_0 = EOB; wr++; generateMTFValues_s->mtfFreq[EOB]++;
< 
<    generateMTFValues_s->nMTF = 0;
< }
940,971c940
<    for (i = 0; 0 < generateMTFValues_s->nblock; i++) {
<       unsigned char ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr_0-1; j < 0;
<       
<        j += generateMTFValues_s->nblock;
<       ll_i = generateMTFValues_s->unseqToSeq[block_0];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(a)" );
< 
<       0 == ll_i;
<       
<        zPend++;
<         
< 
<          0 > 0;
<          
<           {
<             register unsigned char  rtmp;
<             register unsigned char* ryy_j;
<             register unsigned char  rll_i;
<             rtmp  = yy_1;
<             yy_1 = 0;
<             ryy_j = &(yy_1);
<             rll_i = ll_i;
<             while ( ll_i != 0 ) ;
<             yy_0 = 0;
<             j = ryy_j - &(yy_0);
<             mtfv_0 = j+1; wr++; generateMTFValues_s->mtfFreq[j+1]++;
<          }
< 
<       
<    }
---
>    for (i = 0; 0 < generateMTFValues_s->nblock; i++) 
(84.1 %, 32554 bytes)
910,917d909
< {
<    unsigned char   yy[6];
<    unsigned char yy_1;
<    unsigned char yy_0;
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
919,974d910
<    
<    UInt32* ptr   = generateMTFValues_s->ptr;
<    UInt32 ptr_0;
<    unsigned char* block  = generateMTFValues_s->block;
<    unsigned char block_0;
<    unsigned short* mtfv  = generateMTFValues_s->mtfv;
<    unsigned short mtfv_0;
< 
<    ;
<    EOB = generateMTFValues_s->nInUse+1;
< 
<    for (i = 0; 0 <= EOB; i++) generateMTFValues_s->mtfFreq[0] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; 0 < generateMTFValues_s->nInUse; i++) yy_0 = (unsigned char) 0;
< 
<    for (i = 0; 0 < generateMTFValues_s->nblock; i++) {
<       unsigned char ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr_0-1; j < 0;
<       
<        j += generateMTFValues_s->nblock;
<       ll_i = generateMTFValues_s->unseqToSeq[block_0];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(a)" );
< 
<       0 == ll_i;
<       
<        zPend++;
<         
< 
<          0 > 0;
<          
<           {
<             register unsigned char  rtmp;
<             register unsigned char* ryy_j;
<             register unsigned char  rll_i;
<             rtmp  = yy_1;
<             yy_1 = 0;
<             ryy_j = &(yy_1);
<             rll_i = ll_i;
<             while ( ll_i != 0 ) ;
<             yy_0 = 0;
<             j = ryy_j - &(yy_0);
<             mtfv_0 = j+1; wr++; generateMTFValues_s->mtfFreq[j+1]++;
<          }
< 
<       
<    }
< 
<    0 > 0;
<    
<     mtfv_0 = EOB; wr++; generateMTFValues_s->mtfFreq[EOB]++;
< 
<    generateMTFValues_s->nMTF = 0;
< }
936,967c936
<    for (i = 0; 0 < generateMTFValues_s->nblock; i++) {
<       unsigned char ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr_0-1; j < 0;
<       
<        j += generateMTFValues_s->nblock;
<       ll_i = generateMTFValues_s->unseqToSeq[block_0];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(a)" );
< 
<       0 == ll_i;
<       
<        zPend++;
<         
< 
<          0 > 0;
<          
<           {
<             register unsigned char  rtmp;
<             register unsigned char* ryy_j;
<             register unsigned char  rll_i;
<             rtmp  = yy_1;
<             yy_1 = 0;
<             ryy_j = &(yy_1);
<             rll_i = ll_i;
<             while ( ll_i != 0 ) ;
<             yy_0 = 0;
<             j = ryy_j - &(yy_0);
<             mtfv_0 = j+1; wr++; generateMTFValues_s->mtfFreq[j+1]++;
<          }
< 
<       
<    }
---
>    for (i = 0; 0 < generateMTFValues_s->nblock; i++) 
952,964c952
<           {
<             register unsigned char  rtmp;
<             register unsigned char* ryy_j;
<             register unsigned char  rll_i;
<             rtmp  = yy_1;
<             yy_1 = 0;
<             ryy_j = &(yy_1);
<             rll_i = ll_i;
<             while ( ll_i != 0 ) ;
<             yy_0 = 0;
<             j = ryy_j - &(yy_0);
<             mtfv_0 = j+1; wr++; generateMTFValues_s->mtfFreq[j+1]++;
<          }
---
>           
(84.5 %, 31785 bytes)
1050,1066d1049
< {
<    Int32   n;
<    EState* s;
<    UInt32 *s_8;
<    unsigned short *s_10;
<    unsigned char *s_9;
<    Int32 s_12;
<    Int32 s_28;
<    Int32 s_18;
<    Int32 s_30;
<    UInt32 s_27;
<    Int32 s_1;
<    Int32 s_2;
<    UInt32 *s_6;
<    UInt32 *s_5;
<    UInt32 *s_4;
<    bz_stream *s_0;
1068,1116d1050
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 0)
<      return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 0;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s_0 = strm;
< 
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 0 * blockSize100k;
<    s_4 = BZALLOC( n                  * sizeof(UInt32) );
<    s_5 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s_2             = BZ_S_INPUT;
<    s_1              = BZ_M_RUNNING;
<    s_27       = 0;
<    s_30     = blockSize100k;
<    s_18         = 0 * blockSize100k - 9;
<    s_28         = verbosity;
<    s_12        = 0;
< 
<    s_9             = (unsigned char*)s_5;
<    s_10              = (unsigned short*)s_4;
<    s->zbits             = NULL;
<    s_8               = (UInt32*)s_4;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
<    ;
<    ;
<    return BZ_OK;
< }
1147,1155d1146
< {
<    
<    EState* s;
<    Int32 s_1;
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s_0 != strm) return BZ_PARAM_ERROR;
1157,1160d1147
<    preswitch:
<    switch (s_1) 
<    return BZ_OK; 
< }
1165,1171d1164
< {
<    EState* s;
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s_0 != strm) return BZ_PARAM_ERROR;
1173,1181d1165
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
1193,1202d1192
< {
<    DState* s;
<    Int32 s_12;
<    Int32 s_11;
<    Bool s_10;
<    UInt32 s_26;
<    UInt32 s_7;
<    Int32 s_8;
<    Int32 s_1;
<    bz_stream *s_0;
1204,1233d1193
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s_0                  = strm;
<    strm->state              = s;
<    s_1                 = BZ_X_MAGIC_1;
<    s_8                = 0;
<    s_7                = 0;
<    s_26 = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s_10       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s_11           = 0;
<    s_12             = verbosity;
< 
<    return BZ_OK;
< }
1255,1261d1254
< {
<    DState* s;
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s_0 != strm) return BZ_PARAM_ERROR;
1263,1268d1255
<    while (True) 
< 
<    AssertH ( 0, 1 );
< 
<    return 0;  
< }
1273,1279d1272
< {
<    DState* s;
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s_0 != strm) return BZ_PARAM_ERROR;
1281,1289d1273
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
1300,1308c1300
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct 
1323,1325d1322
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
1327,1360d1323
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 0) ||
<        (verbosity < 0 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 0;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1370,1377d1369
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
<    char *bzf_4_4;
<    unsigned int bzf_4_5;
<    char *bzf_4_0;
<    unsigned int bzf_4_1;
<    Bool bzf_3;
1379,1405d1370
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
<    if (!(bzf_3))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf_4_1 = len;
<    bzf_4_0  = buf;
< 
<    while (True) 
<       bzf_4_5 = BZ_MAX_UNUSED;
<       bzf_4_4 = bzf->buf;
<       ret = 0;
<       if (0 != BZ_RUN_OK)
<          ;
< 
<       if (bzf_4_5 < BZ_MAX_UNUSED) 
< 
<       if (len == 0)
<          ;
<    
< }
1415,1418c1415
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
> 
1429,1432d1428
< {
<    
<    bzFile* bzf = (bzFile*)b;
<    Bool bzf_3;
1434,1462d1429
<    if (bzf == NULL)
<       ;
<    if (!(bzf_3))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    0;
<    0;
< }
1473,1480d1472
< {
<    bzFile* bzf = NULL;
<    char *bzf_4_0;
<    unsigned int bzf_4_1;
<    Bool bzf_3;
<    Int32 bzf_2;
<    Bool bzf_6;
<    int     ret;
1482,1519d1473
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       ;
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf_6 = False;
<    bzf->handle        = f;
<    bzf_2          = 0;
<    bzf_3       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) 
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf_4_1 = 0;
<    bzf_4_0  = bzf->buf;
< 
<    bzf_6 = True;
<    return bzf;   
< }
1524,1527d1523
< {
<    bzFile* bzf = (bzFile*)b;
<    Bool bzf_6;
<    Bool bzf_3;
1529,1539d1524
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       ;
< 
<    if (bzf_3)
<       ;
< 
<    if (bzf_6)
<       (void)0;
<    0;
< }
1548,1553d1547
< {
<    
<    bzFile* bzf = (bzFile*)b;
<    char *bzf_4_4;
<    unsigned int bzf_4_5;
<    Bool bzf_3;
1555,1572d1548
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
< 
<    if (bzf_3)
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf_4_5 = len;
<    bzf_4_4 = buf;
< 
<    while (True) 
< 
<    return 0; 
< }
1581,1591d1580
< {
<    bzFile* bzf = (bzFile*)b;
<    char *bzf_4_0;
<    unsigned int bzf_4_1;
<    Int32 bzf_5;
<    if (bzf == NULL)
<       ;
<    if (bzf_5 != BZ_STREAM_END)
<       ;
<    if (unused == NULL || nUnused == NULL)
<       ;
1593,1596d1581
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf_4_1;
<    *unused = bzf_4_0;
< }
1612,1618d1611
< {
<    bz_stream strm;
<    unsigned int strm_5;
<    unsigned int strm_1;
<    char *strm_4;
<    char *strm_0;
<    int ret;
1620,1655d1612
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 0) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 0;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = 0;
<    if (0 != BZ_OK) return 0;
< 
<    strm_0 = source;
<    strm_4 = dest;
<    strm_1 = sourceLen;
<    strm_5 = *destLen;
< 
<    ret = 0;
<    if (0 == BZ_FINISH_OK) goto output_overflow;
<    if (0 != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm_5;   
<    0;
<    return BZ_OK;
< 
<    output_overflow:
<    0;
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    0;
<    return 0;
< }
1666,1672d1665
< {
<    bz_stream strm;
<    unsigned int strm_5;
<    unsigned int strm_1;
<    char *strm_4;
<    char *strm_0;
<    int ret;
1674,1709d1666
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = 0;
<    if (0 != BZ_OK) return 0;
< 
<    strm_0 = source;
<    strm_4 = dest;
<    strm_1 = sourceLen;
<    strm_5 = *destLen;
< 
<    ret = 0;
<    if (0 == BZ_OK) goto output_overflow_or_eof;
<    if (0 != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm_5;
<    0;
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm_5 > 0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    0;
<    return 0; 
< }
1701,1704c1701
<    if (strm_5 > 0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
---
>    if (strm_5 > 0)  else ;      
1719,1721c1719
< {
<    return BZ_VERSION;
< }
---
> 
1740,1742c1740
< {
<    return 0;
< }
---
> 
1749,1751c1749
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
> 
1756,1765c1756
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) 
<       return 0;
<     else 
<       return -1;
<    
< }
---
> 
1770,1771d1769
< {
<    int bzerr;
1773,1779d1770
<    ;
<    if(bzerr == BZ_OK)
<       return len;
<    else
<       return -1;
<    
< }
1784,1787c1784
< {
<    
<    return 0;
< }
---
> 
1792,1806c1792
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing)
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK)
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       
<    else
<    if(fp!=stdin && fp!=stdout)
<       fclose(fp);
<    
< }
---
> 
1811,1828c1811
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = ;
1833,1834d1832
< {
<    int err = ((bzFile *)b)->lastErr;
1836,1839d1833
<    if(((bzFile *)b)->lastErr>0) err = 0;
<    *errnum = 0;
<    return "OK";
< }
===< pass_balanced :: curly-only >===
31c31
<    struct {
---
>    struct 
47c47
<    } 
---
>     
355c355
<    struct {
---
>    struct 
423c423
<    }
---
>    
501c501
<    struct {
---
>    struct 
590c590
<    }
---
>    
896c896
< {
---
> 
903c903
< }
---
> 
910c910
< {
---
> 
943c943
< }
---
> 
1050c1050
< {
---
> 
1116c1116
< }
---
> 
1147c1147
< {
---
> 
1160c1160
< }
---
> 
1165c1165
< {
---
> 
1181c1181
< }
---
> 
1193c1193
< {
---
> 
1233c1233
< }
---
> 
1255c1255
< {
---
> 
1268c1268
< }
---
> 
1273c1273
< {
---
> 
1289c1289
< }
---
> 
1300c1300
<    struct {
---
>    struct 
1308c1308
<    }
---
>    
1323c1323
< {
---
> 
1360c1360
< }
---
> 
1370c1370
< {
---
> 
1405c1405
< }
---
> 
1415c1415
< {
---
> 
1418c1418
< }
---
> 
1429c1429
< {
---
> 
1462c1462
< }
---
> 
1473c1473
< {
---
> 
1519c1519
< }
---
> 
1524c1524
< {
---
> 
1539c1539
< }
---
> 
1548c1548
< {
---
> 
1572c1572
< }
---
> 
1581c1581
< {
---
> 
1596c1596
< }
---
> 
1612c1612
< {
---
> 
1655c1655
< }
---
> 
1666c1666
< {
---
> 
1709c1709
< }
---
> 
1701c1701
<    if (strm_5 > 0) {
---
>    if (strm_5 > 0) 
1704c1704
<    } else ;      
---
>     else ;      
1719c1719
< {
---
> 
1721c1721
< }
---
> 
1740c1740
< {
---
> 
1742c1742
< }
---
> 
1749c1749
< {
---
> 
1751c1751
< }
---
> 
1756c1756
< {
---
> 
1765c1765
< }
---
> 
1770c1770
< {
---
> 
1779c1779
< }
---
> 
1784c1784
< {
---
> 
1787c1787
< }
---
> 
1792c1792
< {
---
> 
1806c1806
< }
---
> 
1811c1811
< static char *bzerrorstrings[] = {
---
> static char *bzerrorstrings[] = 
1828c1828
< };
---
> ;
1833c1833
< {
---
> 
1839c1839
< }
---
> 
===< pass_clang :: remove-namespace >===
===< pass_clang :: param-to-global >===
1728c1728
<                ( const char *path,   
---
>                (    
1729c1729
<                  int d,             
---
>                               
1730c1730
<                  const char *mode,
---
>                  
1730,1731c1730
<                  const char *mode,
<                  int open_mode)      
---
>                  const char *mode)      
2176c2176
< void  main ( int argc )
---
> void  main ( void )
(84.5 %, 31781 bytes)
===< pass_clang :: reduce-pointer-level >===
1373c1373
<    char *bzf_4_4;
---
>    char bzf_4_4;
1395c1395
<       bzf_4_4 = bzf->buf;
---
>       bzf_4_4 = *bzf->buf;
534c534
<       UInt32   *tt;
---
>       UInt32   tt;
1054c1054
<    unsigned short *s_10;
---
>    unsigned short s_10;
1104c1104
<    s_10              = (unsigned short*)s_4;
---
>    s_10              = *(unsigned short*)s_4;
(84.5 %, 31781 bytes)
1582c1582
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf = *b;
534c534
<       UInt32   *tt;
---
>       UInt32   tt;
1617c1617
<    char *strm_0;
---
>    char strm_0;
1634c1634
<    strm_0 = source;
---
>    strm_0 = *source;
(84.5 %, 31780 bytes)
1054c1054
<    unsigned short *s_10;
---
>    unsigned short s_10;
1104c1104
<    s_10              = (unsigned short*)s_4;
---
>    s_10              = *(unsigned short*)s_4;
1617c1617
<    char *strm_0;
---
>    char strm_0;
1634c1634
<    strm_0 = source;
---
>    strm_0 = *source;
(84.5 %, 31780 bytes)
1617c1617
<    char *strm_0;
---
>    char strm_0;
1634c1634
<    strm_0 = source;
---
>    strm_0 = *source;
1671c1671
<    char *strm_0;
---
>    char strm_0;
1686c1686
<    strm_0 = source;
---
>    strm_0 = *source;
(84.5 %, 31780 bytes)
1551c1551
<    char *bzf_4_4;
---
>    char bzf_4_4;
1567c1567
<    bzf_4_4 = buf;
---
>    bzf_4_4 = *buf;
907c907
< EState * generateMTFValues_s;
---
> EState  generateMTFValues_s;
920c920
<    UInt32* ptr   = generateMTFValues_s->ptr;
---
>    UInt32* ptr   = generateMTFValues_s.ptr;
922c922
<    unsigned char* block  = generateMTFValues_s->block;
---
>    unsigned char* block  = generateMTFValues_s.block;
924c924
<    unsigned short* mtfv  = generateMTFValues_s->mtfv;
---
>    unsigned short* mtfv  = generateMTFValues_s.mtfv;
928c928
<    EOB = generateMTFValues_s->nInUse+1;
---
>    EOB = generateMTFValues_s.nInUse+1;
930c930
<    for (i = 0; 0 <= EOB; i++) generateMTFValues_s->mtfFreq[0] = 0;
---
>    for (i = 0; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
934c934
<    for (i = 0; 0 < generateMTFValues_s->nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (i = 0; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
936c936
<    for (i = 0; 0 < generateMTFValues_s->nblock; i++) 
---
>    for (i = 0; 0 < generateMTFValues_s.nblock; i++) 
940c940
<     mtfv_0 = EOB; wr++; generateMTFValues_s->mtfFreq[EOB]++;
---
>     mtfv_0 = EOB; wr++; generateMTFValues_s.mtfFreq[EOB]++;
942c942
<    generateMTFValues_s->nMTF = 0;
---
>    generateMTFValues_s.nMTF = 0;
1671c1671
<    char *strm_0;
---
>    char strm_0;
1686c1686
<    strm_0 = source;
---
>    strm_0 = *source;
(84.5 %, 31770 bytes)
920c920
<    UInt32* ptr   = generateMTFValues_s.ptr;
---
>    UInt32 ptr   = *(generateMTFValues_s.ptr);
920c920
<    UInt32* ptr   = generateMTFValues_s.ptr;
---
>    UInt32 ptr   = *(generateMTFValues_s.ptr);
(84.5 %, 31772 bytes)
1550c1550
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf = *b;
1167c1167
<    bz_stream *s_0;
---
>    bz_stream s_0;
1171c1171
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (&s_0 != strm) return BZ_PARAM_ERROR;
1274c1274
<    DState* s;
---
>    DState s;
1277c1277
<    s = strm->state;
---
>    s = *strm->state;
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(bzalloc)(void *,int,int);
588c588
<       Int32*   save_gPerm;
---
>       Int32   save_gPerm;
(84.5 %, 31772 bytes)
924c924
<    unsigned short* mtfv  = generateMTFValues_s.mtfv;
---
>    unsigned short mtfv  = *(generateMTFValues_s.mtfv);
369c369
<       UInt32*  arr2;
---
>       UInt32  arr2;
(84.5 %, 31774 bytes)
32c32
<       char *next_in;
---
>       char next_in;
1202c1202
<    bz_stream *s_0;
---
>    bz_stream s_0;
1215c1215
<    s_0                  = strm;
---
>    s_0                  = *strm;
(84.5 %, 31773 bytes)
1375c1375
<    char *bzf_4_0;
---
>    char bzf_4_0;
1391c1391
<    bzf_4_0  = buf;
---
>    bzf_4_0  = *buf;
1301c1301
<       FILE*     handle;
---
>       FILE     handle;
588c588
<       Int32*   save_gPerm;
---
>       Int32   save_gPerm;
1829c1829
< static char *bzerrorstrings_0 = "OK";
---
> static char bzerrorstrings_0 = a;
1055c1055
<    unsigned char *s_9;
---
>    unsigned char s_9;
1103c1103
<    s_9             = (unsigned char*)s_5;
---
>    s_9             = *(unsigned char*)s_5;
(84.5 %, 31772 bytes)
1525c1525
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf = *b;
1149c1149
<    EState* s;
---
>    EState s;
1153c1153
<    s = strm->state;
---
>    s = *strm->state;
374c374
<       UInt32*  ptr;
---
>       UInt32  ptr;
920c920
<    UInt32 ptr   = *(generateMTFValues_s.ptr);
---
>    UInt32 ptr   = (&generateMTFValues_s.ptr);
376c376
<       unsigned short*  mtfv;
---
>       unsigned short  mtfv;
924c924
<    unsigned short mtfv  = *(generateMTFValues_s.mtfv);
---
>    unsigned short mtfv  = (&generateMTFValues_s.mtfv);
(84.5 %, 31771 bytes)
1431c1431
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf = *b;
1256c1256
<    DState* s;
---
>    DState s;
1259c1259
<    s = strm->state;
---
>    s = *strm->state;
1053c1053
<    UInt32 *s_8;
---
>    UInt32 s_8;
1106c1106
<    s_8               = (UInt32*)s_4;
---
>    s_8               = *(UInt32*)s_4;
1066c1066
<    bz_stream *s_0;
---
>    bz_stream s_0;
1081c1081
<    s_0 = strm;
---
>    s_0 = *strm;
(84.5 %, 31771 bytes)
586c586
<       Int32*   save_gLimit;
---
>       Int32   save_gLimit;
893c893
< EState * makeMaps_e_s;
---
> EState  makeMaps_e_s;
898c898
<    makeMaps_e_s->nInUse = 0;
---
>    makeMaps_e_s.nInUse = 0;
901c901
<          makeMaps_e_s->nInUse++;
---
>          makeMaps_e_s.nInUse++;
(84.5 %, 31770 bytes)
1431c1431
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf = *b;
1431c1431
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf = *b;
1274c1274
<    DState* s;
---
>    DState s;
1277c1277
<    s = strm->state;
---
>    s = *strm->state;
1256c1256
<    DState* s;
---
>    DState s;
1259c1259
<    s = strm->state;
---
>    s = *strm->state;
1671c1671
<    char *strm_0;
---
>    char strm_0;
1686c1686
<    strm_0 = source;
---
>    strm_0 = *source;
538c538
<       unsigned char    *ll4;
---
>       unsigned char    ll4;
(84.5 %, 31770 bytes)
1616c1616
<    char *strm_4;
---
>    char strm_4;
1635c1635
<    strm_4 = dest;
---
>    strm_4 = *dest;
375c375
<       unsigned char*   block;
---
>       unsigned char   block;
922c922
<    unsigned char* block  = generateMTFValues_s.block;
---
>    unsigned char* block  = &generateMTFValues_s.block;
377c377
<       unsigned char*   zbits;
---
>       unsigned char   zbits;
(84.5 %, 31770 bytes)
503c503
<       bz_stream* strm;
---
>       bz_stream strm;
922c922
<    unsigned char* block  = generateMTFValues_s.block;
---
>    unsigned char block  = *(generateMTFValues_s.block);
(84.5 %, 31769 bytes)
1582c1582
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf = *b;
1670c1670
<    char *strm_4;
---
>    char strm_4;
1687c1687
<    strm_4 = dest;
---
>    strm_4 = *dest;
370c370
<       UInt32*  ftab;
---
>       UInt32  ftab;
(84.5 %, 31769 bytes)
587c587
<       Int32*   save_gBase;
---
>       Int32   save_gBase;
1301c1301
<       FILE*     handle;
---
>       FILE     handle;
45c45
<       void (*bzfree)(void *,void *);
---
>       void (bzfree)(void *,void *);
1202c1202
<    bz_stream *s_0;
---
>    bz_stream s_0;
1215c1215
<    s_0                  = strm;
---
>    s_0                  = *strm;
(84.5 %, 31768 bytes)
368c368
<       UInt32*  arr1;
---
>       UInt32  arr1;
1301c1301
<       FILE*     handle;
---
>       FILE     handle;
45c45
<       void (*bzfree)(void *,void *);
---
>       void (bzfree)(void *,void *);
370c370
<       UInt32*  ftab;
---
>       UInt32  ftab;
(84.5 %, 31767 bytes)
1151c1151
<    bz_stream *s_0;
---
>    bz_stream s_0;
1155c1155
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (&s_0 != strm) return BZ_PARAM_ERROR;
1301c1301
<       FILE*     handle;
---
>       FILE     handle;
1375c1375
<    char *bzf_4_0;
---
>    char bzf_4_0;
1391c1391
<    bzf_4_0  = buf;
---
>    bzf_4_0  = *buf;
357c357
<       bz_stream* strm;
---
>       bz_stream strm;
(84.5 %, 31767 bytes)
1301c1301
<       FILE*     handle;
---
>       FILE     handle;
1583c1583
<    char *bzf_4_0;
---
>    char bzf_4_0;
1595c1595
<    *unused = bzf_4_0;
---
>    *unused = &bzf_4_0;
1550c1550
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf = *b;
1551c1551
<    char *bzf_4_4;
---
>    char bzf_4_4;
1567c1567
<    bzf_4_4 = buf;
---
>    bzf_4_4 = *buf;
376c376
<       unsigned short*  mtfv;
---
>       unsigned short  mtfv;
924c924
<    unsigned short mtfv  = *(generateMTFValues_s.mtfv);
---
>    unsigned short mtfv  = (&generateMTFValues_s.mtfv);
(84.5 %, 31767 bytes)
45c45
<       void (*bzfree)(void *,void *);
---
>       void (bzfree)(void *,void *);
1551c1551
<    char *bzf_4_4;
---
>    char bzf_4_4;
1567c1567
<    bzf_4_4 = buf;
---
>    bzf_4_4 = *buf;
369c369
<       UInt32*  arr2;
---
>       UInt32  arr2;
45c45
<       void (*bzfree)(void *,void *);
---
>       void (bzfree)(void *,void *);
1275c1275
<    bz_stream *s_0;
---
>    bz_stream s_0;
1279c1279
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (&s_0 != strm) return BZ_PARAM_ERROR;
(84.5 %, 31766 bytes)
1582c1582
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf = *b;
377c377
<       unsigned char*   zbits;
---
>       unsigned char   zbits;
357c357
<       bz_stream* strm;
---
>       bz_stream strm;
1431c1431
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf = *b;
(84.5 %, 31765 bytes)
537c537
<       unsigned short   *ll16;
---
>       unsigned short   ll16;
1431c1431
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf = *b;
1256c1256
<    DState* s;
---
>    DState s;
1259c1259
<    s = strm->state;
---
>    s = *strm->state;
45c45
<       void (*bzfree)(void *,void *);
---
>       void (bzfree)(void *,void *);
1055c1055
<    unsigned char *s_9;
---
>    unsigned char s_9;
1103c1103
<    s_9             = (unsigned char*)s_5;
---
>    s_9             = *(unsigned char*)s_5;
(84.5 %, 31764 bytes)
1431c1431
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf = *b;
1301c1301
<       FILE*     handle;
---
>       FILE     handle;
376c376
<       unsigned short*  mtfv;
---
>       unsigned short  mtfv;
924c924
<    unsigned short mtfv  = *(generateMTFValues_s.mtfv);
---
>    unsigned short mtfv  = (&generateMTFValues_s.mtfv);
37c37
<       char *next_out;
---
>       char next_out;
(84.5 %, 31763 bytes)
1275c1275
<    bz_stream *s_0;
---
>    bz_stream s_0;
1279c1279
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if (&s_0 != strm) return BZ_PARAM_ERROR;
1372c1372
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf = *b;
1395c1395
<       bzf_4_4 = *bzf->buf;
---
>       bzf_4_4 = *bzf.buf;
1829c1829
< static char *bzerrorstrings_0 = "OK";
---
> static char bzerrorstrings_0 = a;
1431c1431
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf = *b;
1829c1829
< static char *bzerrorstrings_0 = "OK";
---
> static char bzerrorstrings_0 = a;
1551c1551
<    char *bzf_4_4;
---
>    char bzf_4_4;
1567c1567
<    bzf_4_4 = buf;
---
>    bzf_4_4 = *buf;
(84.5 %, 31763 bytes)
1431c1431
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf = *b;
1525c1525
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf = *b;
1550c1550
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf = *b;
1551c1551
<    char *bzf_4_4;
---
>    char bzf_4_4;
1567c1567
<    bzf_4_4 = buf;
---
>    bzf_4_4 = *buf;
1582c1582
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf = *b;
1811,1828c1811
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char bzerrorstrings[] = {a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a};
1829c1829
< static char *bzerrorstrings_0 = "OK";
---
> static char bzerrorstrings_0 = a;
===< pass_clang :: lift-assignment-expr >===
899c899,901
<    for (i = 0; 0 < 6; i++)
---
>    i = 0;
>    
>    for (i; 0 < 6; i++)
930c930,932
<    for (i = 0; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>    i = 0;
>    
>    for (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
(84.5 %, 31773 bytes)
932c932,934
<    for (i = 0; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>    i = 0;
>    
>    for (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
936c936,938
<    for (i = 0; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    i = 0;
>    
>    for (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
(84.5 %, 31783 bytes)
938c938,940
<    for (i = 0; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    i = 0;
>    
>    for (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
940c940,942
<    for (i = 0; 0 < generateMTFValues_s.nblock; i++) 
---
>    i = 0;
>    
>    for (i; 0 < generateMTFValues_s.nblock; i++) 
(84.5 %, 31793 bytes)
942c942,944
<    for (i = 0; 0 < generateMTFValues_s.nblock; i++) 
---
>    i = 0;
>    
>    for (i; 0 < generateMTFValues_s.nblock; i++) 
(84.5 %, 31803 bytes)
===< pass_clang :: remove-unused-enum-member >===
===< pass_clang :: replace-simple-typedef >===
30,48c30
< typedef 
<    struct {
<       char next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
---
> 
61c43
<       bz_stream* strm, 
---
>       struct bz_stream* strm, 
68c50
<       bz_stream* strm, 
---
>       struct bz_stream* strm, 
73c55
<       bz_stream* strm 
---
>       struct bz_stream* strm 
77c59
<       bz_stream *strm, 
---
>       struct bz_stream *strm, 
83c65
<       bz_stream* strm 
---
>       struct bz_stream* strm 
87c69
<       bz_stream *strm 
---
>       struct bz_stream *strm 
357c339
<       bz_stream* strm;
---
>       struct bz_stream* strm;
503c485
<       bz_stream strm;
---
>       struct bz_stream strm;
1054c1036
<                     ( bz_stream* strm, 
---
>                     ( struct bz_stream* strm, 
1074c1056
<    bz_stream *s_0;
---
>    struct bz_stream *s_0;
1154c1136
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int BZ_API(BZ2_bzCompress) ( struct bz_stream *strm, int action )
1159c1141
<    bz_stream s_0;
---
>    struct bz_stream s_0;
1172c1154
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> int BZ_API(BZ2_bzCompressEnd)  ( struct bz_stream *strm )
1175c1157
<    bz_stream s_0;
---
>    struct bz_stream s_0;
1198c1180
<                      ( bz_stream* strm, 
---
>                      ( struct bz_stream* strm, 
1210c1192
<    bz_stream *s_0;
---
>    struct bz_stream *s_0;
1262c1244
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> int BZ_API(BZ2_bzDecompress) ( struct bz_stream *strm )
1265c1247
<    bz_stream *s_0;
---
>    struct bz_stream *s_0;
1280c1262
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> int BZ_API(BZ2_bzDecompressEnd)  ( struct bz_stream *strm )
1283c1265
<    bz_stream s_0;
---
>    struct bz_stream s_0;
1313c1295
<       bz_stream strm;
---
>       struct bz_stream strm;
1621c1603
<    bz_stream strm;
---
>    struct bz_stream strm;
1675c1657
<    bz_stream strm;
---
>    struct bz_stream strm;
241c241
< typedef unsigned char   Bool;
---
> 
395c395
<       Bool     inUse[6];
---
>       unsigned char     inUse[6];
511c511
<       Bool     blockRandomised;
---
>       unsigned char     blockRandomised;
520c520
<       Bool     smallDecompress;
---
>       unsigned char     smallDecompress;
548,549c548,549
<       Bool     inUse[6];
<       Bool     inUse16[6];
---
>       unsigned char     inUse[6];
>       unsigned char     inUse16[6];
1205c1205
<    Bool s_10;
---
>    unsigned char s_10;
1233c1233
<    s_10       = (Bool)small;
---
>    s_10       = (unsigned char)small;
1312c1312
<       Bool      writing;
---
>       unsigned char      writing;
1315c1315
<       Bool      initialisedOk;
---
>       unsigned char      initialisedOk;
1385c1385
<    Bool bzf_3;
---
>    unsigned char bzf_3;
1440c1440
<    Bool bzf_3;
---
>    unsigned char bzf_3;
1534,1535c1534,1535
<    Bool bzf_6;
<    Bool bzf_3;
---
>    unsigned char bzf_6;
>    unsigned char bzf_3;
1561c1561
<    Bool bzf_3;
---
>    unsigned char bzf_3;
243c243
< typedef int             Int32;
---
> 
361,362c361,362
<       Int32    mode;
<       Int32    state;
---
>       int    mode;
>       int    state;
371c371
<       Int32    origPtr;
---
>       int    origPtr;
380c380
<       Int32    workFactor;
---
>       int    workFactor;
384c384
<       Int32    state_in_len;
---
>       int    state_in_len;
388,391c388,391
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
---
>       int    nblock;
>       int    nblockMAX;
>       int    numZ;
>       int    state_out_pos;
394c394
<       Int32    nInUse;
---
>       int    nInUse;
400c400
<       Int32    bsLive;
---
>       int    bsLive;
407,409c407,409
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
---
>       int    verbosity;
>       int    blockNo;
>       int    blockSize100k;
412,413c412,413
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       int    nMTF;
>       int    mtfFreq    [BZ_MAX_ALPHA_SIZE];
418,419c418,419
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       int    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       int    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
506c506
<       Int32    state;
---
>       int    state;
510c510
<       Int32    state_out_len;
---
>       int    state_out_len;
516c516
<       Int32    bsLive;
---
>       int    bsLive;
519c519
<       Int32    blockSize100k;
---
>       int    blockSize100k;
521,522c521,522
<       Int32    currBlockNo;
<       Int32    verbosity;
---
>       int    currBlockNo;
>       int    verbosity;
525c525
<       Int32    origPtr;
---
>       int    origPtr;
527,531c527,531
<       Int32    k0;
<       Int32    unzftab[6];
<       Int32    nblock_used;
<       Int32    cftab[7];
<       Int32    cftabCopy[7];
---
>       int    k0;
>       int    unzftab[6];
>       int    nblock_used;
>       int    cftab[7];
>       int    cftabCopy[7];
547c547
<       Int32    nInUse;
---
>       int    nInUse;
554c554
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       int    mtfbase[6 / MTFL_SIZE];
559,588c559,588
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32   save_gLimit;
<       Int32   save_gBase;
<       Int32   save_gPerm;
---
>       int    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       int    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       int    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>       int    minLens[BZ_N_GROUPS];
> 
>       
>       int    save_i;
>       int    save_j;
>       int    save_t;
>       int    save_alphaSize;
>       int    save_nGroups;
>       int    save_nSelectors;
>       int    save_EOB;
>       int    save_groupNo;
>       int    save_groupPos;
>       int    save_nextSym;
>       int    save_nblockMAX;
>       int    save_nblock;
>       int    save_es;
>       int    save_N;
>       int    save_curr;
>       int    save_zt;
>       int    save_zn; 
>       int    save_zvec;
>       int    save_zj;
>       int    save_gSel;
>       int    save_gMinlen;
>       int   save_gLimit;
>       int   save_gBase;
>       int   save_gPerm;
897c897
<    Int32 i;
---
>    int i;
916,919c916,919
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
---
>    int i, j;
>    int   zPend;
>    int   wr;
>    int   EOB;
1059c1059
<    Int32   n;
---
>    int   n;
1064,1067c1064,1067
<    Int32 s_12;
<    Int32 s_28;
<    Int32 s_18;
<    Int32 s_30;
---
>    int s_12;
>    int s_28;
>    int s_18;
>    int s_30;
1069,1070c1069,1070
<    Int32 s_1;
<    Int32 s_2;
---
>    int s_1;
>    int s_2;
1158c1158
<    Int32 s_1;
---
>    int s_1;
1203,1204c1203,1204
<    Int32 s_12;
<    Int32 s_11;
---
>    int s_12;
>    int s_11;
1208,1209c1208,1209
<    Int32 s_8;
<    Int32 s_1;
---
>    int s_8;
>    int s_1;
1311c1311
<       Int32     bufN;
---
>       int     bufN;
1314c1314
<       Int32     lastErr;
---
>       int     lastErr;
1379c1379
<    Int32   ret;
---
>    int   ret;
1593c1593
<    Int32 bzf_5;
---
>    int bzf_5;
244c244
< typedef unsigned int    UInt32;
---
> 
365c365
<       UInt32   avail_in_expect;
---
>       unsigned int   avail_in_expect;
368,370c368,370
<       UInt32  arr1;
<       UInt32  arr2;
<       UInt32*  ftab;
---
>       unsigned int  arr1;
>       unsigned int  arr2;
>       unsigned int*  ftab;
374c374
<       UInt32  ptr;
---
>       unsigned int  ptr;
383c383
<       UInt32   state_in_ch;
---
>       unsigned int   state_in_ch;
399c399
<       UInt32   bsBuff;
---
>       unsigned int   bsBuff;
403,404c403,404
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
---
>       unsigned int   blockCRC;
>       unsigned int   combinedCRC;
421c421
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>       unsigned int   len_pack[BZ_MAX_ALPHA_SIZE][4];
515c515
<       UInt32   bsBuff;
---
>       unsigned int   bsBuff;
526c526
<       UInt32   tPos;
---
>       unsigned int   tPos;
534c534
<       UInt32   tt;
---
>       unsigned int   tt;
541,544c541,544
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
---
>       unsigned int   storedBlockCRC;
>       unsigned int   storedCombinedCRC;
>       unsigned int   calculatedBlockCRC;
>       unsigned int   calculatedCombinedCRC;
922,923c922,923
<    UInt32 ptr   = (&generateMTFValues_s.ptr);
<    UInt32 ptr_0;
---
>    unsigned int ptr   = (&generateMTFValues_s.ptr);
>    unsigned int ptr_0;
1061c1061
<    UInt32 s_8;
---
>    unsigned int s_8;
1068c1068
<    UInt32 s_27;
---
>    unsigned int s_27;
1071,1073c1071,1073
<    UInt32 *s_6;
<    UInt32 *s_5;
<    UInt32 *s_4;
---
>    unsigned int *s_6;
>    unsigned int *s_5;
>    unsigned int *s_4;
1114c1114
<    s_8               = *(UInt32*)s_4;
---
>    s_8               = *(unsigned int*)s_4;
1206,1207c1206,1207
<    UInt32 s_26;
<    UInt32 s_7;
---
>    unsigned int s_26;
>    unsigned int s_7;
354,391d353
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32  arr1;
<       UInt32  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32  ptr;
<       unsigned char*   block;
<       unsigned short  mtfv;
<       unsigned char   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
393,424d354
<       
<       Int32    nInUse;
<       Bool     inUse[6];
<       unsigned char    unseqToSeq[6];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
< 
<       unsigned char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
893c823
< EState * makeMaps_e_s;
---
> struct EState * makeMaps_e_s;
909c839
< EState  generateMTFValues_s;
---
> struct EState  generateMTFValues_s;
1060c990
<    EState* s;
---
>    struct EState* s;
1157c1087
<    EState* s;
---
>    struct EState* s;
1174c1104
<    EState* s;
---
>    struct EState* s;
500,588d499
< typedef
<    struct {
<       
<       bz_stream strm;
< 
<       
<       Int32    state;
< 
<       
<       unsigned char    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[6];
<       Int32    nblock_used;
<       Int32    cftab[7];
<       Int32    cftabCopy[7];
< 
<       
<       UInt32   tt;
< 
<       
<       unsigned short   ll16;
<       unsigned char    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
<       Bool     inUse16[6];
<       unsigned char    seqToUnseq[6];
< 
<       
<       unsigned char    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[6 / MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32   save_gLimit;
<       Int32   save_gBase;
<       Int32   save_gPerm;
590,591d500
<    }
<    DState;
629c538
< BZ2_decompress ( DState* );
---
> BZ2_decompress ( struct DState* );
999c908
< void  BZ2_decompress ( DState* s )
---
> void  BZ2_decompress ( struct DState* s )
1202c1111
<    DState* s;
---
>    struct DState* s;
1264c1173
<    DState* s;
---
>    struct DState* s;
1282c1191
<    DState* s;
---
>    struct DState* s;
1307,1317c1307
< typedef 
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
---
> 
1380c1370
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1439c1429
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1533c1523
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1558c1548
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1590c1580
<    bzFile* bzf = (bzFile*)b;
---
>    struct bzFile* bzf = (struct bzFile*)b;
1766c1756
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((struct bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
1842c1832
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = ((struct bzFile *)b)->lastErr;
1844c1834
<    if(((bzFile *)b)->lastErr>0) err = 0;
---
>    if(((struct bzFile *)b)->lastErr>0) err = 0;
===< pass_clang :: remove-base-class >===
===< pass_clang :: replace-derived-class >===
===< pass_clang :: remove-unresolved-base >===
===< pass_clang :: remove-addr-taken >===
===< pass_clang :: replace-dependent-name >===
===< pass_clang :: simplify-recursive-template-instantiation >===
===< pass_comments :: 0 >===
===< pass_special :: c >===
===< pass_clex :: rm-tok-pattern-4 >===
9c9
< #define _BZLIB_H
---
> define _BZLIB_H
9c9
< #define _BZLIB_H
---
>  _BZLIB_H
9c9
< #define _BZLIB_H
---
> define 
9c9
< #define _BZLIB_H
---
>  
9c9
< #define _BZLIB_H
---
> define _BZLIB_H
11c11
< #define BZ_RUN               0
---
> define BZ_RUN               0
9c9
< #define _BZLIB_H
---
>  _BZLIB_H
11c11
< #define BZ_RUN               0
---
> define BZ_RUN               0
9c9
< #define _BZLIB_H
---
> define 
11c11
< #define BZ_RUN               0
---
> define BZ_RUN               0
9c9
< #define _BZLIB_H
---
>  
11c11
< #define BZ_RUN               0
---
> define BZ_RUN               0
9c9
< #define _BZLIB_H
---
> # _BZLIB_H
9c9
< #define _BZLIB_H
---
> # 
(84.5 %, 31788 bytes)
11c11
< #define BZ_RUN               0
---
>                 0
11c11
< #define BZ_RUN               0
---
> define BZ_RUN               
11c11
< #define BZ_RUN               0
---
>  BZ_RUN               
11c11
< #define BZ_RUN               0
---
> define                
11c11
< #define BZ_RUN               0
---
>                 
11c11
< #define BZ_RUN               0
---
> # BZ_RUN               0
11c11
< #define BZ_RUN               0
---
> #                0
(84.5 %, 31774 bytes)
12c12
< #define BZ_FLUSH             1
---
>               
12c12
< #define BZ_FLUSH             1
---
> # BZ_FLUSH             1
12c12
< #define BZ_FLUSH             1
---
> #              1
12c12
< #define BZ_FLUSH             1
---
> # BZ_FLUSH             
(84.5 %, 31758 bytes)
13c13
< #define BZ_FINISH            2
---
>              
13c13
< #define BZ_FINISH            2
---
> # BZ_FINISH            2
13c13
< #define BZ_FINISH            2
---
> #             2
(84.5 %, 31741 bytes)
15c15
< #define BZ_OK                0
---
>                  
15c15
< #define BZ_OK                0
---
> # BZ_OK                0
15c15
< #define BZ_OK                0
---
> #                 0
15c15
< #define BZ_OK                0
---
> # BZ_OK                
15c15
< #define BZ_OK                0
---
> #                 
15,16c15,16
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> # BZ_OK                0
> define BZ_RUN_OK            1
15,16c15,16
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> #                 0
> define BZ_RUN_OK            1
15,16c15,16
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> # BZ_OK                
> define BZ_RUN_OK            1
15,16c15,16
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> #                 
> define BZ_RUN_OK            1
15c15
< #define BZ_OK                0
---
> #define                 0
15c15
< #define BZ_OK                0
---
> #define                 
15,16c15,16
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> #define                 0
> define BZ_RUN_OK            1
15,16c15,16
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> #define                 
> define BZ_RUN_OK            1
15,16c15,16
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> #define                 0
> # BZ_RUN_OK            1
15,16c15,16
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> #define                 
> # BZ_RUN_OK            1
15,16c15,16
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> #define                 0
>  BZ_RUN_OK            1
15,16c15,16
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> #define                 
>  BZ_RUN_OK            1
15c15
< #define BZ_OK                0
---
> #define BZ_OK                
15,16c15,16
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> #define BZ_OK                
> define BZ_RUN_OK            1
15,16c15,16
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> #define BZ_OK                
> # BZ_RUN_OK            1
15,16c15,16
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> #define BZ_OK                
>  BZ_RUN_OK            1
15,16c15,16
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> #define BZ_OK                
> #define             1
15,16c15,16
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> #define BZ_OK                
> define             1
15,16c15,16
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> #define BZ_OK                
> #             1
15,16c15,16
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> #define BZ_OK                
>              1
16c16
< #define BZ_RUN_OK            1
---
> define BZ_RUN_OK            1
16c16
< #define BZ_RUN_OK            1
---
>  BZ_RUN_OK            1
16c16
< #define BZ_RUN_OK            1
---
> define             1
16c16
< #define BZ_RUN_OK            1
---
>              1
16c16
< #define BZ_RUN_OK            1
---
> define BZ_RUN_OK            
16c16
< #define BZ_RUN_OK            1
---
>  BZ_RUN_OK            
16c16
< #define BZ_RUN_OK            1
---
> define             
16c16
< #define BZ_RUN_OK            1
---
>              
16c16
< #define BZ_RUN_OK            1
---
> # BZ_RUN_OK            1
16c16
< #define BZ_RUN_OK            1
---
> #             1
16c16
< #define BZ_RUN_OK            1
---
> # BZ_RUN_OK            
16c16
< #define BZ_RUN_OK            1
---
> #             
16,17c16,17
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> # BZ_RUN_OK            1
> define BZ_FLUSH_OK          2
16,17c16,17
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #             1
> define BZ_FLUSH_OK          2
16,17c16,17
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> # BZ_RUN_OK            
> define BZ_FLUSH_OK          2
16,17c16,17
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #             
> define BZ_FLUSH_OK          2
16c16
< #define BZ_RUN_OK            1
---
> #define             1
16c16
< #define BZ_RUN_OK            1
---
> #define             
16,17c16,17
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #define             1
> define BZ_FLUSH_OK          2
16,17c16,17
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #define             
> define BZ_FLUSH_OK          2
16,17c16,17
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #define             1
> # BZ_FLUSH_OK          2
16,17c16,17
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #define             
> # BZ_FLUSH_OK          2
16,17c16,17
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #define             1
>  BZ_FLUSH_OK          2
16,17c16,17
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #define             
>  BZ_FLUSH_OK          2
16c16
< #define BZ_RUN_OK            1
---
> #define BZ_RUN_OK            
16,17c16,17
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #define BZ_RUN_OK            
> define BZ_FLUSH_OK          2
16,17c16,17
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #define BZ_RUN_OK            
> # BZ_FLUSH_OK          2
16,17c16,17
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #define BZ_RUN_OK            
>  BZ_FLUSH_OK          2
16,17c16,17
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #define BZ_RUN_OK            
> #define           2
16,17c16,17
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #define BZ_RUN_OK            
> define           2
16,17c16,17
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #define BZ_RUN_OK            
> #           2
16,17c16,17
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #define BZ_RUN_OK            
>            2
17c17
< #define BZ_FLUSH_OK          2
---
> define BZ_FLUSH_OK          2
17c17
< #define BZ_FLUSH_OK          2
---
>  BZ_FLUSH_OK          2
17c17
< #define BZ_FLUSH_OK          2
---
> define           2
17c17
< #define BZ_FLUSH_OK          2
---
>            2
17c17
< #define BZ_FLUSH_OK          2
---
> define BZ_FLUSH_OK          
17c17
< #define BZ_FLUSH_OK          2
---
>  BZ_FLUSH_OK          
17c17
< #define BZ_FLUSH_OK          2
---
> define           
17c17
< #define BZ_FLUSH_OK          2
---
>            
17c17
< #define BZ_FLUSH_OK          2
---
> # BZ_FLUSH_OK          2
17c17
< #define BZ_FLUSH_OK          2
---
> #           2
(84.5 %, 31722 bytes)
18c18
< #define BZ_FINISH_OK         3
---
>           
18c18
< #define BZ_FINISH_OK         3
---
> # BZ_FINISH_OK         3
18c18
< #define BZ_FINISH_OK         3
---
> #          3
18c18
< #define BZ_FINISH_OK         3
---
> # BZ_FINISH_OK         
18c18
< #define BZ_FINISH_OK         3
---
> #          
18,19c18,19
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> # BZ_FINISH_OK         3
> define BZ_STREAM_END        4
18,19c18,19
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #          3
> define BZ_STREAM_END        4
18,19c18,19
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> # BZ_FINISH_OK         
> define BZ_STREAM_END        4
18,19c18,19
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #          
> define BZ_STREAM_END        4
18c18
< #define BZ_FINISH_OK         3
---
> #define          3
18c18
< #define BZ_FINISH_OK         3
---
> #define          
18,19c18,19
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define          3
> define BZ_STREAM_END        4
18,19c18,19
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define          
> define BZ_STREAM_END        4
18,19c18,19
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define          3
> # BZ_STREAM_END        4
18,19c18,19
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define          
> # BZ_STREAM_END        4
18,19c18,19
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define          3
>  BZ_STREAM_END        4
18,19c18,19
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define          
>  BZ_STREAM_END        4
18c18
< #define BZ_FINISH_OK         3
---
> #define BZ_FINISH_OK         
18,19c18,19
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define BZ_FINISH_OK         
> define BZ_STREAM_END        4
18,19c18,19
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define BZ_FINISH_OK         
> # BZ_STREAM_END        4
18,19c18,19
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define BZ_FINISH_OK         
>  BZ_STREAM_END        4
18,19c18,19
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define BZ_FINISH_OK         
> #define         4
18,19c18,19
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define BZ_FINISH_OK         
> define         4
18,19c18,19
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define BZ_FINISH_OK         
> #         4
18,19c18,19
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define BZ_FINISH_OK         
>          4
19c19
< #define BZ_STREAM_END        4
---
> define BZ_STREAM_END        4
19c19
< #define BZ_STREAM_END        4
---
>  BZ_STREAM_END        4
19c19
< #define BZ_STREAM_END        4
---
> define         4
19c19
< #define BZ_STREAM_END        4
---
>          4
19c19
< #define BZ_STREAM_END        4
---
> define BZ_STREAM_END        
19c19
< #define BZ_STREAM_END        4
---
>  BZ_STREAM_END        
19c19
< #define BZ_STREAM_END        4
---
> define         
19c19
< #define BZ_STREAM_END        4
---
>          
19c19
< #define BZ_STREAM_END        4
---
> # BZ_STREAM_END        4
19c19
< #define BZ_STREAM_END        4
---
> #         4
19c19
< #define BZ_STREAM_END        4
---
> # BZ_STREAM_END        
19c19
< #define BZ_STREAM_END        4
---
> #         
19,20c19,20
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> # BZ_STREAM_END        4
> define BZ_SEQUENCE_ERROR    (-1)
19,20c19,20
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #         4
> define BZ_SEQUENCE_ERROR    (-1)
19,20c19,20
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> # BZ_STREAM_END        
> define BZ_SEQUENCE_ERROR    (-1)
19,20c19,20
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #         
> define BZ_SEQUENCE_ERROR    (-1)
19c19
< #define BZ_STREAM_END        4
---
> #define         4
19c19
< #define BZ_STREAM_END        4
---
> #define         
19,20c19,20
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define         4
> define BZ_SEQUENCE_ERROR    (-1)
19,20c19,20
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define         
> define BZ_SEQUENCE_ERROR    (-1)
19,20c19,20
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define         4
> # BZ_SEQUENCE_ERROR    (-1)
19,20c19,20
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define         
> # BZ_SEQUENCE_ERROR    (-1)
19,20c19,20
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define         4
>  BZ_SEQUENCE_ERROR    (-1)
19,20c19,20
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define         
>  BZ_SEQUENCE_ERROR    (-1)
19c19
< #define BZ_STREAM_END        4
---
> #define BZ_STREAM_END        
19,20c19,20
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define BZ_STREAM_END        
> define BZ_SEQUENCE_ERROR    (-1)
19,20c19,20
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define BZ_STREAM_END        
> # BZ_SEQUENCE_ERROR    (-1)
19,20c19,20
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define BZ_STREAM_END        
>  BZ_SEQUENCE_ERROR    (-1)
19,20c19,20
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define BZ_STREAM_END        
> #define     (-1)
19,20c19,20
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define BZ_STREAM_END        
> define     (-1)
19,20c19,20
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define BZ_STREAM_END        
> #     (-1)
19,20c19,20
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define BZ_STREAM_END        
>      (-1)
20c20
< #define BZ_SEQUENCE_ERROR    (-1)
---
> define BZ_SEQUENCE_ERROR    (-1)
20c20
< #define BZ_SEQUENCE_ERROR    (-1)
---
>  BZ_SEQUENCE_ERROR    (-1)
20c20
< #define BZ_SEQUENCE_ERROR    (-1)
---
> define     (-1)
20c20
< #define BZ_SEQUENCE_ERROR    (-1)
---
>      (-1)
20c20
< #define BZ_SEQUENCE_ERROR    (-1)
---
> define BZ_SEQUENCE_ERROR    -1)
20c20
< #define BZ_SEQUENCE_ERROR    (-1)
---
>  BZ_SEQUENCE_ERROR    -1)
20c20
< #define BZ_SEQUENCE_ERROR    (-1)
---
> define     -1)
20c20
< #define BZ_SEQUENCE_ERROR    (-1)
---
>      -1)
20c20
< #define BZ_SEQUENCE_ERROR    (-1)
---
> # BZ_SEQUENCE_ERROR    (-1)
20c20
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #     (-1)
20c20
< #define BZ_SEQUENCE_ERROR    (-1)
---
> # BZ_SEQUENCE_ERROR    -1)
20c20
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #     -1)
20c20
< #define BZ_SEQUENCE_ERROR    (-1)
---
> # BZ_SEQUENCE_ERROR    (1)
20c20
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #     (1)
20c20
< #define BZ_SEQUENCE_ERROR    (-1)
---
> # BZ_SEQUENCE_ERROR    1)
20c20
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #     1)
20c20
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define     (-1)
20c20
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define     -1)
20c20
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define     (1)
20c20
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define     1)
20c20
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define     (-)
20c20
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define     -)
20c20
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define     ()
20c20
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define     )
20c20
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define BZ_SEQUENCE_ERROR    -1)
20c20
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define BZ_SEQUENCE_ERROR    1)
(84.5 %, 31721 bytes)
20c20
< #define BZ_SEQUENCE_ERROR    -1)
---
> #define BZ_SEQUENCE_ERROR    1)
20c20
< #define BZ_SEQUENCE_ERROR    -1)
---
> #define BZ_SEQUENCE_ERROR    )
20c20
< #define BZ_SEQUENCE_ERROR    -1)
---
> #define BZ_SEQUENCE_ERROR    1
(84.5 %, 31720 bytes)
20c20
< #define BZ_SEQUENCE_ERROR    1)
---
> #define BZ_SEQUENCE_ERROR    )
20c20
< #define BZ_SEQUENCE_ERROR    1)
---
> #define BZ_SEQUENCE_ERROR    
(84.5 %, 31719 bytes)
20c20
< #define BZ_SEQUENCE_ERROR    )
---
> #define BZ_SEQUENCE_ERROR    
20,21c20,21
< #define BZ_SEQUENCE_ERROR    )
< #define BZ_PARAM_ERROR       (-2)
---
> #define BZ_SEQUENCE_ERROR    
> define BZ_PARAM_ERROR       (-2)
20,21c20,21
< #define BZ_SEQUENCE_ERROR    )
< #define BZ_PARAM_ERROR       (-2)
---
> #define BZ_SEQUENCE_ERROR    
> # BZ_PARAM_ERROR       (-2)
20,21c20,21
< #define BZ_SEQUENCE_ERROR    )
< #define BZ_PARAM_ERROR       (-2)
---
> #define BZ_SEQUENCE_ERROR    
>  BZ_PARAM_ERROR       (-2)
20,21c20,21
< #define BZ_SEQUENCE_ERROR    )
< #define BZ_PARAM_ERROR       (-2)
---
> #define BZ_SEQUENCE_ERROR    
> #define        (-2)
20,21c20,21
< #define BZ_SEQUENCE_ERROR    )
< #define BZ_PARAM_ERROR       (-2)
---
> #define BZ_SEQUENCE_ERROR    
> define        (-2)
20,21c20,21
< #define BZ_SEQUENCE_ERROR    )
< #define BZ_PARAM_ERROR       (-2)
---
> #define BZ_SEQUENCE_ERROR    
> #        (-2)
20,21c20,21
< #define BZ_SEQUENCE_ERROR    )
< #define BZ_PARAM_ERROR       (-2)
---
> #define BZ_SEQUENCE_ERROR    
>         (-2)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> define BZ_PARAM_ERROR       (-2)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
>  BZ_PARAM_ERROR       (-2)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> define        (-2)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
>         (-2)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> define BZ_PARAM_ERROR       -2)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
>  BZ_PARAM_ERROR       -2)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> define        -2)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
>         -2)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> # BZ_PARAM_ERROR       (-2)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> #        (-2)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> # BZ_PARAM_ERROR       -2)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> #        -2)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> # BZ_PARAM_ERROR       (2)
(84.5 %, 31718 bytes)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> define BZ_PARAM_ERROR       (-2)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
>  BZ_PARAM_ERROR       (-2)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> define        (-2)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
>         (-2)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> define BZ_PARAM_ERROR       -2)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
>  BZ_PARAM_ERROR       -2)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> define        -2)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
>         -2)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> # BZ_PARAM_ERROR       (-2)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> #        (-2)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> # BZ_PARAM_ERROR       -2)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> #        -2)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> # BZ_PARAM_ERROR       (2)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> #        (2)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> # BZ_PARAM_ERROR       2)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> #        2)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> #define        (-2)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> #define        -2)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> #define        (2)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> #define        2)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> #define        (-)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> #define        -)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> #define        ()
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> #define        )
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> #define BZ_PARAM_ERROR       -2)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> #define BZ_PARAM_ERROR       2)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> #define BZ_PARAM_ERROR       -)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> #define BZ_PARAM_ERROR       )
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> #define BZ_PARAM_ERROR       -2
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> #define BZ_PARAM_ERROR       2
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> #define BZ_PARAM_ERROR       -
(84.5 %, 31716 bytes)
21,22c21,22
< #define BZ_PARAM_ERROR       -2
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_PARAM_ERROR       2
> # BZ_MEM_ERROR         (-3)
21,22c21,22
< #define BZ_PARAM_ERROR       -2
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_PARAM_ERROR       
> # BZ_MEM_ERROR         (-3)
21,22c21,22
< #define BZ_PARAM_ERROR       -2
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_PARAM_ERROR       2
>  BZ_MEM_ERROR         (-3)
21,22c21,22
< #define BZ_PARAM_ERROR       -2
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_PARAM_ERROR       
>  BZ_MEM_ERROR         (-3)
21c21
< #define BZ_PARAM_ERROR       -2
---
> #define BZ_PARAM_ERROR       -
21,22c21,22
< #define BZ_PARAM_ERROR       -2
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_PARAM_ERROR       -
> define BZ_MEM_ERROR         (-3)
21,22c21,22
< #define BZ_PARAM_ERROR       -2
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_PARAM_ERROR       -
> # BZ_MEM_ERROR         (-3)
21,22c21,22
< #define BZ_PARAM_ERROR       -2
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_PARAM_ERROR       -
>  BZ_MEM_ERROR         (-3)
21,22c21,22
< #define BZ_PARAM_ERROR       -2
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_PARAM_ERROR       -
> #define          (-3)
21,22c21,22
< #define BZ_PARAM_ERROR       -2
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_PARAM_ERROR       -
> define          (-3)
21,22c21,22
< #define BZ_PARAM_ERROR       -2
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_PARAM_ERROR       -
> #          (-3)
21,22c21,22
< #define BZ_PARAM_ERROR       -2
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_PARAM_ERROR       -
>           (-3)
22c22
< #define BZ_MEM_ERROR         (-3)
---
> define BZ_MEM_ERROR         (-3)
22c22
< #define BZ_MEM_ERROR         (-3)
---
>  BZ_MEM_ERROR         (-3)
22c22
< #define BZ_MEM_ERROR         (-3)
---
> define          (-3)
22c22
< #define BZ_MEM_ERROR         (-3)
---
>           (-3)
22c22
< #define BZ_MEM_ERROR         (-3)
---
> define BZ_MEM_ERROR         -3)
22c22
< #define BZ_MEM_ERROR         (-3)
---
>  BZ_MEM_ERROR         -3)
22c22
< #define BZ_MEM_ERROR         (-3)
---
> define          -3)
22c22
< #define BZ_MEM_ERROR         (-3)
---
>           -3)
22c22
< #define BZ_MEM_ERROR         (-3)
---
> # BZ_MEM_ERROR         (-3)
22c22
< #define BZ_MEM_ERROR         (-3)
---
> #          (-3)
22c22
< #define BZ_MEM_ERROR         (-3)
---
> # BZ_MEM_ERROR         -3)
22c22
< #define BZ_MEM_ERROR         (-3)
---
> #          -3)
22c22
< #define BZ_MEM_ERROR         (-3)
---
> # BZ_MEM_ERROR         (3)
22c22
< #define BZ_MEM_ERROR         (-3)
---
> #          (3)
22c22
< #define BZ_MEM_ERROR         (-3)
---
> # BZ_MEM_ERROR         3)
22c22
< #define BZ_MEM_ERROR         (-3)
---
> #          3)
22c22
< #define BZ_MEM_ERROR         (-3)
---
> #define          (-3)
22c22
< #define BZ_MEM_ERROR         (-3)
---
> #define          -3)
22c22
< #define BZ_MEM_ERROR         (-3)
---
> #define          (3)
22c22
< #define BZ_MEM_ERROR         (-3)
---
> #define          3)
22c22
< #define BZ_MEM_ERROR         (-3)
---
> #define          (-)
22c22
< #define BZ_MEM_ERROR         (-3)
---
> #define          -)
22c22
< #define BZ_MEM_ERROR         (-3)
---
> #define          ()
22c22
< #define BZ_MEM_ERROR         (-3)
---
> #define          )
22c22
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_MEM_ERROR         -3)
22c22
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_MEM_ERROR         3)
22c22
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_MEM_ERROR         -)
22c22
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_MEM_ERROR         )
22c22
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_MEM_ERROR         -3
22c22
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_MEM_ERROR         3
(84.5 %, 31714 bytes)
22,23c22,23
< #define BZ_MEM_ERROR         -3
< #define BZ_DATA_ERROR        (-4)
---
> #define BZ_MEM_ERROR         3
> # BZ_DATA_ERROR        (-4)
22,23c22,23
< #define BZ_MEM_ERROR         -3
< #define BZ_DATA_ERROR        (-4)
---
> #define BZ_MEM_ERROR         
> # BZ_DATA_ERROR        (-4)
22,23c22,23
< #define BZ_MEM_ERROR         -3
< #define BZ_DATA_ERROR        (-4)
---
> #define BZ_MEM_ERROR         3
>  BZ_DATA_ERROR        (-4)
22,23c22,23
< #define BZ_MEM_ERROR         -3
< #define BZ_DATA_ERROR        (-4)
---
> #define BZ_MEM_ERROR         
>  BZ_DATA_ERROR        (-4)
22c22
< #define BZ_MEM_ERROR         -3
---
> #define BZ_MEM_ERROR         -
22,23c22,23
< #define BZ_MEM_ERROR         -3
< #define BZ_DATA_ERROR        (-4)
---
> #define BZ_MEM_ERROR         -
> define BZ_DATA_ERROR        (-4)
22,23c22,23
< #define BZ_MEM_ERROR         -3
< #define BZ_DATA_ERROR        (-4)
---
> #define BZ_MEM_ERROR         -
> # BZ_DATA_ERROR        (-4)
22,23c22,23
< #define BZ_MEM_ERROR         -3
< #define BZ_DATA_ERROR        (-4)
---
> #define BZ_MEM_ERROR         -
>  BZ_DATA_ERROR        (-4)
22,23c22,23
< #define BZ_MEM_ERROR         -3
< #define BZ_DATA_ERROR        (-4)
---
> #define BZ_MEM_ERROR         -
> #define         (-4)
22,23c22,23
< #define BZ_MEM_ERROR         -3
< #define BZ_DATA_ERROR        (-4)
---
> #define BZ_MEM_ERROR         -
> define         (-4)
22,23c22,23
< #define BZ_MEM_ERROR         -3
< #define BZ_DATA_ERROR        (-4)
---
> #define BZ_MEM_ERROR         -
> #         (-4)
22,23c22,23
< #define BZ_MEM_ERROR         -3
< #define BZ_DATA_ERROR        (-4)
---
> #define BZ_MEM_ERROR         -
>          (-4)
23c23
< #define BZ_DATA_ERROR        (-4)
---
> define BZ_DATA_ERROR        (-4)
23c23
< #define BZ_DATA_ERROR        (-4)
---
>  BZ_DATA_ERROR        (-4)
23c23
< #define BZ_DATA_ERROR        (-4)
---
> define         (-4)
23c23
< #define BZ_DATA_ERROR        (-4)
---
>          (-4)
23c23
< #define BZ_DATA_ERROR        (-4)
---
> define BZ_DATA_ERROR        -4)
23c23
< #define BZ_DATA_ERROR        (-4)
---
>  BZ_DATA_ERROR        -4)
23c23
< #define BZ_DATA_ERROR        (-4)
---
> define         -4)
23c23
< #define BZ_DATA_ERROR        (-4)
---
>          -4)
23c23
< #define BZ_DATA_ERROR        (-4)
---
> # BZ_DATA_ERROR        (-4)
23c23
< #define BZ_DATA_ERROR        (-4)
---
> #         (-4)
23c23
< #define BZ_DATA_ERROR        (-4)
---
> # BZ_DATA_ERROR        -4)
23c23
< #define BZ_DATA_ERROR        (-4)
---
> #         -4)
23c23
< #define BZ_DATA_ERROR        (-4)
---
> # BZ_DATA_ERROR        (4)
23c23
< #define BZ_DATA_ERROR        (-4)
---
> #         (4)
23c23
< #define BZ_DATA_ERROR        (-4)
---
> # BZ_DATA_ERROR        4)
23c23
< #define BZ_DATA_ERROR        (-4)
---
> #         4)
23c23
< #define BZ_DATA_ERROR        (-4)
---
> #define         (-4)
23c23
< #define BZ_DATA_ERROR        (-4)
---
> #define         -4)
23c23
< #define BZ_DATA_ERROR        (-4)
---
> #define         (4)
23c23
< #define BZ_DATA_ERROR        (-4)
---
> #define         4)
23c23
< #define BZ_DATA_ERROR        (-4)
---
> #define         (-)
23c23
< #define BZ_DATA_ERROR        (-4)
---
> #define         -)
23c23
< #define BZ_DATA_ERROR        (-4)
---
> #define         ()
23c23
< #define BZ_DATA_ERROR        (-4)
---
> #define         )
23c23
< #define BZ_DATA_ERROR        (-4)
---
> #define BZ_DATA_ERROR        -4)
23c23
< #define BZ_DATA_ERROR        (-4)
---
> #define BZ_DATA_ERROR        4)
23c23
< #define BZ_DATA_ERROR        (-4)
---
> #define BZ_DATA_ERROR        -)
(84.5 %, 31713 bytes)
23c23
< #define BZ_DATA_ERROR        -4)
---
> #define BZ_DATA_ERROR        4)
23c23
< #define BZ_DATA_ERROR        -4)
---
> #define BZ_DATA_ERROR        )
(84.5 %, 31712 bytes)
23c23
< #define BZ_DATA_ERROR        4)
---
> #define BZ_DATA_ERROR        )
23c23
< #define BZ_DATA_ERROR        4)
---
> #define BZ_DATA_ERROR        
(84.5 %, 31711 bytes)
23c23
< #define BZ_DATA_ERROR        )
---
> #define BZ_DATA_ERROR        
23,24c23,24
< #define BZ_DATA_ERROR        )
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_DATA_ERROR        
> define BZ_DATA_ERROR_MAGIC  (-5)
23,24c23,24
< #define BZ_DATA_ERROR        )
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_DATA_ERROR        
> # BZ_DATA_ERROR_MAGIC  (-5)
23,24c23,24
< #define BZ_DATA_ERROR        )
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_DATA_ERROR        
>  BZ_DATA_ERROR_MAGIC  (-5)
23,24c23,24
< #define BZ_DATA_ERROR        )
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_DATA_ERROR        
> #define   (-5)
23,24c23,24
< #define BZ_DATA_ERROR        )
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_DATA_ERROR        
> define   (-5)
23,24c23,24
< #define BZ_DATA_ERROR        )
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_DATA_ERROR        
> #   (-5)
23,24c23,24
< #define BZ_DATA_ERROR        )
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_DATA_ERROR        
>    (-5)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> define BZ_DATA_ERROR_MAGIC  (-5)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
>  BZ_DATA_ERROR_MAGIC  (-5)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> define   (-5)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
>    (-5)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> define BZ_DATA_ERROR_MAGIC  -5)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
>  BZ_DATA_ERROR_MAGIC  -5)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> define   -5)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
>    -5)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> # BZ_DATA_ERROR_MAGIC  (-5)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #   (-5)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> # BZ_DATA_ERROR_MAGIC  -5)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #   -5)
(84.5 %, 31710 bytes)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> define BZ_DATA_ERROR_MAGIC  (-5)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
>  BZ_DATA_ERROR_MAGIC  (-5)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> define   (-5)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
>    (-5)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> define BZ_DATA_ERROR_MAGIC  -5)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
>  BZ_DATA_ERROR_MAGIC  -5)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> define   -5)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
>    -5)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> # BZ_DATA_ERROR_MAGIC  (-5)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #   (-5)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> # BZ_DATA_ERROR_MAGIC  -5)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #   -5)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> # BZ_DATA_ERROR_MAGIC  (5)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #   (5)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> # BZ_DATA_ERROR_MAGIC  5)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #   5)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define   (-5)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define   -5)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define   (5)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define   5)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define   (-)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define   -)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define   ()
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define   )
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_DATA_ERROR_MAGIC  -5)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_DATA_ERROR_MAGIC  5)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_DATA_ERROR_MAGIC  -)
(84.5 %, 31709 bytes)
24c24
< #define BZ_DATA_ERROR_MAGIC  -5)
---
> #define BZ_DATA_ERROR_MAGIC  5)
24c24
< #define BZ_DATA_ERROR_MAGIC  -5)
---
> #define BZ_DATA_ERROR_MAGIC  )
24c24
< #define BZ_DATA_ERROR_MAGIC  -5)
---
> #define BZ_DATA_ERROR_MAGIC  5
(84.5 %, 31708 bytes)
24c24
< #define BZ_DATA_ERROR_MAGIC  5)
---
> #define BZ_DATA_ERROR_MAGIC  )
24c24
< #define BZ_DATA_ERROR_MAGIC  5)
---
> #define BZ_DATA_ERROR_MAGIC  
(84.5 %, 31707 bytes)
24c24
< #define BZ_DATA_ERROR_MAGIC  )
---
> #define BZ_DATA_ERROR_MAGIC  
24,25c24,25
< #define BZ_DATA_ERROR_MAGIC  )
< #define BZ_IO_ERROR          (-6)
---
> #define BZ_DATA_ERROR_MAGIC  
> define BZ_IO_ERROR          (-6)
24,25c24,25
< #define BZ_DATA_ERROR_MAGIC  )
< #define BZ_IO_ERROR          (-6)
---
> #define BZ_DATA_ERROR_MAGIC  
> # BZ_IO_ERROR          (-6)
24,25c24,25
< #define BZ_DATA_ERROR_MAGIC  )
< #define BZ_IO_ERROR          (-6)
---
> #define BZ_DATA_ERROR_MAGIC  
>  BZ_IO_ERROR          (-6)
24,25c24,25
< #define BZ_DATA_ERROR_MAGIC  )
< #define BZ_IO_ERROR          (-6)
---
> #define BZ_DATA_ERROR_MAGIC  
> #define           (-6)
24,25c24,25
< #define BZ_DATA_ERROR_MAGIC  )
< #define BZ_IO_ERROR          (-6)
---
> #define BZ_DATA_ERROR_MAGIC  
> define           (-6)
24,25c24,25
< #define BZ_DATA_ERROR_MAGIC  )
< #define BZ_IO_ERROR          (-6)
---
> #define BZ_DATA_ERROR_MAGIC  
> #           (-6)
24,25c24,25
< #define BZ_DATA_ERROR_MAGIC  )
< #define BZ_IO_ERROR          (-6)
---
> #define BZ_DATA_ERROR_MAGIC  
>            (-6)
25c25
< #define BZ_IO_ERROR          (-6)
---
> define BZ_IO_ERROR          (-6)
25c25
< #define BZ_IO_ERROR          (-6)
---
>  BZ_IO_ERROR          (-6)
25c25
< #define BZ_IO_ERROR          (-6)
---
> define           (-6)
25c25
< #define BZ_IO_ERROR          (-6)
---
>            (-6)
25c25
< #define BZ_IO_ERROR          (-6)
---
> define BZ_IO_ERROR          -6)
25c25
< #define BZ_IO_ERROR          (-6)
---
>  BZ_IO_ERROR          -6)
25c25
< #define BZ_IO_ERROR          (-6)
---
> define           -6)
25c25
< #define BZ_IO_ERROR          (-6)
---
>            -6)
25c25
< #define BZ_IO_ERROR          (-6)
---
> # BZ_IO_ERROR          (-6)
25c25
< #define BZ_IO_ERROR          (-6)
---
> #           (-6)
25c25
< #define BZ_IO_ERROR          (-6)
---
> # BZ_IO_ERROR          -6)
25c25
< #define BZ_IO_ERROR          (-6)
---
> #           -6)
25c25
< #define BZ_IO_ERROR          (-6)
---
> # BZ_IO_ERROR          (6)
(84.5 %, 31706 bytes)
25c25
< #define BZ_IO_ERROR          (-6)
---
> define BZ_IO_ERROR          (-6)
25c25
< #define BZ_IO_ERROR          (-6)
---
>  BZ_IO_ERROR          (-6)
25c25
< #define BZ_IO_ERROR          (-6)
---
> define           (-6)
25c25
< #define BZ_IO_ERROR          (-6)
---
>            (-6)
25c25
< #define BZ_IO_ERROR          (-6)
---
> define BZ_IO_ERROR          -6)
25c25
< #define BZ_IO_ERROR          (-6)
---
>  BZ_IO_ERROR          -6)
25c25
< #define BZ_IO_ERROR          (-6)
---
> define           -6)
25c25
< #define BZ_IO_ERROR          (-6)
---
>            -6)
25c25
< #define BZ_IO_ERROR          (-6)
---
> # BZ_IO_ERROR          (-6)
25c25
< #define BZ_IO_ERROR          (-6)
---
> #           (-6)
25c25
< #define BZ_IO_ERROR          (-6)
---
> # BZ_IO_ERROR          -6)
25c25
< #define BZ_IO_ERROR          (-6)
---
> #           -6)
25c25
< #define BZ_IO_ERROR          (-6)
---
> # BZ_IO_ERROR          (6)
25c25
< #define BZ_IO_ERROR          (-6)
---
> #           (6)
25c25
< #define BZ_IO_ERROR          (-6)
---
> # BZ_IO_ERROR          6)
25c25
< #define BZ_IO_ERROR          (-6)
---
> #           6)
25c25
< #define BZ_IO_ERROR          (-6)
---
> #define           (-6)
25c25
< #define BZ_IO_ERROR          (-6)
---
> #define           -6)
25c25
< #define BZ_IO_ERROR          (-6)
---
> #define           (6)
25c25
< #define BZ_IO_ERROR          (-6)
---
> #define           6)
25c25
< #define BZ_IO_ERROR          (-6)
---
> #define           (-)
25c25
< #define BZ_IO_ERROR          (-6)
---
> #define           -)
25c25
< #define BZ_IO_ERROR          (-6)
---
> #define           ()
25c25
< #define BZ_IO_ERROR          (-6)
---
> #define           )
25c25
< #define BZ_IO_ERROR          (-6)
---
> #define BZ_IO_ERROR          -6)
25c25
< #define BZ_IO_ERROR          (-6)
---
> #define BZ_IO_ERROR          6)
25c25
< #define BZ_IO_ERROR          (-6)
---
> #define BZ_IO_ERROR          -)
(84.5 %, 31705 bytes)
25c25
< #define BZ_IO_ERROR          -6)
---
> #define BZ_IO_ERROR          6)
25c25
< #define BZ_IO_ERROR          -6)
---
> #define BZ_IO_ERROR          )
(84.5 %, 31704 bytes)
25c25
< #define BZ_IO_ERROR          6)
---
> #define BZ_IO_ERROR          )
25c25
< #define BZ_IO_ERROR          6)
---
> #define BZ_IO_ERROR          
(84.5 %, 31703 bytes)
25c25
< #define BZ_IO_ERROR          )
---
> #define BZ_IO_ERROR          
25,26c25,26
< #define BZ_IO_ERROR          )
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_IO_ERROR          
> define BZ_UNEXPECTED_EOF    (-7)
25,26c25,26
< #define BZ_IO_ERROR          )
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_IO_ERROR          
> # BZ_UNEXPECTED_EOF    (-7)
25,26c25,26
< #define BZ_IO_ERROR          )
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_IO_ERROR          
>  BZ_UNEXPECTED_EOF    (-7)
25,26c25,26
< #define BZ_IO_ERROR          )
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_IO_ERROR          
> #define     (-7)
25,26c25,26
< #define BZ_IO_ERROR          )
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_IO_ERROR          
> define     (-7)
25,26c25,26
< #define BZ_IO_ERROR          )
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_IO_ERROR          
> #     (-7)
25,26c25,26
< #define BZ_IO_ERROR          )
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_IO_ERROR          
>      (-7)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> define BZ_UNEXPECTED_EOF    (-7)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
>  BZ_UNEXPECTED_EOF    (-7)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> define     (-7)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
>      (-7)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> define BZ_UNEXPECTED_EOF    -7)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
>  BZ_UNEXPECTED_EOF    -7)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> define     -7)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
>      -7)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> # BZ_UNEXPECTED_EOF    (-7)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #     (-7)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> # BZ_UNEXPECTED_EOF    -7)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #     -7)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> # BZ_UNEXPECTED_EOF    (7)
(84.5 %, 31702 bytes)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> define BZ_UNEXPECTED_EOF    (-7)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
>  BZ_UNEXPECTED_EOF    (-7)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> define     (-7)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
>      (-7)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> define BZ_UNEXPECTED_EOF    -7)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
>  BZ_UNEXPECTED_EOF    -7)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> define     -7)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
>      -7)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> # BZ_UNEXPECTED_EOF    (-7)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #     (-7)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> # BZ_UNEXPECTED_EOF    -7)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #     -7)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> # BZ_UNEXPECTED_EOF    (7)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #     (7)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> # BZ_UNEXPECTED_EOF    7)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #     7)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define     (-7)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define     -7)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define     (7)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define     7)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define     (-)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define     -)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define     ()
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define     )
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_UNEXPECTED_EOF    -7)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_UNEXPECTED_EOF    7)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_UNEXPECTED_EOF    -)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_UNEXPECTED_EOF    )
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_UNEXPECTED_EOF    -7
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_UNEXPECTED_EOF    7
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_UNEXPECTED_EOF    -
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_UNEXPECTED_EOF    
(84.5 %, 31700 bytes)
26,27c26,27
< #define BZ_UNEXPECTED_EOF    -7
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_UNEXPECTED_EOF    7
> # BZ_OUTBUFF_FULL      (-8)
26,27c26,27
< #define BZ_UNEXPECTED_EOF    -7
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_UNEXPECTED_EOF    
> # BZ_OUTBUFF_FULL      (-8)
26,27c26,27
< #define BZ_UNEXPECTED_EOF    -7
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_UNEXPECTED_EOF    7
>  BZ_OUTBUFF_FULL      (-8)
26,27c26,27
< #define BZ_UNEXPECTED_EOF    -7
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_UNEXPECTED_EOF    
>  BZ_OUTBUFF_FULL      (-8)
26c26
< #define BZ_UNEXPECTED_EOF    -7
---
> #define BZ_UNEXPECTED_EOF    -
26,27c26,27
< #define BZ_UNEXPECTED_EOF    -7
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_UNEXPECTED_EOF    -
> define BZ_OUTBUFF_FULL      (-8)
26,27c26,27
< #define BZ_UNEXPECTED_EOF    -7
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_UNEXPECTED_EOF    -
> # BZ_OUTBUFF_FULL      (-8)
26,27c26,27
< #define BZ_UNEXPECTED_EOF    -7
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_UNEXPECTED_EOF    -
>  BZ_OUTBUFF_FULL      (-8)
26,27c26,27
< #define BZ_UNEXPECTED_EOF    -7
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_UNEXPECTED_EOF    -
> #define       (-8)
26,27c26,27
< #define BZ_UNEXPECTED_EOF    -7
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_UNEXPECTED_EOF    -
> define       (-8)
26,27c26,27
< #define BZ_UNEXPECTED_EOF    -7
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_UNEXPECTED_EOF    -
> #       (-8)
26,27c26,27
< #define BZ_UNEXPECTED_EOF    -7
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_UNEXPECTED_EOF    -
>        (-8)
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
> define BZ_OUTBUFF_FULL      (-8)
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
>  BZ_OUTBUFF_FULL      (-8)
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
> define       (-8)
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
>        (-8)
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
> define BZ_OUTBUFF_FULL      -8)
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
>  BZ_OUTBUFF_FULL      -8)
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
> define       -8)
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
>        -8)
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
> # BZ_OUTBUFF_FULL      (-8)
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
> #       (-8)
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
> # BZ_OUTBUFF_FULL      -8)
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
> #       -8)
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
> # BZ_OUTBUFF_FULL      (8)
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
> #       (8)
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
> # BZ_OUTBUFF_FULL      8)
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
> #       8)
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define       (-8)
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define       -8)
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define       (8)
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define       8)
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define       (-)
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define       -)
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define       ()
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define       )
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_OUTBUFF_FULL      -8)
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_OUTBUFF_FULL      8)
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_OUTBUFF_FULL      -)
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_OUTBUFF_FULL      )
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_OUTBUFF_FULL      -8
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_OUTBUFF_FULL      8
(84.5 %, 31698 bytes)
27,28c27,28
< #define BZ_OUTBUFF_FULL      -8
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_OUTBUFF_FULL      8
> # BZ_CONFIG_ERROR      (-9)
27,28c27,28
< #define BZ_OUTBUFF_FULL      -8
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_OUTBUFF_FULL      
> # BZ_CONFIG_ERROR      (-9)
27,28c27,28
< #define BZ_OUTBUFF_FULL      -8
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_OUTBUFF_FULL      8
>  BZ_CONFIG_ERROR      (-9)
27,28c27,28
< #define BZ_OUTBUFF_FULL      -8
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_OUTBUFF_FULL      
>  BZ_CONFIG_ERROR      (-9)
27c27
< #define BZ_OUTBUFF_FULL      -8
---
> #define BZ_OUTBUFF_FULL      -
27,28c27,28
< #define BZ_OUTBUFF_FULL      -8
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_OUTBUFF_FULL      -
> define BZ_CONFIG_ERROR      (-9)
27,28c27,28
< #define BZ_OUTBUFF_FULL      -8
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_OUTBUFF_FULL      -
> # BZ_CONFIG_ERROR      (-9)
27,28c27,28
< #define BZ_OUTBUFF_FULL      -8
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_OUTBUFF_FULL      -
>  BZ_CONFIG_ERROR      (-9)
27,28c27,28
< #define BZ_OUTBUFF_FULL      -8
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_OUTBUFF_FULL      -
> #define       (-9)
27,28c27,28
< #define BZ_OUTBUFF_FULL      -8
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_OUTBUFF_FULL      -
> define       (-9)
27,28c27,28
< #define BZ_OUTBUFF_FULL      -8
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_OUTBUFF_FULL      -
> #       (-9)
27,28c27,28
< #define BZ_OUTBUFF_FULL      -8
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_OUTBUFF_FULL      -
>        (-9)
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> define BZ_CONFIG_ERROR      (-9)
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
>  BZ_CONFIG_ERROR      (-9)
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> define       (-9)
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
>        (-9)
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> define BZ_CONFIG_ERROR      -9)
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
>  BZ_CONFIG_ERROR      -9)
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> define       -9)
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
>        -9)
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> # BZ_CONFIG_ERROR      (-9)
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> #       (-9)
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> # BZ_CONFIG_ERROR      -9)
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> #       -9)
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> # BZ_CONFIG_ERROR      (9)
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> #       (9)
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> # BZ_CONFIG_ERROR      9)
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> #       9)
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> #define       (-9)
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> #define       -9)
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> #define       (9)
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> #define       9)
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> #define       (-)
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> #define       -)
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> #define       ()
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> #define       )
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_CONFIG_ERROR      -9)
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_CONFIG_ERROR      9)
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_CONFIG_ERROR      -)
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_CONFIG_ERROR      )
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_CONFIG_ERROR      -9
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_CONFIG_ERROR      9
(84.5 %, 31696 bytes)
28c28
< #define BZ_CONFIG_ERROR      -9
---
> #define BZ_CONFIG_ERROR      9
31c31
<    struct {
---
>     {
28c28
< #define BZ_CONFIG_ERROR      -9
---
> #define BZ_CONFIG_ERROR      
31c31
<    struct {
---
>     {
28c28
< #define BZ_CONFIG_ERROR      -9
---
> #define BZ_CONFIG_ERROR      9
30,31c30,31
< typedef 
<    struct {
---
>  
>     {
28c28
< #define BZ_CONFIG_ERROR      -9
---
> #define BZ_CONFIG_ERROR      
30,31c30,31
< typedef 
<    struct {
---
>  
>     {
28c28
< #define BZ_CONFIG_ERROR      -9
---
> #define BZ_CONFIG_ERROR      -
28c28
< #define BZ_CONFIG_ERROR      -9
---
> #define BZ_CONFIG_ERROR      -
30c30
< typedef 
---
>  
28c28
< #define BZ_CONFIG_ERROR      -9
---
> #define BZ_CONFIG_ERROR      -
31c31
<    struct {
---
>     {
28c28
< #define BZ_CONFIG_ERROR      -9
---
> #define BZ_CONFIG_ERROR      -
30,31c30,31
< typedef 
<    struct {
---
>  
>     {
28c28
< #define BZ_CONFIG_ERROR      -9
---
> #define BZ_CONFIG_ERROR      -
31c31
<    struct {
---
>    struct 
28c28
< #define BZ_CONFIG_ERROR      -9
---
> #define BZ_CONFIG_ERROR      -
30,31c30,31
< typedef 
<    struct {
---
>  
>    struct 
28c28
< #define BZ_CONFIG_ERROR      -9
---
> #define BZ_CONFIG_ERROR      -
31c31
<    struct {
---
>     
28c28
< #define BZ_CONFIG_ERROR      -9
---
> #define BZ_CONFIG_ERROR      -
30,31c30,31
< typedef 
<    struct {
---
>  
>     
30c30
< typedef 
---
>  
30,31c30,31
< typedef 
<    struct {
---
>  
>     {
30,31c30,31
< typedef 
<    struct {
---
>  
>    struct 
30,31c30,31
< typedef 
<    struct {
---
>  
>     
30c30
< typedef 
---
>  
32c32
<       char next_in;
---
>        next_in;
30,32c30,32
< typedef 
<    struct {
<       char next_in;
---
>  
>     {
>        next_in;
30,32c30,32
< typedef 
<    struct {
<       char next_in;
---
>  
>    struct 
>        next_in;
30,32c30,32
< typedef 
<    struct {
<       char next_in;
---
>  
>     
>        next_in;
31c31
<    struct {
---
>     {
31c31
<    struct {
---
>     
31,32c31,32
<    struct {
<       char next_in;
---
>     {
>        next_in;
31,32c31,32
<    struct {
<       char next_in;
---
>     
>        next_in;
31,32c31,32
<    struct {
<       char next_in;
---
>     {
>       char ;
31,32c31,32
<    struct {
<       char next_in;
---
>     
>       char ;
31,32c31,32
<    struct {
<       char next_in;
---
>     {
>        ;
31,32c31,32
<    struct {
<       char next_in;
---
>     
>        ;
31c31
<    struct {
---
>    struct 
31,32c31,32
<    struct {
<       char next_in;
---
>    struct 
>        next_in;
31,32c31,32
<    struct {
<       char next_in;
---
>    struct 
>       char ;
31,32c31,32
<    struct {
<       char next_in;
---
>    struct 
>        ;
31,32c31,32
<    struct {
<       char next_in;
---
>    struct 
>       char next_in
31,32c31,32
<    struct {
<       char next_in;
---
>    struct 
>        next_in
31,32c31,32
<    struct {
<       char next_in;
---
>    struct 
>       char 
31,32c31,32
<    struct {
<       char next_in;
---
>    struct 
>        
32c32
<       char next_in;
---
>        next_in;
32c32
<       char next_in;
---
>        ;
32c32
<       char next_in;
---
>        next_in
32c32
<       char next_in;
---
>        
(84.5 %, 31685 bytes)
32,33c32,33
<        ;
<       unsigned int avail_in;
---
>        
>        int avail_in;
32,33c32,33
<        ;
<       unsigned int avail_in;
---
>        
>       unsigned  avail_in;
(84.5 %, 31676 bytes)
33c33
<        int avail_in;
---
>         ;
33c33
<        int avail_in;
---
>         avail_in
33c33
<        int avail_in;
---
>         
33,34c33,34
<        int avail_in;
<       unsigned int total_in_lo32;
---
>         avail_in;
>        int total_in_lo32;
33,34c33,34
<        int avail_in;
<       unsigned int total_in_lo32;
---
>         ;
>        int total_in_lo32;
33,34c33,34
<        int avail_in;
<       unsigned int total_in_lo32;
---
>         avail_in
>        int total_in_lo32;
33,34c33,34
<        int avail_in;
<       unsigned int total_in_lo32;
---
>         
>        int total_in_lo32;
33c33
<        int avail_in;
---
>        int ;
33c33
<        int avail_in;
---
>        int 
33,34c33,34
<        int avail_in;
<       unsigned int total_in_lo32;
---
>        int ;
>        int total_in_lo32;
33,34c33,34
<        int avail_in;
<       unsigned int total_in_lo32;
---
>        int 
>        int total_in_lo32;
33,34c33,34
<        int avail_in;
<       unsigned int total_in_lo32;
---
>        int ;
>       unsigned  total_in_lo32;
33,34c33,34
<        int avail_in;
<       unsigned int total_in_lo32;
---
>        int 
>       unsigned  total_in_lo32;
33,34c33,34
<        int avail_in;
<       unsigned int total_in_lo32;
---
>        int ;
>         total_in_lo32;
33,34c33,34
<        int avail_in;
<       unsigned int total_in_lo32;
---
>        int 
>         total_in_lo32;
33c33
<        int avail_in;
---
>        int avail_in
33,34c33,34
<        int avail_in;
<       unsigned int total_in_lo32;
---
>        int avail_in
>        int total_in_lo32;
33,34c33,34
<        int avail_in;
<       unsigned int total_in_lo32;
---
>        int avail_in
>       unsigned  total_in_lo32;
33,34c33,34
<        int avail_in;
<       unsigned int total_in_lo32;
---
>        int avail_in
>         total_in_lo32;
33,34c33,34
<        int avail_in;
<       unsigned int total_in_lo32;
---
>        int avail_in
>       unsigned int ;
33,34c33,34
<        int avail_in;
<       unsigned int total_in_lo32;
---
>        int avail_in
>        int ;
33,34c33,34
<        int avail_in;
<       unsigned int total_in_lo32;
---
>        int avail_in
>       unsigned  ;
33,34c33,34
<        int avail_in;
<       unsigned int total_in_lo32;
---
>        int avail_in
>         ;
34c34
<       unsigned int total_in_lo32;
---
>        int total_in_lo32;
34c34
<       unsigned int total_in_lo32;
---
>         total_in_lo32;
34c34
<       unsigned int total_in_lo32;
---
>        int ;
34c34
<       unsigned int total_in_lo32;
---
>         ;
34c34
<       unsigned int total_in_lo32;
---
>        int total_in_lo32
34c34
<       unsigned int total_in_lo32;
---
>         total_in_lo32
34c34
<       unsigned int total_in_lo32;
---
>        int 
34c34
<       unsigned int total_in_lo32;
---
>         
34c34
<       unsigned int total_in_lo32;
---
>       unsigned  total_in_lo32;
(84.5 %, 31668 bytes)
34c34
<        int total_in_lo32;
---
>         total_in_lo32;
34c34
<        int total_in_lo32;
---
>         ;
34c34
<        int total_in_lo32;
---
>         total_in_lo32
34c34
<        int total_in_lo32;
---
>         
34,35c34,35
<        int total_in_lo32;
<       unsigned int total_in_hi32;
---
>         total_in_lo32;
>        int total_in_hi32;
34,35c34,35
<        int total_in_lo32;
<       unsigned int total_in_hi32;
---
>         ;
>        int total_in_hi32;
34,35c34,35
<        int total_in_lo32;
<       unsigned int total_in_hi32;
---
>         total_in_lo32
>        int total_in_hi32;
34,35c34,35
<        int total_in_lo32;
<       unsigned int total_in_hi32;
---
>         
>        int total_in_hi32;
34c34
<        int total_in_lo32;
---
>        int ;
34c34
<        int total_in_lo32;
---
>        int 
34,35c34,35
<        int total_in_lo32;
<       unsigned int total_in_hi32;
---
>        int ;
>        int total_in_hi32;
34,35c34,35
<        int total_in_lo32;
<       unsigned int total_in_hi32;
---
>        int 
>        int total_in_hi32;
34,35c34,35
<        int total_in_lo32;
<       unsigned int total_in_hi32;
---
>        int ;
>       unsigned  total_in_hi32;
34,35c34,35
<        int total_in_lo32;
<       unsigned int total_in_hi32;
---
>        int 
>       unsigned  total_in_hi32;
34,35c34,35
<        int total_in_lo32;
<       unsigned int total_in_hi32;
---
>        int ;
>         total_in_hi32;
34,35c34,35
<        int total_in_lo32;
<       unsigned int total_in_hi32;
---
>        int 
>         total_in_hi32;
34c34
<        int total_in_lo32;
---
>        int total_in_lo32
34,35c34,35
<        int total_in_lo32;
<       unsigned int total_in_hi32;
---
>        int total_in_lo32
>        int total_in_hi32;
34,35c34,35
<        int total_in_lo32;
<       unsigned int total_in_hi32;
---
>        int total_in_lo32
>       unsigned  total_in_hi32;
34,35c34,35
<        int total_in_lo32;
<       unsigned int total_in_hi32;
---
>        int total_in_lo32
>         total_in_hi32;
34,35c34,35
<        int total_in_lo32;
<       unsigned int total_in_hi32;
---
>        int total_in_lo32
>       unsigned int ;
34,35c34,35
<        int total_in_lo32;
<       unsigned int total_in_hi32;
---
>        int total_in_lo32
>        int ;
34,35c34,35
<        int total_in_lo32;
<       unsigned int total_in_hi32;
---
>        int total_in_lo32
>       unsigned  ;
34,35c34,35
<        int total_in_lo32;
<       unsigned int total_in_hi32;
---
>        int total_in_lo32
>         ;
35c35
<       unsigned int total_in_hi32;
---
>        int total_in_hi32;
35c35
<       unsigned int total_in_hi32;
---
>         total_in_hi32;
35c35
<       unsigned int total_in_hi32;
---
>        int ;
35c35
<       unsigned int total_in_hi32;
---
>         ;
35c35
<       unsigned int total_in_hi32;
---
>        int total_in_hi32
35c35
<       unsigned int total_in_hi32;
---
>         total_in_hi32
35c35
<       unsigned int total_in_hi32;
---
>        int 
35c35
<       unsigned int total_in_hi32;
---
>         
35c35
<       unsigned int total_in_hi32;
---
>       unsigned  total_in_hi32;
(84.6 %, 31660 bytes)
35c35
<        int total_in_hi32;
---
>         total_in_hi32;
35c35
<        int total_in_hi32;
---
>         ;
35c35
<        int total_in_hi32;
---
>         total_in_hi32
35c35
<        int total_in_hi32;
---
>         
35c35
<        int total_in_hi32;
---
>         total_in_hi32;
37c37
<       char *next_out;
---
>        *next_out;
35c35
<        int total_in_hi32;
---
>         ;
37c37
<       char *next_out;
---
>        *next_out;
35c35
<        int total_in_hi32;
---
>         total_in_hi32
37c37
<       char *next_out;
---
>        *next_out;
35c35
<        int total_in_hi32;
---
>         
37c37
<       char *next_out;
---
>        *next_out;
35c35
<        int total_in_hi32;
---
>        int ;
35c35
<        int total_in_hi32;
---
>        int 
35c35
<        int total_in_hi32;
---
>        int ;
37c37
<       char *next_out;
---
>        *next_out;
35c35
<        int total_in_hi32;
---
>        int 
37c37
<       char *next_out;
---
>        *next_out;
35c35
<        int total_in_hi32;
---
>        int ;
37c37
<       char *next_out;
---
>       char next_out;
35c35
<        int total_in_hi32;
---
>        int 
37c37
<       char *next_out;
---
>       char next_out;
35c35
<        int total_in_hi32;
---
>        int ;
37c37
<       char *next_out;
---
>        next_out;
35c35
<        int total_in_hi32;
---
>        int 
37c37
<       char *next_out;
---
>        next_out;
35c35
<        int total_in_hi32;
---
>        int total_in_hi32
35c35
<        int total_in_hi32;
---
>        int total_in_hi32
37c37
<       char *next_out;
---
>        *next_out;
35c35
<        int total_in_hi32;
---
>        int total_in_hi32
37c37
<       char *next_out;
---
>       char next_out;
35c35
<        int total_in_hi32;
---
>        int total_in_hi32
37c37
<       char *next_out;
---
>        next_out;
35c35
<        int total_in_hi32;
---
>        int total_in_hi32
37c37
<       char *next_out;
---
>       char *;
35c35
<        int total_in_hi32;
---
>        int total_in_hi32
37c37
<       char *next_out;
---
>        *;
35c35
<        int total_in_hi32;
---
>        int total_in_hi32
37c37
<       char *next_out;
---
>       char ;
35c35
<        int total_in_hi32;
---
>        int total_in_hi32
37c37
<       char *next_out;
---
>        ;
37c37
<       char *next_out;
---
>        *next_out;
37c37
<       char *next_out;
---
>        next_out;
37c37
<       char *next_out;
---
>        *;
37c37
<       char *next_out;
---
>        ;
(84.6 %, 31646 bytes)
37,38c37,38
<        ;
<       unsigned int avail_out;
---
>        
>         ;
38c38
<       unsigned int avail_out;
---
>        int avail_out;
(84.6 %, 31625 bytes)
37a38
>         
39d39
<       unsigned int total_out_lo32;
39c39
<       unsigned int total_out_lo32;
---
>        int total_out_lo32;
39c39
<       unsigned int total_out_lo32;
---
>         total_out_lo32;
39c39
<       unsigned int total_out_lo32;
---
>        int ;
39c39
<       unsigned int total_out_lo32;
---
>         ;
39c39
<       unsigned int total_out_lo32;
---
>        int total_out_lo32
39c39
<       unsigned int total_out_lo32;
---
>         total_out_lo32
39c39
<       unsigned int total_out_lo32;
---
>        int 
39c39
<       unsigned int total_out_lo32;
---
>         
39c39
<       unsigned int total_out_lo32;
---
>       unsigned  total_out_lo32;
(84.6 %, 31617 bytes)
39c39
<        int total_out_lo32;
---
>         total_out_lo32;
39c39
<        int total_out_lo32;
---
>         ;
39c39
<        int total_out_lo32;
---
>         total_out_lo32
39c39
<        int total_out_lo32;
---
>         
39,40c39,40
<        int total_out_lo32;
<       unsigned int total_out_hi32;
---
>         total_out_lo32;
>        int total_out_hi32;
39,40c39,40
<        int total_out_lo32;
<       unsigned int total_out_hi32;
---
>         ;
>        int total_out_hi32;
39,40c39,40
<        int total_out_lo32;
<       unsigned int total_out_hi32;
---
>         total_out_lo32
>        int total_out_hi32;
39,40c39,40
<        int total_out_lo32;
<       unsigned int total_out_hi32;
---
>         
>        int total_out_hi32;
39c39
<        int total_out_lo32;
---
>        int ;
39c39
<        int total_out_lo32;
---
>        int 
39,40c39,40
<        int total_out_lo32;
<       unsigned int total_out_hi32;
---
>        int ;
>        int total_out_hi32;
39,40c39,40
<        int total_out_lo32;
<       unsigned int total_out_hi32;
---
>        int 
>        int total_out_hi32;
39,40c39,40
<        int total_out_lo32;
<       unsigned int total_out_hi32;
---
>        int ;
>       unsigned  total_out_hi32;
39,40c39,40
<        int total_out_lo32;
<       unsigned int total_out_hi32;
---
>        int 
>       unsigned  total_out_hi32;
39,40c39,40
<        int total_out_lo32;
<       unsigned int total_out_hi32;
---
>        int ;
>         total_out_hi32;
39,40c39,40
<        int total_out_lo32;
<       unsigned int total_out_hi32;
---
>        int 
>         total_out_hi32;
39c39
<        int total_out_lo32;
---
>        int total_out_lo32
39,40c39,40
<        int total_out_lo32;
<       unsigned int total_out_hi32;
---
>        int total_out_lo32
>        int total_out_hi32;
39,40c39,40
<        int total_out_lo32;
<       unsigned int total_out_hi32;
---
>        int total_out_lo32
>       unsigned  total_out_hi32;
39,40c39,40
<        int total_out_lo32;
<       unsigned int total_out_hi32;
---
>        int total_out_lo32
>         total_out_hi32;
39,40c39,40
<        int total_out_lo32;
<       unsigned int total_out_hi32;
---
>        int total_out_lo32
>       unsigned int ;
39,40c39,40
<        int total_out_lo32;
<       unsigned int total_out_hi32;
---
>        int total_out_lo32
>        int ;
39,40c39,40
<        int total_out_lo32;
<       unsigned int total_out_hi32;
---
>        int total_out_lo32
>       unsigned  ;
39,40c39,40
<        int total_out_lo32;
<       unsigned int total_out_hi32;
---
>        int total_out_lo32
>         ;
40c40
<       unsigned int total_out_hi32;
---
>        int total_out_hi32;
40c40
<       unsigned int total_out_hi32;
---
>         total_out_hi32;
40c40
<       unsigned int total_out_hi32;
---
>        int ;
40c40
<       unsigned int total_out_hi32;
---
>         ;
40c40
<       unsigned int total_out_hi32;
---
>        int total_out_hi32
40c40
<       unsigned int total_out_hi32;
---
>         total_out_hi32
40c40
<       unsigned int total_out_hi32;
---
>        int 
40c40
<       unsigned int total_out_hi32;
---
>         
40c40
<       unsigned int total_out_hi32;
---
>       unsigned  total_out_hi32;
(84.6 %, 31609 bytes)
40c40
<        int total_out_hi32;
---
>         total_out_hi32;
40c40
<        int total_out_hi32;
---
>         ;
40c40
<        int total_out_hi32;
---
>         total_out_hi32
40c40
<        int total_out_hi32;
---
>         
40c40
<        int total_out_hi32;
---
>         total_out_hi32;
42c42
<       void *state;
---
>        *state;
40c40
<        int total_out_hi32;
---
>         ;
42c42
<       void *state;
---
>        *state;
40c40
<        int total_out_hi32;
---
>         total_out_hi32
42c42
<       void *state;
---
>        *state;
40c40
<        int total_out_hi32;
---
>         
42c42
<       void *state;
---
>        *state;
40c40
<        int total_out_hi32;
---
>        int ;
40c40
<        int total_out_hi32;
---
>        int 
40c40
<        int total_out_hi32;
---
>        int ;
42c42
<       void *state;
---
>        *state;
40c40
<        int total_out_hi32;
---
>        int 
42c42
<       void *state;
---
>        *state;
40c40
<        int total_out_hi32;
---
>        int ;
42c42
<       void *state;
---
>       void state;
40c40
<        int total_out_hi32;
---
>        int 
42c42
<       void *state;
---
>       void state;
40c40
<        int total_out_hi32;
---
>        int ;
42c42
<       void *state;
---
>        state;
40c40
<        int total_out_hi32;
---
>        int 
42c42
<       void *state;
---
>        state;
40c40
<        int total_out_hi32;
---
>        int total_out_hi32
40c40
<        int total_out_hi32;
---
>        int total_out_hi32
42c42
<       void *state;
---
>        *state;
40c40
<        int total_out_hi32;
---
>        int total_out_hi32
42c42
<       void *state;
---
>       void state;
40c40
<        int total_out_hi32;
---
>        int total_out_hi32
42c42
<       void *state;
---
>        state;
40c40
<        int total_out_hi32;
---
>        int total_out_hi32
42c42
<       void *state;
---
>       void *;
40c40
<        int total_out_hi32;
---
>        int total_out_hi32
42c42
<       void *state;
---
>        *;
40c40
<        int total_out_hi32;
---
>        int total_out_hi32
42c42
<       void *state;
---
>       void ;
40c40
<        int total_out_hi32;
---
>        int total_out_hi32
42c42
<       void *state;
---
>        ;
42c42
<       void *state;
---
>        *state;
42c42
<       void *state;
---
>        state;
42c42
<       void *state;
---
>        *;
42c42
<       void *state;
---
>        ;
42c42
<       void *state;
---
>        *state
42c42
<       void *state;
---
>        state
42c42
<       void *state;
---
>        *
42c42
<       void *state;
---
>        
42c42
<       void *state;
---
>       void state;
42c42
<       void *state;
---
>       void ;
42c42
<       void *state;
---
>       void state
42c42
<       void *state;
---
>       void 
42c42
<       void *state;
---
>       void state;
44c44
<       void *(*bzalloc)(void *,int,int);
---
>        *(*bzalloc)(void *,int,int);
42c42
<       void *state;
---
>       void ;
44c44
<       void *(*bzalloc)(void *,int,int);
---
>        *(*bzalloc)(void *,int,int);
42c42
<       void *state;
---
>       void state
44c44
<       void *(*bzalloc)(void *,int,int);
---
>        *(*bzalloc)(void *,int,int);
42c42
<       void *state;
---
>       void 
44c44
<       void *(*bzalloc)(void *,int,int);
---
>        *(*bzalloc)(void *,int,int);
42c42
<       void *state;
---
>       void *;
42c42
<       void *state;
---
>       void *
42c42
<       void *state;
---
>       void *;
44c44
<       void *(*bzalloc)(void *,int,int);
---
>        *(*bzalloc)(void *,int,int);
42c42
<       void *state;
---
>       void *
44c44
<       void *(*bzalloc)(void *,int,int);
---
>        *(*bzalloc)(void *,int,int);
42c42
<       void *state;
---
>       void *;
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void (*bzalloc)(void *,int,int);
42c42
<       void *state;
---
>       void *
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void (*bzalloc)(void *,int,int);
42c42
<       void *state;
---
>       void *;
44c44
<       void *(*bzalloc)(void *,int,int);
---
>        (*bzalloc)(void *,int,int);
42c42
<       void *state;
---
>       void *
44c44
<       void *(*bzalloc)(void *,int,int);
---
>        (*bzalloc)(void *,int,int);
42c42
<       void *state;
---
>       void *state
42c42
<       void *state;
---
>       void *state
44c44
<       void *(*bzalloc)(void *,int,int);
---
>        *(*bzalloc)(void *,int,int);
42c42
<       void *state;
---
>       void *state
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void (*bzalloc)(void *,int,int);
42c42
<       void *state;
---
>       void *state
44c44
<       void *(*bzalloc)(void *,int,int);
---
>        (*bzalloc)(void *,int,int);
42c42
<       void *state;
---
>       void *state
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void **bzalloc)(void *,int,int);
42c42
<       void *state;
---
>       void *state
44c44
<       void *(*bzalloc)(void *,int,int);
---
>        **bzalloc)(void *,int,int);
42c42
<       void *state;
---
>       void *state
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *bzalloc)(void *,int,int);
42c42
<       void *state;
---
>       void *state
44c44
<       void *(*bzalloc)(void *,int,int);
---
>        *bzalloc)(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>        *(*bzalloc)(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>        (*bzalloc)(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>        **bzalloc)(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>        *bzalloc)(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>        *(bzalloc)(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>        (bzalloc)(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>        *bzalloc)(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>        bzalloc)(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void (*bzalloc)(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *bzalloc)(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void (bzalloc)(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void bzalloc)(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void (*)(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *)(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void ()(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void )(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void **bzalloc)(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *bzalloc)(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void **)(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *)(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void **bzalloc(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *bzalloc(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void **(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(bzalloc)(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *()(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(bzalloc(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *((void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(bzalloc)void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *()void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(bzallocvoid *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*)(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*)void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*)( *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*( *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*) *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(* *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzallocvoid *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc( *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc(void ,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzallocvoid ,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc( ,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc ,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc) *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)void ,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc) ,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)void *int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc) *int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)void int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc) int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)( *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)( ,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)( *int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)( int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)( *,,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)( ,,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)( *,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)( ,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)(void ,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)(void int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)(void ,,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)(void ,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)(void ,intint);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)(void intint);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)(void ,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)(void int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)(void *int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)(void *,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)(void *intint);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)(void *int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)(void *int,);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)(void *,);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)(void *int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)(void *);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)(void *,,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)(void *,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)(void *,,);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)(void *,);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)(void *,,int;
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)(void *,int;
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)(void *,,;
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)(void *,;
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)(void *,intint);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)(void *,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)(void *,intint;
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)(void *,int;
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)(void *,intint)
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)(void *,int)
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)(void *,intint
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)(void *,int
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)(void *,int,);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)(void *,int,;
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)(void *,int,)
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)(void *,int,
44,45c44,45
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,int,);
>        (*bzfree)(void *,void *);
44,45c44,45
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,int,;
>        (*bzfree)(void *,void *);
44,45c44,45
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,int,)
>        (*bzfree)(void *,void *);
44,45c44,45
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,int,
>        (*bzfree)(void *,void *);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)(void *,int,int;
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)(void *,int,int
44,45c44,45
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,int,int;
>        (*bzfree)(void *,void *);
44,45c44,45
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,int,int
>        (*bzfree)(void *,void *);
44,45c44,45
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,int,int;
>       void *bzfree)(void *,void *);
44,45c44,45
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,int,int
>       void *bzfree)(void *,void *);
44,45c44,45
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,int,int;
>        *bzfree)(void *,void *);
44,45c44,45
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,int,int
>        *bzfree)(void *,void *);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)(void *,int,int)
44,45c44,45
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,int,int)
>        (*bzfree)(void *,void *);
44,45c44,45
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,int,int)
>       void *bzfree)(void *,void *);
44,45c44,45
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,int,int)
>        *bzfree)(void *,void *);
44,45c44,45
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,int,int)
>       void (bzfree)(void *,void *);
44,45c44,45
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,int,int)
>        (bzfree)(void *,void *);
44,45c44,45
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,int,int)
>       void bzfree)(void *,void *);
44,45c44,45
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,int,int)
>        bzfree)(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>        (*bzfree)(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>        *bzfree)(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>        (bzfree)(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>        bzfree)(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>        (*)(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>        *)(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>        ()(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>        )(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void *bzfree)(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void bzfree)(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void *)(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void )(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void *bzfree(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void bzfree(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void *(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (bzfree)(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void ()(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (bzfree(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void ((void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (bzfree)void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void ()void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (bzfreevoid *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*)(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*)void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*)( *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*( *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*) *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (* *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfreevoid *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree( *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree(void ,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfreevoid ,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree( ,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree ,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree) *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)void ,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree) ,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)void *void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree) *void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)void void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree) void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)( *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)( ,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)( *void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)( void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)( *, *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)( , *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)( * *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)(  *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)(void ,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)(void void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)(void , *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)(void  *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)(void ,void );
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)(void void );
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)(void , );
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)(void  );
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)(void *void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)(void * *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)(void *void );
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)(void * );
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)(void *void *;
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)(void * *;
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)(void *void ;
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)(void * ;
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)(void *, *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)(void *, );
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)(void *, *;
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)(void *, ;
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)(void *, *)
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)(void *, )
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)(void *, *
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)(void *, 
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)(void *,void );
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)(void *,void ;
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)(void *,void )
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)(void *,void 
45,46c45,46
<       void (*bzfree)(void *,void *);
<       void *opaque;
---
>       void (*bzfree)(void *,void );
>        *opaque;
45,46c45,46
<       void (*bzfree)(void *,void *);
<       void *opaque;
---
>       void (*bzfree)(void *,void ;
>        *opaque;
45,46c45,46
<       void (*bzfree)(void *,void *);
<       void *opaque;
---
>       void (*bzfree)(void *,void )
>        *opaque;
45,46c45,46
<       void (*bzfree)(void *,void *);
<       void *opaque;
---
>       void (*bzfree)(void *,void 
>        *opaque;
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)(void *,void *;
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)(void *,void *
45,46c45,46
<       void (*bzfree)(void *,void *);
<       void *opaque;
---
>       void (*bzfree)(void *,void *;
>        *opaque;
45,46c45,46
<       void (*bzfree)(void *,void *);
<       void *opaque;
---
>       void (*bzfree)(void *,void *
>        *opaque;
45,46c45,46
<       void (*bzfree)(void *,void *);
<       void *opaque;
---
>       void (*bzfree)(void *,void *;
>       void opaque;
45,46c45,46
<       void (*bzfree)(void *,void *);
<       void *opaque;
---
>       void (*bzfree)(void *,void *
>       void opaque;
45,46c45,46
<       void (*bzfree)(void *,void *);
<       void *opaque;
---
>       void (*bzfree)(void *,void *;
>        opaque;
45,46c45,46
<       void (*bzfree)(void *,void *);
<       void *opaque;
---
>       void (*bzfree)(void *,void *
>        opaque;
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)(void *,void *)
45,46c45,46
<       void (*bzfree)(void *,void *);
<       void *opaque;
---
>       void (*bzfree)(void *,void *)
>        *opaque;
45,46c45,46
<       void (*bzfree)(void *,void *);
<       void *opaque;
---
>       void (*bzfree)(void *,void *)
>       void opaque;
45,46c45,46
<       void (*bzfree)(void *,void *);
<       void *opaque;
---
>       void (*bzfree)(void *,void *)
>        opaque;
45,46c45,46
<       void (*bzfree)(void *,void *);
<       void *opaque;
---
>       void (*bzfree)(void *,void *)
>       void *;
45,46c45,46
<       void (*bzfree)(void *,void *);
<       void *opaque;
---
>       void (*bzfree)(void *,void *)
>        *;
45,46c45,46
<       void (*bzfree)(void *,void *);
<       void *opaque;
---
>       void (*bzfree)(void *,void *)
>       void ;
45,46c45,46
<       void (*bzfree)(void *,void *);
<       void *opaque;
---
>       void (*bzfree)(void *,void *)
>        ;
46c46
<       void *opaque;
---
>        *opaque;
46c46
<       void *opaque;
---
>        opaque;
46c46
<       void *opaque;
---
>        *;
46c46
<       void *opaque;
---
>        ;
46c46
<       void *opaque;
---
>        *opaque
46c46
<       void *opaque;
---
>        opaque
46c46
<       void *opaque;
---
>        *
46c46
<       void *opaque;
---
>        
46c46
<       void *opaque;
---
>       void opaque;
46c46
<       void *opaque;
---
>       void ;
46c46
<       void *opaque;
---
>       void opaque
46c46
<       void *opaque;
---
>       void 
46,47c46,47
<       void *opaque;
<    } 
---
>       void opaque;
>     
46,47c46,47
<       void *opaque;
<    } 
---
>       void ;
>     
46,47c46,47
<       void *opaque;
<    } 
---
>       void opaque
>     
46,47c46,47
<       void *opaque;
<    } 
---
>       void 
>     
46c46
<       void *opaque;
---
>       void *;
46c46
<       void *opaque;
---
>       void *
46,47c46,47
<       void *opaque;
<    } 
---
>       void *;
>     
46,47c46,47
<       void *opaque;
<    } 
---
>       void *
>     
46c46
<       void *opaque;
---
>       void *;
48c48
<    bz_stream;
---
>    ;
46c46
<       void *opaque;
---
>       void *
48c48
<    bz_stream;
---
>    ;
46,48c46,48
<       void *opaque;
<    } 
<    bz_stream;
---
>       void *;
>     
>    ;
46,48c46,48
<       void *opaque;
<    } 
<    bz_stream;
---
>       void *
>     
>    ;
46c46
<       void *opaque;
---
>       void *opaque
46,47c46,47
<       void *opaque;
<    } 
---
>       void *opaque
>     
46c46
<       void *opaque;
---
>       void *opaque
48c48
<    bz_stream;
---
>    ;
46,48c46,48
<       void *opaque;
<    } 
<    bz_stream;
---
>       void *opaque
>     
>    ;
46c46
<       void *opaque;
---
>       void *opaque
48c48
<    bz_stream;
---
>    bz_stream
46,48c46,48
<       void *opaque;
<    } 
<    bz_stream;
---
>       void *opaque
>     
>    bz_stream
46c46
<       void *opaque;
---
>       void *opaque
48c48
<    bz_stream;
---
>    
46,48c46,48
<       void *opaque;
<    } 
<    bz_stream;
---
>       void *opaque
>     
>    
47c47
<    } 
---
>     
47,48c47,48
<    } 
<    bz_stream;
---
>     
>    ;
47,48c47,48
<    } 
<    bz_stream;
---
>     
>    bz_stream
47,48c47,48
<    } 
<    bz_stream;
---
>     
>    
47c47
<    } 
---
>     
52c52
< #include <stdio.h>
---
> include <stdio.h>
47,48c47,48
<    } 
<    bz_stream;
---
>     
>    ;
52c52
< #include <stdio.h>
---
> include <stdio.h>
47,48c47,48
<    } 
<    bz_stream;
---
>     
>    bz_stream
52c52
< #include <stdio.h>
---
> include <stdio.h>
47,48c47,48
<    } 
<    bz_stream;
---
>     
>    
52c52
< #include <stdio.h>
---
> include <stdio.h>
48c48
<    bz_stream;
---
>    ;
48c48
<    bz_stream;
---
>    
48c48
<    bz_stream;
---
>    ;
52c52
< #include <stdio.h>
---
> include <stdio.h>
48c48
<    bz_stream;
---
>    
52c52
< #include <stdio.h>
---
> include <stdio.h>
48c48
<    bz_stream;
---
>    ;
52c52
< #include <stdio.h>
---
> # <stdio.h>
48c48
<    bz_stream;
---
>    
52c52
< #include <stdio.h>
---
> # <stdio.h>
(84.6 %, 31608 bytes)
47c47
<    } 
---
>     
47,48c47,48
<    } 
<    bz_stream;
---
>     
>    ;
47,48c47,48
<    } 
<    bz_stream;
---
>     
>    bz_stream
47,48c47,48
<    } 
<    bz_stream;
---
>     
>    
47c47
<    } 
---
>     
52c52
< #include <stdio.h>
---
> include <stdio.h>
47,48c47,48
<    } 
<    bz_stream;
---
>     
>    ;
52c52
< #include <stdio.h>
---
> include <stdio.h>
47,48c47,48
<    } 
<    bz_stream;
---
>     
>    bz_stream
52c52
< #include <stdio.h>
---
> include <stdio.h>
47,48c47,48
<    } 
<    bz_stream;
---
>     
>    
52c52
< #include <stdio.h>
---
> include <stdio.h>
48c48
<    bz_stream;
---
>    ;
48c48
<    bz_stream;
---
>    
48c48
<    bz_stream;
---
>    ;
52c52
< #include <stdio.h>
---
> include <stdio.h>
48c48
<    bz_stream;
---
>    
52c52
< #include <stdio.h>
---
> include <stdio.h>
48c48
<    bz_stream;
---
>    ;
52c52
< #include <stdio.h>
---
> # <stdio.h>
48c48
<    bz_stream;
---
>    
52c52
< #include <stdio.h>
---
> # <stdio.h>
48c48
<    bz_stream;
---
>    ;
52c52
< #include <stdio.h>
---
>  <stdio.h>
48c48
<    bz_stream;
---
>    
52c52
< #include <stdio.h>
---
>  <stdio.h>
48c48
<    bz_stream;
---
>    bz_stream
48c48
<    bz_stream;
---
>    bz_stream
52c52
< #include <stdio.h>
---
> include <stdio.h>
48c48
<    bz_stream;
---
>    bz_stream
52c52
< #include <stdio.h>
---
> # <stdio.h>
48c48
<    bz_stream;
---
>    bz_stream
52c52
< #include <stdio.h>
---
>  <stdio.h>
48c48
<    bz_stream;
---
>    bz_stream
52c52
< #include <stdio.h>
---
> #include stdio.h>
48c48
<    bz_stream;
---
>    bz_stream
52c52
< #include <stdio.h>
---
> include stdio.h>
48c48
<    bz_stream;
---
>    bz_stream
52c52
< #include <stdio.h>
---
> # stdio.h>
48c48
<    bz_stream;
---
>    bz_stream
52c52
< #include <stdio.h>
---
>  stdio.h>
52c52
< #include <stdio.h>
---
> include <stdio.h>
52c52
< #include <stdio.h>
---
>  <stdio.h>
52c52
< #include <stdio.h>
---
> include stdio.h>
52c52
< #include <stdio.h>
---
>  stdio.h>
52c52
< #include <stdio.h>
---
> include <.h>
52c52
< #include <stdio.h>
---
>  <.h>
52c52
< #include <stdio.h>
---
> include .h>
52c52
< #include <stdio.h>
---
>  .h>
52c52
< #include <stdio.h>
---
> # <stdio.h>
52c52
< #include <stdio.h>
---
> # stdio.h>
52c52
< #include <stdio.h>
---
> # <.h>
52c52
< #include <stdio.h>
---
> # .h>
52c52
< #include <stdio.h>
---
> # <stdioh>
52c52
< #include <stdio.h>
---
> # stdioh>
52c52
< #include <stdio.h>
---
> # <h>
52c52
< #include <stdio.h>
---
> # h>
52c52
< #include <stdio.h>
---
> #include stdio.h>
52c52
< #include <stdio.h>
---
> #include .h>
52c52
< #include <stdio.h>
---
> #include stdioh>
52c52
< #include <stdio.h>
---
> #include h>
52c52
< #include <stdio.h>
---
> #include stdio.>
52c52
< #include <stdio.h>
---
> #include .>
52c52
< #include <stdio.h>
---
> #include stdio>
52c52
< #include <stdio.h>
---
> #include >
52c52
< #include <stdio.h>
---
> #include <.h>
52c52
< #include <stdio.h>
---
> #include <h>
52c52
< #include <stdio.h>
---
> #include <.>
52c52
< #include <stdio.h>
---
> #include <>
52c52
< #include <stdio.h>
---
> #include <.h
52c52
< #include <stdio.h>
---
> #include <h
52c52
< #include <stdio.h>
---
> #include <.
52c52
< #include <stdio.h>
---
> #include <
52c52
< #include <stdio.h>
---
> #include <stdioh>
52c52
< #include <stdio.h>
---
> #include <stdio>
52c52
< #include <stdio.h>
---
> #include <stdioh
52c52
< #include <stdio.h>
---
> #include <stdio
52c52
< #include <stdio.h>
---
> #include <stdioh>
54c54
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
52c52
< #include <stdio.h>
---
> #include <stdio>
54c54
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
52c52
< #include <stdio.h>
---
> #include <stdioh
54c54
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
52c52
< #include <stdio.h>
---
> #include <stdio
54c54
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
52c52
< #include <stdio.h>
---
> #include <stdio.>
52c52
< #include <stdio.h>
---
> #include <stdio.
52c52
< #include <stdio.h>
---
> #include <stdio.>
54c54
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
52c52
< #include <stdio.h>
---
> #include <stdio.
54c54
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
52c52
< #include <stdio.h>
---
> #include <stdio.>
54c54
< #   define BZ_API(func) func
---
> #    BZ_API(func) func
52c52
< #include <stdio.h>
---
> #include <stdio.
54c54
< #   define BZ_API(func) func
---
> #    BZ_API(func) func
52c52
< #include <stdio.h>
---
> #include <stdio.>
54c54
< #   define BZ_API(func) func
---
>     BZ_API(func) func
52c52
< #include <stdio.h>
---
> #include <stdio.
54c54
< #   define BZ_API(func) func
---
>     BZ_API(func) func
52c52
< #include <stdio.h>
---
> #include <stdio.h
52c52
< #include <stdio.h>
---
> #include <stdio.h
54c54
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
52c52
< #include <stdio.h>
---
> #include <stdio.h
54c54
< #   define BZ_API(func) func
---
> #    BZ_API(func) func
52c52
< #include <stdio.h>
---
> #include <stdio.h
54c54
< #   define BZ_API(func) func
---
>     BZ_API(func) func
52c52
< #include <stdio.h>
---
> #include <stdio.h
54c54
< #   define BZ_API(func) func
---
> #   define (func) func
52c52
< #include <stdio.h>
---
> #include <stdio.h
54c54
< #   define BZ_API(func) func
---
>    define (func) func
52c52
< #include <stdio.h>
---
> #include <stdio.h
54c54
< #   define BZ_API(func) func
---
> #    (func) func
52c52
< #include <stdio.h>
---
> #include <stdio.h
54c54
< #   define BZ_API(func) func
---
>     (func) func
54c54
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
54c54
< #   define BZ_API(func) func
---
>     BZ_API(func) func
54c54
< #   define BZ_API(func) func
---
>    define (func) func
54c54
< #   define BZ_API(func) func
---
>     (func) func
54c54
< #   define BZ_API(func) func
---
>    define BZ_APIfunc) func
54c54
< #   define BZ_API(func) func
---
>     BZ_APIfunc) func
54c54
< #   define BZ_API(func) func
---
>    define func) func
54c54
< #   define BZ_API(func) func
---
>     func) func
54c54
< #   define BZ_API(func) func
---
> #    BZ_API(func) func
54c54
< #   define BZ_API(func) func
---
> #    (func) func
54c54
< #   define BZ_API(func) func
---
> #    BZ_APIfunc) func
54c54
< #   define BZ_API(func) func
---
> #    func) func
54c54
< #   define BZ_API(func) func
---
> #    BZ_API() func
54c54
< #   define BZ_API(func) func
---
> #    () func
54c54
< #   define BZ_API(func) func
---
> #    BZ_API) func
54c54
< #   define BZ_API(func) func
---
> #    ) func
54c54
< #   define BZ_API(func) func
---
> #   define (func) func
54c54
< #   define BZ_API(func) func
---
> #   define func) func
54c54
< #   define BZ_API(func) func
---
> #   define () func
54c54
< #   define BZ_API(func) func
---
> #   define ) func
54c54
< #   define BZ_API(func) func
---
> #   define (func func
54c54
< #   define BZ_API(func) func
---
> #   define func func
54c54
< #   define BZ_API(func) func
---
> #   define ( func
54c54
< #   define BZ_API(func) func
---
> #   define  func
54c54
< #   define BZ_API(func) func
---
> #   define BZ_APIfunc) func
54c54
< #   define BZ_API(func) func
---
> #   define BZ_API) func
54c54
< #   define BZ_API(func) func
---
> #   define BZ_APIfunc func
54c54
< #   define BZ_API(func) func
---
> #   define BZ_API func
54c54
< #   define BZ_API(func) func
---
> #   define BZ_APIfunc) 
54c54
< #   define BZ_API(func) func
---
> #   define BZ_API) 
54c54
< #   define BZ_API(func) func
---
> #   define BZ_APIfunc 
54c54
< #   define BZ_API(func) func
---
> #   define BZ_API 
54c54
< #   define BZ_API(func) func
---
> #   define BZ_API() func
54c54
< #   define BZ_API(func) func
---
> #   define BZ_API( func
54c54
< #   define BZ_API(func) func
---
> #   define BZ_API() 
54c54
< #   define BZ_API(func) func
---
> #   define BZ_API( 
54,55c54,55
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define BZ_API() func
>    define BZ_EXTERN extern
54,55c54,55
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define BZ_API( func
>    define BZ_EXTERN extern
54,55c54,55
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define BZ_API() 
>    define BZ_EXTERN extern
54,55c54,55
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define BZ_API( 
>    define BZ_EXTERN extern
54c54
< #   define BZ_API(func) func
---
> #   define BZ_API(func func
54c54
< #   define BZ_API(func) func
---
> #   define BZ_API(func 
54,55c54,55
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define BZ_API(func func
>    define BZ_EXTERN extern
54,55c54,55
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define BZ_API(func 
>    define BZ_EXTERN extern
(84.6 %, 31598 bytes)
55c55
< #   define BZ_EXTERN extern
---
>      
55c55
< #   define BZ_EXTERN extern
---
> #    BZ_EXTERN extern
55c55
< #   define BZ_EXTERN extern
---
> #     extern
55c55
< #   define BZ_EXTERN extern
---
> #    BZ_EXTERN 
55c55
< #   define BZ_EXTERN extern
---
> #     
55c55
< #   define BZ_EXTERN extern
---
> #    BZ_EXTERN extern
60c60
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
>  int BZ_API(BZ2_bzCompressInit) ( 
55c55
< #   define BZ_EXTERN extern
---
> #     extern
60c60
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
>  int BZ_API(BZ2_bzCompressInit) ( 
55c55
< #   define BZ_EXTERN extern
---
> #    BZ_EXTERN 
60c60
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
>  int BZ_API(BZ2_bzCompressInit) ( 
55c55
< #   define BZ_EXTERN extern
---
> #     
60c60
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
>  int BZ_API(BZ2_bzCompressInit) ( 
55c55
< #   define BZ_EXTERN extern
---
> #   define  extern
55c55
< #   define BZ_EXTERN extern
---
> #   define  
55c55
< #   define BZ_EXTERN extern
---
> #   define  extern
60c60
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
>  int BZ_API(BZ2_bzCompressInit) ( 
55c55
< #   define BZ_EXTERN extern
---
> #   define  
60c60
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
>  int BZ_API(BZ2_bzCompressInit) ( 
55c55
< #   define BZ_EXTERN extern
---
> #   define  extern
60c60
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzCompressInit) ( 
55c55
< #   define BZ_EXTERN extern
---
> #   define  
60c60
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzCompressInit) ( 
55c55
< #   define BZ_EXTERN extern
---
> #   define  extern
60c60
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
>   BZ_API(BZ2_bzCompressInit) ( 
55c55
< #   define BZ_EXTERN extern
---
> #   define  
60c60
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
>   BZ_API(BZ2_bzCompressInit) ( 
55c55
< #   define BZ_EXTERN extern
---
> #   define BZ_EXTERN 
55c55
< #   define BZ_EXTERN extern
---
> #   define BZ_EXTERN 
60c60
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
>  int BZ_API(BZ2_bzCompressInit) ( 
(84.6 %, 31592 bytes)
60c60
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
>  int BZ_API(BZ2_bzCompressInit) ( 
60c60
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
>   BZ_API(BZ2_bzCompressInit) ( 
(84.6 %, 31583 bytes)
60c60
<  int BZ_API(BZ2_bzCompressInit) ( 
---
>   BZ_API(BZ2_bzCompressInit) ( 
60c60
<  int BZ_API(BZ2_bzCompressInit) ( 
---
>   (BZ2_bzCompressInit) ( 
60c60
<  int BZ_API(BZ2_bzCompressInit) ( 
---
>   BZ_APIBZ2_bzCompressInit) ( 
60c60
<  int BZ_API(BZ2_bzCompressInit) ( 
---
>   BZ2_bzCompressInit) ( 
(84.6 %, 31580 bytes)
60c60
<   BZ_API(BZ2_bzCompressInit) ( 
---
>   (BZ2_bzCompressInit) ( 
60c60
<   BZ_API(BZ2_bzCompressInit) ( 
---
>   BZ2_bzCompressInit) ( 
60c60
<   BZ_API(BZ2_bzCompressInit) ( 
---
>   () ( 
60c60
<   BZ_API(BZ2_bzCompressInit) ( 
---
>   ) ( 
60c60
<   BZ_API(BZ2_bzCompressInit) ( 
---
>   (BZ2_bzCompressInit ( 
60c60
<   BZ_API(BZ2_bzCompressInit) ( 
---
>   BZ2_bzCompressInit ( 
(84.6 %, 31574 bytes)
60c60
<   (BZ2_bzCompressInit) ( 
---
>   BZ2_bzCompressInit) ( 
60c60
<   (BZ2_bzCompressInit) ( 
---
>   ) ( 
60c60
<   (BZ2_bzCompressInit) ( 
---
>   BZ2_bzCompressInit ( 
60c60
<   (BZ2_bzCompressInit) ( 
---
>    ( 
60c60
<   (BZ2_bzCompressInit) ( 
---
>   BZ2_bzCompressInit)  
60c60
<   (BZ2_bzCompressInit) ( 
---
>   )  
60c60
<   (BZ2_bzCompressInit) ( 
---
>   BZ2_bzCompressInit  
60c60
<   (BZ2_bzCompressInit) ( 
---
>     
60c60
<   (BZ2_bzCompressInit) ( 
---
>   () ( 
60c60
<   (BZ2_bzCompressInit) ( 
---
>   ( ( 
60c60
<   (BZ2_bzCompressInit) ( 
---
>   ()  
60c60
<   (BZ2_bzCompressInit) ( 
---
>   (  
60,61c60,61
<   (BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
---
>   () ( 
>       * strm, 
60,61c60,61
<   (BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
---
>   ( ( 
>       * strm, 
60,61c60,61
<   (BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
---
>   ()  
>       * strm, 
60,61c60,61
<   (BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
---
>   (  
>       * strm, 
60c60
<   (BZ2_bzCompressInit) ( 
---
>   (BZ2_bzCompressInit ( 
60c60
<   (BZ2_bzCompressInit) ( 
---
>   (BZ2_bzCompressInit  
60,61c60,61
<   (BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
---
>   (BZ2_bzCompressInit ( 
>       * strm, 
60,61c60,61
<   (BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
---
>   (BZ2_bzCompressInit  
>       * strm, 
60,61c60,61
<   (BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
---
>   (BZ2_bzCompressInit ( 
>       bz_stream strm, 
60,61c60,61
<   (BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
---
>   (BZ2_bzCompressInit  
>       bz_stream strm, 
60,61c60,61
<   (BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
---
>   (BZ2_bzCompressInit ( 
>        strm, 
(84.6 %, 31572 bytes)
60,61c60,61
<   BZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
>    ( 
>       * strm, 
60,61c60,61
<   BZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
>     
>       * strm, 
60,61c60,61
<   BZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
>    ( 
>       bz_stream strm, 
60,61c60,61
<   BZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
>     
>       bz_stream strm, 
60,61c60,61
<   BZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
>    ( 
>        strm, 
60,61c60,61
<   BZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
>     
>        strm, 
60c60
<   BZ2_bzCompressInit ( 
---
>   BZ2_bzCompressInit  
60,61c60,61
<   BZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
>   BZ2_bzCompressInit  
>       * strm, 
60,61c60,61
<   BZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
>   BZ2_bzCompressInit  
>       bz_stream strm, 
60,61c60,61
<   BZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
>   BZ2_bzCompressInit  
>        strm, 
60,61c60,61
<   BZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
>   BZ2_bzCompressInit  
>       bz_stream* , 
60,61c60,61
<   BZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
>   BZ2_bzCompressInit  
>       * , 
60,61c60,61
<   BZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
>   BZ2_bzCompressInit  
>       bz_stream , 
60,61c60,61
<   BZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
>   BZ2_bzCompressInit  
>        , 
61c61
<       bz_stream* strm, 
---
>       * strm, 
61c61
<       bz_stream* strm, 
---
>        strm, 
61c61
<       bz_stream* strm, 
---
>       * , 
61c61
<       bz_stream* strm, 
---
>        , 
61c61
<       bz_stream* strm, 
---
>       * strm 
61c61
<       bz_stream* strm, 
---
>        strm 
61c61
<       bz_stream* strm, 
---
>       *  
61c61
<       bz_stream* strm, 
---
>         
61c61
<       bz_stream* strm, 
---
>       bz_stream strm, 
61c61
<       bz_stream* strm, 
---
>       bz_stream , 
61c61
<       bz_stream* strm, 
---
>       bz_stream strm 
61c61
<       bz_stream* strm, 
---
>       bz_stream  
61,62c61,62
<       bz_stream* strm, 
<       int        blockSize100k, 
---
>       bz_stream strm, 
>               blockSize100k, 
61,62c61,62
<       bz_stream* strm, 
<       int        blockSize100k, 
---
>       bz_stream , 
>               blockSize100k, 
61,62c61,62
<       bz_stream* strm, 
<       int        blockSize100k, 
---
>       bz_stream strm 
>               blockSize100k, 
61,62c61,62
<       bz_stream* strm, 
<       int        blockSize100k, 
---
>       bz_stream  
>               blockSize100k, 
61c61
<       bz_stream* strm, 
---
>       bz_stream* , 
61c61
<       bz_stream* strm, 
---
>       bz_stream*  
61,62c61,62
<       bz_stream* strm, 
<       int        blockSize100k, 
---
>       bz_stream* , 
>               blockSize100k, 
61,62c61,62
<       bz_stream* strm, 
<       int        blockSize100k, 
---
>       bz_stream*  
>               blockSize100k, 
61,62c61,62
<       bz_stream* strm, 
<       int        blockSize100k, 
---
>       bz_stream* , 
>       int        , 
61,62c61,62
<       bz_stream* strm, 
<       int        blockSize100k, 
---
>       bz_stream*  
>       int        , 
(84.6 %, 31568 bytes)
61c61
<       bz_stream* , 
---
>       bz_stream*  
61,62c61,62
<       bz_stream* , 
<       int        blockSize100k, 
---
>       bz_stream*  
>               blockSize100k, 
61,62c61,62
<       bz_stream* , 
<       int        blockSize100k, 
---
>       bz_stream*  
>       int        , 
61,62c61,62
<       bz_stream* , 
<       int        blockSize100k, 
---
>       bz_stream*  
>               , 
61,62c61,62
<       bz_stream* , 
<       int        blockSize100k, 
---
>       bz_stream*  
>       int        blockSize100k 
61,62c61,62
<       bz_stream* , 
<       int        blockSize100k, 
---
>       bz_stream*  
>               blockSize100k 
61,62c61,62
<       bz_stream* , 
<       int        blockSize100k, 
---
>       bz_stream*  
>       int         
61,62c61,62
<       bz_stream* , 
<       int        blockSize100k, 
---
>       bz_stream*  
>                
62c62
<       int        blockSize100k, 
---
>               blockSize100k, 
62c62
<       int        blockSize100k, 
---
>               , 
62c62
<       int        blockSize100k, 
---
>               blockSize100k 
62c62
<       int        blockSize100k, 
---
>                
62,63c62,63
<       int        blockSize100k, 
<       int        verbosity, 
---
>               blockSize100k, 
>               verbosity, 
62,63c62,63
<       int        blockSize100k, 
<       int        verbosity, 
---
>               , 
>               verbosity, 
62,63c62,63
<       int        blockSize100k, 
<       int        verbosity, 
---
>               blockSize100k 
>               verbosity, 
62,63c62,63
<       int        blockSize100k, 
<       int        verbosity, 
---
>                
>               verbosity, 
62c62
<       int        blockSize100k, 
---
>       int        , 
62c62
<       int        blockSize100k, 
---
>       int         
62,63c62,63
<       int        blockSize100k, 
<       int        verbosity, 
---
>       int        , 
>               verbosity, 
62,63c62,63
<       int        blockSize100k, 
<       int        verbosity, 
---
>       int         
>               verbosity, 
62,63c62,63
<       int        blockSize100k, 
<       int        verbosity, 
---
>       int        , 
>       int        , 
(84.6 %, 31555 bytes)
62c62
<       int        , 
---
>       int         
62,63c62,63
<       int        , 
<       int        verbosity, 
---
>       int         
>               verbosity, 
61a62
>       int         
63d63
<       int        verbosity, 
62,63c62,63
<       int        , 
<       int        verbosity, 
---
>       int         
>               , 
62,63c62,63
<       int        , 
<       int        verbosity, 
---
>       int         
>       int        verbosity 
62,63c62,63
<       int        , 
<       int        verbosity, 
---
>       int         
>               verbosity 
62,63c62,63
<       int        , 
<       int        verbosity, 
---
>       int         
>       int         
62,63c62,63
<       int        , 
<       int        verbosity, 
---
>       int         
>                
63c63
<       int        verbosity, 
---
>               verbosity, 
63c63
<       int        verbosity, 
---
>               , 
63c63
<       int        verbosity, 
---
>               verbosity 
63c63
<       int        verbosity, 
---
>                
63,64c63,64
<       int        verbosity, 
<       int        workFactor 
---
>               verbosity, 
>               workFactor 
63,64c63,64
<       int        verbosity, 
<       int        workFactor 
---
>               , 
>               workFactor 
63,64c63,64
<       int        verbosity, 
<       int        workFactor 
---
>               verbosity 
>               workFactor 
63,64c63,64
<       int        verbosity, 
<       int        workFactor 
---
>                
>               workFactor 
63c63
<       int        verbosity, 
---
>       int        , 
63c63
<       int        verbosity, 
---
>       int         
63,64c63,64
<       int        verbosity, 
<       int        workFactor 
---
>       int        , 
>               workFactor 
63,64c63,64
<       int        verbosity, 
<       int        workFactor 
---
>       int         
>               workFactor 
63,64c63,64
<       int        verbosity, 
<       int        workFactor 
---
>       int        , 
>       int         
(84.6 %, 31546 bytes)
63c63
<       int        , 
---
>       int         
63,64c63,64
<       int        , 
<       int        workFactor 
---
>       int         
>               workFactor 
63,64c63,64
<       int        , 
<       int        workFactor 
---
>       int         
>       int         
63,64c63,64
<       int        , 
<       int        workFactor 
---
>       int         
>                
63c63
<       int        , 
---
>       int         
65c65
<    );
---
>    ;
63,65c63,65
<       int        , 
<       int        workFactor 
<    );
---
>       int         
>               workFactor 
>    ;
63,65c63,65
<       int        , 
<       int        workFactor 
<    );
---
>       int         
>       int         
>    ;
63,65c63,65
<       int        , 
<       int        workFactor 
<    );
---
>       int         
>                
>    ;
64c64
<       int        workFactor 
---
>               workFactor 
64c64
<       int        workFactor 
---
>                
64,65c64,65
<       int        workFactor 
<    );
---
>               workFactor 
>    ;
64,65c64,65
<       int        workFactor 
<    );
---
>                
>    ;
64,65c64,65
<       int        workFactor 
<    );
---
>               workFactor 
>    )
64,65c64,65
<       int        workFactor 
<    );
---
>                
>    )
64,65c64,65
<       int        workFactor 
<    );
---
>               workFactor 
>    
64,65c64,65
<       int        workFactor 
<    );
---
>                
>    
64c64
<       int        workFactor 
---
>       int         
64,65c64,65
<       int        workFactor 
<    );
---
>       int         
>    ;
64,65c64,65
<       int        workFactor 
<    );
---
>       int         
>    )
64,65c64,65
<       int        workFactor 
<    );
---
>       int         
>    
64c64
<       int        workFactor 
---
>       int         
67c67
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>  int BZ_API(BZ2_bzCompress) ( 
(84.6 %, 31536 bytes)
65c65
<    );
---
>    ;
65c65
<    );
---
>    
65c65
<    );
---
>    ;
67c67
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>  int BZ_API(BZ2_bzCompress) ( 
65c65
<    );
---
>    
67c67
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>  int BZ_API(BZ2_bzCompress) ( 
65c65
<    );
---
>    ;
67c67
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzCompress) ( 
65c65
<    );
---
>    
67c67
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzCompress) ( 
65c65
<    );
---
>    ;
67c67
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>   BZ_API(BZ2_bzCompress) ( 
65c65
<    );
---
>    
67c67
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>   BZ_API(BZ2_bzCompress) ( 
65c65
<    );
---
>    )
65c65
<    );
---
>    )
67c67
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>  int BZ_API(BZ2_bzCompress) ( 
65c65
<    );
---
>    )
67c67
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzCompress) ( 
65c65
<    );
---
>    )
67c67
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>   BZ_API(BZ2_bzCompress) ( 
65c65
<    );
---
>    )
67c67
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
> BZ_EXTERN int (BZ2_bzCompress) ( 
65c65
<    );
---
>    )
67c67
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>  int (BZ2_bzCompress) ( 
65c65
<    );
---
>    )
67c67
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
> BZ_EXTERN  (BZ2_bzCompress) ( 
65c65
<    );
---
>    )
67c67
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>   (BZ2_bzCompress) ( 
67c67
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>  int BZ_API(BZ2_bzCompress) ( 
67c67
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>   BZ_API(BZ2_bzCompress) ( 
67c67
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>  int (BZ2_bzCompress) ( 
(84.6 %, 31527 bytes)
67c67
<  int BZ_API(BZ2_bzCompress) ( 
---
>   BZ_API(BZ2_bzCompress) ( 
67c67
<  int BZ_API(BZ2_bzCompress) ( 
---
>   (BZ2_bzCompress) ( 
(84.6 %, 31524 bytes)
67c67
<   BZ_API(BZ2_bzCompress) ( 
---
>   (BZ2_bzCompress) ( 
67c67
<   BZ_API(BZ2_bzCompress) ( 
---
>   BZ2_bzCompress) ( 
67c67
<   BZ_API(BZ2_bzCompress) ( 
---
>   () ( 
67c67
<   BZ_API(BZ2_bzCompress) ( 
---
>   ) ( 
67c67
<   BZ_API(BZ2_bzCompress) ( 
---
>   (BZ2_bzCompress ( 
67c67
<   BZ_API(BZ2_bzCompress) ( 
---
>   BZ2_bzCompress ( 
(84.6 %, 31518 bytes)
67c67
<   (BZ2_bzCompress) ( 
---
>   BZ2_bzCompress) ( 
67c67
<   (BZ2_bzCompress) ( 
---
>   ) ( 
67c67
<   (BZ2_bzCompress) ( 
---
>   BZ2_bzCompress ( 
67c67
<   (BZ2_bzCompress) ( 
---
>    ( 
67c67
<   (BZ2_bzCompress) ( 
---
>   BZ2_bzCompress)  
67c67
<   (BZ2_bzCompress) ( 
---
>   )  
67c67
<   (BZ2_bzCompress) ( 
---
>   BZ2_bzCompress  
67c67
<   (BZ2_bzCompress) ( 
---
>     
67c67
<   (BZ2_bzCompress) ( 
---
>   () ( 
67c67
<   (BZ2_bzCompress) ( 
---
>   ( ( 
67c67
<   (BZ2_bzCompress) ( 
---
>   ()  
67c67
<   (BZ2_bzCompress) ( 
---
>   (  
67,68c67,68
<   (BZ2_bzCompress) ( 
<       bz_stream* strm, 
---
>   () ( 
>       * strm, 
67,68c67,68
<   (BZ2_bzCompress) ( 
<       bz_stream* strm, 
---
>   ( ( 
>       * strm, 
67,68c67,68
<   (BZ2_bzCompress) ( 
<       bz_stream* strm, 
---
>   ()  
>       * strm, 
67,68c67,68
<   (BZ2_bzCompress) ( 
<       bz_stream* strm, 
---
>   (  
>       * strm, 
67c67
<   (BZ2_bzCompress) ( 
---
>   (BZ2_bzCompress ( 
67c67
<   (BZ2_bzCompress) ( 
---
>   (BZ2_bzCompress  
67,68c67,68
<   (BZ2_bzCompress) ( 
<       bz_stream* strm, 
---
>   (BZ2_bzCompress ( 
>       * strm, 
67,68c67,68
<   (BZ2_bzCompress) ( 
<       bz_stream* strm, 
---
>   (BZ2_bzCompress  
>       * strm, 
67,68c67,68
<   (BZ2_bzCompress) ( 
<       bz_stream* strm, 
---
>   (BZ2_bzCompress ( 
>       bz_stream strm, 
67,68c67,68
<   (BZ2_bzCompress) ( 
<       bz_stream* strm, 
---
>   (BZ2_bzCompress  
>       bz_stream strm, 
(84.6 %, 31516 bytes)
67,68c67,68
<   BZ2_bzCompress ( 
<       bz_stream* strm, 
---
>    ( 
>       * strm, 
67,68c67,68
<   BZ2_bzCompress ( 
<       bz_stream* strm, 
---
>     
>       * strm, 
67,68c67,68
<   BZ2_bzCompress ( 
<       bz_stream* strm, 
---
>    ( 
>       bz_stream strm, 
67,68c67,68
<   BZ2_bzCompress ( 
<       bz_stream* strm, 
---
>     
>       bz_stream strm, 
67,68c67,68
<   BZ2_bzCompress ( 
<       bz_stream* strm, 
---
>    ( 
>        strm, 
67,68c67,68
<   BZ2_bzCompress ( 
<       bz_stream* strm, 
---
>     
>        strm, 
67c67
<   BZ2_bzCompress ( 
---
>   BZ2_bzCompress  
67,68c67,68
<   BZ2_bzCompress ( 
<       bz_stream* strm, 
---
>   BZ2_bzCompress  
>       * strm, 
67,68c67,68
<   BZ2_bzCompress ( 
<       bz_stream* strm, 
---
>   BZ2_bzCompress  
>       bz_stream strm, 
67,68c67,68
<   BZ2_bzCompress ( 
<       bz_stream* strm, 
---
>   BZ2_bzCompress  
>        strm, 
67,68c67,68
<   BZ2_bzCompress ( 
<       bz_stream* strm, 
---
>   BZ2_bzCompress  
>       bz_stream* , 
67,68c67,68
<   BZ2_bzCompress ( 
<       bz_stream* strm, 
---
>   BZ2_bzCompress  
>       * , 
67,68c67,68
<   BZ2_bzCompress ( 
<       bz_stream* strm, 
---
>   BZ2_bzCompress  
>       bz_stream , 
67,68c67,68
<   BZ2_bzCompress ( 
<       bz_stream* strm, 
---
>   BZ2_bzCompress  
>        , 
68c68
<       bz_stream* strm, 
---
>       * strm, 
68c68
<       bz_stream* strm, 
---
>        strm, 
68c68
<       bz_stream* strm, 
---
>       * , 
68c68
<       bz_stream* strm, 
---
>        , 
68c68
<       bz_stream* strm, 
---
>       * strm 
68c68
<       bz_stream* strm, 
---
>        strm 
68c68
<       bz_stream* strm, 
---
>       *  
68c68
<       bz_stream* strm, 
---
>         
68c68
<       bz_stream* strm, 
---
>       bz_stream strm, 
68c68
<       bz_stream* strm, 
---
>       bz_stream , 
68c68
<       bz_stream* strm, 
---
>       bz_stream strm 
68c68
<       bz_stream* strm, 
---
>       bz_stream  
68,69c68,69
<       bz_stream* strm, 
<       int action 
---
>       bz_stream strm, 
>        action 
68,69c68,69
<       bz_stream* strm, 
<       int action 
---
>       bz_stream , 
>        action 
68,69c68,69
<       bz_stream* strm, 
<       int action 
---
>       bz_stream strm 
>        action 
68,69c68,69
<       bz_stream* strm, 
<       int action 
---
>       bz_stream  
>        action 
68c68
<       bz_stream* strm, 
---
>       bz_stream* , 
68c68
<       bz_stream* strm, 
---
>       bz_stream*  
68,69c68,69
<       bz_stream* strm, 
<       int action 
---
>       bz_stream* , 
>        action 
68,69c68,69
<       bz_stream* strm, 
<       int action 
---
>       bz_stream*  
>        action 
68,69c68,69
<       bz_stream* strm, 
<       int action 
---
>       bz_stream* , 
>       int  
(84.6 %, 31512 bytes)
68c68
<       bz_stream* , 
---
>       bz_stream*  
68,69c68,69
<       bz_stream* , 
<       int action 
---
>       bz_stream*  
>        action 
68,69c68,69
<       bz_stream* , 
<       int action 
---
>       bz_stream*  
>       int  
68,69c68,69
<       bz_stream* , 
<       int action 
---
>       bz_stream*  
>         
68c68
<       bz_stream* , 
---
>       bz_stream*  
70c70
<    );
---
>    ;
68,70c68,70
<       bz_stream* , 
<       int action 
<    );
---
>       bz_stream*  
>        action 
>    ;
68,70c68,70
<       bz_stream* , 
<       int action 
<    );
---
>       bz_stream*  
>       int  
>    ;
68,70c68,70
<       bz_stream* , 
<       int action 
<    );
---
>       bz_stream*  
>         
>    ;
69c69
<       int action 
---
>        action 
69c69
<       int action 
---
>         
69,70c69,70
<       int action 
<    );
---
>        action 
>    ;
69,70c69,70
<       int action 
<    );
---
>         
>    ;
69,70c69,70
<       int action 
<    );
---
>        action 
>    )
69,70c69,70
<       int action 
<    );
---
>         
>    )
69,70c69,70
<       int action 
<    );
---
>        action 
>    
69,70c69,70
<       int action 
<    );
---
>         
>    
69c69
<       int action 
---
>       int  
69,70c69,70
<       int action 
<    );
---
>       int  
>    ;
69,70c69,70
<       int action 
<    );
---
>       int  
>    )
69,70c69,70
<       int action 
<    );
---
>       int  
>    
69c69
<       int action 
---
>       int  
72c72
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
>  int BZ_API(BZ2_bzCompressEnd) ( 
(84.6 %, 31506 bytes)
70c70
<    );
---
>    ;
70c70
<    );
---
>    
70c70
<    );
---
>    ;
72c72
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
>  int BZ_API(BZ2_bzCompressEnd) ( 
70c70
<    );
---
>    
72c72
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
>  int BZ_API(BZ2_bzCompressEnd) ( 
70c70
<    );
---
>    ;
72c72
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzCompressEnd) ( 
70c70
<    );
---
>    
72c72
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzCompressEnd) ( 
70c70
<    );
---
>    ;
72c72
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
>   BZ_API(BZ2_bzCompressEnd) ( 
70c70
<    );
---
>    
72c72
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
>   BZ_API(BZ2_bzCompressEnd) ( 
70c70
<    );
---
>    )
70c70
<    );
---
>    )
72c72
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
>  int BZ_API(BZ2_bzCompressEnd) ( 
70c70
<    );
---
>    )
72c72
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzCompressEnd) ( 
70c70
<    );
---
>    )
72c72
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
>   BZ_API(BZ2_bzCompressEnd) ( 
70c70
<    );
---
>    )
72c72
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
> BZ_EXTERN int (BZ2_bzCompressEnd) ( 
70c70
<    );
---
>    )
72c72
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
>  int (BZ2_bzCompressEnd) ( 
70c70
<    );
---
>    )
72c72
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
> BZ_EXTERN  (BZ2_bzCompressEnd) ( 
70c70
<    );
---
>    )
72c72
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
>   (BZ2_bzCompressEnd) ( 
72c72
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
>  int BZ_API(BZ2_bzCompressEnd) ( 
72c72
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
>   BZ_API(BZ2_bzCompressEnd) ( 
72c72
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
>  int (BZ2_bzCompressEnd) ( 
(84.6 %, 31497 bytes)
72c72
<  int BZ_API(BZ2_bzCompressEnd) ( 
---
>   BZ_API(BZ2_bzCompressEnd) ( 
72c72
<  int BZ_API(BZ2_bzCompressEnd) ( 
---
>   (BZ2_bzCompressEnd) ( 
72c72
<  int BZ_API(BZ2_bzCompressEnd) ( 
---
>   BZ_APIBZ2_bzCompressEnd) ( 
(84.6 %, 31494 bytes)
72c72
<   BZ_API(BZ2_bzCompressEnd) ( 
---
>   (BZ2_bzCompressEnd) ( 
72c72
<   BZ_API(BZ2_bzCompressEnd) ( 
---
>   BZ2_bzCompressEnd) ( 
72c72
<   BZ_API(BZ2_bzCompressEnd) ( 
---
>   () ( 
72c72
<   BZ_API(BZ2_bzCompressEnd) ( 
---
>   ) ( 
72c72
<   BZ_API(BZ2_bzCompressEnd) ( 
---
>   (BZ2_bzCompressEnd ( 
72c72
<   BZ_API(BZ2_bzCompressEnd) ( 
---
>   BZ2_bzCompressEnd ( 
(84.6 %, 31488 bytes)
72c72
<   (BZ2_bzCompressEnd) ( 
---
>   BZ2_bzCompressEnd) ( 
72c72
<   (BZ2_bzCompressEnd) ( 
---
>   ) ( 
72c72
<   (BZ2_bzCompressEnd) ( 
---
>   BZ2_bzCompressEnd ( 
72c72
<   (BZ2_bzCompressEnd) ( 
---
>    ( 
72c72
<   (BZ2_bzCompressEnd) ( 
---
>   BZ2_bzCompressEnd)  
72c72
<   (BZ2_bzCompressEnd) ( 
---
>   )  
72c72
<   (BZ2_bzCompressEnd) ( 
---
>   BZ2_bzCompressEnd  
72c72
<   (BZ2_bzCompressEnd) ( 
---
>     
72c72
<   (BZ2_bzCompressEnd) ( 
---
>   () ( 
72c72
<   (BZ2_bzCompressEnd) ( 
---
>   ( ( 
72c72
<   (BZ2_bzCompressEnd) ( 
---
>   ()  
72c72
<   (BZ2_bzCompressEnd) ( 
---
>   (  
72,73c72,73
<   (BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
---
>   () ( 
>       * strm 
72,73c72,73
<   (BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
---
>   ( ( 
>       * strm 
72,73c72,73
<   (BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
---
>   ()  
>       * strm 
72,73c72,73
<   (BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
---
>   (  
>       * strm 
(84.6 %, 31486 bytes)
72,73c72,73
<   BZ2_bzCompressEnd ( 
<       bz_stream* strm 
---
>    ( 
>       * strm 
72,73c72,73
<   BZ2_bzCompressEnd ( 
<       bz_stream* strm 
---
>     
>       * strm 
72,73c72,73
<   BZ2_bzCompressEnd ( 
<       bz_stream* strm 
---
>    ( 
>       bz_stream strm 
72,73c72,73
<   BZ2_bzCompressEnd ( 
<       bz_stream* strm 
---
>     
>       bz_stream strm 
72,73c72,73
<   BZ2_bzCompressEnd ( 
<       bz_stream* strm 
---
>    ( 
>        strm 
(84.6 %, 31460 bytes)
72,73c72,73
<    ( 
<       * strm 
---
>     
>       *  
72,73c72,73
<    ( 
<       * strm 
---
>     
>         
72c72
<    ( 
---
>     
74c74
<    );
---
>    ;
72,74c72,74
<    ( 
<       * strm 
<    );
---
>     
>        strm 
>    ;
(84.6 %, 31458 bytes)
73c73
<       * strm 
---
>        strm 
76c76
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
>  int BZ_API(BZ2_bzDecompressInit) ( 
73c73
<       * strm 
---
>         
76c76
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
>  int BZ_API(BZ2_bzDecompressInit) ( 
(84.7 %, 31448 bytes)
73c73
<        strm 
---
>         
76c76
<  int BZ_API(BZ2_bzDecompressInit) ( 
---
>  int (BZ2_bzDecompressInit) ( 
73,74c73,74
<        strm 
<    ;
---
>         
>    
76c76
<  int BZ_API(BZ2_bzDecompressInit) ( 
---
>  int (BZ2_bzDecompressInit) ( 
73c73
<        strm 
---
>         
76c76
<  int BZ_API(BZ2_bzDecompressInit) ( 
---
>   (BZ2_bzDecompressInit) ( 
(84.7 %, 31438 bytes)
74c74
<    ;
---
>    
76c76
<  int (BZ2_bzDecompressInit) ( 
---
>  int () ( 
74c74
<    ;
---
>    
76c76
<  int (BZ2_bzDecompressInit) ( 
---
>   () ( 
74c74
<    ;
---
>    
76c76
<  int (BZ2_bzDecompressInit) ( 
---
>  int ) ( 
74c74
<    ;
---
>    
76c76
<  int (BZ2_bzDecompressInit) ( 
---
>   ) ( 
76c76
<  int (BZ2_bzDecompressInit) ( 
---
>   (BZ2_bzDecompressInit) ( 
76c76
<  int (BZ2_bzDecompressInit) ( 
---
>   BZ2_bzDecompressInit) ( 
76c76
<  int (BZ2_bzDecompressInit) ( 
---
>   () ( 
76c76
<  int (BZ2_bzDecompressInit) ( 
---
>   ) ( 
76c76
<  int (BZ2_bzDecompressInit) ( 
---
>   (BZ2_bzDecompressInit ( 
76c76
<  int (BZ2_bzDecompressInit) ( 
---
>   BZ2_bzDecompressInit ( 
(84.7 %, 31435 bytes)
76c76
<   (BZ2_bzDecompressInit) ( 
---
>   BZ2_bzDecompressInit) ( 
76c76
<   (BZ2_bzDecompressInit) ( 
---
>   ) ( 
76c76
<   (BZ2_bzDecompressInit) ( 
---
>   BZ2_bzDecompressInit ( 
76c76
<   (BZ2_bzDecompressInit) ( 
---
>    ( 
76c76
<   (BZ2_bzDecompressInit) ( 
---
>   BZ2_bzDecompressInit)  
76c76
<   (BZ2_bzDecompressInit) ( 
---
>   )  
76c76
<   (BZ2_bzDecompressInit) ( 
---
>   BZ2_bzDecompressInit  
76c76
<   (BZ2_bzDecompressInit) ( 
---
>     
76c76
<   (BZ2_bzDecompressInit) ( 
---
>   () ( 
76c76
<   (BZ2_bzDecompressInit) ( 
---
>   ( ( 
76c76
<   (BZ2_bzDecompressInit) ( 
---
>   ()  
76c76
<   (BZ2_bzDecompressInit) ( 
---
>   (  
76,77c76,77
<   (BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
---
>   () ( 
>        *strm, 
76,77c76,77
<   (BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
---
>   ( ( 
>        *strm, 
76,77c76,77
<   (BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
---
>   ()  
>        *strm, 
76,77c76,77
<   (BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
---
>   (  
>        *strm, 
76c76
<   (BZ2_bzDecompressInit) ( 
---
>   (BZ2_bzDecompressInit ( 
76c76
<   (BZ2_bzDecompressInit) ( 
---
>   (BZ2_bzDecompressInit  
76,77c76,77
<   (BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
---
>   (BZ2_bzDecompressInit ( 
>        *strm, 
76,77c76,77
<   (BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
---
>   (BZ2_bzDecompressInit  
>        *strm, 
76,77c76,77
<   (BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
---
>   (BZ2_bzDecompressInit ( 
>       bz_stream strm, 
76,77c76,77
<   (BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
---
>   (BZ2_bzDecompressInit  
>       bz_stream strm, 
(84.7 %, 31433 bytes)
76,77c76,77
<   BZ2_bzDecompressInit ( 
<       bz_stream *strm, 
---
>    ( 
>        *strm, 
76,77c76,77
<   BZ2_bzDecompressInit ( 
<       bz_stream *strm, 
---
>     
>        *strm, 
76,77c76,77
<   BZ2_bzDecompressInit ( 
<       bz_stream *strm, 
---
>    ( 
>       bz_stream strm, 
76,77c76,77
<   BZ2_bzDecompressInit ( 
<       bz_stream *strm, 
---
>     
>       bz_stream strm, 
76,77c76,77
<   BZ2_bzDecompressInit ( 
<       bz_stream *strm, 
---
>    ( 
>        strm, 
76,77c76,77
<   BZ2_bzDecompressInit ( 
<       bz_stream *strm, 
---
>     
>        strm, 
76c76
<   BZ2_bzDecompressInit ( 
---
>   BZ2_bzDecompressInit  
76,77c76,77
<   BZ2_bzDecompressInit ( 
<       bz_stream *strm, 
---
>   BZ2_bzDecompressInit  
>        *strm, 
76,77c76,77
<   BZ2_bzDecompressInit ( 
<       bz_stream *strm, 
---
>   BZ2_bzDecompressInit  
>       bz_stream strm, 
76,77c76,77
<   BZ2_bzDecompressInit ( 
<       bz_stream *strm, 
---
>   BZ2_bzDecompressInit  
>        strm, 
76,77c76,77
<   BZ2_bzDecompressInit ( 
<       bz_stream *strm, 
---
>   BZ2_bzDecompressInit  
>       bz_stream *, 
76,77c76,77
<   BZ2_bzDecompressInit ( 
<       bz_stream *strm, 
---
>   BZ2_bzDecompressInit  
>        *, 
76,77c76,77
<   BZ2_bzDecompressInit ( 
<       bz_stream *strm, 
---
>   BZ2_bzDecompressInit  
>       bz_stream , 
76,77c76,77
<   BZ2_bzDecompressInit ( 
<       bz_stream *strm, 
---
>   BZ2_bzDecompressInit  
>        , 
77c77
<       bz_stream *strm, 
---
>        *strm, 
77c77
<       bz_stream *strm, 
---
>        strm, 
77c77
<       bz_stream *strm, 
---
>        *, 
77c77
<       bz_stream *strm, 
---
>        , 
77c77
<       bz_stream *strm, 
---
>        *strm 
77c77
<       bz_stream *strm, 
---
>        strm 
77c77
<       bz_stream *strm, 
---
>        * 
77c77
<       bz_stream *strm, 
---
>         
77c77
<       bz_stream *strm, 
---
>       bz_stream strm, 
77c77
<       bz_stream *strm, 
---
>       bz_stream , 
77c77
<       bz_stream *strm, 
---
>       bz_stream strm 
77c77
<       bz_stream *strm, 
---
>       bz_stream  
77,78c77,78
<       bz_stream *strm, 
<       int       verbosity, 
---
>       bz_stream strm, 
>              verbosity, 
77,78c77,78
<       bz_stream *strm, 
<       int       verbosity, 
---
>       bz_stream , 
>              verbosity, 
77,78c77,78
<       bz_stream *strm, 
<       int       verbosity, 
---
>       bz_stream strm 
>              verbosity, 
77,78c77,78
<       bz_stream *strm, 
<       int       verbosity, 
---
>       bz_stream  
>              verbosity, 
77c77
<       bz_stream *strm, 
---
>       bz_stream *, 
77c77
<       bz_stream *strm, 
---
>       bz_stream * 
77,78c77,78
<       bz_stream *strm, 
<       int       verbosity, 
---
>       bz_stream *, 
>              verbosity, 
77,78c77,78
<       bz_stream *strm, 
<       int       verbosity, 
---
>       bz_stream * 
>              verbosity, 
77,78c77,78
<       bz_stream *strm, 
<       int       verbosity, 
---
>       bz_stream *, 
>       int       , 
(84.7 %, 31429 bytes)
77c77
<       bz_stream *, 
---
>       bz_stream * 
77,78c77,78
<       bz_stream *, 
<       int       verbosity, 
---
>       bz_stream * 
>              verbosity, 
77,78c77,78
<       bz_stream *, 
<       int       verbosity, 
---
>       bz_stream * 
>       int       , 
77,78c77,78
<       bz_stream *, 
<       int       verbosity, 
---
>       bz_stream * 
>              , 
77,78c77,78
<       bz_stream *, 
<       int       verbosity, 
---
>       bz_stream * 
>       int       verbosity 
77,78c77,78
<       bz_stream *, 
<       int       verbosity, 
---
>       bz_stream * 
>              verbosity 
77,78c77,78
<       bz_stream *, 
<       int       verbosity, 
---
>       bz_stream * 
>       int        
77,78c77,78
<       bz_stream *, 
<       int       verbosity, 
---
>       bz_stream * 
>               
78c78
<       int       verbosity, 
---
>              verbosity, 
78c78
<       int       verbosity, 
---
>              , 
78c78
<       int       verbosity, 
---
>              verbosity 
78c78
<       int       verbosity, 
---
>               
78,79c78,79
<       int       verbosity, 
<       int       small
---
>              verbosity, 
>              small
78,79c78,79
<       int       verbosity, 
<       int       small
---
>              , 
>              small
78,79c78,79
<       int       verbosity, 
<       int       small
---
>              verbosity 
>              small
78,79c78,79
<       int       verbosity, 
<       int       small
---
>               
>              small
78c78
<       int       verbosity, 
---
>       int       , 
78c78
<       int       verbosity, 
---
>       int        
78,79c78,79
<       int       verbosity, 
<       int       small
---
>       int       , 
>              small
78,79c78,79
<       int       verbosity, 
<       int       small
---
>       int        
>              small
78,79c78,79
<       int       verbosity, 
<       int       small
---
>       int       , 
>       int       
(84.7 %, 31420 bytes)
78c78
<       int       , 
---
>       int        
78,79c78,79
<       int       , 
<       int       small
---
>       int        
>              small
78,79c78,79
<       int       , 
<       int       small
---
>       int        
>       int       
78,79c78,79
<       int       , 
<       int       small
---
>       int        
>              
78c78
<       int       , 
---
>       int        
80c80
<    );
---
>    ;
78,80c78,80
<       int       , 
<       int       small
<    );
---
>       int        
>              small
>    ;
78,80c78,80
<       int       , 
<       int       small
<    );
---
>       int        
>       int       
>    ;
78,80c78,80
<       int       , 
<       int       small
<    );
---
>       int        
>              
>    ;
79c79
<       int       small
---
>              small
79c79
<       int       small
---
>              
79,80c79,80
<       int       small
<    );
---
>              small
>    ;
79,80c79,80
<       int       small
<    );
---
>              
>    ;
79,80c79,80
<       int       small
<    );
---
>              small
>    )
79,80c79,80
<       int       small
<    );
---
>              
>    )
79,80c79,80
<       int       small
<    );
---
>              small
>    
79,80c79,80
<       int       small
<    );
---
>              
>    
79c79
<       int       small
---
>       int       
79,80c79,80
<       int       small
<    );
---
>       int       
>    ;
79,80c79,80
<       int       small
<    );
---
>       int       
>    )
79,80c79,80
<       int       small
<    );
---
>       int       
>    
79c79
<       int       small
---
>       int       
82c82
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
>  int BZ_API(BZ2_bzDecompress) ( 
(84.7 %, 31415 bytes)
80c80
<    );
---
>    ;
80c80
<    );
---
>    
80c80
<    );
---
>    ;
82c82
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
>  int BZ_API(BZ2_bzDecompress) ( 
80c80
<    );
---
>    
82c82
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
>  int BZ_API(BZ2_bzDecompress) ( 
80c80
<    );
---
>    ;
82c82
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzDecompress) ( 
80c80
<    );
---
>    
82c82
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzDecompress) ( 
80c80
<    );
---
>    ;
82c82
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
>   BZ_API(BZ2_bzDecompress) ( 
80c80
<    );
---
>    
82c82
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
>   BZ_API(BZ2_bzDecompress) ( 
80c80
<    );
---
>    )
80c80
<    );
---
>    )
82c82
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
>  int BZ_API(BZ2_bzDecompress) ( 
80c80
<    );
---
>    )
82c82
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzDecompress) ( 
80c80
<    );
---
>    )
82c82
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
>   BZ_API(BZ2_bzDecompress) ( 
80c80
<    );
---
>    )
82c82
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
> BZ_EXTERN int (BZ2_bzDecompress) ( 
80c80
<    );
---
>    )
82c82
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
>  int (BZ2_bzDecompress) ( 
80c80
<    );
---
>    )
82c82
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
> BZ_EXTERN  (BZ2_bzDecompress) ( 
80c80
<    );
---
>    )
82c82
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
>   (BZ2_bzDecompress) ( 
82c82
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
>  int BZ_API(BZ2_bzDecompress) ( 
82c82
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
>   BZ_API(BZ2_bzDecompress) ( 
(84.7 %, 31406 bytes)
82c82
<  int BZ_API(BZ2_bzDecompress) ( 
---
>   BZ_API(BZ2_bzDecompress) ( 
82c82
<  int BZ_API(BZ2_bzDecompress) ( 
---
>   (BZ2_bzDecompress) ( 
82c82
<  int BZ_API(BZ2_bzDecompress) ( 
---
>   BZ_APIBZ2_bzDecompress) ( 
(84.7 %, 31403 bytes)
82c82
<   BZ_API(BZ2_bzDecompress) ( 
---
>   (BZ2_bzDecompress) ( 
82c82
<   BZ_API(BZ2_bzDecompress) ( 
---
>   BZ2_bzDecompress) ( 
82c82
<   BZ_API(BZ2_bzDecompress) ( 
---
>   () ( 
82c82
<   BZ_API(BZ2_bzDecompress) ( 
---
>   ) ( 
82c82
<   BZ_API(BZ2_bzDecompress) ( 
---
>   (BZ2_bzDecompress ( 
82c82
<   BZ_API(BZ2_bzDecompress) ( 
---
>   BZ2_bzDecompress ( 
(84.7 %, 31397 bytes)
82c82
<   (BZ2_bzDecompress) ( 
---
>   BZ2_bzDecompress) ( 
82c82
<   (BZ2_bzDecompress) ( 
---
>   ) ( 
82c82
<   (BZ2_bzDecompress) ( 
---
>   BZ2_bzDecompress ( 
82c82
<   (BZ2_bzDecompress) ( 
---
>    ( 
82c82
<   (BZ2_bzDecompress) ( 
---
>   BZ2_bzDecompress)  
82c82
<   (BZ2_bzDecompress) ( 
---
>   )  
82c82
<   (BZ2_bzDecompress) ( 
---
>   BZ2_bzDecompress  
82c82
<   (BZ2_bzDecompress) ( 
---
>     
82c82
<   (BZ2_bzDecompress) ( 
---
>   () ( 
82c82
<   (BZ2_bzDecompress) ( 
---
>   ( ( 
82c82
<   (BZ2_bzDecompress) ( 
---
>   ()  
82c82
<   (BZ2_bzDecompress) ( 
---
>   (  
82,83c82,83
<   (BZ2_bzDecompress) ( 
<       bz_stream* strm 
---
>   () ( 
>       * strm 
82,83c82,83
<   (BZ2_bzDecompress) ( 
<       bz_stream* strm 
---
>   ( ( 
>       * strm 
82,83c82,83
<   (BZ2_bzDecompress) ( 
<       bz_stream* strm 
---
>   ()  
>       * strm 
82,83c82,83
<   (BZ2_bzDecompress) ( 
<       bz_stream* strm 
---
>   (  
>       * strm 
(84.7 %, 31395 bytes)
82,83c82,83
<   BZ2_bzDecompress ( 
<       bz_stream* strm 
---
>    ( 
>       * strm 
82,83c82,83
<   BZ2_bzDecompress ( 
<       bz_stream* strm 
---
>     
>       * strm 
82,83c82,83
<   BZ2_bzDecompress ( 
<       bz_stream* strm 
---
>    ( 
>       bz_stream strm 
82,83c82,83
<   BZ2_bzDecompress ( 
<       bz_stream* strm 
---
>     
>       bz_stream strm 
82,83c82,83
<   BZ2_bzDecompress ( 
<       bz_stream* strm 
---
>    ( 
>        strm 
(84.7 %, 31370 bytes)
82,83c82,83
<    ( 
<       * strm 
---
>     
>       *  
82,83c82,83
<    ( 
<       * strm 
---
>     
>         
82c82
<    ( 
---
>     
84c84
<    );
---
>    ;
82,84c82,84
<    ( 
<       * strm 
<    );
---
>     
>        strm 
>    ;
82,84c82,84
<    ( 
<       * strm 
<    );
---
>     
>       *  
>    ;
82,84c82,84
<    ( 
<       * strm 
<    );
---
>     
>         
>    ;
(84.7 %, 31368 bytes)
83c83
<       * strm 
---
>        strm 
86c86
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
>  int BZ_API(BZ2_bzDecompressEnd) ( 
83c83
<       * strm 
---
>         
86c86
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
>  int BZ_API(BZ2_bzDecompressEnd) ( 
83,84c83,84
<       * strm 
<    ;
---
>        strm 
>    
86c86
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
>  int BZ_API(BZ2_bzDecompressEnd) ( 
83,84c83,84
<       * strm 
<    ;
---
>         
>    
86c86
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
>  int BZ_API(BZ2_bzDecompressEnd) ( 
(84.7 %, 31358 bytes)
83c83
<        strm 
---
>         
86c86
<  int BZ_API(BZ2_bzDecompressEnd) ( 
---
>  int (BZ2_bzDecompressEnd) ( 
83,84c83,84
<        strm 
<    ;
---
>         
>    
86c86
<  int BZ_API(BZ2_bzDecompressEnd) ( 
---
>  int (BZ2_bzDecompressEnd) ( 
(84.7 %, 31348 bytes)
84c84
<    ;
---
>    
86c86
<  int (BZ2_bzDecompressEnd) ( 
---
>  int () ( 
84c84
<    ;
---
>    
86c86
<  int (BZ2_bzDecompressEnd) ( 
---
>   () ( 
84c84
<    ;
---
>    
86c86
<  int (BZ2_bzDecompressEnd) ( 
---
>  int ) ( 
84c84
<    ;
---
>    
86c86
<  int (BZ2_bzDecompressEnd) ( 
---
>   ) ( 
86c86
<  int (BZ2_bzDecompressEnd) ( 
---
>   (BZ2_bzDecompressEnd) ( 
86c86
<  int (BZ2_bzDecompressEnd) ( 
---
>   BZ2_bzDecompressEnd) ( 
86c86
<  int (BZ2_bzDecompressEnd) ( 
---
>   () ( 
86c86
<  int (BZ2_bzDecompressEnd) ( 
---
>   ) ( 
86c86
<  int (BZ2_bzDecompressEnd) ( 
---
>   (BZ2_bzDecompressEnd ( 
86c86
<  int (BZ2_bzDecompressEnd) ( 
---
>   BZ2_bzDecompressEnd ( 
(84.7 %, 31345 bytes)
86c86
<   (BZ2_bzDecompressEnd) ( 
---
>   BZ2_bzDecompressEnd) ( 
86c86
<   (BZ2_bzDecompressEnd) ( 
---
>   ) ( 
86c86
<   (BZ2_bzDecompressEnd) ( 
---
>   BZ2_bzDecompressEnd ( 
86c86
<   (BZ2_bzDecompressEnd) ( 
---
>    ( 
86c86
<   (BZ2_bzDecompressEnd) ( 
---
>   BZ2_bzDecompressEnd)  
86c86
<   (BZ2_bzDecompressEnd) ( 
---
>   )  
86c86
<   (BZ2_bzDecompressEnd) ( 
---
>   BZ2_bzDecompressEnd  
86c86
<   (BZ2_bzDecompressEnd) ( 
---
>     
86c86
<   (BZ2_bzDecompressEnd) ( 
---
>   () ( 
86c86
<   (BZ2_bzDecompressEnd) ( 
---
>   ( ( 
86c86
<   (BZ2_bzDecompressEnd) ( 
---
>   ()  
86c86
<   (BZ2_bzDecompressEnd) ( 
---
>   (  
86,87c86,87
<   (BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
---
>   () ( 
>        *strm 
86,87c86,87
<   (BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
---
>   ( ( 
>        *strm 
86,87c86,87
<   (BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
---
>   ()  
>        *strm 
86,87c86,87
<   (BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
---
>   (  
>        *strm 
(84.7 %, 31343 bytes)
86,87c86,87
<   BZ2_bzDecompressEnd ( 
<       bz_stream *strm 
---
>    ( 
>        *strm 
86,87c86,87
<   BZ2_bzDecompressEnd ( 
<       bz_stream *strm 
---
>     
>        *strm 
86,87c86,87
<   BZ2_bzDecompressEnd ( 
<       bz_stream *strm 
---
>    ( 
>       bz_stream strm 
86,87c86,87
<   BZ2_bzDecompressEnd ( 
<       bz_stream *strm 
---
>     
>       bz_stream strm 
86,87c86,87
<   BZ2_bzDecompressEnd ( 
<       bz_stream *strm 
---
>    ( 
>        strm 
(84.7 %, 31315 bytes)
86,87c86,87
<    ( 
<        *strm 
---
>     
>        * 
86,87c86,87
<    ( 
<        *strm 
---
>     
>         
86c86
<    ( 
---
>     
88c88
<    );
---
>    ;
86,88c86,88
<    ( 
<        *strm 
<    );
---
>     
>        strm 
>    ;
(84.7 %, 31313 bytes)
87c87
<        *strm 
---
>        strm 
94c94
< #define BZ_MAX_UNUSED 0
---
> define BZ_MAX_UNUSED 0
87c87
<        *strm 
---
>         
94c94
< #define BZ_MAX_UNUSED 0
---
> define BZ_MAX_UNUSED 0
87,88c87,88
<        *strm 
<    ;
---
>        strm 
>    
94c94
< #define BZ_MAX_UNUSED 0
---
> define BZ_MAX_UNUSED 0
87,88c87,88
<        *strm 
<    ;
---
>         
>    
94c94
< #define BZ_MAX_UNUSED 0
---
> define BZ_MAX_UNUSED 0
87c87
<        *strm 
---
>        * 
87,88c87,88
<        *strm 
<    ;
---
>        * 
>    
87c87
<        *strm 
---
>        * 
94c94
< #define BZ_MAX_UNUSED 0
---
> define BZ_MAX_UNUSED 0
87,88c87,88
<        *strm 
<    ;
---
>        * 
>    
94c94
< #define BZ_MAX_UNUSED 0
---
> define BZ_MAX_UNUSED 0
87c87
<        *strm 
---
>        * 
94c94
< #define BZ_MAX_UNUSED 0
---
> # BZ_MAX_UNUSED 0
87,88c87,88
<        *strm 
<    ;
---
>        * 
>    
94c94
< #define BZ_MAX_UNUSED 0
---
> # BZ_MAX_UNUSED 0
87c87
<        *strm 
---
>        * 
94c94
< #define BZ_MAX_UNUSED 0
---
>  BZ_MAX_UNUSED 0
87,88c87,88
<        *strm 
<    ;
---
>        * 
>    
94c94
< #define BZ_MAX_UNUSED 0
---
>  BZ_MAX_UNUSED 0
88c88
<    ;
---
>    
88c88
<    ;
---
>    
94c94
< #define BZ_MAX_UNUSED 0
---
> define BZ_MAX_UNUSED 0
88c88
<    ;
---
>    
94c94
< #define BZ_MAX_UNUSED 0
---
> # BZ_MAX_UNUSED 0
88c88
<    ;
---
>    
94c94
< #define BZ_MAX_UNUSED 0
---
>  BZ_MAX_UNUSED 0
88c88
<    ;
---
>    
94c94
< #define BZ_MAX_UNUSED 0
---
> #define  0
88c88
<    ;
---
>    
94c94
< #define BZ_MAX_UNUSED 0
---
> define  0
88c88
<    ;
---
>    
94c94
< #define BZ_MAX_UNUSED 0
---
> #  0
88c88
<    ;
---
>    
94c94
< #define BZ_MAX_UNUSED 0
---
>   0
94c94
< #define BZ_MAX_UNUSED 0
---
> define BZ_MAX_UNUSED 0
94c94
< #define BZ_MAX_UNUSED 0
---
>  BZ_MAX_UNUSED 0
94c94
< #define BZ_MAX_UNUSED 0
---
> define  0
94c94
< #define BZ_MAX_UNUSED 0
---
>   0
94c94
< #define BZ_MAX_UNUSED 0
---
> define BZ_MAX_UNUSED 
94c94
< #define BZ_MAX_UNUSED 0
---
>  BZ_MAX_UNUSED 
94c94
< #define BZ_MAX_UNUSED 0
---
> define  
94c94
< #define BZ_MAX_UNUSED 0
---
>   
94c94
< #define BZ_MAX_UNUSED 0
---
> # BZ_MAX_UNUSED 0
94c94
< #define BZ_MAX_UNUSED 0
---
> #  0
94c94
< #define BZ_MAX_UNUSED 0
---
> # BZ_MAX_UNUSED 
94c94
< #define BZ_MAX_UNUSED 0
---
> #  
94c94
< #define BZ_MAX_UNUSED 0
---
> # BZ_MAX_UNUSED 0
96c96
< typedef void BZFILE;
---
>  void BZFILE;
94c94
< #define BZ_MAX_UNUSED 0
---
> #  0
96c96
< typedef void BZFILE;
---
>  void BZFILE;
94c94
< #define BZ_MAX_UNUSED 0
---
> # BZ_MAX_UNUSED 
96c96
< typedef void BZFILE;
---
>  void BZFILE;
94c94
< #define BZ_MAX_UNUSED 0
---
> #  
96c96
< typedef void BZFILE;
---
>  void BZFILE;
94c94
< #define BZ_MAX_UNUSED 0
---
> #define  0
94c94
< #define BZ_MAX_UNUSED 0
---
> #define  
94c94
< #define BZ_MAX_UNUSED 0
---
> #define  0
96c96
< typedef void BZFILE;
---
>  void BZFILE;
94c94
< #define BZ_MAX_UNUSED 0
---
> #define  
96c96
< typedef void BZFILE;
---
>  void BZFILE;
94c94
< #define BZ_MAX_UNUSED 0
---
> #define  0
96c96
< typedef void BZFILE;
---
> typedef  BZFILE;
94c94
< #define BZ_MAX_UNUSED 0
---
> #define  
96c96
< typedef void BZFILE;
---
> typedef  BZFILE;
94c94
< #define BZ_MAX_UNUSED 0
---
> #define  0
96c96
< typedef void BZFILE;
---
>   BZFILE;
94c94
< #define BZ_MAX_UNUSED 0
---
> #define  
96c96
< typedef void BZFILE;
---
>   BZFILE;
94c94
< #define BZ_MAX_UNUSED 0
---
> #define BZ_MAX_UNUSED 
94c94
< #define BZ_MAX_UNUSED 0
---
> #define BZ_MAX_UNUSED 
96c96
< typedef void BZFILE;
---
>  void BZFILE;
94c94
< #define BZ_MAX_UNUSED 0
---
> #define BZ_MAX_UNUSED 
96c96
< typedef void BZFILE;
---
> typedef  BZFILE;
94c94
< #define BZ_MAX_UNUSED 0
---
> #define BZ_MAX_UNUSED 
96c96
< typedef void BZFILE;
---
>   BZFILE;
94c94
< #define BZ_MAX_UNUSED 0
---
> #define BZ_MAX_UNUSED 
96c96
< typedef void BZFILE;
---
> typedef void ;
94c94
< #define BZ_MAX_UNUSED 0
---
> #define BZ_MAX_UNUSED 
96c96
< typedef void BZFILE;
---
>  void ;
94c94
< #define BZ_MAX_UNUSED 0
---
> #define BZ_MAX_UNUSED 
96c96
< typedef void BZFILE;
---
> typedef  ;
94c94
< #define BZ_MAX_UNUSED 0
---
> #define BZ_MAX_UNUSED 
96c96
< typedef void BZFILE;
---
>   ;
96c96
< typedef void BZFILE;
---
>  void BZFILE;
96c96
< typedef void BZFILE;
---
>   BZFILE;
96c96
< typedef void BZFILE;
---
>  void ;
96c96
< typedef void BZFILE;
---
>   ;
96c96
< typedef void BZFILE;
---
>  void BZFILE
96c96
< typedef void BZFILE;
---
>   BZFILE
96c96
< typedef void BZFILE;
---
>  void 
96c96
< typedef void BZFILE;
---
>   
96c96
< typedef void BZFILE;
---
> typedef  BZFILE;
96c96
< typedef void BZFILE;
---
> typedef  ;
96c96
< typedef void BZFILE;
---
> typedef  BZFILE
96c96
< typedef void BZFILE;
---
> typedef  
96c96
< typedef void BZFILE;
---
> typedef  BZFILE;
98c98
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>  BZFILE* BZ_API(BZ2_bzReadOpen) ( 
(84.7 %, 31309 bytes)
96c96
< typedef  BZFILE;
---
> typedef  ;
96c96
< typedef  BZFILE;
---
> typedef  
96c96
< typedef  BZFILE;
---
> typedef  ;
98c98
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>  BZFILE* BZ_API(BZ2_bzReadOpen) ( 
96c96
< typedef  BZFILE;
---
> typedef  
98c98
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>  BZFILE* BZ_API(BZ2_bzReadOpen) ( 
96c96
< typedef  BZFILE;
---
> typedef  ;
98c98
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN * BZ_API(BZ2_bzReadOpen) ( 
96c96
< typedef  BZFILE;
---
> typedef  
98c98
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN * BZ_API(BZ2_bzReadOpen) ( 
96c96
< typedef  BZFILE;
---
> typedef  ;
98c98
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>  * BZ_API(BZ2_bzReadOpen) ( 
96c96
< typedef  BZFILE;
---
> typedef  
98c98
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>  * BZ_API(BZ2_bzReadOpen) ( 
96c96
< typedef  BZFILE;
---
> typedef  BZFILE
96c96
< typedef  BZFILE;
---
> typedef  BZFILE
98c98
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>  BZFILE* BZ_API(BZ2_bzReadOpen) ( 
96c96
< typedef  BZFILE;
---
> typedef  BZFILE
98c98
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN * BZ_API(BZ2_bzReadOpen) ( 
96c96
< typedef  BZFILE;
---
> typedef  BZFILE
98c98
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>  * BZ_API(BZ2_bzReadOpen) ( 
96c96
< typedef  BZFILE;
---
> typedef  BZFILE
98c98
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN BZFILE BZ_API(BZ2_bzReadOpen) ( 
96c96
< typedef  BZFILE;
---
> typedef  BZFILE
98c98
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>  BZFILE BZ_API(BZ2_bzReadOpen) ( 
96c96
< typedef  BZFILE;
---
> typedef  BZFILE
98c98
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzReadOpen) ( 
96c96
< typedef  BZFILE;
---
> typedef  BZFILE
98c98
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>   BZ_API(BZ2_bzReadOpen) ( 
98c98
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>  BZFILE* BZ_API(BZ2_bzReadOpen) ( 
98c98
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>  * BZ_API(BZ2_bzReadOpen) ( 
(84.7 %, 31300 bytes)
98c98
<  BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>  * BZ_API(BZ2_bzReadOpen) ( 
98c98
<  BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>   BZ_API(BZ2_bzReadOpen) ( 
98c98
<  BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>  * (BZ2_bzReadOpen) ( 
(84.7 %, 31294 bytes)
98c98
<  * BZ_API(BZ2_bzReadOpen) ( 
---
>   BZ_API(BZ2_bzReadOpen) ( 
98c98
<  * BZ_API(BZ2_bzReadOpen) ( 
---
>   (BZ2_bzReadOpen) ( 
98c98
<  * BZ_API(BZ2_bzReadOpen) ( 
---
>   BZ_APIBZ2_bzReadOpen) ( 
98c98
<  * BZ_API(BZ2_bzReadOpen) ( 
---
>   BZ2_bzReadOpen) ( 
98c98
<  * BZ_API(BZ2_bzReadOpen) ( 
---
>   BZ_API() ( 
98c98
<  * BZ_API(BZ2_bzReadOpen) ( 
---
>   () ( 
98c98
<  * BZ_API(BZ2_bzReadOpen) ( 
---
>   BZ_API) ( 
98c98
<  * BZ_API(BZ2_bzReadOpen) ( 
---
>   ) ( 
98c98
<  * BZ_API(BZ2_bzReadOpen) ( 
---
>  * (BZ2_bzReadOpen) ( 
98c98
<  * BZ_API(BZ2_bzReadOpen) ( 
---
>  * BZ2_bzReadOpen) ( 
98c98
<  * BZ_API(BZ2_bzReadOpen) ( 
---
>  * () ( 
98c98
<  * BZ_API(BZ2_bzReadOpen) ( 
---
>  * ) ( 
98c98
<  * BZ_API(BZ2_bzReadOpen) ( 
---
>  * (BZ2_bzReadOpen ( 
98c98
<  * BZ_API(BZ2_bzReadOpen) ( 
---
>  * BZ2_bzReadOpen ( 
(84.7 %, 31288 bytes)
98c98
<  * (BZ2_bzReadOpen) ( 
---
>  * BZ2_bzReadOpen) ( 
98c98
<  * (BZ2_bzReadOpen) ( 
---
>  * ) ( 
98c98
<  * (BZ2_bzReadOpen) ( 
---
>  * BZ2_bzReadOpen ( 
98c98
<  * (BZ2_bzReadOpen) ( 
---
>  *  ( 
98c98
<  * (BZ2_bzReadOpen) ( 
---
>  * BZ2_bzReadOpen)  
98c98
<  * (BZ2_bzReadOpen) ( 
---
>  * )  
98c98
<  * (BZ2_bzReadOpen) ( 
---
>  * BZ2_bzReadOpen  
98c98
<  * (BZ2_bzReadOpen) ( 
---
>  *   
98c98
<  * (BZ2_bzReadOpen) ( 
---
>  * () ( 
98c98
<  * (BZ2_bzReadOpen) ( 
---
>  * ( ( 
98c98
<  * (BZ2_bzReadOpen) ( 
---
>  * ()  
98c98
<  * (BZ2_bzReadOpen) ( 
---
>  * (  
98,99c98,99
<  * (BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
>  * () ( 
>       *  bzerror,   
98,99c98,99
<  * (BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
>  * ( ( 
>       *  bzerror,   
98,99c98,99
<  * (BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
>  * ()  
>       *  bzerror,   
98,99c98,99
<  * (BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
>  * (  
>       *  bzerror,   
(84.7 %, 31286 bytes)
98,99c98,99
<  * BZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  *  ( 
>       *  bzerror,   
98,99c98,99
<  * BZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  *   
>       *  bzerror,   
98,99c98,99
<  * BZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  *  ( 
>       int  bzerror,   
98,99c98,99
<  * BZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  *   
>       int  bzerror,   
98,99c98,99
<  * BZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  *  ( 
>         bzerror,   
98,99c98,99
<  * BZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  *   
>         bzerror,   
98c98
<  * BZ2_bzReadOpen ( 
---
>  * BZ2_bzReadOpen  
98,99c98,99
<  * BZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  * BZ2_bzReadOpen  
>       *  bzerror,   
98,99c98,99
<  * BZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  * BZ2_bzReadOpen  
>       int  bzerror,   
98,99c98,99
<  * BZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  * BZ2_bzReadOpen  
>         bzerror,   
98,99c98,99
<  * BZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  * BZ2_bzReadOpen  
>       int*  ,   
98,99c98,99
<  * BZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  * BZ2_bzReadOpen  
>       *  ,   
98,99c98,99
<  * BZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  * BZ2_bzReadOpen  
>       int  ,   
98,99c98,99
<  * BZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  * BZ2_bzReadOpen  
>         ,   
99c99
<       int*  bzerror,   
---
>       *  bzerror,   
99c99
<       int*  bzerror,   
---
>         bzerror,   
99c99
<       int*  bzerror,   
---
>       *  ,   
99c99
<       int*  bzerror,   
---
>         ,   
99c99
<       int*  bzerror,   
---
>       *  bzerror   
99c99
<       int*  bzerror,   
---
>         bzerror   
99c99
<       int*  bzerror,   
---
>       *     
99c99
<       int*  bzerror,   
---
>            
99c99
<       int*  bzerror,   
---
>       int  bzerror,   
99c99
<       int*  bzerror,   
---
>       int  ,   
99c99
<       int*  bzerror,   
---
>       int  bzerror   
99c99
<       int*  bzerror,   
---
>       int     
99,100c99,100
<       int*  bzerror,   
<       FILE* f, 
---
>       int  bzerror,   
>       * f, 
99,100c99,100
<       int*  bzerror,   
<       FILE* f, 
---
>       int  ,   
>       * f, 
99,100c99,100
<       int*  bzerror,   
<       FILE* f, 
---
>       int  bzerror   
>       * f, 
99,100c99,100
<       int*  bzerror,   
<       FILE* f, 
---
>       int     
>       * f, 
99c99
<       int*  bzerror,   
---
>       int*  ,   
99c99
<       int*  bzerror,   
---
>       int*     
99,100c99,100
<       int*  bzerror,   
<       FILE* f, 
---
>       int*  ,   
>       * f, 
99,100c99,100
<       int*  bzerror,   
<       FILE* f, 
---
>       int*     
>       * f, 
99,100c99,100
<       int*  bzerror,   
<       FILE* f, 
---
>       int*  ,   
>       FILE f, 
99,100c99,100
<       int*  bzerror,   
<       FILE* f, 
---
>       int*     
>       FILE f, 
99,100c99,100
<       int*  bzerror,   
<       FILE* f, 
---
>       int*  ,   
>        f, 
99,100c99,100
<       int*  bzerror,   
<       FILE* f, 
---
>       int*     
>        f, 
99c99
<       int*  bzerror,   
---
>       int*  bzerror   
99,100c99,100
<       int*  bzerror,   
<       FILE* f, 
---
>       int*  bzerror   
>       * f, 
99,100c99,100
<       int*  bzerror,   
<       FILE* f, 
---
>       int*  bzerror   
>       FILE f, 
99,100c99,100
<       int*  bzerror,   
<       FILE* f, 
---
>       int*  bzerror   
>        f, 
99,100c99,100
<       int*  bzerror,   
<       FILE* f, 
---
>       int*  bzerror   
>       FILE* , 
99,100c99,100
<       int*  bzerror,   
<       FILE* f, 
---
>       int*  bzerror   
>       * , 
99,100c99,100
<       int*  bzerror,   
<       FILE* f, 
---
>       int*  bzerror   
>       FILE , 
99,100c99,100
<       int*  bzerror,   
<       FILE* f, 
---
>       int*  bzerror   
>        , 
100c100
<       FILE* f, 
---
>       * f, 
100c100
<       FILE* f, 
---
>        f, 
(84.7 %, 31279 bytes)
99c99
<       int*  ,   
---
>       int*     
99,100c99,100
<       int*  ,   
<       FILE* f, 
---
>       int*     
>       * f, 
99,100c99,100
<       int*  ,   
<       FILE* f, 
---
>       int*     
>       FILE f, 
99,100c99,100
<       int*  ,   
<       FILE* f, 
---
>       int*     
>        f, 
99,100c99,100
<       int*  ,   
<       FILE* f, 
---
>       int*     
>       FILE* , 
99,100c99,100
<       int*  ,   
<       FILE* f, 
---
>       int*     
>       * , 
99,100c99,100
<       int*  ,   
<       FILE* f, 
---
>       int*     
>       FILE , 
99,100c99,100
<       int*  ,   
<       FILE* f, 
---
>       int*     
>        , 
100c100
<       FILE* f, 
---
>       * f, 
100c100
<       FILE* f, 
---
>        f, 
100c100
<       FILE* f, 
---
>       * , 
100c100
<       FILE* f, 
---
>        , 
100c100
<       FILE* f, 
---
>       * f 
100c100
<       FILE* f, 
---
>        f 
100c100
<       FILE* f, 
---
>       *  
100c100
<       FILE* f, 
---
>         
100c100
<       FILE* f, 
---
>       FILE f, 
100c100
<       FILE* f, 
---
>       FILE , 
100c100
<       FILE* f, 
---
>       FILE f 
100c100
<       FILE* f, 
---
>       FILE  
100,101c100,101
<       FILE* f, 
<       int   verbosity, 
---
>       FILE f, 
>          verbosity, 
100,101c100,101
<       FILE* f, 
<       int   verbosity, 
---
>       FILE , 
>          verbosity, 
100,101c100,101
<       FILE* f, 
<       int   verbosity, 
---
>       FILE f 
>          verbosity, 
100,101c100,101
<       FILE* f, 
<       int   verbosity, 
---
>       FILE  
>          verbosity, 
100c100
<       FILE* f, 
---
>       FILE* , 
100c100
<       FILE* f, 
---
>       FILE*  
100,101c100,101
<       FILE* f, 
<       int   verbosity, 
---
>       FILE* , 
>          verbosity, 
100,101c100,101
<       FILE* f, 
<       int   verbosity, 
---
>       FILE*  
>          verbosity, 
100,101c100,101
<       FILE* f, 
<       int   verbosity, 
---
>       FILE* , 
>       int   , 
(84.7 %, 31278 bytes)
100c100
<       FILE* , 
---
>       FILE*  
100,101c100,101
<       FILE* , 
<       int   verbosity, 
---
>       FILE*  
>          verbosity, 
100,101c100,101
<       FILE* , 
<       int   verbosity, 
---
>       FILE*  
>       int   , 
100,101c100,101
<       FILE* , 
<       int   verbosity, 
---
>       FILE*  
>          , 
100,101c100,101
<       FILE* , 
<       int   verbosity, 
---
>       FILE*  
>       int   verbosity 
100,101c100,101
<       FILE* , 
<       int   verbosity, 
---
>       FILE*  
>          verbosity 
100,101c100,101
<       FILE* , 
<       int   verbosity, 
---
>       FILE*  
>       int    
100,101c100,101
<       FILE* , 
<       int   verbosity, 
---
>       FILE*  
>           
101c101
<       int   verbosity, 
---
>          verbosity, 
101c101
<       int   verbosity, 
---
>          , 
101c101
<       int   verbosity, 
---
>          verbosity 
101c101
<       int   verbosity, 
---
>           
101,102c101,102
<       int   verbosity, 
<       int   small,
---
>          verbosity, 
>          small,
101,102c101,102
<       int   verbosity, 
<       int   small,
---
>          , 
>          small,
101,102c101,102
<       int   verbosity, 
<       int   small,
---
>          verbosity 
>          small,
101,102c101,102
<       int   verbosity, 
<       int   small,
---
>           
>          small,
101c101
<       int   verbosity, 
---
>       int   , 
101c101
<       int   verbosity, 
---
>       int    
101,102c101,102
<       int   verbosity, 
<       int   small,
---
>       int   , 
>          small,
101,102c101,102
<       int   verbosity, 
<       int   small,
---
>       int    
>          small,
101,102c101,102
<       int   verbosity, 
<       int   small,
---
>       int   , 
>       int   ,
(84.7 %, 31269 bytes)
101c101
<       int   , 
---
>       int    
101,102c101,102
<       int   , 
<       int   small,
---
>       int    
>          small,
101,102c101,102
<       int   , 
<       int   small,
---
>       int    
>       int   ,
101,102c101,102
<       int   , 
<       int   small,
---
>       int    
>          ,
101,102c101,102
<       int   , 
<       int   small,
---
>       int    
>       int   small
101,102c101,102
<       int   , 
<       int   small,
---
>       int    
>          small
101,102c101,102
<       int   , 
<       int   small,
---
>       int    
>       int   
101,102c101,102
<       int   , 
<       int   small,
---
>       int    
>          
102c102
<       int   small,
---
>          small,
102c102
<       int   small,
---
>          ,
102c102
<       int   small,
---
>          small
102c102
<       int   small,
---
>          
102,103c102,103
<       int   small,
<       void* unused,    
---
>          small,
>       * unused,    
102,103c102,103
<       int   small,
<       void* unused,    
---
>          ,
>       * unused,    
102,103c102,103
<       int   small,
<       void* unused,    
---
>          small
>       * unused,    
102,103c102,103
<       int   small,
<       void* unused,    
---
>          
>       * unused,    
102c102
<       int   small,
---
>       int   ,
102c102
<       int   small,
---
>       int   
102,103c102,103
<       int   small,
<       void* unused,    
---
>       int   ,
>       * unused,    
102,103c102,103
<       int   small,
<       void* unused,    
---
>       int   
>       * unused,    
102,103c102,103
<       int   small,
<       void* unused,    
---
>       int   ,
>       void unused,    
102,103c102,103
<       int   small,
<       void* unused,    
---
>       int   
>       void unused,    
102,103c102,103
<       int   small,
<       void* unused,    
---
>       int   ,
>        unused,    
102,103c102,103
<       int   small,
<       void* unused,    
---
>       int   
>        unused,    
102c102
<       int   small,
---
>       int   small
102,103c102,103
<       int   small,
<       void* unused,    
---
>       int   small
>       * unused,    
102,103c102,103
<       int   small,
<       void* unused,    
---
>       int   small
>       void unused,    
102,103c102,103
<       int   small,
<       void* unused,    
---
>       int   small
>        unused,    
102,103c102,103
<       int   small,
<       void* unused,    
---
>       int   small
>       void* ,    
102,103c102,103
<       int   small,
<       void* unused,    
---
>       int   small
>       * ,    
102,103c102,103
<       int   small,
<       void* unused,    
---
>       int   small
>       void ,    
102,103c102,103
<       int   small,
<       void* unused,    
---
>       int   small
>        ,    
103c103
<       void* unused,    
---
>       * unused,    
103c103
<       void* unused,    
---
>        unused,    
103c103
<       void* unused,    
---
>       * ,    
103c103
<       void* unused,    
---
>        ,    
103c103
<       void* unused,    
---
>       * unused    
(84.7 %, 31264 bytes)
102c102
<       int   ,
---
>       int   
102,103c102,103
<       int   ,
<       void* unused,    
---
>       int   
>       * unused,    
102,103c102,103
<       int   ,
<       void* unused,    
---
>       int   
>       void unused,    
102,103c102,103
<       int   ,
<       void* unused,    
---
>       int   
>        unused,    
102,103c102,103
<       int   ,
<       void* unused,    
---
>       int   
>       void* ,    
102,103c102,103
<       int   ,
<       void* unused,    
---
>       int   
>       * ,    
102,103c102,103
<       int   ,
<       void* unused,    
---
>       int   
>       void ,    
102,103c102,103
<       int   ,
<       void* unused,    
---
>       int   
>        ,    
103c103
<       void* unused,    
---
>       * unused,    
103c103
<       void* unused,    
---
>        unused,    
103c103
<       void* unused,    
---
>       * ,    
103c103
<       void* unused,    
---
>        ,    
103c103
<       void* unused,    
---
>       * unused    
103c103
<       void* unused,    
---
>        unused    
103c103
<       void* unused,    
---
>       *     
103c103
<       void* unused,    
---
>            
103c103
<       void* unused,    
---
>       void unused,    
103c103
<       void* unused,    
---
>       void ,    
103c103
<       void* unused,    
---
>       void unused    
103c103
<       void* unused,    
---
>       void     
103,104c103,104
<       void* unused,    
<       int   nUnused 
---
>       void unused,    
>          nUnused 
103,104c103,104
<       void* unused,    
<       int   nUnused 
---
>       void ,    
>          nUnused 
103,104c103,104
<       void* unused,    
<       int   nUnused 
---
>       void unused    
>          nUnused 
103,104c103,104
<       void* unused,    
<       int   nUnused 
---
>       void     
>          nUnused 
103c103
<       void* unused,    
---
>       void* ,    
103c103
<       void* unused,    
---
>       void*     
103,104c103,104
<       void* unused,    
<       int   nUnused 
---
>       void* ,    
>          nUnused 
103,104c103,104
<       void* unused,    
<       int   nUnused 
---
>       void*     
>          nUnused 
103,104c103,104
<       void* unused,    
<       int   nUnused 
---
>       void* ,    
>       int    
(84.7 %, 31258 bytes)
103c103
<       void* ,    
---
>       void*     
103,104c103,104
<       void* ,    
<       int   nUnused 
---
>       void*     
>          nUnused 
103,104c103,104
<       void* ,    
<       int   nUnused 
---
>       void*     
>       int    
103,104c103,104
<       void* ,    
<       int   nUnused 
---
>       void*     
>           
103c103
<       void* ,    
---
>       void*     
105c105
<    );
---
>    ;
103,105c103,105
<       void* ,    
<       int   nUnused 
<    );
---
>       void*     
>          nUnused 
>    ;
103,105c103,105
<       void* ,    
<       int   nUnused 
<    );
---
>       void*     
>       int    
>    ;
103,105c103,105
<       void* ,    
<       int   nUnused 
<    );
---
>       void*     
>           
>    ;
104c104
<       int   nUnused 
---
>          nUnused 
104c104
<       int   nUnused 
---
>           
104,105c104,105
<       int   nUnused 
<    );
---
>          nUnused 
>    ;
104,105c104,105
<       int   nUnused 
<    );
---
>           
>    ;
104,105c104,105
<       int   nUnused 
<    );
---
>          nUnused 
>    )
104,105c104,105
<       int   nUnused 
<    );
---
>           
>    )
104,105c104,105
<       int   nUnused 
<    );
---
>          nUnused 
>    
104,105c104,105
<       int   nUnused 
<    );
---
>           
>    
104c104
<       int   nUnused 
---
>       int    
104,105c104,105
<       int   nUnused 
<    );
---
>       int    
>    ;
104,105c104,105
<       int   nUnused 
<    );
---
>       int    
>    )
104,105c104,105
<       int   nUnused 
<    );
---
>       int    
>    
104c104
<       int   nUnused 
---
>       int    
107c107
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>  void BZ_API(BZ2_bzReadClose) ( 
(84.8 %, 31251 bytes)
105c105
<    );
---
>    ;
105c105
<    );
---
>    
105c105
<    );
---
>    ;
107c107
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>  void BZ_API(BZ2_bzReadClose) ( 
105c105
<    );
---
>    
107c107
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>  void BZ_API(BZ2_bzReadClose) ( 
105c105
<    );
---
>    ;
107c107
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzReadClose) ( 
105c105
<    );
---
>    
107c107
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzReadClose) ( 
105c105
<    );
---
>    ;
107c107
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>   BZ_API(BZ2_bzReadClose) ( 
105c105
<    );
---
>    
107c107
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>   BZ_API(BZ2_bzReadClose) ( 
105c105
<    );
---
>    )
105c105
<    );
---
>    )
107c107
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>  void BZ_API(BZ2_bzReadClose) ( 
105c105
<    );
---
>    )
107c107
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzReadClose) ( 
105c105
<    );
---
>    )
107c107
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>   BZ_API(BZ2_bzReadClose) ( 
105c105
<    );
---
>    )
107c107
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
> BZ_EXTERN void (BZ2_bzReadClose) ( 
105c105
<    );
---
>    )
107c107
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>  void (BZ2_bzReadClose) ( 
105c105
<    );
---
>    )
107c107
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
> BZ_EXTERN  (BZ2_bzReadClose) ( 
105c105
<    );
---
>    )
107c107
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>   (BZ2_bzReadClose) ( 
107c107
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>  void BZ_API(BZ2_bzReadClose) ( 
107c107
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>   BZ_API(BZ2_bzReadClose) ( 
107c107
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>  void (BZ2_bzReadClose) ( 
107c107
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>   (BZ2_bzReadClose) ( 
107c107
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>  void BZ_APIBZ2_bzReadClose) ( 
107c107
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>   BZ_APIBZ2_bzReadClose) ( 
107c107
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>  void BZ2_bzReadClose) ( 
(84.8 %, 31242 bytes)
107c107
<  void BZ_API(BZ2_bzReadClose) ( 
---
>   BZ_API(BZ2_bzReadClose) ( 
107c107
<  void BZ_API(BZ2_bzReadClose) ( 
---
>   (BZ2_bzReadClose) ( 
107c107
<  void BZ_API(BZ2_bzReadClose) ( 
---
>   BZ_APIBZ2_bzReadClose) ( 
107c107
<  void BZ_API(BZ2_bzReadClose) ( 
---
>   BZ2_bzReadClose) ( 
107c107
<  void BZ_API(BZ2_bzReadClose) ( 
---
>   BZ_API() ( 
107c107
<  void BZ_API(BZ2_bzReadClose) ( 
---
>   () ( 
107c107
<  void BZ_API(BZ2_bzReadClose) ( 
---
>   BZ_API) ( 
107c107
<  void BZ_API(BZ2_bzReadClose) ( 
---
>   ) ( 
107c107
<  void BZ_API(BZ2_bzReadClose) ( 
---
>  void (BZ2_bzReadClose) ( 
107c107
<  void BZ_API(BZ2_bzReadClose) ( 
---
>  void BZ2_bzReadClose) ( 
107c107
<  void BZ_API(BZ2_bzReadClose) ( 
---
>  void () ( 
107c107
<  void BZ_API(BZ2_bzReadClose) ( 
---
>  void ) ( 
107c107
<  void BZ_API(BZ2_bzReadClose) ( 
---
>  void (BZ2_bzReadClose ( 
107c107
<  void BZ_API(BZ2_bzReadClose) ( 
---
>  void BZ2_bzReadClose ( 
(84.8 %, 31236 bytes)
107c107
<  void (BZ2_bzReadClose) ( 
---
>  void BZ2_bzReadClose) ( 
107c107
<  void (BZ2_bzReadClose) ( 
---
>  void ) ( 
107c107
<  void (BZ2_bzReadClose) ( 
---
>  void BZ2_bzReadClose ( 
107c107
<  void (BZ2_bzReadClose) ( 
---
>  void  ( 
107c107
<  void (BZ2_bzReadClose) ( 
---
>  void BZ2_bzReadClose)  
107c107
<  void (BZ2_bzReadClose) ( 
---
>  void )  
107c107
<  void (BZ2_bzReadClose) ( 
---
>  void BZ2_bzReadClose  
107c107
<  void (BZ2_bzReadClose) ( 
---
>  void   
107c107
<  void (BZ2_bzReadClose) ( 
---
>  void () ( 
107c107
<  void (BZ2_bzReadClose) ( 
---
>  void ( ( 
107c107
<  void (BZ2_bzReadClose) ( 
---
>  void ()  
107c107
<  void (BZ2_bzReadClose) ( 
---
>  void (  
107,108c107,108
<  void (BZ2_bzReadClose) ( 
<       int*    bzerror, 
---
>  void () ( 
>       *    bzerror, 
107,108c107,108
<  void (BZ2_bzReadClose) ( 
<       int*    bzerror, 
---
>  void ( ( 
>       *    bzerror, 
107,108c107,108
<  void (BZ2_bzReadClose) ( 
<       int*    bzerror, 
---
>  void ()  
>       *    bzerror, 
107,108c107,108
<  void (BZ2_bzReadClose) ( 
<       int*    bzerror, 
---
>  void (  
>       *    bzerror, 
107c107
<  void (BZ2_bzReadClose) ( 
---
>  void (BZ2_bzReadClose ( 
107c107
<  void (BZ2_bzReadClose) ( 
---
>  void (BZ2_bzReadClose  
107,108c107,108
<  void (BZ2_bzReadClose) ( 
<       int*    bzerror, 
---
>  void (BZ2_bzReadClose ( 
>       *    bzerror, 
107,108c107,108
<  void (BZ2_bzReadClose) ( 
<       int*    bzerror, 
---
>  void (BZ2_bzReadClose  
>       *    bzerror, 
107,108c107,108
<  void (BZ2_bzReadClose) ( 
<       int*    bzerror, 
---
>  void (BZ2_bzReadClose ( 
>       int    bzerror, 
107,108c107,108
<  void (BZ2_bzReadClose) ( 
<       int*    bzerror, 
---
>  void (BZ2_bzReadClose  
>       int    bzerror, 
107,108c107,108
<  void (BZ2_bzReadClose) ( 
<       int*    bzerror, 
---
>  void (BZ2_bzReadClose ( 
>           bzerror, 
107,108c107,108
<  void (BZ2_bzReadClose) ( 
<       int*    bzerror, 
---
>  void (BZ2_bzReadClose  
>           bzerror, 
(84.8 %, 31234 bytes)
107,108c107,108
<  void BZ2_bzReadClose ( 
<       int*    bzerror, 
---
>  void  ( 
>       *    bzerror, 
107,108c107,108
<  void BZ2_bzReadClose ( 
<       int*    bzerror, 
---
>  void   
>       *    bzerror, 
107,108c107,108
<  void BZ2_bzReadClose ( 
<       int*    bzerror, 
---
>  void  ( 
>       int    bzerror, 
107,108c107,108
<  void BZ2_bzReadClose ( 
<       int*    bzerror, 
---
>  void   
>       int    bzerror, 
107,108c107,108
<  void BZ2_bzReadClose ( 
<       int*    bzerror, 
---
>  void  ( 
>           bzerror, 
107,108c107,108
<  void BZ2_bzReadClose ( 
<       int*    bzerror, 
---
>  void   
>           bzerror, 
107c107
<  void BZ2_bzReadClose ( 
---
>  void BZ2_bzReadClose  
107,108c107,108
<  void BZ2_bzReadClose ( 
<       int*    bzerror, 
---
>  void BZ2_bzReadClose  
>       *    bzerror, 
107,108c107,108
<  void BZ2_bzReadClose ( 
<       int*    bzerror, 
---
>  void BZ2_bzReadClose  
>       int    bzerror, 
107,108c107,108
<  void BZ2_bzReadClose ( 
<       int*    bzerror, 
---
>  void BZ2_bzReadClose  
>           bzerror, 
107,108c107,108
<  void BZ2_bzReadClose ( 
<       int*    bzerror, 
---
>  void BZ2_bzReadClose  
>       int*    , 
107,108c107,108
<  void BZ2_bzReadClose ( 
<       int*    bzerror, 
---
>  void BZ2_bzReadClose  
>       *    , 
107,108c107,108
<  void BZ2_bzReadClose ( 
<       int*    bzerror, 
---
>  void BZ2_bzReadClose  
>       int    , 
107,108c107,108
<  void BZ2_bzReadClose ( 
<       int*    bzerror, 
---
>  void BZ2_bzReadClose  
>           , 
108c108
<       int*    bzerror, 
---
>       *    bzerror, 
108c108
<       int*    bzerror, 
---
>           bzerror, 
108c108
<       int*    bzerror, 
---
>       *    , 
108c108
<       int*    bzerror, 
---
>           , 
108c108
<       int*    bzerror, 
---
>       *    bzerror 
108c108
<       int*    bzerror, 
---
>           bzerror 
108c108
<       int*    bzerror, 
---
>       *     
108c108
<       int*    bzerror, 
---
>            
108c108
<       int*    bzerror, 
---
>       int    bzerror, 
108c108
<       int*    bzerror, 
---
>       int    , 
108c108
<       int*    bzerror, 
---
>       int    bzerror 
108c108
<       int*    bzerror, 
---
>       int     
108,109c108,109
<       int*    bzerror, 
<       BZFILE* b 
---
>       int    bzerror, 
>       * b 
108,109c108,109
<       int*    bzerror, 
<       BZFILE* b 
---
>       int    , 
>       * b 
108,109c108,109
<       int*    bzerror, 
<       BZFILE* b 
---
>       int    bzerror 
>       * b 
108,109c108,109
<       int*    bzerror, 
<       BZFILE* b 
---
>       int     
>       * b 
108c108
<       int*    bzerror, 
---
>       int*    , 
108c108
<       int*    bzerror, 
---
>       int*     
108,109c108,109
<       int*    bzerror, 
<       BZFILE* b 
---
>       int*    , 
>       * b 
108,109c108,109
<       int*    bzerror, 
<       BZFILE* b 
---
>       int*     
>       * b 
108,109c108,109
<       int*    bzerror, 
<       BZFILE* b 
---
>       int*    , 
>       BZFILE b 
108,109c108,109
<       int*    bzerror, 
<       BZFILE* b 
---
>       int*     
>       BZFILE b 
108,109c108,109
<       int*    bzerror, 
<       BZFILE* b 
---
>       int*    , 
>        b 
108,109c108,109
<       int*    bzerror, 
<       BZFILE* b 
---
>       int*     
>        b 
108c108
<       int*    bzerror, 
---
>       int*    bzerror 
108,109c108,109
<       int*    bzerror, 
<       BZFILE* b 
---
>       int*    bzerror 
>       * b 
108,109c108,109
<       int*    bzerror, 
<       BZFILE* b 
---
>       int*    bzerror 
>       BZFILE b 
108,109c108,109
<       int*    bzerror, 
<       BZFILE* b 
---
>       int*    bzerror 
>        b 
108,109c108,109
<       int*    bzerror, 
<       BZFILE* b 
---
>       int*    bzerror 
>       BZFILE*  
108,109c108,109
<       int*    bzerror, 
<       BZFILE* b 
---
>       int*    bzerror 
>       *  
108,109c108,109
<       int*    bzerror, 
<       BZFILE* b 
---
>       int*    bzerror 
>       BZFILE  
108,109c108,109
<       int*    bzerror, 
<       BZFILE* b 
---
>       int*    bzerror 
>         
109c109
<       BZFILE* b 
---
>       * b 
109c109
<       BZFILE* b 
---
>        b 
(84.8 %, 31227 bytes)
108c108
<       int*    , 
---
>       int*     
108,109c108,109
<       int*    , 
<       BZFILE* b 
---
>       int*     
>       * b 
108,109c108,109
<       int*    , 
<       BZFILE* b 
---
>       int*     
>       BZFILE b 
108,109c108,109
<       int*    , 
<       BZFILE* b 
---
>       int*     
>        b 
108,109c108,109
<       int*    , 
<       BZFILE* b 
---
>       int*     
>       BZFILE*  
108,109c108,109
<       int*    , 
<       BZFILE* b 
---
>       int*     
>       *  
108,109c108,109
<       int*    , 
<       BZFILE* b 
---
>       int*     
>       BZFILE  
108,109c108,109
<       int*    , 
<       BZFILE* b 
---
>       int*     
>         
109c109
<       BZFILE* b 
---
>       * b 
109c109
<       BZFILE* b 
---
>        b 
109c109
<       BZFILE* b 
---
>       *  
109c109
<       BZFILE* b 
---
>         
109,110c109,110
<       BZFILE* b 
<    );
---
>       * b 
>    ;
109,110c109,110
<       BZFILE* b 
<    );
---
>        b 
>    ;
109,110c109,110
<       BZFILE* b 
<    );
---
>       *  
>    ;
109,110c109,110
<       BZFILE* b 
<    );
---
>         
>    ;
109c109
<       BZFILE* b 
---
>       BZFILE b 
109c109
<       BZFILE* b 
---
>       BZFILE  
109,110c109,110
<       BZFILE* b 
<    );
---
>       BZFILE b 
>    ;
109,110c109,110
<       BZFILE* b 
<    );
---
>       BZFILE  
>    ;
109,110c109,110
<       BZFILE* b 
<    );
---
>       BZFILE b 
>    )
109,110c109,110
<       BZFILE* b 
<    );
---
>       BZFILE  
>    )
109,110c109,110
<       BZFILE* b 
<    );
---
>       BZFILE b 
>    
109,110c109,110
<       BZFILE* b 
<    );
---
>       BZFILE  
>    
109c109
<       BZFILE* b 
---
>       BZFILE*  
109,110c109,110
<       BZFILE* b 
<    );
---
>       BZFILE*  
>    ;
109,110c109,110
<       BZFILE* b 
<    );
---
>       BZFILE*  
>    )
109,110c109,110
<       BZFILE* b 
<    );
---
>       BZFILE*  
>    
109c109
<       BZFILE* b 
---
>       BZFILE*  
112c112
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>  void BZ_API(BZ2_bzReadGetUnused) ( 
(84.8 %, 31226 bytes)
110c110
<    );
---
>    ;
110c110
<    );
---
>    
110c110
<    );
---
>    ;
112c112
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>  void BZ_API(BZ2_bzReadGetUnused) ( 
110c110
<    );
---
>    
112c112
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>  void BZ_API(BZ2_bzReadGetUnused) ( 
110c110
<    );
---
>    ;
112c112
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzReadGetUnused) ( 
110c110
<    );
---
>    
112c112
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzReadGetUnused) ( 
110c110
<    );
---
>    ;
112c112
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>   BZ_API(BZ2_bzReadGetUnused) ( 
110c110
<    );
---
>    
112c112
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>   BZ_API(BZ2_bzReadGetUnused) ( 
110c110
<    );
---
>    )
110c110
<    );
---
>    )
112c112
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>  void BZ_API(BZ2_bzReadGetUnused) ( 
110c110
<    );
---
>    )
112c112
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzReadGetUnused) ( 
110c110
<    );
---
>    )
112c112
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>   BZ_API(BZ2_bzReadGetUnused) ( 
110c110
<    );
---
>    )
112c112
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void (BZ2_bzReadGetUnused) ( 
110c110
<    );
---
>    )
112c112
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>  void (BZ2_bzReadGetUnused) ( 
110c110
<    );
---
>    )
112c112
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN  (BZ2_bzReadGetUnused) ( 
110c110
<    );
---
>    )
112c112
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>   (BZ2_bzReadGetUnused) ( 
112c112
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>  void BZ_API(BZ2_bzReadGetUnused) ( 
112c112
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>   BZ_API(BZ2_bzReadGetUnused) ( 
112c112
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>  void (BZ2_bzReadGetUnused) ( 
(84.8 %, 31217 bytes)
112c112
<  void BZ_API(BZ2_bzReadGetUnused) ( 
---
>   BZ_API(BZ2_bzReadGetUnused) ( 
112c112
<  void BZ_API(BZ2_bzReadGetUnused) ( 
---
>   (BZ2_bzReadGetUnused) ( 
112c112
<  void BZ_API(BZ2_bzReadGetUnused) ( 
---
>   BZ_APIBZ2_bzReadGetUnused) ( 
112c112
<  void BZ_API(BZ2_bzReadGetUnused) ( 
---
>   BZ2_bzReadGetUnused) ( 
112c112
<  void BZ_API(BZ2_bzReadGetUnused) ( 
---
>   BZ_API() ( 
112c112
<  void BZ_API(BZ2_bzReadGetUnused) ( 
---
>   () ( 
112c112
<  void BZ_API(BZ2_bzReadGetUnused) ( 
---
>   BZ_API) ( 
112c112
<  void BZ_API(BZ2_bzReadGetUnused) ( 
---
>   ) ( 
112c112
<  void BZ_API(BZ2_bzReadGetUnused) ( 
---
>  void (BZ2_bzReadGetUnused) ( 
112c112
<  void BZ_API(BZ2_bzReadGetUnused) ( 
---
>  void BZ2_bzReadGetUnused) ( 
112c112
<  void BZ_API(BZ2_bzReadGetUnused) ( 
---
>  void () ( 
112c112
<  void BZ_API(BZ2_bzReadGetUnused) ( 
---
>  void ) ( 
112c112
<  void BZ_API(BZ2_bzReadGetUnused) ( 
---
>  void (BZ2_bzReadGetUnused ( 
112c112
<  void BZ_API(BZ2_bzReadGetUnused) ( 
---
>  void BZ2_bzReadGetUnused ( 
(84.8 %, 31211 bytes)
112c112
<  void (BZ2_bzReadGetUnused) ( 
---
>  void BZ2_bzReadGetUnused) ( 
112c112
<  void (BZ2_bzReadGetUnused) ( 
---
>  void ) ( 
112c112
<  void (BZ2_bzReadGetUnused) ( 
---
>  void BZ2_bzReadGetUnused ( 
112c112
<  void (BZ2_bzReadGetUnused) ( 
---
>  void  ( 
112c112
<  void (BZ2_bzReadGetUnused) ( 
---
>  void BZ2_bzReadGetUnused)  
112c112
<  void (BZ2_bzReadGetUnused) ( 
---
>  void )  
112c112
<  void (BZ2_bzReadGetUnused) ( 
---
>  void BZ2_bzReadGetUnused  
112c112
<  void (BZ2_bzReadGetUnused) ( 
---
>  void   
112c112
<  void (BZ2_bzReadGetUnused) ( 
---
>  void () ( 
112c112
<  void (BZ2_bzReadGetUnused) ( 
---
>  void ( ( 
112c112
<  void (BZ2_bzReadGetUnused) ( 
---
>  void ()  
112c112
<  void (BZ2_bzReadGetUnused) ( 
---
>  void (  
112,113c112,113
<  void (BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
>  void () ( 
>       *    bzerror, 
112,113c112,113
<  void (BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
>  void ( ( 
>       *    bzerror, 
112,113c112,113
<  void (BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
>  void ()  
>       *    bzerror, 
112,113c112,113
<  void (BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
>  void (  
>       *    bzerror, 
112c112
<  void (BZ2_bzReadGetUnused) ( 
---
>  void (BZ2_bzReadGetUnused ( 
112c112
<  void (BZ2_bzReadGetUnused) ( 
---
>  void (BZ2_bzReadGetUnused  
112,113c112,113
<  void (BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
>  void (BZ2_bzReadGetUnused ( 
>       *    bzerror, 
112,113c112,113
<  void (BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
>  void (BZ2_bzReadGetUnused  
>       *    bzerror, 
112,113c112,113
<  void (BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
>  void (BZ2_bzReadGetUnused ( 
>       int    bzerror, 
112,113c112,113
<  void (BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
>  void (BZ2_bzReadGetUnused  
>       int    bzerror, 
112,113c112,113
<  void (BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
>  void (BZ2_bzReadGetUnused ( 
>           bzerror, 
(84.8 %, 31209 bytes)
112,113c112,113
<  void BZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void  ( 
>       *    bzerror, 
112,113c112,113
<  void BZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void   
>       *    bzerror, 
112,113c112,113
<  void BZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void  ( 
>       int    bzerror, 
112,113c112,113
<  void BZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void   
>       int    bzerror, 
112,113c112,113
<  void BZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void  ( 
>           bzerror, 
112,113c112,113
<  void BZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void   
>           bzerror, 
112c112
<  void BZ2_bzReadGetUnused ( 
---
>  void BZ2_bzReadGetUnused  
112,113c112,113
<  void BZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void BZ2_bzReadGetUnused  
>       *    bzerror, 
112,113c112,113
<  void BZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void BZ2_bzReadGetUnused  
>       int    bzerror, 
112,113c112,113
<  void BZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void BZ2_bzReadGetUnused  
>           bzerror, 
112,113c112,113
<  void BZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void BZ2_bzReadGetUnused  
>       int*    , 
112,113c112,113
<  void BZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void BZ2_bzReadGetUnused  
>       *    , 
112,113c112,113
<  void BZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void BZ2_bzReadGetUnused  
>       int    , 
112,113c112,113
<  void BZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void BZ2_bzReadGetUnused  
>           , 
113c113
<       int*    bzerror, 
---
>       *    bzerror, 
113c113
<       int*    bzerror, 
---
>           bzerror, 
113c113
<       int*    bzerror, 
---
>       *    , 
113c113
<       int*    bzerror, 
---
>           , 
113c113
<       int*    bzerror, 
---
>       *    bzerror 
113c113
<       int*    bzerror, 
---
>           bzerror 
113c113
<       int*    bzerror, 
---
>       *     
113c113
<       int*    bzerror, 
---
>            
113c113
<       int*    bzerror, 
---
>       int    bzerror, 
113c113
<       int*    bzerror, 
---
>       int    , 
113c113
<       int*    bzerror, 
---
>       int    bzerror 
113c113
<       int*    bzerror, 
---
>       int     
113,114c113,114
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int    bzerror, 
>       * b, 
113,114c113,114
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int    , 
>       * b, 
113,114c113,114
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int    bzerror 
>       * b, 
113,114c113,114
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int     
>       * b, 
113c113
<       int*    bzerror, 
---
>       int*    , 
113c113
<       int*    bzerror, 
---
>       int*     
113,114c113,114
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    , 
>       * b, 
113,114c113,114
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*     
>       * b, 
113,114c113,114
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    , 
>       BZFILE b, 
113,114c113,114
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*     
>       BZFILE b, 
113,114c113,114
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    , 
>        b, 
113,114c113,114
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*     
>        b, 
113c113
<       int*    bzerror, 
---
>       int*    bzerror 
113,114c113,114
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerror 
>       * b, 
113,114c113,114
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerror 
>       BZFILE b, 
113,114c113,114
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerror 
>        b, 
113,114c113,114
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerror 
>       BZFILE* , 
113,114c113,114
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerror 
>       * , 
113,114c113,114
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerror 
>       BZFILE , 
(84.8 %, 31202 bytes)
113c113
<       int*    , 
---
>       int*     
113,114c113,114
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       * b, 
113,114c113,114
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       BZFILE b, 
113,114c113,114
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>        b, 
113,114c113,114
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       BZFILE* , 
113,114c113,114
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       * , 
113,114c113,114
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       BZFILE , 
113,114c113,114
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>        , 
114c114
<       BZFILE* b, 
---
>       * b, 
114c114
<       BZFILE* b, 
---
>        b, 
114c114
<       BZFILE* b, 
---
>       * , 
114c114
<       BZFILE* b, 
---
>        , 
114c114
<       BZFILE* b, 
---
>       * b 
114c114
<       BZFILE* b, 
---
>        b 
114c114
<       BZFILE* b, 
---
>       *  
114c114
<       BZFILE* b, 
---
>         
114c114
<       BZFILE* b, 
---
>       BZFILE b, 
114c114
<       BZFILE* b, 
---
>       BZFILE , 
114c114
<       BZFILE* b, 
---
>       BZFILE b 
114c114
<       BZFILE* b, 
---
>       BZFILE  
114,115c114,115
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE b, 
>       **  unused,  
114,115c114,115
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE , 
>       **  unused,  
114,115c114,115
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE b 
>       **  unused,  
114,115c114,115
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE  
>       **  unused,  
114c114
<       BZFILE* b, 
---
>       BZFILE* , 
114c114
<       BZFILE* b, 
---
>       BZFILE*  
114,115c114,115
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE* , 
>       **  unused,  
114,115c114,115
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE*  
>       **  unused,  
114,115c114,115
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE* , 
>       void*  unused,  
114,115c114,115
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE*  
>       void*  unused,  
114,115c114,115
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE* , 
>       *  unused,  
114,115c114,115
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE*  
>       *  unused,  
114c114
<       BZFILE* b, 
---
>       BZFILE* b 
114,115c114,115
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE* b 
>       **  unused,  
114,115c114,115
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE* b 
>       void*  unused,  
114,115c114,115
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE* b 
>       *  unused,  
114,115c114,115
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE* b 
>       void*  unused,  
114,115c114,115
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE* b 
>       *  unused,  
114,115c114,115
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE* b 
>       void  unused,  
114,115c114,115
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE* b 
>         unused,  
115c115
<       void**  unused,  
---
>       **  unused,  
115c115
<       void**  unused,  
---
>       *  unused,  
(84.8 %, 31201 bytes)
114c114
<       BZFILE* , 
---
>       BZFILE*  
114,115c114,115
<       BZFILE* , 
<       void**  unused,  
---
>       BZFILE*  
>       **  unused,  
114,115c114,115
<       BZFILE* , 
<       void**  unused,  
---
>       BZFILE*  
>       void*  unused,  
114,115c114,115
<       BZFILE* , 
<       void**  unused,  
---
>       BZFILE*  
>       *  unused,  
114,115c114,115
<       BZFILE* , 
<       void**  unused,  
---
>       BZFILE*  
>       void*  unused,  
114,115c114,115
<       BZFILE* , 
<       void**  unused,  
---
>       BZFILE*  
>       *  unused,  
114,115c114,115
<       BZFILE* , 
<       void**  unused,  
---
>       BZFILE*  
>       void  unused,  
114,115c114,115
<       BZFILE* , 
<       void**  unused,  
---
>       BZFILE*  
>         unused,  
115c115
<       void**  unused,  
---
>       **  unused,  
115c115
<       void**  unused,  
---
>       *  unused,  
115c115
<       void**  unused,  
---
>       *  unused,  
115c115
<       void**  unused,  
---
>         unused,  
115c115
<       void**  unused,  
---
>       **  ,  
115c115
<       void**  unused,  
---
>       *  ,  
115c115
<       void**  unused,  
---
>       *  ,  
115c115
<       void**  unused,  
---
>         ,  
115c115
<       void**  unused,  
---
>       void*  unused,  
115c115
<       void**  unused,  
---
>       void  unused,  
115c115
<       void**  unused,  
---
>       void*  ,  
115c115
<       void**  unused,  
---
>       void  ,  
115c115
<       void**  unused,  
---
>       void*  unused  
115c115
<       void**  unused,  
---
>       void  unused  
115c115
<       void**  unused,  
---
>       void*    
115c115
<       void**  unused,  
---
>       void    
115c115
<       void**  unused,  
---
>       void*  unused,  
115c115
<       void**  unused,  
---
>       void*  ,  
115c115
<       void**  unused,  
---
>       void*  unused  
115c115
<       void**  unused,  
---
>       void*    
115,116c115,116
<       void**  unused,  
<       int*    nUnused 
---
>       void*  unused,  
>       *    nUnused 
115,116c115,116
<       void**  unused,  
<       int*    nUnused 
---
>       void*  ,  
>       *    nUnused 
115,116c115,116
<       void**  unused,  
<       int*    nUnused 
---
>       void*  unused  
>       *    nUnused 
115,116c115,116
<       void**  unused,  
<       int*    nUnused 
---
>       void*    
>       *    nUnused 
115c115
<       void**  unused,  
---
>       void**  ,  
115c115
<       void**  unused,  
---
>       void**    
115,116c115,116
<       void**  unused,  
<       int*    nUnused 
---
>       void**  ,  
>       *    nUnused 
115,116c115,116
<       void**  unused,  
<       int*    nUnused 
---
>       void**    
>       *    nUnused 
115,116c115,116
<       void**  unused,  
<       int*    nUnused 
---
>       void**  ,  
>       int    nUnused 
115,116c115,116
<       void**  unused,  
<       int*    nUnused 
---
>       void**    
>       int    nUnused 
115,116c115,116
<       void**  unused,  
<       int*    nUnused 
---
>       void**  ,  
>           nUnused 
115,116c115,116
<       void**  unused,  
<       int*    nUnused 
---
>       void**    
>           nUnused 
115c115
<       void**  unused,  
---
>       void**  unused  
115,116c115,116
<       void**  unused,  
<       int*    nUnused 
---
>       void**  unused  
>       *    nUnused 
115,116c115,116
<       void**  unused,  
<       int*    nUnused 
---
>       void**  unused  
>       int    nUnused 
115,116c115,116
<       void**  unused,  
<       int*    nUnused 
---
>       void**  unused  
>           nUnused 
115,116c115,116
<       void**  unused,  
<       int*    nUnused 
---
>       void**  unused  
>       int*     
115,116c115,116
<       void**  unused,  
<       int*    nUnused 
---
>       void**  unused  
>       *     
115,116c115,116
<       void**  unused,  
<       int*    nUnused 
---
>       void**  unused  
>       int     
115,116c115,116
<       void**  unused,  
<       int*    nUnused 
---
>       void**  unused  
>            
116c116
<       int*    nUnused 
---
>       *    nUnused 
116c116
<       int*    nUnused 
---
>           nUnused 
116c116
<       int*    nUnused 
---
>       *     
116c116
<       int*    nUnused 
---
>            
(84.8 %, 31195 bytes)
115c115
<       void**  ,  
---
>       void**    
115,116c115,116
<       void**  ,  
<       int*    nUnused 
---
>       void**    
>       *    nUnused 
115,116c115,116
<       void**  ,  
<       int*    nUnused 
---
>       void**    
>       int    nUnused 
115,116c115,116
<       void**  ,  
<       int*    nUnused 
---
>       void**    
>           nUnused 
115,116c115,116
<       void**  ,  
<       int*    nUnused 
---
>       void**    
>       int*     
115,116c115,116
<       void**  ,  
<       int*    nUnused 
---
>       void**    
>       *     
115,116c115,116
<       void**  ,  
<       int*    nUnused 
---
>       void**    
>       int     
115,116c115,116
<       void**  ,  
<       int*    nUnused 
---
>       void**    
>            
116c116
<       int*    nUnused 
---
>       *    nUnused 
116c116
<       int*    nUnused 
---
>           nUnused 
116c116
<       int*    nUnused 
---
>       *     
116c116
<       int*    nUnused 
---
>            
116,117c116,117
<       int*    nUnused 
<    );
---
>       *    nUnused 
>    ;
116,117c116,117
<       int*    nUnused 
<    );
---
>           nUnused 
>    ;
116,117c116,117
<       int*    nUnused 
<    );
---
>       *     
>    ;
116,117c116,117
<       int*    nUnused 
<    );
---
>            
>    ;
116c116
<       int*    nUnused 
---
>       int    nUnused 
116c116
<       int*    nUnused 
---
>       int     
116,117c116,117
<       int*    nUnused 
<    );
---
>       int    nUnused 
>    ;
116,117c116,117
<       int*    nUnused 
<    );
---
>       int     
>    ;
116,117c116,117
<       int*    nUnused 
<    );
---
>       int    nUnused 
>    )
116,117c116,117
<       int*    nUnused 
<    );
---
>       int     
>    )
116,117c116,117
<       int*    nUnused 
<    );
---
>       int    nUnused 
>    
116,117c116,117
<       int*    nUnused 
<    );
---
>       int     
>    
116c116
<       int*    nUnused 
---
>       int*     
116,117c116,117
<       int*    nUnused 
<    );
---
>       int*     
>    ;
116,117c116,117
<       int*    nUnused 
<    );
---
>       int*     
>    )
116,117c116,117
<       int*    nUnused 
<    );
---
>       int*     
>    
116c116
<       int*    nUnused 
---
>       int*     
119c119
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>  int BZ_API(BZ2_bzRead) ( 
(84.8 %, 31188 bytes)
117c117
<    );
---
>    ;
117c117
<    );
---
>    
117c117
<    );
---
>    ;
119c119
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>  int BZ_API(BZ2_bzRead) ( 
117c117
<    );
---
>    
119c119
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>  int BZ_API(BZ2_bzRead) ( 
117c117
<    );
---
>    ;
119c119
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzRead) ( 
117c117
<    );
---
>    
119c119
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzRead) ( 
117c117
<    );
---
>    ;
119c119
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>   BZ_API(BZ2_bzRead) ( 
117c117
<    );
---
>    
119c119
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>   BZ_API(BZ2_bzRead) ( 
117c117
<    );
---
>    )
117c117
<    );
---
>    )
119c119
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>  int BZ_API(BZ2_bzRead) ( 
117c117
<    );
---
>    )
119c119
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzRead) ( 
117c117
<    );
---
>    )
119c119
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>   BZ_API(BZ2_bzRead) ( 
117c117
<    );
---
>    )
119c119
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
> BZ_EXTERN int (BZ2_bzRead) ( 
117c117
<    );
---
>    )
119c119
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>  int (BZ2_bzRead) ( 
117c117
<    );
---
>    )
119c119
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
> BZ_EXTERN  (BZ2_bzRead) ( 
117c117
<    );
---
>    )
119c119
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>   (BZ2_bzRead) ( 
119c119
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>  int BZ_API(BZ2_bzRead) ( 
119c119
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>   BZ_API(BZ2_bzRead) ( 
(84.8 %, 31179 bytes)
119c119
<  int BZ_API(BZ2_bzRead) ( 
---
>   BZ_API(BZ2_bzRead) ( 
119c119
<  int BZ_API(BZ2_bzRead) ( 
---
>   (BZ2_bzRead) ( 
(84.8 %, 31176 bytes)
119c119
<   BZ_API(BZ2_bzRead) ( 
---
>   (BZ2_bzRead) ( 
119c119
<   BZ_API(BZ2_bzRead) ( 
---
>   BZ2_bzRead) ( 
119c119
<   BZ_API(BZ2_bzRead) ( 
---
>   () ( 
119c119
<   BZ_API(BZ2_bzRead) ( 
---
>   ) ( 
119c119
<   BZ_API(BZ2_bzRead) ( 
---
>   (BZ2_bzRead ( 
119c119
<   BZ_API(BZ2_bzRead) ( 
---
>   BZ2_bzRead ( 
(84.8 %, 31170 bytes)
119c119
<   (BZ2_bzRead) ( 
---
>   BZ2_bzRead) ( 
119c119
<   (BZ2_bzRead) ( 
---
>   ) ( 
119c119
<   (BZ2_bzRead) ( 
---
>   BZ2_bzRead ( 
119c119
<   (BZ2_bzRead) ( 
---
>    ( 
119c119
<   (BZ2_bzRead) ( 
---
>   BZ2_bzRead)  
119c119
<   (BZ2_bzRead) ( 
---
>   )  
119c119
<   (BZ2_bzRead) ( 
---
>   BZ2_bzRead  
119c119
<   (BZ2_bzRead) ( 
---
>     
119c119
<   (BZ2_bzRead) ( 
---
>   () ( 
119c119
<   (BZ2_bzRead) ( 
---
>   ( ( 
119c119
<   (BZ2_bzRead) ( 
---
>   ()  
119c119
<   (BZ2_bzRead) ( 
---
>   (  
119,120c119,120
<   (BZ2_bzRead) ( 
<       int*    bzerror, 
---
>   () ( 
>       *    bzerror, 
119,120c119,120
<   (BZ2_bzRead) ( 
<       int*    bzerror, 
---
>   ( ( 
>       *    bzerror, 
119,120c119,120
<   (BZ2_bzRead) ( 
<       int*    bzerror, 
---
>   ()  
>       *    bzerror, 
119,120c119,120
<   (BZ2_bzRead) ( 
<       int*    bzerror, 
---
>   (  
>       *    bzerror, 
119c119
<   (BZ2_bzRead) ( 
---
>   (BZ2_bzRead ( 
119c119
<   (BZ2_bzRead) ( 
---
>   (BZ2_bzRead  
119,120c119,120
<   (BZ2_bzRead) ( 
<       int*    bzerror, 
---
>   (BZ2_bzRead ( 
>       *    bzerror, 
119,120c119,120
<   (BZ2_bzRead) ( 
<       int*    bzerror, 
---
>   (BZ2_bzRead  
>       *    bzerror, 
119,120c119,120
<   (BZ2_bzRead) ( 
<       int*    bzerror, 
---
>   (BZ2_bzRead ( 
>       int    bzerror, 
119,120c119,120
<   (BZ2_bzRead) ( 
<       int*    bzerror, 
---
>   (BZ2_bzRead  
>       int    bzerror, 
119,120c119,120
<   (BZ2_bzRead) ( 
<       int*    bzerror, 
---
>   (BZ2_bzRead ( 
>           bzerror, 
119,120c119,120
<   (BZ2_bzRead) ( 
<       int*    bzerror, 
---
>   (BZ2_bzRead  
>           bzerror, 
119c119
<   (BZ2_bzRead) ( 
---
>   (BZ2_bzRead)  
(84.8 %, 31168 bytes)
119,120c119,120
<   BZ2_bzRead ( 
<       int*    bzerror, 
---
>    ( 
>       *    bzerror, 
119,120c119,120
<   BZ2_bzRead ( 
<       int*    bzerror, 
---
>     
>       *    bzerror, 
119,120c119,120
<   BZ2_bzRead ( 
<       int*    bzerror, 
---
>    ( 
>       int    bzerror, 
119,120c119,120
<   BZ2_bzRead ( 
<       int*    bzerror, 
---
>     
>       int    bzerror, 
119,120c119,120
<   BZ2_bzRead ( 
<       int*    bzerror, 
---
>    ( 
>           bzerror, 
119,120c119,120
<   BZ2_bzRead ( 
<       int*    bzerror, 
---
>     
>           bzerror, 
119c119
<   BZ2_bzRead ( 
---
>   BZ2_bzRead  
119,120c119,120
<   BZ2_bzRead ( 
<       int*    bzerror, 
---
>   BZ2_bzRead  
>       *    bzerror, 
119,120c119,120
<   BZ2_bzRead ( 
<       int*    bzerror, 
---
>   BZ2_bzRead  
>       int    bzerror, 
119,120c119,120
<   BZ2_bzRead ( 
<       int*    bzerror, 
---
>   BZ2_bzRead  
>           bzerror, 
119,120c119,120
<   BZ2_bzRead ( 
<       int*    bzerror, 
---
>   BZ2_bzRead  
>       int*    , 
119,120c119,120
<   BZ2_bzRead ( 
<       int*    bzerror, 
---
>   BZ2_bzRead  
>       *    , 
119,120c119,120
<   BZ2_bzRead ( 
<       int*    bzerror, 
---
>   BZ2_bzRead  
>       int    , 
119,120c119,120
<   BZ2_bzRead ( 
<       int*    bzerror, 
---
>   BZ2_bzRead  
>           , 
120c120
<       int*    bzerror, 
---
>       *    bzerror, 
120c120
<       int*    bzerror, 
---
>           bzerror, 
120c120
<       int*    bzerror, 
---
>       *    , 
120c120
<       int*    bzerror, 
---
>           , 
120c120
<       int*    bzerror, 
---
>       *    bzerror 
120c120
<       int*    bzerror, 
---
>           bzerror 
120c120
<       int*    bzerror, 
---
>       *     
120c120
<       int*    bzerror, 
---
>            
120c120
<       int*    bzerror, 
---
>       int    bzerror, 
120c120
<       int*    bzerror, 
---
>       int    , 
120c120
<       int*    bzerror, 
---
>       int    bzerror 
120c120
<       int*    bzerror, 
---
>       int     
120,121c120,121
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int    bzerror, 
>       * b, 
120,121c120,121
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int    , 
>       * b, 
120,121c120,121
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int    bzerror 
>       * b, 
120,121c120,121
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int     
>       * b, 
120c120
<       int*    bzerror, 
---
>       int*    , 
120c120
<       int*    bzerror, 
---
>       int*     
120,121c120,121
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    , 
>       * b, 
120,121c120,121
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*     
>       * b, 
120,121c120,121
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    , 
>       BZFILE b, 
120,121c120,121
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*     
>       BZFILE b, 
120,121c120,121
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    , 
>        b, 
120,121c120,121
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*     
>        b, 
120c120
<       int*    bzerror, 
---
>       int*    bzerror 
120,121c120,121
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerror 
>       * b, 
120,121c120,121
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerror 
>       BZFILE b, 
120,121c120,121
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerror 
>        b, 
120,121c120,121
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerror 
>       BZFILE* , 
(84.8 %, 31161 bytes)
120c120
<       int*    , 
---
>       int*     
120,121c120,121
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       * b, 
120,121c120,121
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       BZFILE b, 
120,121c120,121
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>        b, 
120,121c120,121
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       BZFILE* , 
120,121c120,121
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       * , 
120,121c120,121
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       BZFILE , 
120,121c120,121
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>        , 
121c121
<       BZFILE* b, 
---
>       * b, 
121c121
<       BZFILE* b, 
---
>        b, 
121c121
<       BZFILE* b, 
---
>       * , 
121c121
<       BZFILE* b, 
---
>        , 
121c121
<       BZFILE* b, 
---
>       * b 
121c121
<       BZFILE* b, 
---
>        b 
121c121
<       BZFILE* b, 
---
>       *  
121c121
<       BZFILE* b, 
---
>         
121c121
<       BZFILE* b, 
---
>       BZFILE b, 
121c121
<       BZFILE* b, 
---
>       BZFILE , 
121c121
<       BZFILE* b, 
---
>       BZFILE b 
121c121
<       BZFILE* b, 
---
>       BZFILE  
121,122c121,122
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE b, 
>       *   buf, 
121,122c121,122
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE , 
>       *   buf, 
121,122c121,122
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE b 
>       *   buf, 
121,122c121,122
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE  
>       *   buf, 
121c121
<       BZFILE* b, 
---
>       BZFILE* , 
121c121
<       BZFILE* b, 
---
>       BZFILE*  
121,122c121,122
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* , 
>       *   buf, 
121,122c121,122
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE*  
>       *   buf, 
121,122c121,122
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* , 
>       void   buf, 
121,122c121,122
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE*  
>       void   buf, 
121,122c121,122
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* , 
>          buf, 
121,122c121,122
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE*  
>          buf, 
121c121
<       BZFILE* b, 
---
>       BZFILE* b 
121,122c121,122
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* b 
>       *   buf, 
121,122c121,122
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* b 
>       void   buf, 
121,122c121,122
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* b 
>          buf, 
121,122c121,122
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* b 
>       void*   , 
121,122c121,122
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* b 
>       *   , 
121,122c121,122
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* b 
>       void   , 
121,122c121,122
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* b 
>          , 
122c122
<       void*   buf, 
---
>       *   buf, 
122c122
<       void*   buf, 
---
>          buf, 
122c122
<       void*   buf, 
---
>       *   , 
(84.8 %, 31160 bytes)
121c121
<       BZFILE* , 
---
>       BZFILE*  
121,122c121,122
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>       *   buf, 
121,122c121,122
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>       void   buf, 
121,122c121,122
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>          buf, 
121,122c121,122
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>       void*   , 
121,122c121,122
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>       *   , 
121,122c121,122
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>       void   , 
121,122c121,122
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>          , 
122c122
<       void*   buf, 
---
>       *   buf, 
122c122
<       void*   buf, 
---
>          buf, 
122c122
<       void*   buf, 
---
>       *   , 
122c122
<       void*   buf, 
---
>          , 
122c122
<       void*   buf, 
---
>       *   buf 
122c122
<       void*   buf, 
---
>          buf 
122c122
<       void*   buf, 
---
>       *    
122c122
<       void*   buf, 
---
>           
122c122
<       void*   buf, 
---
>       void   buf, 
122c122
<       void*   buf, 
---
>       void   , 
122c122
<       void*   buf, 
---
>       void   buf 
122c122
<       void*   buf, 
---
>       void    
122,123c122,123
<       void*   buf, 
<       int     len 
---
>       void   buf, 
>            len 
122,123c122,123
<       void*   buf, 
<       int     len 
---
>       void   , 
>            len 
122,123c122,123
<       void*   buf, 
<       int     len 
---
>       void   buf 
>            len 
122,123c122,123
<       void*   buf, 
<       int     len 
---
>       void    
>            len 
122c122
<       void*   buf, 
---
>       void*   , 
122c122
<       void*   buf, 
---
>       void*    
122,123c122,123
<       void*   buf, 
<       int     len 
---
>       void*   , 
>            len 
122,123c122,123
<       void*   buf, 
<       int     len 
---
>       void*    
>            len 
122,123c122,123
<       void*   buf, 
<       int     len 
---
>       void*   , 
>       int      
(84.8 %, 31157 bytes)
122c122
<       void*   , 
---
>       void*    
122,123c122,123
<       void*   , 
<       int     len 
---
>       void*    
>            len 
122,123c122,123
<       void*   , 
<       int     len 
---
>       void*    
>       int      
122,123c122,123
<       void*   , 
<       int     len 
---
>       void*    
>             
122c122
<       void*   , 
---
>       void*    
124c124
<    );
---
>    ;
122,124c122,124
<       void*   , 
<       int     len 
<    );
---
>       void*    
>            len 
>    ;
122,124c122,124
<       void*   , 
<       int     len 
<    );
---
>       void*    
>       int      
>    ;
122,124c122,124
<       void*   , 
<       int     len 
<    );
---
>       void*    
>             
>    ;
123c123
<       int     len 
---
>            len 
123c123
<       int     len 
---
>             
123,124c123,124
<       int     len 
<    );
---
>            len 
>    ;
123,124c123,124
<       int     len 
<    );
---
>             
>    ;
123,124c123,124
<       int     len 
<    );
---
>            len 
>    )
123,124c123,124
<       int     len 
<    );
---
>             
>    )
123,124c123,124
<       int     len 
<    );
---
>            len 
>    
123,124c123,124
<       int     len 
<    );
---
>             
>    
123c123
<       int     len 
---
>       int      
123,124c123,124
<       int     len 
<    );
---
>       int      
>    ;
123,124c123,124
<       int     len 
<    );
---
>       int      
>    )
123,124c123,124
<       int     len 
<    );
---
>       int      
>    
123c123
<       int     len 
---
>       int      
126c126
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
(84.8 %, 31154 bytes)
124c124
<    );
---
>    ;
124c124
<    );
---
>    
124c124
<    );
---
>    ;
126c126
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
124c124
<    );
---
>    
126c126
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
124c124
<    );
---
>    ;
126c126
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN * BZ_API(BZ2_bzWriteOpen) ( 
124c124
<    );
---
>    
126c126
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN * BZ_API(BZ2_bzWriteOpen) ( 
124c124
<    );
---
>    ;
126c126
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  * BZ_API(BZ2_bzWriteOpen) ( 
124c124
<    );
---
>    
126c126
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  * BZ_API(BZ2_bzWriteOpen) ( 
124c124
<    );
---
>    )
124c124
<    );
---
>    )
126c126
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
124c124
<    );
---
>    )
126c126
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN * BZ_API(BZ2_bzWriteOpen) ( 
124c124
<    );
---
>    )
126c126
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  * BZ_API(BZ2_bzWriteOpen) ( 
124c124
<    );
---
>    )
126c126
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE BZ_API(BZ2_bzWriteOpen) ( 
124c124
<    );
---
>    )
126c126
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  BZFILE BZ_API(BZ2_bzWriteOpen) ( 
124c124
<    );
---
>    )
126c126
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzWriteOpen) ( 
124c124
<    );
---
>    )
126c126
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>   BZ_API(BZ2_bzWriteOpen) ( 
126c126
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
126c126
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  * BZ_API(BZ2_bzWriteOpen) ( 
126c126
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  BZFILE BZ_API(BZ2_bzWriteOpen) ( 
126c126
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>   BZ_API(BZ2_bzWriteOpen) ( 
(84.8 %, 31145 bytes)
126c126
<  BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  * BZ_API(BZ2_bzWriteOpen) ( 
126c126
<  BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>   BZ_API(BZ2_bzWriteOpen) ( 
126c126
<  BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  * (BZ2_bzWriteOpen) ( 
(84.8 %, 31139 bytes)
126c126
<  * BZ_API(BZ2_bzWriteOpen) ( 
---
>   BZ_API(BZ2_bzWriteOpen) ( 
126c126
<  * BZ_API(BZ2_bzWriteOpen) ( 
---
>   (BZ2_bzWriteOpen) ( 
126c126
<  * BZ_API(BZ2_bzWriteOpen) ( 
---
>   BZ_APIBZ2_bzWriteOpen) ( 
126c126
<  * BZ_API(BZ2_bzWriteOpen) ( 
---
>   BZ2_bzWriteOpen) ( 
126c126
<  * BZ_API(BZ2_bzWriteOpen) ( 
---
>   BZ_API() ( 
126c126
<  * BZ_API(BZ2_bzWriteOpen) ( 
---
>   () ( 
126c126
<  * BZ_API(BZ2_bzWriteOpen) ( 
---
>   BZ_API) ( 
126c126
<  * BZ_API(BZ2_bzWriteOpen) ( 
---
>   ) ( 
126c126
<  * BZ_API(BZ2_bzWriteOpen) ( 
---
>  * (BZ2_bzWriteOpen) ( 
126c126
<  * BZ_API(BZ2_bzWriteOpen) ( 
---
>  * BZ2_bzWriteOpen) ( 
126c126
<  * BZ_API(BZ2_bzWriteOpen) ( 
---
>  * () ( 
126c126
<  * BZ_API(BZ2_bzWriteOpen) ( 
---
>  * ) ( 
126c126
<  * BZ_API(BZ2_bzWriteOpen) ( 
---
>  * (BZ2_bzWriteOpen ( 
126c126
<  * BZ_API(BZ2_bzWriteOpen) ( 
---
>  * BZ2_bzWriteOpen ( 
(84.8 %, 31133 bytes)
126c126
<  * (BZ2_bzWriteOpen) ( 
---
>  * BZ2_bzWriteOpen) ( 
126c126
<  * (BZ2_bzWriteOpen) ( 
---
>  * ) ( 
126c126
<  * (BZ2_bzWriteOpen) ( 
---
>  * BZ2_bzWriteOpen ( 
126c126
<  * (BZ2_bzWriteOpen) ( 
---
>  *  ( 
126c126
<  * (BZ2_bzWriteOpen) ( 
---
>  * BZ2_bzWriteOpen)  
126c126
<  * (BZ2_bzWriteOpen) ( 
---
>  * )  
126c126
<  * (BZ2_bzWriteOpen) ( 
---
>  * BZ2_bzWriteOpen  
126c126
<  * (BZ2_bzWriteOpen) ( 
---
>  *   
126c126
<  * (BZ2_bzWriteOpen) ( 
---
>  * () ( 
126c126
<  * (BZ2_bzWriteOpen) ( 
---
>  * ( ( 
126c126
<  * (BZ2_bzWriteOpen) ( 
---
>  * ()  
126c126
<  * (BZ2_bzWriteOpen) ( 
---
>  * (  
126,127c126,127
<  * (BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>  * () ( 
>       *  bzerror,      
126,127c126,127
<  * (BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>  * ( ( 
>       *  bzerror,      
126,127c126,127
<  * (BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>  * ()  
>       *  bzerror,      
126,127c126,127
<  * (BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>  * (  
>       *  bzerror,      
126c126
<  * (BZ2_bzWriteOpen) ( 
---
>  * (BZ2_bzWriteOpen ( 
126c126
<  * (BZ2_bzWriteOpen) ( 
---
>  * (BZ2_bzWriteOpen  
126,127c126,127
<  * (BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>  * (BZ2_bzWriteOpen ( 
>       *  bzerror,      
126,127c126,127
<  * (BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>  * (BZ2_bzWriteOpen  
>       *  bzerror,      
126,127c126,127
<  * (BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>  * (BZ2_bzWriteOpen ( 
>       int  bzerror,      
126,127c126,127
<  * (BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>  * (BZ2_bzWriteOpen  
>       int  bzerror,      
126,127c126,127
<  * (BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>  * (BZ2_bzWriteOpen ( 
>         bzerror,      
126,127c126,127
<  * (BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>  * (BZ2_bzWriteOpen  
>         bzerror,      
126c126
<  * (BZ2_bzWriteOpen) ( 
---
>  * (BZ2_bzWriteOpen)  
(84.8 %, 31131 bytes)
126,127c126,127
<  * BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  *  ( 
>       *  bzerror,      
126,127c126,127
<  * BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  *   
>       *  bzerror,      
126,127c126,127
<  * BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  *  ( 
>       int  bzerror,      
126,127c126,127
<  * BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  *   
>       int  bzerror,      
126,127c126,127
<  * BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  *  ( 
>         bzerror,      
126,127c126,127
<  * BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  *   
>         bzerror,      
126c126
<  * BZ2_bzWriteOpen ( 
---
>  * BZ2_bzWriteOpen  
126,127c126,127
<  * BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  * BZ2_bzWriteOpen  
>       *  bzerror,      
126,127c126,127
<  * BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  * BZ2_bzWriteOpen  
>       int  bzerror,      
126,127c126,127
<  * BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  * BZ2_bzWriteOpen  
>         bzerror,      
126,127c126,127
<  * BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  * BZ2_bzWriteOpen  
>       int*  ,      
126,127c126,127
<  * BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  * BZ2_bzWriteOpen  
>       *  ,      
126,127c126,127
<  * BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  * BZ2_bzWriteOpen  
>       int  ,      
126,127c126,127
<  * BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  * BZ2_bzWriteOpen  
>         ,      
127c127
<       int*  bzerror,      
---
>       *  bzerror,      
127c127
<       int*  bzerror,      
---
>         bzerror,      
127c127
<       int*  bzerror,      
---
>       *  ,      
127c127
<       int*  bzerror,      
---
>         ,      
127c127
<       int*  bzerror,      
---
>       *  bzerror      
127c127
<       int*  bzerror,      
---
>         bzerror      
127c127
<       int*  bzerror,      
---
>       *        
127c127
<       int*  bzerror,      
---
>               
127c127
<       int*  bzerror,      
---
>       int  bzerror,      
127c127
<       int*  bzerror,      
---
>       int  ,      
127c127
<       int*  bzerror,      
---
>       int  bzerror      
127c127
<       int*  bzerror,      
---
>       int        
127,128c127,128
<       int*  bzerror,      
<       FILE* f, 
---
>       int  bzerror,      
>       * f, 
127,128c127,128
<       int*  bzerror,      
<       FILE* f, 
---
>       int  ,      
>       * f, 
127,128c127,128
<       int*  bzerror,      
<       FILE* f, 
---
>       int  bzerror      
>       * f, 
127,128c127,128
<       int*  bzerror,      
<       FILE* f, 
---
>       int        
>       * f, 
127c127
<       int*  bzerror,      
---
>       int*  ,      
127c127
<       int*  bzerror,      
---
>       int*        
127,128c127,128
<       int*  bzerror,      
<       FILE* f, 
---
>       int*  ,      
>       * f, 
127,128c127,128
<       int*  bzerror,      
<       FILE* f, 
---
>       int*        
>       * f, 
127,128c127,128
<       int*  bzerror,      
<       FILE* f, 
---
>       int*  ,      
>       FILE f, 
127,128c127,128
<       int*  bzerror,      
<       FILE* f, 
---
>       int*        
>       FILE f, 
127,128c127,128
<       int*  bzerror,      
<       FILE* f, 
---
>       int*  ,      
>        f, 
127,128c127,128
<       int*  bzerror,      
<       FILE* f, 
---
>       int*        
>        f, 
127c127
<       int*  bzerror,      
---
>       int*  bzerror      
127,128c127,128
<       int*  bzerror,      
<       FILE* f, 
---
>       int*  bzerror      
>       * f, 
127,128c127,128
<       int*  bzerror,      
<       FILE* f, 
---
>       int*  bzerror      
>       FILE f, 
127,128c127,128
<       int*  bzerror,      
<       FILE* f, 
---
>       int*  bzerror      
>        f, 
127,128c127,128
<       int*  bzerror,      
<       FILE* f, 
---
>       int*  bzerror      
>       FILE* , 
127,128c127,128
<       int*  bzerror,      
<       FILE* f, 
---
>       int*  bzerror      
>       * , 
127,128c127,128
<       int*  bzerror,      
<       FILE* f, 
---
>       int*  bzerror      
>       FILE , 
127,128c127,128
<       int*  bzerror,      
<       FILE* f, 
---
>       int*  bzerror      
>        , 
(84.8 %, 31124 bytes)
127c127
<       int*  ,      
---
>       int*        
127,128c127,128
<       int*  ,      
<       FILE* f, 
---
>       int*        
>       * f, 
127,128c127,128
<       int*  ,      
<       FILE* f, 
---
>       int*        
>       FILE f, 
127,128c127,128
<       int*  ,      
<       FILE* f, 
---
>       int*        
>        f, 
127,128c127,128
<       int*  ,      
<       FILE* f, 
---
>       int*        
>       FILE* , 
127,128c127,128
<       int*  ,      
<       FILE* f, 
---
>       int*        
>       * , 
127,128c127,128
<       int*  ,      
<       FILE* f, 
---
>       int*        
>       FILE , 
127,128c127,128
<       int*  ,      
<       FILE* f, 
---
>       int*        
>        , 
128c128
<       FILE* f, 
---
>       * f, 
128c128
<       FILE* f, 
---
>        f, 
128c128
<       FILE* f, 
---
>       * , 
128c128
<       FILE* f, 
---
>        , 
128c128
<       FILE* f, 
---
>       * f 
128c128
<       FILE* f, 
---
>        f 
128c128
<       FILE* f, 
---
>       *  
128c128
<       FILE* f, 
---
>         
128c128
<       FILE* f, 
---
>       FILE f, 
128c128
<       FILE* f, 
---
>       FILE , 
128c128
<       FILE* f, 
---
>       FILE f 
128c128
<       FILE* f, 
---
>       FILE  
128,129c128,129
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE f, 
>          blockSize100k, 
128,129c128,129
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE , 
>          blockSize100k, 
128,129c128,129
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE f 
>          blockSize100k, 
128,129c128,129
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE  
>          blockSize100k, 
128c128
<       FILE* f, 
---
>       FILE* , 
128c128
<       FILE* f, 
---
>       FILE*  
128,129c128,129
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE* , 
>          blockSize100k, 
128,129c128,129
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE*  
>          blockSize100k, 
128,129c128,129
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE* , 
>       int   , 
(84.8 %, 31123 bytes)
128c128
<       FILE* , 
---
>       FILE*  
128,129c128,129
<       FILE* , 
<       int   blockSize100k, 
---
>       FILE*  
>          blockSize100k, 
128,129c128,129
<       FILE* , 
<       int   blockSize100k, 
---
>       FILE*  
>       int   , 
128,129c128,129
<       FILE* , 
<       int   blockSize100k, 
---
>       FILE*  
>          , 
128,129c128,129
<       FILE* , 
<       int   blockSize100k, 
---
>       FILE*  
>       int   blockSize100k 
128,129c128,129
<       FILE* , 
<       int   blockSize100k, 
---
>       FILE*  
>          blockSize100k 
128,129c128,129
<       FILE* , 
<       int   blockSize100k, 
---
>       FILE*  
>       int    
128,129c128,129
<       FILE* , 
<       int   blockSize100k, 
---
>       FILE*  
>           
129c129
<       int   blockSize100k, 
---
>          blockSize100k, 
129c129
<       int   blockSize100k, 
---
>          , 
129c129
<       int   blockSize100k, 
---
>          blockSize100k 
129c129
<       int   blockSize100k, 
---
>           
129,130c129,130
<       int   blockSize100k, 
<       int   verbosity, 
---
>          blockSize100k, 
>          verbosity, 
129,130c129,130
<       int   blockSize100k, 
<       int   verbosity, 
---
>          , 
>          verbosity, 
129,130c129,130
<       int   blockSize100k, 
<       int   verbosity, 
---
>          blockSize100k 
>          verbosity, 
129,130c129,130
<       int   blockSize100k, 
<       int   verbosity, 
---
>           
>          verbosity, 
129c129
<       int   blockSize100k, 
---
>       int   , 
129c129
<       int   blockSize100k, 
---
>       int    
129,130c129,130
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int   , 
>          verbosity, 
129,130c129,130
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int    
>          verbosity, 
129,130c129,130
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int   , 
>       int   , 
(84.8 %, 31110 bytes)
129c129
<       int   , 
---
>       int    
129,130c129,130
<       int   , 
<       int   verbosity, 
---
>       int    
>          verbosity, 
128a129
>       int    
130d130
<       int   verbosity, 
129,130c129,130
<       int   , 
<       int   verbosity, 
---
>       int    
>          , 
129,130c129,130
<       int   , 
<       int   verbosity, 
---
>       int    
>       int   verbosity 
129,130c129,130
<       int   , 
<       int   verbosity, 
---
>       int    
>          verbosity 
129,130c129,130
<       int   , 
<       int   verbosity, 
---
>       int    
>       int    
129,130c129,130
<       int   , 
<       int   verbosity, 
---
>       int    
>           
130c130
<       int   verbosity, 
---
>          verbosity, 
130c130
<       int   verbosity, 
---
>          , 
130c130
<       int   verbosity, 
---
>          verbosity 
130c130
<       int   verbosity, 
---
>           
130,131c130,131
<       int   verbosity, 
<       int   workFactor 
---
>          verbosity, 
>          workFactor 
130,131c130,131
<       int   verbosity, 
<       int   workFactor 
---
>          , 
>          workFactor 
130,131c130,131
<       int   verbosity, 
<       int   workFactor 
---
>          verbosity 
>          workFactor 
130,131c130,131
<       int   verbosity, 
<       int   workFactor 
---
>           
>          workFactor 
130c130
<       int   verbosity, 
---
>       int   , 
130c130
<       int   verbosity, 
---
>       int    
130,131c130,131
<       int   verbosity, 
<       int   workFactor 
---
>       int   , 
>          workFactor 
130,131c130,131
<       int   verbosity, 
<       int   workFactor 
---
>       int    
>          workFactor 
130,131c130,131
<       int   verbosity, 
<       int   workFactor 
---
>       int   , 
>       int    
(84.8 %, 31101 bytes)
130c130
<       int   , 
---
>       int    
130,131c130,131
<       int   , 
<       int   workFactor 
---
>       int    
>          workFactor 
130,131c130,131
<       int   , 
<       int   workFactor 
---
>       int    
>       int    
130,131c130,131
<       int   , 
<       int   workFactor 
---
>       int    
>           
130c130
<       int   , 
---
>       int    
132c132
<    );
---
>    ;
130,132c130,132
<       int   , 
<       int   workFactor 
<    );
---
>       int    
>          workFactor 
>    ;
130,132c130,132
<       int   , 
<       int   workFactor 
<    );
---
>       int    
>       int    
>    ;
130,132c130,132
<       int   , 
<       int   workFactor 
<    );
---
>       int    
>           
>    ;
131c131
<       int   workFactor 
---
>          workFactor 
131c131
<       int   workFactor 
---
>           
131,132c131,132
<       int   workFactor 
<    );
---
>          workFactor 
>    ;
131,132c131,132
<       int   workFactor 
<    );
---
>           
>    ;
131,132c131,132
<       int   workFactor 
<    );
---
>          workFactor 
>    )
131,132c131,132
<       int   workFactor 
<    );
---
>           
>    )
131,132c131,132
<       int   workFactor 
<    );
---
>          workFactor 
>    
131,132c131,132
<       int   workFactor 
<    );
---
>           
>    
131c131
<       int   workFactor 
---
>       int    
131,132c131,132
<       int   workFactor 
<    );
---
>       int    
>    ;
131,132c131,132
<       int   workFactor 
<    );
---
>       int    
>    )
131,132c131,132
<       int   workFactor 
<    );
---
>       int    
>    
131c131
<       int   workFactor 
---
>       int    
134c134
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>  void BZ_API(BZ2_bzWrite) ( 
(84.8 %, 31091 bytes)
132c132
<    );
---
>    ;
132c132
<    );
---
>    
132c132
<    );
---
>    ;
134c134
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>  void BZ_API(BZ2_bzWrite) ( 
132c132
<    );
---
>    
134c134
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>  void BZ_API(BZ2_bzWrite) ( 
132c132
<    );
---
>    ;
134c134
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzWrite) ( 
132c132
<    );
---
>    
134c134
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzWrite) ( 
132c132
<    );
---
>    ;
134c134
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>   BZ_API(BZ2_bzWrite) ( 
132c132
<    );
---
>    
134c134
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>   BZ_API(BZ2_bzWrite) ( 
132c132
<    );
---
>    )
132c132
<    );
---
>    )
134c134
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>  void BZ_API(BZ2_bzWrite) ( 
132c132
<    );
---
>    )
134c134
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzWrite) ( 
132c132
<    );
---
>    )
134c134
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>   BZ_API(BZ2_bzWrite) ( 
132c132
<    );
---
>    )
134c134
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
> BZ_EXTERN void (BZ2_bzWrite) ( 
132c132
<    );
---
>    )
134c134
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>  void (BZ2_bzWrite) ( 
132c132
<    );
---
>    )
134c134
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
> BZ_EXTERN  (BZ2_bzWrite) ( 
132c132
<    );
---
>    )
134c134
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>   (BZ2_bzWrite) ( 
134c134
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>  void BZ_API(BZ2_bzWrite) ( 
134c134
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>   BZ_API(BZ2_bzWrite) ( 
134c134
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>  void (BZ2_bzWrite) ( 
(84.8 %, 31082 bytes)
134c134
<  void BZ_API(BZ2_bzWrite) ( 
---
>   BZ_API(BZ2_bzWrite) ( 
134c134
<  void BZ_API(BZ2_bzWrite) ( 
---
>   (BZ2_bzWrite) ( 
134c134
<  void BZ_API(BZ2_bzWrite) ( 
---
>   BZ_APIBZ2_bzWrite) ( 
134c134
<  void BZ_API(BZ2_bzWrite) ( 
---
>   BZ2_bzWrite) ( 
134c134
<  void BZ_API(BZ2_bzWrite) ( 
---
>   BZ_API() ( 
134c134
<  void BZ_API(BZ2_bzWrite) ( 
---
>   () ( 
134c134
<  void BZ_API(BZ2_bzWrite) ( 
---
>   BZ_API) ( 
134c134
<  void BZ_API(BZ2_bzWrite) ( 
---
>   ) ( 
134c134
<  void BZ_API(BZ2_bzWrite) ( 
---
>  void (BZ2_bzWrite) ( 
134c134
<  void BZ_API(BZ2_bzWrite) ( 
---
>  void BZ2_bzWrite) ( 
134c134
<  void BZ_API(BZ2_bzWrite) ( 
---
>  void () ( 
134c134
<  void BZ_API(BZ2_bzWrite) ( 
---
>  void ) ( 
134c134
<  void BZ_API(BZ2_bzWrite) ( 
---
>  void (BZ2_bzWrite ( 
134c134
<  void BZ_API(BZ2_bzWrite) ( 
---
>  void BZ2_bzWrite ( 
(84.8 %, 31076 bytes)
134c134
<  void (BZ2_bzWrite) ( 
---
>  void BZ2_bzWrite) ( 
134c134
<  void (BZ2_bzWrite) ( 
---
>  void ) ( 
134c134
<  void (BZ2_bzWrite) ( 
---
>  void BZ2_bzWrite ( 
134c134
<  void (BZ2_bzWrite) ( 
---
>  void  ( 
134c134
<  void (BZ2_bzWrite) ( 
---
>  void BZ2_bzWrite)  
134c134
<  void (BZ2_bzWrite) ( 
---
>  void )  
134c134
<  void (BZ2_bzWrite) ( 
---
>  void BZ2_bzWrite  
134c134
<  void (BZ2_bzWrite) ( 
---
>  void   
134c134
<  void (BZ2_bzWrite) ( 
---
>  void () ( 
134c134
<  void (BZ2_bzWrite) ( 
---
>  void ( ( 
134c134
<  void (BZ2_bzWrite) ( 
---
>  void ()  
134c134
<  void (BZ2_bzWrite) ( 
---
>  void (  
134,135c134,135
<  void (BZ2_bzWrite) ( 
<       int*    bzerror, 
---
>  void () ( 
>       *    bzerror, 
134,135c134,135
<  void (BZ2_bzWrite) ( 
<       int*    bzerror, 
---
>  void ( ( 
>       *    bzerror, 
134,135c134,135
<  void (BZ2_bzWrite) ( 
<       int*    bzerror, 
---
>  void ()  
>       *    bzerror, 
134,135c134,135
<  void (BZ2_bzWrite) ( 
<       int*    bzerror, 
---
>  void (  
>       *    bzerror, 
134c134
<  void (BZ2_bzWrite) ( 
---
>  void (BZ2_bzWrite ( 
134c134
<  void (BZ2_bzWrite) ( 
---
>  void (BZ2_bzWrite  
134,135c134,135
<  void (BZ2_bzWrite) ( 
<       int*    bzerror, 
---
>  void (BZ2_bzWrite ( 
>       *    bzerror, 
134,135c134,135
<  void (BZ2_bzWrite) ( 
<       int*    bzerror, 
---
>  void (BZ2_bzWrite  
>       *    bzerror, 
134,135c134,135
<  void (BZ2_bzWrite) ( 
<       int*    bzerror, 
---
>  void (BZ2_bzWrite ( 
>       int    bzerror, 
134,135c134,135
<  void (BZ2_bzWrite) ( 
<       int*    bzerror, 
---
>  void (BZ2_bzWrite  
>       int    bzerror, 
(84.8 %, 31074 bytes)
134,135c134,135
<  void BZ2_bzWrite ( 
<       int*    bzerror, 
---
>  void  ( 
>       *    bzerror, 
134,135c134,135
<  void BZ2_bzWrite ( 
<       int*    bzerror, 
---
>  void   
>       *    bzerror, 
134,135c134,135
<  void BZ2_bzWrite ( 
<       int*    bzerror, 
---
>  void  ( 
>       int    bzerror, 
134,135c134,135
<  void BZ2_bzWrite ( 
<       int*    bzerror, 
---
>  void   
>       int    bzerror, 
134,135c134,135
<  void BZ2_bzWrite ( 
<       int*    bzerror, 
---
>  void  ( 
>           bzerror, 
134,135c134,135
<  void BZ2_bzWrite ( 
<       int*    bzerror, 
---
>  void   
>           bzerror, 
134c134
<  void BZ2_bzWrite ( 
---
>  void BZ2_bzWrite  
134,135c134,135
<  void BZ2_bzWrite ( 
<       int*    bzerror, 
---
>  void BZ2_bzWrite  
>       *    bzerror, 
134,135c134,135
<  void BZ2_bzWrite ( 
<       int*    bzerror, 
---
>  void BZ2_bzWrite  
>       int    bzerror, 
134,135c134,135
<  void BZ2_bzWrite ( 
<       int*    bzerror, 
---
>  void BZ2_bzWrite  
>           bzerror, 
134,135c134,135
<  void BZ2_bzWrite ( 
<       int*    bzerror, 
---
>  void BZ2_bzWrite  
>       int*    , 
134,135c134,135
<  void BZ2_bzWrite ( 
<       int*    bzerror, 
---
>  void BZ2_bzWrite  
>       *    , 
134,135c134,135
<  void BZ2_bzWrite ( 
<       int*    bzerror, 
---
>  void BZ2_bzWrite  
>       int    , 
134,135c134,135
<  void BZ2_bzWrite ( 
<       int*    bzerror, 
---
>  void BZ2_bzWrite  
>           , 
135c135
<       int*    bzerror, 
---
>       *    bzerror, 
135c135
<       int*    bzerror, 
---
>           bzerror, 
135c135
<       int*    bzerror, 
---
>       *    , 
135c135
<       int*    bzerror, 
---
>           , 
135c135
<       int*    bzerror, 
---
>       *    bzerror 
135c135
<       int*    bzerror, 
---
>           bzerror 
135c135
<       int*    bzerror, 
---
>       *     
135c135
<       int*    bzerror, 
---
>            
135c135
<       int*    bzerror, 
---
>       int    bzerror, 
135c135
<       int*    bzerror, 
---
>       int    , 
135c135
<       int*    bzerror, 
---
>       int    bzerror 
135c135
<       int*    bzerror, 
---
>       int     
135,136c135,136
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int    bzerror, 
>       * b, 
135,136c135,136
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int    , 
>       * b, 
135,136c135,136
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int    bzerror 
>       * b, 
135,136c135,136
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int     
>       * b, 
135c135
<       int*    bzerror, 
---
>       int*    , 
135c135
<       int*    bzerror, 
---
>       int*     
135,136c135,136
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    , 
>       * b, 
135,136c135,136
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*     
>       * b, 
135,136c135,136
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    , 
>       BZFILE b, 
135,136c135,136
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*     
>       BZFILE b, 
135,136c135,136
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    , 
>        b, 
135,136c135,136
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*     
>        b, 
135c135
<       int*    bzerror, 
---
>       int*    bzerror 
135,136c135,136
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerror 
>       * b, 
135,136c135,136
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerror 
>       BZFILE b, 
135,136c135,136
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerror 
>        b, 
135,136c135,136
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerror 
>       BZFILE* , 
135,136c135,136
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerror 
>       * , 
135,136c135,136
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerror 
>       BZFILE , 
135,136c135,136
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerror 
>        , 
136c136
<       BZFILE* b, 
---
>       * b, 
136c136
<       BZFILE* b, 
---
>        b, 
(84.8 %, 31067 bytes)
135c135
<       int*    , 
---
>       int*     
135,136c135,136
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       * b, 
135,136c135,136
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       BZFILE b, 
135,136c135,136
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>        b, 
135,136c135,136
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       BZFILE* , 
135,136c135,136
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       * , 
135,136c135,136
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       BZFILE , 
135,136c135,136
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>        , 
136c136
<       BZFILE* b, 
---
>       * b, 
136c136
<       BZFILE* b, 
---
>        b, 
136c136
<       BZFILE* b, 
---
>       * , 
136c136
<       BZFILE* b, 
---
>        , 
136c136
<       BZFILE* b, 
---
>       * b 
136c136
<       BZFILE* b, 
---
>        b 
136c136
<       BZFILE* b, 
---
>       *  
136c136
<       BZFILE* b, 
---
>         
136c136
<       BZFILE* b, 
---
>       BZFILE b, 
136c136
<       BZFILE* b, 
---
>       BZFILE , 
136c136
<       BZFILE* b, 
---
>       BZFILE b 
136c136
<       BZFILE* b, 
---
>       BZFILE  
136,137c136,137
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE b, 
>       *   buf, 
136,137c136,137
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE , 
>       *   buf, 
136,137c136,137
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE b 
>       *   buf, 
136,137c136,137
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE  
>       *   buf, 
136c136
<       BZFILE* b, 
---
>       BZFILE* , 
136c136
<       BZFILE* b, 
---
>       BZFILE*  
136,137c136,137
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* , 
>       *   buf, 
136,137c136,137
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE*  
>       *   buf, 
136,137c136,137
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* , 
>       void   buf, 
136,137c136,137
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE*  
>       void   buf, 
136,137c136,137
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* , 
>          buf, 
136,137c136,137
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE*  
>          buf, 
136c136
<       BZFILE* b, 
---
>       BZFILE* b 
136,137c136,137
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* b 
>       *   buf, 
136,137c136,137
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* b 
>       void   buf, 
136,137c136,137
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* b 
>          buf, 
136,137c136,137
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* b 
>       void*   , 
136,137c136,137
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* b 
>       *   , 
136,137c136,137
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* b 
>       void   , 
136,137c136,137
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* b 
>          , 
137c137
<       void*   buf, 
---
>       *   buf, 
137c137
<       void*   buf, 
---
>          buf, 
137c137
<       void*   buf, 
---
>       *   , 
137c137
<       void*   buf, 
---
>          , 
(84.8 %, 31066 bytes)
136c136
<       BZFILE* , 
---
>       BZFILE*  
136,137c136,137
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>       *   buf, 
136,137c136,137
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>       void   buf, 
136,137c136,137
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>          buf, 
136,137c136,137
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>       void*   , 
136,137c136,137
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>       *   , 
136,137c136,137
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>       void   , 
136,137c136,137
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>          , 
137c137
<       void*   buf, 
---
>       *   buf, 
137c137
<       void*   buf, 
---
>          buf, 
137c137
<       void*   buf, 
---
>       *   , 
137c137
<       void*   buf, 
---
>          , 
137c137
<       void*   buf, 
---
>       *   buf 
137c137
<       void*   buf, 
---
>          buf 
137c137
<       void*   buf, 
---
>       *    
137c137
<       void*   buf, 
---
>           
137c137
<       void*   buf, 
---
>       void   buf, 
137c137
<       void*   buf, 
---
>       void   , 
137c137
<       void*   buf, 
---
>       void   buf 
137c137
<       void*   buf, 
---
>       void    
137,138c137,138
<       void*   buf, 
<       int     len 
---
>       void   buf, 
>            len 
137,138c137,138
<       void*   buf, 
<       int     len 
---
>       void   , 
>            len 
137,138c137,138
<       void*   buf, 
<       int     len 
---
>       void   buf 
>            len 
137,138c137,138
<       void*   buf, 
<       int     len 
---
>       void    
>            len 
137c137
<       void*   buf, 
---
>       void*   , 
137c137
<       void*   buf, 
---
>       void*    
137,138c137,138
<       void*   buf, 
<       int     len 
---
>       void*   , 
>            len 
137,138c137,138
<       void*   buf, 
<       int     len 
---
>       void*    
>            len 
137,138c137,138
<       void*   buf, 
<       int     len 
---
>       void*   , 
>       int      
(84.8 %, 31063 bytes)
137c137
<       void*   , 
---
>       void*    
137,138c137,138
<       void*   , 
<       int     len 
---
>       void*    
>            len 
137,138c137,138
<       void*   , 
<       int     len 
---
>       void*    
>       int      
137,138c137,138
<       void*   , 
<       int     len 
---
>       void*    
>             
137c137
<       void*   , 
---
>       void*    
139c139
<    );
---
>    ;
137,139c137,139
<       void*   , 
<       int     len 
<    );
---
>       void*    
>            len 
>    ;
137,139c137,139
<       void*   , 
<       int     len 
<    );
---
>       void*    
>       int      
>    ;
137,139c137,139
<       void*   , 
<       int     len 
<    );
---
>       void*    
>             
>    ;
138c138
<       int     len 
---
>            len 
138c138
<       int     len 
---
>             
138,139c138,139
<       int     len 
<    );
---
>            len 
>    ;
138,139c138,139
<       int     len 
<    );
---
>             
>    ;
138,139c138,139
<       int     len 
<    );
---
>            len 
>    )
138,139c138,139
<       int     len 
<    );
---
>             
>    )
138,139c138,139
<       int     len 
<    );
---
>            len 
>    
138,139c138,139
<       int     len 
<    );
---
>             
>    
138c138
<       int     len 
---
>       int      
138,139c138,139
<       int     len 
<    );
---
>       int      
>    ;
138,139c138,139
<       int     len 
<    );
---
>       int      
>    )
138,139c138,139
<       int     len 
<    );
---
>       int      
>    
138c138
<       int     len 
---
>       int      
141c141
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>  void BZ_API(BZ2_bzWriteClose) ( 
(84.8 %, 31060 bytes)
139c139
<    );
---
>    ;
139c139
<    );
---
>    
139c139
<    );
---
>    ;
141c141
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>  void BZ_API(BZ2_bzWriteClose) ( 
139c139
<    );
---
>    
141c141
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>  void BZ_API(BZ2_bzWriteClose) ( 
139c139
<    );
---
>    ;
141c141
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzWriteClose) ( 
139c139
<    );
---
>    
141c141
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzWriteClose) ( 
139c139
<    );
---
>    ;
141c141
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>   BZ_API(BZ2_bzWriteClose) ( 
139c139
<    );
---
>    
141c141
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>   BZ_API(BZ2_bzWriteClose) ( 
139c139
<    );
---
>    )
139c139
<    );
---
>    )
141c141
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>  void BZ_API(BZ2_bzWriteClose) ( 
139c139
<    );
---
>    )
141c141
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzWriteClose) ( 
139c139
<    );
---
>    )
141c141
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>   BZ_API(BZ2_bzWriteClose) ( 
139c139
<    );
---
>    )
141c141
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void (BZ2_bzWriteClose) ( 
139c139
<    );
---
>    )
141c141
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>  void (BZ2_bzWriteClose) ( 
139c139
<    );
---
>    )
141c141
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN  (BZ2_bzWriteClose) ( 
139c139
<    );
---
>    )
141c141
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>   (BZ2_bzWriteClose) ( 
141c141
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>  void BZ_API(BZ2_bzWriteClose) ( 
141c141
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>   BZ_API(BZ2_bzWriteClose) ( 
141c141
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>  void (BZ2_bzWriteClose) ( 
(84.8 %, 31051 bytes)
141c141
<  void BZ_API(BZ2_bzWriteClose) ( 
---
>   BZ_API(BZ2_bzWriteClose) ( 
141c141
<  void BZ_API(BZ2_bzWriteClose) ( 
---
>   (BZ2_bzWriteClose) ( 
141c141
<  void BZ_API(BZ2_bzWriteClose) ( 
---
>   BZ_APIBZ2_bzWriteClose) ( 
141c141
<  void BZ_API(BZ2_bzWriteClose) ( 
---
>   BZ2_bzWriteClose) ( 
141c141
<  void BZ_API(BZ2_bzWriteClose) ( 
---
>   BZ_API() ( 
141c141
<  void BZ_API(BZ2_bzWriteClose) ( 
---
>   () ( 
141c141
<  void BZ_API(BZ2_bzWriteClose) ( 
---
>   BZ_API) ( 
141c141
<  void BZ_API(BZ2_bzWriteClose) ( 
---
>   ) ( 
141c141
<  void BZ_API(BZ2_bzWriteClose) ( 
---
>  void (BZ2_bzWriteClose) ( 
141c141
<  void BZ_API(BZ2_bzWriteClose) ( 
---
>  void BZ2_bzWriteClose) ( 
141c141
<  void BZ_API(BZ2_bzWriteClose) ( 
---
>  void () ( 
141c141
<  void BZ_API(BZ2_bzWriteClose) ( 
---
>  void ) ( 
141c141
<  void BZ_API(BZ2_bzWriteClose) ( 
---
>  void (BZ2_bzWriteClose ( 
141c141
<  void BZ_API(BZ2_bzWriteClose) ( 
---
>  void BZ2_bzWriteClose ( 
(84.9 %, 31045 bytes)
141c141
<  void (BZ2_bzWriteClose) ( 
---
>  void BZ2_bzWriteClose) ( 
141c141
<  void (BZ2_bzWriteClose) ( 
---
>  void ) ( 
141c141
<  void (BZ2_bzWriteClose) ( 
---
>  void BZ2_bzWriteClose ( 
141c141
<  void (BZ2_bzWriteClose) ( 
---
>  void  ( 
141c141
<  void (BZ2_bzWriteClose) ( 
---
>  void BZ2_bzWriteClose)  
141c141
<  void (BZ2_bzWriteClose) ( 
---
>  void )  
141c141
<  void (BZ2_bzWriteClose) ( 
---
>  void BZ2_bzWriteClose  
141c141
<  void (BZ2_bzWriteClose) ( 
---
>  void   
141c141
<  void (BZ2_bzWriteClose) ( 
---
>  void () ( 
141c141
<  void (BZ2_bzWriteClose) ( 
---
>  void ( ( 
141c141
<  void (BZ2_bzWriteClose) ( 
---
>  void ()  
141c141
<  void (BZ2_bzWriteClose) ( 
---
>  void (  
141,142c141,142
<  void (BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
>  void () ( 
>       *          bzerror, 
141,142c141,142
<  void (BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
>  void ( ( 
>       *          bzerror, 
141,142c141,142
<  void (BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
>  void ()  
>       *          bzerror, 
(84.9 %, 31043 bytes)
141,142c141,142
<  void BZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void  ( 
>       *          bzerror, 
141,142c141,142
<  void BZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void   
>       *          bzerror, 
141,142c141,142
<  void BZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void  ( 
>       int          bzerror, 
141,142c141,142
<  void BZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void   
>       int          bzerror, 
141,142c141,142
<  void BZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void  ( 
>                 bzerror, 
141,142c141,142
<  void BZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void   
>                 bzerror, 
141c141
<  void BZ2_bzWriteClose ( 
---
>  void BZ2_bzWriteClose  
141,142c141,142
<  void BZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void BZ2_bzWriteClose  
>       *          bzerror, 
141,142c141,142
<  void BZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void BZ2_bzWriteClose  
>       int          bzerror, 
141,142c141,142
<  void BZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void BZ2_bzWriteClose  
>                 bzerror, 
141,142c141,142
<  void BZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void BZ2_bzWriteClose  
>       int*          , 
141,142c141,142
<  void BZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void BZ2_bzWriteClose  
>       *          , 
141,142c141,142
<  void BZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void BZ2_bzWriteClose  
>       int          , 
141,142c141,142
<  void BZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void BZ2_bzWriteClose  
>                 , 
142c142
<       int*          bzerror, 
---
>       *          bzerror, 
142c142
<       int*          bzerror, 
---
>                 bzerror, 
142c142
<       int*          bzerror, 
---
>       *          , 
142c142
<       int*          bzerror, 
---
>                 , 
142c142
<       int*          bzerror, 
---
>       *          bzerror 
142c142
<       int*          bzerror, 
---
>                 bzerror 
142c142
<       int*          bzerror, 
---
>       *           
142c142
<       int*          bzerror, 
---
>                  
142c142
<       int*          bzerror, 
---
>       int          bzerror, 
142c142
<       int*          bzerror, 
---
>       int          , 
142c142
<       int*          bzerror, 
---
>       int          bzerror 
142c142
<       int*          bzerror, 
---
>       int           
142,143c142,143
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int          bzerror, 
>       *       b, 
142,143c142,143
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int          , 
>       *       b, 
142,143c142,143
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int          bzerror 
>       *       b, 
142,143c142,143
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int           
>       *       b, 
142c142
<       int*          bzerror, 
---
>       int*          , 
142c142
<       int*          bzerror, 
---
>       int*           
142,143c142,143
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          , 
>       *       b, 
142,143c142,143
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*           
>       *       b, 
142,143c142,143
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          , 
>       BZFILE       b, 
142,143c142,143
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*           
>       BZFILE       b, 
142,143c142,143
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          , 
>              b, 
142,143c142,143
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*           
>              b, 
142c142
<       int*          bzerror, 
---
>       int*          bzerror 
142,143c142,143
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          bzerror 
>       *       b, 
142,143c142,143
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          bzerror 
>       BZFILE       b, 
142,143c142,143
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          bzerror 
>              b, 
142,143c142,143
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          bzerror 
>       BZFILE*       , 
142,143c142,143
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          bzerror 
>       *       , 
(84.9 %, 31036 bytes)
142c142
<       int*          , 
---
>       int*           
142,143c142,143
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>       *       b, 
142,143c142,143
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>       BZFILE       b, 
142,143c142,143
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>              b, 
142,143c142,143
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>       BZFILE*       , 
142,143c142,143
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>       *       , 
142,143c142,143
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>       BZFILE       , 
142,143c142,143
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>              , 
143c143
<       BZFILE*       b, 
---
>       *       b, 
143c143
<       BZFILE*       b, 
---
>              b, 
143c143
<       BZFILE*       b, 
---
>       *       , 
143c143
<       BZFILE*       b, 
---
>              , 
143c143
<       BZFILE*       b, 
---
>       *       b 
143c143
<       BZFILE*       b, 
---
>              b 
143c143
<       BZFILE*       b, 
---
>       *        
143c143
<       BZFILE*       b, 
---
>               
143c143
<       BZFILE*       b, 
---
>       BZFILE       b, 
143c143
<       BZFILE*       b, 
---
>       BZFILE       , 
143c143
<       BZFILE*       b, 
---
>       BZFILE       b 
143c143
<       BZFILE*       b, 
---
>       BZFILE        
143,144c143,144
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE       b, 
>                  abandon, 
143,144c143,144
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE       , 
>                  abandon, 
143,144c143,144
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE       b 
>                  abandon, 
143,144c143,144
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE        
>                  abandon, 
143c143
<       BZFILE*       b, 
---
>       BZFILE*       , 
143c143
<       BZFILE*       b, 
---
>       BZFILE*        
143,144c143,144
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE*       , 
>                  abandon, 
143,144c143,144
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE*        
>                  abandon, 
143,144c143,144
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE*       , 
>       int           , 
(84.9 %, 31035 bytes)
143c143
<       BZFILE*       , 
---
>       BZFILE*        
143,144c143,144
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>                  abandon, 
143,144c143,144
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>       int           , 
143,144c143,144
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>                  , 
143,144c143,144
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>       int           abandon 
143,144c143,144
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>                  abandon 
143,144c143,144
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>       int            
143,144c143,144
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>                   
144c144
<       int           abandon, 
---
>                  abandon, 
144c144
<       int           abandon, 
---
>                  , 
144c144
<       int           abandon, 
---
>                  abandon 
144c144
<       int           abandon, 
---
>                   
144,145c144,145
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>                  abandon, 
>        int* nbytes_in, 
144,145c144,145
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>                  , 
>        int* nbytes_in, 
144,145c144,145
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>                  abandon 
>        int* nbytes_in, 
144,145c144,145
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>                   
>        int* nbytes_in, 
144c144
<       int           abandon, 
---
>       int           , 
144c144
<       int           abandon, 
---
>       int            
144,145c144,145
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int           , 
>        int* nbytes_in, 
144,145c144,145
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int            
>        int* nbytes_in, 
144,145c144,145
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int           , 
>       unsigned * nbytes_in, 
(84.9 %, 31028 bytes)
144c144
<       int           , 
---
>       int            
144,145c144,145
<       int           , 
<       unsigned int* nbytes_in, 
---
>       int            
>        int* nbytes_in, 
144,145c144,145
<       int           , 
<       unsigned int* nbytes_in, 
---
>       int            
>       unsigned * nbytes_in, 
144,145c144,145
<       int           , 
<       unsigned int* nbytes_in, 
---
>       int            
>        * nbytes_in, 
144,145c144,145
<       int           , 
<       unsigned int* nbytes_in, 
---
>       int            
>       unsigned int nbytes_in, 
144,145c144,145
<       int           , 
<       unsigned int* nbytes_in, 
---
>       int            
>        int nbytes_in, 
144,145c144,145
<       int           , 
<       unsigned int* nbytes_in, 
---
>       int            
>       unsigned  nbytes_in, 
144,145c144,145
<       int           , 
<       unsigned int* nbytes_in, 
---
>       int            
>         nbytes_in, 
145c145
<       unsigned int* nbytes_in, 
---
>        int* nbytes_in, 
145c145
<       unsigned int* nbytes_in, 
---
>        * nbytes_in, 
145c145
<       unsigned int* nbytes_in, 
---
>        int nbytes_in, 
145c145
<       unsigned int* nbytes_in, 
---
>         nbytes_in, 
145c145
<       unsigned int* nbytes_in, 
---
>        int* , 
145c145
<       unsigned int* nbytes_in, 
---
>        * , 
145c145
<       unsigned int* nbytes_in, 
---
>        int , 
145c145
<       unsigned int* nbytes_in, 
---
>         , 
145c145
<       unsigned int* nbytes_in, 
---
>       unsigned * nbytes_in, 
145c145
<       unsigned int* nbytes_in, 
---
>       unsigned  nbytes_in, 
145c145
<       unsigned int* nbytes_in, 
---
>       unsigned * , 
145c145
<       unsigned int* nbytes_in, 
---
>       unsigned  , 
(84.9 %, 31025 bytes)
145c145
<       unsigned * nbytes_in, 
---
>       unsigned  nbytes_in, 
145c145
<       unsigned * nbytes_in, 
---
>       unsigned  , 
145c145
<       unsigned * nbytes_in, 
---
>       unsigned  nbytes_in 
145c145
<       unsigned * nbytes_in, 
---
>       unsigned   
145,146c145,146
<       unsigned * nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned  nbytes_in, 
>        int* nbytes_out 
145,146c145,146
<       unsigned * nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned  , 
>        int* nbytes_out 
145,146c145,146
<       unsigned * nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned  nbytes_in 
>        int* nbytes_out 
145,146c145,146
<       unsigned * nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned   
>        int* nbytes_out 
145c145
<       unsigned * nbytes_in, 
---
>       unsigned * , 
145c145
<       unsigned * nbytes_in, 
---
>       unsigned *  
145,146c145,146
<       unsigned * nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned * , 
>        int* nbytes_out 
145,146c145,146
<       unsigned * nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned *  
>        int* nbytes_out 
145,146c145,146
<       unsigned * nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned * , 
>       unsigned * nbytes_out 
(84.9 %, 31016 bytes)
145c145
<       unsigned * , 
---
>       unsigned *  
145,146c145,146
<       unsigned * , 
<       unsigned int* nbytes_out 
---
>       unsigned *  
>        int* nbytes_out 
145,146c145,146
<       unsigned * , 
<       unsigned int* nbytes_out 
---
>       unsigned *  
>       unsigned * nbytes_out 
145,146c145,146
<       unsigned * , 
<       unsigned int* nbytes_out 
---
>       unsigned *  
>        * nbytes_out 
145,146c145,146
<       unsigned * , 
<       unsigned int* nbytes_out 
---
>       unsigned *  
>       unsigned int nbytes_out 
145,146c145,146
<       unsigned * , 
<       unsigned int* nbytes_out 
---
>       unsigned *  
>        int nbytes_out 
145,146c145,146
<       unsigned * , 
<       unsigned int* nbytes_out 
---
>       unsigned *  
>       unsigned  nbytes_out 
145,146c145,146
<       unsigned * , 
<       unsigned int* nbytes_out 
---
>       unsigned *  
>         nbytes_out 
146c146
<       unsigned int* nbytes_out 
---
>        int* nbytes_out 
146c146
<       unsigned int* nbytes_out 
---
>        * nbytes_out 
146c146
<       unsigned int* nbytes_out 
---
>        int nbytes_out 
146c146
<       unsigned int* nbytes_out 
---
>         nbytes_out 
146c146
<       unsigned int* nbytes_out 
---
>        int*  
146c146
<       unsigned int* nbytes_out 
---
>        *  
146c146
<       unsigned int* nbytes_out 
---
>        int  
146c146
<       unsigned int* nbytes_out 
---
>          
146c146
<       unsigned int* nbytes_out 
---
>       unsigned * nbytes_out 
146c146
<       unsigned int* nbytes_out 
---
>       unsigned  nbytes_out 
146c146
<       unsigned int* nbytes_out 
---
>       unsigned *  
146c146
<       unsigned int* nbytes_out 
---
>       unsigned   
146,147c146,147
<       unsigned int* nbytes_out 
<    );
---
>       unsigned * nbytes_out 
>    ;
146,147c146,147
<       unsigned int* nbytes_out 
<    );
---
>       unsigned  nbytes_out 
>    ;
146,147c146,147
<       unsigned int* nbytes_out 
<    );
---
>       unsigned *  
>    ;
146,147c146,147
<       unsigned int* nbytes_out 
<    );
---
>       unsigned   
>    ;
146c146
<       unsigned int* nbytes_out 
---
>       unsigned int nbytes_out 
146c146
<       unsigned int* nbytes_out 
---
>       unsigned int  
(84.9 %, 31013 bytes)
146c146
<       unsigned * nbytes_out 
---
>       unsigned  nbytes_out 
146c146
<       unsigned * nbytes_out 
---
>       unsigned   
146,147c146,147
<       unsigned * nbytes_out 
<    );
---
>       unsigned  nbytes_out 
>    ;
146,147c146,147
<       unsigned * nbytes_out 
<    );
---
>       unsigned   
>    ;
146,147c146,147
<       unsigned * nbytes_out 
<    );
---
>       unsigned  nbytes_out 
>    )
146,147c146,147
<       unsigned * nbytes_out 
<    );
---
>       unsigned   
>    )
146,147c146,147
<       unsigned * nbytes_out 
<    );
---
>       unsigned  nbytes_out 
>    
146,147c146,147
<       unsigned * nbytes_out 
<    );
---
>       unsigned   
>    
146c146
<       unsigned * nbytes_out 
---
>       unsigned *  
146,147c146,147
<       unsigned * nbytes_out 
<    );
---
>       unsigned *  
>    ;
146,147c146,147
<       unsigned * nbytes_out 
<    );
---
>       unsigned *  
>    )
146,147c146,147
<       unsigned * nbytes_out 
<    );
---
>       unsigned *  
>    
146c146
<       unsigned * nbytes_out 
---
>       unsigned *  
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>  void BZ_API(BZ2_bzWriteClose64) ( 
(84.9 %, 31003 bytes)
147c147
<    );
---
>    ;
147c147
<    );
---
>    
147c147
<    );
---
>    ;
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>  void BZ_API(BZ2_bzWriteClose64) ( 
147c147
<    );
---
>    
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>  void BZ_API(BZ2_bzWriteClose64) ( 
147c147
<    );
---
>    ;
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzWriteClose64) ( 
147c147
<    );
---
>    
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzWriteClose64) ( 
147c147
<    );
---
>    ;
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>   BZ_API(BZ2_bzWriteClose64) ( 
147c147
<    );
---
>    
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>   BZ_API(BZ2_bzWriteClose64) ( 
147c147
<    );
---
>    )
147c147
<    );
---
>    )
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>  void BZ_API(BZ2_bzWriteClose64) ( 
147c147
<    );
---
>    )
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzWriteClose64) ( 
147c147
<    );
---
>    )
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>   BZ_API(BZ2_bzWriteClose64) ( 
147c147
<    );
---
>    )
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void (BZ2_bzWriteClose64) ( 
147c147
<    );
---
>    )
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>  void (BZ2_bzWriteClose64) ( 
147c147
<    );
---
>    )
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN  (BZ2_bzWriteClose64) ( 
147c147
<    );
---
>    )
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>   (BZ2_bzWriteClose64) ( 
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>  void BZ_API(BZ2_bzWriteClose64) ( 
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>   BZ_API(BZ2_bzWriteClose64) ( 
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>  void (BZ2_bzWriteClose64) ( 
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>   (BZ2_bzWriteClose64) ( 
(84.9 %, 30994 bytes)
149c149
<  void BZ_API(BZ2_bzWriteClose64) ( 
---
>   BZ_API(BZ2_bzWriteClose64) ( 
149c149
<  void BZ_API(BZ2_bzWriteClose64) ( 
---
>   (BZ2_bzWriteClose64) ( 
149c149
<  void BZ_API(BZ2_bzWriteClose64) ( 
---
>   BZ_APIBZ2_bzWriteClose64) ( 
149c149
<  void BZ_API(BZ2_bzWriteClose64) ( 
---
>   BZ2_bzWriteClose64) ( 
149c149
<  void BZ_API(BZ2_bzWriteClose64) ( 
---
>   BZ_API() ( 
149c149
<  void BZ_API(BZ2_bzWriteClose64) ( 
---
>   () ( 
149c149
<  void BZ_API(BZ2_bzWriteClose64) ( 
---
>   BZ_API) ( 
149c149
<  void BZ_API(BZ2_bzWriteClose64) ( 
---
>   ) ( 
149c149
<  void BZ_API(BZ2_bzWriteClose64) ( 
---
>  void (BZ2_bzWriteClose64) ( 
149c149
<  void BZ_API(BZ2_bzWriteClose64) ( 
---
>  void BZ2_bzWriteClose64) ( 
149c149
<  void BZ_API(BZ2_bzWriteClose64) ( 
---
>  void () ( 
149c149
<  void BZ_API(BZ2_bzWriteClose64) ( 
---
>  void ) ( 
149c149
<  void BZ_API(BZ2_bzWriteClose64) ( 
---
>  void (BZ2_bzWriteClose64 ( 
149c149
<  void BZ_API(BZ2_bzWriteClose64) ( 
---
>  void BZ2_bzWriteClose64 ( 
(84.9 %, 30988 bytes)
149c149
<  void (BZ2_bzWriteClose64) ( 
---
>  void BZ2_bzWriteClose64) ( 
149c149
<  void (BZ2_bzWriteClose64) ( 
---
>  void ) ( 
149c149
<  void (BZ2_bzWriteClose64) ( 
---
>  void BZ2_bzWriteClose64 ( 
149c149
<  void (BZ2_bzWriteClose64) ( 
---
>  void  ( 
149c149
<  void (BZ2_bzWriteClose64) ( 
---
>  void BZ2_bzWriteClose64)  
149c149
<  void (BZ2_bzWriteClose64) ( 
---
>  void )  
149c149
<  void (BZ2_bzWriteClose64) ( 
---
>  void BZ2_bzWriteClose64  
149c149
<  void (BZ2_bzWriteClose64) ( 
---
>  void   
149c149
<  void (BZ2_bzWriteClose64) ( 
---
>  void () ( 
149c149
<  void (BZ2_bzWriteClose64) ( 
---
>  void ( ( 
149c149
<  void (BZ2_bzWriteClose64) ( 
---
>  void ()  
149c149
<  void (BZ2_bzWriteClose64) ( 
---
>  void (  
149,150c149,150
<  void (BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>  void () ( 
>       *          bzerror, 
149,150c149,150
<  void (BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>  void ( ( 
>       *          bzerror, 
149,150c149,150
<  void (BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>  void ()  
>       *          bzerror, 
149,150c149,150
<  void (BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>  void (  
>       *          bzerror, 
149c149
<  void (BZ2_bzWriteClose64) ( 
---
>  void (BZ2_bzWriteClose64 ( 
149c149
<  void (BZ2_bzWriteClose64) ( 
---
>  void (BZ2_bzWriteClose64  
149,150c149,150
<  void (BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>  void (BZ2_bzWriteClose64 ( 
>       *          bzerror, 
149,150c149,150
<  void (BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>  void (BZ2_bzWriteClose64  
>       *          bzerror, 
149,150c149,150
<  void (BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>  void (BZ2_bzWriteClose64 ( 
>       int          bzerror, 
149,150c149,150
<  void (BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>  void (BZ2_bzWriteClose64  
>       int          bzerror, 
(84.9 %, 30986 bytes)
149,150c149,150
<  void BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>  void  ( 
>       *          bzerror, 
149,150c149,150
<  void BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>  void   
>       *          bzerror, 
149,150c149,150
<  void BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>  void  ( 
>       int          bzerror, 
149,150c149,150
<  void BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>  void   
>       int          bzerror, 
149,150c149,150
<  void BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>  void  ( 
>                 bzerror, 
149,150c149,150
<  void BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>  void   
>                 bzerror, 
149c149
<  void BZ2_bzWriteClose64 ( 
---
>  void BZ2_bzWriteClose64  
149,150c149,150
<  void BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>  void BZ2_bzWriteClose64  
>       *          bzerror, 
149,150c149,150
<  void BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>  void BZ2_bzWriteClose64  
>       int          bzerror, 
149,150c149,150
<  void BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>  void BZ2_bzWriteClose64  
>                 bzerror, 
149,150c149,150
<  void BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>  void BZ2_bzWriteClose64  
>       int*          , 
149,150c149,150
<  void BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>  void BZ2_bzWriteClose64  
>       *          , 
149,150c149,150
<  void BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>  void BZ2_bzWriteClose64  
>       int          , 
149,150c149,150
<  void BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>  void BZ2_bzWriteClose64  
>                 , 
150c150
<       int*          bzerror, 
---
>       *          bzerror, 
150c150
<       int*          bzerror, 
---
>                 bzerror, 
150c150
<       int*          bzerror, 
---
>       *          , 
150c150
<       int*          bzerror, 
---
>                 , 
150c150
<       int*          bzerror, 
---
>       *          bzerror 
150c150
<       int*          bzerror, 
---
>                 bzerror 
150c150
<       int*          bzerror, 
---
>       *           
150c150
<       int*          bzerror, 
---
>                  
150c150
<       int*          bzerror, 
---
>       int          bzerror, 
150c150
<       int*          bzerror, 
---
>       int          , 
150c150
<       int*          bzerror, 
---
>       int          bzerror 
150c150
<       int*          bzerror, 
---
>       int           
150,151c150,151
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int          bzerror, 
>       *       b, 
150,151c150,151
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int          , 
>       *       b, 
150,151c150,151
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int          bzerror 
>       *       b, 
150,151c150,151
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int           
>       *       b, 
150c150
<       int*          bzerror, 
---
>       int*          , 
150c150
<       int*          bzerror, 
---
>       int*           
150,151c150,151
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          , 
>       *       b, 
150,151c150,151
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*           
>       *       b, 
150,151c150,151
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          , 
>       BZFILE       b, 
150,151c150,151
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*           
>       BZFILE       b, 
150,151c150,151
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          , 
>              b, 
150,151c150,151
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*           
>              b, 
150c150
<       int*          bzerror, 
---
>       int*          bzerror 
150,151c150,151
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          bzerror 
>       *       b, 
150,151c150,151
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          bzerror 
>       BZFILE       b, 
150,151c150,151
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          bzerror 
>              b, 
150,151c150,151
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          bzerror 
>       BZFILE*       , 
150,151c150,151
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          bzerror 
>       *       , 
150,151c150,151
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          bzerror 
>       BZFILE       , 
150,151c150,151
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          bzerror 
>              , 
(84.9 %, 30979 bytes)
150c150
<       int*          , 
---
>       int*           
150,151c150,151
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>       *       b, 
150,151c150,151
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>       BZFILE       b, 
150,151c150,151
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>              b, 
150,151c150,151
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>       BZFILE*       , 
150,151c150,151
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>       *       , 
150,151c150,151
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>       BZFILE       , 
150,151c150,151
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>              , 
151c151
<       BZFILE*       b, 
---
>       *       b, 
151c151
<       BZFILE*       b, 
---
>              b, 
151c151
<       BZFILE*       b, 
---
>       *       , 
151c151
<       BZFILE*       b, 
---
>              , 
151c151
<       BZFILE*       b, 
---
>       *       b 
151c151
<       BZFILE*       b, 
---
>              b 
151c151
<       BZFILE*       b, 
---
>       *        
151c151
<       BZFILE*       b, 
---
>               
151c151
<       BZFILE*       b, 
---
>       BZFILE       b, 
151c151
<       BZFILE*       b, 
---
>       BZFILE       , 
151c151
<       BZFILE*       b, 
---
>       BZFILE       b 
151c151
<       BZFILE*       b, 
---
>       BZFILE        
151,152c151,152
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE       b, 
>                  abandon, 
151,152c151,152
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE       , 
>                  abandon, 
151,152c151,152
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE       b 
>                  abandon, 
151,152c151,152
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE        
>                  abandon, 
151c151
<       BZFILE*       b, 
---
>       BZFILE*       , 
151c151
<       BZFILE*       b, 
---
>       BZFILE*        
151,152c151,152
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE*       , 
>                  abandon, 
151,152c151,152
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE*        
>                  abandon, 
151,152c151,152
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE*       , 
>       int           , 
(84.9 %, 30978 bytes)
151c151
<       BZFILE*       , 
---
>       BZFILE*        
151,152c151,152
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>                  abandon, 
151,152c151,152
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>       int           , 
151,152c151,152
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>                  , 
151,152c151,152
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>       int           abandon 
151,152c151,152
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>                  abandon 
151,152c151,152
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>       int            
151,152c151,152
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>                   
152c152
<       int           abandon, 
---
>                  abandon, 
152c152
<       int           abandon, 
---
>                  , 
152c152
<       int           abandon, 
---
>                  abandon 
152c152
<       int           abandon, 
---
>                   
152,153c152,153
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>                  abandon, 
>        int* nbytes_in_lo32, 
152,153c152,153
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>                  , 
>        int* nbytes_in_lo32, 
152,153c152,153
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>                  abandon 
>        int* nbytes_in_lo32, 
152,153c152,153
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>                   
>        int* nbytes_in_lo32, 
152c152
<       int           abandon, 
---
>       int           , 
152c152
<       int           abandon, 
---
>       int            
152,153c152,153
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int           , 
>        int* nbytes_in_lo32, 
152,153c152,153
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int            
>        int* nbytes_in_lo32, 
152,153c152,153
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int           , 
>       unsigned * nbytes_in_lo32, 
(84.9 %, 30971 bytes)
152c152
<       int           , 
---
>       int            
152,153c152,153
<       int           , 
<       unsigned int* nbytes_in_lo32, 
---
>       int            
>        int* nbytes_in_lo32, 
152,153c152,153
<       int           , 
<       unsigned int* nbytes_in_lo32, 
---
>       int            
>       unsigned * nbytes_in_lo32, 
152,153c152,153
<       int           , 
<       unsigned int* nbytes_in_lo32, 
---
>       int            
>        * nbytes_in_lo32, 
152,153c152,153
<       int           , 
<       unsigned int* nbytes_in_lo32, 
---
>       int            
>       unsigned int nbytes_in_lo32, 
152,153c152,153
<       int           , 
<       unsigned int* nbytes_in_lo32, 
---
>       int            
>        int nbytes_in_lo32, 
152,153c152,153
<       int           , 
<       unsigned int* nbytes_in_lo32, 
---
>       int            
>       unsigned  nbytes_in_lo32, 
152,153c152,153
<       int           , 
<       unsigned int* nbytes_in_lo32, 
---
>       int            
>         nbytes_in_lo32, 
153c153
<       unsigned int* nbytes_in_lo32, 
---
>        int* nbytes_in_lo32, 
153c153
<       unsigned int* nbytes_in_lo32, 
---
>        * nbytes_in_lo32, 
153c153
<       unsigned int* nbytes_in_lo32, 
---
>        int nbytes_in_lo32, 
153c153
<       unsigned int* nbytes_in_lo32, 
---
>         nbytes_in_lo32, 
153c153
<       unsigned int* nbytes_in_lo32, 
---
>        int* , 
153c153
<       unsigned int* nbytes_in_lo32, 
---
>        * , 
153c153
<       unsigned int* nbytes_in_lo32, 
---
>        int , 
153c153
<       unsigned int* nbytes_in_lo32, 
---
>         , 
153c153
<       unsigned int* nbytes_in_lo32, 
---
>       unsigned * nbytes_in_lo32, 
153c153
<       unsigned int* nbytes_in_lo32, 
---
>       unsigned  nbytes_in_lo32, 
153c153
<       unsigned int* nbytes_in_lo32, 
---
>       unsigned * , 
(84.9 %, 30968 bytes)
153c153
<       unsigned * nbytes_in_lo32, 
---
>       unsigned  nbytes_in_lo32, 
153c153
<       unsigned * nbytes_in_lo32, 
---
>       unsigned  , 
153c153
<       unsigned * nbytes_in_lo32, 
---
>       unsigned  nbytes_in_lo32 
153c153
<       unsigned * nbytes_in_lo32, 
---
>       unsigned   
153,154c153,154
<       unsigned * nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned  nbytes_in_lo32, 
>        int* nbytes_in_hi32, 
153,154c153,154
<       unsigned * nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned  , 
>        int* nbytes_in_hi32, 
153,154c153,154
<       unsigned * nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned  nbytes_in_lo32 
>        int* nbytes_in_hi32, 
153,154c153,154
<       unsigned * nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned   
>        int* nbytes_in_hi32, 
153c153
<       unsigned * nbytes_in_lo32, 
---
>       unsigned * , 
153c153
<       unsigned * nbytes_in_lo32, 
---
>       unsigned *  
153,154c153,154
<       unsigned * nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned * , 
>        int* nbytes_in_hi32, 
153,154c153,154
<       unsigned * nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned *  
>        int* nbytes_in_hi32, 
153,154c153,154
<       unsigned * nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned * , 
>       unsigned * nbytes_in_hi32, 
(84.9 %, 30954 bytes)
153c153
<       unsigned * , 
---
>       unsigned *  
153,154c153,154
<       unsigned * , 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned *  
>        int* nbytes_in_hi32, 
153,154c153,154
<       unsigned * , 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned *  
>       unsigned * nbytes_in_hi32, 
153,154c153,154
<       unsigned * , 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned *  
>        * nbytes_in_hi32, 
153,154c153,154
<       unsigned * , 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned *  
>       unsigned int nbytes_in_hi32, 
153,154c153,154
<       unsigned * , 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned *  
>        int nbytes_in_hi32, 
153,154c153,154
<       unsigned * , 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned *  
>       unsigned  nbytes_in_hi32, 
153,154c153,154
<       unsigned * , 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned *  
>         nbytes_in_hi32, 
154c154
<       unsigned int* nbytes_in_hi32, 
---
>        int* nbytes_in_hi32, 
154c154
<       unsigned int* nbytes_in_hi32, 
---
>        * nbytes_in_hi32, 
154c154
<       unsigned int* nbytes_in_hi32, 
---
>        int nbytes_in_hi32, 
154c154
<       unsigned int* nbytes_in_hi32, 
---
>         nbytes_in_hi32, 
154c154
<       unsigned int* nbytes_in_hi32, 
---
>        int* , 
154c154
<       unsigned int* nbytes_in_hi32, 
---
>        * , 
154c154
<       unsigned int* nbytes_in_hi32, 
---
>        int , 
154c154
<       unsigned int* nbytes_in_hi32, 
---
>         , 
154c154
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned * nbytes_in_hi32, 
154c154
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned  nbytes_in_hi32, 
154c154
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned * , 
(84.9 %, 30951 bytes)
154c154
<       unsigned * nbytes_in_hi32, 
---
>       unsigned  nbytes_in_hi32, 
154c154
<       unsigned * nbytes_in_hi32, 
---
>       unsigned  , 
154c154
<       unsigned * nbytes_in_hi32, 
---
>       unsigned  nbytes_in_hi32 
154c154
<       unsigned * nbytes_in_hi32, 
---
>       unsigned   
154,155c154,155
<       unsigned * nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned  nbytes_in_hi32, 
>        int* nbytes_out_lo32, 
154,155c154,155
<       unsigned * nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned  , 
>        int* nbytes_out_lo32, 
154,155c154,155
<       unsigned * nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned  nbytes_in_hi32 
>        int* nbytes_out_lo32, 
154,155c154,155
<       unsigned * nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned   
>        int* nbytes_out_lo32, 
154c154
<       unsigned * nbytes_in_hi32, 
---
>       unsigned * , 
154c154
<       unsigned * nbytes_in_hi32, 
---
>       unsigned *  
154,155c154,155
<       unsigned * nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned * , 
>        int* nbytes_out_lo32, 
154,155c154,155
<       unsigned * nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned *  
>        int* nbytes_out_lo32, 
154,155c154,155
<       unsigned * nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned * , 
>       unsigned * nbytes_out_lo32, 
(84.9 %, 30937 bytes)
154c154
<       unsigned * , 
---
>       unsigned *  
154,155c154,155
<       unsigned * , 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned *  
>        int* nbytes_out_lo32, 
154,155c154,155
<       unsigned * , 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned *  
>       unsigned * nbytes_out_lo32, 
154,155c154,155
<       unsigned * , 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned *  
>        * nbytes_out_lo32, 
154,155c154,155
<       unsigned * , 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned *  
>       unsigned int nbytes_out_lo32, 
154,155c154,155
<       unsigned * , 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned *  
>        int nbytes_out_lo32, 
154,155c154,155
<       unsigned * , 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned *  
>       unsigned  nbytes_out_lo32, 
154,155c154,155
<       unsigned * , 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned *  
>         nbytes_out_lo32, 
155c155
<       unsigned int* nbytes_out_lo32, 
---
>        int* nbytes_out_lo32, 
155c155
<       unsigned int* nbytes_out_lo32, 
---
>        * nbytes_out_lo32, 
155c155
<       unsigned int* nbytes_out_lo32, 
---
>        int nbytes_out_lo32, 
155c155
<       unsigned int* nbytes_out_lo32, 
---
>         nbytes_out_lo32, 
155c155
<       unsigned int* nbytes_out_lo32, 
---
>        int* , 
155c155
<       unsigned int* nbytes_out_lo32, 
---
>        * , 
155c155
<       unsigned int* nbytes_out_lo32, 
---
>        int , 
155c155
<       unsigned int* nbytes_out_lo32, 
---
>         , 
155c155
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned * nbytes_out_lo32, 
155c155
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned  nbytes_out_lo32, 
155c155
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned * , 
(84.9 %, 30934 bytes)
155c155
<       unsigned * nbytes_out_lo32, 
---
>       unsigned  nbytes_out_lo32, 
155c155
<       unsigned * nbytes_out_lo32, 
---
>       unsigned  , 
155c155
<       unsigned * nbytes_out_lo32, 
---
>       unsigned  nbytes_out_lo32 
155c155
<       unsigned * nbytes_out_lo32, 
---
>       unsigned   
155,156c155,156
<       unsigned * nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned  nbytes_out_lo32, 
>        int* nbytes_out_hi32
155,156c155,156
<       unsigned * nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned  , 
>        int* nbytes_out_hi32
155,156c155,156
<       unsigned * nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned  nbytes_out_lo32 
>        int* nbytes_out_hi32
155,156c155,156
<       unsigned * nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned   
>        int* nbytes_out_hi32
155c155
<       unsigned * nbytes_out_lo32, 
---
>       unsigned * , 
155c155
<       unsigned * nbytes_out_lo32, 
---
>       unsigned *  
155,156c155,156
<       unsigned * nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned * , 
>        int* nbytes_out_hi32
155,156c155,156
<       unsigned * nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned *  
>        int* nbytes_out_hi32
155,156c155,156
<       unsigned * nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned * , 
>       unsigned * nbytes_out_hi32
(84.9 %, 30919 bytes)
155c155
<       unsigned * , 
---
>       unsigned *  
155,156c155,156
<       unsigned * , 
<       unsigned int* nbytes_out_hi32
---
>       unsigned *  
>        int* nbytes_out_hi32
155,156c155,156
<       unsigned * , 
<       unsigned int* nbytes_out_hi32
---
>       unsigned *  
>       unsigned * nbytes_out_hi32
155,156c155,156
<       unsigned * , 
<       unsigned int* nbytes_out_hi32
---
>       unsigned *  
>        * nbytes_out_hi32
155,156c155,156
<       unsigned * , 
<       unsigned int* nbytes_out_hi32
---
>       unsigned *  
>       unsigned int nbytes_out_hi32
155,156c155,156
<       unsigned * , 
<       unsigned int* nbytes_out_hi32
---
>       unsigned *  
>        int nbytes_out_hi32
155,156c155,156
<       unsigned * , 
<       unsigned int* nbytes_out_hi32
---
>       unsigned *  
>       unsigned  nbytes_out_hi32
155,156c155,156
<       unsigned * , 
<       unsigned int* nbytes_out_hi32
---
>       unsigned *  
>         nbytes_out_hi32
156c156
<       unsigned int* nbytes_out_hi32
---
>        int* nbytes_out_hi32
156c156
<       unsigned int* nbytes_out_hi32
---
>        * nbytes_out_hi32
156c156
<       unsigned int* nbytes_out_hi32
---
>        int nbytes_out_hi32
156c156
<       unsigned int* nbytes_out_hi32
---
>         nbytes_out_hi32
156c156
<       unsigned int* nbytes_out_hi32
---
>        int* 
156c156
<       unsigned int* nbytes_out_hi32
---
>        * 
156c156
<       unsigned int* nbytes_out_hi32
---
>        int 
156c156
<       unsigned int* nbytes_out_hi32
---
>         
156c156
<       unsigned int* nbytes_out_hi32
---
>       unsigned * nbytes_out_hi32
156c156
<       unsigned int* nbytes_out_hi32
---
>       unsigned  nbytes_out_hi32
156c156
<       unsigned int* nbytes_out_hi32
---
>       unsigned * 
(84.9 %, 30916 bytes)
156c156
<       unsigned * nbytes_out_hi32
---
>       unsigned  nbytes_out_hi32
156c156
<       unsigned * nbytes_out_hi32
---
>       unsigned  
156,157c156,157
<       unsigned * nbytes_out_hi32
<    );
---
>       unsigned  nbytes_out_hi32
>    ;
156,157c156,157
<       unsigned * nbytes_out_hi32
<    );
---
>       unsigned  
>    ;
156,157c156,157
<       unsigned * nbytes_out_hi32
<    );
---
>       unsigned  nbytes_out_hi32
>    )
156,157c156,157
<       unsigned * nbytes_out_hi32
<    );
---
>       unsigned  
>    )
156,157c156,157
<       unsigned * nbytes_out_hi32
<    );
---
>       unsigned  nbytes_out_hi32
>    
156,157c156,157
<       unsigned * nbytes_out_hi32
<    );
---
>       unsigned  
>    
156c156
<       unsigned * nbytes_out_hi32
---
>       unsigned * 
156,157c156,157
<       unsigned * nbytes_out_hi32
<    );
---
>       unsigned * 
>    ;
156,157c156,157
<       unsigned * nbytes_out_hi32
<    );
---
>       unsigned * 
>    )
156,157c156,157
<       unsigned * nbytes_out_hi32
<    );
---
>       unsigned * 
>    
156c156
<       unsigned * nbytes_out_hi32
---
>       unsigned * 
162c162
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>  int BZ_API(BZ2_bzBuffToBuffCompress) ( 
(84.9 %, 30901 bytes)
157c157
<    );
---
>    ;
157c157
<    );
---
>    
157c157
<    );
---
>    ;
162c162
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>  int BZ_API(BZ2_bzBuffToBuffCompress) ( 
157c157
<    );
---
>    
162c162
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>  int BZ_API(BZ2_bzBuffToBuffCompress) ( 
157c157
<    );
---
>    ;
162c162
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzBuffToBuffCompress) ( 
157c157
<    );
---
>    
162c162
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzBuffToBuffCompress) ( 
157c157
<    );
---
>    ;
162c162
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>   BZ_API(BZ2_bzBuffToBuffCompress) ( 
157c157
<    );
---
>    
162c162
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>   BZ_API(BZ2_bzBuffToBuffCompress) ( 
157c157
<    );
---
>    )
157c157
<    );
---
>    )
162c162
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>  int BZ_API(BZ2_bzBuffToBuffCompress) ( 
157c157
<    );
---
>    )
162c162
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzBuffToBuffCompress) ( 
157c157
<    );
---
>    )
162c162
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>   BZ_API(BZ2_bzBuffToBuffCompress) ( 
157c157
<    );
---
>    )
162c162
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_EXTERN int (BZ2_bzBuffToBuffCompress) ( 
157c157
<    );
---
>    )
162c162
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>  int (BZ2_bzBuffToBuffCompress) ( 
157c157
<    );
---
>    )
162c162
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_EXTERN  (BZ2_bzBuffToBuffCompress) ( 
157c157
<    );
---
>    )
162c162
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>   (BZ2_bzBuffToBuffCompress) ( 
162c162
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>  int BZ_API(BZ2_bzBuffToBuffCompress) ( 
162c162
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>   BZ_API(BZ2_bzBuffToBuffCompress) ( 
(84.9 %, 30892 bytes)
162c162
<  int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>   BZ_API(BZ2_bzBuffToBuffCompress) ( 
162c162
<  int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>   (BZ2_bzBuffToBuffCompress) ( 
162c162
<  int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>   BZ_APIBZ2_bzBuffToBuffCompress) ( 
(84.9 %, 30889 bytes)
162c162
<   BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>   (BZ2_bzBuffToBuffCompress) ( 
162c162
<   BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>   BZ2_bzBuffToBuffCompress) ( 
162c162
<   BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>   () ( 
162c162
<   BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>   ) ( 
162c162
<   BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>   (BZ2_bzBuffToBuffCompress ( 
162c162
<   BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>   BZ2_bzBuffToBuffCompress ( 
(84.9 %, 30883 bytes)
162c162
<   (BZ2_bzBuffToBuffCompress) ( 
---
>   BZ2_bzBuffToBuffCompress) ( 
162c162
<   (BZ2_bzBuffToBuffCompress) ( 
---
>   ) ( 
162c162
<   (BZ2_bzBuffToBuffCompress) ( 
---
>   BZ2_bzBuffToBuffCompress ( 
162c162
<   (BZ2_bzBuffToBuffCompress) ( 
---
>    ( 
162c162
<   (BZ2_bzBuffToBuffCompress) ( 
---
>   BZ2_bzBuffToBuffCompress)  
162c162
<   (BZ2_bzBuffToBuffCompress) ( 
---
>   )  
162c162
<   (BZ2_bzBuffToBuffCompress) ( 
---
>   BZ2_bzBuffToBuffCompress  
162c162
<   (BZ2_bzBuffToBuffCompress) ( 
---
>     
162c162
<   (BZ2_bzBuffToBuffCompress) ( 
---
>   () ( 
162c162
<   (BZ2_bzBuffToBuffCompress) ( 
---
>   ( ( 
162c162
<   (BZ2_bzBuffToBuffCompress) ( 
---
>   ()  
162c162
<   (BZ2_bzBuffToBuffCompress) ( 
---
>   (  
162,163c162,163
<   (BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>   () ( 
>       *         dest, 
162,163c162,163
<   (BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>   ( ( 
>       *         dest, 
162,163c162,163
<   (BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>   ()  
>       *         dest, 
162,163c162,163
<   (BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>   (  
>       *         dest, 
(84.9 %, 30881 bytes)
162,163c162,163
<   BZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>    ( 
>       *         dest, 
162,163c162,163
<   BZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>     
>       *         dest, 
162,163c162,163
<   BZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>    ( 
>       char         dest, 
162,163c162,163
<   BZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>     
>       char         dest, 
162,163c162,163
<   BZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>    ( 
>                dest, 
162,163c162,163
<   BZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>     
>                dest, 
162c162
<   BZ2_bzBuffToBuffCompress ( 
---
>   BZ2_bzBuffToBuffCompress  
162,163c162,163
<   BZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>   BZ2_bzBuffToBuffCompress  
>       *         dest, 
162,163c162,163
<   BZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>   BZ2_bzBuffToBuffCompress  
>       char         dest, 
162,163c162,163
<   BZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>   BZ2_bzBuffToBuffCompress  
>                dest, 
162,163c162,163
<   BZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>   BZ2_bzBuffToBuffCompress  
>       char*         , 
162,163c162,163
<   BZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>   BZ2_bzBuffToBuffCompress  
>       *         , 
162,163c162,163
<   BZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>   BZ2_bzBuffToBuffCompress  
>       char         , 
162,163c162,163
<   BZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>   BZ2_bzBuffToBuffCompress  
>                , 
163c163
<       char*         dest, 
---
>       *         dest, 
163c163
<       char*         dest, 
---
>                dest, 
163c163
<       char*         dest, 
---
>       *         , 
163c163
<       char*         dest, 
---
>                , 
163c163
<       char*         dest, 
---
>       *         dest 
163c163
<       char*         dest, 
---
>                dest 
163c163
<       char*         dest, 
---
>       *          
163c163
<       char*         dest, 
---
>                 
163c163
<       char*         dest, 
---
>       char         dest, 
163c163
<       char*         dest, 
---
>       char         , 
163c163
<       char*         dest, 
---
>       char         dest 
163c163
<       char*         dest, 
---
>       char          
163,164c163,164
<       char*         dest, 
<       unsigned int* destLen,
---
>       char         dest, 
>        int* destLen,
163,164c163,164
<       char*         dest, 
<       unsigned int* destLen,
---
>       char         , 
>        int* destLen,
163,164c163,164
<       char*         dest, 
<       unsigned int* destLen,
---
>       char         dest 
>        int* destLen,
163,164c163,164
<       char*         dest, 
<       unsigned int* destLen,
---
>       char          
>        int* destLen,
163c163
<       char*         dest, 
---
>       char*         , 
163c163
<       char*         dest, 
---
>       char*          
163,164c163,164
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         , 
>        int* destLen,
163,164c163,164
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*          
>        int* destLen,
163,164c163,164
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         , 
>       unsigned * destLen,
(84.9 %, 30877 bytes)
163c163
<       char*         , 
---
>       char*          
163,164c163,164
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>        int* destLen,
163,164c163,164
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>       unsigned * destLen,
163,164c163,164
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>        * destLen,
163,164c163,164
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>       unsigned int destLen,
163,164c163,164
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>        int destLen,
163,164c163,164
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>       unsigned  destLen,
163,164c163,164
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>         destLen,
164c164
<       unsigned int* destLen,
---
>        int* destLen,
164c164
<       unsigned int* destLen,
---
>        * destLen,
164c164
<       unsigned int* destLen,
---
>        int destLen,
164c164
<       unsigned int* destLen,
---
>         destLen,
164c164
<       unsigned int* destLen,
---
>        int* ,
164c164
<       unsigned int* destLen,
---
>        * ,
164c164
<       unsigned int* destLen,
---
>        int ,
164c164
<       unsigned int* destLen,
---
>         ,
164c164
<       unsigned int* destLen,
---
>       unsigned * destLen,
164c164
<       unsigned int* destLen,
---
>       unsigned  destLen,
164c164
<       unsigned int* destLen,
---
>       unsigned * ,
(84.9 %, 30874 bytes)
164c164
<       unsigned * destLen,
---
>       unsigned  destLen,
164c164
<       unsigned * destLen,
---
>       unsigned  ,
164c164
<       unsigned * destLen,
---
>       unsigned  destLen
164c164
<       unsigned * destLen,
---
>       unsigned  
164,165c164,165
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned  destLen,
>       *         source, 
164,165c164,165
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned  ,
>       *         source, 
164,165c164,165
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned  destLen
>       *         source, 
164,165c164,165
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned  
>       *         source, 
164c164
<       unsigned * destLen,
---
>       unsigned * ,
164c164
<       unsigned * destLen,
---
>       unsigned * 
164,165c164,165
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * ,
>       *         source, 
164,165c164,165
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * 
>       *         source, 
164,165c164,165
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * ,
>       char         source, 
164,165c164,165
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * 
>       char         source, 
164,165c164,165
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * ,
>                source, 
164,165c164,165
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * 
>                source, 
164c164
<       unsigned * destLen,
---
>       unsigned * destLen
164,165c164,165
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * destLen
>       *         source, 
164,165c164,165
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * destLen
>       char         source, 
164,165c164,165
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * destLen
>                source, 
164,165c164,165
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * destLen
>       char*         , 
164,165c164,165
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * destLen
>       *         , 
164,165c164,165
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * destLen
>       char         , 
164,165c164,165
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * destLen
>                , 
165c165
<       char*         source, 
---
>       *         source, 
165c165
<       char*         source, 
---
>                source, 
165c165
<       char*         source, 
---
>       *         , 
(84.9 %, 30867 bytes)
164c164
<       unsigned * ,
---
>       unsigned * 
164,165c164,165
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       *         source, 
164,165c164,165
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       char         source, 
164,165c164,165
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>                source, 
164,165c164,165
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       char*         , 
164,165c164,165
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       *         , 
164,165c164,165
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       char         , 
164,165c164,165
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>                , 
165c165
<       char*         source, 
---
>       *         source, 
165c165
<       char*         source, 
---
>                source, 
165c165
<       char*         source, 
---
>       *         , 
165c165
<       char*         source, 
---
>                , 
165c165
<       char*         source, 
---
>       *         source 
165c165
<       char*         source, 
---
>                source 
165c165
<       char*         source, 
---
>       *          
165c165
<       char*         source, 
---
>                 
165c165
<       char*         source, 
---
>       char         source, 
165c165
<       char*         source, 
---
>       char         , 
165c165
<       char*         source, 
---
>       char         source 
165c165
<       char*         source, 
---
>       char          
165,166c165,166
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char         source, 
>        int  sourceLen,
165,166c165,166
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char         , 
>        int  sourceLen,
165,166c165,166
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char         source 
>        int  sourceLen,
165,166c165,166
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char          
>        int  sourceLen,
165c165
<       char*         source, 
---
>       char*         , 
165c165
<       char*         source, 
---
>       char*          
165,166c165,166
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         , 
>        int  sourceLen,
165,166c165,166
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*          
>        int  sourceLen,
165,166c165,166
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         , 
>       unsigned   sourceLen,
(84.9 %, 30861 bytes)
165c165
<       char*         , 
---
>       char*          
165,166c165,166
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>        int  sourceLen,
165,166c165,166
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>       unsigned   sourceLen,
165,166c165,166
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>          sourceLen,
165,166c165,166
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>       unsigned int  ,
165,166c165,166
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>        int  ,
165,166c165,166
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>       unsigned   ,
165,166c165,166
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>          ,
166c166
<       unsigned int  sourceLen,
---
>        int  sourceLen,
166c166
<       unsigned int  sourceLen,
---
>          sourceLen,
166c166
<       unsigned int  sourceLen,
---
>        int  ,
166c166
<       unsigned int  sourceLen,
---
>          ,
166c166
<       unsigned int  sourceLen,
---
>        int  sourceLen
166c166
<       unsigned int  sourceLen,
---
>          sourceLen
166c166
<       unsigned int  sourceLen,
---
>        int  
166c166
<       unsigned int  sourceLen,
---
>          
166c166
<       unsigned int  sourceLen,
---
>       unsigned   sourceLen,
166c166
<       unsigned int  sourceLen,
---
>       unsigned   ,
(84.9 %, 30858 bytes)
166c166
<       unsigned   sourceLen,
---
>       unsigned   ,
166c166
<       unsigned   sourceLen,
---
>       unsigned   
166,167c166,167
<       unsigned   sourceLen,
<       int           blockSize100k, 
---
>       unsigned   ,
>                  blockSize100k, 
166,167c166,167
<       unsigned   sourceLen,
<       int           blockSize100k, 
---
>       unsigned   
>                  blockSize100k, 
166,167c166,167
<       unsigned   sourceLen,
<       int           blockSize100k, 
---
>       unsigned   ,
>       int           , 
(84.9 %, 30849 bytes)
166c166
<       unsigned   ,
---
>       unsigned   
166,167c166,167
<       unsigned   ,
<       int           blockSize100k, 
---
>       unsigned   
>                  blockSize100k, 
166,167c166,167
<       unsigned   ,
<       int           blockSize100k, 
---
>       unsigned   
>       int           , 
166,167c166,167
<       unsigned   ,
<       int           blockSize100k, 
---
>       unsigned   
>                  , 
166,167c166,167
<       unsigned   ,
<       int           blockSize100k, 
---
>       unsigned   
>       int           blockSize100k 
166,167c166,167
<       unsigned   ,
<       int           blockSize100k, 
---
>       unsigned   
>                  blockSize100k 
166,167c166,167
<       unsigned   ,
<       int           blockSize100k, 
---
>       unsigned   
>       int            
166,167c166,167
<       unsigned   ,
<       int           blockSize100k, 
---
>       unsigned   
>                   
167c167
<       int           blockSize100k, 
---
>                  blockSize100k, 
167c167
<       int           blockSize100k, 
---
>                  , 
167c167
<       int           blockSize100k, 
---
>                  blockSize100k 
167c167
<       int           blockSize100k, 
---
>                   
167,168c167,168
<       int           blockSize100k, 
<       int           verbosity, 
---
>                  blockSize100k, 
>                  verbosity, 
167,168c167,168
<       int           blockSize100k, 
<       int           verbosity, 
---
>                  , 
>                  verbosity, 
167,168c167,168
<       int           blockSize100k, 
<       int           verbosity, 
---
>                  blockSize100k 
>                  verbosity, 
167,168c167,168
<       int           blockSize100k, 
<       int           verbosity, 
---
>                   
>                  verbosity, 
167c167
<       int           blockSize100k, 
---
>       int           , 
167c167
<       int           blockSize100k, 
---
>       int            
167,168c167,168
<       int           blockSize100k, 
<       int           verbosity, 
---
>       int           , 
>                  verbosity, 
167,168c167,168
<       int           blockSize100k, 
<       int           verbosity, 
---
>       int            
>                  verbosity, 
167,168c167,168
<       int           blockSize100k, 
<       int           verbosity, 
---
>       int           , 
>       int           , 
(85.0 %, 30836 bytes)
167c167
<       int           , 
---
>       int            
167,168c167,168
<       int           , 
<       int           verbosity, 
---
>       int            
>                  verbosity, 
166a167
>       int            
168d168
<       int           verbosity, 
167,168c167,168
<       int           , 
<       int           verbosity, 
---
>       int            
>                  , 
167,168c167,168
<       int           , 
<       int           verbosity, 
---
>       int            
>       int           verbosity 
167,168c167,168
<       int           , 
<       int           verbosity, 
---
>       int            
>                  verbosity 
167,168c167,168
<       int           , 
<       int           verbosity, 
---
>       int            
>       int            
167,168c167,168
<       int           , 
<       int           verbosity, 
---
>       int            
>                   
168c168
<       int           verbosity, 
---
>                  verbosity, 
168c168
<       int           verbosity, 
---
>                  , 
168c168
<       int           verbosity, 
---
>                  verbosity 
168c168
<       int           verbosity, 
---
>                   
168,169c168,169
<       int           verbosity, 
<       int           workFactor 
---
>                  verbosity, 
>                  workFactor 
168,169c168,169
<       int           verbosity, 
<       int           workFactor 
---
>                  , 
>                  workFactor 
168,169c168,169
<       int           verbosity, 
<       int           workFactor 
---
>                  verbosity 
>                  workFactor 
168,169c168,169
<       int           verbosity, 
<       int           workFactor 
---
>                   
>                  workFactor 
168c168
<       int           verbosity, 
---
>       int           , 
168c168
<       int           verbosity, 
---
>       int            
168,169c168,169
<       int           verbosity, 
<       int           workFactor 
---
>       int           , 
>                  workFactor 
168,169c168,169
<       int           verbosity, 
<       int           workFactor 
---
>       int            
>                  workFactor 
168,169c168,169
<       int           verbosity, 
<       int           workFactor 
---
>       int           , 
>       int            
(85.0 %, 30827 bytes)
168c168
<       int           , 
---
>       int            
168,169c168,169
<       int           , 
<       int           workFactor 
---
>       int            
>                  workFactor 
168,169c168,169
<       int           , 
<       int           workFactor 
---
>       int            
>       int            
168,169c168,169
<       int           , 
<       int           workFactor 
---
>       int            
>                   
168c168
<       int           , 
---
>       int            
170c170
<    );
---
>    ;
168,170c168,170
<       int           , 
<       int           workFactor 
<    );
---
>       int            
>                  workFactor 
>    ;
168,170c168,170
<       int           , 
<       int           workFactor 
<    );
---
>       int            
>       int            
>    ;
168,170c168,170
<       int           , 
<       int           workFactor 
<    );
---
>       int            
>                   
>    ;
169c169
<       int           workFactor 
---
>                  workFactor 
169c169
<       int           workFactor 
---
>                   
169,170c169,170
<       int           workFactor 
<    );
---
>                  workFactor 
>    ;
169,170c169,170
<       int           workFactor 
<    );
---
>                   
>    ;
169,170c169,170
<       int           workFactor 
<    );
---
>                  workFactor 
>    )
169,170c169,170
<       int           workFactor 
<    );
---
>                   
>    )
169,170c169,170
<       int           workFactor 
<    );
---
>                  workFactor 
>    
169,170c169,170
<       int           workFactor 
<    );
---
>                   
>    
169c169
<       int           workFactor 
---
>       int            
169,170c169,170
<       int           workFactor 
<    );
---
>       int            
>    ;
169,170c169,170
<       int           workFactor 
<    );
---
>       int            
>    )
169,170c169,170
<       int           workFactor 
<    );
---
>       int            
>    
169c169
<       int           workFactor 
---
>       int            
172c172
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>  int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
(85.0 %, 30817 bytes)
170c170
<    );
---
>    ;
170c170
<    );
---
>    
170c170
<    );
---
>    ;
172c172
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>  int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
170c170
<    );
---
>    
172c172
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>  int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
170c170
<    );
---
>    ;
172c172
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzBuffToBuffDecompress) ( 
170c170
<    );
---
>    
172c172
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzBuffToBuffDecompress) ( 
170c170
<    );
---
>    ;
172c172
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>   BZ_API(BZ2_bzBuffToBuffDecompress) ( 
170c170
<    );
---
>    
172c172
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>   BZ_API(BZ2_bzBuffToBuffDecompress) ( 
170c170
<    );
---
>    )
170c170
<    );
---
>    )
172c172
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>  int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
170c170
<    );
---
>    )
172c172
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzBuffToBuffDecompress) ( 
170c170
<    );
---
>    )
172c172
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>   BZ_API(BZ2_bzBuffToBuffDecompress) ( 
170c170
<    );
---
>    )
172c172
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_EXTERN int (BZ2_bzBuffToBuffDecompress) ( 
170c170
<    );
---
>    )
172c172
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>  int (BZ2_bzBuffToBuffDecompress) ( 
170c170
<    );
---
>    )
172c172
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_EXTERN  (BZ2_bzBuffToBuffDecompress) ( 
170c170
<    );
---
>    )
172c172
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>   (BZ2_bzBuffToBuffDecompress) ( 
172c172
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>  int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
172c172
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>   BZ_API(BZ2_bzBuffToBuffDecompress) ( 
(85.0 %, 30808 bytes)
172c172
<  int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>   BZ_API(BZ2_bzBuffToBuffDecompress) ( 
172c172
<  int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>   (BZ2_bzBuffToBuffDecompress) ( 
172c172
<  int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>   BZ_APIBZ2_bzBuffToBuffDecompress) ( 
(85.0 %, 30805 bytes)
172c172
<   BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>   (BZ2_bzBuffToBuffDecompress) ( 
172c172
<   BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>   BZ2_bzBuffToBuffDecompress) ( 
172c172
<   BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>   () ( 
172c172
<   BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>   ) ( 
172c172
<   BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>   (BZ2_bzBuffToBuffDecompress ( 
172c172
<   BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>   BZ2_bzBuffToBuffDecompress ( 
(85.0 %, 30799 bytes)
172c172
<   (BZ2_bzBuffToBuffDecompress) ( 
---
>   BZ2_bzBuffToBuffDecompress) ( 
172c172
<   (BZ2_bzBuffToBuffDecompress) ( 
---
>   ) ( 
172c172
<   (BZ2_bzBuffToBuffDecompress) ( 
---
>   BZ2_bzBuffToBuffDecompress ( 
172c172
<   (BZ2_bzBuffToBuffDecompress) ( 
---
>    ( 
172c172
<   (BZ2_bzBuffToBuffDecompress) ( 
---
>   BZ2_bzBuffToBuffDecompress)  
172c172
<   (BZ2_bzBuffToBuffDecompress) ( 
---
>   )  
172c172
<   (BZ2_bzBuffToBuffDecompress) ( 
---
>   BZ2_bzBuffToBuffDecompress  
172c172
<   (BZ2_bzBuffToBuffDecompress) ( 
---
>     
172c172
<   (BZ2_bzBuffToBuffDecompress) ( 
---
>   () ( 
172c172
<   (BZ2_bzBuffToBuffDecompress) ( 
---
>   ( ( 
172c172
<   (BZ2_bzBuffToBuffDecompress) ( 
---
>   ()  
172c172
<   (BZ2_bzBuffToBuffDecompress) ( 
---
>   (  
172,173c172,173
<   (BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>   () ( 
>       *         dest, 
172,173c172,173
<   (BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>   ( ( 
>       *         dest, 
172,173c172,173
<   (BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>   ()  
>       *         dest, 
172,173c172,173
<   (BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>   (  
>       *         dest, 
172c172
<   (BZ2_bzBuffToBuffDecompress) ( 
---
>   (BZ2_bzBuffToBuffDecompress ( 
172c172
<   (BZ2_bzBuffToBuffDecompress) ( 
---
>   (BZ2_bzBuffToBuffDecompress  
172,173c172,173
<   (BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>   (BZ2_bzBuffToBuffDecompress ( 
>       *         dest, 
172,173c172,173
<   (BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>   (BZ2_bzBuffToBuffDecompress  
>       *         dest, 
172,173c172,173
<   (BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>   (BZ2_bzBuffToBuffDecompress ( 
>       char         dest, 
172,173c172,173
<   (BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>   (BZ2_bzBuffToBuffDecompress  
>       char         dest, 
172,173c172,173
<   (BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>   (BZ2_bzBuffToBuffDecompress ( 
>                dest, 
(85.0 %, 30797 bytes)
172,173c172,173
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>    ( 
>       *         dest, 
172,173c172,173
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>     
>       *         dest, 
172,173c172,173
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>    ( 
>       char         dest, 
172,173c172,173
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>     
>       char         dest, 
172,173c172,173
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>    ( 
>                dest, 
172,173c172,173
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>     
>                dest, 
172c172
<   BZ2_bzBuffToBuffDecompress ( 
---
>   BZ2_bzBuffToBuffDecompress  
172,173c172,173
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>   BZ2_bzBuffToBuffDecompress  
>       *         dest, 
172,173c172,173
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>   BZ2_bzBuffToBuffDecompress  
>       char         dest, 
172,173c172,173
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>   BZ2_bzBuffToBuffDecompress  
>                dest, 
172,173c172,173
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>   BZ2_bzBuffToBuffDecompress  
>       char*         , 
172,173c172,173
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>   BZ2_bzBuffToBuffDecompress  
>       *         , 
172,173c172,173
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>   BZ2_bzBuffToBuffDecompress  
>       char         , 
172,173c172,173
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>   BZ2_bzBuffToBuffDecompress  
>                , 
173c173
<       char*         dest, 
---
>       *         dest, 
173c173
<       char*         dest, 
---
>                dest, 
173c173
<       char*         dest, 
---
>       *         , 
173c173
<       char*         dest, 
---
>                , 
173c173
<       char*         dest, 
---
>       *         dest 
173c173
<       char*         dest, 
---
>                dest 
173c173
<       char*         dest, 
---
>       *          
173c173
<       char*         dest, 
---
>                 
173c173
<       char*         dest, 
---
>       char         dest, 
173c173
<       char*         dest, 
---
>       char         , 
173c173
<       char*         dest, 
---
>       char         dest 
173c173
<       char*         dest, 
---
>       char          
173,174c173,174
<       char*         dest, 
<       unsigned int* destLen,
---
>       char         dest, 
>        int* destLen,
173,174c173,174
<       char*         dest, 
<       unsigned int* destLen,
---
>       char         , 
>        int* destLen,
173,174c173,174
<       char*         dest, 
<       unsigned int* destLen,
---
>       char         dest 
>        int* destLen,
173,174c173,174
<       char*         dest, 
<       unsigned int* destLen,
---
>       char          
>        int* destLen,
173c173
<       char*         dest, 
---
>       char*         , 
173c173
<       char*         dest, 
---
>       char*          
173,174c173,174
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         , 
>        int* destLen,
173,174c173,174
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*          
>        int* destLen,
173,174c173,174
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         , 
>       unsigned * destLen,
(85.0 %, 30793 bytes)
173c173
<       char*         , 
---
>       char*          
173,174c173,174
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>        int* destLen,
173,174c173,174
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>       unsigned * destLen,
173,174c173,174
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>        * destLen,
173,174c173,174
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>       unsigned int destLen,
173,174c173,174
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>        int destLen,
173,174c173,174
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>       unsigned  destLen,
173,174c173,174
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>         destLen,
174c174
<       unsigned int* destLen,
---
>        int* destLen,
174c174
<       unsigned int* destLen,
---
>        * destLen,
174c174
<       unsigned int* destLen,
---
>        int destLen,
174c174
<       unsigned int* destLen,
---
>         destLen,
174c174
<       unsigned int* destLen,
---
>        int* ,
174c174
<       unsigned int* destLen,
---
>        * ,
174c174
<       unsigned int* destLen,
---
>        int ,
174c174
<       unsigned int* destLen,
---
>         ,
174c174
<       unsigned int* destLen,
---
>       unsigned * destLen,
174c174
<       unsigned int* destLen,
---
>       unsigned  destLen,
174c174
<       unsigned int* destLen,
---
>       unsigned * ,
(85.0 %, 30790 bytes)
174c174
<       unsigned * destLen,
---
>       unsigned  destLen,
174c174
<       unsigned * destLen,
---
>       unsigned  ,
174c174
<       unsigned * destLen,
---
>       unsigned  destLen
174c174
<       unsigned * destLen,
---
>       unsigned  
174,175c174,175
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned  destLen,
>       *         source, 
174,175c174,175
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned  ,
>       *         source, 
174,175c174,175
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned  destLen
>       *         source, 
174,175c174,175
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned  
>       *         source, 
174c174
<       unsigned * destLen,
---
>       unsigned * ,
174c174
<       unsigned * destLen,
---
>       unsigned * 
174,175c174,175
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * ,
>       *         source, 
174,175c174,175
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * 
>       *         source, 
174,175c174,175
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * ,
>       char         source, 
174,175c174,175
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * 
>       char         source, 
174,175c174,175
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * ,
>                source, 
174,175c174,175
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * 
>                source, 
174c174
<       unsigned * destLen,
---
>       unsigned * destLen
174,175c174,175
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * destLen
>       *         source, 
174,175c174,175
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * destLen
>       char         source, 
174,175c174,175
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * destLen
>                source, 
174,175c174,175
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * destLen
>       char*         , 
174,175c174,175
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * destLen
>       *         , 
174,175c174,175
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * destLen
>       char         , 
174,175c174,175
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * destLen
>                , 
175c175
<       char*         source, 
---
>       *         source, 
175c175
<       char*         source, 
---
>                source, 
175c175
<       char*         source, 
---
>       *         , 
(85.0 %, 30783 bytes)
174c174
<       unsigned * ,
---
>       unsigned * 
174,175c174,175
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       *         source, 
174,175c174,175
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       char         source, 
174,175c174,175
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>                source, 
174,175c174,175
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       char*         , 
174,175c174,175
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       *         , 
174,175c174,175
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       char         , 
174,175c174,175
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>                , 
175c175
<       char*         source, 
---
>       *         source, 
175c175
<       char*         source, 
---
>                source, 
175c175
<       char*         source, 
---
>       *         , 
175c175
<       char*         source, 
---
>                , 
175c175
<       char*         source, 
---
>       *         source 
175c175
<       char*         source, 
---
>                source 
175c175
<       char*         source, 
---
>       *          
175c175
<       char*         source, 
---
>                 
175c175
<       char*         source, 
---
>       char         source, 
175c175
<       char*         source, 
---
>       char         , 
175c175
<       char*         source, 
---
>       char         source 
175c175
<       char*         source, 
---
>       char          
175,176c175,176
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char         source, 
>        int  sourceLen,
175,176c175,176
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char         , 
>        int  sourceLen,
175,176c175,176
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char         source 
>        int  sourceLen,
175,176c175,176
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char          
>        int  sourceLen,
175c175
<       char*         source, 
---
>       char*         , 
175c175
<       char*         source, 
---
>       char*          
175,176c175,176
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         , 
>        int  sourceLen,
175,176c175,176
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*          
>        int  sourceLen,
175,176c175,176
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         , 
>       unsigned   sourceLen,
(85.0 %, 30777 bytes)
175c175
<       char*         , 
---
>       char*          
175,176c175,176
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>        int  sourceLen,
175,176c175,176
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>       unsigned   sourceLen,
175,176c175,176
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>          sourceLen,
175,176c175,176
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>       unsigned int  ,
175,176c175,176
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>        int  ,
175,176c175,176
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>       unsigned   ,
175,176c175,176
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>          ,
176c176
<       unsigned int  sourceLen,
---
>        int  sourceLen,
176c176
<       unsigned int  sourceLen,
---
>          sourceLen,
176c176
<       unsigned int  sourceLen,
---
>        int  ,
176c176
<       unsigned int  sourceLen,
---
>          ,
176c176
<       unsigned int  sourceLen,
---
>        int  sourceLen
176c176
<       unsigned int  sourceLen,
---
>          sourceLen
176c176
<       unsigned int  sourceLen,
---
>        int  
176c176
<       unsigned int  sourceLen,
---
>          
176c176
<       unsigned int  sourceLen,
---
>       unsigned   sourceLen,
176c176
<       unsigned int  sourceLen,
---
>       unsigned   ,
(85.0 %, 30774 bytes)
176c176
<       unsigned   sourceLen,
---
>       unsigned   ,
176c176
<       unsigned   sourceLen,
---
>       unsigned   
176,177c176,177
<       unsigned   sourceLen,
<       int           small, 
---
>       unsigned   ,
>                  small, 
176,177c176,177
<       unsigned   sourceLen,
<       int           small, 
---
>       unsigned   
>                  small, 
176,177c176,177
<       unsigned   sourceLen,
<       int           small, 
---
>       unsigned   ,
>       int           , 
(85.0 %, 30765 bytes)
176c176
<       unsigned   ,
---
>       unsigned   
176,177c176,177
<       unsigned   ,
<       int           small, 
---
>       unsigned   
>                  small, 
176,177c176,177
<       unsigned   ,
<       int           small, 
---
>       unsigned   
>       int           , 
176,177c176,177
<       unsigned   ,
<       int           small, 
---
>       unsigned   
>                  , 
176,177c176,177
<       unsigned   ,
<       int           small, 
---
>       unsigned   
>       int           small 
176,177c176,177
<       unsigned   ,
<       int           small, 
---
>       unsigned   
>                  small 
176,177c176,177
<       unsigned   ,
<       int           small, 
---
>       unsigned   
>       int            
176,177c176,177
<       unsigned   ,
<       int           small, 
---
>       unsigned   
>                   
177c177
<       int           small, 
---
>                  small, 
177c177
<       int           small, 
---
>                  , 
177c177
<       int           small, 
---
>                  small 
177c177
<       int           small, 
---
>                   
177,178c177,178
<       int           small, 
<       int           verbosity 
---
>                  small, 
>                  verbosity 
177,178c177,178
<       int           small, 
<       int           verbosity 
---
>                  , 
>                  verbosity 
177,178c177,178
<       int           small, 
<       int           verbosity 
---
>                  small 
>                  verbosity 
177,178c177,178
<       int           small, 
<       int           verbosity 
---
>                   
>                  verbosity 
177c177
<       int           small, 
---
>       int           , 
177c177
<       int           small, 
---
>       int            
177,178c177,178
<       int           small, 
<       int           verbosity 
---
>       int           , 
>                  verbosity 
177,178c177,178
<       int           small, 
<       int           verbosity 
---
>       int            
>                  verbosity 
177,178c177,178
<       int           small, 
<       int           verbosity 
---
>       int           , 
>       int            
(85.0 %, 30760 bytes)
177c177
<       int           , 
---
>       int            
177,178c177,178
<       int           , 
<       int           verbosity 
---
>       int            
>                  verbosity 
177,178c177,178
<       int           , 
<       int           verbosity 
---
>       int            
>       int            
177,178c177,178
<       int           , 
<       int           verbosity 
---
>       int            
>                   
177c177
<       int           , 
---
>       int            
179c179
<    );
---
>    ;
177,179c177,179
<       int           , 
<       int           verbosity 
<    );
---
>       int            
>                  verbosity 
>    ;
177,179c177,179
<       int           , 
<       int           verbosity 
<    );
---
>       int            
>       int            
>    ;
177,179c177,179
<       int           , 
<       int           verbosity 
<    );
---
>       int            
>                   
>    ;
178c178
<       int           verbosity 
---
>                  verbosity 
178c178
<       int           verbosity 
---
>                   
178,179c178,179
<       int           verbosity 
<    );
---
>                  verbosity 
>    ;
178,179c178,179
<       int           verbosity 
<    );
---
>                   
>    ;
178,179c178,179
<       int           verbosity 
<    );
---
>                  verbosity 
>    )
178,179c178,179
<       int           verbosity 
<    );
---
>                   
>    )
178,179c178,179
<       int           verbosity 
<    );
---
>                  verbosity 
>    
178,179c178,179
<       int           verbosity 
<    );
---
>                   
>    
178c178
<       int           verbosity 
---
>       int            
178,179c178,179
<       int           verbosity 
<    );
---
>       int            
>    ;
178,179c178,179
<       int           verbosity 
<    );
---
>       int            
>    )
178,179c178,179
<       int           verbosity 
<    );
---
>       int            
>    
178c178
<       int           verbosity 
---
>       int            
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>  const char * BZ_API(BZ2_bzlibVersion) (
(85.0 %, 30751 bytes)
179c179
<    );
---
>    ;
179c179
<    );
---
>    
179c179
<    );
---
>    ;
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>  const char * BZ_API(BZ2_bzlibVersion) (
179c179
<    );
---
>    
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>  const char * BZ_API(BZ2_bzlibVersion) (
179c179
<    );
---
>    ;
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
> BZ_EXTERN  char * BZ_API(BZ2_bzlibVersion) (
179c179
<    );
---
>    
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
> BZ_EXTERN  char * BZ_API(BZ2_bzlibVersion) (
179c179
<    );
---
>    ;
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>   char * BZ_API(BZ2_bzlibVersion) (
179c179
<    );
---
>    
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>   char * BZ_API(BZ2_bzlibVersion) (
179c179
<    );
---
>    )
179c179
<    );
---
>    )
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>  const char * BZ_API(BZ2_bzlibVersion) (
179c179
<    );
---
>    )
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
> BZ_EXTERN  char * BZ_API(BZ2_bzlibVersion) (
179c179
<    );
---
>    )
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>   char * BZ_API(BZ2_bzlibVersion) (
179c179
<    );
---
>    )
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
> BZ_EXTERN const  * BZ_API(BZ2_bzlibVersion) (
179c179
<    );
---
>    )
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>  const  * BZ_API(BZ2_bzlibVersion) (
179c179
<    );
---
>    )
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
> BZ_EXTERN   * BZ_API(BZ2_bzlibVersion) (
179c179
<    );
---
>    )
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>    * BZ_API(BZ2_bzlibVersion) (
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>  const char * BZ_API(BZ2_bzlibVersion) (
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>   char * BZ_API(BZ2_bzlibVersion) (
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>  const  * BZ_API(BZ2_bzlibVersion) (
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>    * BZ_API(BZ2_bzlibVersion) (
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>  const char  BZ_API(BZ2_bzlibVersion) (
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>   char  BZ_API(BZ2_bzlibVersion) (
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>  const   BZ_API(BZ2_bzlibVersion) (
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>     BZ_API(BZ2_bzlibVersion) (
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
> BZ_EXTERN  char * BZ_API(BZ2_bzlibVersion) (
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
> BZ_EXTERN   * BZ_API(BZ2_bzlibVersion) (
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
> BZ_EXTERN  char  BZ_API(BZ2_bzlibVersion) (
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
> BZ_EXTERN    BZ_API(BZ2_bzlibVersion) (
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
> BZ_EXTERN  char * (BZ2_bzlibVersion) (
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
> BZ_EXTERN   * (BZ2_bzlibVersion) (
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
> BZ_EXTERN  char  (BZ2_bzlibVersion) (
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
> BZ_EXTERN    (BZ2_bzlibVersion) (
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
> BZ_EXTERN const  * BZ_API(BZ2_bzlibVersion) (
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
> BZ_EXTERN const   BZ_API(BZ2_bzlibVersion) (
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
> BZ_EXTERN const  * (BZ2_bzlibVersion) (
(85.0 %, 30742 bytes)
184c184
<  const char * BZ_API(BZ2_bzlibVersion) (
---
>   char * BZ_API(BZ2_bzlibVersion) (
184c184
<  const char * BZ_API(BZ2_bzlibVersion) (
---
>    * BZ_API(BZ2_bzlibVersion) (
184c184
<  const char * BZ_API(BZ2_bzlibVersion) (
---
>   char  BZ_API(BZ2_bzlibVersion) (
184c184
<  const char * BZ_API(BZ2_bzlibVersion) (
---
>     BZ_API(BZ2_bzlibVersion) (
184c184
<  const char * BZ_API(BZ2_bzlibVersion) (
---
>   char * (BZ2_bzlibVersion) (
184c184
<  const char * BZ_API(BZ2_bzlibVersion) (
---
>    * (BZ2_bzlibVersion) (
184c184
<  const char * BZ_API(BZ2_bzlibVersion) (
---
>   char  (BZ2_bzlibVersion) (
184c184
<  const char * BZ_API(BZ2_bzlibVersion) (
---
>     (BZ2_bzlibVersion) (
184c184
<  const char * BZ_API(BZ2_bzlibVersion) (
---
>  const  * BZ_API(BZ2_bzlibVersion) (
184c184
<  const char * BZ_API(BZ2_bzlibVersion) (
---
>  const   BZ_API(BZ2_bzlibVersion) (
184c184
<  const char * BZ_API(BZ2_bzlibVersion) (
---
>  const  * (BZ2_bzlibVersion) (
184c184
<  const char * BZ_API(BZ2_bzlibVersion) (
---
>  const   (BZ2_bzlibVersion) (
184c184
<  const char * BZ_API(BZ2_bzlibVersion) (
---
>  const  * BZ_APIBZ2_bzlibVersion) (
184c184
<  const char * BZ_API(BZ2_bzlibVersion) (
---
>  const   BZ_APIBZ2_bzlibVersion) (
184c184
<  const char * BZ_API(BZ2_bzlibVersion) (
---
>  const  * BZ2_bzlibVersion) (
184c184
<  const char * BZ_API(BZ2_bzlibVersion) (
---
>  const   BZ2_bzlibVersion) (
184c184
<  const char * BZ_API(BZ2_bzlibVersion) (
---
>  const char  BZ_API(BZ2_bzlibVersion) (
184c184
<  const char * BZ_API(BZ2_bzlibVersion) (
---
>  const char  (BZ2_bzlibVersion) (
184c184
<  const char * BZ_API(BZ2_bzlibVersion) (
---
>  const char  BZ_APIBZ2_bzlibVersion) (
184c184
<  const char * BZ_API(BZ2_bzlibVersion) (
---
>  const char  BZ2_bzlibVersion) (
184c184
<  const char * BZ_API(BZ2_bzlibVersion) (
---
>  const char  BZ_API() (
184c184
<  const char * BZ_API(BZ2_bzlibVersion) (
---
>  const char  () (
184c184
<  const char * BZ_API(BZ2_bzlibVersion) (
---
>  const char  BZ_API) (
184c184
<  const char * BZ_API(BZ2_bzlibVersion) (
---
>  const char  ) (
184c184
<  const char * BZ_API(BZ2_bzlibVersion) (
---
>  const char * (BZ2_bzlibVersion) (
184c184
<  const char * BZ_API(BZ2_bzlibVersion) (
---
>  const char * BZ2_bzlibVersion) (
184c184
<  const char * BZ_API(BZ2_bzlibVersion) (
---
>  const char * () (
184c184
<  const char * BZ_API(BZ2_bzlibVersion) (
---
>  const char * ) (
184c184
<  const char * BZ_API(BZ2_bzlibVersion) (
---
>  const char * (BZ2_bzlibVersion (
184c184
<  const char * BZ_API(BZ2_bzlibVersion) (
---
>  const char * BZ2_bzlibVersion (
(85.0 %, 30736 bytes)
184c184
<  const char * (BZ2_bzlibVersion) (
---
>  const char * BZ2_bzlibVersion) (
184c184
<  const char * (BZ2_bzlibVersion) (
---
>  const char * ) (
184c184
<  const char * (BZ2_bzlibVersion) (
---
>  const char * BZ2_bzlibVersion (
184c184
<  const char * (BZ2_bzlibVersion) (
---
>  const char *  (
184c184
<  const char * (BZ2_bzlibVersion) (
---
>  const char * BZ2_bzlibVersion) 
184c184
<  const char * (BZ2_bzlibVersion) (
---
>  const char * ) 
184c184
<  const char * (BZ2_bzlibVersion) (
---
>  const char * BZ2_bzlibVersion 
184c184
<  const char * (BZ2_bzlibVersion) (
---
>  const char *  
184c184
<  const char * (BZ2_bzlibVersion) (
---
>  const char * () (
184c184
<  const char * (BZ2_bzlibVersion) (
---
>  const char * ( (
184c184
<  const char * (BZ2_bzlibVersion) (
---
>  const char * () 
184c184
<  const char * (BZ2_bzlibVersion) (
---
>  const char * ( 
184,185c184,185
<  const char * (BZ2_bzlibVersion) (
<       void
---
>  const char * () (
>       
184,185c184,185
<  const char * (BZ2_bzlibVersion) (
<       void
---
>  const char * ( (
>       
184,185c184,185
<  const char * (BZ2_bzlibVersion) (
<       void
---
>  const char * () 
>       
184,185c184,185
<  const char * (BZ2_bzlibVersion) (
<       void
---
>  const char * ( 
>       
184c184
<  const char * (BZ2_bzlibVersion) (
---
>  const char * (BZ2_bzlibVersion (
184c184
<  const char * (BZ2_bzlibVersion) (
---
>  const char * (BZ2_bzlibVersion 
184,185c184,185
<  const char * (BZ2_bzlibVersion) (
<       void
---
>  const char * (BZ2_bzlibVersion (
>       
184,185c184,185
<  const char * (BZ2_bzlibVersion) (
<       void
---
>  const char * (BZ2_bzlibVersion 
>       
184c184
<  const char * (BZ2_bzlibVersion) (
---
>  const char * (BZ2_bzlibVersion (
186c186
<    );
---
>    ;
184c184
<  const char * (BZ2_bzlibVersion) (
---
>  const char * (BZ2_bzlibVersion 
186c186
<    );
---
>    ;
184,186c184,186
<  const char * (BZ2_bzlibVersion) (
<       void
<    );
---
>  const char * (BZ2_bzlibVersion (
>       
>    ;
(85.0 %, 30734 bytes)
184,185c184,185
<  const char * BZ2_bzlibVersion (
<       void
---
>  const char *  (
>       
184,185c184,185
<  const char * BZ2_bzlibVersion (
<       void
---
>  const char *  
>       
184c184
<  const char * BZ2_bzlibVersion (
---
>  const char *  (
186c186
<    );
---
>    ;
184c184
<  const char * BZ2_bzlibVersion (
---
>  const char *  
186c186
<    );
---
>    ;
184,186c184,186
<  const char * BZ2_bzlibVersion (
<       void
<    );
---
>  const char *  (
>       
>    ;
184,186c184,186
<  const char * BZ2_bzlibVersion (
<       void
<    );
---
>  const char *  
>       
>    ;
184c184
<  const char * BZ2_bzlibVersion (
---
>  const char * BZ2_bzlibVersion 
184,185c184,185
<  const char * BZ2_bzlibVersion (
<       void
---
>  const char * BZ2_bzlibVersion 
>       
184c184
<  const char * BZ2_bzlibVersion (
---
>  const char * BZ2_bzlibVersion 
186c186
<    );
---
>    ;
184,186c184,186
<  const char * BZ2_bzlibVersion (
<       void
<    );
---
>  const char * BZ2_bzlibVersion 
>       
>    ;
184c184
<  const char * BZ2_bzlibVersion (
---
>  const char * BZ2_bzlibVersion 
186c186
<    );
---
>    )
184,186c184,186
<  const char * BZ2_bzlibVersion (
<       void
<    );
---
>  const char * BZ2_bzlibVersion 
>       
>    )
184c184
<  const char * BZ2_bzlibVersion (
---
>  const char * BZ2_bzlibVersion 
186c186
<    );
---
>    
184,186c184,186
<  const char * BZ2_bzlibVersion (
<       void
<    );
---
>  const char * BZ2_bzlibVersion 
>       
>    
185c185
<       void
---
>       
185,186c185,186
<       void
<    );
---
>       
>    ;
185,186c185,186
<       void
<    );
---
>       
>    )
185,186c185,186
<       void
<    );
---
>       
>    
185c185
<       void
---
>       
188c188
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>  BZFILE * BZ_API(BZ2_bzopen) (
(85.0 %, 30730 bytes)
186c186
<    );
---
>    ;
186c186
<    );
---
>    
186c186
<    );
---
>    ;
188c188
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>  BZFILE * BZ_API(BZ2_bzopen) (
186c186
<    );
---
>    
188c188
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>  BZFILE * BZ_API(BZ2_bzopen) (
186c186
<    );
---
>    ;
188c188
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN  * BZ_API(BZ2_bzopen) (
186c186
<    );
---
>    
188c188
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN  * BZ_API(BZ2_bzopen) (
186c186
<    );
---
>    ;
188c188
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>   * BZ_API(BZ2_bzopen) (
186c186
<    );
---
>    
188c188
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>   * BZ_API(BZ2_bzopen) (
186c186
<    );
---
>    )
186c186
<    );
---
>    )
188c188
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>  BZFILE * BZ_API(BZ2_bzopen) (
186c186
<    );
---
>    )
188c188
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN  * BZ_API(BZ2_bzopen) (
186c186
<    );
---
>    )
188c188
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>   * BZ_API(BZ2_bzopen) (
186c186
<    );
---
>    )
188c188
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN BZFILE  BZ_API(BZ2_bzopen) (
186c186
<    );
---
>    )
188c188
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>  BZFILE  BZ_API(BZ2_bzopen) (
186c186
<    );
---
>    )
188c188
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN   BZ_API(BZ2_bzopen) (
186c186
<    );
---
>    )
188c188
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>    BZ_API(BZ2_bzopen) (
188c188
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>  BZFILE * BZ_API(BZ2_bzopen) (
188c188
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>   * BZ_API(BZ2_bzopen) (
188c188
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>  BZFILE  BZ_API(BZ2_bzopen) (
(85.0 %, 30721 bytes)
188c188
<  BZFILE * BZ_API(BZ2_bzopen) (
---
>   * BZ_API(BZ2_bzopen) (
188c188
<  BZFILE * BZ_API(BZ2_bzopen) (
---
>    BZ_API(BZ2_bzopen) (
188c188
<  BZFILE * BZ_API(BZ2_bzopen) (
---
>   * (BZ2_bzopen) (
188c188
<  BZFILE * BZ_API(BZ2_bzopen) (
---
>    (BZ2_bzopen) (
188c188
<  BZFILE * BZ_API(BZ2_bzopen) (
---
>   * BZ_APIBZ2_bzopen) (
(85.0 %, 30715 bytes)
188c188
<   * BZ_API(BZ2_bzopen) (
---
>    BZ_API(BZ2_bzopen) (
188c188
<   * BZ_API(BZ2_bzopen) (
---
>    (BZ2_bzopen) (
188c188
<   * BZ_API(BZ2_bzopen) (
---
>    BZ_APIBZ2_bzopen) (
188c188
<   * BZ_API(BZ2_bzopen) (
---
>    BZ2_bzopen) (
188c188
<   * BZ_API(BZ2_bzopen) (
---
>    BZ_API() (
188c188
<   * BZ_API(BZ2_bzopen) (
---
>    () (
188c188
<   * BZ_API(BZ2_bzopen) (
---
>    BZ_API) (
188c188
<   * BZ_API(BZ2_bzopen) (
---
>    ) (
188c188
<   * BZ_API(BZ2_bzopen) (
---
>   * (BZ2_bzopen) (
188c188
<   * BZ_API(BZ2_bzopen) (
---
>   * BZ2_bzopen) (
188c188
<   * BZ_API(BZ2_bzopen) (
---
>   * () (
188c188
<   * BZ_API(BZ2_bzopen) (
---
>   * ) (
188c188
<   * BZ_API(BZ2_bzopen) (
---
>   * (BZ2_bzopen (
188c188
<   * BZ_API(BZ2_bzopen) (
---
>   * BZ2_bzopen (
(85.0 %, 30709 bytes)
188c188
<   * (BZ2_bzopen) (
---
>   * BZ2_bzopen) (
188c188
<   * (BZ2_bzopen) (
---
>   * ) (
188c188
<   * (BZ2_bzopen) (
---
>   * BZ2_bzopen (
188c188
<   * (BZ2_bzopen) (
---
>   *  (
188c188
<   * (BZ2_bzopen) (
---
>   * BZ2_bzopen) 
188c188
<   * (BZ2_bzopen) (
---
>   * ) 
188c188
<   * (BZ2_bzopen) (
---
>   * BZ2_bzopen 
188c188
<   * (BZ2_bzopen) (
---
>   *  
188c188
<   * (BZ2_bzopen) (
---
>   * () (
188c188
<   * (BZ2_bzopen) (
---
>   * ( (
188c188
<   * (BZ2_bzopen) (
---
>   * () 
188c188
<   * (BZ2_bzopen) (
---
>   * ( 
188,189c188,189
<   * (BZ2_bzopen) (
<       const char *path,
---
>   * () (
>        char *path,
188,189c188,189
<   * (BZ2_bzopen) (
<       const char *path,
---
>   * ( (
>        char *path,
188,189c188,189
<   * (BZ2_bzopen) (
<       const char *path,
---
>   * () 
>        char *path,
188,189c188,189
<   * (BZ2_bzopen) (
<       const char *path,
---
>   * ( 
>        char *path,
188c188
<   * (BZ2_bzopen) (
---
>   * (BZ2_bzopen (
188c188
<   * (BZ2_bzopen) (
---
>   * (BZ2_bzopen 
188,189c188,189
<   * (BZ2_bzopen) (
<       const char *path,
---
>   * (BZ2_bzopen (
>        char *path,
188,189c188,189
<   * (BZ2_bzopen) (
<       const char *path,
---
>   * (BZ2_bzopen 
>        char *path,
(85.0 %, 30707 bytes)
188,189c188,189
<   * BZ2_bzopen (
<       const char *path,
---
>   *  (
>        char *path,
188,189c188,189
<   * BZ2_bzopen (
<       const char *path,
---
>   *  
>        char *path,
188,189c188,189
<   * BZ2_bzopen (
<       const char *path,
---
>   *  (
>       const  *path,
188,189c188,189
<   * BZ2_bzopen (
<       const char *path,
---
>   *  
>       const  *path,
188,189c188,189
<   * BZ2_bzopen (
<       const char *path,
---
>   *  (
>         *path,
188,189c188,189
<   * BZ2_bzopen (
<       const char *path,
---
>   *  
>         *path,
188c188
<   * BZ2_bzopen (
---
>   * BZ2_bzopen 
188,189c188,189
<   * BZ2_bzopen (
<       const char *path,
---
>   * BZ2_bzopen 
>        char *path,
188,189c188,189
<   * BZ2_bzopen (
<       const char *path,
---
>   * BZ2_bzopen 
>       const  *path,
188,189c188,189
<   * BZ2_bzopen (
<       const char *path,
---
>   * BZ2_bzopen 
>         *path,
188,189c188,189
<   * BZ2_bzopen (
<       const char *path,
---
>   * BZ2_bzopen 
>       const char path,
188,189c188,189
<   * BZ2_bzopen (
<       const char *path,
---
>   * BZ2_bzopen 
>        char path,
188,189c188,189
<   * BZ2_bzopen (
<       const char *path,
---
>   * BZ2_bzopen 
>       const  path,
188,189c188,189
<   * BZ2_bzopen (
<       const char *path,
---
>   * BZ2_bzopen 
>         path,
189c189
<       const char *path,
---
>        char *path,
189c189
<       const char *path,
---
>         *path,
189c189
<       const char *path,
---
>        char path,
189c189
<       const char *path,
---
>         path,
189c189
<       const char *path,
---
>        char *,
189c189
<       const char *path,
---
>         *,
189c189
<       const char *path,
---
>        char ,
189c189
<       const char *path,
---
>         ,
189c189
<       const char *path,
---
>       const  *path,
189c189
<       const char *path,
---
>       const  path,
189c189
<       const char *path,
---
>       const  *,
189c189
<       const char *path,
---
>       const  ,
189c189
<       const char *path,
---
>       const  *path
189c189
<       const char *path,
---
>       const  path
189c189
<       const char *path,
---
>       const  *
189c189
<       const char *path,
---
>       const  
189c189
<       const char *path,
---
>       const char path,
189c189
<       const char *path,
---
>       const char ,
189c189
<       const char *path,
---
>       const char path
189c189
<       const char *path,
---
>       const char 
189,190c189,190
<       const char *path,
<       const char *mode
---
>       const char path,
>        char *mode
189,190c189,190
<       const char *path,
<       const char *mode
---
>       const char ,
>        char *mode
189,190c189,190
<       const char *path,
<       const char *mode
---
>       const char path
>        char *mode
189,190c189,190
<       const char *path,
<       const char *mode
---
>       const char 
>        char *mode
189c189
<       const char *path,
---
>       const char *,
189c189
<       const char *path,
---
>       const char *
189,190c189,190
<       const char *path,
<       const char *mode
---
>       const char *,
>        char *mode
189,190c189,190
<       const char *path,
<       const char *mode
---
>       const char *
>        char *mode
189,190c189,190
<       const char *path,
<       const char *mode
---
>       const char *,
>       const  *mode
189,190c189,190
<       const char *path,
<       const char *mode
---
>       const char *
>       const  *mode
189,190c189,190
<       const char *path,
<       const char *mode
---
>       const char *,
>         *mode
189,190c189,190
<       const char *path,
<       const char *mode
---
>       const char *
>         *mode
189c189
<       const char *path,
---
>       const char *path
189,190c189,190
<       const char *path,
<       const char *mode
---
>       const char *path
>        char *mode
189,190c189,190
<       const char *path,
<       const char *mode
---
>       const char *path
>       const  *mode
189,190c189,190
<       const char *path,
<       const char *mode
---
>       const char *path
>         *mode
189,190c189,190
<       const char *path,
<       const char *mode
---
>       const char *path
>       const char mode
189,190c189,190
<       const char *path,
<       const char *mode
---
>       const char *path
>        char mode
189,190c189,190
<       const char *path,
<       const char *mode
---
>       const char *path
>       const  mode
189,190c189,190
<       const char *path,
<       const char *mode
---
>       const char *path
>         mode
(85.0 %, 30703 bytes)
189c189
<       const char *,
---
>       const char *
189,190c189,190
<       const char *,
<       const char *mode
---
>       const char *
>        char *mode
189,190c189,190
<       const char *,
<       const char *mode
---
>       const char *
>       const  *mode
189,190c189,190
<       const char *,
<       const char *mode
---
>       const char *
>         *mode
189,190c189,190
<       const char *,
<       const char *mode
---
>       const char *
>       const char mode
189,190c189,190
<       const char *,
<       const char *mode
---
>       const char *
>        char mode
189,190c189,190
<       const char *,
<       const char *mode
---
>       const char *
>       const  mode
189,190c189,190
<       const char *,
<       const char *mode
---
>       const char *
>         mode
190c190
<       const char *mode
---
>        char *mode
190c190
<       const char *mode
---
>         *mode
190c190
<       const char *mode
---
>        char mode
190c190
<       const char *mode
---
>         mode
190c190
<       const char *mode
---
>        char *
190c190
<       const char *mode
---
>         *
190c190
<       const char *mode
---
>        char 
190c190
<       const char *mode
---
>         
190c190
<       const char *mode
---
>       const  *mode
190c190
<       const char *mode
---
>       const  mode
190c190
<       const char *mode
---
>       const  *
190c190
<       const char *mode
---
>       const  
190,191c190,191
<       const char *mode
<    );
---
>       const  *mode
>    ;
190,191c190,191
<       const char *mode
<    );
---
>       const  mode
>    ;
190,191c190,191
<       const char *mode
<    );
---
>       const  *
>    ;
190,191c190,191
<       const char *mode
<    );
---
>       const  
>    ;
190c190
<       const char *mode
---
>       const char mode
190c190
<       const char *mode
---
>       const char 
190,191c190,191
<       const char *mode
<    );
---
>       const char mode
>    ;
190,191c190,191
<       const char *mode
<    );
---
>       const char 
>    ;
190,191c190,191
<       const char *mode
<    );
---
>       const char mode
>    )
190,191c190,191
<       const char *mode
<    );
---
>       const char 
>    )
190,191c190,191
<       const char *mode
<    );
---
>       const char mode
>    
190,191c190,191
<       const char *mode
<    );
---
>       const char 
>    
190c190
<       const char *mode
---
>       const char *
190,191c190,191
<       const char *mode
<    );
---
>       const char *
>    ;
190,191c190,191
<       const char *mode
<    );
---
>       const char *
>    )
190,191c190,191
<       const char *mode
<    );
---
>       const char *
>    
190c190
<       const char *mode
---
>       const char *
193c193
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>  BZFILE * BZ_API(BZ2_bzdopen) (
(85.0 %, 30699 bytes)
191c191
<    );
---
>    ;
191c191
<    );
---
>    
191c191
<    );
---
>    ;
193c193
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>  BZFILE * BZ_API(BZ2_bzdopen) (
191c191
<    );
---
>    
193c193
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>  BZFILE * BZ_API(BZ2_bzdopen) (
191c191
<    );
---
>    ;
193c193
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN  * BZ_API(BZ2_bzdopen) (
191c191
<    );
---
>    
193c193
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN  * BZ_API(BZ2_bzdopen) (
191c191
<    );
---
>    ;
193c193
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>   * BZ_API(BZ2_bzdopen) (
191c191
<    );
---
>    
193c193
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>   * BZ_API(BZ2_bzdopen) (
191c191
<    );
---
>    )
191c191
<    );
---
>    )
193c193
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>  BZFILE * BZ_API(BZ2_bzdopen) (
191c191
<    );
---
>    )
193c193
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN  * BZ_API(BZ2_bzdopen) (
191c191
<    );
---
>    )
193c193
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>   * BZ_API(BZ2_bzdopen) (
191c191
<    );
---
>    )
193c193
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN BZFILE  BZ_API(BZ2_bzdopen) (
191c191
<    );
---
>    )
193c193
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>  BZFILE  BZ_API(BZ2_bzdopen) (
191c191
<    );
---
>    )
193c193
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN   BZ_API(BZ2_bzdopen) (
191c191
<    );
---
>    )
193c193
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>    BZ_API(BZ2_bzdopen) (
193c193
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>  BZFILE * BZ_API(BZ2_bzdopen) (
193c193
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>   * BZ_API(BZ2_bzdopen) (
(85.0 %, 30690 bytes)
193c193
<  BZFILE * BZ_API(BZ2_bzdopen) (
---
>   * BZ_API(BZ2_bzdopen) (
193c193
<  BZFILE * BZ_API(BZ2_bzdopen) (
---
>    BZ_API(BZ2_bzdopen) (
193c193
<  BZFILE * BZ_API(BZ2_bzdopen) (
---
>   * (BZ2_bzdopen) (
(85.0 %, 30684 bytes)
193c193
<   * BZ_API(BZ2_bzdopen) (
---
>    BZ_API(BZ2_bzdopen) (
193c193
<   * BZ_API(BZ2_bzdopen) (
---
>    (BZ2_bzdopen) (
193c193
<   * BZ_API(BZ2_bzdopen) (
---
>    BZ_APIBZ2_bzdopen) (
193c193
<   * BZ_API(BZ2_bzdopen) (
---
>    BZ2_bzdopen) (
193c193
<   * BZ_API(BZ2_bzdopen) (
---
>    BZ_API() (
193c193
<   * BZ_API(BZ2_bzdopen) (
---
>    () (
193c193
<   * BZ_API(BZ2_bzdopen) (
---
>    BZ_API) (
193c193
<   * BZ_API(BZ2_bzdopen) (
---
>    ) (
193c193
<   * BZ_API(BZ2_bzdopen) (
---
>   * (BZ2_bzdopen) (
193c193
<   * BZ_API(BZ2_bzdopen) (
---
>   * BZ2_bzdopen) (
193c193
<   * BZ_API(BZ2_bzdopen) (
---
>   * () (
193c193
<   * BZ_API(BZ2_bzdopen) (
---
>   * ) (
193c193
<   * BZ_API(BZ2_bzdopen) (
---
>   * (BZ2_bzdopen (
193c193
<   * BZ_API(BZ2_bzdopen) (
---
>   * BZ2_bzdopen (
(85.0 %, 30678 bytes)
193c193
<   * (BZ2_bzdopen) (
---
>   * BZ2_bzdopen) (
193c193
<   * (BZ2_bzdopen) (
---
>   * ) (
193c193
<   * (BZ2_bzdopen) (
---
>   * BZ2_bzdopen (
193c193
<   * (BZ2_bzdopen) (
---
>   *  (
193c193
<   * (BZ2_bzdopen) (
---
>   * BZ2_bzdopen) 
193c193
<   * (BZ2_bzdopen) (
---
>   * ) 
193c193
<   * (BZ2_bzdopen) (
---
>   * BZ2_bzdopen 
193c193
<   * (BZ2_bzdopen) (
---
>   *  
193c193
<   * (BZ2_bzdopen) (
---
>   * () (
193c193
<   * (BZ2_bzdopen) (
---
>   * ( (
193c193
<   * (BZ2_bzdopen) (
---
>   * () 
193c193
<   * (BZ2_bzdopen) (
---
>   * ( 
193,194c193,194
<   * (BZ2_bzdopen) (
<       int        d,
---
>   * () (
>               d,
193,194c193,194
<   * (BZ2_bzdopen) (
<       int        d,
---
>   * ( (
>               d,
193,194c193,194
<   * (BZ2_bzdopen) (
<       int        d,
---
>   * () 
>               d,
193,194c193,194
<   * (BZ2_bzdopen) (
<       int        d,
---
>   * ( 
>               d,
193c193
<   * (BZ2_bzdopen) (
---
>   * (BZ2_bzdopen (
193c193
<   * (BZ2_bzdopen) (
---
>   * (BZ2_bzdopen 
193,194c193,194
<   * (BZ2_bzdopen) (
<       int        d,
---
>   * (BZ2_bzdopen (
>               d,
193,194c193,194
<   * (BZ2_bzdopen) (
<       int        d,
---
>   * (BZ2_bzdopen 
>               d,
193,194c193,194
<   * (BZ2_bzdopen) (
<       int        d,
---
>   * (BZ2_bzdopen (
>       int        ,
193,194c193,194
<   * (BZ2_bzdopen) (
<       int        d,
---
>   * (BZ2_bzdopen 
>       int        ,
193,194c193,194
<   * (BZ2_bzdopen) (
<       int        d,
---
>   * (BZ2_bzdopen (
>               ,
193,194c193,194
<   * (BZ2_bzdopen) (
<       int        d,
---
>   * (BZ2_bzdopen 
>               ,
(85.0 %, 30676 bytes)
193,194c193,194
<   * BZ2_bzdopen (
<       int        d,
---
>   *  (
>               d,
193,194c193,194
<   * BZ2_bzdopen (
<       int        d,
---
>   *  
>               d,
193,194c193,194
<   * BZ2_bzdopen (
<       int        d,
---
>   *  (
>       int        ,
193,194c193,194
<   * BZ2_bzdopen (
<       int        d,
---
>   *  
>       int        ,
193,194c193,194
<   * BZ2_bzdopen (
<       int        d,
---
>   *  (
>               ,
193,194c193,194
<   * BZ2_bzdopen (
<       int        d,
---
>   *  
>               ,
193c193
<   * BZ2_bzdopen (
---
>   * BZ2_bzdopen 
193,194c193,194
<   * BZ2_bzdopen (
<       int        d,
---
>   * BZ2_bzdopen 
>               d,
193,194c193,194
<   * BZ2_bzdopen (
<       int        d,
---
>   * BZ2_bzdopen 
>       int        ,
193,194c193,194
<   * BZ2_bzdopen (
<       int        d,
---
>   * BZ2_bzdopen 
>               ,
193,194c193,194
<   * BZ2_bzdopen (
<       int        d,
---
>   * BZ2_bzdopen 
>       int        d
193,194c193,194
<   * BZ2_bzdopen (
<       int        d,
---
>   * BZ2_bzdopen 
>               d
193,194c193,194
<   * BZ2_bzdopen (
<       int        d,
---
>   * BZ2_bzdopen 
>       int        
193,194c193,194
<   * BZ2_bzdopen (
<       int        d,
---
>   * BZ2_bzdopen 
>               
194c194
<       int        d,
---
>               d,
194c194
<       int        d,
---
>               ,
194c194
<       int        d,
---
>               d
194c194
<       int        d,
---
>               
194,195c194,195
<       int        d,
<       const char *mode
---
>               d,
>        char *mode
194,195c194,195
<       int        d,
<       const char *mode
---
>               ,
>        char *mode
194,195c194,195
<       int        d,
<       const char *mode
---
>               d
>        char *mode
194,195c194,195
<       int        d,
<       const char *mode
---
>               
>        char *mode
194c194
<       int        d,
---
>       int        ,
194c194
<       int        d,
---
>       int        
194,195c194,195
<       int        d,
<       const char *mode
---
>       int        ,
>        char *mode
194,195c194,195
<       int        d,
<       const char *mode
---
>       int        
>        char *mode
194,195c194,195
<       int        d,
<       const char *mode
---
>       int        ,
>       const  *mode
194,195c194,195
<       int        d,
<       const char *mode
---
>       int        
>       const  *mode
194,195c194,195
<       int        d,
<       const char *mode
---
>       int        ,
>         *mode
194,195c194,195
<       int        d,
<       const char *mode
---
>       int        
>         *mode
194c194
<       int        d,
---
>       int        d
194,195c194,195
<       int        d,
<       const char *mode
---
>       int        d
>        char *mode
194,195c194,195
<       int        d,
<       const char *mode
---
>       int        d
>       const  *mode
194,195c194,195
<       int        d,
<       const char *mode
---
>       int        d
>         *mode
194,195c194,195
<       int        d,
<       const char *mode
---
>       int        d
>       const char mode
194,195c194,195
<       int        d,
<       const char *mode
---
>       int        d
>        char mode
194,195c194,195
<       int        d,
<       const char *mode
---
>       int        d
>       const  mode
194,195c194,195
<       int        d,
<       const char *mode
---
>       int        d
>         mode
195c195
<       const char *mode
---
>        char *mode
195c195
<       const char *mode
---
>         *mode
195c195
<       const char *mode
---
>        char mode
(85.0 %, 30675 bytes)
194c194
<       int        ,
---
>       int        
194,195c194,195
<       int        ,
<       const char *mode
---
>       int        
>        char *mode
194,195c194,195
<       int        ,
<       const char *mode
---
>       int        
>       const  *mode
194,195c194,195
<       int        ,
<       const char *mode
---
>       int        
>         *mode
194,195c194,195
<       int        ,
<       const char *mode
---
>       int        
>       const char mode
194,195c194,195
<       int        ,
<       const char *mode
---
>       int        
>        char mode
194,195c194,195
<       int        ,
<       const char *mode
---
>       int        
>       const  mode
194,195c194,195
<       int        ,
<       const char *mode
---
>       int        
>         mode
195c195
<       const char *mode
---
>        char *mode
195c195
<       const char *mode
---
>         *mode
195c195
<       const char *mode
---
>        char mode
195c195
<       const char *mode
---
>         mode
195c195
<       const char *mode
---
>        char *
195c195
<       const char *mode
---
>         *
195c195
<       const char *mode
---
>        char 
195c195
<       const char *mode
---
>         
195c195
<       const char *mode
---
>       const  *mode
195c195
<       const char *mode
---
>       const  mode
195c195
<       const char *mode
---
>       const  *
195c195
<       const char *mode
---
>       const  
195,196c195,196
<       const char *mode
<    );
---
>       const  *mode
>    ;
195,196c195,196
<       const char *mode
<    );
---
>       const  mode
>    ;
195,196c195,196
<       const char *mode
<    );
---
>       const  *
>    ;
195,196c195,196
<       const char *mode
<    );
---
>       const  
>    ;
195c195
<       const char *mode
---
>       const char mode
195c195
<       const char *mode
---
>       const char 
195,196c195,196
<       const char *mode
<    );
---
>       const char mode
>    ;
195,196c195,196
<       const char *mode
<    );
---
>       const char 
>    ;
195,196c195,196
<       const char *mode
<    );
---
>       const char mode
>    )
195,196c195,196
<       const char *mode
<    );
---
>       const char 
>    )
195,196c195,196
<       const char *mode
<    );
---
>       const char mode
>    
195,196c195,196
<       const char *mode
<    );
---
>       const char 
>    
195c195
<       const char *mode
---
>       const char *
195,196c195,196
<       const char *mode
<    );
---
>       const char *
>    ;
195,196c195,196
<       const char *mode
<    );
---
>       const char *
>    )
195,196c195,196
<       const char *mode
<    );
---
>       const char *
>    
195c195
<       const char *mode
---
>       const char *
198c198
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
>  int BZ_API(BZ2_bzread) (
(85.0 %, 30671 bytes)
196c196
<    );
---
>    ;
196c196
<    );
---
>    
196c196
<    );
---
>    ;
198c198
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
>  int BZ_API(BZ2_bzread) (
196c196
<    );
---
>    
198c198
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
>  int BZ_API(BZ2_bzread) (
196c196
<    );
---
>    ;
198c198
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN  BZ_API(BZ2_bzread) (
196c196
<    );
---
>    
198c198
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN  BZ_API(BZ2_bzread) (
196c196
<    );
---
>    ;
198c198
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
>   BZ_API(BZ2_bzread) (
196c196
<    );
---
>    
198c198
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
>   BZ_API(BZ2_bzread) (
196c196
<    );
---
>    )
196c196
<    );
---
>    )
198c198
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
>  int BZ_API(BZ2_bzread) (
196c196
<    );
---
>    )
198c198
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN  BZ_API(BZ2_bzread) (
196c196
<    );
---
>    )
198c198
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
>   BZ_API(BZ2_bzread) (
196c196
<    );
---
>    )
198c198
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN int (BZ2_bzread) (
196c196
<    );
---
>    )
198c198
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
>  int (BZ2_bzread) (
196c196
<    );
---
>    )
198c198
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN  (BZ2_bzread) (
196c196
<    );
---
>    )
198c198
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
>   (BZ2_bzread) (
198c198
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
>  int BZ_API(BZ2_bzread) (
198c198
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
>   BZ_API(BZ2_bzread) (
(85.0 %, 30662 bytes)
198c198
<  int BZ_API(BZ2_bzread) (
---
>   BZ_API(BZ2_bzread) (
198c198
<  int BZ_API(BZ2_bzread) (
---
>   (BZ2_bzread) (
198c198
<  int BZ_API(BZ2_bzread) (
---
>   BZ_APIBZ2_bzread) (
(85.0 %, 30659 bytes)
198c198
<   BZ_API(BZ2_bzread) (
---
>   (BZ2_bzread) (
198c198
<   BZ_API(BZ2_bzread) (
---
>   BZ2_bzread) (
198c198
<   BZ_API(BZ2_bzread) (
---
>   () (
198c198
<   BZ_API(BZ2_bzread) (
---
>   ) (
198c198
<   BZ_API(BZ2_bzread) (
---
>   (BZ2_bzread (
198c198
<   BZ_API(BZ2_bzread) (
---
>   BZ2_bzread (
(85.0 %, 30653 bytes)
198c198
<   (BZ2_bzread) (
---
>   BZ2_bzread) (
198c198
<   (BZ2_bzread) (
---
>   ) (
198c198
<   (BZ2_bzread) (
---
>   BZ2_bzread (
198c198
<   (BZ2_bzread) (
---
>    (
198c198
<   (BZ2_bzread) (
---
>   BZ2_bzread) 
198c198
<   (BZ2_bzread) (
---
>   ) 
198c198
<   (BZ2_bzread) (
---
>   BZ2_bzread 
198c198
<   (BZ2_bzread) (
---
>    
198c198
<   (BZ2_bzread) (
---
>   () (
198c198
<   (BZ2_bzread) (
---
>   ( (
198c198
<   (BZ2_bzread) (
---
>   () 
198c198
<   (BZ2_bzread) (
---
>   ( 
198,199c198,199
<   (BZ2_bzread) (
<       BZFILE* b, 
---
>   () (
>       * b, 
198,199c198,199
<   (BZ2_bzread) (
<       BZFILE* b, 
---
>   ( (
>       * b, 
198,199c198,199
<   (BZ2_bzread) (
<       BZFILE* b, 
---
>   () 
>       * b, 
198,199c198,199
<   (BZ2_bzread) (
<       BZFILE* b, 
---
>   ( 
>       * b, 
198c198
<   (BZ2_bzread) (
---
>   (BZ2_bzread (
198c198
<   (BZ2_bzread) (
---
>   (BZ2_bzread 
198,199c198,199
<   (BZ2_bzread) (
<       BZFILE* b, 
---
>   (BZ2_bzread (
>       * b, 
198,199c198,199
<   (BZ2_bzread) (
<       BZFILE* b, 
---
>   (BZ2_bzread 
>       * b, 
198,199c198,199
<   (BZ2_bzread) (
<       BZFILE* b, 
---
>   (BZ2_bzread (
>       BZFILE b, 
(85.0 %, 30651 bytes)
198,199c198,199
<   BZ2_bzread (
<       BZFILE* b, 
---
>    (
>       * b, 
198,199c198,199
<   BZ2_bzread (
<       BZFILE* b, 
---
>    
>       * b, 
198,199c198,199
<   BZ2_bzread (
<       BZFILE* b, 
---
>    (
>       BZFILE b, 
198,199c198,199
<   BZ2_bzread (
<       BZFILE* b, 
---
>    
>       BZFILE b, 
198,199c198,199
<   BZ2_bzread (
<       BZFILE* b, 
---
>    (
>        b, 
198,199c198,199
<   BZ2_bzread (
<       BZFILE* b, 
---
>    
>        b, 
198c198
<   BZ2_bzread (
---
>   BZ2_bzread 
198,199c198,199
<   BZ2_bzread (
<       BZFILE* b, 
---
>   BZ2_bzread 
>       * b, 
198,199c198,199
<   BZ2_bzread (
<       BZFILE* b, 
---
>   BZ2_bzread 
>       BZFILE b, 
198,199c198,199
<   BZ2_bzread (
<       BZFILE* b, 
---
>   BZ2_bzread 
>        b, 
198,199c198,199
<   BZ2_bzread (
<       BZFILE* b, 
---
>   BZ2_bzread 
>       BZFILE* , 
198,199c198,199
<   BZ2_bzread (
<       BZFILE* b, 
---
>   BZ2_bzread 
>       * , 
198,199c198,199
<   BZ2_bzread (
<       BZFILE* b, 
---
>   BZ2_bzread 
>       BZFILE , 
198,199c198,199
<   BZ2_bzread (
<       BZFILE* b, 
---
>   BZ2_bzread 
>        , 
199c199
<       BZFILE* b, 
---
>       * b, 
199c199
<       BZFILE* b, 
---
>        b, 
199c199
<       BZFILE* b, 
---
>       * , 
199c199
<       BZFILE* b, 
---
>        , 
199c199
<       BZFILE* b, 
---
>       * b 
199c199
<       BZFILE* b, 
---
>        b 
199c199
<       BZFILE* b, 
---
>       *  
199c199
<       BZFILE* b, 
---
>         
199c199
<       BZFILE* b, 
---
>       BZFILE b, 
199c199
<       BZFILE* b, 
---
>       BZFILE , 
199c199
<       BZFILE* b, 
---
>       BZFILE b 
199c199
<       BZFILE* b, 
---
>       BZFILE  
199,200c199,200
<       BZFILE* b, 
<       void* buf, 
---
>       BZFILE b, 
>       * buf, 
199,200c199,200
<       BZFILE* b, 
<       void* buf, 
---
>       BZFILE , 
>       * buf, 
199,200c199,200
<       BZFILE* b, 
<       void* buf, 
---
>       BZFILE b 
>       * buf, 
199,200c199,200
<       BZFILE* b, 
<       void* buf, 
---
>       BZFILE  
>       * buf, 
199c199
<       BZFILE* b, 
---
>       BZFILE* , 
199c199
<       BZFILE* b, 
---
>       BZFILE*  
199,200c199,200
<       BZFILE* b, 
<       void* buf, 
---
>       BZFILE* , 
>       * buf, 
199,200c199,200
<       BZFILE* b, 
<       void* buf, 
---
>       BZFILE*  
>       * buf, 
199,200c199,200
<       BZFILE* b, 
<       void* buf, 
---
>       BZFILE* , 
>       void buf, 
199,200c199,200
<       BZFILE* b, 
<       void* buf, 
---
>       BZFILE*  
>       void buf, 
199,200c199,200
<       BZFILE* b, 
<       void* buf, 
---
>       BZFILE* , 
>        buf, 
199,200c199,200
<       BZFILE* b, 
<       void* buf, 
---
>       BZFILE*  
>        buf, 
199c199
<       BZFILE* b, 
---
>       BZFILE* b 
199,200c199,200
<       BZFILE* b, 
<       void* buf, 
---
>       BZFILE* b 
>       * buf, 
199,200c199,200
<       BZFILE* b, 
<       void* buf, 
---
>       BZFILE* b 
>       void buf, 
199,200c199,200
<       BZFILE* b, 
<       void* buf, 
---
>       BZFILE* b 
>        buf, 
199,200c199,200
<       BZFILE* b, 
<       void* buf, 
---
>       BZFILE* b 
>       void* , 
(85.0 %, 30650 bytes)
199c199
<       BZFILE* , 
---
>       BZFILE*  
199,200c199,200
<       BZFILE* , 
<       void* buf, 
---
>       BZFILE*  
>       * buf, 
199,200c199,200
<       BZFILE* , 
<       void* buf, 
---
>       BZFILE*  
>       void buf, 
199,200c199,200
<       BZFILE* , 
<       void* buf, 
---
>       BZFILE*  
>        buf, 
199,200c199,200
<       BZFILE* , 
<       void* buf, 
---
>       BZFILE*  
>       void* , 
199,200c199,200
<       BZFILE* , 
<       void* buf, 
---
>       BZFILE*  
>       * , 
199,200c199,200
<       BZFILE* , 
<       void* buf, 
---
>       BZFILE*  
>       void , 
199,200c199,200
<       BZFILE* , 
<       void* buf, 
---
>       BZFILE*  
>        , 
200c200
<       void* buf, 
---
>       * buf, 
200c200
<       void* buf, 
---
>        buf, 
200c200
<       void* buf, 
---
>       * , 
200c200
<       void* buf, 
---
>        , 
200c200
<       void* buf, 
---
>       * buf 
200c200
<       void* buf, 
---
>        buf 
200c200
<       void* buf, 
---
>       *  
200c200
<       void* buf, 
---
>         
200c200
<       void* buf, 
---
>       void buf, 
200c200
<       void* buf, 
---
>       void , 
200c200
<       void* buf, 
---
>       void buf 
200c200
<       void* buf, 
---
>       void  
200,201c200,201
<       void* buf, 
<       int len 
---
>       void buf, 
>        len 
200,201c200,201
<       void* buf, 
<       int len 
---
>       void , 
>        len 
200,201c200,201
<       void* buf, 
<       int len 
---
>       void buf 
>        len 
200,201c200,201
<       void* buf, 
<       int len 
---
>       void  
>        len 
200c200
<       void* buf, 
---
>       void* , 
200c200
<       void* buf, 
---
>       void*  
200,201c200,201
<       void* buf, 
<       int len 
---
>       void* , 
>        len 
200,201c200,201
<       void* buf, 
<       int len 
---
>       void*  
>        len 
200,201c200,201
<       void* buf, 
<       int len 
---
>       void* , 
>       int  
(85.0 %, 30647 bytes)
200c200
<       void* , 
---
>       void*  
200,201c200,201
<       void* , 
<       int len 
---
>       void*  
>        len 
200,201c200,201
<       void* , 
<       int len 
---
>       void*  
>       int  
200,201c200,201
<       void* , 
<       int len 
---
>       void*  
>         
200c200
<       void* , 
---
>       void*  
202c202
<    );
---
>    ;
200,202c200,202
<       void* , 
<       int len 
<    );
---
>       void*  
>        len 
>    ;
200,202c200,202
<       void* , 
<       int len 
<    );
---
>       void*  
>       int  
>    ;
200,202c200,202
<       void* , 
<       int len 
<    );
---
>       void*  
>         
>    ;
201c201
<       int len 
---
>        len 
201c201
<       int len 
---
>         
201,202c201,202
<       int len 
<    );
---
>        len 
>    ;
201,202c201,202
<       int len 
<    );
---
>         
>    ;
201,202c201,202
<       int len 
<    );
---
>        len 
>    )
201,202c201,202
<       int len 
<    );
---
>         
>    )
201,202c201,202
<       int len 
<    );
---
>        len 
>    
201,202c201,202
<       int len 
<    );
---
>         
>    
201c201
<       int len 
---
>       int  
201,202c201,202
<       int len 
<    );
---
>       int  
>    ;
201,202c201,202
<       int len 
<    );
---
>       int  
>    )
201,202c201,202
<       int len 
<    );
---
>       int  
>    
201c201
<       int len 
---
>       int  
204c204
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>  int BZ_API(BZ2_bzwrite) (
201,202c201,202
<       int len 
<    );
---
>       int  
>    ;
204c204
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>  int BZ_API(BZ2_bzwrite) (
201,202c201,202
<       int len 
<    );
---
>       int  
>    )
204c204
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>  int BZ_API(BZ2_bzwrite) (
201,202c201,202
<       int len 
<    );
---
>       int  
>    
204c204
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>  int BZ_API(BZ2_bzwrite) (
(85.0 %, 30644 bytes)
202c202
<    );
---
>    ;
202c202
<    );
---
>    
202c202
<    );
---
>    ;
204c204
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>  int BZ_API(BZ2_bzwrite) (
202c202
<    );
---
>    
204c204
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>  int BZ_API(BZ2_bzwrite) (
202c202
<    );
---
>    ;
204c204
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
> BZ_EXTERN  BZ_API(BZ2_bzwrite) (
202c202
<    );
---
>    
204c204
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
> BZ_EXTERN  BZ_API(BZ2_bzwrite) (
202c202
<    );
---
>    ;
204c204
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>   BZ_API(BZ2_bzwrite) (
202c202
<    );
---
>    
204c204
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>   BZ_API(BZ2_bzwrite) (
202c202
<    );
---
>    )
202c202
<    );
---
>    )
204c204
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>  int BZ_API(BZ2_bzwrite) (
202c202
<    );
---
>    )
204c204
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
> BZ_EXTERN  BZ_API(BZ2_bzwrite) (
202c202
<    );
---
>    )
204c204
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>   BZ_API(BZ2_bzwrite) (
202c202
<    );
---
>    )
204c204
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
> BZ_EXTERN int (BZ2_bzwrite) (
202c202
<    );
---
>    )
204c204
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>  int (BZ2_bzwrite) (
202c202
<    );
---
>    )
204c204
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
> BZ_EXTERN  (BZ2_bzwrite) (
202c202
<    );
---
>    )
204c204
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>   (BZ2_bzwrite) (
204c204
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>  int BZ_API(BZ2_bzwrite) (
204c204
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>   BZ_API(BZ2_bzwrite) (
(85.1 %, 30635 bytes)
204c204
<  int BZ_API(BZ2_bzwrite) (
---
>   BZ_API(BZ2_bzwrite) (
204c204
<  int BZ_API(BZ2_bzwrite) (
---
>   (BZ2_bzwrite) (
204c204
<  int BZ_API(BZ2_bzwrite) (
---
>   BZ_APIBZ2_bzwrite) (
(85.1 %, 30632 bytes)
204c204
<   BZ_API(BZ2_bzwrite) (
---
>   (BZ2_bzwrite) (
204c204
<   BZ_API(BZ2_bzwrite) (
---
>   BZ2_bzwrite) (
204c204
<   BZ_API(BZ2_bzwrite) (
---
>   () (
204c204
<   BZ_API(BZ2_bzwrite) (
---
>   ) (
204c204
<   BZ_API(BZ2_bzwrite) (
---
>   (BZ2_bzwrite (
204c204
<   BZ_API(BZ2_bzwrite) (
---
>   BZ2_bzwrite (
204c204
<   BZ_API(BZ2_bzwrite) (
---
>   ( (
(85.1 %, 30626 bytes)
204c204
<   (BZ2_bzwrite) (
---
>   BZ2_bzwrite) (
204c204
<   (BZ2_bzwrite) (
---
>   ) (
204c204
<   (BZ2_bzwrite) (
---
>   BZ2_bzwrite (
204c204
<   (BZ2_bzwrite) (
---
>    (
204c204
<   (BZ2_bzwrite) (
---
>   BZ2_bzwrite) 
204c204
<   (BZ2_bzwrite) (
---
>   ) 
204c204
<   (BZ2_bzwrite) (
---
>   BZ2_bzwrite 
204c204
<   (BZ2_bzwrite) (
---
>    
204c204
<   (BZ2_bzwrite) (
---
>   () (
204c204
<   (BZ2_bzwrite) (
---
>   ( (
204c204
<   (BZ2_bzwrite) (
---
>   () 
204c204
<   (BZ2_bzwrite) (
---
>   ( 
204,205c204,205
<   (BZ2_bzwrite) (
<       BZFILE* b, 
---
>   () (
>       * b, 
204,205c204,205
<   (BZ2_bzwrite) (
<       BZFILE* b, 
---
>   ( (
>       * b, 
(85.1 %, 30624 bytes)
204,205c204,205
<   BZ2_bzwrite (
<       BZFILE* b, 
---
>    (
>       * b, 
204,205c204,205
<   BZ2_bzwrite (
<       BZFILE* b, 
---
>    
>       * b, 
204,205c204,205
<   BZ2_bzwrite (
<       BZFILE* b, 
---
>    (
>       BZFILE b, 
204,205c204,205
<   BZ2_bzwrite (
<       BZFILE* b, 
---
>    
>       BZFILE b, 
204,205c204,205
<   BZ2_bzwrite (
<       BZFILE* b, 
---
>    (
>        b, 
204,205c204,205
<   BZ2_bzwrite (
<       BZFILE* b, 
---
>    
>        b, 
204c204
<   BZ2_bzwrite (
---
>   BZ2_bzwrite 
204,205c204,205
<   BZ2_bzwrite (
<       BZFILE* b, 
---
>   BZ2_bzwrite 
>       * b, 
204,205c204,205
<   BZ2_bzwrite (
<       BZFILE* b, 
---
>   BZ2_bzwrite 
>       BZFILE b, 
204,205c204,205
<   BZ2_bzwrite (
<       BZFILE* b, 
---
>   BZ2_bzwrite 
>        b, 
204,205c204,205
<   BZ2_bzwrite (
<       BZFILE* b, 
---
>   BZ2_bzwrite 
>       BZFILE* , 
204,205c204,205
<   BZ2_bzwrite (
<       BZFILE* b, 
---
>   BZ2_bzwrite 
>       * , 
204,205c204,205
<   BZ2_bzwrite (
<       BZFILE* b, 
---
>   BZ2_bzwrite 
>       BZFILE , 
204,205c204,205
<   BZ2_bzwrite (
<       BZFILE* b, 
---
>   BZ2_bzwrite 
>        , 
205c205
<       BZFILE* b, 
---
>       * b, 
205c205
<       BZFILE* b, 
---
>        b, 
205c205
<       BZFILE* b, 
---
>       * , 
205c205
<       BZFILE* b, 
---
>        , 
205c205
<       BZFILE* b, 
---
>       * b 
205c205
<       BZFILE* b, 
---
>        b 
205c205
<       BZFILE* b, 
---
>       *  
205c205
<       BZFILE* b, 
---
>         
205c205
<       BZFILE* b, 
---
>       BZFILE b, 
205c205
<       BZFILE* b, 
---
>       BZFILE , 
205c205
<       BZFILE* b, 
---
>       BZFILE b 
205c205
<       BZFILE* b, 
---
>       BZFILE  
205,206c205,206
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE b, 
>       *   buf, 
205,206c205,206
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE , 
>       *   buf, 
205,206c205,206
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE b 
>       *   buf, 
205,206c205,206
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE  
>       *   buf, 
205c205
<       BZFILE* b, 
---
>       BZFILE* , 
205c205
<       BZFILE* b, 
---
>       BZFILE*  
205,206c205,206
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* , 
>       *   buf, 
205,206c205,206
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE*  
>       *   buf, 
205,206c205,206
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* , 
>       void   buf, 
205,206c205,206
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE*  
>       void   buf, 
205,206c205,206
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* , 
>          buf, 
205,206c205,206
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE*  
>          buf, 
205c205
<       BZFILE* b, 
---
>       BZFILE* b 
205,206c205,206
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* b 
>       *   buf, 
205,206c205,206
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* b 
>       void   buf, 
(85.1 %, 30623 bytes)
205c205
<       BZFILE* , 
---
>       BZFILE*  
205,206c205,206
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>       *   buf, 
205,206c205,206
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>       void   buf, 
205,206c205,206
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>          buf, 
205,206c205,206
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>       void*   , 
205,206c205,206
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>       *   , 
205,206c205,206
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>       void   , 
205,206c205,206
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>          , 
206c206
<       void*   buf, 
---
>       *   buf, 
206c206
<       void*   buf, 
---
>          buf, 
206c206
<       void*   buf, 
---
>       *   , 
206c206
<       void*   buf, 
---
>          , 
206c206
<       void*   buf, 
---
>       *   buf 
206c206
<       void*   buf, 
---
>          buf 
206c206
<       void*   buf, 
---
>       *    
206c206
<       void*   buf, 
---
>           
206c206
<       void*   buf, 
---
>       void   buf, 
206c206
<       void*   buf, 
---
>       void   , 
206c206
<       void*   buf, 
---
>       void   buf 
206c206
<       void*   buf, 
---
>       void    
206,207c206,207
<       void*   buf, 
<       int     len 
---
>       void   buf, 
>            len 
206,207c206,207
<       void*   buf, 
<       int     len 
---
>       void   , 
>            len 
206,207c206,207
<       void*   buf, 
<       int     len 
---
>       void   buf 
>            len 
206,207c206,207
<       void*   buf, 
<       int     len 
---
>       void    
>            len 
206c206
<       void*   buf, 
---
>       void*   , 
206c206
<       void*   buf, 
---
>       void*    
206,207c206,207
<       void*   buf, 
<       int     len 
---
>       void*   , 
>            len 
206,207c206,207
<       void*   buf, 
<       int     len 
---
>       void*    
>            len 
206,207c206,207
<       void*   buf, 
<       int     len 
---
>       void*   , 
>       int      
(85.1 %, 30620 bytes)
206c206
<       void*   , 
---
>       void*    
206,207c206,207
<       void*   , 
<       int     len 
---
>       void*    
>            len 
206,207c206,207
<       void*   , 
<       int     len 
---
>       void*    
>       int      
206,207c206,207
<       void*   , 
<       int     len 
---
>       void*    
>             
206c206
<       void*   , 
---
>       void*    
208c208
<    );
---
>    ;
206,208c206,208
<       void*   , 
<       int     len 
<    );
---
>       void*    
>            len 
>    ;
206,208c206,208
<       void*   , 
<       int     len 
<    );
---
>       void*    
>       int      
>    ;
206,208c206,208
<       void*   , 
<       int     len 
<    );
---
>       void*    
>             
>    ;
207c207
<       int     len 
---
>            len 
207c207
<       int     len 
---
>             
207,208c207,208
<       int     len 
<    );
---
>            len 
>    ;
207,208c207,208
<       int     len 
<    );
---
>             
>    ;
207,208c207,208
<       int     len 
<    );
---
>            len 
>    )
207,208c207,208
<       int     len 
<    );
---
>             
>    )
207,208c207,208
<       int     len 
<    );
---
>            len 
>    
207,208c207,208
<       int     len 
<    );
---
>             
>    
207c207
<       int     len 
---
>       int      
207,208c207,208
<       int     len 
<    );
---
>       int      
>    ;
207,208c207,208
<       int     len 
<    );
---
>       int      
>    )
207,208c207,208
<       int     len 
<    );
---
>       int      
>    
207c207
<       int     len 
---
>       int      
210c210
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>  int BZ_API(BZ2_bzflush) (
(85.1 %, 30617 bytes)
208c208
<    );
---
>    ;
208c208
<    );
---
>    
208c208
<    );
---
>    ;
210c210
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>  int BZ_API(BZ2_bzflush) (
208c208
<    );
---
>    
210c210
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>  int BZ_API(BZ2_bzflush) (
208c208
<    );
---
>    ;
210c210
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> BZ_EXTERN  BZ_API(BZ2_bzflush) (
208c208
<    );
---
>    
210c210
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> BZ_EXTERN  BZ_API(BZ2_bzflush) (
208c208
<    );
---
>    ;
210c210
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>   BZ_API(BZ2_bzflush) (
208c208
<    );
---
>    
210c210
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>   BZ_API(BZ2_bzflush) (
208c208
<    );
---
>    )
208c208
<    );
---
>    )
210c210
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>  int BZ_API(BZ2_bzflush) (
208c208
<    );
---
>    )
210c210
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> BZ_EXTERN  BZ_API(BZ2_bzflush) (
208c208
<    );
---
>    )
210c210
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>   BZ_API(BZ2_bzflush) (
208c208
<    );
---
>    )
210c210
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> BZ_EXTERN int (BZ2_bzflush) (
208c208
<    );
---
>    )
210c210
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>  int (BZ2_bzflush) (
208c208
<    );
---
>    )
210c210
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> BZ_EXTERN  (BZ2_bzflush) (
208c208
<    );
---
>    )
210c210
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>   (BZ2_bzflush) (
210c210
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>  int BZ_API(BZ2_bzflush) (
210c210
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>   BZ_API(BZ2_bzflush) (
210c210
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>  int (BZ2_bzflush) (
(85.1 %, 30608 bytes)
210c210
<  int BZ_API(BZ2_bzflush) (
---
>   BZ_API(BZ2_bzflush) (
210c210
<  int BZ_API(BZ2_bzflush) (
---
>   (BZ2_bzflush) (
(85.1 %, 30605 bytes)
210c210
<   BZ_API(BZ2_bzflush) (
---
>   (BZ2_bzflush) (
210c210
<   BZ_API(BZ2_bzflush) (
---
>   BZ2_bzflush) (
210c210
<   BZ_API(BZ2_bzflush) (
---
>   () (
210c210
<   BZ_API(BZ2_bzflush) (
---
>   ) (
210c210
<   BZ_API(BZ2_bzflush) (
---
>   (BZ2_bzflush (
210c210
<   BZ_API(BZ2_bzflush) (
---
>   BZ2_bzflush (
(85.1 %, 30599 bytes)
210c210
<   (BZ2_bzflush) (
---
>   BZ2_bzflush) (
210c210
<   (BZ2_bzflush) (
---
>   ) (
210c210
<   (BZ2_bzflush) (
---
>   BZ2_bzflush (
210c210
<   (BZ2_bzflush) (
---
>    (
210c210
<   (BZ2_bzflush) (
---
>   BZ2_bzflush) 
210c210
<   (BZ2_bzflush) (
---
>   ) 
210c210
<   (BZ2_bzflush) (
---
>   BZ2_bzflush 
210c210
<   (BZ2_bzflush) (
---
>    
210c210
<   (BZ2_bzflush) (
---
>   () (
210c210
<   (BZ2_bzflush) (
---
>   ( (
210c210
<   (BZ2_bzflush) (
---
>   () 
210c210
<   (BZ2_bzflush) (
---
>   ( 
210,211c210,211
<   (BZ2_bzflush) (
<       BZFILE* b
---
>   () (
>       * b
210,211c210,211
<   (BZ2_bzflush) (
<       BZFILE* b
---
>   ( (
>       * b
210,211c210,211
<   (BZ2_bzflush) (
<       BZFILE* b
---
>   () 
>       * b
210,211c210,211
<   (BZ2_bzflush) (
<       BZFILE* b
---
>   ( 
>       * b
(85.1 %, 30597 bytes)
210,211c210,211
<   BZ2_bzflush (
<       BZFILE* b
---
>    (
>       * b
210,211c210,211
<   BZ2_bzflush (
<       BZFILE* b
---
>    
>       * b
210,211c210,211
<   BZ2_bzflush (
<       BZFILE* b
---
>    (
>       BZFILE b
210,211c210,211
<   BZ2_bzflush (
<       BZFILE* b
---
>    
>       BZFILE b
210,211c210,211
<   BZ2_bzflush (
<       BZFILE* b
---
>    (
>        b
(85.1 %, 30580 bytes)
210,211c210,211
<    (
<       * b
---
>    
>       * 
210,211c210,211
<    (
<       * b
---
>    
>        
210c210
<    (
---
>    
212c212
<    );
---
>    ;
210,212c210,212
<    (
<       * b
<    );
---
>    
>        b
>    ;
210,212c210,212
<    (
<       * b
<    );
---
>    
>       * 
>    ;
(85.1 %, 30578 bytes)
211c211
<       * b
---
>        b
214c214
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
>  void BZ_API(BZ2_bzclose) (
211c211
<       * b
---
>        
214c214
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
>  void BZ_API(BZ2_bzclose) (
211,212c211,212
<       * b
<    ;
---
>        b
>    
214c214
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
>  void BZ_API(BZ2_bzclose) (
(85.1 %, 30568 bytes)
211c211
<        b
---
>        
214c214
<  void BZ_API(BZ2_bzclose) (
---
>  void (BZ2_bzclose) (
211,212c211,212
<        b
<    ;
---
>        
>    
214c214
<  void BZ_API(BZ2_bzclose) (
---
>  void (BZ2_bzclose) (
(85.1 %, 30561 bytes)
212c212
<    ;
---
>    
214c214
<  void (BZ2_bzclose) (
---
>  void () (
212c212
<    ;
---
>    
214c214
<  void (BZ2_bzclose) (
---
>   () (
212c212
<    ;
---
>    
214c214
<  void (BZ2_bzclose) (
---
>  void ) (
212c212
<    ;
---
>    
214c214
<  void (BZ2_bzclose) (
---
>   ) (
214c214
<  void (BZ2_bzclose) (
---
>   (BZ2_bzclose) (
214c214
<  void (BZ2_bzclose) (
---
>   BZ2_bzclose) (
214c214
<  void (BZ2_bzclose) (
---
>   () (
214c214
<  void (BZ2_bzclose) (
---
>   ) (
214c214
<  void (BZ2_bzclose) (
---
>   (BZ2_bzclose (
214c214
<  void (BZ2_bzclose) (
---
>   BZ2_bzclose (
214c214
<  void (BZ2_bzclose) (
---
>   ( (
214c214
<  void (BZ2_bzclose) (
---
>    (
214c214
<  void (BZ2_bzclose) (
---
>  void BZ2_bzclose) (
214c214
<  void (BZ2_bzclose) (
---
>  void ) (
214c214
<  void (BZ2_bzclose) (
---
>  void BZ2_bzclose (
214c214
<  void (BZ2_bzclose) (
---
>  void  (
214c214
<  void (BZ2_bzclose) (
---
>  void BZ2_bzclose) 
214c214
<  void (BZ2_bzclose) (
---
>  void ) 
214c214
<  void (BZ2_bzclose) (
---
>  void BZ2_bzclose 
214c214
<  void (BZ2_bzclose) (
---
>  void  
214c214
<  void (BZ2_bzclose) (
---
>  void () (
214c214
<  void (BZ2_bzclose) (
---
>  void ( (
214c214
<  void (BZ2_bzclose) (
---
>  void () 
214c214
<  void (BZ2_bzclose) (
---
>  void ( 
214,215c214,215
<  void (BZ2_bzclose) (
<       BZFILE* b
---
>  void () (
>       * b
214,215c214,215
<  void (BZ2_bzclose) (
<       BZFILE* b
---
>  void ( (
>       * b
214,215c214,215
<  void (BZ2_bzclose) (
<       BZFILE* b
---
>  void () 
>       * b
214,215c214,215
<  void (BZ2_bzclose) (
<       BZFILE* b
---
>  void ( 
>       * b
(85.1 %, 30559 bytes)
214,215c214,215
<  void BZ2_bzclose (
<       BZFILE* b
---
>  void  (
>       * b
214,215c214,215
<  void BZ2_bzclose (
<       BZFILE* b
---
>  void  
>       * b
214,215c214,215
<  void BZ2_bzclose (
<       BZFILE* b
---
>  void  (
>       BZFILE b
214,215c214,215
<  void BZ2_bzclose (
<       BZFILE* b
---
>  void  
>       BZFILE b
214,215c214,215
<  void BZ2_bzclose (
<       BZFILE* b
---
>  void  (
>        b
214,215c214,215
<  void BZ2_bzclose (
<       BZFILE* b
---
>  void  
>        b
214c214
<  void BZ2_bzclose (
---
>  void BZ2_bzclose 
214,215c214,215
<  void BZ2_bzclose (
<       BZFILE* b
---
>  void BZ2_bzclose 
>       * b
214,215c214,215
<  void BZ2_bzclose (
<       BZFILE* b
---
>  void BZ2_bzclose 
>       BZFILE b
214,215c214,215
<  void BZ2_bzclose (
<       BZFILE* b
---
>  void BZ2_bzclose 
>        b
214,215c214,215
<  void BZ2_bzclose (
<       BZFILE* b
---
>  void BZ2_bzclose 
>       BZFILE* 
214,215c214,215
<  void BZ2_bzclose (
<       BZFILE* b
---
>  void BZ2_bzclose 
>       * 
214,215c214,215
<  void BZ2_bzclose (
<       BZFILE* b
---
>  void BZ2_bzclose 
>       BZFILE 
214,215c214,215
<  void BZ2_bzclose (
<       BZFILE* b
---
>  void BZ2_bzclose 
>        
215c215
<       BZFILE* b
---
>       * b
215c215
<       BZFILE* b
---
>        b
(85.1 %, 30542 bytes)
214,215c214,215
<  void  (
<       * b
---
>  void  
>       * 
214,215c214,215
<  void  (
<       * b
---
>  void  
>        
214c214
<  void  (
---
>  void  
216c216
<    );
---
>    ;
214,216c214,216
<  void  (
<       * b
<    );
---
>  void  
>        b
>    ;
214,216c214,216
<  void  (
<       * b
<    );
---
>  void  
>       * 
>    ;
214,216c214,216
<  void  (
<       * b
<    );
---
>  void  
>        
>    ;
(85.1 %, 30540 bytes)
215c215
<       * b
---
>        b
218c218
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
>  const char * BZ_API(BZ2_bzerror) (
215c215
<       * b
---
>        
218c218
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
>  const char * BZ_API(BZ2_bzerror) (
215,216c215,216
<       * b
<    ;
---
>        b
>    
218c218
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
>  const char * BZ_API(BZ2_bzerror) (
215,216c215,216
<       * b
<    ;
---
>        
>    
218c218
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
>  const char * BZ_API(BZ2_bzerror) (
215c215
<       * b
---
>       * 
215,216c215,216
<       * b
<    ;
---
>       * 
>    
215c215
<       * b
---
>       * 
218c218
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
>  const char * BZ_API(BZ2_bzerror) (
215,216c215,216
<       * b
<    ;
---
>       * 
>    
218c218
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
>  const char * BZ_API(BZ2_bzerror) (
215c215
<       * b
---
>       * 
218c218
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> BZ_EXTERN  char * BZ_API(BZ2_bzerror) (
215,216c215,216
<       * b
<    ;
---
>       * 
>    
218c218
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> BZ_EXTERN  char * BZ_API(BZ2_bzerror) (
215c215
<       * b
---
>       * 
218c218
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
>   char * BZ_API(BZ2_bzerror) (
215,216c215,216
<       * b
<    ;
---
>       * 
>    
218c218
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
>   char * BZ_API(BZ2_bzerror) (
216c216
<    ;
---
>    
216c216
<    ;
---
>    
218c218
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
>  const char * BZ_API(BZ2_bzerror) (
216c216
<    ;
---
>    
218c218
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> BZ_EXTERN  char * BZ_API(BZ2_bzerror) (
216c216
<    ;
---
>    
218c218
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
>   char * BZ_API(BZ2_bzerror) (
216c216
<    ;
---
>    
218c218
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> BZ_EXTERN const  * BZ_API(BZ2_bzerror) (
216c216
<    ;
---
>    
218c218
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
>  const  * BZ_API(BZ2_bzerror) (
216c216
<    ;
---
>    
218c218
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> BZ_EXTERN   * BZ_API(BZ2_bzerror) (
216c216
<    ;
---
>    
218c218
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
>    * BZ_API(BZ2_bzerror) (
(85.1 %, 30529 bytes)
216c216
<    ;
---
>    
218c218
<  const char * BZ_API(BZ2_bzerror) (
---
>   char  BZ_API(BZ2_bzerror) (
216c216
<    ;
---
>    
218c218
<  const char * BZ_API(BZ2_bzerror) (
---
>  const   BZ_API(BZ2_bzerror) (
216c216
<    ;
---
>    
218c218
<  const char * BZ_API(BZ2_bzerror) (
---
>     BZ_API(BZ2_bzerror) (
218c218
<  const char * BZ_API(BZ2_bzerror) (
---
>   char * BZ_API(BZ2_bzerror) (
218c218
<  const char * BZ_API(BZ2_bzerror) (
---
>    * BZ_API(BZ2_bzerror) (
218c218
<  const char * BZ_API(BZ2_bzerror) (
---
>   char  BZ_API(BZ2_bzerror) (
218c218
<  const char * BZ_API(BZ2_bzerror) (
---
>     BZ_API(BZ2_bzerror) (
218c218
<  const char * BZ_API(BZ2_bzerror) (
---
>   char * (BZ2_bzerror) (
218c218
<  const char * BZ_API(BZ2_bzerror) (
---
>    * (BZ2_bzerror) (
218c218
<  const char * BZ_API(BZ2_bzerror) (
---
>   char  (BZ2_bzerror) (
218c218
<  const char * BZ_API(BZ2_bzerror) (
---
>     (BZ2_bzerror) (
218c218
<  const char * BZ_API(BZ2_bzerror) (
---
>  const  * BZ_API(BZ2_bzerror) (
218c218
<  const char * BZ_API(BZ2_bzerror) (
---
>  const   BZ_API(BZ2_bzerror) (
218c218
<  const char * BZ_API(BZ2_bzerror) (
---
>  const  * (BZ2_bzerror) (
218c218
<  const char * BZ_API(BZ2_bzerror) (
---
>  const   (BZ2_bzerror) (
218c218
<  const char * BZ_API(BZ2_bzerror) (
---
>  const  * BZ_APIBZ2_bzerror) (
218c218
<  const char * BZ_API(BZ2_bzerror) (
---
>  const   BZ_APIBZ2_bzerror) (
218c218
<  const char * BZ_API(BZ2_bzerror) (
---
>  const  * BZ2_bzerror) (
218c218
<  const char * BZ_API(BZ2_bzerror) (
---
>  const   BZ2_bzerror) (
218c218
<  const char * BZ_API(BZ2_bzerror) (
---
>  const char  BZ_API(BZ2_bzerror) (
218c218
<  const char * BZ_API(BZ2_bzerror) (
---
>  const char  (BZ2_bzerror) (
218c218
<  const char * BZ_API(BZ2_bzerror) (
---
>  const char  BZ_APIBZ2_bzerror) (
218c218
<  const char * BZ_API(BZ2_bzerror) (
---
>  const char  BZ2_bzerror) (
218c218
<  const char * BZ_API(BZ2_bzerror) (
---
>  const char  BZ_API() (
218c218
<  const char * BZ_API(BZ2_bzerror) (
---
>  const char  () (
218c218
<  const char * BZ_API(BZ2_bzerror) (
---
>  const char  BZ_API) (
218c218
<  const char * BZ_API(BZ2_bzerror) (
---
>  const char  ) (
218c218
<  const char * BZ_API(BZ2_bzerror) (
---
>  const char * (BZ2_bzerror) (
218c218
<  const char * BZ_API(BZ2_bzerror) (
---
>  const char * BZ2_bzerror) (
218c218
<  const char * BZ_API(BZ2_bzerror) (
---
>  const char * () (
218c218
<  const char * BZ_API(BZ2_bzerror) (
---
>  const char * ) (
218c218
<  const char * BZ_API(BZ2_bzerror) (
---
>  const char * (BZ2_bzerror (
218c218
<  const char * BZ_API(BZ2_bzerror) (
---
>  const char * BZ2_bzerror (
(85.1 %, 30523 bytes)
218c218
<  const char * (BZ2_bzerror) (
---
>  const char * BZ2_bzerror) (
218c218
<  const char * (BZ2_bzerror) (
---
>  const char * ) (
218c218
<  const char * (BZ2_bzerror) (
---
>  const char * BZ2_bzerror (
218c218
<  const char * (BZ2_bzerror) (
---
>  const char *  (
218c218
<  const char * (BZ2_bzerror) (
---
>  const char * BZ2_bzerror) 
218c218
<  const char * (BZ2_bzerror) (
---
>  const char * ) 
218c218
<  const char * (BZ2_bzerror) (
---
>  const char * BZ2_bzerror 
218c218
<  const char * (BZ2_bzerror) (
---
>  const char *  
218c218
<  const char * (BZ2_bzerror) (
---
>  const char * () (
218c218
<  const char * (BZ2_bzerror) (
---
>  const char * ( (
218c218
<  const char * (BZ2_bzerror) (
---
>  const char * () 
218c218
<  const char * (BZ2_bzerror) (
---
>  const char * ( 
218,219c218,219
<  const char * (BZ2_bzerror) (
<       BZFILE *b, 
---
>  const char * () (
>        *b, 
218,219c218,219
<  const char * (BZ2_bzerror) (
<       BZFILE *b, 
---
>  const char * ( (
>        *b, 
218,219c218,219
<  const char * (BZ2_bzerror) (
<       BZFILE *b, 
---
>  const char * () 
>        *b, 
218,219c218,219
<  const char * (BZ2_bzerror) (
<       BZFILE *b, 
---
>  const char * ( 
>        *b, 
218c218
<  const char * (BZ2_bzerror) (
---
>  const char * (BZ2_bzerror (
218c218
<  const char * (BZ2_bzerror) (
---
>  const char * (BZ2_bzerror 
218,219c218,219
<  const char * (BZ2_bzerror) (
<       BZFILE *b, 
---
>  const char * (BZ2_bzerror (
>        *b, 
(85.1 %, 30521 bytes)
218,219c218,219
<  const char * BZ2_bzerror (
<       BZFILE *b, 
---
>  const char *  (
>        *b, 
218,219c218,219
<  const char * BZ2_bzerror (
<       BZFILE *b, 
---
>  const char *  
>        *b, 
218,219c218,219
<  const char * BZ2_bzerror (
<       BZFILE *b, 
---
>  const char *  (
>       BZFILE b, 
218,219c218,219
<  const char * BZ2_bzerror (
<       BZFILE *b, 
---
>  const char *  
>       BZFILE b, 
218,219c218,219
<  const char * BZ2_bzerror (
<       BZFILE *b, 
---
>  const char *  (
>        b, 
218,219c218,219
<  const char * BZ2_bzerror (
<       BZFILE *b, 
---
>  const char *  
>        b, 
218c218
<  const char * BZ2_bzerror (
---
>  const char * BZ2_bzerror 
218,219c218,219
<  const char * BZ2_bzerror (
<       BZFILE *b, 
---
>  const char * BZ2_bzerror 
>        *b, 
218,219c218,219
<  const char * BZ2_bzerror (
<       BZFILE *b, 
---
>  const char * BZ2_bzerror 
>       BZFILE b, 
218,219c218,219
<  const char * BZ2_bzerror (
<       BZFILE *b, 
---
>  const char * BZ2_bzerror 
>        b, 
218,219c218,219
<  const char * BZ2_bzerror (
<       BZFILE *b, 
---
>  const char * BZ2_bzerror 
>       BZFILE *, 
218,219c218,219
<  const char * BZ2_bzerror (
<       BZFILE *b, 
---
>  const char * BZ2_bzerror 
>        *, 
218,219c218,219
<  const char * BZ2_bzerror (
<       BZFILE *b, 
---
>  const char * BZ2_bzerror 
>       BZFILE , 
218,219c218,219
<  const char * BZ2_bzerror (
<       BZFILE *b, 
---
>  const char * BZ2_bzerror 
>        , 
219c219
<       BZFILE *b, 
---
>        *b, 
219c219
<       BZFILE *b, 
---
>        b, 
219c219
<       BZFILE *b, 
---
>        *, 
219c219
<       BZFILE *b, 
---
>        , 
219c219
<       BZFILE *b, 
---
>        *b 
219c219
<       BZFILE *b, 
---
>        b 
219c219
<       BZFILE *b, 
---
>        * 
219c219
<       BZFILE *b, 
---
>         
219c219
<       BZFILE *b, 
---
>       BZFILE b, 
219c219
<       BZFILE *b, 
---
>       BZFILE , 
219c219
<       BZFILE *b, 
---
>       BZFILE b 
219c219
<       BZFILE *b, 
---
>       BZFILE  
219,220c219,220
<       BZFILE *b, 
<       int    *errnum
---
>       BZFILE b, 
>           *errnum
219,220c219,220
<       BZFILE *b, 
<       int    *errnum
---
>       BZFILE , 
>           *errnum
219,220c219,220
<       BZFILE *b, 
<       int    *errnum
---
>       BZFILE b 
>           *errnum
219,220c219,220
<       BZFILE *b, 
<       int    *errnum
---
>       BZFILE  
>           *errnum
219c219
<       BZFILE *b, 
---
>       BZFILE *, 
219c219
<       BZFILE *b, 
---
>       BZFILE * 
219,220c219,220
<       BZFILE *b, 
<       int    *errnum
---
>       BZFILE *, 
>           *errnum
219,220c219,220
<       BZFILE *b, 
<       int    *errnum
---
>       BZFILE * 
>           *errnum
219,220c219,220
<       BZFILE *b, 
<       int    *errnum
---
>       BZFILE *, 
>       int    errnum
219,220c219,220
<       BZFILE *b, 
<       int    *errnum
---
>       BZFILE * 
>       int    errnum
219,220c219,220
<       BZFILE *b, 
<       int    *errnum
---
>       BZFILE *, 
>           errnum
219,220c219,220
<       BZFILE *b, 
<       int    *errnum
---
>       BZFILE * 
>           errnum
219c219
<       BZFILE *b, 
---
>       BZFILE *b 
219,220c219,220
<       BZFILE *b, 
<       int    *errnum
---
>       BZFILE *b 
>           *errnum
219,220c219,220
<       BZFILE *b, 
<       int    *errnum
---
>       BZFILE *b 
>       int    errnum
219,220c219,220
<       BZFILE *b, 
<       int    *errnum
---
>       BZFILE *b 
>           errnum
219,220c219,220
<       BZFILE *b, 
<       int    *errnum
---
>       BZFILE *b 
>       int    *
219,220c219,220
<       BZFILE *b, 
<       int    *errnum
---
>       BZFILE *b 
>           *
219,220c219,220
<       BZFILE *b, 
<       int    *errnum
---
>       BZFILE *b 
>       int    
219,220c219,220
<       BZFILE *b, 
<       int    *errnum
---
>       BZFILE *b 
>           
220c220
<       int    *errnum
---
>           *errnum
220c220
<       int    *errnum
---
>           errnum
220c220
<       int    *errnum
---
>           *
220c220
<       int    *errnum
---
>           
(85.1 %, 30520 bytes)
219c219
<       BZFILE *, 
---
>       BZFILE * 
219,220c219,220
<       BZFILE *, 
<       int    *errnum
---
>       BZFILE * 
>           *errnum
219,220c219,220
<       BZFILE *, 
<       int    *errnum
---
>       BZFILE * 
>       int    errnum
219,220c219,220
<       BZFILE *, 
<       int    *errnum
---
>       BZFILE * 
>           errnum
219,220c219,220
<       BZFILE *, 
<       int    *errnum
---
>       BZFILE * 
>       int    *
219,220c219,220
<       BZFILE *, 
<       int    *errnum
---
>       BZFILE * 
>           *
219,220c219,220
<       BZFILE *, 
<       int    *errnum
---
>       BZFILE * 
>       int    
219,220c219,220
<       BZFILE *, 
<       int    *errnum
---
>       BZFILE * 
>           
220c220
<       int    *errnum
---
>           *errnum
220c220
<       int    *errnum
---
>           errnum
220c220
<       int    *errnum
---
>           *
220c220
<       int    *errnum
---
>           
220,221c220,221
<       int    *errnum
<    );
---
>           *errnum
>    ;
220,221c220,221
<       int    *errnum
<    );
---
>           errnum
>    ;
220,221c220,221
<       int    *errnum
<    );
---
>           *
>    ;
220,221c220,221
<       int    *errnum
<    );
---
>           
>    ;
220c220
<       int    *errnum
---
>       int    errnum
220c220
<       int    *errnum
---
>       int    
220,221c220,221
<       int    *errnum
<    );
---
>       int    errnum
>    ;
220,221c220,221
<       int    *errnum
<    );
---
>       int    
>    ;
220,221c220,221
<       int    *errnum
<    );
---
>       int    errnum
>    )
220,221c220,221
<       int    *errnum
<    );
---
>       int    
>    )
220,221c220,221
<       int    *errnum
<    );
---
>       int    errnum
>    
220,221c220,221
<       int    *errnum
<    );
---
>       int    
>    
220c220
<       int    *errnum
---
>       int    *
220,221c220,221
<       int    *errnum
<    );
---
>       int    *
>    ;
220,221c220,221
<       int    *errnum
<    );
---
>       int    *
>    )
220,221c220,221
<       int    *errnum
<    );
---
>       int    *
>    
220c220
<       int    *errnum
---
>       int    *
231c231
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
220,221c220,221
<       int    *errnum
<    );
---
>       int    *
>    ;
231c231
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
220,221c220,221
<       int    *errnum
<    );
---
>       int    *
>    )
231c231
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
220,221c220,221
<       int    *errnum
<    );
---
>       int    *
>    
231c231
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
221c221
<    );
---
>    ;
221c221
<    );
---
>    
221c221
<    );
---
>    ;
231c231
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
221c221
<    );
---
>    
231c231
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
221c221
<    );
---
>    ;
231c231
< #define _BZLIB_PRIVATE_H
---
> # _BZLIB_PRIVATE_H
221c221
<    );
---
>    
231c231
< #define _BZLIB_PRIVATE_H
---
> # _BZLIB_PRIVATE_H
221c221
<    );
---
>    ;
231c231
< #define _BZLIB_PRIVATE_H
---
>  _BZLIB_PRIVATE_H
221c221
<    );
---
>    
231c231
< #define _BZLIB_PRIVATE_H
---
>  _BZLIB_PRIVATE_H
(85.1 %, 30514 bytes)
221c221
<    );
---
>    ;
221c221
<    );
---
>    
221c221
<    );
---
>    ;
231c231
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
221c221
<    );
---
>    
231c231
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
221c221
<    );
---
>    ;
231c231
< #define _BZLIB_PRIVATE_H
---
> # _BZLIB_PRIVATE_H
221c221
<    );
---
>    
231c231
< #define _BZLIB_PRIVATE_H
---
> # _BZLIB_PRIVATE_H
221c221
<    );
---
>    ;
231c231
< #define _BZLIB_PRIVATE_H
---
>  _BZLIB_PRIVATE_H
221c221
<    );
---
>    
231c231
< #define _BZLIB_PRIVATE_H
---
>  _BZLIB_PRIVATE_H
221c221
<    );
---
>    )
221c221
<    );
---
>    )
231c231
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
221c221
<    );
---
>    )
231c231
< #define _BZLIB_PRIVATE_H
---
> # _BZLIB_PRIVATE_H
221c221
<    );
---
>    )
231c231
< #define _BZLIB_PRIVATE_H
---
>  _BZLIB_PRIVATE_H
221c221
<    );
---
>    )
231c231
< #define _BZLIB_PRIVATE_H
---
> #define 
221c221
<    );
---
>    )
231c231
< #define _BZLIB_PRIVATE_H
---
> define 
221c221
<    );
---
>    )
231c231
< #define _BZLIB_PRIVATE_H
---
> # 
221c221
<    );
---
>    )
231c231
< #define _BZLIB_PRIVATE_H
---
>  
231c231
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
231c231
< #define _BZLIB_PRIVATE_H
---
>  _BZLIB_PRIVATE_H
231c231
< #define _BZLIB_PRIVATE_H
---
> define 
231c231
< #define _BZLIB_PRIVATE_H
---
>  
231c231
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
233c233
< #include <stdlib.h>
---
> include <stdlib.h>
231c231
< #define _BZLIB_PRIVATE_H
---
>  _BZLIB_PRIVATE_H
233c233
< #include <stdlib.h>
---
> include <stdlib.h>
231c231
< #define _BZLIB_PRIVATE_H
---
> define 
233c233
< #include <stdlib.h>
---
> include <stdlib.h>
231c231
< #define _BZLIB_PRIVATE_H
---
>  
233c233
< #include <stdlib.h>
---
> include <stdlib.h>
231c231
< #define _BZLIB_PRIVATE_H
---
> # _BZLIB_PRIVATE_H
231c231
< #define _BZLIB_PRIVATE_H
---
> # 
(85.1 %, 30491 bytes)
233c233
< #include <stdlib.h>
---
>  stdlib.h>
233c233
< #include <stdlib.h>
---
> include <.h>
233c233
< #include <stdlib.h>
---
>  <.h>
233c233
< #include <stdlib.h>
---
> include .h>
233c233
< #include <stdlib.h>
---
>  .h>
233c233
< #include <stdlib.h>
---
> # <stdlib.h>
233c233
< #include <stdlib.h>
---
> # stdlib.h>
233c233
< #include <stdlib.h>
---
> # <.h>
233c233
< #include <stdlib.h>
---
> # .h>
233c233
< #include <stdlib.h>
---
> # <stdlibh>
233c233
< #include <stdlib.h>
---
> # stdlibh>
233c233
< #include <stdlib.h>
---
> # <h>
233c233
< #include <stdlib.h>
---
> # h>
233c233
< #include <stdlib.h>
---
> #include stdlib.h>
233c233
< #include <stdlib.h>
---
> #include .h>
233c233
< #include <stdlib.h>
---
> #include stdlibh>
233c233
< #include <stdlib.h>
---
> #include h>
233c233
< #include <stdlib.h>
---
> #include stdlib.>
233c233
< #include <stdlib.h>
---
> #include .>
233c233
< #include <stdlib.h>
---
> #include stdlib>
233c233
< #include <stdlib.h>
---
> #include >
233c233
< #include <stdlib.h>
---
> #include <.h>
233c233
< #include <stdlib.h>
---
> #include <h>
233c233
< #include <stdlib.h>
---
> #include <.>
233c233
< #include <stdlib.h>
---
> #include <>
233c233
< #include <stdlib.h>
---
> #include <.h
233c233
< #include <stdlib.h>
---
> #include <h
233c233
< #include <stdlib.h>
---
> #include <.
233c233
< #include <stdlib.h>
---
> #include <
233c233
< #include <stdlib.h>
---
> #include <stdlibh>
233c233
< #include <stdlib.h>
---
> #include <stdlib>
233c233
< #include <stdlib.h>
---
> #include <stdlibh
233c233
< #include <stdlib.h>
---
> #include <stdlib
233c233
< #include <stdlib.h>
---
> #include <stdlibh>
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION  "1.0.2, 30-Dec-2001"
233c233
< #include <stdlib.h>
---
> #include <stdlib>
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION  "1.0.2, 30-Dec-2001"
233c233
< #include <stdlib.h>
---
> #include <stdlibh
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION  "1.0.2, 30-Dec-2001"
233c233
< #include <stdlib.h>
---
> #include <stdlib
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION  "1.0.2, 30-Dec-2001"
233c233
< #include <stdlib.h>
---
> #include <stdlib.>
233c233
< #include <stdlib.h>
---
> #include <stdlib.
233c233
< #include <stdlib.h>
---
> #include <stdlib.>
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION  "1.0.2, 30-Dec-2001"
233c233
< #include <stdlib.h>
---
> #include <stdlib.
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION  "1.0.2, 30-Dec-2001"
233c233
< #include <stdlib.h>
---
> #include <stdlib.>
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> # BZ_VERSION  "1.0.2, 30-Dec-2001"
233c233
< #include <stdlib.h>
---
> #include <stdlib.
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> # BZ_VERSION  "1.0.2, 30-Dec-2001"
233c233
< #include <stdlib.h>
---
> #include <stdlib.>
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>  BZ_VERSION  "1.0.2, 30-Dec-2001"
233c233
< #include <stdlib.h>
---
> #include <stdlib.
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>  BZ_VERSION  "1.0.2, 30-Dec-2001"
233c233
< #include <stdlib.h>
---
> #include <stdlib.h
233c233
< #include <stdlib.h>
---
> #include <stdlib.h
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION  "1.0.2, 30-Dec-2001"
233c233
< #include <stdlib.h>
---
> #include <stdlib.h
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> # BZ_VERSION  "1.0.2, 30-Dec-2001"
233c233
< #include <stdlib.h>
---
> #include <stdlib.h
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>  BZ_VERSION  "1.0.2, 30-Dec-2001"
233c233
< #include <stdlib.h>
---
> #include <stdlib.h
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define   "1.0.2, 30-Dec-2001"
233c233
< #include <stdlib.h>
---
> #include <stdlib.h
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define   "1.0.2, 30-Dec-2001"
233c233
< #include <stdlib.h>
---
> #include <stdlib.h
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #   "1.0.2, 30-Dec-2001"
233c233
< #include <stdlib.h>
---
> #include <stdlib.h
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>    "1.0.2, 30-Dec-2001"
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION  "1.0.2, 30-Dec-2001"
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>  BZ_VERSION  "1.0.2, 30-Dec-2001"
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define   "1.0.2, 30-Dec-2001"
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>    "1.0.2, 30-Dec-2001"
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION  
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>  BZ_VERSION  
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define   
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>    
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> # BZ_VERSION  "1.0.2, 30-Dec-2001"
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #   "1.0.2, 30-Dec-2001"
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> # BZ_VERSION  
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #   
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> # BZ_VERSION  "1.0.2, 30-Dec-2001"
241c241
< typedef unsigned char   Bool;
---
>  unsigned char   Bool;
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #   "1.0.2, 30-Dec-2001"
241c241
< typedef unsigned char   Bool;
---
>  unsigned char   Bool;
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> # BZ_VERSION  
241c241
< typedef unsigned char   Bool;
---
>  unsigned char   Bool;
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #   
241c241
< typedef unsigned char   Bool;
---
>  unsigned char   Bool;
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define   "1.0.2, 30-Dec-2001"
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define   
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define   "1.0.2, 30-Dec-2001"
241c241
< typedef unsigned char   Bool;
---
>  unsigned char   Bool;
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define   
241c241
< typedef unsigned char   Bool;
---
>  unsigned char   Bool;
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define   "1.0.2, 30-Dec-2001"
241c241
< typedef unsigned char   Bool;
---
> typedef  char   Bool;
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define   
241c241
< typedef unsigned char   Bool;
---
> typedef  char   Bool;
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define   "1.0.2, 30-Dec-2001"
241c241
< typedef unsigned char   Bool;
---
>   char   Bool;
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define   
241c241
< typedef unsigned char   Bool;
---
>   char   Bool;
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define BZ_VERSION  
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define BZ_VERSION  
241c241
< typedef unsigned char   Bool;
---
>  unsigned char   Bool;
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define BZ_VERSION  
241c241
< typedef unsigned char   Bool;
---
> typedef  char   Bool;
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define BZ_VERSION  
241c241
< typedef unsigned char   Bool;
---
>   char   Bool;
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define BZ_VERSION  
241c241
< typedef unsigned char   Bool;
---
> typedef unsigned    Bool;
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define BZ_VERSION  
241c241
< typedef unsigned char   Bool;
---
>  unsigned    Bool;
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define BZ_VERSION  
241c241
< typedef unsigned char   Bool;
---
> typedef     Bool;
238c238
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define BZ_VERSION  
241c241
< typedef unsigned char   Bool;
---
>      Bool;
241c241
< typedef unsigned char   Bool;
---
>  unsigned char   Bool;
241c241
< typedef unsigned char   Bool;
---
>   char   Bool;
241c241
< typedef unsigned char   Bool;
---
>  unsigned    Bool;
241c241
< typedef unsigned char   Bool;
---
>      Bool;
241c241
< typedef unsigned char   Bool;
---
>  unsigned char   ;
241c241
< typedef unsigned char   Bool;
---
>   char   ;
241c241
< typedef unsigned char   Bool;
---
>  unsigned    ;
241c241
< typedef unsigned char   Bool;
---
>      ;
241c241
< typedef unsigned char   Bool;
---
> typedef  char   Bool;
241c241
< typedef unsigned char   Bool;
---
> typedef     Bool;
241c241
< typedef unsigned char   Bool;
---
> typedef  char   ;
241c241
< typedef unsigned char   Bool;
---
> typedef     ;
241c241
< typedef unsigned char   Bool;
---
> typedef  char   Bool
241c241
< typedef unsigned char   Bool;
---
> typedef     Bool
241c241
< typedef unsigned char   Bool;
---
> typedef  char   
(85.1 %, 30483 bytes)
241c241
< typedef  char   Bool;
---
> typedef     Bool;
241c241
< typedef  char   Bool;
---
> typedef     ;
241c241
< typedef  char   Bool;
---
> typedef     Bool
241c241
< typedef  char   Bool;
---
> typedef     
241c241
< typedef  char   Bool;
---
> typedef     Bool;
243c243
< typedef int             Int32;
---
>  int             Int32;
241c241
< typedef  char   Bool;
---
> typedef     ;
243c243
< typedef int             Int32;
---
>  int             Int32;
241c241
< typedef  char   Bool;
---
> typedef     Bool
243c243
< typedef int             Int32;
---
>  int             Int32;
241c241
< typedef  char   Bool;
---
> typedef     
243c243
< typedef int             Int32;
---
>  int             Int32;
241c241
< typedef  char   Bool;
---
> typedef  char   ;
241c241
< typedef  char   Bool;
---
> typedef  char   
241c241
< typedef  char   Bool;
---
> typedef  char   ;
243c243
< typedef int             Int32;
---
>  int             Int32;
241c241
< typedef  char   Bool;
---
> typedef  char   
243c243
< typedef int             Int32;
---
>  int             Int32;
241c241
< typedef  char   Bool;
---
> typedef  char   ;
243c243
< typedef int             Int32;
---
> typedef              Int32;
241c241
< typedef  char   Bool;
---
> typedef  char   
243c243
< typedef int             Int32;
---
> typedef              Int32;
241c241
< typedef  char   Bool;
---
> typedef  char   ;
243c243
< typedef int             Int32;
---
>               Int32;
241c241
< typedef  char   Bool;
---
> typedef  char   
243c243
< typedef int             Int32;
---
>               Int32;
241c241
< typedef  char   Bool;
---
> typedef  char   Bool
(85.1 %, 30479 bytes)
241c241
< typedef     Bool;
---
> typedef     ;
241c241
< typedef     Bool;
---
> typedef     
241c241
< typedef     Bool;
---
> typedef     ;
243c243
< typedef int             Int32;
---
>  int             Int32;
241c241
< typedef     Bool;
---
> typedef     
243c243
< typedef int             Int32;
---
>  int             Int32;
241c241
< typedef     Bool;
---
> typedef     ;
243c243
< typedef int             Int32;
---
> typedef              Int32;
241c241
< typedef     Bool;
---
> typedef     
243c243
< typedef int             Int32;
---
> typedef              Int32;
241c241
< typedef     Bool;
---
> typedef     ;
243c243
< typedef int             Int32;
---
>               Int32;
241c241
< typedef     Bool;
---
> typedef     
243c243
< typedef int             Int32;
---
>               Int32;
241c241
< typedef     Bool;
---
> typedef     Bool
241c241
< typedef     Bool;
---
> typedef     Bool
243c243
< typedef int             Int32;
---
>  int             Int32;
241c241
< typedef     Bool;
---
> typedef     Bool
243c243
< typedef int             Int32;
---
> typedef              Int32;
241c241
< typedef     Bool;
---
> typedef     Bool
243c243
< typedef int             Int32;
---
>               Int32;
241c241
< typedef     Bool;
---
> typedef     Bool
243c243
< typedef int             Int32;
---
> typedef int             ;
241c241
< typedef     Bool;
---
> typedef     Bool
243c243
< typedef int             Int32;
---
>  int             ;
241c241
< typedef     Bool;
---
> typedef     Bool
243c243
< typedef int             Int32;
---
> typedef              ;
241c241
< typedef     Bool;
---
> typedef     Bool
243c243
< typedef int             Int32;
---
>               ;
243c243
< typedef int             Int32;
---
>  int             Int32;
243c243
< typedef int             Int32;
---
>               Int32;
243c243
< typedef int             Int32;
---
>  int             ;
243c243
< typedef int             Int32;
---
>               ;
243c243
< typedef int             Int32;
---
>  int             Int32
243c243
< typedef int             Int32;
---
>               Int32
243c243
< typedef int             Int32;
---
>  int             
243c243
< typedef int             Int32;
---
>               
243c243
< typedef int             Int32;
---
> typedef              Int32;
243c243
< typedef int             Int32;
---
> typedef              ;
243c243
< typedef int             Int32;
---
> typedef              Int32
243c243
< typedef int             Int32;
---
> typedef              
243,244c243,244
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef              Int32;
>  unsigned int    UInt32;
243,244c243,244
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef              ;
>  unsigned int    UInt32;
243,244c243,244
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef              Int32
>  unsigned int    UInt32;
243,244c243,244
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef              
>  unsigned int    UInt32;
243c243
< typedef int             Int32;
---
> typedef int             ;
243c243
< typedef int             Int32;
---
> typedef int             
243,244c243,244
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef int             ;
>  unsigned int    UInt32;
243,244c243,244
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef int             
>  unsigned int    UInt32;
243,244c243,244
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef int             ;
> typedef  int    UInt32;
243,244c243,244
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef int             
> typedef  int    UInt32;
243,244c243,244
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef int             ;
>   int    UInt32;
243,244c243,244
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef int             
>   int    UInt32;
(85.1 %, 30476 bytes)
243c243
< typedef              Int32;
---
> typedef              ;
243c243
< typedef              Int32;
---
> typedef              
243,244c243,244
< typedef              Int32;
< typedef unsigned int    UInt32;
---
> typedef              ;
>  unsigned int    UInt32;
243,244c243,244
< typedef              Int32;
< typedef unsigned int    UInt32;
---
> typedef              
>  unsigned int    UInt32;
243,244c243,244
< typedef              Int32;
< typedef unsigned int    UInt32;
---
> typedef              ;
> typedef  int    UInt32;
243,244c243,244
< typedef              Int32;
< typedef unsigned int    UInt32;
---
> typedef              
> typedef  int    UInt32;
243,244c243,244
< typedef              Int32;
< typedef unsigned int    UInt32;
---
> typedef              ;
>   int    UInt32;
243,244c243,244
< typedef              Int32;
< typedef unsigned int    UInt32;
---
> typedef              
>   int    UInt32;
243c243
< typedef              Int32;
---
> typedef              Int32
243,244c243,244
< typedef              Int32;
< typedef unsigned int    UInt32;
---
> typedef              Int32
>  unsigned int    UInt32;
243,244c243,244
< typedef              Int32;
< typedef unsigned int    UInt32;
---
> typedef              Int32
> typedef  int    UInt32;
243,244c243,244
< typedef              Int32;
< typedef unsigned int    UInt32;
---
> typedef              Int32
>   int    UInt32;
243,244c243,244
< typedef              Int32;
< typedef unsigned int    UInt32;
---
> typedef              Int32
> typedef unsigned     UInt32;
243,244c243,244
< typedef              Int32;
< typedef unsigned int    UInt32;
---
> typedef              Int32
>  unsigned     UInt32;
243,244c243,244
< typedef              Int32;
< typedef unsigned int    UInt32;
---
> typedef              Int32
> typedef      UInt32;
243,244c243,244
< typedef              Int32;
< typedef unsigned int    UInt32;
---
> typedef              Int32
>       UInt32;
244c244
< typedef unsigned int    UInt32;
---
>  unsigned int    UInt32;
244c244
< typedef unsigned int    UInt32;
---
>   int    UInt32;
244c244
< typedef unsigned int    UInt32;
---
>  unsigned     UInt32;
244c244
< typedef unsigned int    UInt32;
---
>       UInt32;
244c244
< typedef unsigned int    UInt32;
---
>  unsigned int    ;
244c244
< typedef unsigned int    UInt32;
---
>   int    ;
244c244
< typedef unsigned int    UInt32;
---
>  unsigned     ;
244c244
< typedef unsigned int    UInt32;
---
>       ;
244c244
< typedef unsigned int    UInt32;
---
> typedef  int    UInt32;
244c244
< typedef unsigned int    UInt32;
---
> typedef      UInt32;
244c244
< typedef unsigned int    UInt32;
---
> typedef  int    ;
(85.1 %, 30468 bytes)
244c244
< typedef  int    UInt32;
---
> typedef      UInt32;
244c244
< typedef  int    UInt32;
---
> typedef      ;
244c244
< typedef  int    UInt32;
---
> typedef      UInt32
244c244
< typedef  int    UInt32;
---
> typedef      
244c244
< typedef  int    UInt32;
---
> typedef      UInt32;
248c248
< #define True  ((Bool)1)
---
> define True  ((Bool)1)
244c244
< typedef  int    UInt32;
---
> typedef      ;
248c248
< #define True  ((Bool)1)
---
> define True  ((Bool)1)
244c244
< typedef  int    UInt32;
---
> typedef      UInt32
248c248
< #define True  ((Bool)1)
---
> define True  ((Bool)1)
244c244
< typedef  int    UInt32;
---
> typedef      
248c248
< #define True  ((Bool)1)
---
> define True  ((Bool)1)
244c244
< typedef  int    UInt32;
---
> typedef  int    ;
244c244
< typedef  int    UInt32;
---
> typedef  int    
244c244
< typedef  int    UInt32;
---
> typedef  int    ;
248c248
< #define True  ((Bool)1)
---
> define True  ((Bool)1)
244c244
< typedef  int    UInt32;
---
> typedef  int    
248c248
< #define True  ((Bool)1)
---
> define True  ((Bool)1)
244c244
< typedef  int    UInt32;
---
> typedef  int    ;
248c248
< #define True  ((Bool)1)
---
> # True  ((Bool)1)
244c244
< typedef  int    UInt32;
---
> typedef  int    
248c248
< #define True  ((Bool)1)
---
> # True  ((Bool)1)
244c244
< typedef  int    UInt32;
---
> typedef  int    ;
248c248
< #define True  ((Bool)1)
---
>  True  ((Bool)1)
244c244
< typedef  int    UInt32;
---
> typedef  int    
248c248
< #define True  ((Bool)1)
---
>  True  ((Bool)1)
(85.1 %, 30465 bytes)
244c244
< typedef      UInt32;
---
> typedef      ;
244c244
< typedef      UInt32;
---
> typedef      
244c244
< typedef      UInt32;
---
> typedef      ;
248c248
< #define True  ((Bool)1)
---
> define True  ((Bool)1)
244c244
< typedef      UInt32;
---
> typedef      
248c248
< #define True  ((Bool)1)
---
> define True  ((Bool)1)
244c244
< typedef      UInt32;
---
> typedef      ;
248c248
< #define True  ((Bool)1)
---
> # True  ((Bool)1)
244c244
< typedef      UInt32;
---
> typedef      
248c248
< #define True  ((Bool)1)
---
> # True  ((Bool)1)
244c244
< typedef      UInt32;
---
> typedef      ;
248c248
< #define True  ((Bool)1)
---
>  True  ((Bool)1)
244c244
< typedef      UInt32;
---
> typedef      
248c248
< #define True  ((Bool)1)
---
>  True  ((Bool)1)
244c244
< typedef      UInt32;
---
> typedef      UInt32
244c244
< typedef      UInt32;
---
> typedef      UInt32
248c248
< #define True  ((Bool)1)
---
> define True  ((Bool)1)
244c244
< typedef      UInt32;
---
> typedef      UInt32
248c248
< #define True  ((Bool)1)
---
> # True  ((Bool)1)
244c244
< typedef      UInt32;
---
> typedef      UInt32
248c248
< #define True  ((Bool)1)
---
>  True  ((Bool)1)
244c244
< typedef      UInt32;
---
> typedef      UInt32
248c248
< #define True  ((Bool)1)
---
> #define   ((Bool)1)
244c244
< typedef      UInt32;
---
> typedef      UInt32
248c248
< #define True  ((Bool)1)
---
> define   ((Bool)1)
244c244
< typedef      UInt32;
---
> typedef      UInt32
248c248
< #define True  ((Bool)1)
---
> #   ((Bool)1)
244c244
< typedef      UInt32;
---
> typedef      UInt32
248c248
< #define True  ((Bool)1)
---
>    ((Bool)1)
248c248
< #define True  ((Bool)1)
---
> define True  ((Bool)1)
248c248
< #define True  ((Bool)1)
---
>  True  ((Bool)1)
248c248
< #define True  ((Bool)1)
---
> define   ((Bool)1)
248c248
< #define True  ((Bool)1)
---
>    ((Bool)1)
248c248
< #define True  ((Bool)1)
---
> define True  (Bool)1)
248c248
< #define True  ((Bool)1)
---
>  True  (Bool)1)
248c248
< #define True  ((Bool)1)
---
> define   (Bool)1)
248c248
< #define True  ((Bool)1)
---
>    (Bool)1)
248c248
< #define True  ((Bool)1)
---
> # True  ((Bool)1)
248c248
< #define True  ((Bool)1)
---
> #   ((Bool)1)
248c248
< #define True  ((Bool)1)
---
> # True  (Bool)1)
248c248
< #define True  ((Bool)1)
---
> #   (Bool)1)
248c248
< #define True  ((Bool)1)
---
> # True  (Bool)1)
248c248
< #define True  ((Bool)1)
---
> #   (Bool)1)
248c248
< #define True  ((Bool)1)
---
> # True  Bool)1)
248c248
< #define True  ((Bool)1)
---
> #   Bool)1)
248c248
< #define True  ((Bool)1)
---
> #define   ((Bool)1)
248c248
< #define True  ((Bool)1)
---
> #define   (Bool)1)
248c248
< #define True  ((Bool)1)
---
> #define   (Bool)1)
248c248
< #define True  ((Bool)1)
---
> #define   Bool)1)
248c248
< #define True  ((Bool)1)
---
> #define   (()1)
248c248
< #define True  ((Bool)1)
---
> #define   ()1)
248c248
< #define True  ((Bool)1)
---
> #define   ()1)
248c248
< #define True  ((Bool)1)
---
> #define   )1)
248c248
< #define True  ((Bool)1)
---
> #define True  (Bool)1)
248c248
< #define True  ((Bool)1)
---
> #define True  Bool)1)
248c248
< #define True  ((Bool)1)
---
> #define True  ()1)
248c248
< #define True  ((Bool)1)
---
> #define True  )1)
248c248
< #define True  ((Bool)1)
---
> #define True  (Bool1)
248c248
< #define True  ((Bool)1)
---
> #define True  Bool1)
248c248
< #define True  ((Bool)1)
---
> #define True  (1)
248c248
< #define True  ((Bool)1)
---
> #define True  1)
248c248
< #define True  ((Bool)1)
---
> #define True  (Bool)1)
248c248
< #define True  ((Bool)1)
---
> #define True  ()1)
248c248
< #define True  ((Bool)1)
---
> #define True  (Bool1)
248c248
< #define True  ((Bool)1)
---
> #define True  (1)
(85.1 %, 30459 bytes)
248,249c248,249
< #define True  (1)
< #define False ((Bool)0)
---
> #define True  1
> define False ((Bool)0)
248,249c248,249
< #define True  (1)
< #define False ((Bool)0)
---
> #define True  
> define False ((Bool)0)
248c248
< #define True  (1)
---
> #define True  ()
248c248
< #define True  (1)
---
> #define True  (
248,249c248,249
< #define True  (1)
< #define False ((Bool)0)
---
> #define True  ()
> define False ((Bool)0)
248,249c248,249
< #define True  (1)
< #define False ((Bool)0)
---
> #define True  (
> define False ((Bool)0)
248,249c248,249
< #define True  (1)
< #define False ((Bool)0)
---
> #define True  ()
> # False ((Bool)0)
248,249c248,249
< #define True  (1)
< #define False ((Bool)0)
---
> #define True  (
> # False ((Bool)0)
248,249c248,249
< #define True  (1)
< #define False ((Bool)0)
---
> #define True  ()
>  False ((Bool)0)
248,249c248,249
< #define True  (1)
< #define False ((Bool)0)
---
> #define True  (
>  False ((Bool)0)
248c248
< #define True  (1)
---
> #define True  (1
248,249c248,249
< #define True  (1)
< #define False ((Bool)0)
---
> #define True  (1
> define False ((Bool)0)
248,249c248,249
< #define True  (1)
< #define False ((Bool)0)
---
> #define True  (1
> # False ((Bool)0)
248,249c248,249
< #define True  (1)
< #define False ((Bool)0)
---
> #define True  (1
>  False ((Bool)0)
248,249c248,249
< #define True  (1)
< #define False ((Bool)0)
---
> #define True  (1
> #define  ((Bool)0)
248,249c248,249
< #define True  (1)
< #define False ((Bool)0)
---
> #define True  (1
> define  ((Bool)0)
248,249c248,249
< #define True  (1)
< #define False ((Bool)0)
---
> #define True  (1
> #  ((Bool)0)
248,249c248,249
< #define True  (1)
< #define False ((Bool)0)
---
> #define True  (1
>   ((Bool)0)
249c249
< #define False ((Bool)0)
---
> define False ((Bool)0)
249c249
< #define False ((Bool)0)
---
>  False ((Bool)0)
249c249
< #define False ((Bool)0)
---
> define  ((Bool)0)
249c249
< #define False ((Bool)0)
---
>   ((Bool)0)
249c249
< #define False ((Bool)0)
---
> define False (Bool)0)
249c249
< #define False ((Bool)0)
---
>  False (Bool)0)
249c249
< #define False ((Bool)0)
---
> define  (Bool)0)
249c249
< #define False ((Bool)0)
---
>   (Bool)0)
249c249
< #define False ((Bool)0)
---
> # False ((Bool)0)
249c249
< #define False ((Bool)0)
---
> #  ((Bool)0)
249c249
< #define False ((Bool)0)
---
> # False (Bool)0)
249c249
< #define False ((Bool)0)
---
> #  (Bool)0)
249c249
< #define False ((Bool)0)
---
> # False (Bool)0)
249c249
< #define False ((Bool)0)
---
> #  (Bool)0)
249c249
< #define False ((Bool)0)
---
> # False Bool)0)
249c249
< #define False ((Bool)0)
---
> #  Bool)0)
249c249
< #define False ((Bool)0)
---
> #define  ((Bool)0)
249c249
< #define False ((Bool)0)
---
> #define  (Bool)0)
249c249
< #define False ((Bool)0)
---
> #define  (Bool)0)
249c249
< #define False ((Bool)0)
---
> #define  Bool)0)
249c249
< #define False ((Bool)0)
---
> #define  (()0)
249c249
< #define False ((Bool)0)
---
> #define  ()0)
249c249
< #define False ((Bool)0)
---
> #define  ()0)
249c249
< #define False ((Bool)0)
---
> #define  )0)
249c249
< #define False ((Bool)0)
---
> #define False (Bool)0)
249c249
< #define False ((Bool)0)
---
> #define False Bool)0)
249c249
< #define False ((Bool)0)
---
> #define False ()0)
249c249
< #define False ((Bool)0)
---
> #define False )0)
249c249
< #define False ((Bool)0)
---
> #define False (Bool0)
249c249
< #define False ((Bool)0)
---
> #define False Bool0)
249c249
< #define False ((Bool)0)
---
> #define False (0)
249c249
< #define False ((Bool)0)
---
> #define False 0)
249c249
< #define False ((Bool)0)
---
> #define False (Bool)0)
249c249
< #define False ((Bool)0)
---
> #define False ()0)
249c249
< #define False ((Bool)0)
---
> #define False (Bool0)
249c249
< #define False ((Bool)0)
---
> #define False (0)
(85.1 %, 30453 bytes)
249c249
< #define False (0)
---
> #define False 0
251c251
< #define __inline__  
---
> define __inline__  
249c249
< #define False (0)
---
> #define False 
251c251
< #define __inline__  
---
> define __inline__  
249c249
< #define False (0)
---
> #define False ()
249c249
< #define False (0)
---
> #define False (
249c249
< #define False (0)
---
> #define False ()
251c251
< #define __inline__  
---
> define __inline__  
249c249
< #define False (0)
---
> #define False (
251c251
< #define __inline__  
---
> define __inline__  
249c249
< #define False (0)
---
> #define False ()
251c251
< #define __inline__  
---
> # __inline__  
249c249
< #define False (0)
---
> #define False (
251c251
< #define __inline__  
---
> # __inline__  
249c249
< #define False (0)
---
> #define False ()
251c251
< #define __inline__  
---
>  __inline__  
249c249
< #define False (0)
---
> #define False (
251c251
< #define __inline__  
---
>  __inline__  
249c249
< #define False (0)
---
> #define False (0
249c249
< #define False (0)
---
> #define False (0
251c251
< #define __inline__  
---
> define __inline__  
249c249
< #define False (0)
---
> #define False (0
251c251
< #define __inline__  
---
> # __inline__  
249c249
< #define False (0)
---
> #define False (0
251c251
< #define __inline__  
---
>  __inline__  
249c249
< #define False (0)
---
> #define False (0
251c251
< #define __inline__  
---
> #define   
249c249
< #define False (0)
---
> #define False (0
251c251
< #define __inline__  
---
> define   
249c249
< #define False (0)
---
> #define False (0
251c251
< #define __inline__  
---
> #   
249c249
< #define False (0)
---
> #define False (0
251c251
< #define __inline__  
---
>    
251c251
< #define __inline__  
---
> define __inline__  
251c251
< #define __inline__  
---
>  __inline__  
251c251
< #define __inline__  
---
> define   
251c251
< #define __inline__  
---
>    
(85.1 %, 30446 bytes)
251c251
<  __inline__  
---
>    
253c253
< extern void BZ2_bz__AssertH__fail ( void );
---
>  void BZ2_bz__AssertH__fail ( void );
251c251
<  __inline__  
---
>    
253c253
< extern void BZ2_bz__AssertH__fail ( void );
---
> extern  BZ2_bz__AssertH__fail ( void );
251c251
<  __inline__  
---
>    
253c253
< extern void BZ2_bz__AssertH__fail ( void );
---
>   BZ2_bz__AssertH__fail ( void );
251c251
<  __inline__  
---
>    
253c253
< extern void BZ2_bz__AssertH__fail ( void );
---
> extern void  ( void );
251c251
<  __inline__  
---
>    
253c253
< extern void BZ2_bz__AssertH__fail ( void );
---
>  void  ( void );
251c251
<  __inline__  
---
>    
253c253
< extern void BZ2_bz__AssertH__fail ( void );
---
> extern   ( void );
251c251
<  __inline__  
---
>    
253c253
< extern void BZ2_bz__AssertH__fail ( void );
---
>    ( void );
253c253
< extern void BZ2_bz__AssertH__fail ( void );
---
>  void BZ2_bz__AssertH__fail ( void );
(85.2 %, 30430 bytes)
253c253
<  void BZ2_bz__AssertH__fail ( void );
---
>    ( void );
253c253
<  void BZ2_bz__AssertH__fail ( void );
---
>   BZ2_bz__AssertH__fail  void );
253c253
<  void BZ2_bz__AssertH__fail ( void );
---
>     void );
253c253
<  void BZ2_bz__AssertH__fail ( void );
---
>   BZ2_bz__AssertH__fail (  );
253c253
<  void BZ2_bz__AssertH__fail ( void );
---
>    (  );
253c253
<  void BZ2_bz__AssertH__fail ( void );
---
>   BZ2_bz__AssertH__fail   );
253c253
<  void BZ2_bz__AssertH__fail ( void );
---
>      );
253c253
<  void BZ2_bz__AssertH__fail ( void );
---
>  void  ( void );
253c253
<  void BZ2_bz__AssertH__fail ( void );
---
>  void   void );
253c253
<  void BZ2_bz__AssertH__fail ( void );
---
>  void  (  );
253c253
<  void BZ2_bz__AssertH__fail ( void );
---
>  void    );
253c253
<  void BZ2_bz__AssertH__fail ( void );
---
>  void  ( void ;
253c253
<  void BZ2_bz__AssertH__fail ( void );
---
>  void   void ;
253c253
<  void BZ2_bz__AssertH__fail ( void );
---
>  void  (  ;
253c253
<  void BZ2_bz__AssertH__fail ( void );
---
>  void    ;
253c253
<  void BZ2_bz__AssertH__fail ( void );
---
>  void BZ2_bz__AssertH__fail  void );
253c253
<  void BZ2_bz__AssertH__fail ( void );
---
>  void BZ2_bz__AssertH__fail   );
253c253
<  void BZ2_bz__AssertH__fail ( void );
---
>  void BZ2_bz__AssertH__fail  void ;
253c253
<  void BZ2_bz__AssertH__fail ( void );
---
>  void BZ2_bz__AssertH__fail   ;
253c253
<  void BZ2_bz__AssertH__fail ( void );
---
>  void BZ2_bz__AssertH__fail  void )
253c253
<  void BZ2_bz__AssertH__fail ( void );
---
>  void BZ2_bz__AssertH__fail   )
253c253
<  void BZ2_bz__AssertH__fail ( void );
---
>  void BZ2_bz__AssertH__fail  void 
253c253
<  void BZ2_bz__AssertH__fail ( void );
---
>  void BZ2_bz__AssertH__fail   
253c253
<  void BZ2_bz__AssertH__fail ( void );
---
>  void BZ2_bz__AssertH__fail (  );
(85.2 %, 30403 bytes)
253,254c253,254
<  void    ;
< #define AssertH(cond,errcode) \
---
>  void    
>  (cond,errcode) \
254c254
< #define AssertH(cond,errcode) \
---
> define AssertH(cond,errcode) \
254c254
< #define AssertH(cond,errcode) \
---
>  AssertH(cond,errcode) \
254c254
< #define AssertH(cond,errcode) \
---
> define (cond,errcode) \
254c254
< #define AssertH(cond,errcode) \
---
>  (cond,errcode) \
254c254
< #define AssertH(cond,errcode) \
---
> define AssertHcond,errcode) \
254c254
< #define AssertH(cond,errcode) \
---
>  AssertHcond,errcode) \
254c254
< #define AssertH(cond,errcode) \
---
> define cond,errcode) \
254c254
< #define AssertH(cond,errcode) \
---
>  cond,errcode) \
254c254
< #define AssertH(cond,errcode) \
---
> # AssertH(cond,errcode) \
254c254
< #define AssertH(cond,errcode) \
---
> # (cond,errcode) \
254c254
< #define AssertH(cond,errcode) \
---
> # AssertHcond,errcode) \
254c254
< #define AssertH(cond,errcode) \
---
> # cond,errcode) \
254c254
< #define AssertH(cond,errcode) \
---
> # AssertH(,errcode) \
254c254
< #define AssertH(cond,errcode) \
---
> # (,errcode) \
254c254
< #define AssertH(cond,errcode) \
---
> # AssertH,errcode) \
254c254
< #define AssertH(cond,errcode) \
---
> # ,errcode) \
254c254
< #define AssertH(cond,errcode) \
---
> #define (cond,errcode) \
254c254
< #define AssertH(cond,errcode) \
---
> #define cond,errcode) \
254c254
< #define AssertH(cond,errcode) \
---
> #define (,errcode) \
254c254
< #define AssertH(cond,errcode) \
---
> #define ,errcode) \
254c254
< #define AssertH(cond,errcode) \
---
> #define (conderrcode) \
254c254
< #define AssertH(cond,errcode) \
---
> #define conderrcode) \
(85.2 %, 30395 bytes)
254c254
< #define cond,errcode) \
---
> #define errcode) \
254c254
< #define cond,errcode) \
---
> #define ,) \
254c254
< #define cond,errcode) \
---
> #define ) \
254c254
< #define cond,errcode) \
---
> #define ,errcode \
254c254
< #define cond,errcode) \
---
> #define errcode \
(85.2 %, 30390 bytes)
254c254
< #define errcode) \
---
> #define  \
254c254
< #define errcode) \
---
> #define ) 
254c254
< #define errcode) \
---
> #define  
254c254
< #define errcode) \
---
> #define ) \
256c256
< #define AssertD(cond,msg) \
---
> define AssertD(cond,msg) \
254c254
< #define errcode) \
---
> #define  \
256c256
< #define AssertD(cond,msg) \
---
> define AssertD(cond,msg) \
254c254
< #define errcode) \
---
> #define ) 
256c256
< #define AssertD(cond,msg) \
---
> define AssertD(cond,msg) \
254c254
< #define errcode) \
---
> #define  
256c256
< #define AssertD(cond,msg) \
---
> define AssertD(cond,msg) \
254c254
< #define errcode) \
---
> #define errcode \
254c254
< #define errcode) \
---
> #define errcode 
254c254
< #define errcode) \
---
> #define errcode \
256c256
< #define AssertD(cond,msg) \
---
> define AssertD(cond,msg) \
(85.2 %, 30389 bytes)
254c254
< #define errcode \
---
> #define errcode 
254c254
< #define errcode \
---
> #define errcode 
256c256
< #define AssertD(cond,msg) \
---
> define AssertD(cond,msg) \
254c254
< #define errcode \
---
> #define errcode 
256c256
< #define AssertD(cond,msg) \
---
> # AssertD(cond,msg) \
254c254
< #define errcode \
---
> #define errcode 
256c256
< #define AssertD(cond,msg) \
---
>  AssertD(cond,msg) \
254c254
< #define errcode \
---
> #define errcode 
256c256
< #define AssertD(cond,msg) \
---
> #define (cond,msg) \
254c254
< #define errcode \
---
> #define errcode 
256c256
< #define AssertD(cond,msg) \
---
> define (cond,msg) \
254c254
< #define errcode \
---
> #define errcode 
256c256
< #define AssertD(cond,msg) \
---
> # (cond,msg) \
254c254
< #define errcode \
---
> #define errcode 
256c256
< #define AssertD(cond,msg) \
---
>  (cond,msg) \
256c256
< #define AssertD(cond,msg) \
---
> define AssertD(cond,msg) \
256c256
< #define AssertD(cond,msg) \
---
>  AssertD(cond,msg) \
256c256
< #define AssertD(cond,msg) \
---
> define (cond,msg) \
256c256
< #define AssertD(cond,msg) \
---
>  (cond,msg) \
256c256
< #define AssertD(cond,msg) \
---
> define AssertDcond,msg) \
256c256
< #define AssertD(cond,msg) \
---
>  AssertDcond,msg) \
256c256
< #define AssertD(cond,msg) \
---
> define cond,msg) \
256c256
< #define AssertD(cond,msg) \
---
>  cond,msg) \
(85.2 %, 30388 bytes)
256c256
< #define AssertD(cond,msg) \
---
> define AssertD(cond,msg) \
256c256
< #define AssertD(cond,msg) \
---
>  AssertD(cond,msg) \
256c256
< #define AssertD(cond,msg) \
---
> define (cond,msg) \
256c256
< #define AssertD(cond,msg) \
---
>  (cond,msg) \
256c256
< #define AssertD(cond,msg) \
---
> define AssertDcond,msg) \
256c256
< #define AssertD(cond,msg) \
---
>  AssertDcond,msg) \
256c256
< #define AssertD(cond,msg) \
---
> define cond,msg) \
256c256
< #define AssertD(cond,msg) \
---
>  cond,msg) \
256c256
< #define AssertD(cond,msg) \
---
> # AssertD(cond,msg) \
256c256
< #define AssertD(cond,msg) \
---
> # (cond,msg) \
256c256
< #define AssertD(cond,msg) \
---
> # AssertDcond,msg) \
256c256
< #define AssertD(cond,msg) \
---
> # cond,msg) \
256c256
< #define AssertD(cond,msg) \
---
> # AssertD(,msg) \
256c256
< #define AssertD(cond,msg) \
---
> # (,msg) \
256c256
< #define AssertD(cond,msg) \
---
> # AssertD,msg) \
256c256
< #define AssertD(cond,msg) \
---
> # ,msg) \
256c256
< #define AssertD(cond,msg) \
---
> #define (cond,msg) \
256c256
< #define AssertD(cond,msg) \
---
> #define cond,msg) \
256c256
< #define AssertD(cond,msg) \
---
> #define (,msg) \
256c256
< #define AssertD(cond,msg) \
---
> #define ,msg) \
256c256
< #define AssertD(cond,msg) \
---
> #define (condmsg) \
256c256
< #define AssertD(cond,msg) \
---
> #define condmsg) \
(85.2 %, 30380 bytes)
256c256
< #define cond,msg) \
---
> #define msg) \
256c256
< #define cond,msg) \
---
> #define ,) \
256c256
< #define cond,msg) \
---
> #define ) \
256c256
< #define cond,msg) \
---
> #define ,msg \
256c256
< #define cond,msg) \
---
> #define msg \
256c256
< #define cond,msg) \
---
> #define , \
256c256
< #define cond,msg) \
---
> #define  \
256c256
< #define cond,msg) \
---
> #define condmsg) \
(85.2 %, 30375 bytes)
256c256
< #define msg) \
---
> #define  \
256c256
< #define msg) \
---
> #define ) 
256c256
< #define msg) \
---
> #define  
256c256
< #define msg) \
---
> #define ) \
258c258
< #define VPrintf0(zf) \
---
> define VPrintf0(zf) \
256c256
< #define msg) \
---
> #define  \
258c258
< #define VPrintf0(zf) \
---
> define VPrintf0(zf) \
256c256
< #define msg) \
---
> #define ) 
258c258
< #define VPrintf0(zf) \
---
> define VPrintf0(zf) \
256c256
< #define msg) \
---
> #define  
258c258
< #define VPrintf0(zf) \
---
> define VPrintf0(zf) \
256c256
< #define msg) \
---
> #define msg \
256c256
< #define msg) \
---
> #define msg 
(85.2 %, 30374 bytes)
256c256
< #define msg \
---
> #define msg 
256c256
< #define msg \
---
> #define msg 
258c258
< #define VPrintf0(zf) \
---
> define VPrintf0(zf) \
256c256
< #define msg \
---
> #define msg 
258c258
< #define VPrintf0(zf) \
---
> # VPrintf0(zf) \
256c256
< #define msg \
---
> #define msg 
258c258
< #define VPrintf0(zf) \
---
>  VPrintf0(zf) \
256c256
< #define msg \
---
> #define msg 
258c258
< #define VPrintf0(zf) \
---
> #define (zf) \
256c256
< #define msg \
---
> #define msg 
258c258
< #define VPrintf0(zf) \
---
> define (zf) \
256c256
< #define msg \
---
> #define msg 
258c258
< #define VPrintf0(zf) \
---
> # (zf) \
256c256
< #define msg \
---
> #define msg 
258c258
< #define VPrintf0(zf) \
---
>  (zf) \
258c258
< #define VPrintf0(zf) \
---
> define VPrintf0(zf) \
258c258
< #define VPrintf0(zf) \
---
>  VPrintf0(zf) \
258c258
< #define VPrintf0(zf) \
---
> define (zf) \
258c258
< #define VPrintf0(zf) \
---
>  (zf) \
258c258
< #define VPrintf0(zf) \
---
> define VPrintf0zf) \
258c258
< #define VPrintf0(zf) \
---
>  VPrintf0zf) \
258c258
< #define VPrintf0(zf) \
---
> define zf) \
258c258
< #define VPrintf0(zf) \
---
>  zf) \
258c258
< #define VPrintf0(zf) \
---
> # VPrintf0(zf) \
258c258
< #define VPrintf0(zf) \
---
> # (zf) \
(85.2 %, 30373 bytes)
258c258
< #define VPrintf0(zf) \
---
> define VPrintf0(zf) \
258c258
< #define VPrintf0(zf) \
---
>  VPrintf0(zf) \
258c258
< #define VPrintf0(zf) \
---
> define (zf) \
258c258
< #define VPrintf0(zf) \
---
>  (zf) \
258c258
< #define VPrintf0(zf) \
---
> define VPrintf0zf) \
258c258
< #define VPrintf0(zf) \
---
>  VPrintf0zf) \
258c258
< #define VPrintf0(zf) \
---
> define zf) \
258c258
< #define VPrintf0(zf) \
---
>  zf) \
258c258
< #define VPrintf0(zf) \
---
> # VPrintf0(zf) \
258c258
< #define VPrintf0(zf) \
---
> # (zf) \
258c258
< #define VPrintf0(zf) \
---
> # VPrintf0zf) \
258c258
< #define VPrintf0(zf) \
---
> # zf) \
258c258
< #define VPrintf0(zf) \
---
> # VPrintf0() \
258c258
< #define VPrintf0(zf) \
---
> # () \
258c258
< #define VPrintf0(zf) \
---
> # VPrintf0) \
258c258
< #define VPrintf0(zf) \
---
> # ) \
258c258
< #define VPrintf0(zf) \
---
> #define (zf) \
258c258
< #define VPrintf0(zf) \
---
> #define zf) \
258c258
< #define VPrintf0(zf) \
---
> #define () \
258c258
< #define VPrintf0(zf) \
---
> #define ) \
258c258
< #define VPrintf0(zf) \
---
> #define (zf \
258c258
< #define VPrintf0(zf) \
---
> #define zf \
258c258
< #define VPrintf0(zf) \
---
> #define ( \
258c258
< #define VPrintf0(zf) \
---
> #define  \
(85.2 %, 30364 bytes)
258c258
< #define zf) \
---
> #define  \
258c258
< #define zf) \
---
> #define ) 
258c258
< #define zf) \
---
> #define  
258,259c258,259
< #define zf) \
<    fprintf(stderr,zf)
---
> #define ) \
>    (stderr,zf)
258,259c258,259
< #define zf) \
<    fprintf(stderr,zf)
---
> #define  \
>    (stderr,zf)
258,259c258,259
< #define zf) \
<    fprintf(stderr,zf)
---
> #define ) 
>    (stderr,zf)
258,259c258,259
< #define zf) \
<    fprintf(stderr,zf)
---
> #define  
>    (stderr,zf)
258c258
< #define zf) \
---
> #define zf \
(85.2 %, 30361 bytes)
258,259c258,259
< #define  \
<    fprintf(stderr,zf)
---
> #define  
>    (stderr,zf)
258,259c258,259
< #define  \
<    fprintf(stderr,zf)
---
> #define  
>    fprintfstderr,zf)
258,259c258,259
< #define  \
<    fprintf(stderr,zf)
---
> #define  
>    stderr,zf)
258,259c258,259
< #define  \
<    fprintf(stderr,zf)
---
> #define  
>    fprintf(,zf)
258,259c258,259
< #define  \
<    fprintf(stderr,zf)
---
> #define  
>    (,zf)
258,259c258,259
< #define  \
<    fprintf(stderr,zf)
---
> #define  
>    fprintf,zf)
258,259c258,259
< #define  \
<    fprintf(stderr,zf)
---
> #define  
>    ,zf)
259c259
<    fprintf(stderr,zf)
---
>    (stderr,zf)
259c259
<    fprintf(stderr,zf)
---
>    stderr,zf)
259c259
<    fprintf(stderr,zf)
---
>    (,zf)
259c259
<    fprintf(stderr,zf)
---
>    ,zf)
259c259
<    fprintf(stderr,zf)
---
>    (stderrzf)
259c259
<    fprintf(stderr,zf)
---
>    stderrzf)
(85.2 %, 30353 bytes)
259c259
<    stderr,zf)
---
>    zf)
259c259
<    stderr,zf)
---
>    ,)
259c259
<    stderr,zf)
---
>    )
259c259
<    stderr,zf)
---
>    ,zf
259c259
<    stderr,zf)
---
>    zf
259c259
<    stderr,zf)
---
>    ,
259c259
<    stderr,zf)
---
>    
259c259
<    stderr,zf)
---
>    stderrzf)
(85.2 %, 30346 bytes)
259c259
<    zf)
---
>    
259,260c259,260
<    zf)
< #define VPrintf1(zf,za1) \
---
>    )
> define VPrintf1(zf,za1) \
259,260c259,260
<    zf)
< #define VPrintf1(zf,za1) \
---
>    
> define VPrintf1(zf,za1) \
259,260c259,260
<    zf)
< #define VPrintf1(zf,za1) \
---
>    )
> # VPrintf1(zf,za1) \
259,260c259,260
<    zf)
< #define VPrintf1(zf,za1) \
---
>    
> # VPrintf1(zf,za1) \
259,260c259,260
<    zf)
< #define VPrintf1(zf,za1) \
---
>    )
>  VPrintf1(zf,za1) \
259,260c259,260
<    zf)
< #define VPrintf1(zf,za1) \
---
>    
>  VPrintf1(zf,za1) \
259c259
<    zf)
---
>    zf
259,260c259,260
<    zf)
< #define VPrintf1(zf,za1) \
---
>    zf
> define VPrintf1(zf,za1) \
259,260c259,260
<    zf)
< #define VPrintf1(zf,za1) \
---
>    zf
> # VPrintf1(zf,za1) \
259,260c259,260
<    zf)
< #define VPrintf1(zf,za1) \
---
>    zf
>  VPrintf1(zf,za1) \
259,260c259,260
<    zf)
< #define VPrintf1(zf,za1) \
---
>    zf
> #define (zf,za1) \
259,260c259,260
<    zf)
< #define VPrintf1(zf,za1) \
---
>    zf
> define (zf,za1) \
259,260c259,260
<    zf)
< #define VPrintf1(zf,za1) \
---
>    zf
> # (zf,za1) \
259,260c259,260
<    zf)
< #define VPrintf1(zf,za1) \
---
>    zf
>  (zf,za1) \
260c260
< #define VPrintf1(zf,za1) \
---
> define VPrintf1(zf,za1) \
260c260
< #define VPrintf1(zf,za1) \
---
>  VPrintf1(zf,za1) \
260c260
< #define VPrintf1(zf,za1) \
---
> define (zf,za1) \
260c260
< #define VPrintf1(zf,za1) \
---
>  (zf,za1) \
260c260
< #define VPrintf1(zf,za1) \
---
> define VPrintf1zf,za1) \
260c260
< #define VPrintf1(zf,za1) \
---
>  VPrintf1zf,za1) \
260c260
< #define VPrintf1(zf,za1) \
---
> define zf,za1) \
260c260
< #define VPrintf1(zf,za1) \
---
>  zf,za1) \
260c260
< #define VPrintf1(zf,za1) \
---
> # VPrintf1(zf,za1) \
260c260
< #define VPrintf1(zf,za1) \
---
> # (zf,za1) \
(85.2 %, 30345 bytes)
260c260
< #define VPrintf1(zf,za1) \
---
> define VPrintf1(zf,za1) \
260c260
< #define VPrintf1(zf,za1) \
---
>  VPrintf1(zf,za1) \
260c260
< #define VPrintf1(zf,za1) \
---
> define (zf,za1) \
260c260
< #define VPrintf1(zf,za1) \
---
>  (zf,za1) \
260c260
< #define VPrintf1(zf,za1) \
---
> define VPrintf1zf,za1) \
260c260
< #define VPrintf1(zf,za1) \
---
>  VPrintf1zf,za1) \
260c260
< #define VPrintf1(zf,za1) \
---
> define zf,za1) \
260c260
< #define VPrintf1(zf,za1) \
---
>  zf,za1) \
260c260
< #define VPrintf1(zf,za1) \
---
> # VPrintf1(zf,za1) \
260c260
< #define VPrintf1(zf,za1) \
---
> # (zf,za1) \
260c260
< #define VPrintf1(zf,za1) \
---
> # VPrintf1zf,za1) \
260c260
< #define VPrintf1(zf,za1) \
---
> # zf,za1) \
260c260
< #define VPrintf1(zf,za1) \
---
> # VPrintf1(,za1) \
260c260
< #define VPrintf1(zf,za1) \
---
> # (,za1) \
260c260
< #define VPrintf1(zf,za1) \
---
> # VPrintf1,za1) \
260c260
< #define VPrintf1(zf,za1) \
---
> # ,za1) \
260c260
< #define VPrintf1(zf,za1) \
---
> #define (zf,za1) \
260c260
< #define VPrintf1(zf,za1) \
---
> #define zf,za1) \
260c260
< #define VPrintf1(zf,za1) \
---
> #define (,za1) \
260c260
< #define VPrintf1(zf,za1) \
---
> #define ,za1) \
260c260
< #define VPrintf1(zf,za1) \
---
> #define (zfza1) \
260c260
< #define VPrintf1(zf,za1) \
---
> #define zfza1) \
(85.2 %, 30336 bytes)
260c260
< #define zf,za1) \
---
> #define za1) \
260c260
< #define zf,za1) \
---
> #define ,) \
260c260
< #define zf,za1) \
---
> #define ) \
260c260
< #define zf,za1) \
---
> #define ,za1 \
260c260
< #define zf,za1) \
---
> #define za1 \
(85.2 %, 30333 bytes)
260c260
< #define za1) \
---
> #define  \
260c260
< #define za1) \
---
> #define ) 
260c260
< #define za1) \
---
> #define  
260,261c260,261
< #define za1) \
<    fprintf(stderr,zf,za1)
---
> #define ) \
>    (stderr,zf,za1)
260,261c260,261
< #define za1) \
<    fprintf(stderr,zf,za1)
---
> #define  \
>    (stderr,zf,za1)
260,261c260,261
< #define za1) \
<    fprintf(stderr,zf,za1)
---
> #define ) 
>    (stderr,zf,za1)
260,261c260,261
< #define za1) \
<    fprintf(stderr,zf,za1)
---
> #define  
>    (stderr,zf,za1)
260c260
< #define za1) \
---
> #define za1 \
(85.2 %, 30329 bytes)
260,261c260,261
< #define  \
<    fprintf(stderr,zf,za1)
---
> #define  
>    (stderr,zf,za1)
260,261c260,261
< #define  \
<    fprintf(stderr,zf,za1)
---
> #define  
>    fprintfstderr,zf,za1)
260,261c260,261
< #define  \
<    fprintf(stderr,zf,za1)
---
> #define  
>    stderr,zf,za1)
260,261c260,261
< #define  \
<    fprintf(stderr,zf,za1)
---
> #define  
>    fprintf(,zf,za1)
260,261c260,261
< #define  \
<    fprintf(stderr,zf,za1)
---
> #define  
>    (,zf,za1)
260,261c260,261
< #define  \
<    fprintf(stderr,zf,za1)
---
> #define  
>    fprintf,zf,za1)
260,261c260,261
< #define  \
<    fprintf(stderr,zf,za1)
---
> #define  
>    ,zf,za1)
261c261
<    fprintf(stderr,zf,za1)
---
>    (stderr,zf,za1)
261c261
<    fprintf(stderr,zf,za1)
---
>    stderr,zf,za1)
261c261
<    fprintf(stderr,zf,za1)
---
>    (,zf,za1)
261c261
<    fprintf(stderr,zf,za1)
---
>    ,zf,za1)
261c261
<    fprintf(stderr,zf,za1)
---
>    (stderrzf,za1)
261c261
<    fprintf(stderr,zf,za1)
---
>    stderrzf,za1)
(85.2 %, 30321 bytes)
261c261
<    stderr,zf,za1)
---
>    zf,za1)
261c261
<    stderr,zf,za1)
---
>    ,,za1)
261c261
<    stderr,zf,za1)
---
>    ,za1)
261c261
<    stderr,zf,za1)
---
>    ,zfza1)
261c261
<    stderr,zf,za1)
---
>    zfza1)
(85.2 %, 30314 bytes)
261c261
<    zf,za1)
---
>    za1)
261c261
<    zf,za1)
---
>    ,)
261c261
<    zf,za1)
---
>    )
261c261
<    zf,za1)
---
>    ,za1
261c261
<    zf,za1)
---
>    za1
(85.2 %, 30311 bytes)
261c261
<    za1)
---
>    
261,262c261,262
<    za1)
< #define VPrintf2(zf,za1,za2) \
---
>    )
> define VPrintf2(zf,za1,za2) \
261,262c261,262
<    za1)
< #define VPrintf2(zf,za1,za2) \
---
>    
> define VPrintf2(zf,za1,za2) \
261,262c261,262
<    za1)
< #define VPrintf2(zf,za1,za2) \
---
>    )
> # VPrintf2(zf,za1,za2) \
261,262c261,262
<    za1)
< #define VPrintf2(zf,za1,za2) \
---
>    
> # VPrintf2(zf,za1,za2) \
261,262c261,262
<    za1)
< #define VPrintf2(zf,za1,za2) \
---
>    )
>  VPrintf2(zf,za1,za2) \
261,262c261,262
<    za1)
< #define VPrintf2(zf,za1,za2) \
---
>    
>  VPrintf2(zf,za1,za2) \
261c261
<    za1)
---
>    za1
261,262c261,262
<    za1)
< #define VPrintf2(zf,za1,za2) \
---
>    za1
> define VPrintf2(zf,za1,za2) \
261,262c261,262
<    za1)
< #define VPrintf2(zf,za1,za2) \
---
>    za1
> # VPrintf2(zf,za1,za2) \
261,262c261,262
<    za1)
< #define VPrintf2(zf,za1,za2) \
---
>    za1
>  VPrintf2(zf,za1,za2) \
261,262c261,262
<    za1)
< #define VPrintf2(zf,za1,za2) \
---
>    za1
> #define (zf,za1,za2) \
261,262c261,262
<    za1)
< #define VPrintf2(zf,za1,za2) \
---
>    za1
> define (zf,za1,za2) \
261,262c261,262
<    za1)
< #define VPrintf2(zf,za1,za2) \
---
>    za1
> # (zf,za1,za2) \
261,262c261,262
<    za1)
< #define VPrintf2(zf,za1,za2) \
---
>    za1
>  (zf,za1,za2) \
262c262
< #define VPrintf2(zf,za1,za2) \
---
> define VPrintf2(zf,za1,za2) \
262c262
< #define VPrintf2(zf,za1,za2) \
---
>  VPrintf2(zf,za1,za2) \
262c262
< #define VPrintf2(zf,za1,za2) \
---
> define (zf,za1,za2) \
262c262
< #define VPrintf2(zf,za1,za2) \
---
>  (zf,za1,za2) \
262c262
< #define VPrintf2(zf,za1,za2) \
---
> define VPrintf2zf,za1,za2) \
262c262
< #define VPrintf2(zf,za1,za2) \
---
>  VPrintf2zf,za1,za2) \
262c262
< #define VPrintf2(zf,za1,za2) \
---
> define zf,za1,za2) \
262c262
< #define VPrintf2(zf,za1,za2) \
---
>  zf,za1,za2) \
262c262
< #define VPrintf2(zf,za1,za2) \
---
> # VPrintf2(zf,za1,za2) \
262c262
< #define VPrintf2(zf,za1,za2) \
---
> # (zf,za1,za2) \
(85.2 %, 30310 bytes)
262c262
< #define VPrintf2(zf,za1,za2) \
---
> define VPrintf2(zf,za1,za2) \
262c262
< #define VPrintf2(zf,za1,za2) \
---
>  VPrintf2(zf,za1,za2) \
262c262
< #define VPrintf2(zf,za1,za2) \
---
> define (zf,za1,za2) \
262c262
< #define VPrintf2(zf,za1,za2) \
---
>  (zf,za1,za2) \
262c262
< #define VPrintf2(zf,za1,za2) \
---
> define VPrintf2zf,za1,za2) \
262c262
< #define VPrintf2(zf,za1,za2) \
---
>  VPrintf2zf,za1,za2) \
262c262
< #define VPrintf2(zf,za1,za2) \
---
> define zf,za1,za2) \
262c262
< #define VPrintf2(zf,za1,za2) \
---
>  zf,za1,za2) \
262c262
< #define VPrintf2(zf,za1,za2) \
---
> # VPrintf2(zf,za1,za2) \
262c262
< #define VPrintf2(zf,za1,za2) \
---
> # (zf,za1,za2) \
262c262
< #define VPrintf2(zf,za1,za2) \
---
> # VPrintf2zf,za1,za2) \
262c262
< #define VPrintf2(zf,za1,za2) \
---
> # zf,za1,za2) \
262c262
< #define VPrintf2(zf,za1,za2) \
---
> # VPrintf2(,za1,za2) \
262c262
< #define VPrintf2(zf,za1,za2) \
---
> # (,za1,za2) \
262c262
< #define VPrintf2(zf,za1,za2) \
---
> # VPrintf2,za1,za2) \
262c262
< #define VPrintf2(zf,za1,za2) \
---
> # ,za1,za2) \
262c262
< #define VPrintf2(zf,za1,za2) \
---
> #define (zf,za1,za2) \
262c262
< #define VPrintf2(zf,za1,za2) \
---
> #define zf,za1,za2) \
262c262
< #define VPrintf2(zf,za1,za2) \
---
> #define (,za1,za2) \
262c262
< #define VPrintf2(zf,za1,za2) \
---
> #define ,za1,za2) \
262c262
< #define VPrintf2(zf,za1,za2) \
---
> #define (zfza1,za2) \
262c262
< #define VPrintf2(zf,za1,za2) \
---
> #define zfza1,za2) \
(85.2 %, 30301 bytes)
262c262
< #define zf,za1,za2) \
---
> #define za1,za2) \
262c262
< #define zf,za1,za2) \
---
> #define ,,za2) \
262c262
< #define zf,za1,za2) \
---
> #define ,za2) \
262c262
< #define zf,za1,za2) \
---
> #define ,za1za2) \
262c262
< #define zf,za1,za2) \
---
> #define za1za2) \
(85.2 %, 30298 bytes)
262c262
< #define za1,za2) \
---
> #define za2) \
262c262
< #define za1,za2) \
---
> #define ,) \
262c262
< #define za1,za2) \
---
> #define ) \
262c262
< #define za1,za2) \
---
> #define ,za2 \
262c262
< #define za1,za2) \
---
> #define za2 \
(85.2 %, 30294 bytes)
262c262
< #define za2) \
---
> #define  \
262c262
< #define za2) \
---
> #define ) 
262c262
< #define za2) \
---
> #define  
262,263c262,263
< #define za2) \
<    fprintf(stderr,zf,za1,za2)
---
> #define ) \
>    (stderr,zf,za1,za2)
262,263c262,263
< #define za2) \
<    fprintf(stderr,zf,za1,za2)
---
> #define  \
>    (stderr,zf,za1,za2)
262,263c262,263
< #define za2) \
<    fprintf(stderr,zf,za1,za2)
---
> #define ) 
>    (stderr,zf,za1,za2)
262,263c262,263
< #define za2) \
<    fprintf(stderr,zf,za1,za2)
---
> #define  
>    (stderr,zf,za1,za2)
262c262
< #define za2) \
---
> #define za2 \
(85.2 %, 30290 bytes)
262,263c262,263
< #define  \
<    fprintf(stderr,zf,za1,za2)
---
> #define  
>    (stderr,zf,za1,za2)
262,263c262,263
< #define  \
<    fprintf(stderr,zf,za1,za2)
---
> #define  
>    fprintfstderr,zf,za1,za2)
262,263c262,263
< #define  \
<    fprintf(stderr,zf,za1,za2)
---
> #define  
>    stderr,zf,za1,za2)
262,263c262,263
< #define  \
<    fprintf(stderr,zf,za1,za2)
---
> #define  
>    fprintf(,zf,za1,za2)
262,263c262,263
< #define  \
<    fprintf(stderr,zf,za1,za2)
---
> #define  
>    (,zf,za1,za2)
262,263c262,263
< #define  \
<    fprintf(stderr,zf,za1,za2)
---
> #define  
>    fprintf,zf,za1,za2)
262,263c262,263
< #define  \
<    fprintf(stderr,zf,za1,za2)
---
> #define  
>    ,zf,za1,za2)
263c263
<    fprintf(stderr,zf,za1,za2)
---
>    (stderr,zf,za1,za2)
263c263
<    fprintf(stderr,zf,za1,za2)
---
>    stderr,zf,za1,za2)
263c263
<    fprintf(stderr,zf,za1,za2)
---
>    (,zf,za1,za2)
263c263
<    fprintf(stderr,zf,za1,za2)
---
>    ,zf,za1,za2)
263c263
<    fprintf(stderr,zf,za1,za2)
---
>    (stderrzf,za1,za2)
263c263
<    fprintf(stderr,zf,za1,za2)
---
>    stderrzf,za1,za2)
(85.2 %, 30282 bytes)
263c263
<    stderr,zf,za1,za2)
---
>    zf,za1,za2)
263c263
<    stderr,zf,za1,za2)
---
>    ,,za1,za2)
263c263
<    stderr,zf,za1,za2)
---
>    ,za1,za2)
263c263
<    stderr,zf,za1,za2)
---
>    ,zfza1,za2)
263c263
<    stderr,zf,za1,za2)
---
>    zfza1,za2)
(85.2 %, 30275 bytes)
263c263
<    zf,za1,za2)
---
>    za1,za2)
263c263
<    zf,za1,za2)
---
>    ,,za2)
263c263
<    zf,za1,za2)
---
>    ,za2)
263c263
<    zf,za1,za2)
---
>    ,za1za2)
263c263
<    zf,za1,za2)
---
>    za1za2)
(85.2 %, 30272 bytes)
263c263
<    za1,za2)
---
>    za2)
263c263
<    za1,za2)
---
>    ,)
263c263
<    za1,za2)
---
>    )
263c263
<    za1,za2)
---
>    ,za2
263c263
<    za1,za2)
---
>    za2
(85.2 %, 30268 bytes)
263c263
<    za2)
---
>    
263,264c263,264
<    za2)
< #define VPrintf3(zf,za1,za2,za3) \
---
>    )
> define VPrintf3(zf,za1,za2,za3) \
263,264c263,264
<    za2)
< #define VPrintf3(zf,za1,za2,za3) \
---
>    
> define VPrintf3(zf,za1,za2,za3) \
263,264c263,264
<    za2)
< #define VPrintf3(zf,za1,za2,za3) \
---
>    )
> # VPrintf3(zf,za1,za2,za3) \
263,264c263,264
<    za2)
< #define VPrintf3(zf,za1,za2,za3) \
---
>    
> # VPrintf3(zf,za1,za2,za3) \
263,264c263,264
<    za2)
< #define VPrintf3(zf,za1,za2,za3) \
---
>    )
>  VPrintf3(zf,za1,za2,za3) \
263,264c263,264
<    za2)
< #define VPrintf3(zf,za1,za2,za3) \
---
>    
>  VPrintf3(zf,za1,za2,za3) \
263c263
<    za2)
---
>    za2
263,264c263,264
<    za2)
< #define VPrintf3(zf,za1,za2,za3) \
---
>    za2
> define VPrintf3(zf,za1,za2,za3) \
263,264c263,264
<    za2)
< #define VPrintf3(zf,za1,za2,za3) \
---
>    za2
> # VPrintf3(zf,za1,za2,za3) \
263,264c263,264
<    za2)
< #define VPrintf3(zf,za1,za2,za3) \
---
>    za2
>  VPrintf3(zf,za1,za2,za3) \
263,264c263,264
<    za2)
< #define VPrintf3(zf,za1,za2,za3) \
---
>    za2
> #define (zf,za1,za2,za3) \
263,264c263,264
<    za2)
< #define VPrintf3(zf,za1,za2,za3) \
---
>    za2
> define (zf,za1,za2,za3) \
263,264c263,264
<    za2)
< #define VPrintf3(zf,za1,za2,za3) \
---
>    za2
> # (zf,za1,za2,za3) \
263,264c263,264
<    za2)
< #define VPrintf3(zf,za1,za2,za3) \
---
>    za2
>  (zf,za1,za2,za3) \
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
> define VPrintf3(zf,za1,za2,za3) \
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
>  VPrintf3(zf,za1,za2,za3) \
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
> define (zf,za1,za2,za3) \
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
>  (zf,za1,za2,za3) \
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
> define VPrintf3zf,za1,za2,za3) \
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
>  VPrintf3zf,za1,za2,za3) \
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
> define zf,za1,za2,za3) \
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
>  zf,za1,za2,za3) \
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
> # VPrintf3(zf,za1,za2,za3) \
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
> # (zf,za1,za2,za3) \
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
> # VPrintf3zf,za1,za2,za3) \
(85.2 %, 30267 bytes)
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
> define VPrintf3(zf,za1,za2,za3) \
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
>  VPrintf3(zf,za1,za2,za3) \
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
> define (zf,za1,za2,za3) \
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
>  (zf,za1,za2,za3) \
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
> define VPrintf3zf,za1,za2,za3) \
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
>  VPrintf3zf,za1,za2,za3) \
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
> define zf,za1,za2,za3) \
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
>  zf,za1,za2,za3) \
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
> # VPrintf3(zf,za1,za2,za3) \
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
> # (zf,za1,za2,za3) \
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
> # VPrintf3zf,za1,za2,za3) \
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
> # zf,za1,za2,za3) \
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
> # VPrintf3(,za1,za2,za3) \
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
> # (,za1,za2,za3) \
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
> # VPrintf3,za1,za2,za3) \
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
> # ,za1,za2,za3) \
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
> #define (zf,za1,za2,za3) \
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
> #define zf,za1,za2,za3) \
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
> #define (,za1,za2,za3) \
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
> #define ,za1,za2,za3) \
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
> #define (zfza1,za2,za3) \
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
> #define zfza1,za2,za3) \
(85.2 %, 30258 bytes)
264c264
< #define zf,za1,za2,za3) \
---
> #define za1,za2,za3) \
264c264
< #define zf,za1,za2,za3) \
---
> #define ,,za2,za3) \
264c264
< #define zf,za1,za2,za3) \
---
> #define ,za2,za3) \
264c264
< #define zf,za1,za2,za3) \
---
> #define ,za1za2,za3) \
264c264
< #define zf,za1,za2,za3) \
---
> #define za1za2,za3) \
(85.2 %, 30255 bytes)
264c264
< #define za1,za2,za3) \
---
> #define za2,za3) \
264c264
< #define za1,za2,za3) \
---
> #define ,,za3) \
264c264
< #define za1,za2,za3) \
---
> #define ,za3) \
264c264
< #define za1,za2,za3) \
---
> #define ,za2za3) \
264c264
< #define za1,za2,za3) \
---
> #define za2za3) \
(85.2 %, 30251 bytes)
264c264
< #define za2,za3) \
---
> #define za3) \
264c264
< #define za2,za3) \
---
> #define ,) \
264c264
< #define za2,za3) \
---
> #define ) \
264c264
< #define za2,za3) \
---
> #define ,za3 \
264c264
< #define za2,za3) \
---
> #define za3 \
(85.2 %, 30247 bytes)
264c264
< #define za3) \
---
> #define  \
264c264
< #define za3) \
---
> #define ) 
264c264
< #define za3) \
---
> #define  
264,265c264,265
< #define za3) \
<    fprintf(stderr,zf,za1,za2,za3)
---
> #define ) \
>    (stderr,zf,za1,za2,za3)
264,265c264,265
< #define za3) \
<    fprintf(stderr,zf,za1,za2,za3)
---
> #define  \
>    (stderr,zf,za1,za2,za3)
264,265c264,265
< #define za3) \
<    fprintf(stderr,zf,za1,za2,za3)
---
> #define ) 
>    (stderr,zf,za1,za2,za3)
264,265c264,265
< #define za3) \
<    fprintf(stderr,zf,za1,za2,za3)
---
> #define  
>    (stderr,zf,za1,za2,za3)
264c264
< #define za3) \
---
> #define za3 \
(85.2 %, 30243 bytes)
264,265c264,265
< #define  \
<    fprintf(stderr,zf,za1,za2,za3)
---
> #define  
>    (stderr,zf,za1,za2,za3)
264,265c264,265
< #define  \
<    fprintf(stderr,zf,za1,za2,za3)
---
> #define  
>    fprintfstderr,zf,za1,za2,za3)
264,265c264,265
< #define  \
<    fprintf(stderr,zf,za1,za2,za3)
---
> #define  
>    stderr,zf,za1,za2,za3)
264,265c264,265
< #define  \
<    fprintf(stderr,zf,za1,za2,za3)
---
> #define  
>    fprintf(,zf,za1,za2,za3)
264,265c264,265
< #define  \
<    fprintf(stderr,zf,za1,za2,za3)
---
> #define  
>    (,zf,za1,za2,za3)
264,265c264,265
< #define  \
<    fprintf(stderr,zf,za1,za2,za3)
---
> #define  
>    fprintf,zf,za1,za2,za3)
264,265c264,265
< #define  \
<    fprintf(stderr,zf,za1,za2,za3)
---
> #define  
>    ,zf,za1,za2,za3)
265c265
<    fprintf(stderr,zf,za1,za2,za3)
---
>    (stderr,zf,za1,za2,za3)
265c265
<    fprintf(stderr,zf,za1,za2,za3)
---
>    stderr,zf,za1,za2,za3)
265c265
<    fprintf(stderr,zf,za1,za2,za3)
---
>    (,zf,za1,za2,za3)
265c265
<    fprintf(stderr,zf,za1,za2,za3)
---
>    ,zf,za1,za2,za3)
265c265
<    fprintf(stderr,zf,za1,za2,za3)
---
>    (stderrzf,za1,za2,za3)
265c265
<    fprintf(stderr,zf,za1,za2,za3)
---
>    stderrzf,za1,za2,za3)
(85.2 %, 30235 bytes)
265c265
<    stderr,zf,za1,za2,za3)
---
>    zf,za1,za2,za3)
265c265
<    stderr,zf,za1,za2,za3)
---
>    ,,za1,za2,za3)
265c265
<    stderr,zf,za1,za2,za3)
---
>    ,za1,za2,za3)
265c265
<    stderr,zf,za1,za2,za3)
---
>    ,zfza1,za2,za3)
265c265
<    stderr,zf,za1,za2,za3)
---
>    zfza1,za2,za3)
(85.3 %, 30228 bytes)
265c265
<    zf,za1,za2,za3)
---
>    za1,za2,za3)
265c265
<    zf,za1,za2,za3)
---
>    ,,za2,za3)
265c265
<    zf,za1,za2,za3)
---
>    ,za2,za3)
265c265
<    zf,za1,za2,za3)
---
>    ,za1za2,za3)
265c265
<    zf,za1,za2,za3)
---
>    za1za2,za3)
(85.3 %, 30225 bytes)
265c265
<    za1,za2,za3)
---
>    za2,za3)
265c265
<    za1,za2,za3)
---
>    ,,za3)
265c265
<    za1,za2,za3)
---
>    ,za3)
265c265
<    za1,za2,za3)
---
>    ,za2za3)
265c265
<    za1,za2,za3)
---
>    za2za3)
(85.3 %, 30221 bytes)
265c265
<    za2,za3)
---
>    za3)
265c265
<    za2,za3)
---
>    ,)
265c265
<    za2,za3)
---
>    )
265c265
<    za2,za3)
---
>    ,za3
265c265
<    za2,za3)
---
>    za3
(85.3 %, 30217 bytes)
265c265
<    za3)
---
>    
265,266c265,266
<    za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
>    )
> define VPrintf4(zf,za1,za2,za3,za4) \
265,266c265,266
<    za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
>    
> define VPrintf4(zf,za1,za2,za3,za4) \
265,266c265,266
<    za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
>    )
> # VPrintf4(zf,za1,za2,za3,za4) \
265,266c265,266
<    za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
>    
> # VPrintf4(zf,za1,za2,za3,za4) \
265,266c265,266
<    za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
>    )
>  VPrintf4(zf,za1,za2,za3,za4) \
265,266c265,266
<    za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
>    
>  VPrintf4(zf,za1,za2,za3,za4) \
265c265
<    za3)
---
>    za3
265,266c265,266
<    za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
>    za3
> define VPrintf4(zf,za1,za2,za3,za4) \
265,266c265,266
<    za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
>    za3
> # VPrintf4(zf,za1,za2,za3,za4) \
265,266c265,266
<    za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
>    za3
>  VPrintf4(zf,za1,za2,za3,za4) \
265,266c265,266
<    za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
>    za3
> #define (zf,za1,za2,za3,za4) \
265,266c265,266
<    za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
>    za3
> define (zf,za1,za2,za3,za4) \
265,266c265,266
<    za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
>    za3
> # (zf,za1,za2,za3,za4) \
265,266c265,266
<    za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
>    za3
>  (zf,za1,za2,za3,za4) \
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> define VPrintf4(zf,za1,za2,za3,za4) \
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
>  VPrintf4(zf,za1,za2,za3,za4) \
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> define (zf,za1,za2,za3,za4) \
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
>  (zf,za1,za2,za3,za4) \
(85.3 %, 30216 bytes)
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> define VPrintf4(zf,za1,za2,za3,za4) \
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
>  VPrintf4(zf,za1,za2,za3,za4) \
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> define (zf,za1,za2,za3,za4) \
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
>  (zf,za1,za2,za3,za4) \
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> define VPrintf4zf,za1,za2,za3,za4) \
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
>  VPrintf4zf,za1,za2,za3,za4) \
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> define zf,za1,za2,za3,za4) \
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
>  zf,za1,za2,za3,za4) \
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> # VPrintf4(zf,za1,za2,za3,za4) \
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> # (zf,za1,za2,za3,za4) \
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> # VPrintf4zf,za1,za2,za3,za4) \
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> # zf,za1,za2,za3,za4) \
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> # VPrintf4(,za1,za2,za3,za4) \
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> # (,za1,za2,za3,za4) \
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> # VPrintf4,za1,za2,za3,za4) \
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> # ,za1,za2,za3,za4) \
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> #define (zf,za1,za2,za3,za4) \
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> #define zf,za1,za2,za3,za4) \
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> #define (,za1,za2,za3,za4) \
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> #define ,za1,za2,za3,za4) \
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> #define (zfza1,za2,za3,za4) \
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> #define zfza1,za2,za3,za4) \
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> #define (za1,za2,za3,za4) \
(85.3 %, 30207 bytes)
266c266
< #define zf,za1,za2,za3,za4) \
---
> #define za1,za2,za3,za4) \
266c266
< #define zf,za1,za2,za3,za4) \
---
> #define ,,za2,za3,za4) \
266c266
< #define zf,za1,za2,za3,za4) \
---
> #define ,za2,za3,za4) \
266c266
< #define zf,za1,za2,za3,za4) \
---
> #define ,za1za2,za3,za4) \
266c266
< #define zf,za1,za2,za3,za4) \
---
> #define za1za2,za3,za4) \
(85.3 %, 30204 bytes)
266c266
< #define za1,za2,za3,za4) \
---
> #define za2,za3,za4) \
266c266
< #define za1,za2,za3,za4) \
---
> #define ,,za3,za4) \
266c266
< #define za1,za2,za3,za4) \
---
> #define ,za3,za4) \
266c266
< #define za1,za2,za3,za4) \
---
> #define ,za2za3,za4) \
266c266
< #define za1,za2,za3,za4) \
---
> #define za2za3,za4) \
(85.3 %, 30200 bytes)
266c266
< #define za2,za3,za4) \
---
> #define za3,za4) \
266c266
< #define za2,za3,za4) \
---
> #define ,,za4) \
266c266
< #define za2,za3,za4) \
---
> #define ,za4) \
266c266
< #define za2,za3,za4) \
---
> #define ,za3za4) \
266c266
< #define za2,za3,za4) \
---
> #define za3za4) \
(85.3 %, 30196 bytes)
266c266
< #define za3,za4) \
---
> #define za4) \
266c266
< #define za3,za4) \
---
> #define ,) \
266c266
< #define za3,za4) \
---
> #define ) \
266c266
< #define za3,za4) \
---
> #define ,za4 \
266c266
< #define za3,za4) \
---
> #define za4 \
(85.3 %, 30192 bytes)
266c266
< #define za4) \
---
> #define  \
266c266
< #define za4) \
---
> #define ) 
266c266
< #define za4) \
---
> #define  
266,267c266,267
< #define za4) \
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
> #define ) \
>    (stderr,zf,za1,za2,za3,za4)
266,267c266,267
< #define za4) \
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
> #define  \
>    (stderr,zf,za1,za2,za3,za4)
266,267c266,267
< #define za4) \
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
> #define ) 
>    (stderr,zf,za1,za2,za3,za4)
266,267c266,267
< #define za4) \
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
> #define  
>    (stderr,zf,za1,za2,za3,za4)
266c266
< #define za4) \
---
> #define za4 \
(85.3 %, 30188 bytes)
266,267c266,267
< #define  \
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
> #define  
>    (stderr,zf,za1,za2,za3,za4)
266,267c266,267
< #define  \
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
> #define  
>    fprintfstderr,zf,za1,za2,za3,za4)
266,267c266,267
< #define  \
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
> #define  
>    stderr,zf,za1,za2,za3,za4)
266,267c266,267
< #define  \
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
> #define  
>    fprintf(,zf,za1,za2,za3,za4)
266,267c266,267
< #define  \
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
> #define  
>    (,zf,za1,za2,za3,za4)
266,267c266,267
< #define  \
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
> #define  
>    fprintf,zf,za1,za2,za3,za4)
266,267c266,267
< #define  \
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
> #define  
>    ,zf,za1,za2,za3,za4)
267c267
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
>    (stderr,zf,za1,za2,za3,za4)
267c267
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
>    stderr,zf,za1,za2,za3,za4)
267c267
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
>    (,zf,za1,za2,za3,za4)
267c267
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
>    ,zf,za1,za2,za3,za4)
267c267
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
>    (stderrzf,za1,za2,za3,za4)
267c267
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
>    stderrzf,za1,za2,za3,za4)
267c267
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
>    (zf,za1,za2,za3,za4)
267c267
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
>    zf,za1,za2,za3,za4)
(85.3 %, 30180 bytes)
267c267
<    stderr,zf,za1,za2,za3,za4)
---
>    zf,za1,za2,za3,za4)
267c267
<    stderr,zf,za1,za2,za3,za4)
---
>    ,,za1,za2,za3,za4)
267c267
<    stderr,zf,za1,za2,za3,za4)
---
>    ,za1,za2,za3,za4)
267c267
<    stderr,zf,za1,za2,za3,za4)
---
>    ,zfza1,za2,za3,za4)
267c267
<    stderr,zf,za1,za2,za3,za4)
---
>    zfza1,za2,za3,za4)
(85.3 %, 30173 bytes)
267c267
<    zf,za1,za2,za3,za4)
---
>    za1,za2,za3,za4)
267c267
<    zf,za1,za2,za3,za4)
---
>    ,,za2,za3,za4)
267c267
<    zf,za1,za2,za3,za4)
---
>    ,za2,za3,za4)
267c267
<    zf,za1,za2,za3,za4)
---
>    ,za1za2,za3,za4)
267c267
<    zf,za1,za2,za3,za4)
---
>    za1za2,za3,za4)
(85.3 %, 30170 bytes)
267c267
<    za1,za2,za3,za4)
---
>    za2,za3,za4)
267c267
<    za1,za2,za3,za4)
---
>    ,,za3,za4)
267c267
<    za1,za2,za3,za4)
---
>    ,za3,za4)
267c267
<    za1,za2,za3,za4)
---
>    ,za2za3,za4)
267c267
<    za1,za2,za3,za4)
---
>    za2za3,za4)
(85.3 %, 30166 bytes)
267c267
<    za2,za3,za4)
---
>    za3,za4)
267c267
<    za2,za3,za4)
---
>    ,,za4)
267c267
<    za2,za3,za4)
---
>    ,za4)
267c267
<    za2,za3,za4)
---
>    ,za3za4)
267c267
<    za2,za3,za4)
---
>    za3za4)
(85.3 %, 30162 bytes)
267c267
<    za3,za4)
---
>    za4)
267c267
<    za3,za4)
---
>    ,)
267c267
<    za3,za4)
---
>    )
267c267
<    za3,za4)
---
>    ,za4
267c267
<    za3,za4)
---
>    za4
(85.3 %, 30158 bytes)
267c267
<    za4)
---
>    
267,268c267,268
<    za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
>    )
> define VPrintf5(zf,za1,za2,za3,za4,za5) \
267,268c267,268
<    za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
>    
> define VPrintf5(zf,za1,za2,za3,za4,za5) \
267,268c267,268
<    za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
>    )
> # VPrintf5(zf,za1,za2,za3,za4,za5) \
267,268c267,268
<    za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
>    
> # VPrintf5(zf,za1,za2,za3,za4,za5) \
267,268c267,268
<    za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
>    )
>  VPrintf5(zf,za1,za2,za3,za4,za5) \
267,268c267,268
<    za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
>    
>  VPrintf5(zf,za1,za2,za3,za4,za5) \
267c267
<    za4)
---
>    za4
267,268c267,268
<    za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
>    za4
> define VPrintf5(zf,za1,za2,za3,za4,za5) \
267,268c267,268
<    za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
>    za4
> # VPrintf5(zf,za1,za2,za3,za4,za5) \
267,268c267,268
<    za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
>    za4
>  VPrintf5(zf,za1,za2,za3,za4,za5) \
267,268c267,268
<    za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
>    za4
> #define (zf,za1,za2,za3,za4,za5) \
267,268c267,268
<    za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
>    za4
> define (zf,za1,za2,za3,za4,za5) \
267,268c267,268
<    za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
>    za4
> # (zf,za1,za2,za3,za4,za5) \
267,268c267,268
<    za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
>    za4
>  (zf,za1,za2,za3,za4,za5) \
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> define VPrintf5(zf,za1,za2,za3,za4,za5) \
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
>  VPrintf5(zf,za1,za2,za3,za4,za5) \
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> define (zf,za1,za2,za3,za4,za5) \
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
>  (zf,za1,za2,za3,za4,za5) \
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> define VPrintf5zf,za1,za2,za3,za4,za5) \
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
>  VPrintf5zf,za1,za2,za3,za4,za5) \
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> define zf,za1,za2,za3,za4,za5) \
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
>  zf,za1,za2,za3,za4,za5) \
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> # VPrintf5(zf,za1,za2,za3,za4,za5) \
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> # (zf,za1,za2,za3,za4,za5) \
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> # VPrintf5zf,za1,za2,za3,za4,za5) \
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> # zf,za1,za2,za3,za4,za5) \
(85.3 %, 30157 bytes)
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> define VPrintf5(zf,za1,za2,za3,za4,za5) \
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
>  VPrintf5(zf,za1,za2,za3,za4,za5) \
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> define (zf,za1,za2,za3,za4,za5) \
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
>  (zf,za1,za2,za3,za4,za5) \
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> define VPrintf5zf,za1,za2,za3,za4,za5) \
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
>  VPrintf5zf,za1,za2,za3,za4,za5) \
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> define zf,za1,za2,za3,za4,za5) \
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
>  zf,za1,za2,za3,za4,za5) \
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> # VPrintf5(zf,za1,za2,za3,za4,za5) \
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> # (zf,za1,za2,za3,za4,za5) \
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> # VPrintf5zf,za1,za2,za3,za4,za5) \
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> # zf,za1,za2,za3,za4,za5) \
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> # VPrintf5(,za1,za2,za3,za4,za5) \
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> # (,za1,za2,za3,za4,za5) \
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> # VPrintf5,za1,za2,za3,za4,za5) \
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> # ,za1,za2,za3,za4,za5) \
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> #define (zf,za1,za2,za3,za4,za5) \
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> #define zf,za1,za2,za3,za4,za5) \
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> #define (,za1,za2,za3,za4,za5) \
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> #define ,za1,za2,za3,za4,za5) \
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> #define (zfza1,za2,za3,za4,za5) \
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> #define zfza1,za2,za3,za4,za5) \
(85.3 %, 30148 bytes)
268c268
< #define zf,za1,za2,za3,za4,za5) \
---
> #define za1,za2,za3,za4,za5) \
268c268
< #define zf,za1,za2,za3,za4,za5) \
---
> #define ,,za2,za3,za4,za5) \
268c268
< #define zf,za1,za2,za3,za4,za5) \
---
> #define ,za2,za3,za4,za5) \
268c268
< #define zf,za1,za2,za3,za4,za5) \
---
> #define ,za1za2,za3,za4,za5) \
268c268
< #define zf,za1,za2,za3,za4,za5) \
---
> #define za1za2,za3,za4,za5) \
(85.3 %, 30145 bytes)
268c268
< #define za1,za2,za3,za4,za5) \
---
> #define za2,za3,za4,za5) \
268c268
< #define za1,za2,za3,za4,za5) \
---
> #define ,,za3,za4,za5) \
268c268
< #define za1,za2,za3,za4,za5) \
---
> #define ,za3,za4,za5) \
268c268
< #define za1,za2,za3,za4,za5) \
---
> #define ,za2za3,za4,za5) \
268c268
< #define za1,za2,za3,za4,za5) \
---
> #define za2za3,za4,za5) \
(85.3 %, 30141 bytes)
268c268
< #define za2,za3,za4,za5) \
---
> #define za3,za4,za5) \
268c268
< #define za2,za3,za4,za5) \
---
> #define ,,za4,za5) \
268c268
< #define za2,za3,za4,za5) \
---
> #define ,za4,za5) \
268c268
< #define za2,za3,za4,za5) \
---
> #define ,za3za4,za5) \
268c268
< #define za2,za3,za4,za5) \
---
> #define za3za4,za5) \
(85.3 %, 30137 bytes)
268c268
< #define za3,za4,za5) \
---
> #define za4,za5) \
268c268
< #define za3,za4,za5) \
---
> #define ,,za5) \
268c268
< #define za3,za4,za5) \
---
> #define ,za5) \
268c268
< #define za3,za4,za5) \
---
> #define ,za4za5) \
268c268
< #define za3,za4,za5) \
---
> #define za4za5) \
(85.3 %, 30133 bytes)
268c268
< #define za4,za5) \
---
> #define za5) \
268c268
< #define za4,za5) \
---
> #define ,) \
268c268
< #define za4,za5) \
---
> #define ) \
268c268
< #define za4,za5) \
---
> #define ,za5 \
268c268
< #define za4,za5) \
---
> #define za5 \
(85.3 %, 30129 bytes)
268c268
< #define za5) \
---
> #define  \
268c268
< #define za5) \
---
> #define ) 
268c268
< #define za5) \
---
> #define  
268,269c268,269
< #define za5) \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
> #define ) \
>    (stderr,zf,za1,za2,za3,za4,za5)
268,269c268,269
< #define za5) \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
> #define  \
>    (stderr,zf,za1,za2,za3,za4,za5)
268,269c268,269
< #define za5) \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
> #define ) 
>    (stderr,zf,za1,za2,za3,za4,za5)
268,269c268,269
< #define za5) \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
> #define  
>    (stderr,zf,za1,za2,za3,za4,za5)
268c268
< #define za5) \
---
> #define za5 \
(85.3 %, 30125 bytes)
268,269c268,269
< #define  \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
> #define  
>    (stderr,zf,za1,za2,za3,za4,za5)
268,269c268,269
< #define  \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
> #define  
>    fprintfstderr,zf,za1,za2,za3,za4,za5)
268,269c268,269
< #define  \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
> #define  
>    stderr,zf,za1,za2,za3,za4,za5)
268,269c268,269
< #define  \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
> #define  
>    fprintf(,zf,za1,za2,za3,za4,za5)
268,269c268,269
< #define  \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
> #define  
>    (,zf,za1,za2,za3,za4,za5)
268,269c268,269
< #define  \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
> #define  
>    fprintf,zf,za1,za2,za3,za4,za5)
268,269c268,269
< #define  \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
> #define  
>    ,zf,za1,za2,za3,za4,za5)
269c269
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
>    (stderr,zf,za1,za2,za3,za4,za5)
269c269
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
>    stderr,zf,za1,za2,za3,za4,za5)
269c269
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
>    (,zf,za1,za2,za3,za4,za5)
269c269
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
>    ,zf,za1,za2,za3,za4,za5)
269c269
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
>    (stderrzf,za1,za2,za3,za4,za5)
269c269
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
>    stderrzf,za1,za2,za3,za4,za5)
(85.3 %, 30117 bytes)
269c269
<    stderr,zf,za1,za2,za3,za4,za5)
---
>    zf,za1,za2,za3,za4,za5)
269c269
<    stderr,zf,za1,za2,za3,za4,za5)
---
>    ,,za1,za2,za3,za4,za5)
269c269
<    stderr,zf,za1,za2,za3,za4,za5)
---
>    ,za1,za2,za3,za4,za5)
269c269
<    stderr,zf,za1,za2,za3,za4,za5)
---
>    ,zfza1,za2,za3,za4,za5)
269c269
<    stderr,zf,za1,za2,za3,za4,za5)
---
>    zfza1,za2,za3,za4,za5)
(85.3 %, 30110 bytes)
269c269
<    zf,za1,za2,za3,za4,za5)
---
>    za1,za2,za3,za4,za5)
269c269
<    zf,za1,za2,za3,za4,za5)
---
>    ,,za2,za3,za4,za5)
269c269
<    zf,za1,za2,za3,za4,za5)
---
>    ,za2,za3,za4,za5)
269c269
<    zf,za1,za2,za3,za4,za5)
---
>    ,za1za2,za3,za4,za5)
269c269
<    zf,za1,za2,za3,za4,za5)
---
>    za1za2,za3,za4,za5)
(85.3 %, 30107 bytes)
269c269
<    za1,za2,za3,za4,za5)
---
>    za2,za3,za4,za5)
269c269
<    za1,za2,za3,za4,za5)
---
>    ,,za3,za4,za5)
269c269
<    za1,za2,za3,za4,za5)
---
>    ,za3,za4,za5)
269c269
<    za1,za2,za3,za4,za5)
---
>    ,za2za3,za4,za5)
269c269
<    za1,za2,za3,za4,za5)
---
>    za2za3,za4,za5)
(85.3 %, 30103 bytes)
269c269
<    za2,za3,za4,za5)
---
>    za3,za4,za5)
269c269
<    za2,za3,za4,za5)
---
>    ,,za4,za5)
269c269
<    za2,za3,za4,za5)
---
>    ,za4,za5)
269c269
<    za2,za3,za4,za5)
---
>    ,za3za4,za5)
269c269
<    za2,za3,za4,za5)
---
>    za3za4,za5)
(85.3 %, 30099 bytes)
269c269
<    za3,za4,za5)
---
>    za4,za5)
269c269
<    za3,za4,za5)
---
>    ,,za5)
269c269
<    za3,za4,za5)
---
>    ,za5)
269c269
<    za3,za4,za5)
---
>    ,za4za5)
269c269
<    za3,za4,za5)
---
>    za4za5)
(85.3 %, 30095 bytes)
269c269
<    za4,za5)
---
>    za5)
269c269
<    za4,za5)
---
>    ,)
269c269
<    za4,za5)
---
>    )
269c269
<    za4,za5)
---
>    ,za5
269c269
<    za4,za5)
---
>    za5
(85.3 %, 30091 bytes)
269c269
<    za5)
---
>    
269c269
<    za5)
---
>    )
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
269c269
<    za5)
---
>    
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
269c269
<    za5)
---
>    )
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> # BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
269c269
<    za5)
---
>    
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> # BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
269c269
<    za5)
---
>    )
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
>  BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
269c269
<    za5)
---
>    
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
>  BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
269c269
<    za5)
---
>    za5
269c269
<    za5)
---
>    za5
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
269c269
<    za5)
---
>    za5
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> # BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
269c269
<    za5)
---
>    za5
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
>  BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
269c269
<    za5)
---
>    za5
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define (nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
269c269
<    za5)
---
>    za5
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> define (nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
269c269
<    za5)
---
>    za5
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> # (nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
269c269
<    za5)
---
>    za5
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
>  (nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
>  BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> define (nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
>  (nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> define BZALLOCnnn) (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
>  BZALLOCnnn) (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> define nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
>  nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> # BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
(85.3 %, 30090 bytes)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
>  BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> define (nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
>  (nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> define BZALLOCnnn) (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
>  BZALLOCnnn) (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> define nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
>  nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> # BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> # (nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> # BZALLOCnnn) (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> # nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> # BZALLOC() (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> # () (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> # BZALLOC) (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> # ) (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define (nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define () (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define ) (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define (nnn (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define nnn (strm->bzalloc)(strm->opaque,(nnn),1)
(85.3 %, 30082 bytes)
272c272
< #define nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define  (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define ) strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define  strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define ) (->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define  (->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define ) ->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define  ->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define nnn (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define nnn strm->bzalloc)(strm->opaque,(nnn),1)
(85.3 %, 30081 bytes)
272c272
< #define nnn (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define nnn strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define nnn (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define nnn ->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define nnn (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define nnn strmbzalloc)(strm->opaque,(nnn),1)
(85.3 %, 30080 bytes)
272c272
< #define nnn strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define nnn ->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define nnn strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define nnn bzalloc)(strm->opaque,(nnn),1)
(85.3 %, 30076 bytes)
272c272
< #define nnn ->bzalloc)(strm->opaque,(nnn),1)
---
> #define nnn bzalloc)(strm->opaque,(nnn),1)
272c272
< #define nnn ->bzalloc)(strm->opaque,(nnn),1)
---
> #define nnn )(strm->opaque,(nnn),1)
(85.3 %, 30074 bytes)
272c272
< #define nnn bzalloc)(strm->opaque,(nnn),1)
---
> #define nnn )(strm->opaque,(nnn),1)
272c272
< #define nnn bzalloc)(strm->opaque,(nnn),1)
---
> #define nnn (strm->opaque,(nnn),1)
(85.3 %, 30067 bytes)
272c272
< #define nnn )(strm->opaque,(nnn),1)
---
> #define nnn (strm->opaque,(nnn),1)
272c272
< #define nnn )(strm->opaque,(nnn),1)
---
> #define nnn strm->opaque,(nnn),1)
(85.3 %, 30066 bytes)
272c272
< #define nnn (strm->opaque,(nnn),1)
---
> #define nnn strm->opaque,(nnn),1)
272c272
< #define nnn (strm->opaque,(nnn),1)
---
> #define nnn ->opaque,(nnn),1)
(85.3 %, 30065 bytes)
272c272
< #define nnn strm->opaque,(nnn),1)
---
> #define nnn ->opaque,(nnn),1)
272c272
< #define nnn strm->opaque,(nnn),1)
---
> #define nnn opaque,(nnn),1)
272c272
< #define nnn strm->opaque,(nnn),1)
---
> #define nnn ->,(nnn),1)
(85.3 %, 30061 bytes)
272c272
< #define nnn ->opaque,(nnn),1)
---
> #define nnn opaque,(nnn),1)
272c272
< #define nnn ->opaque,(nnn),1)
---
> #define nnn ,(nnn),1)
(85.3 %, 30059 bytes)
272c272
< #define nnn opaque,(nnn),1)
---
> #define nnn ,(nnn),1)
272c272
< #define nnn opaque,(nnn),1)
---
> #define nnn (nnn),1)
272c272
< #define nnn opaque,(nnn),1)
---
> #define nnn ,nnn),1)
(85.3 %, 30053 bytes)
272c272
< #define nnn ,(nnn),1)
---
> #define nnn (nnn),1)
272c272
< #define nnn ,(nnn),1)
---
> #define nnn nnn),1)
(85.3 %, 30052 bytes)
272c272
< #define nnn (nnn),1)
---
> #define nnn nnn),1)
272c272
< #define nnn (nnn),1)
---
> #define nnn ),1)
272c272
< #define nnn (nnn),1)
---
> #define nnn nnn,1)
(85.3 %, 30051 bytes)
272c272
< #define nnn nnn),1)
---
> #define nnn ),1)
272c272
< #define nnn nnn),1)
---
> #define nnn ,1)
(85.3 %, 30048 bytes)
272c272
< #define nnn ),1)
---
> #define nnn ,1)
272c272
< #define nnn ),1)
---
> #define nnn 1)
(85.3 %, 30047 bytes)
272c272
< #define nnn ,1)
---
> #define nnn 1)
272c272
< #define nnn ,1)
---
> #define nnn )
272c272
< #define nnn ,1)
---
> #define nnn 1
(85.3 %, 30046 bytes)
272c272
< #define nnn 1)
---
> #define nnn )
272c272
< #define nnn 1)
---
> #define nnn 
272,273c272,273
< #define nnn 1)
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define nnn )
> define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
272,273c272,273
< #define nnn 1)
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define nnn 
> define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
272,273c272,273
< #define nnn 1)
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define nnn )
> # BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
272,273c272,273
< #define nnn 1)
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define nnn 
> # BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
272,273c272,273
< #define nnn 1)
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define nnn )
>  BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
(85.3 %, 30045 bytes)
272c272
< #define nnn )
---
> #define nnn 
272,273c272,273
< #define nnn )
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define nnn 
> define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
272,273c272,273
< #define nnn )
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define nnn 
> # BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
272,273c272,273
< #define nnn )
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define nnn 
>  BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
272,273c272,273
< #define nnn )
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define nnn 
> #define (ppp)  (strm->bzfree)(strm->opaque,(ppp))
272,273c272,273
< #define nnn )
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define nnn 
> define (ppp)  (strm->bzfree)(strm->opaque,(ppp))
272,273c272,273
< #define nnn )
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define nnn 
> # (ppp)  (strm->bzfree)(strm->opaque,(ppp))
272,273c272,273
< #define nnn )
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define nnn 
>  (ppp)  (strm->bzfree)(strm->opaque,(ppp))
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
>  BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> define (ppp)  (strm->bzfree)(strm->opaque,(ppp))
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
>  (ppp)  (strm->bzfree)(strm->opaque,(ppp))
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> define BZFREEppp)  (strm->bzfree)(strm->opaque,(ppp))
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
>  BZFREEppp)  (strm->bzfree)(strm->opaque,(ppp))
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> define ppp)  (strm->bzfree)(strm->opaque,(ppp))
(85.3 %, 30044 bytes)
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
>  BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> define (ppp)  (strm->bzfree)(strm->opaque,(ppp))
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
>  (ppp)  (strm->bzfree)(strm->opaque,(ppp))
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> define BZFREEppp)  (strm->bzfree)(strm->opaque,(ppp))
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
>  BZFREEppp)  (strm->bzfree)(strm->opaque,(ppp))
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> define ppp)  (strm->bzfree)(strm->opaque,(ppp))
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
>  ppp)  (strm->bzfree)(strm->opaque,(ppp))
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> # BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> # (ppp)  (strm->bzfree)(strm->opaque,(ppp))
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> # BZFREEppp)  (strm->bzfree)(strm->opaque,(ppp))
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> # ppp)  (strm->bzfree)(strm->opaque,(ppp))
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> # BZFREE()  (strm->bzfree)(strm->opaque,(ppp))
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> # ()  (strm->bzfree)(strm->opaque,(ppp))
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> # BZFREE)  (strm->bzfree)(strm->opaque,(ppp))
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> # )  (strm->bzfree)(strm->opaque,(ppp))
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define (ppp)  (strm->bzfree)(strm->opaque,(ppp))
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define ppp)  (strm->bzfree)(strm->opaque,(ppp))
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define ()  (strm->bzfree)(strm->opaque,(ppp))
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define )  (strm->bzfree)(strm->opaque,(ppp))
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define (ppp  (strm->bzfree)(strm->opaque,(ppp))
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define ppp  (strm->bzfree)(strm->opaque,(ppp))
(85.3 %, 30037 bytes)
273c273
< #define ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define   (strm->bzfree)(strm->opaque,(ppp))
273c273
< #define ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define )  strm->bzfree)(strm->opaque,(ppp))
273c273
< #define ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define   strm->bzfree)(strm->opaque,(ppp))
273c273
< #define ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define )  (->bzfree)(strm->opaque,(ppp))
273c273
< #define ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define   (->bzfree)(strm->opaque,(ppp))
273c273
< #define ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define )  ->bzfree)(strm->opaque,(ppp))
273c273
< #define ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define   ->bzfree)(strm->opaque,(ppp))
273c273
< #define ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define ppp  (strm->bzfree)(strm->opaque,(ppp))
273c273
< #define ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define ppp  strm->bzfree)(strm->opaque,(ppp))
(85.3 %, 30036 bytes)
273c273
< #define ppp  (strm->bzfree)(strm->opaque,(ppp))
---
> #define ppp  strm->bzfree)(strm->opaque,(ppp))
273c273
< #define ppp  (strm->bzfree)(strm->opaque,(ppp))
---
> #define ppp  ->bzfree)(strm->opaque,(ppp))
(85.3 %, 30035 bytes)
273c273
< #define ppp  strm->bzfree)(strm->opaque,(ppp))
---
> #define ppp  ->bzfree)(strm->opaque,(ppp))
273c273
< #define ppp  strm->bzfree)(strm->opaque,(ppp))
---
> #define ppp  bzfree)(strm->opaque,(ppp))
(85.3 %, 30031 bytes)
273c273
< #define ppp  ->bzfree)(strm->opaque,(ppp))
---
> #define ppp  bzfree)(strm->opaque,(ppp))
273c273
< #define ppp  ->bzfree)(strm->opaque,(ppp))
---
> #define ppp  )(strm->opaque,(ppp))
(85.3 %, 30029 bytes)
273c273
< #define ppp  bzfree)(strm->opaque,(ppp))
---
> #define ppp  )(strm->opaque,(ppp))
273c273
< #define ppp  bzfree)(strm->opaque,(ppp))
---
> #define ppp  (strm->opaque,(ppp))
(85.4 %, 30023 bytes)
273c273
< #define ppp  )(strm->opaque,(ppp))
---
> #define ppp  (strm->opaque,(ppp))
273c273
< #define ppp  )(strm->opaque,(ppp))
---
> #define ppp  strm->opaque,(ppp))
(85.4 %, 30022 bytes)
273c273
< #define ppp  (strm->opaque,(ppp))
---
> #define ppp  strm->opaque,(ppp))
273c273
< #define ppp  (strm->opaque,(ppp))
---
> #define ppp  ->opaque,(ppp))
273c273
< #define ppp  (strm->opaque,(ppp))
---
> #define ppp  strmopaque,(ppp))
(85.4 %, 30021 bytes)
273c273
< #define ppp  strm->opaque,(ppp))
---
> #define ppp  ->opaque,(ppp))
273c273
< #define ppp  strm->opaque,(ppp))
---
> #define ppp  opaque,(ppp))
(85.4 %, 30017 bytes)
273c273
< #define ppp  ->opaque,(ppp))
---
> #define ppp  opaque,(ppp))
273c273
< #define ppp  ->opaque,(ppp))
---
> #define ppp  ,(ppp))
273c273
< #define ppp  ->opaque,(ppp))
---
> #define ppp  opaque(ppp))
(85.4 %, 30015 bytes)
273c273
< #define ppp  opaque,(ppp))
---
> #define ppp  ,(ppp))
273c273
< #define ppp  opaque,(ppp))
---
> #define ppp  (ppp))
(85.4 %, 30009 bytes)
273c273
< #define ppp  ,(ppp))
---
> #define ppp  (ppp))
273c273
< #define ppp  ,(ppp))
---
> #define ppp  ppp))
273c273
< #define ppp  ,(ppp))
---
> #define ppp  ())
(85.4 %, 30008 bytes)
273c273
< #define ppp  (ppp))
---
> #define ppp  ppp))
273c273
< #define ppp  (ppp))
---
> #define ppp  ))
(85.4 %, 30007 bytes)
273c273
< #define ppp  ppp))
---
> #define ppp  ))
273c273
< #define ppp  ppp))
---
> #define ppp  )
(85.4 %, 30004 bytes)
273c273
< #define ppp  ))
---
> #define ppp  )
273c273
< #define ppp  ))
---
> #define ppp  
(85.4 %, 30003 bytes)
273c273
< #define ppp  )
---
> #define ppp  
273c273
< #define ppp  )
---
> #define ppp  
278c278
< #define BZ_HDR_B 0x2   
---
> define BZ_HDR_B 0x2   
273c273
< #define ppp  )
---
> #define ppp  
278c278
< #define BZ_HDR_B 0x2   
---
> # BZ_HDR_B 0x2   
273c273
< #define ppp  )
---
> #define ppp  
278c278
< #define BZ_HDR_B 0x2   
---
>  BZ_HDR_B 0x2   
273c273
< #define ppp  )
---
> #define ppp  
278c278
< #define BZ_HDR_B 0x2   
---
> #define  0x2   
273c273
< #define ppp  )
---
> #define ppp  
278c278
< #define BZ_HDR_B 0x2   
---
> define  0x2   
273c273
< #define ppp  )
---
> #define ppp  
278c278
< #define BZ_HDR_B 0x2   
---
> #  0x2   
273c273
< #define ppp  )
---
> #define ppp  
278c278
< #define BZ_HDR_B 0x2   
---
>   0x2   
278c278
< #define BZ_HDR_B 0x2   
---
> define BZ_HDR_B 0x2   
278c278
< #define BZ_HDR_B 0x2   
---
>  BZ_HDR_B 0x2   
278c278
< #define BZ_HDR_B 0x2   
---
> define  0x2   
278c278
< #define BZ_HDR_B 0x2   
---
>   0x2   
278c278
< #define BZ_HDR_B 0x2   
---
> define BZ_HDR_B    
278c278
< #define BZ_HDR_B 0x2   
---
>  BZ_HDR_B    
278c278
< #define BZ_HDR_B 0x2   
---
> define     
278c278
< #define BZ_HDR_B 0x2   
---
>      
(85.4 %, 30002 bytes)
278c278
< #define BZ_HDR_B 0x2   
---
> define BZ_HDR_B 0x2   
278c278
< #define BZ_HDR_B 0x2   
---
>  BZ_HDR_B 0x2   
278c278
< #define BZ_HDR_B 0x2   
---
> define  0x2   
278c278
< #define BZ_HDR_B 0x2   
---
>   0x2   
278c278
< #define BZ_HDR_B 0x2   
---
> define BZ_HDR_B    
278c278
< #define BZ_HDR_B 0x2   
---
>  BZ_HDR_B    
278c278
< #define BZ_HDR_B 0x2   
---
> define     
278c278
< #define BZ_HDR_B 0x2   
---
>      
278c278
< #define BZ_HDR_B 0x2   
---
> # BZ_HDR_B 0x2   
278c278
< #define BZ_HDR_B 0x2   
---
> #  0x2   
278c278
< #define BZ_HDR_B 0x2   
---
> # BZ_HDR_B    
278c278
< #define BZ_HDR_B 0x2   
---
> #     
(85.4 %, 29984 bytes)
279c279
< #define BZ_HDR_Z 0xa   
---
>      
279c279
< #define BZ_HDR_Z 0xa   
---
> # BZ_HDR_Z 0xa   
279c279
< #define BZ_HDR_Z 0xa   
---
> #  0xa   
279c279
< #define BZ_HDR_Z 0xa   
---
> # BZ_HDR_Z    
279c279
< #define BZ_HDR_Z 0xa   
---
> #     
(85.4 %, 29966 bytes)
280c280
< #define BZ_HDR_h 0x8   
---
>      
280c280
< #define BZ_HDR_h 0x8   
---
> # BZ_HDR_h 0x8   
280c280
< #define BZ_HDR_h 0x8   
---
> #  0x8   
280c280
< #define BZ_HDR_h 0x8   
---
> # BZ_HDR_h    
280c280
< #define BZ_HDR_h 0x8   
---
> #     
(85.4 %, 29948 bytes)
281c281
< #define BZ_HDR_0 0x0   
---
>      
281c281
< #define BZ_HDR_0 0x0   
---
> # BZ_HDR_0 0x0   
281c281
< #define BZ_HDR_0 0x0   
---
> #  0x0   
281c281
< #define BZ_HDR_0 0x0   
---
> # BZ_HDR_0    
281c281
< #define BZ_HDR_0 0x0   
---
> #     
(85.4 %, 29930 bytes)
285c285
< #define BZ_MAX_ALPHA_SIZE 8
---
>   
285c285
< #define BZ_MAX_ALPHA_SIZE 8
---
> # BZ_MAX_ALPHA_SIZE 8
285c285
< #define BZ_MAX_ALPHA_SIZE 8
---
> #  8
285c285
< #define BZ_MAX_ALPHA_SIZE 8
---
> # BZ_MAX_ALPHA_SIZE 
285c285
< #define BZ_MAX_ALPHA_SIZE 8
---
> #  
285,286c285,286
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
---
> # BZ_MAX_ALPHA_SIZE 8
> define BZ_MAX_CODE_LEN    3
285,286c285,286
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
---
> #  8
> define BZ_MAX_CODE_LEN    3
285,286c285,286
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
---
> # BZ_MAX_ALPHA_SIZE 
> define BZ_MAX_CODE_LEN    3
285,286c285,286
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
---
> #  
> define BZ_MAX_CODE_LEN    3
285c285
< #define BZ_MAX_ALPHA_SIZE 8
---
> #define  8
285c285
< #define BZ_MAX_ALPHA_SIZE 8
---
> #define  
285,286c285,286
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
---
> #define  8
> define BZ_MAX_CODE_LEN    3
285,286c285,286
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
---
> #define  
> define BZ_MAX_CODE_LEN    3
285,286c285,286
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
---
> #define  8
> # BZ_MAX_CODE_LEN    3
285,286c285,286
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
---
> #define  
> # BZ_MAX_CODE_LEN    3
285,286c285,286
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
---
> #define  8
>  BZ_MAX_CODE_LEN    3
285,286c285,286
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
---
> #define  
>  BZ_MAX_CODE_LEN    3
285c285
< #define BZ_MAX_ALPHA_SIZE 8
---
> #define BZ_MAX_ALPHA_SIZE 
285,286c285,286
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
---
> #define BZ_MAX_ALPHA_SIZE 
> define BZ_MAX_CODE_LEN    3
285,286c285,286
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
---
> #define BZ_MAX_ALPHA_SIZE 
> # BZ_MAX_CODE_LEN    3
285,286c285,286
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
---
> #define BZ_MAX_ALPHA_SIZE 
>  BZ_MAX_CODE_LEN    3
285,286c285,286
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
---
> #define BZ_MAX_ALPHA_SIZE 
> #define     3
285,286c285,286
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
---
> #define BZ_MAX_ALPHA_SIZE 
> define     3
285,286c285,286
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
---
> #define BZ_MAX_ALPHA_SIZE 
> #     3
285,286c285,286
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
---
> #define BZ_MAX_ALPHA_SIZE 
>      3
286c286
< #define BZ_MAX_CODE_LEN    3
---
> define BZ_MAX_CODE_LEN    3
286c286
< #define BZ_MAX_CODE_LEN    3
---
>  BZ_MAX_CODE_LEN    3
286c286
< #define BZ_MAX_CODE_LEN    3
---
> define     3
286c286
< #define BZ_MAX_CODE_LEN    3
---
>      3
286c286
< #define BZ_MAX_CODE_LEN    3
---
> define BZ_MAX_CODE_LEN    
286c286
< #define BZ_MAX_CODE_LEN    3
---
>  BZ_MAX_CODE_LEN    
286c286
< #define BZ_MAX_CODE_LEN    3
---
> define     
286c286
< #define BZ_MAX_CODE_LEN    3
---
>      
286c286
< #define BZ_MAX_CODE_LEN    3
---
> # BZ_MAX_CODE_LEN    3
286c286
< #define BZ_MAX_CODE_LEN    3
---
> #     3
286c286
< #define BZ_MAX_CODE_LEN    3
---
> # BZ_MAX_CODE_LEN    
(85.4 %, 29907 bytes)
288c288
< #define BZ_RUNA 0
---
>   
288c288
< #define BZ_RUNA 0
---
> # BZ_RUNA 0
288c288
< #define BZ_RUNA 0
---
> #  0
(85.4 %, 29892 bytes)
289c289
< #define BZ_RUNB 1
---
>   
289c289
< #define BZ_RUNB 1
---
> # BZ_RUNB 1
289c289
< #define BZ_RUNB 1
---
> #  1
(85.4 %, 29877 bytes)
291c291
< #define BZ_N_GROUPS 6
---
>   
291c291
< #define BZ_N_GROUPS 6
---
> # BZ_N_GROUPS 6
291c291
< #define BZ_N_GROUPS 6
---
> #  6
291c291
< #define BZ_N_GROUPS 6
---
> # BZ_N_GROUPS 
291c291
< #define BZ_N_GROUPS 6
---
> #  
291,292c291,292
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> # BZ_N_GROUPS 6
> define BZ_G_SIZE   50
291,292c291,292
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #  6
> define BZ_G_SIZE   50
291,292c291,292
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> # BZ_N_GROUPS 
> define BZ_G_SIZE   50
291,292c291,292
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #  
> define BZ_G_SIZE   50
291c291
< #define BZ_N_GROUPS 6
---
> #define  6
291c291
< #define BZ_N_GROUPS 6
---
> #define  
291,292c291,292
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define  6
> define BZ_G_SIZE   50
291,292c291,292
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define  
> define BZ_G_SIZE   50
291,292c291,292
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define  6
> # BZ_G_SIZE   50
291,292c291,292
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define  
> # BZ_G_SIZE   50
291,292c291,292
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define  6
>  BZ_G_SIZE   50
291,292c291,292
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define  
>  BZ_G_SIZE   50
291c291
< #define BZ_N_GROUPS 6
---
> #define BZ_N_GROUPS 
291,292c291,292
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define BZ_N_GROUPS 
> define BZ_G_SIZE   50
291,292c291,292
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define BZ_N_GROUPS 
> # BZ_G_SIZE   50
291,292c291,292
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define BZ_N_GROUPS 
>  BZ_G_SIZE   50
291,292c291,292
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define BZ_N_GROUPS 
> #define    50
291,292c291,292
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define BZ_N_GROUPS 
> define    50
291,292c291,292
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define BZ_N_GROUPS 
> #    50
291,292c291,292
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define BZ_N_GROUPS 
>     50
292c292
< #define BZ_G_SIZE   50
---
> define BZ_G_SIZE   50
292c292
< #define BZ_G_SIZE   50
---
>  BZ_G_SIZE   50
292c292
< #define BZ_G_SIZE   50
---
> define    50
292c292
< #define BZ_G_SIZE   50
---
>     50
292c292
< #define BZ_G_SIZE   50
---
> define BZ_G_SIZE   
292c292
< #define BZ_G_SIZE   50
---
>  BZ_G_SIZE   
292c292
< #define BZ_G_SIZE   50
---
> define    
292c292
< #define BZ_G_SIZE   50
---
>     
292c292
< #define BZ_G_SIZE   50
---
> # BZ_G_SIZE   50
292c292
< #define BZ_G_SIZE   50
---
> #    50
292c292
< #define BZ_G_SIZE   50
---
> # BZ_G_SIZE   
292c292
< #define BZ_G_SIZE   50
---
> #    
292,293c292,293
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> # BZ_G_SIZE   50
> define BZ_N_ITERS  4
292,293c292,293
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #    50
> define BZ_N_ITERS  4
292,293c292,293
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> # BZ_G_SIZE   
> define BZ_N_ITERS  4
292,293c292,293
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #    
> define BZ_N_ITERS  4
292c292
< #define BZ_G_SIZE   50
---
> #define    50
292c292
< #define BZ_G_SIZE   50
---
> #define    
292,293c292,293
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define    50
> define BZ_N_ITERS  4
292,293c292,293
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define    
> define BZ_N_ITERS  4
292,293c292,293
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define    50
> # BZ_N_ITERS  4
292,293c292,293
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define    
> # BZ_N_ITERS  4
292,293c292,293
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define    50
>  BZ_N_ITERS  4
292,293c292,293
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define    
>  BZ_N_ITERS  4
292c292
< #define BZ_G_SIZE   50
---
> #define BZ_G_SIZE   
292,293c292,293
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define BZ_G_SIZE   
> define BZ_N_ITERS  4
292,293c292,293
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define BZ_G_SIZE   
> # BZ_N_ITERS  4
292,293c292,293
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define BZ_G_SIZE   
>  BZ_N_ITERS  4
292,293c292,293
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define BZ_G_SIZE   
> #define   4
292,293c292,293
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define BZ_G_SIZE   
> define   4
292,293c292,293
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define BZ_G_SIZE   
> #   4
292,293c292,293
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define BZ_G_SIZE   
>    4
293c293
< #define BZ_N_ITERS  4
---
> define BZ_N_ITERS  4
293c293
< #define BZ_N_ITERS  4
---
>  BZ_N_ITERS  4
293c293
< #define BZ_N_ITERS  4
---
> define   4
293c293
< #define BZ_N_ITERS  4
---
>    4
293c293
< #define BZ_N_ITERS  4
---
> define BZ_N_ITERS  
293c293
< #define BZ_N_ITERS  4
---
>  BZ_N_ITERS  
293c293
< #define BZ_N_ITERS  4
---
> define   
293c293
< #define BZ_N_ITERS  4
---
>    
293c293
< #define BZ_N_ITERS  4
---
> # BZ_N_ITERS  4
293c293
< #define BZ_N_ITERS  4
---
> #   4
(85.4 %, 29859 bytes)
295c295
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
>   2 + (0 / BZ_G_SIZE))
295c295
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> # BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
295c295
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> #  (2 + (0 / BZ_G_SIZE))
295c295
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> # BZ_MAX_SELECTORS 2 + (0 / BZ_G_SIZE))
295c295
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> #  2 + (0 / BZ_G_SIZE))
295c295
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> # BZ_MAX_SELECTORS ( + (0 / BZ_G_SIZE))
295c295
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> #  ( + (0 / BZ_G_SIZE))
295c295
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> # BZ_MAX_SELECTORS  + (0 / BZ_G_SIZE))
295c295
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> #   + (0 / BZ_G_SIZE))
295c295
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> #define  (2 + (0 / BZ_G_SIZE))
295c295
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> #define  2 + (0 / BZ_G_SIZE))
295c295
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> #define  ( + (0 / BZ_G_SIZE))
295c295
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> #define   + (0 / BZ_G_SIZE))
295c295
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> #define  (2  (0 / BZ_G_SIZE))
295c295
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> #define  2  (0 / BZ_G_SIZE))
295c295
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> #define  (  (0 / BZ_G_SIZE))
295c295
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> #define    (0 / BZ_G_SIZE))
295c295
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS 2 + (0 / BZ_G_SIZE))
295c295
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS  + (0 / BZ_G_SIZE))
295c295
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS 2  (0 / BZ_G_SIZE))
295c295
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS   (0 / BZ_G_SIZE))
295c295
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE))
295c295
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS  + 0 / BZ_G_SIZE))
295c295
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS 2  0 / BZ_G_SIZE))
295c295
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS   0 / BZ_G_SIZE))
295c295
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS ( + (0 / BZ_G_SIZE))
295c295
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (0 / BZ_G_SIZE))
(85.4 %, 29858 bytes)
295c295
< #define BZ_MAX_SELECTORS ( + (0 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (0 / BZ_G_SIZE))
295c295
< #define BZ_MAX_SELECTORS ( + (0 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  0 / BZ_G_SIZE))
295c295
< #define BZ_MAX_SELECTORS ( + (0 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  ( / BZ_G_SIZE))
295c295
< #define BZ_MAX_SELECTORS ( + (0 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (   / BZ_G_SIZE))
295c295
< #define BZ_MAX_SELECTORS ( + (0 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (0  BZ_G_SIZE))
295c295
< #define BZ_MAX_SELECTORS ( + (0 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  0  BZ_G_SIZE))
295c295
< #define BZ_MAX_SELECTORS ( + (0 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
(85.4 %, 29857 bytes)
295c295
< #define BZ_MAX_SELECTORS (  (0 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  0 / BZ_G_SIZE))
295c295
< #define BZ_MAX_SELECTORS (  (0 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (   / BZ_G_SIZE))
295c295
< #define BZ_MAX_SELECTORS (  (0 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  0  BZ_G_SIZE))
295c295
< #define BZ_MAX_SELECTORS (  (0 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (    BZ_G_SIZE))
295c295
< #define BZ_MAX_SELECTORS (  (0 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  0 / ))
295c295
< #define BZ_MAX_SELECTORS (  (0 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (   / ))
295c295
< #define BZ_MAX_SELECTORS (  (0 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  0  ))
295c295
< #define BZ_MAX_SELECTORS (  (0 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (    ))
295c295
< #define BZ_MAX_SELECTORS (  (0 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  ( / BZ_G_SIZE))
295c295
< #define BZ_MAX_SELECTORS (  (0 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
295c295
< #define BZ_MAX_SELECTORS (  (0 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  ( / ))
295c295
< #define BZ_MAX_SELECTORS (  (0 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  ))
295c295
< #define BZ_MAX_SELECTORS (  (0 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  ( / BZ_G_SIZE)
295c295
< #define BZ_MAX_SELECTORS (  (0 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE)
295c295
< #define BZ_MAX_SELECTORS (  (0 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  ( / )
295c295
< #define BZ_MAX_SELECTORS (  (0 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  )
295c295
< #define BZ_MAX_SELECTORS (  (0 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (0  BZ_G_SIZE))
295c295
< #define BZ_MAX_SELECTORS (  (0 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (0  ))
(85.4 %, 29855 bytes)
295c295
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  )
295c295
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  )
295c295
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  
295c295
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  ))
303c303
< #define BZ_RAND_DECLS                          \
---
> define BZ_RAND_DECLS                          \
295c295
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  )
303c303
< #define BZ_RAND_DECLS                          \
---
> define BZ_RAND_DECLS                          \
295c295
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  )
303c303
< #define BZ_RAND_DECLS                          \
---
> define BZ_RAND_DECLS                          \
295c295
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  
303c303
< #define BZ_RAND_DECLS                          \
---
> define BZ_RAND_DECLS                          \
295c295
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE)
295c295
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE
295c295
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE)
303c303
< #define BZ_RAND_DECLS                          \
---
> define BZ_RAND_DECLS                          \
295c295
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE
303c303
< #define BZ_RAND_DECLS                          \
---
> define BZ_RAND_DECLS                          \
295c295
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE)
303c303
< #define BZ_RAND_DECLS                          \
---
> # BZ_RAND_DECLS                          \
295c295
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE
303c303
< #define BZ_RAND_DECLS                          \
---
> # BZ_RAND_DECLS                          \
295c295
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE)
303c303
< #define BZ_RAND_DECLS                          \
---
>  BZ_RAND_DECLS                          \
295c295
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE
303c303
< #define BZ_RAND_DECLS                          \
---
>  BZ_RAND_DECLS                          \
295c295
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE)
295c295
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE)
303c303
< #define BZ_RAND_DECLS                          \
---
> define BZ_RAND_DECLS                          \
295c295
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE)
303c303
< #define BZ_RAND_DECLS                          \
---
> # BZ_RAND_DECLS                          \
295c295
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE)
303c303
< #define BZ_RAND_DECLS                          \
---
>  BZ_RAND_DECLS                          \
295c295
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE)
303c303
< #define BZ_RAND_DECLS                          \
---
> #define                           \
295c295
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE)
303c303
< #define BZ_RAND_DECLS                          \
---
> define                           \
295c295
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE)
303c303
< #define BZ_RAND_DECLS                          \
---
> #                           \
295c295
< #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (  (  BZ_G_SIZE)
303c303
< #define BZ_RAND_DECLS                          \
---
>                            \
303c303
< #define BZ_RAND_DECLS                          \
---
> define BZ_RAND_DECLS                          \
303c303
< #define BZ_RAND_DECLS                          \
---
>  BZ_RAND_DECLS                          \
303c303
< #define BZ_RAND_DECLS                          \
---
> define                           \
303c303
< #define BZ_RAND_DECLS                          \
---
>                            \
303c303
< #define BZ_RAND_DECLS                          \
---
> define BZ_RAND_DECLS                          
303c303
< #define BZ_RAND_DECLS                          \
---
>  BZ_RAND_DECLS                          
303c303
< #define BZ_RAND_DECLS                          \
---
> define                           
303c303
< #define BZ_RAND_DECLS                          \
---
>                            
303c303
< #define BZ_RAND_DECLS                          \
---
> # BZ_RAND_DECLS                          \
303c303
< #define BZ_RAND_DECLS                          \
---
> #                           \
303c303
< #define BZ_RAND_DECLS                          \
---
> # BZ_RAND_DECLS                          
303c303
< #define BZ_RAND_DECLS                          \
---
> #                           
303,304c303,304
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> # BZ_RAND_DECLS                          \
>     rNToGo;                               \
303,304c303,304
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #                           \
>     rNToGo;                               \
303,304c303,304
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> # BZ_RAND_DECLS                          
>     rNToGo;                               \
303,304c303,304
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #                           
>     rNToGo;                               \
303c303
< #define BZ_RAND_DECLS                          \
---
> #define                           \
303c303
< #define BZ_RAND_DECLS                          \
---
> #define                           
303,304c303,304
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define                           \
>     rNToGo;                               \
303,304c303,304
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define                           
>     rNToGo;                               \
303,304c303,304
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define                           \
>    Int32 ;                               \
303,304c303,304
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define                           
>    Int32 ;                               \
303,304c303,304
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define                           \
>     ;                               \
303,304c303,304
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define                           
>     ;                               \
303c303
< #define BZ_RAND_DECLS                          \
---
> #define BZ_RAND_DECLS                          
303,304c303,304
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_RAND_DECLS                          
>     rNToGo;                               \
303,304c303,304
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_RAND_DECLS                          
>    Int32 ;                               \
303,304c303,304
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_RAND_DECLS                          
>     ;                               \
303,304c303,304
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_RAND_DECLS                          
>    Int32 rNToGo                               \
303,304c303,304
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_RAND_DECLS                          
>     rNToGo                               \
303,304c303,304
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_RAND_DECLS                          
>    Int32                                \
303,304c303,304
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_RAND_DECLS                          
>                                    \
304c304
<    Int32 rNToGo;                               \
---
>     rNToGo;                               \
304c304
<    Int32 rNToGo;                               \
---
>     ;                               \
304c304
<    Int32 rNToGo;                               \
---
>     rNToGo                               \
304c304
<    Int32 rNToGo;                               \
---
>                                    \
304c304
<    Int32 rNToGo;                               \
---
>     rNToGo;                               
(85.4 %, 29844 bytes)
304c304
<     ;                               \
---
>                                    
304,305c304,305
<     ;                               \
<    Int32 rTPos                                 \
---
>                                    \
>     rTPos                                 \
304,305c304,305
<     ;                               \
<    Int32 rTPos                                 \
---
>                                    
>     rTPos                                 \
304,305c304,305
<     ;                               \
<    Int32 rTPos                                 \
---
>                                    \
>    Int32                                  \
304,305c304,305
<     ;                               \
<    Int32 rTPos                                 \
---
>                                    
>    Int32                                  \
304,305c304,305
<     ;                               \
<    Int32 rTPos                                 \
---
>                                    \
>                                      \
(85.4 %, 29838 bytes)
304c304
<                                    \
---
>                                    
307c307
< #define BZ_RAND_INIT_MASK                      \
---
> define BZ_RAND_INIT_MASK                      \
304,305c304,305
<                                    \
<    Int32                                  \
---
>                                    
>                                      \
307c307
< #define BZ_RAND_INIT_MASK                      \
---
> define BZ_RAND_INIT_MASK                      \
304,305c304,305
<                                    \
<    Int32                                  \
---
>                                    
>    Int32                                  
307c307
< #define BZ_RAND_INIT_MASK                      \
---
> define BZ_RAND_INIT_MASK                      \
304,305c304,305
<                                    \
<    Int32                                  \
---
>                                    
>                                      
307c307
< #define BZ_RAND_INIT_MASK                      \
---
> define BZ_RAND_INIT_MASK                      \
305c305
<    Int32                                  \
---
>                                      \
305c305
<    Int32                                  \
---
>                                      
305c305
<    Int32                                  \
---
>                                      \
307c307
< #define BZ_RAND_INIT_MASK                      \
---
> define BZ_RAND_INIT_MASK                      \
305c305
<    Int32                                  \
---
>                                      
307c307
< #define BZ_RAND_INIT_MASK                      \
---
> define BZ_RAND_INIT_MASK                      \
305c305
<    Int32                                  \
---
>                                      \
307c307
< #define BZ_RAND_INIT_MASK                      \
---
> # BZ_RAND_INIT_MASK                      \
(85.4 %, 29833 bytes)
305c305
<                                      \
---
>                                      
305c305
<                                      \
---
>                                      
307c307
< #define BZ_RAND_INIT_MASK                      \
---
> define BZ_RAND_INIT_MASK                      \
305c305
<                                      \
---
>                                      
307c307
< #define BZ_RAND_INIT_MASK                      \
---
> # BZ_RAND_INIT_MASK                      \
305c305
<                                      \
---
>                                      
307c307
< #define BZ_RAND_INIT_MASK                      \
---
>  BZ_RAND_INIT_MASK                      \
305c305
<                                      \
---
>                                      
307c307
< #define BZ_RAND_INIT_MASK                      \
---
> #define                       \
305c305
<                                      \
---
>                                      
307c307
< #define BZ_RAND_INIT_MASK                      \
---
> define                       \
305c305
<                                      \
---
>                                      
307c307
< #define BZ_RAND_INIT_MASK                      \
---
> #                       \
305c305
<                                      \
---
>                                      
307c307
< #define BZ_RAND_INIT_MASK                      \
---
>                        \
307c307
< #define BZ_RAND_INIT_MASK                      \
---
> define BZ_RAND_INIT_MASK                      \
307c307
< #define BZ_RAND_INIT_MASK                      \
---
>  BZ_RAND_INIT_MASK                      \
307c307
< #define BZ_RAND_INIT_MASK                      \
---
> define                       \
307c307
< #define BZ_RAND_INIT_MASK                      \
---
>                        \
307c307
< #define BZ_RAND_INIT_MASK                      \
---
> define BZ_RAND_INIT_MASK                      
307c307
< #define BZ_RAND_INIT_MASK                      \
---
>  BZ_RAND_INIT_MASK                      
307c307
< #define BZ_RAND_INIT_MASK                      \
---
> define                       
307c307
< #define BZ_RAND_INIT_MASK                      \
---
>                        
307c307
< #define BZ_RAND_INIT_MASK                      \
---
> # BZ_RAND_INIT_MASK                      \
(85.4 %, 29832 bytes)
307c307
< #define BZ_RAND_INIT_MASK                      \
---
> define BZ_RAND_INIT_MASK                      \
307c307
< #define BZ_RAND_INIT_MASK                      \
---
>  BZ_RAND_INIT_MASK                      \
307c307
< #define BZ_RAND_INIT_MASK                      \
---
> define                       \
307c307
< #define BZ_RAND_INIT_MASK                      \
---
>                        \
307c307
< #define BZ_RAND_INIT_MASK                      \
---
> define BZ_RAND_INIT_MASK                      
307c307
< #define BZ_RAND_INIT_MASK                      \
---
>  BZ_RAND_INIT_MASK                      
307c307
< #define BZ_RAND_INIT_MASK                      \
---
> define                       
307c307
< #define BZ_RAND_INIT_MASK                      \
---
>                        
307c307
< #define BZ_RAND_INIT_MASK                      \
---
> # BZ_RAND_INIT_MASK                      \
307c307
< #define BZ_RAND_INIT_MASK                      \
---
> #                       \
307c307
< #define BZ_RAND_INIT_MASK                      \
---
> # BZ_RAND_INIT_MASK                      
307c307
< #define BZ_RAND_INIT_MASK                      \
---
> #                       
307,308c307,308
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> # BZ_RAND_INIT_MASK                      \
>    ->rNToGo = 0;                              \
307,308c307,308
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> #                       \
>    ->rNToGo = 0;                              \
307,308c307,308
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> # BZ_RAND_INIT_MASK                      
>    ->rNToGo = 0;                              \
307,308c307,308
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> #                       
>    ->rNToGo = 0;                              \
307c307
< #define BZ_RAND_INIT_MASK                      \
---
> #define                       \
307c307
< #define BZ_RAND_INIT_MASK                      \
---
> #define                       
307,308c307,308
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> #define                       \
>    ->rNToGo = 0;                              \
307,308c307,308
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> #define                       
>    ->rNToGo = 0;                              \
307,308c307,308
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> #define                       \
>    srNToGo = 0;                              \
307,308c307,308
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> #define                       
>    srNToGo = 0;                              \
307,308c307,308
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> #define                       \
>    rNToGo = 0;                              \
307,308c307,308
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> #define                       
>    rNToGo = 0;                              \
307c307
< #define BZ_RAND_INIT_MASK                      \
---
> #define BZ_RAND_INIT_MASK                      
307,308c307,308
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> #define BZ_RAND_INIT_MASK                      
>    ->rNToGo = 0;                              \
307,308c307,308
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> #define BZ_RAND_INIT_MASK                      
>    srNToGo = 0;                              \
(85.5 %, 29813 bytes)
307,308c307,308
< #define                       \
<    srNToGo = 0;                              \
---
> #define                       
>    srNToGo = ;                              \
307,308c307,308
< #define                       \
<    srNToGo = 0;                              \
---
> #define                       
>     = ;                              \
307,308c307,308
< #define                       \
<    srNToGo = 0;                              \
---
> #define                       
>    srNToGo  ;                              \
307,308c307,308
< #define                       \
<    srNToGo = 0;                              \
---
> #define                       
>      ;                              \
308c308
<    srNToGo = 0;                              \
---
>     = 0;                              \
308c308
<    srNToGo = 0;                              \
---
>      0;                              \
308c308
<    srNToGo = 0;                              \
---
>     = ;                              \
308c308
<    srNToGo = 0;                              \
---
>      ;                              \
308c308
<    srNToGo = 0;                              \
---
>     = 0                              \
308c308
<    srNToGo = 0;                              \
---
>      0                              \
308c308
<    srNToGo = 0;                              \
---
>     =                               \
308c308
<    srNToGo = 0;                              \
---
>                                    \
308c308
<    srNToGo = 0;                              \
---
>    srNToGo  0;                              \
308c308
<    srNToGo = 0;                              \
---
>    srNToGo  ;                              \
308c308
<    srNToGo = 0;                              \
---
>    srNToGo  0                              \
(85.5 %, 29812 bytes)
308c308
<    srNToGo  0;                              \
---
>    srNToGo  ;                              \
308c308
<    srNToGo  0;                              \
---
>    srNToGo                                \
308c308
<    srNToGo  0;                              \
---
>    srNToGo  ;                              
308c308
<    srNToGo  0;                              \
---
>    srNToGo                                
308,309c308,309
<    srNToGo  0;                              \
<    s->rTPos  = 0                               \
---
>    srNToGo  ;                              \
>    ->rTPos  = 0                               \
(85.5 %, 29811 bytes)
308c308
<    srNToGo  ;                              \
---
>    srNToGo                                \
308c308
<    srNToGo  ;                              \
---
>    srNToGo                                
308,309c308,309
<    srNToGo  ;                              \
<    s->rTPos  = 0                               \
---
>    srNToGo                                \
>    ->rTPos  = 0                               \
(85.5 %, 29810 bytes)
308c308
<    srNToGo                                \
---
>    srNToGo                                
308,309c308,309
<    srNToGo                                \
<    s->rTPos  = 0                               \
---
>    srNToGo                                
>    ->rTPos  = 0                               \
308,309c308,309
<    srNToGo                                \
<    s->rTPos  = 0                               \
---
>    srNToGo                                
>    srTPos  = 0                               \
308,309c308,309
<    srNToGo                                \
<    s->rTPos  = 0                               \
---
>    srNToGo                                
>    rTPos  = 0                               \
308,309c308,309
<    srNToGo                                \
<    s->rTPos  = 0                               \
---
>    srNToGo                                
>    s->  = 0                               \
308,309c308,309
<    srNToGo                                \
<    s->rTPos  = 0                               \
---
>    srNToGo                                
>    ->  = 0                               \
308,309c308,309
<    srNToGo                                \
<    s->rTPos  = 0                               \
---
>    srNToGo                                
>    s  = 0                               \
308,309c308,309
<    srNToGo                                \
<    s->rTPos  = 0                               \
---
>    srNToGo                                
>      = 0                               \
309c309
<    s->rTPos  = 0                               \
---
>    ->rTPos  = 0                               \
309c309
<    s->rTPos  = 0                               \
---
>    rTPos  = 0                               \
(85.5 %, 29809 bytes)
309c309
<    ->rTPos  = 0                               \
---
>    rTPos  = 0                               \
309c309
<    ->rTPos  = 0                               \
---
>      = 0                               \
(85.5 %, 29807 bytes)
309c309
<    rTPos  = 0                               \
---
>      = 0                               \
309c309
<    rTPos  = 0                               \
---
>       0                               \
(85.5 %, 29802 bytes)
309c309
<      = 0                               \
---
>       0                               \
309c309
<      = 0                               \
---
>                                      \
(85.5 %, 29801 bytes)
309c309
<       0                               \
---
>                                      \
309c309
<       0                               \
---
>                                      
(85.5 %, 29800 bytes)
309c309
<                                      \
---
>                                      
309c309
<                                      \
---
>                                      
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
309c309
<                                      \
---
>                                      
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> # BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
309c309
<                                      \
---
>                                      
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
>  BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
309c309
<                                      \
---
>                                      
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> #define  ((s->rNToGo == 1) ? 1 : 0)
309c309
<                                      \
---
>                                      
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> define  ((s->rNToGo == 1) ? 1 : 0)
309c309
<                                      \
---
>                                      
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> #  ((s->rNToGo == 1) ? 1 : 0)
309c309
<                                      \
---
>                                      
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
>   ((s->rNToGo == 1) ? 1 : 0)
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
>  BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> define  ((s->rNToGo == 1) ? 1 : 0)
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
>   ((s->rNToGo == 1) ? 1 : 0)
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> define BZ_RAND_MASK (s->rNToGo == 1) ? 1 : 0)
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
>  BZ_RAND_MASK (s->rNToGo == 1) ? 1 : 0)
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> define  (s->rNToGo == 1) ? 1 : 0)
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
>   (s->rNToGo == 1) ? 1 : 0)
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> # BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> #  ((s->rNToGo == 1) ? 1 : 0)
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> # BZ_RAND_MASK (s->rNToGo == 1) ? 1 : 0)
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> #  (s->rNToGo == 1) ? 1 : 0)
(85.5 %, 29799 bytes)
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
>  BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> define  ((s->rNToGo == 1) ? 1 : 0)
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
>   ((s->rNToGo == 1) ? 1 : 0)
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> define BZ_RAND_MASK (s->rNToGo == 1) ? 1 : 0)
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
>  BZ_RAND_MASK (s->rNToGo == 1) ? 1 : 0)
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> define  (s->rNToGo == 1) ? 1 : 0)
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
>   (s->rNToGo == 1) ? 1 : 0)
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> # BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> #  ((s->rNToGo == 1) ? 1 : 0)
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> # BZ_RAND_MASK (s->rNToGo == 1) ? 1 : 0)
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> #  (s->rNToGo == 1) ? 1 : 0)
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> # BZ_RAND_MASK (s->rNToGo == 1) ? 1 : 0)
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> #  (s->rNToGo == 1) ? 1 : 0)
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> # BZ_RAND_MASK s->rNToGo == 1) ? 1 : 0)
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> #  s->rNToGo == 1) ? 1 : 0)
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> #define  ((s->rNToGo == 1) ? 1 : 0)
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> #define  (s->rNToGo == 1) ? 1 : 0)
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> #define  (s->rNToGo == 1) ? 1 : 0)
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> #define  s->rNToGo == 1) ? 1 : 0)
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> #define  ((->rNToGo == 1) ? 1 : 0)
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> #define  (->rNToGo == 1) ? 1 : 0)
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> #define  (->rNToGo == 1) ? 1 : 0)
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> #define  ->rNToGo == 1) ? 1 : 0)
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> #define BZ_RAND_MASK (s->rNToGo == 1) ? 1 : 0)
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> #define BZ_RAND_MASK s->rNToGo == 1) ? 1 : 0)
(85.5 %, 29798 bytes)
311c311
< #define BZ_RAND_MASK (s->rNToGo == 1) ? 1 : 0)
---
> #define BZ_RAND_MASK s->rNToGo == 1) ? 1 : 0)
311c311
< #define BZ_RAND_MASK (s->rNToGo == 1) ? 1 : 0)
---
> #define BZ_RAND_MASK ->rNToGo == 1) ? 1 : 0)
(85.5 %, 29797 bytes)
311c311
< #define BZ_RAND_MASK s->rNToGo == 1) ? 1 : 0)
---
> #define BZ_RAND_MASK ->rNToGo == 1) ? 1 : 0)
311c311
< #define BZ_RAND_MASK s->rNToGo == 1) ? 1 : 0)
---
> #define BZ_RAND_MASK rNToGo == 1) ? 1 : 0)
(85.5 %, 29796 bytes)
311c311
< #define BZ_RAND_MASK ->rNToGo == 1) ? 1 : 0)
---
> #define BZ_RAND_MASK rNToGo == 1) ? 1 : 0)
311c311
< #define BZ_RAND_MASK ->rNToGo == 1) ? 1 : 0)
---
> #define BZ_RAND_MASK  == 1) ? 1 : 0)
(85.5 %, 29794 bytes)
311c311
< #define BZ_RAND_MASK rNToGo == 1) ? 1 : 0)
---
> #define BZ_RAND_MASK  == 1) ? 1 : 0)
311c311
< #define BZ_RAND_MASK rNToGo == 1) ? 1 : 0)
---
> #define BZ_RAND_MASK   1) ? 1 : 0)
311c311
< #define BZ_RAND_MASK rNToGo == 1) ? 1 : 0)
---
> #define BZ_RAND_MASK  == ) ? 1 : 0)
(85.5 %, 29788 bytes)
311c311
< #define BZ_RAND_MASK  == 1) ? 1 : 0)
---
> #define BZ_RAND_MASK   1) ? 1 : 0)
311c311
< #define BZ_RAND_MASK  == 1) ? 1 : 0)
---
> #define BZ_RAND_MASK   ) ? 1 : 0)
(85.5 %, 29786 bytes)
311c311
< #define BZ_RAND_MASK   1) ? 1 : 0)
---
> #define BZ_RAND_MASK   ) ? 1 : 0)
311c311
< #define BZ_RAND_MASK   1) ? 1 : 0)
---
> #define BZ_RAND_MASK    ? 1 : 0)
(85.5 %, 29785 bytes)
311c311
< #define BZ_RAND_MASK   ) ? 1 : 0)
---
> #define BZ_RAND_MASK    ? 1 : 0)
311c311
< #define BZ_RAND_MASK   ) ? 1 : 0)
---
> #define BZ_RAND_MASK     1 : 0)
(85.5 %, 29784 bytes)
311c311
< #define BZ_RAND_MASK    ? 1 : 0)
---
> #define BZ_RAND_MASK     1 : 0)
311c311
< #define BZ_RAND_MASK    ? 1 : 0)
---
> #define BZ_RAND_MASK      : 0)
311c311
< #define BZ_RAND_MASK    ? 1 : 0)
---
> #define BZ_RAND_MASK     1  0)
(85.5 %, 29783 bytes)
311c311
< #define BZ_RAND_MASK     1 : 0)
---
> #define BZ_RAND_MASK      : 0)
311c311
< #define BZ_RAND_MASK     1 : 0)
---
> #define BZ_RAND_MASK       0)
(85.5 %, 29782 bytes)
311c311
< #define BZ_RAND_MASK      : 0)
---
> #define BZ_RAND_MASK       0)
311c311
< #define BZ_RAND_MASK      : 0)
---
> #define BZ_RAND_MASK       )
(85.5 %, 29781 bytes)
311c311
< #define BZ_RAND_MASK       0)
---
> #define BZ_RAND_MASK       )
311c311
< #define BZ_RAND_MASK       0)
---
> #define BZ_RAND_MASK       
(85.5 %, 29780 bytes)
311c311
< #define BZ_RAND_MASK       )
---
> #define BZ_RAND_MASK       
311c311
< #define BZ_RAND_MASK       )
---
> #define BZ_RAND_MASK       
313c313
< #define BZ_RAND_UPD_MASK                       \
---
> define BZ_RAND_UPD_MASK                       \
311c311
< #define BZ_RAND_MASK       )
---
> #define BZ_RAND_MASK       
313c313
< #define BZ_RAND_UPD_MASK                       \
---
> # BZ_RAND_UPD_MASK                       \
311c311
< #define BZ_RAND_MASK       )
---
> #define BZ_RAND_MASK       
313c313
< #define BZ_RAND_UPD_MASK                       \
---
>  BZ_RAND_UPD_MASK                       \
311c311
< #define BZ_RAND_MASK       )
---
> #define BZ_RAND_MASK       
313c313
< #define BZ_RAND_UPD_MASK                       \
---
> #define                        \
311c311
< #define BZ_RAND_MASK       )
---
> #define BZ_RAND_MASK       
313c313
< #define BZ_RAND_UPD_MASK                       \
---
> define                        \
311c311
< #define BZ_RAND_MASK       )
---
> #define BZ_RAND_MASK       
313c313
< #define BZ_RAND_UPD_MASK                       \
---
> #                        \
311c311
< #define BZ_RAND_MASK       )
---
> #define BZ_RAND_MASK       
313c313
< #define BZ_RAND_UPD_MASK                       \
---
>                         \
313c313
< #define BZ_RAND_UPD_MASK                       \
---
> define BZ_RAND_UPD_MASK                       \
313c313
< #define BZ_RAND_UPD_MASK                       \
---
>  BZ_RAND_UPD_MASK                       \
313c313
< #define BZ_RAND_UPD_MASK                       \
---
> define                        \
313c313
< #define BZ_RAND_UPD_MASK                       \
---
>                         \
313c313
< #define BZ_RAND_UPD_MASK                       \
---
> define BZ_RAND_UPD_MASK                       
313c313
< #define BZ_RAND_UPD_MASK                       \
---
>  BZ_RAND_UPD_MASK                       
313c313
< #define BZ_RAND_UPD_MASK                       \
---
> define                        
313c313
< #define BZ_RAND_UPD_MASK                       \
---
>                         
313c313
< #define BZ_RAND_UPD_MASK                       \
---
> # BZ_RAND_UPD_MASK                       \
313c313
< #define BZ_RAND_UPD_MASK                       \
---
> #                        \
313c313
< #define BZ_RAND_UPD_MASK                       \
---
> # BZ_RAND_UPD_MASK                       
313c313
< #define BZ_RAND_UPD_MASK                       \
---
> #                        
(85.5 %, 29779 bytes)
313c313
< #define BZ_RAND_UPD_MASK                       \
---
> define BZ_RAND_UPD_MASK                       \
313c313
< #define BZ_RAND_UPD_MASK                       \
---
>  BZ_RAND_UPD_MASK                       \
313c313
< #define BZ_RAND_UPD_MASK                       \
---
> define                        \
313c313
< #define BZ_RAND_UPD_MASK                       \
---
>                         \
313c313
< #define BZ_RAND_UPD_MASK                       \
---
> define BZ_RAND_UPD_MASK                       
313c313
< #define BZ_RAND_UPD_MASK                       \
---
>  BZ_RAND_UPD_MASK                       
313c313
< #define BZ_RAND_UPD_MASK                       \
---
> define                        
313c313
< #define BZ_RAND_UPD_MASK                       \
---
>                         
313c313
< #define BZ_RAND_UPD_MASK                       \
---
> # BZ_RAND_UPD_MASK                       \
313c313
< #define BZ_RAND_UPD_MASK                       \
---
> #                        \
313c313
< #define BZ_RAND_UPD_MASK                       \
---
> # BZ_RAND_UPD_MASK                       
313c313
< #define BZ_RAND_UPD_MASK                       \
---
> #                        
313,314c313,314
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0)                                            \
---
> # BZ_RAND_UPD_MASK                       \
>     (s->rNToGo == 0)                                            \
313,314c313,314
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0)                                            \
---
> #                        \
>     (s->rNToGo == 0)                                            \
313,314c313,314
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0)                                            \
---
> # BZ_RAND_UPD_MASK                       
>     (s->rNToGo == 0)                                            \
313,314c313,314
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0)                                            \
---
> #                        
>     (s->rNToGo == 0)                                            \
313c313
< #define BZ_RAND_UPD_MASK                       \
---
> #define                        \
313c313
< #define BZ_RAND_UPD_MASK                       \
---
> #define                        
313,314c313,314
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0)                                            \
---
> #define                        \
>     (s->rNToGo == 0)                                            \
313,314c313,314
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0)                                            \
---
> #define                        
>     (s->rNToGo == 0)                                            \
313,314c313,314
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0)                                            \
---
> #define                        \
>    if s->rNToGo == 0)                                            \
313,314c313,314
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0)                                            \
---
> #define                        
>    if s->rNToGo == 0)                                            \
313,314c313,314
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0)                                            \
---
> #define                        \
>     s->rNToGo == 0)                                            \
313,314c313,314
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0)                                            \
---
> #define                        
>     s->rNToGo == 0)                                            \
313c313
< #define BZ_RAND_UPD_MASK                       \
---
> #define BZ_RAND_UPD_MASK                       
313,314c313,314
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0)                                            \
---
> #define BZ_RAND_UPD_MASK                       
>     (s->rNToGo == 0)                                            \
313,314c313,314
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0)                                            \
---
> #define BZ_RAND_UPD_MASK                       
>    if s->rNToGo == 0)                                            \
313,314c313,314
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0)                                            \
---
> #define BZ_RAND_UPD_MASK                       
>     s->rNToGo == 0)                                            \
313,314c313,314
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0)                                            \
---
> #define BZ_RAND_UPD_MASK                       
>    if (->rNToGo == 0)                                            \
313,314c313,314
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0)                                            \
---
> #define BZ_RAND_UPD_MASK                       
>     (->rNToGo == 0)                                            \
313,314c313,314
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0)                                            \
---
> #define BZ_RAND_UPD_MASK                       
>    if ->rNToGo == 0)                                            \
313,314c313,314
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0)                                            \
---
> #define BZ_RAND_UPD_MASK                       
>     ->rNToGo == 0)                                            \
314c314
<    if (s->rNToGo == 0)                                            \
---
>     (s->rNToGo == 0)                                            \
314c314
<    if (s->rNToGo == 0)                                            \
---
>     s->rNToGo == 0)                                            \
(85.5 %, 29777 bytes)
314c314
<     (s->rNToGo == 0)                                            \
---
>     s->rNToGo == 0)                                            \
314c314
<     (s->rNToGo == 0)                                            \
---
>     ->rNToGo == 0)                                            \
(85.5 %, 29776 bytes)
314c314
<     s->rNToGo == 0)                                            \
---
>     ->rNToGo == 0)                                            \
314c314
<     s->rNToGo == 0)                                            \
---
>     rNToGo == 0)                                            \
314c314
<     s->rNToGo == 0)                                            \
---
>     -> == 0)                                            \
(85.5 %, 29775 bytes)
314c314
<     ->rNToGo == 0)                                            \
---
>     rNToGo == 0)                                            \
314c314
<     ->rNToGo == 0)                                            \
---
>      == 0)                                            \
(85.5 %, 29773 bytes)
314c314
<     rNToGo == 0)                                            \
---
>      == 0)                                            \
314c314
<     rNToGo == 0)                                            \
---
>       0)                                            \
314c314
<     rNToGo == 0)                                            \
---
>      == )                                            \
(85.5 %, 29767 bytes)
314c314
<      == 0)                                            \
---
>       0)                                            \
314c314
<      == 0)                                            \
---
>       )                                            \
314c314
<      == 0)                                            \
---
>       0                                            \
(85.5 %, 29765 bytes)
314c314
<       0)                                            \
---
>       )                                            \
314c314
<       0)                                            \
---
>                                                   \
(85.5 %, 29764 bytes)
314c314
<       )                                            \
---
>                                                   \
314c314
<       )                                            \
---
>                                                   
314,315c314,315
<       )                                            \
<    s->rNToGo--;
---
>                                                   \
>    ->rNToGo--;
(85.5 %, 29763 bytes)
314c314
<                                                   \
---
>                                                   
314,315c314,315
<                                                   \
<    s->rNToGo--;
---
>                                                   
>    ->rNToGo--;
314,315c314,315
<                                                   \
<    s->rNToGo--;
---
>                                                   
>    srNToGo--;
314,315c314,315
<                                                   \
<    s->rNToGo--;
---
>                                                   
>    rNToGo--;
314,315c314,315
<                                                   \
<    s->rNToGo--;
---
>                                                   
>    s->--;
314,315c314,315
<                                                   \
<    s->rNToGo--;
---
>                                                   
>    ->--;
314,315c314,315
<                                                   \
<    s->rNToGo--;
---
>                                                   
>    s--;
314,315c314,315
<                                                   \
<    s->rNToGo--;
---
>                                                   
>    --;
315c315
<    s->rNToGo--;
---
>    ->rNToGo--;
315c315
<    s->rNToGo--;
---
>    rNToGo--;
315c315
<    s->rNToGo--;
---
>    ->--;
(85.5 %, 29762 bytes)
315c315
<    ->rNToGo--;
---
>    rNToGo--;
315c315
<    ->rNToGo--;
---
>    --;
315c315
<    ->rNToGo--;
---
>    rNToGo;
(85.5 %, 29760 bytes)
315c315
<    rNToGo--;
---
>    --;
315c315
<    rNToGo--;
---
>    ;
(85.5 %, 29754 bytes)
315c315
<    --;
---
>    ;
315c315
<    --;
---
>    
315c315
<    --;
---
>    ;
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> define BZ_INITIALISE_CRC(crcVar)              \
315c315
<    --;
---
>    
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> define BZ_INITIALISE_CRC(crcVar)              \
(85.5 %, 29752 bytes)
315c315
<    ;
---
>    
315c315
<    ;
---
>    
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> define BZ_INITIALISE_CRC(crcVar)              \
315c315
<    ;
---
>    
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> # BZ_INITIALISE_CRC(crcVar)              \
315c315
<    ;
---
>    
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
>  BZ_INITIALISE_CRC(crcVar)              \
315c315
<    ;
---
>    
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> #define (crcVar)              \
315c315
<    ;
---
>    
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> define (crcVar)              \
315c315
<    ;
---
>    
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> # (crcVar)              \
315c315
<    ;
---
>    
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
>  (crcVar)              \
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> define BZ_INITIALISE_CRC(crcVar)              \
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
>  BZ_INITIALISE_CRC(crcVar)              \
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> define (crcVar)              \
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
>  (crcVar)              \
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> define BZ_INITIALISE_CRCcrcVar)              \
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
>  BZ_INITIALISE_CRCcrcVar)              \
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> define crcVar)              \
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
>  crcVar)              \
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> # BZ_INITIALISE_CRC(crcVar)              \
(85.5 %, 29751 bytes)
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> define BZ_INITIALISE_CRC(crcVar)              \
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
>  BZ_INITIALISE_CRC(crcVar)              \
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> define (crcVar)              \
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
>  (crcVar)              \
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> define BZ_INITIALISE_CRCcrcVar)              \
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
>  BZ_INITIALISE_CRCcrcVar)              \
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> define crcVar)              \
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
>  crcVar)              \
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> # BZ_INITIALISE_CRC(crcVar)              \
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> # (crcVar)              \
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> # BZ_INITIALISE_CRCcrcVar)              \
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> # crcVar)              \
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> # BZ_INITIALISE_CRC()              \
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> # ()              \
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> # BZ_INITIALISE_CRC)              \
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> # )              \
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> #define (crcVar)              \
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> #define crcVar)              \
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> #define ()              \
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> #define )              \
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> #define (crcVar              \
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> #define crcVar              \
(85.5 %, 29733 bytes)
323c323
< #define crcVar)              \
---
> #define               \
323c323
< #define crcVar)              \
---
> #define )              
323c323
< #define crcVar)              \
---
> #define               
323c323
< #define crcVar)              \
---
> #define )              \
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> define BZ_FINALISE_CRC(crcVar)                \
323c323
< #define crcVar)              \
---
> #define               \
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> define BZ_FINALISE_CRC(crcVar)                \
323c323
< #define crcVar)              \
---
> #define )              
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> define BZ_FINALISE_CRC(crcVar)                \
323c323
< #define crcVar)              \
---
> #define               
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> define BZ_FINALISE_CRC(crcVar)                \
323c323
< #define crcVar)              \
---
> #define crcVar              \
323c323
< #define crcVar)              \
---
> #define crcVar              
(85.5 %, 29732 bytes)
323c323
< #define crcVar              \
---
> #define crcVar              
323c323
< #define crcVar              \
---
> #define crcVar              
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> define BZ_FINALISE_CRC(crcVar)                \
323c323
< #define crcVar              \
---
> #define crcVar              
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> # BZ_FINALISE_CRC(crcVar)                \
323c323
< #define crcVar              \
---
> #define crcVar              
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
>  BZ_FINALISE_CRC(crcVar)                \
323c323
< #define crcVar              \
---
> #define crcVar              
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> #define (crcVar)                \
323c323
< #define crcVar              \
---
> #define crcVar              
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> define (crcVar)                \
323c323
< #define crcVar              \
---
> #define crcVar              
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> # (crcVar)                \
323c323
< #define crcVar              \
---
> #define crcVar              
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
>  (crcVar)                \
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> define BZ_FINALISE_CRC(crcVar)                \
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
>  BZ_FINALISE_CRC(crcVar)                \
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> define (crcVar)                \
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
>  (crcVar)                \
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> define BZ_FINALISE_CRCcrcVar)                \
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
>  BZ_FINALISE_CRCcrcVar)                \
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> define crcVar)                \
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
>  crcVar)                \
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> # BZ_FINALISE_CRC(crcVar)                \
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> # (crcVar)                \
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> # BZ_FINALISE_CRCcrcVar)                \
(85.5 %, 29731 bytes)
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> define BZ_FINALISE_CRC(crcVar)                \
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
>  BZ_FINALISE_CRC(crcVar)                \
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> define (crcVar)                \
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
>  (crcVar)                \
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> define BZ_FINALISE_CRCcrcVar)                \
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
>  BZ_FINALISE_CRCcrcVar)                \
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> define crcVar)                \
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
>  crcVar)                \
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> # BZ_FINALISE_CRC(crcVar)                \
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> # (crcVar)                \
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> # BZ_FINALISE_CRCcrcVar)                \
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> # crcVar)                \
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> # BZ_FINALISE_CRC()                \
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> # ()                \
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> # BZ_FINALISE_CRC)                \
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> # )                \
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> #define (crcVar)                \
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> #define crcVar)                \
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> #define ()                \
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> #define )                \
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> #define (crcVar                \
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> #define crcVar                \
(85.5 %, 29715 bytes)
326c326
< #define crcVar)                \
---
> #define                 \
326c326
< #define crcVar)                \
---
> #define )                
326c326
< #define crcVar)                \
---
> #define                 
326c326
< #define crcVar)                \
---
> #define )                \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> define BZ_UPDATE_CRC(crcVar,cha)              \
326c326
< #define crcVar)                \
---
> #define                 \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> define BZ_UPDATE_CRC(crcVar,cha)              \
326c326
< #define crcVar)                \
---
> #define )                
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> define BZ_UPDATE_CRC(crcVar,cha)              \
326c326
< #define crcVar)                \
---
> #define                 
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> define BZ_UPDATE_CRC(crcVar,cha)              \
326c326
< #define crcVar)                \
---
> #define crcVar                \
326c326
< #define crcVar)                \
---
> #define crcVar                
326c326
< #define crcVar)                \
---
> #define crcVar                \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> define BZ_UPDATE_CRC(crcVar,cha)              \
(85.5 %, 29714 bytes)
326c326
< #define crcVar                \
---
> #define crcVar                
326c326
< #define crcVar                \
---
> #define crcVar                
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> define BZ_UPDATE_CRC(crcVar,cha)              \
326c326
< #define crcVar                \
---
> #define crcVar                
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> # BZ_UPDATE_CRC(crcVar,cha)              \
326c326
< #define crcVar                \
---
> #define crcVar                
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
>  BZ_UPDATE_CRC(crcVar,cha)              \
326c326
< #define crcVar                \
---
> #define crcVar                
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #define (crcVar,cha)              \
326c326
< #define crcVar                \
---
> #define crcVar                
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> define (crcVar,cha)              \
326c326
< #define crcVar                \
---
> #define crcVar                
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> # (crcVar,cha)              \
326c326
< #define crcVar                \
---
> #define crcVar                
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
>  (crcVar,cha)              \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> define BZ_UPDATE_CRC(crcVar,cha)              \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
>  BZ_UPDATE_CRC(crcVar,cha)              \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> define (crcVar,cha)              \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
>  (crcVar,cha)              \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> define BZ_UPDATE_CRCcrcVar,cha)              \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
>  BZ_UPDATE_CRCcrcVar,cha)              \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> define crcVar,cha)              \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
>  crcVar,cha)              \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> # BZ_UPDATE_CRC(crcVar,cha)              \
(85.5 %, 29713 bytes)
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> define BZ_UPDATE_CRC(crcVar,cha)              \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
>  BZ_UPDATE_CRC(crcVar,cha)              \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> define (crcVar,cha)              \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
>  (crcVar,cha)              \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> define BZ_UPDATE_CRCcrcVar,cha)              \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
>  BZ_UPDATE_CRCcrcVar,cha)              \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> define crcVar,cha)              \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
>  crcVar,cha)              \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> # BZ_UPDATE_CRC(crcVar,cha)              \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> # (crcVar,cha)              \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> # BZ_UPDATE_CRCcrcVar,cha)              \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> # crcVar,cha)              \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> # BZ_UPDATE_CRC(,cha)              \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> # (,cha)              \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> # BZ_UPDATE_CRC,cha)              \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> # ,cha)              \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #define (crcVar,cha)              \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #define crcVar,cha)              \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #define (,cha)              \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #define ,cha)              \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #define (crcVarcha)              \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #define crcVarcha)              \
(85.5 %, 29699 bytes)
329c329
< #define crcVar,cha)              \
---
> #define cha)              \
329c329
< #define crcVar,cha)              \
---
> #define ,)              \
329c329
< #define crcVar,cha)              \
---
> #define )              \
329c329
< #define crcVar,cha)              \
---
> #define ,cha              \
329c329
< #define crcVar,cha)              \
---
> #define cha              \
(85.5 %, 29692 bytes)
329c329
< #define cha)              \
---
> #define               \
329c329
< #define cha)              \
---
> #define )              
329c329
< #define cha)              \
---
> #define               
329c329
< #define cha)              \
---
> #define )              \
336c336
< #define BZ_M_IDLE      1
---
> define BZ_M_IDLE      1
329c329
< #define cha)              \
---
> #define               \
336c336
< #define BZ_M_IDLE      1
---
> define BZ_M_IDLE      1
329c329
< #define cha)              \
---
> #define )              
336c336
< #define BZ_M_IDLE      1
---
> define BZ_M_IDLE      1
329c329
< #define cha)              \
---
> #define               
336c336
< #define BZ_M_IDLE      1
---
> define BZ_M_IDLE      1
329c329
< #define cha)              \
---
> #define cha              \
329c329
< #define cha)              \
---
> #define cha              
329c329
< #define cha)              \
---
> #define cha              \
336c336
< #define BZ_M_IDLE      1
---
> define BZ_M_IDLE      1
329c329
< #define cha)              \
---
> #define cha              
336c336
< #define BZ_M_IDLE      1
---
> define BZ_M_IDLE      1
329c329
< #define cha)              \
---
> #define cha              \
336c336
< #define BZ_M_IDLE      1
---
> # BZ_M_IDLE      1
(85.5 %, 29691 bytes)
329c329
< #define cha              \
---
> #define cha              
329c329
< #define cha              \
---
> #define cha              
336c336
< #define BZ_M_IDLE      1
---
> define BZ_M_IDLE      1
329c329
< #define cha              \
---
> #define cha              
336c336
< #define BZ_M_IDLE      1
---
> # BZ_M_IDLE      1
329c329
< #define cha              \
---
> #define cha              
336c336
< #define BZ_M_IDLE      1
---
>  BZ_M_IDLE      1
329c329
< #define cha              \
---
> #define cha              
336c336
< #define BZ_M_IDLE      1
---
> #define       1
329c329
< #define cha              \
---
> #define cha              
336c336
< #define BZ_M_IDLE      1
---
> define       1
329c329
< #define cha              \
---
> #define cha              
336c336
< #define BZ_M_IDLE      1
---
> #       1
329c329
< #define cha              \
---
> #define cha              
336c336
< #define BZ_M_IDLE      1
---
>        1
(85.5 %, 29690 bytes)
336c336
< #define BZ_M_IDLE      1
---
> define BZ_M_IDLE      1
336c336
< #define BZ_M_IDLE      1
---
>  BZ_M_IDLE      1
336c336
< #define BZ_M_IDLE      1
---
> define       1
336c336
< #define BZ_M_IDLE      1
---
>        1
336c336
< #define BZ_M_IDLE      1
---
> define BZ_M_IDLE      
336c336
< #define BZ_M_IDLE      1
---
>  BZ_M_IDLE      
336c336
< #define BZ_M_IDLE      1
---
> define       
336c336
< #define BZ_M_IDLE      1
---
>        
336c336
< #define BZ_M_IDLE      1
---
> # BZ_M_IDLE      1
336c336
< #define BZ_M_IDLE      1
---
> #       1
(85.5 %, 29673 bytes)
337c337
< #define BZ_M_RUNNING   2
---
>     
337c337
< #define BZ_M_RUNNING   2
---
> # BZ_M_RUNNING   2
337c337
< #define BZ_M_RUNNING   2
---
> #    2
337c337
< #define BZ_M_RUNNING   2
---
> # BZ_M_RUNNING   
337c337
< #define BZ_M_RUNNING   2
---
> #    
337,338c337,338
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> # BZ_M_RUNNING   2
> define BZ_M_FLUSHING  3
337,338c337,338
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #    2
> define BZ_M_FLUSHING  3
337,338c337,338
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> # BZ_M_RUNNING   
> define BZ_M_FLUSHING  3
337,338c337,338
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #    
> define BZ_M_FLUSHING  3
337c337
< #define BZ_M_RUNNING   2
---
> #define    2
337c337
< #define BZ_M_RUNNING   2
---
> #define    
337,338c337,338
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define    2
> define BZ_M_FLUSHING  3
337,338c337,338
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define    
> define BZ_M_FLUSHING  3
337,338c337,338
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define    2
> # BZ_M_FLUSHING  3
337,338c337,338
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define    
> # BZ_M_FLUSHING  3
337,338c337,338
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define    2
>  BZ_M_FLUSHING  3
337,338c337,338
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define    
>  BZ_M_FLUSHING  3
337c337
< #define BZ_M_RUNNING   2
---
> #define BZ_M_RUNNING   
337,338c337,338
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define BZ_M_RUNNING   
> define BZ_M_FLUSHING  3
337,338c337,338
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define BZ_M_RUNNING   
> # BZ_M_FLUSHING  3
337,338c337,338
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define BZ_M_RUNNING   
>  BZ_M_FLUSHING  3
337,338c337,338
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define BZ_M_RUNNING   
> #define   3
337,338c337,338
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define BZ_M_RUNNING   
> define   3
337,338c337,338
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define BZ_M_RUNNING   
> #   3
337,338c337,338
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define BZ_M_RUNNING   
>    3
338c338
< #define BZ_M_FLUSHING  3
---
> define BZ_M_FLUSHING  3
338c338
< #define BZ_M_FLUSHING  3
---
>  BZ_M_FLUSHING  3
338c338
< #define BZ_M_FLUSHING  3
---
> define   3
338c338
< #define BZ_M_FLUSHING  3
---
>    3
338c338
< #define BZ_M_FLUSHING  3
---
> define BZ_M_FLUSHING  
338c338
< #define BZ_M_FLUSHING  3
---
>  BZ_M_FLUSHING  
338c338
< #define BZ_M_FLUSHING  3
---
> define   
338c338
< #define BZ_M_FLUSHING  3
---
>    
338c338
< #define BZ_M_FLUSHING  3
---
> # BZ_M_FLUSHING  3
338c338
< #define BZ_M_FLUSHING  3
---
> #   3
(85.5 %, 29652 bytes)
339c339
< #define BZ_M_FINISHING 4
---
>   
339c339
< #define BZ_M_FINISHING 4
---
> # BZ_M_FINISHING 4
339c339
< #define BZ_M_FINISHING 4
---
> #  4
(85.5 %, 29630 bytes)
341c341
< #define BZ_S_OUTPUT    1
---
>      
341c341
< #define BZ_S_OUTPUT    1
---
> # BZ_S_OUTPUT    1
341c341
< #define BZ_S_OUTPUT    1
---
> #     1
341c341
< #define BZ_S_OUTPUT    1
---
> # BZ_S_OUTPUT    
(85.6 %, 29611 bytes)
342c342
< #define BZ_S_INPUT     2
---
>       
342c342
< #define BZ_S_INPUT     2
---
> # BZ_S_INPUT     2
342c342
< #define BZ_S_INPUT     2
---
> #      2
342c342
< #define BZ_S_INPUT     2
---
> # BZ_S_INPUT     
342c342
< #define BZ_S_INPUT     2
---
> #      
342c342
< #define BZ_S_INPUT     2
---
> # BZ_S_INPUT     2
344c344
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 2
342c342
< #define BZ_S_INPUT     2
---
> #      2
344c344
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 2
342c342
< #define BZ_S_INPUT     2
---
> # BZ_S_INPUT     
344c344
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 2
342c342
< #define BZ_S_INPUT     2
---
> #      
344c344
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 2
342c342
< #define BZ_S_INPUT     2
---
> #define      2
342c342
< #define BZ_S_INPUT     2
---
> #define      
342c342
< #define BZ_S_INPUT     2
---
> #define      2
344c344
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 2
342c342
< #define BZ_S_INPUT     2
---
> #define      
344c344
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 2
342c342
< #define BZ_S_INPUT     2
---
> #define      2
344c344
< #define BZ_N_RADIX 2
---
> # BZ_N_RADIX 2
342c342
< #define BZ_S_INPUT     2
---
> #define      
344c344
< #define BZ_N_RADIX 2
---
> # BZ_N_RADIX 2
342c342
< #define BZ_S_INPUT     2
---
> #define      2
344c344
< #define BZ_N_RADIX 2
---
>  BZ_N_RADIX 2
342c342
< #define BZ_S_INPUT     2
---
> #define      
344c344
< #define BZ_N_RADIX 2
---
>  BZ_N_RADIX 2
342c342
< #define BZ_S_INPUT     2
---
> #define BZ_S_INPUT     
342c342
< #define BZ_S_INPUT     2
---
> #define BZ_S_INPUT     
344c344
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 2
342c342
< #define BZ_S_INPUT     2
---
> #define BZ_S_INPUT     
344c344
< #define BZ_N_RADIX 2
---
> # BZ_N_RADIX 2
342c342
< #define BZ_S_INPUT     2
---
> #define BZ_S_INPUT     
344c344
< #define BZ_N_RADIX 2
---
>  BZ_N_RADIX 2
342c342
< #define BZ_S_INPUT     2
---
> #define BZ_S_INPUT     
344c344
< #define BZ_N_RADIX 2
---
> #define  2
342c342
< #define BZ_S_INPUT     2
---
> #define BZ_S_INPUT     
344c344
< #define BZ_N_RADIX 2
---
> define  2
342c342
< #define BZ_S_INPUT     2
---
> #define BZ_S_INPUT     
344c344
< #define BZ_N_RADIX 2
---
> #  2
342c342
< #define BZ_S_INPUT     2
---
> #define BZ_S_INPUT     
344c344
< #define BZ_N_RADIX 2
---
>   2
344c344
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 2
344c344
< #define BZ_N_RADIX 2
---
>  BZ_N_RADIX 2
344c344
< #define BZ_N_RADIX 2
---
> define  2
344c344
< #define BZ_N_RADIX 2
---
>   2
344c344
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 
344c344
< #define BZ_N_RADIX 2
---
>  BZ_N_RADIX 
344c344
< #define BZ_N_RADIX 2
---
> define  
344c344
< #define BZ_N_RADIX 2
---
>   
344c344
< #define BZ_N_RADIX 2
---
> # BZ_N_RADIX 2
344c344
< #define BZ_N_RADIX 2
---
> #  2
344c344
< #define BZ_N_RADIX 2
---
> # BZ_N_RADIX 
344c344
< #define BZ_N_RADIX 2
---
> #  
344,345c344,345
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> # BZ_N_RADIX 2
> define BZ_N_QSORT 2
344,345c344,345
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> #  2
> define BZ_N_QSORT 2
344,345c344,345
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> # BZ_N_RADIX 
> define BZ_N_QSORT 2
344,345c344,345
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> #  
> define BZ_N_QSORT 2
344c344
< #define BZ_N_RADIX 2
---
> #define  2
344c344
< #define BZ_N_RADIX 2
---
> #define  
344,345c344,345
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> #define  2
> define BZ_N_QSORT 2
344,345c344,345
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> #define  
> define BZ_N_QSORT 2
344,345c344,345
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> #define  2
> # BZ_N_QSORT 2
344,345c344,345
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> #define  
> # BZ_N_QSORT 2
344,345c344,345
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> #define  2
>  BZ_N_QSORT 2
344,345c344,345
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> #define  
>  BZ_N_QSORT 2
344c344
< #define BZ_N_RADIX 2
---
> #define BZ_N_RADIX 
344,345c344,345
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> #define BZ_N_RADIX 
> define BZ_N_QSORT 2
344,345c344,345
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> #define BZ_N_RADIX 
> # BZ_N_QSORT 2
344,345c344,345
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> #define BZ_N_RADIX 
>  BZ_N_QSORT 2
344,345c344,345
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> #define BZ_N_RADIX 
> #define  2
344,345c344,345
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> #define BZ_N_RADIX 
> define  2
344,345c344,345
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> #define BZ_N_RADIX 
> #  2
344,345c344,345
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> #define BZ_N_RADIX 
>   2
345c345
< #define BZ_N_QSORT 2
---
> define BZ_N_QSORT 2
345c345
< #define BZ_N_QSORT 2
---
>  BZ_N_QSORT 2
345c345
< #define BZ_N_QSORT 2
---
> define  2
345c345
< #define BZ_N_QSORT 2
---
>   2
345c345
< #define BZ_N_QSORT 2
---
> define BZ_N_QSORT 
345c345
< #define BZ_N_QSORT 2
---
>  BZ_N_QSORT 
345c345
< #define BZ_N_QSORT 2
---
> define  
345c345
< #define BZ_N_QSORT 2
---
>   
345c345
< #define BZ_N_QSORT 2
---
> # BZ_N_QSORT 2
(85.6 %, 29610 bytes)
345c345
< #define BZ_N_QSORT 2
---
> define BZ_N_QSORT 2
345c345
< #define BZ_N_QSORT 2
---
>  BZ_N_QSORT 2
345c345
< #define BZ_N_QSORT 2
---
> define  2
345c345
< #define BZ_N_QSORT 2
---
>   2
345c345
< #define BZ_N_QSORT 2
---
> define BZ_N_QSORT 
345c345
< #define BZ_N_QSORT 2
---
>  BZ_N_QSORT 
345c345
< #define BZ_N_QSORT 2
---
> define  
345c345
< #define BZ_N_QSORT 2
---
>   
345c345
< #define BZ_N_QSORT 2
---
> # BZ_N_QSORT 2
345c345
< #define BZ_N_QSORT 2
---
> #  2
345c345
< #define BZ_N_QSORT 2
---
> # BZ_N_QSORT 
345c345
< #define BZ_N_QSORT 2
---
> #  
345,346c345,346
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> # BZ_N_QSORT 2
> define BZ_N_SHELL 8
345,346c345,346
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> #  2
> define BZ_N_SHELL 8
345,346c345,346
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> # BZ_N_QSORT 
> define BZ_N_SHELL 8
345,346c345,346
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> #  
> define BZ_N_SHELL 8
345c345
< #define BZ_N_QSORT 2
---
> #define  2
345c345
< #define BZ_N_QSORT 2
---
> #define  
345,346c345,346
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> #define  2
> define BZ_N_SHELL 8
345,346c345,346
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> #define  
> define BZ_N_SHELL 8
345,346c345,346
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> #define  2
> # BZ_N_SHELL 8
345,346c345,346
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> #define  
> # BZ_N_SHELL 8
345,346c345,346
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> #define  2
>  BZ_N_SHELL 8
345,346c345,346
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> #define  
>  BZ_N_SHELL 8
345c345
< #define BZ_N_QSORT 2
---
> #define BZ_N_QSORT 
345,346c345,346
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> #define BZ_N_QSORT 
> define BZ_N_SHELL 8
345,346c345,346
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> #define BZ_N_QSORT 
> # BZ_N_SHELL 8
345,346c345,346
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> #define BZ_N_QSORT 
>  BZ_N_SHELL 8
345,346c345,346
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> #define BZ_N_QSORT 
> #define  8
345,346c345,346
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> #define BZ_N_QSORT 
> define  8
345,346c345,346
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> #define BZ_N_QSORT 
> #  8
345,346c345,346
< #define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
---
> #define BZ_N_QSORT 
>   8
346c346
< #define BZ_N_SHELL 8
---
> define BZ_N_SHELL 8
346c346
< #define BZ_N_SHELL 8
---
>  BZ_N_SHELL 8
346c346
< #define BZ_N_SHELL 8
---
> define  8
346c346
< #define BZ_N_SHELL 8
---
>   8
346c346
< #define BZ_N_SHELL 8
---
> define BZ_N_SHELL 
346c346
< #define BZ_N_SHELL 8
---
>  BZ_N_SHELL 
346c346
< #define BZ_N_SHELL 8
---
> define  
346c346
< #define BZ_N_SHELL 8
---
>   
346c346
< #define BZ_N_SHELL 8
---
> # BZ_N_SHELL 8
346c346
< #define BZ_N_SHELL 8
---
> #  8
346c346
< #define BZ_N_SHELL 8
---
> # BZ_N_SHELL 
(85.6 %, 29609 bytes)
346c346
< #define BZ_N_SHELL 8
---
> define BZ_N_SHELL 8
346c346
< #define BZ_N_SHELL 8
---
>  BZ_N_SHELL 8
346c346
< #define BZ_N_SHELL 8
---
> define  8
346c346
< #define BZ_N_SHELL 8
---
>   8
346c346
< #define BZ_N_SHELL 8
---
> define BZ_N_SHELL 
346c346
< #define BZ_N_SHELL 8
---
>  BZ_N_SHELL 
346c346
< #define BZ_N_SHELL 8
---
> define  
346c346
< #define BZ_N_SHELL 8
---
>   
346c346
< #define BZ_N_SHELL 8
---
> # BZ_N_SHELL 8
346c346
< #define BZ_N_SHELL 8
---
> #  8
346c346
< #define BZ_N_SHELL 8
---
> # BZ_N_SHELL 
346c346
< #define BZ_N_SHELL 8
---
> #  
346,347c346,347
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> # BZ_N_SHELL 8
> define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
346,347c346,347
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #  8
> define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
346,347c346,347
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> # BZ_N_SHELL 
> define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
346,347c346,347
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #  
> define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
346c346
< #define BZ_N_SHELL 8
---
> #define  8
346c346
< #define BZ_N_SHELL 8
---
> #define  
346,347c346,347
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define  8
> define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
346,347c346,347
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define  
> define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
346,347c346,347
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define  8
> # BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
346,347c346,347
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define  
> # BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
346,347c346,347
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define  8
>  BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
346,347c346,347
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define  
>  BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
346c346
< #define BZ_N_SHELL 8
---
> #define BZ_N_SHELL 
346,347c346,347
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_SHELL 
> define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
346,347c346,347
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_SHELL 
> # BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
346,347c346,347
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_SHELL 
>  BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
346,347c346,347
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_SHELL 
> #define  (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
346,347c346,347
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_SHELL 
> define  (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
346,347c346,347
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_SHELL 
> #  (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
346,347c346,347
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_SHELL 
>   (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
>  BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> define  (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
>   (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
>  BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> define  BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
>   BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> # BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #  (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
(85.6 %, 29608 bytes)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
>  BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> define  (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
>   (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
>  BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> define  BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
>   BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> # BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #  (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> # BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #  BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> # BZ_N_OVERSHOOT ( + BZ_N_QSORT + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #  ( + BZ_N_QSORT + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> # BZ_N_OVERSHOOT  + BZ_N_QSORT + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #   + BZ_N_QSORT + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define  (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define  BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define  ( + BZ_N_QSORT + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define   + BZ_N_QSORT + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define  (BZ_N_RADIX  BZ_N_QSORT + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define  BZ_N_RADIX  BZ_N_QSORT + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define  (  BZ_N_QSORT + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define    BZ_N_QSORT + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT  + BZ_N_QSORT + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT BZ_N_RADIX  BZ_N_QSORT + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT   BZ_N_QSORT + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT BZ_N_RADIX +  + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT  +  + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT BZ_N_RADIX   + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT    + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT ( + BZ_N_QSORT + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT (  BZ_N_QSORT + BZ_N_SHELL + 2)
(85.6 %, 29598 bytes)
347c347
< #define BZ_N_OVERSHOOT ( + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT (  BZ_N_QSORT + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT ( + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT (   + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT ( + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT (  BZ_N_QSORT  BZ_N_SHELL + 2)
(85.6 %, 29597 bytes)
347c347
< #define BZ_N_OVERSHOOT (  BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT (   + BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (  BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT (    BZ_N_SHELL + 2)
(85.6 %, 29587 bytes)
347c347
< #define BZ_N_OVERSHOOT (   + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT (    BZ_N_SHELL + 2)
347c347
< #define BZ_N_OVERSHOOT (   + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT (     + 2)
347c347
< #define BZ_N_OVERSHOOT (   + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT (    BZ_N_SHELL  2)
(85.6 %, 29586 bytes)
347c347
< #define BZ_N_OVERSHOOT (    BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT (     + 2)
347c347
< #define BZ_N_OVERSHOOT (    BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT (      2)
347c347
< #define BZ_N_OVERSHOOT (    BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT (     + )
(85.6 %, 29576 bytes)
347c347
< #define BZ_N_OVERSHOOT (     + 2)
---
> #define BZ_N_OVERSHOOT (      2)
347c347
< #define BZ_N_OVERSHOOT (     + 2)
---
> #define BZ_N_OVERSHOOT (      )
347c347
< #define BZ_N_OVERSHOOT (     + 2)
---
> #define BZ_N_OVERSHOOT (      2
347c347
< #define BZ_N_OVERSHOOT (     + 2)
---
> #define BZ_N_OVERSHOOT (      
347c347,348
< #define BZ_N_OVERSHOOT (     + 2)
---
> #define BZ_N_OVERSHOOT (      2)
> 
354d354
< typedef
347c347,348
< #define BZ_N_OVERSHOOT (     + 2)
---
> #define BZ_N_OVERSHOOT (      )
> 
354d354
< typedef
347c347,348
< #define BZ_N_OVERSHOOT (     + 2)
---
> #define BZ_N_OVERSHOOT (      2
> 
354d354
< typedef
347c347,348
< #define BZ_N_OVERSHOOT (     + 2)
---
> #define BZ_N_OVERSHOOT (      
> 
354d354
< typedef
347c347
< #define BZ_N_OVERSHOOT (     + 2)
---
> #define BZ_N_OVERSHOOT (     + )
347c347
< #define BZ_N_OVERSHOOT (     + 2)
---
> #define BZ_N_OVERSHOOT (     + 
347c347,348
< #define BZ_N_OVERSHOOT (     + 2)
---
> #define BZ_N_OVERSHOOT (     + )
> 
354d354
< typedef
(85.6 %, 29575 bytes)
347c347
< #define BZ_N_OVERSHOOT (      2)
---
> #define BZ_N_OVERSHOOT (      )
347c347
< #define BZ_N_OVERSHOOT (      2)
---
> #define BZ_N_OVERSHOOT (      
347c347,348
< #define BZ_N_OVERSHOOT (      2)
---
> #define BZ_N_OVERSHOOT (      )
> 
354d354
< typedef
347c347,348
< #define BZ_N_OVERSHOOT (      2)
---
> #define BZ_N_OVERSHOOT (      
> 
354d354
< typedef
347c347
< #define BZ_N_OVERSHOOT (      2)
---
> #define BZ_N_OVERSHOOT (      )
355c355
<    struct {
---
>     {
347c347
< #define BZ_N_OVERSHOOT (      2)
---
> #define BZ_N_OVERSHOOT (      
355c355
<    struct {
---
>     {
347c347
< #define BZ_N_OVERSHOOT (      2)
---
> #define BZ_N_OVERSHOOT (      )
354,355c354,355
< typedef
<    struct {
---
> 
>     {
347c347
< #define BZ_N_OVERSHOOT (      2)
---
> #define BZ_N_OVERSHOOT (      
354,355c354,355
< typedef
<    struct {
---
> 
>     {
347c347
< #define BZ_N_OVERSHOOT (      2)
---
> #define BZ_N_OVERSHOOT (      2
347c347,348
< #define BZ_N_OVERSHOOT (      2)
---
> #define BZ_N_OVERSHOOT (      2
> 
354d354
< typedef
347c347
< #define BZ_N_OVERSHOOT (      2)
---
> #define BZ_N_OVERSHOOT (      2
355c355
<    struct {
---
>     {
347c347
< #define BZ_N_OVERSHOOT (      2)
---
> #define BZ_N_OVERSHOOT (      2
354,355c354,355
< typedef
<    struct {
---
> 
>     {
347c347
< #define BZ_N_OVERSHOOT (      2)
---
> #define BZ_N_OVERSHOOT (      2
355c355
<    struct {
---
>    struct 
347c347
< #define BZ_N_OVERSHOOT (      2)
---
> #define BZ_N_OVERSHOOT (      2
354,355c354,355
< typedef
<    struct {
---
> 
>    struct 
347c347
< #define BZ_N_OVERSHOOT (      2)
---
> #define BZ_N_OVERSHOOT (      2
355c355
<    struct {
---
>     
347c347
< #define BZ_N_OVERSHOOT (      2)
---
> #define BZ_N_OVERSHOOT (      2
354,355c354,355
< typedef
<    struct {
---
> 
>     
354c354
< typedef
---
> 
354,355c354,355
< typedef
<    struct {
---
> 
>     {
354,355c354,355
< typedef
<    struct {
---
> 
>    struct 
354,355c354,355
< typedef
<    struct {
---
> 
>     
354c354
< typedef
---
> 
357c357
<       bz_stream* strm;
---
>       * strm;
354,355c354,355
< typedef
<    struct {
---
> 
>     {
357c357
<       bz_stream* strm;
---
>       * strm;
354,355c354,355
< typedef
<    struct {
---
> 
>    struct 
357c357
<       bz_stream* strm;
---
>       * strm;
354,355c354,355
< typedef
<    struct {
---
> 
>     
357c357
<       bz_stream* strm;
---
>       * strm;
355c355
<    struct {
---
>     {
355c355
<    struct {
---
>     
355c355
<    struct {
---
>     {
357c357
<       bz_stream* strm;
---
>       * strm;
355c355
<    struct {
---
>     
357c357
<       bz_stream* strm;
---
>       * strm;
355c355
<    struct {
---
>     {
357c357
<       bz_stream* strm;
---
>       bz_stream strm;
355c355
<    struct {
---
>     
357c357
<       bz_stream* strm;
---
>       bz_stream strm;
355c355
<    struct {
---
>     {
357c357
<       bz_stream* strm;
---
>        strm;
355c355
<    struct {
---
>     
357c357
<       bz_stream* strm;
---
>        strm;
355c355
<    struct {
---
>    struct 
355c355
<    struct {
---
>    struct 
357c357
<       bz_stream* strm;
---
>       * strm;
355c355
<    struct {
---
>    struct 
357c357
<       bz_stream* strm;
---
>       bz_stream strm;
355c355
<    struct {
---
>    struct 
357c357
<       bz_stream* strm;
---
>        strm;
355c355
<    struct {
---
>    struct 
357c357
<       bz_stream* strm;
---
>       bz_stream* ;
355c355
<    struct {
---
>    struct 
357c357
<       bz_stream* strm;
---
>       * ;
355c355
<    struct {
---
>    struct 
357c357
<       bz_stream* strm;
---
>       bz_stream ;
355c355
<    struct {
---
>    struct 
357c357
<       bz_stream* strm;
---
>        ;
357c357
<       bz_stream* strm;
---
>       * strm;
357c357
<       bz_stream* strm;
---
>        strm;
357c357
<       bz_stream* strm;
---
>       * ;
357c357
<       bz_stream* strm;
---
>        ;
357c357
<       bz_stream* strm;
---
>       * strm
357c357
<       bz_stream* strm;
---
>        strm
357c357
<       bz_stream* strm;
---
>       * 
357c357
<       bz_stream* strm;
---
>        
(85.6 %, 29561 bytes)
357c357
<        ;
---
>        
361c361
<       Int32    mode;
---
>           ;
357c357
<        ;
---
>        
361c361
<       Int32    mode;
---
>       Int32    mode
357c357
<        ;
---
>        
361c361
<       Int32    mode;
---
>           mode
357c357
<        ;
---
>        
361c361
<       Int32    mode;
---
>       Int32    
357c357
<        ;
---
>        
361c361
<       Int32    mode;
---
>           
(85.6 %, 29551 bytes)
360a361
>           
362d362
<       Int32    state;
361,362c361,362
<           ;
<       Int32    state;
---
>           
>       Int32    state
361,362c361,362
<           ;
<       Int32    state;
---
>           
>           state
361,362c361,362
<           ;
<       Int32    state;
---
>           
>       Int32    
361,362c361,362
<           ;
<       Int32    state;
---
>           
>           
(85.6 %, 29540 bytes)
362c362
<           ;
---
>           
365c365
<       UInt32   avail_in_expect;
---
>          ;
362c362
<           ;
---
>           
365c365
<       UInt32   avail_in_expect;
---
>       UInt32   avail_in_expect
362c362
<           ;
---
>           
365c365
<       UInt32   avail_in_expect;
---
>          avail_in_expect
362c362
<           ;
---
>           
365c365
<       UInt32   avail_in_expect;
---
>       UInt32   
362c362
<           ;
---
>           
365c365
<       UInt32   avail_in_expect;
---
>          
(85.6 %, 29518 bytes)
365c365
<          ;
---
>          
368c368
<       UInt32  arr1;
---
>         ;
365c365
<          ;
---
>          
368c368
<       UInt32  arr1;
---
>       UInt32  arr1
365c365
<          ;
---
>          
368c368
<       UInt32  arr1;
---
>         arr1
365c365
<          ;
---
>          
368c368
<       UInt32  arr1;
---
>       UInt32  
365c365
<          ;
---
>          
368c368
<       UInt32  arr1;
---
>         
368c368
<       UInt32  arr1;
---
>         arr1;
368c368
<       UInt32  arr1;
---
>         ;
368c368
<       UInt32  arr1;
---
>         arr1
368c368
<       UInt32  arr1;
---
>         
368,369c368,369
<       UInt32  arr1;
<       UInt32  arr2;
---
>         arr1;
>         arr2;
368,369c368,369
<       UInt32  arr1;
<       UInt32  arr2;
---
>         ;
>         arr2;
368,369c368,369
<       UInt32  arr1;
<       UInt32  arr2;
---
>         arr1
>         arr2;
368,369c368,369
<       UInt32  arr1;
<       UInt32  arr2;
---
>         
>         arr2;
368c368
<       UInt32  arr1;
---
>       UInt32  ;
368c368
<       UInt32  arr1;
---
>       UInt32  
368,369c368,369
<       UInt32  arr1;
<       UInt32  arr2;
---
>       UInt32  ;
>         arr2;
368,369c368,369
<       UInt32  arr1;
<       UInt32  arr2;
---
>       UInt32  
>         arr2;
368,369c368,369
<       UInt32  arr1;
<       UInt32  arr2;
---
>       UInt32  ;
>       UInt32  ;
368,369c368,369
<       UInt32  arr1;
<       UInt32  arr2;
---
>       UInt32  
>       UInt32  ;
368,369c368,369
<       UInt32  arr1;
<       UInt32  arr2;
---
>       UInt32  ;
>         ;
368,369c368,369
<       UInt32  arr1;
<       UInt32  arr2;
---
>       UInt32  
>         ;
368c368
<       UInt32  arr1;
---
>       UInt32  arr1
368,369c368,369
<       UInt32  arr1;
<       UInt32  arr2;
---
>       UInt32  arr1
>         arr2;
368,369c368,369
<       UInt32  arr1;
<       UInt32  arr2;
---
>       UInt32  arr1
>       UInt32  ;
368,369c368,369
<       UInt32  arr1;
<       UInt32  arr2;
---
>       UInt32  arr1
>         ;
368,369c368,369
<       UInt32  arr1;
<       UInt32  arr2;
---
>       UInt32  arr1
>       UInt32  arr2
368,369c368,369
<       UInt32  arr1;
<       UInt32  arr2;
---
>       UInt32  arr1
>         arr2
368,369c368,369
<       UInt32  arr1;
<       UInt32  arr2;
---
>       UInt32  arr1
>       UInt32  
368,369c368,369
<       UInt32  arr1;
<       UInt32  arr2;
---
>       UInt32  arr1
>         
369c369
<       UInt32  arr2;
---
>         arr2;
369c369
<       UInt32  arr2;
---
>         ;
369c369
<       UInt32  arr2;
---
>         arr2
369c369
<       UInt32  arr2;
---
>         
369,370c369,370
<       UInt32  arr2;
<       UInt32*  ftab;
---
>         arr2;
>       *  ftab;
369,370c369,370
<       UInt32  arr2;
<       UInt32*  ftab;
---
>         ;
>       *  ftab;
369,370c369,370
<       UInt32  arr2;
<       UInt32*  ftab;
---
>         arr2
>       *  ftab;
369,370c369,370
<       UInt32  arr2;
<       UInt32*  ftab;
---
>         
>       *  ftab;
369c369
<       UInt32  arr2;
---
>       UInt32  ;
369c369
<       UInt32  arr2;
---
>       UInt32  
369,370c369,370
<       UInt32  arr2;
<       UInt32*  ftab;
---
>       UInt32  ;
>       *  ftab;
369,370c369,370
<       UInt32  arr2;
<       UInt32*  ftab;
---
>       UInt32  
>       *  ftab;
369,370c369,370
<       UInt32  arr2;
<       UInt32*  ftab;
---
>       UInt32  ;
>       UInt32  ftab;
369,370c369,370
<       UInt32  arr2;
<       UInt32*  ftab;
---
>       UInt32  
>       UInt32  ftab;
369,370c369,370
<       UInt32  arr2;
<       UInt32*  ftab;
---
>       UInt32  ;
>         ftab;
369,370c369,370
<       UInt32  arr2;
<       UInt32*  ftab;
---
>       UInt32  
>         ftab;
369c369
<       UInt32  arr2;
---
>       UInt32  arr2
369,370c369,370
<       UInt32  arr2;
<       UInt32*  ftab;
---
>       UInt32  arr2
>       *  ftab;
369,370c369,370
<       UInt32  arr2;
<       UInt32*  ftab;
---
>       UInt32  arr2
>       UInt32  ftab;
369,370c369,370
<       UInt32  arr2;
<       UInt32*  ftab;
---
>       UInt32  arr2
>         ftab;
369,370c369,370
<       UInt32  arr2;
<       UInt32*  ftab;
---
>       UInt32  arr2
>       UInt32*  ;
369,370c369,370
<       UInt32  arr2;
<       UInt32*  ftab;
---
>       UInt32  arr2
>       *  ;
369,370c369,370
<       UInt32  arr2;
<       UInt32*  ftab;
---
>       UInt32  arr2
>       UInt32  ;
369,370c369,370
<       UInt32  arr2;
<       UInt32*  ftab;
---
>       UInt32  arr2
>         ;
370c370
<       UInt32*  ftab;
---
>       *  ftab;
370c370
<       UInt32*  ftab;
---
>         ftab;
370c370
<       UInt32*  ftab;
---
>       *  ;
370c370
<       UInt32*  ftab;
---
>         ;
370c370
<       UInt32*  ftab;
---
>       *  ftab
370c370
<       UInt32*  ftab;
---
>         ftab
370c370
<       UInt32*  ftab;
---
>       *  
370c370
<       UInt32*  ftab;
---
>         
370c370
<       UInt32*  ftab;
---
>       UInt32  ftab;
370c370
<       UInt32*  ftab;
---
>       UInt32  ;
370c370
<       UInt32*  ftab;
---
>       UInt32  ftab
370c370
<       UInt32*  ftab;
---
>       UInt32  
370,371c370,371
<       UInt32*  ftab;
<       Int32    origPtr;
---
>       UInt32  ftab;
>           origPtr;
370,371c370,371
<       UInt32*  ftab;
<       Int32    origPtr;
---
>       UInt32  ;
>           origPtr;
370,371c370,371
<       UInt32*  ftab;
<       Int32    origPtr;
---
>       UInt32  ftab
>           origPtr;
370,371c370,371
<       UInt32*  ftab;
<       Int32    origPtr;
---
>       UInt32  
>           origPtr;
370c370
<       UInt32*  ftab;
---
>       UInt32*  ;
370c370
<       UInt32*  ftab;
---
>       UInt32*  
370,371c370,371
<       UInt32*  ftab;
<       Int32    origPtr;
---
>       UInt32*  ;
>           origPtr;
370,371c370,371
<       UInt32*  ftab;
<       Int32    origPtr;
---
>       UInt32*  
>           origPtr;
370,371c370,371
<       UInt32*  ftab;
<       Int32    origPtr;
---
>       UInt32*  ;
>       Int32    ;
370,371c370,371
<       UInt32*  ftab;
<       Int32    origPtr;
---
>       UInt32*  
>       Int32    ;
370,371c370,371
<       UInt32*  ftab;
<       Int32    origPtr;
---
>       UInt32*  ;
>           ;
370,371c370,371
<       UInt32*  ftab;
<       Int32    origPtr;
---
>       UInt32*  
>           ;
370c370
<       UInt32*  ftab;
---
>       UInt32*  ftab
(85.6 %, 29517 bytes)
370c370
<       UInt32  ftab;
---
>       UInt32  ;
370c370
<       UInt32  ftab;
---
>       UInt32  
370,371c370,371
<       UInt32  ftab;
<       Int32    origPtr;
---
>       UInt32  ;
>           origPtr;
370,371c370,371
<       UInt32  ftab;
<       Int32    origPtr;
---
>       UInt32  
>           origPtr;
370,371c370,371
<       UInt32  ftab;
<       Int32    origPtr;
---
>       UInt32  ;
>       Int32    ;
370,371c370,371
<       UInt32  ftab;
<       Int32    origPtr;
---
>       UInt32  
>       Int32    ;
370,371c370,371
<       UInt32  ftab;
<       Int32    origPtr;
---
>       UInt32  ;
>           ;
370,371c370,371
<       UInt32  ftab;
<       Int32    origPtr;
---
>       UInt32  
>           ;
370c370
<       UInt32  ftab;
---
>       UInt32  ftab
370,371c370,371
<       UInt32  ftab;
<       Int32    origPtr;
---
>       UInt32  ftab
>           origPtr;
370,371c370,371
<       UInt32  ftab;
<       Int32    origPtr;
---
>       UInt32  ftab
>       Int32    ;
370,371c370,371
<       UInt32  ftab;
<       Int32    origPtr;
---
>       UInt32  ftab
>           ;
370,371c370,371
<       UInt32  ftab;
<       Int32    origPtr;
---
>       UInt32  ftab
>       Int32    origPtr
370,371c370,371
<       UInt32  ftab;
<       Int32    origPtr;
---
>       UInt32  ftab
>           origPtr
370,371c370,371
<       UInt32  ftab;
<       Int32    origPtr;
---
>       UInt32  ftab
>       Int32    
370,371c370,371
<       UInt32  ftab;
<       Int32    origPtr;
---
>       UInt32  ftab
>           
371c371
<       Int32    origPtr;
---
>           origPtr;
371c371
<       Int32    origPtr;
---
>           ;
(85.6 %, 29504 bytes)
371c371
<           ;
---
>           
374c374
<       UInt32  ptr;
---
>         ;
371c371
<           ;
---
>           
374c374
<       UInt32  ptr;
---
>       UInt32  ptr
371c371
<           ;
---
>           
374c374
<       UInt32  ptr;
---
>         ptr
371c371
<           ;
---
>           
374c374
<       UInt32  ptr;
---
>       UInt32  
371c371
<           ;
---
>           
374c374
<       UInt32  ptr;
---
>         
374c374
<       UInt32  ptr;
---
>         ptr;
374c374
<       UInt32  ptr;
---
>         ;
374c374
<       UInt32  ptr;
---
>         ptr
374c374
<       UInt32  ptr;
---
>         
374,375c374,375
<       UInt32  ptr;
<       unsigned char*   block;
---
>         ptr;
>        char*   block;
374,375c374,375
<       UInt32  ptr;
<       unsigned char*   block;
---
>         ;
>        char*   block;
374,375c374,375
<       UInt32  ptr;
<       unsigned char*   block;
---
>         ptr
>        char*   block;
374,375c374,375
<       UInt32  ptr;
<       unsigned char*   block;
---
>         
>        char*   block;
374c374
<       UInt32  ptr;
---
>       UInt32  ;
374c374
<       UInt32  ptr;
---
>       UInt32  
374,375c374,375
<       UInt32  ptr;
<       unsigned char*   block;
---
>       UInt32  ;
>        char*   block;
374,375c374,375
<       UInt32  ptr;
<       unsigned char*   block;
---
>       UInt32  
>        char*   block;
374,375c374,375
<       UInt32  ptr;
<       unsigned char*   block;
---
>       UInt32  ;
>       unsigned *   block;
374,375c374,375
<       UInt32  ptr;
<       unsigned char*   block;
---
>       UInt32  
>       unsigned *   block;
374,375c374,375
<       UInt32  ptr;
<       unsigned char*   block;
---
>       UInt32  ;
>        *   block;
374,375c374,375
<       UInt32  ptr;
<       unsigned char*   block;
---
>       UInt32  
>        *   block;
374c374
<       UInt32  ptr;
---
>       UInt32  ptr
374,375c374,375
<       UInt32  ptr;
<       unsigned char*   block;
---
>       UInt32  ptr
>        char*   block;
374,375c374,375
<       UInt32  ptr;
<       unsigned char*   block;
---
>       UInt32  ptr
>       unsigned *   block;
374,375c374,375
<       UInt32  ptr;
<       unsigned char*   block;
---
>       UInt32  ptr
>        *   block;
374,375c374,375
<       UInt32  ptr;
<       unsigned char*   block;
---
>       UInt32  ptr
>       unsigned char   block;
374,375c374,375
<       UInt32  ptr;
<       unsigned char*   block;
---
>       UInt32  ptr
>        char   block;
374,375c374,375
<       UInt32  ptr;
<       unsigned char*   block;
---
>       UInt32  ptr
>       unsigned    block;
374,375c374,375
<       UInt32  ptr;
<       unsigned char*   block;
---
>       UInt32  ptr
>           block;
375c375
<       unsigned char*   block;
---
>        char*   block;
375c375
<       unsigned char*   block;
---
>        *   block;
375c375
<       unsigned char*   block;
---
>        char   block;
(85.6 %, 29496 bytes)
375c375
<        char*   block;
---
>        *   block;
375c375
<        char*   block;
---
>           block;
375c375
<        char*   block;
---
>        *   ;
375c375
<        char*   block;
---
>           ;
375c375
<        char*   block;
---
>        *   block
375c375
<        char*   block;
---
>           block
375c375
<        char*   block;
---
>        *   
375c375
<        char*   block;
---
>           
375c375
<        char*   block;
---
>        char   block;
375c375
<        char*   block;
---
>        char   ;
375c375
<        char*   block;
---
>        char   block
375c375
<        char*   block;
---
>        char   
375,376c375,376
<        char*   block;
<       unsigned short  mtfv;
---
>        char   block;
>        short  mtfv;
(85.6 %, 29495 bytes)
375c375
<        char   block;
---
>        char   ;
375c375
<        char   block;
---
>        char   
375,376c375,376
<        char   block;
<       unsigned short  mtfv;
---
>        char   ;
>        short  mtfv;
375,376c375,376
<        char   block;
<       unsigned short  mtfv;
---
>        char   
>        short  mtfv;
375,376c375,376
<        char   block;
<       unsigned short  mtfv;
---
>        char   ;
>       unsigned   mtfv;
375,376c375,376
<        char   block;
<       unsigned short  mtfv;
---
>        char   
>       unsigned   mtfv;
375,376c375,376
<        char   block;
<       unsigned short  mtfv;
---
>        char   ;
>          mtfv;
375,376c375,376
<        char   block;
<       unsigned short  mtfv;
---
>        char   
>          mtfv;
375c375
<        char   block;
---
>        char   block
375,376c375,376
<        char   block;
<       unsigned short  mtfv;
---
>        char   block
>        short  mtfv;
375,376c375,376
<        char   block;
<       unsigned short  mtfv;
---
>        char   block
>       unsigned   mtfv;
375,376c375,376
<        char   block;
<       unsigned short  mtfv;
---
>        char   block
>          mtfv;
375,376c375,376
<        char   block;
<       unsigned short  mtfv;
---
>        char   block
>       unsigned short  ;
375,376c375,376
<        char   block;
<       unsigned short  mtfv;
---
>        char   block
>        short  ;
375,376c375,376
<        char   block;
<       unsigned short  mtfv;
---
>        char   block
>       unsigned   ;
375,376c375,376
<        char   block;
<       unsigned short  mtfv;
---
>        char   block
>          ;
376c376
<       unsigned short  mtfv;
---
>        short  mtfv;
376c376
<       unsigned short  mtfv;
---
>          mtfv;
376c376
<       unsigned short  mtfv;
---
>        short  ;
376c376
<       unsigned short  mtfv;
---
>          ;
376c376
<       unsigned short  mtfv;
---
>        short  mtfv
376c376
<       unsigned short  mtfv;
---
>          mtfv
376c376
<       unsigned short  mtfv;
---
>        short  
376c376
<       unsigned short  mtfv;
---
>          
376c376
<       unsigned short  mtfv;
---
>       unsigned   mtfv;
(85.6 %, 29487 bytes)
376c376
<        short  mtfv;
---
>          mtfv;
376c376
<        short  mtfv;
---
>          ;
376c376
<        short  mtfv;
---
>          mtfv
376c376
<        short  mtfv;
---
>          
376,377c376,377
<        short  mtfv;
<       unsigned char   zbits;
---
>          mtfv;
>        char   zbits;
376,377c376,377
<        short  mtfv;
<       unsigned char   zbits;
---
>          ;
>        char   zbits;
376,377c376,377
<        short  mtfv;
<       unsigned char   zbits;
---
>          mtfv
>        char   zbits;
376,377c376,377
<        short  mtfv;
<       unsigned char   zbits;
---
>          
>        char   zbits;
376c376
<        short  mtfv;
---
>        short  ;
376c376
<        short  mtfv;
---
>        short  
376,377c376,377
<        short  mtfv;
<       unsigned char   zbits;
---
>        short  ;
>        char   zbits;
376,377c376,377
<        short  mtfv;
<       unsigned char   zbits;
---
>        short  
>        char   zbits;
376,377c376,377
<        short  mtfv;
<       unsigned char   zbits;
---
>        short  ;
>       unsigned    zbits;
376,377c376,377
<        short  mtfv;
<       unsigned char   zbits;
---
>        short  
>       unsigned    zbits;
376,377c376,377
<        short  mtfv;
<       unsigned char   zbits;
---
>        short  ;
>           zbits;
376,377c376,377
<        short  mtfv;
<       unsigned char   zbits;
---
>        short  
>           zbits;
376c376
<        short  mtfv;
---
>        short  mtfv
376,377c376,377
<        short  mtfv;
<       unsigned char   zbits;
---
>        short  mtfv
>        char   zbits;
376,377c376,377
<        short  mtfv;
<       unsigned char   zbits;
---
>        short  mtfv
>       unsigned    zbits;
376,377c376,377
<        short  mtfv;
<       unsigned char   zbits;
---
>        short  mtfv
>           zbits;
376,377c376,377
<        short  mtfv;
<       unsigned char   zbits;
---
>        short  mtfv
>       unsigned char   ;
376,377c376,377
<        short  mtfv;
<       unsigned char   zbits;
---
>        short  mtfv
>        char   ;
376,377c376,377
<        short  mtfv;
<       unsigned char   zbits;
---
>        short  mtfv
>       unsigned    ;
376,377c376,377
<        short  mtfv;
<       unsigned char   zbits;
---
>        short  mtfv
>           ;
377c377
<       unsigned char   zbits;
---
>        char   zbits;
377c377
<       unsigned char   zbits;
---
>           zbits;
377c377
<       unsigned char   zbits;
---
>        char   ;
377c377
<       unsigned char   zbits;
---
>           ;
377c377
<       unsigned char   zbits;
---
>        char   zbits
377c377
<       unsigned char   zbits;
---
>           zbits
377c377
<       unsigned char   zbits;
---
>        char   
377c377
<       unsigned char   zbits;
---
>           
377c377
<       unsigned char   zbits;
---
>       unsigned    zbits;
(85.6 %, 29479 bytes)
377c377
<        char   zbits;
---
>           zbits;
377c377
<        char   zbits;
---
>           ;
377c377
<        char   zbits;
---
>           zbits
377c377
<        char   zbits;
---
>           
377c377
<        char   zbits;
---
>           zbits;
380c380
<       Int32    workFactor;
---
>           workFactor;
377c377
<        char   zbits;
---
>           ;
380c380
<       Int32    workFactor;
---
>           workFactor;
377c377
<        char   zbits;
---
>           zbits
380c380
<       Int32    workFactor;
---
>           workFactor;
377c377
<        char   zbits;
---
>           
380c380
<       Int32    workFactor;
---
>           workFactor;
377c377
<        char   zbits;
---
>        char   ;
377c377
<        char   zbits;
---
>        char   
377c377
<        char   zbits;
---
>        char   ;
380c380
<       Int32    workFactor;
---
>           workFactor;
377c377
<        char   zbits;
---
>        char   
380c380
<       Int32    workFactor;
---
>           workFactor;
377c377
<        char   zbits;
---
>        char   ;
380c380
<       Int32    workFactor;
---
>       Int32    ;
377c377
<        char   zbits;
---
>        char   
380c380
<       Int32    workFactor;
---
>       Int32    ;
377c377
<        char   zbits;
---
>        char   ;
380c380
<       Int32    workFactor;
---
>           ;
377c377
<        char   zbits;
---
>        char   
380c380
<       Int32    workFactor;
---
>           ;
377c377
<        char   zbits;
---
>        char   zbits
377c377
<        char   zbits;
---
>        char   zbits
380c380
<       Int32    workFactor;
---
>           workFactor;
377c377
<        char   zbits;
---
>        char   zbits
380c380
<       Int32    workFactor;
---
>       Int32    ;
377c377
<        char   zbits;
---
>        char   zbits
380c380
<       Int32    workFactor;
---
>           ;
377c377
<        char   zbits;
---
>        char   zbits
380c380
<       Int32    workFactor;
---
>       Int32    workFactor
377c377
<        char   zbits;
---
>        char   zbits
380c380
<       Int32    workFactor;
---
>           workFactor
377c377
<        char   zbits;
---
>        char   zbits
380c380
<       Int32    workFactor;
---
>       Int32    
377c377
<        char   zbits;
---
>        char   zbits
380c380
<       Int32    workFactor;
---
>           
380c380
<       Int32    workFactor;
---
>           workFactor;
380c380
<       Int32    workFactor;
---
>           ;
(85.6 %, 29463 bytes)
380c380
<           ;
---
>           
383c383
<       UInt32   state_in_ch;
---
>          ;
380c380
<           ;
---
>           
383c383
<       UInt32   state_in_ch;
---
>       UInt32   state_in_ch
380c380
<           ;
---
>           
383c383
<       UInt32   state_in_ch;
---
>          state_in_ch
380c380
<           ;
---
>           
383c383
<       UInt32   state_in_ch;
---
>       UInt32   
380c380
<           ;
---
>           
383c383
<       UInt32   state_in_ch;
---
>          
383c383
<       UInt32   state_in_ch;
---
>          state_in_ch;
383c383
<       UInt32   state_in_ch;
---
>          ;
(85.6 %, 29445 bytes)
383,384c383,384
<          ;
<       Int32    state_in_len;
---
>          
>           ;
383,384c383,384
<          ;
<       Int32    state_in_len;
---
>          
>       Int32    state_in_len
383,384c383,384
<          ;
<       Int32    state_in_len;
---
>          
>           state_in_len
383,384c383,384
<          ;
<       Int32    state_in_len;
---
>          
>       Int32    
383,384c383,384
<          ;
<       Int32    state_in_len;
---
>          
>           
(85.6 %, 29427 bytes)
384,385c384,385
<           ;
<       BZ_RAND_DECLS;
---
>           
>       
384c384
<           ;
---
>           
388c388
<       Int32    nblock;
---
>           nblock;
384,385c384,385
<           ;
<       BZ_RAND_DECLS;
---
>           
>       ;
388c388
<       Int32    nblock;
---
>           nblock;
384,385c384,385
<           ;
<       BZ_RAND_DECLS;
---
>           
>       BZ_RAND_DECLS
388c388
<       Int32    nblock;
---
>           nblock;
384,385c384,385
<           ;
<       BZ_RAND_DECLS;
---
>           
>       
388c388
<       Int32    nblock;
---
>           nblock;
385c385
<       BZ_RAND_DECLS;
---
>       ;
385c385
<       BZ_RAND_DECLS;
---
>       
385c385
<       BZ_RAND_DECLS;
---
>       ;
388c388
<       Int32    nblock;
---
>           nblock;
385c385
<       BZ_RAND_DECLS;
---
>       
388c388
<       Int32    nblock;
---
>           nblock;
385c385
<       BZ_RAND_DECLS;
---
>       ;
388c388
<       Int32    nblock;
---
>       Int32    ;
385c385
<       BZ_RAND_DECLS;
---
>       
388c388
<       Int32    nblock;
---
>       Int32    ;
(85.6 %, 29414 bytes)
385c385
<       ;
---
>       
385c385
<       ;
---
>       
388c388
<       Int32    nblock;
---
>           nblock;
385c385
<       ;
---
>       
388c388
<       Int32    nblock;
---
>       Int32    ;
385c385
<       ;
---
>       
388c388
<       Int32    nblock;
---
>           ;
385c385
<       ;
---
>       
388c388
<       Int32    nblock;
---
>       Int32    nblock
385c385
<       ;
---
>       
388c388
<       Int32    nblock;
---
>           nblock
385c385
<       ;
---
>       
388c388
<       Int32    nblock;
---
>       Int32    
385c385
<       ;
---
>       
388c388
<       Int32    nblock;
---
>           
388c388
<       Int32    nblock;
---
>           nblock;
388c388
<       Int32    nblock;
---
>           ;
388c388
<       Int32    nblock;
---
>           nblock
388c388
<       Int32    nblock;
---
>           
388,389c388,389
<       Int32    nblock;
<       Int32    nblockMAX;
---
>           nblock;
>           nblockMAX;
388,389c388,389
<       Int32    nblock;
<       Int32    nblockMAX;
---
>           ;
>           nblockMAX;
388,389c388,389
<       Int32    nblock;
<       Int32    nblockMAX;
---
>           nblock
>           nblockMAX;
388,389c388,389
<       Int32    nblock;
<       Int32    nblockMAX;
---
>           
>           nblockMAX;
388c388
<       Int32    nblock;
---
>       Int32    ;
(85.6 %, 29413 bytes)
388c388
<       Int32    nblock;
---
>           nblock;
388c388
<       Int32    nblock;
---
>           ;
388c388
<       Int32    nblock;
---
>           nblock
388c388
<       Int32    nblock;
---
>           
388,389c388,389
<       Int32    nblock;
<       Int32    nblockMAX;
---
>           nblock;
>           nblockMAX;
388,389c388,389
<       Int32    nblock;
<       Int32    nblockMAX;
---
>           ;
>           nblockMAX;
388,389c388,389
<       Int32    nblock;
<       Int32    nblockMAX;
---
>           nblock
>           nblockMAX;
388,389c388,389
<       Int32    nblock;
<       Int32    nblockMAX;
---
>           
>           nblockMAX;
388c388
<       Int32    nblock;
---
>       Int32    ;
388c388
<       Int32    nblock;
---
>       Int32    
388,389c388,389
<       Int32    nblock;
<       Int32    nblockMAX;
---
>       Int32    ;
>           nblockMAX;
388,389c388,389
<       Int32    nblock;
<       Int32    nblockMAX;
---
>       Int32    
>           nblockMAX;
388,389c388,389
<       Int32    nblock;
<       Int32    nblockMAX;
---
>       Int32    ;
>       Int32    ;
388,389c388,389
<       Int32    nblock;
<       Int32    nblockMAX;
---
>       Int32    
>       Int32    ;
388,389c388,389
<       Int32    nblock;
<       Int32    nblockMAX;
---
>       Int32    ;
>           ;
388,389c388,389
<       Int32    nblock;
<       Int32    nblockMAX;
---
>       Int32    
>           ;
388c388
<       Int32    nblock;
---
>       Int32    nblock
388,389c388,389
<       Int32    nblock;
<       Int32    nblockMAX;
---
>       Int32    nblock
>           nblockMAX;
388,389c388,389
<       Int32    nblock;
<       Int32    nblockMAX;
---
>       Int32    nblock
>       Int32    ;
388,389c388,389
<       Int32    nblock;
<       Int32    nblockMAX;
---
>       Int32    nblock
>           ;
388,389c388,389
<       Int32    nblock;
<       Int32    nblockMAX;
---
>       Int32    nblock
>       Int32    nblockMAX
388,389c388,389
<       Int32    nblock;
<       Int32    nblockMAX;
---
>       Int32    nblock
>           nblockMAX
388,389c388,389
<       Int32    nblock;
<       Int32    nblockMAX;
---
>       Int32    nblock
>       Int32    
388,389c388,389
<       Int32    nblock;
<       Int32    nblockMAX;
---
>       Int32    nblock
>           
389c389
<       Int32    nblockMAX;
---
>           nblockMAX;
389c389
<       Int32    nblockMAX;
---
>           ;
(85.7 %, 29398 bytes)
388a389
>           
390d390
<       Int32    numZ;
389,390c389,390
<           ;
<       Int32    numZ;
---
>           
>       Int32    numZ
389,390c389,390
<           ;
<       Int32    numZ;
---
>           
>           numZ
389,390c389,390
<           ;
<       Int32    numZ;
---
>           
>       Int32    
389,390c389,390
<           ;
<       Int32    numZ;
---
>           
>           
390c390
<       Int32    numZ;
---
>           numZ;
390c390
<       Int32    numZ;
---
>           ;
(85.7 %, 29388 bytes)
389a390
>           
391d391
<       Int32    state_out_pos;
390,391c390,391
<           ;
<       Int32    state_out_pos;
---
>           
>       Int32    state_out_pos
390,391c390,391
<           ;
<       Int32    state_out_pos;
---
>           
>           state_out_pos
390,391c390,391
<           ;
<       Int32    state_out_pos;
---
>           
>       Int32    
390,391c390,391
<           ;
<       Int32    state_out_pos;
---
>           
>           
391c391
<       Int32    state_out_pos;
---
>           state_out_pos;
391c391
<       Int32    state_out_pos;
---
>           ;
(85.7 %, 29369 bytes)
391c391
<           ;
---
>           
394c394
<       Int32    nInUse;
---
>           ;
391c391
<           ;
---
>           
394c394
<       Int32    nInUse;
---
>       Int32    nInUse
391c391
<           ;
---
>           
394c394
<       Int32    nInUse;
---
>           nInUse
391c391
<           ;
---
>           
394c394
<       Int32    nInUse;
---
>       Int32    
391c391
<           ;
---
>           
394c394
<       Int32    nInUse;
---
>           
394c394
<       Int32    nInUse;
---
>           nInUse;
394c394
<       Int32    nInUse;
---
>           ;
394c394
<       Int32    nInUse;
---
>           nInUse
394c394
<       Int32    nInUse;
---
>           
394,395c394,395
<       Int32    nInUse;
<       Bool     inUse[6];
---
>           nInUse;
>            inUse[6];
394,395c394,395
<       Int32    nInUse;
<       Bool     inUse[6];
---
>           ;
>            inUse[6];
394,395c394,395
<       Int32    nInUse;
<       Bool     inUse[6];
---
>           nInUse
>            inUse[6];
394,395c394,395
<       Int32    nInUse;
<       Bool     inUse[6];
---
>           
>            inUse[6];
394c394
<       Int32    nInUse;
---
>       Int32    ;
394c394
<       Int32    nInUse;
---
>       Int32    
394,395c394,395
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       Int32    ;
>            inUse[6];
394,395c394,395
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       Int32    
>            inUse[6];
394,395c394,395
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       Int32    ;
>       Bool     [6];
394,395c394,395
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       Int32    
>       Bool     [6];
394,395c394,395
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       Int32    ;
>            [6];
394,395c394,395
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       Int32    
>            [6];
394c394
<       Int32    nInUse;
---
>       Int32    nInUse
394,395c394,395
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       Int32    nInUse
>            inUse[6];
394,395c394,395
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       Int32    nInUse
>       Bool     [6];
394,395c394,395
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       Int32    nInUse
>            [6];
394,395c394,395
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       Int32    nInUse
>       Bool     inUse6];
394,395c394,395
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       Int32    nInUse
>            inUse6];
394,395c394,395
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       Int32    nInUse
>       Bool     6];
394,395c394,395
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       Int32    nInUse
>            6];
395c395
<       Bool     inUse[6];
---
>            inUse[6];
395c395
<       Bool     inUse[6];
---
>            [6];
395c395
<       Bool     inUse[6];
---
>            inUse6];
395c395
<       Bool     inUse[6];
---
>            6];
395c395
<       Bool     inUse[6];
---
>            inUse[];
395c395
<       Bool     inUse[6];
---
>            [];
395c395
<       Bool     inUse[6];
---
>            inUse];
395c395
<       Bool     inUse[6];
---
>            ];
395c395
<       Bool     inUse[6];
---
>       Bool     [6];
395c395
<       Bool     inUse[6];
---
>       Bool     6];
395c395
<       Bool     inUse[6];
---
>       Bool     [];
395c395
<       Bool     inUse[6];
---
>       Bool     ];
395c395
<       Bool     inUse[6];
---
>       Bool     [6;
395c395
<       Bool     inUse[6];
---
>       Bool     6;
395c395
<       Bool     inUse[6];
---
>       Bool     [;
395c395
<       Bool     inUse[6];
---
>       Bool     ;
395c395
<       Bool     inUse[6];
---
>       Bool     inUse6];
395c395
<       Bool     inUse[6];
---
>       Bool     inUse];
395c395
<       Bool     inUse[6];
---
>       Bool     inUse6;
(85.7 %, 29361 bytes)
395,396c395,396
<       Bool     ;
<       unsigned char    unseqToSeq[6];
---
>       Bool     
>            [6];
396c396
<       unsigned char    unseqToSeq[6];
---
>        char    unseqToSeq[6];
396c396
<       unsigned char    unseqToSeq[6];
---
>            unseqToSeq[6];
396c396
<       unsigned char    unseqToSeq[6];
---
>        char    [6];
396c396
<       unsigned char    unseqToSeq[6];
---
>            [6];
396c396
<       unsigned char    unseqToSeq[6];
---
>        char    unseqToSeq6];
396c396
<       unsigned char    unseqToSeq[6];
---
>            unseqToSeq6];
396c396
<       unsigned char    unseqToSeq[6];
---
>        char    6];
396c396
<       unsigned char    unseqToSeq[6];
---
>            6];
396c396
<       unsigned char    unseqToSeq[6];
---
>       unsigned     unseqToSeq[6];
(85.7 %, 29353 bytes)
396c396
<        char    unseqToSeq[6];
---
>            unseqToSeq[6];
396c396
<        char    unseqToSeq[6];
---
>            [6];
396c396
<        char    unseqToSeq[6];
---
>            unseqToSeq6];
396c396
<        char    unseqToSeq[6];
---
>            6];
396c396
<        char    unseqToSeq[6];
---
>            unseqToSeq[];
396c396
<        char    unseqToSeq[6];
---
>            [];
396c396
<        char    unseqToSeq[6];
---
>            unseqToSeq];
396c396
<        char    unseqToSeq[6];
---
>            ];
396c396
<        char    unseqToSeq[6];
---
>        char    [6];
396c396
<        char    unseqToSeq[6];
---
>        char    6];
396c396
<        char    unseqToSeq[6];
---
>        char    [];
396c396
<        char    unseqToSeq[6];
---
>        char    ];
396c396
<        char    unseqToSeq[6];
---
>        char    [6;
396c396
<        char    unseqToSeq[6];
---
>        char    6;
396c396
<        char    unseqToSeq[6];
---
>        char    [;
396c396
<        char    unseqToSeq[6];
---
>        char    ;
396c396
<        char    unseqToSeq[6];
---
>        char    unseqToSeq6];
396c396
<        char    unseqToSeq[6];
---
>        char    unseqToSeq];
396c396
<        char    unseqToSeq[6];
---
>        char    unseqToSeq6;
(85.7 %, 29340 bytes)
396c396
<        char    ;
---
>        char    
399c399
<       UInt32   bsBuff;
---
>          
399c399
<       UInt32   bsBuff;
---
>          bsBuff;
399c399
<       UInt32   bsBuff;
---
>          ;
399c399
<       UInt32   bsBuff;
---
>          bsBuff
399c399
<       UInt32   bsBuff;
---
>          
(85.7 %, 29328 bytes)
399,400c399,400
<          ;
<       Int32    bsLive;
---
>          
>           bsLive;
399,400c399,400
<          ;
<       Int32    bsLive;
---
>          
>       Int32    ;
399,400c399,400
<          ;
<       Int32    bsLive;
---
>          
>           ;
(85.7 %, 29321 bytes)
400c400
<       Int32    ;
---
>           ;
403c403
<       UInt32   blockCRC;
---
>          blockCRC;
400c400
<       Int32    ;
---
>           
403c403
<       UInt32   blockCRC;
---
>          blockCRC;
400c400
<       Int32    ;
---
>           ;
403c403
<       UInt32   blockCRC;
---
>       UInt32   ;
400c400
<       Int32    ;
---
>           
403c403
<       UInt32   blockCRC;
---
>       UInt32   ;
400c400
<       Int32    ;
---
>           ;
403c403
<       UInt32   blockCRC;
---
>          ;
(85.7 %, 29308 bytes)
400c400
<           ;
---
>           
404c404
<       UInt32   combinedCRC;
---
>          combinedCRC;
400c400
<           ;
---
>           
403,404c403,404
<       UInt32   ;
<       UInt32   combinedCRC;
---
>          ;
>          combinedCRC;
400c400
<           ;
---
>           
403,404c403,404
<       UInt32   ;
<       UInt32   combinedCRC;
---
>       UInt32   
>          combinedCRC;
400c400
<           ;
---
>           
403,404c403,404
<       UInt32   ;
<       UInt32   combinedCRC;
---
>          
>          combinedCRC;
403c403
<       UInt32   ;
---
>          ;
(85.7 %, 29300 bytes)
403,404c403,404
<       UInt32   
<          combinedCRC;
---
>          
>          combinedCRC
407c407
<       Int32    verbosity;
---
>           verbosity;
403,404c403,404
<       UInt32   
<          combinedCRC;
---
>          
>          
407c407
<       Int32    verbosity;
---
>           verbosity;
404c404
<          combinedCRC;
---
>          ;
404c404
<          combinedCRC;
---
>          
404c404
<          combinedCRC;
---
>          ;
407c407
<       Int32    verbosity;
---
>           verbosity;
404c404
<          combinedCRC;
---
>          
407c407
<       Int32    verbosity;
---
>           verbosity;
(85.7 %, 29289 bytes)
404c404
<          ;
---
>          
404c404
<          ;
---
>          
407c407
<       Int32    verbosity;
---
>           verbosity;
404c404
<          ;
---
>          
407c407
<       Int32    verbosity;
---
>       Int32    ;
(85.7 %, 29283 bytes)
407c407
<           verbosity;
---
>           
407,408c407,408
<           verbosity;
<       Int32    blockNo;
---
>           ;
>           blockNo;
407,408c407,408
<           verbosity;
<       Int32    blockNo;
---
>           
>           blockNo;
407,408c407,408
<           verbosity;
<       Int32    blockNo;
---
>           ;
>       Int32    ;
407,408c407,408
<           verbosity;
<       Int32    blockNo;
---
>           
>       Int32    ;
407,408c407,408
<           verbosity;
<       Int32    blockNo;
---
>           ;
>           ;
407,408c407,408
<           verbosity;
<       Int32    blockNo;
---
>           
>           ;
407c407
<           verbosity;
---
>           verbosity
407,408c407,408
<           verbosity;
<       Int32    blockNo;
---
>           verbosity
>           blockNo;
407,408c407,408
<           verbosity;
<       Int32    blockNo;
---
>           verbosity
>       Int32    ;
407,408c407,408
<           verbosity;
<       Int32    blockNo;
---
>           verbosity
>           ;
(85.7 %, 29268 bytes)
408,409c408,409
<           blockNo;
<       Int32    blockSize100k;
---
>           
>           blockSize100k;
408,409c408,409
<           blockNo;
<       Int32    blockSize100k;
---
>           ;
>       Int32    ;
408,409c408,409
<           blockNo;
<       Int32    blockSize100k;
---
>           
>       Int32    ;
408,409c408,409
<           blockNo;
<       Int32    blockSize100k;
---
>           ;
>           ;
408,409c408,409
<           blockNo;
<       Int32    blockSize100k;
---
>           
>           ;
408c408
<           blockNo;
---
>           blockNo
408,409c408,409
<           blockNo;
<       Int32    blockSize100k;
---
>           blockNo
>           blockSize100k;
408,409c408,409
<           blockNo;
<       Int32    blockSize100k;
---
>           blockNo
>       Int32    ;
408,409c408,409
<           blockNo;
<       Int32    blockSize100k;
---
>           blockNo
>           ;
408,409c408,409
<           blockNo;
<       Int32    blockSize100k;
---
>           blockNo
>       Int32    blockSize100k
408,409c408,409
<           blockNo;
<       Int32    blockSize100k;
---
>           blockNo
>           blockSize100k
408,409c408,409
<           blockNo;
<       Int32    blockSize100k;
---
>           blockNo
>       Int32    
408,409c408,409
<           blockNo;
<       Int32    blockSize100k;
---
>           blockNo
>           
409c409
<       Int32    blockSize100k;
---
>           blockSize100k;
409c409
<       Int32    blockSize100k;
---
>           ;
(85.7 %, 29249 bytes)
409c409
<           ;
---
>           
412c412
<       Int32    nMTF;
---
>           ;
409c409
<           ;
---
>           
412c412
<       Int32    nMTF;
---
>       Int32    nMTF
409c409
<           ;
---
>           
412c412
<       Int32    nMTF;
---
>           nMTF
409c409
<           ;
---
>           
412c412
<       Int32    nMTF;
---
>       Int32    
409c409
<           ;
---
>           
412c412
<       Int32    nMTF;
---
>           
412c412
<       Int32    nMTF;
---
>           nMTF;
412c412
<       Int32    nMTF;
---
>           ;
412c412
<       Int32    nMTF;
---
>           nMTF
412c412
<       Int32    nMTF;
---
>           
412,413c412,413
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>           nMTF;
>           mtfFreq    [BZ_MAX_ALPHA_SIZE];
412,413c412,413
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>           ;
>           mtfFreq    [BZ_MAX_ALPHA_SIZE];
412,413c412,413
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>           nMTF
>           mtfFreq    [BZ_MAX_ALPHA_SIZE];
412,413c412,413
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>           
>           mtfFreq    [BZ_MAX_ALPHA_SIZE];
412c412
<       Int32    nMTF;
---
>       Int32    ;
412c412
<       Int32    nMTF;
---
>       Int32    
412,413c412,413
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    ;
>           mtfFreq    [BZ_MAX_ALPHA_SIZE];
412,413c412,413
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    
>           mtfFreq    [BZ_MAX_ALPHA_SIZE];
412,413c412,413
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    ;
>       Int32        [BZ_MAX_ALPHA_SIZE];
412,413c412,413
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    
>       Int32        [BZ_MAX_ALPHA_SIZE];
412,413c412,413
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    ;
>               [BZ_MAX_ALPHA_SIZE];
412,413c412,413
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    
>               [BZ_MAX_ALPHA_SIZE];
412c412
<       Int32    nMTF;
---
>       Int32    nMTF
412,413c412,413
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    nMTF
>           mtfFreq    [BZ_MAX_ALPHA_SIZE];
412,413c412,413
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    nMTF
>       Int32        [BZ_MAX_ALPHA_SIZE];
412,413c412,413
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    nMTF
>               [BZ_MAX_ALPHA_SIZE];
412,413c412,413
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    nMTF
>       Int32    mtfFreq    BZ_MAX_ALPHA_SIZE];
412,413c412,413
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    nMTF
>           mtfFreq    BZ_MAX_ALPHA_SIZE];
412,413c412,413
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    nMTF
>       Int32        BZ_MAX_ALPHA_SIZE];
412,413c412,413
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    nMTF
>               BZ_MAX_ALPHA_SIZE];
413c413
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>           mtfFreq    [BZ_MAX_ALPHA_SIZE];
413c413
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>               [BZ_MAX_ALPHA_SIZE];
413c413
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>           mtfFreq    BZ_MAX_ALPHA_SIZE];
413c413
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>               BZ_MAX_ALPHA_SIZE];
413c413
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>           mtfFreq    [];
413c413
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>               [];
413c413
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>           mtfFreq    ];
413c413
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>               ];
413c413
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32        [BZ_MAX_ALPHA_SIZE];
413c413
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32        BZ_MAX_ALPHA_SIZE];
413c413
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32        [];
413c413
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32        ];
413c413
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32        [BZ_MAX_ALPHA_SIZE;
413c413
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32        BZ_MAX_ALPHA_SIZE;
413c413
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32        [;
413c413
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32        ;
413c413
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfFreq    BZ_MAX_ALPHA_SIZE];
413c413
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfFreq    ];
413c413
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfFreq    BZ_MAX_ALPHA_SIZE;
413c413
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfFreq    ;
413c413
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfFreq    BZ_MAX_ALPHA_SIZE]
413c413
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfFreq    ]
413c413
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfFreq    BZ_MAX_ALPHA_SIZE
413c413
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfFreq    
413c413
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfFreq    [];
413c413
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfFreq    [;
413c413
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfFreq    []
413c413
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfFreq    [
413,414c413,414
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfFreq    [];
>        char    selector   [BZ_MAX_SELECTORS];
413,414c413,414
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfFreq    [;
>        char    selector   [BZ_MAX_SELECTORS];
413,414c413,414
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfFreq    []
>        char    selector   [BZ_MAX_SELECTORS];
413,414c413,414
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfFreq    [
>        char    selector   [BZ_MAX_SELECTORS];
413c413
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE;
413c413
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE
413,414c413,414
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE;
>        char    selector   [BZ_MAX_SELECTORS];
413,414c413,414
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE
>        char    selector   [BZ_MAX_SELECTORS];
413,414c413,414
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE;
>       unsigned     selector   [BZ_MAX_SELECTORS];
413,414c413,414
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE
>       unsigned     selector   [BZ_MAX_SELECTORS];
413,414c413,414
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE;
>            selector   [BZ_MAX_SELECTORS];
413,414c413,414
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE
>            selector   [BZ_MAX_SELECTORS];
413c413
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE]
413,414c413,414
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE]
>        char    selector   [BZ_MAX_SELECTORS];
413,414c413,414
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE]
>       unsigned     selector   [BZ_MAX_SELECTORS];
413,414c413,414
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE]
>            selector   [BZ_MAX_SELECTORS];
413,414c413,414
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE]
>       unsigned char       [BZ_MAX_SELECTORS];
413,414c413,414
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE]
>        char       [BZ_MAX_SELECTORS];
413,414c413,414
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE]
>       unsigned        [BZ_MAX_SELECTORS];
413,414c413,414
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE]
>               [BZ_MAX_SELECTORS];
414c414
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>        char    selector   [BZ_MAX_SELECTORS];
414c414
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>            selector   [BZ_MAX_SELECTORS];
414c414
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>        char       [BZ_MAX_SELECTORS];
414c414
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>               [BZ_MAX_SELECTORS];
414c414
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>        char    selector   BZ_MAX_SELECTORS];
414c414
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>            selector   BZ_MAX_SELECTORS];
414c414
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>        char       BZ_MAX_SELECTORS];
414c414
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>               BZ_MAX_SELECTORS];
414c414
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       unsigned     selector   [BZ_MAX_SELECTORS];
(85.7 %, 29241 bytes)
414c414
<        char    selector   [BZ_MAX_SELECTORS];
---
>            selector   [BZ_MAX_SELECTORS];
414c414
<        char    selector   [BZ_MAX_SELECTORS];
---
>               [BZ_MAX_SELECTORS];
414c414
<        char    selector   [BZ_MAX_SELECTORS];
---
>            selector   BZ_MAX_SELECTORS];
414c414
<        char    selector   [BZ_MAX_SELECTORS];
---
>               BZ_MAX_SELECTORS];
414c414
<        char    selector   [BZ_MAX_SELECTORS];
---
>            selector   [];
414c414
<        char    selector   [BZ_MAX_SELECTORS];
---
>               [];
414c414
<        char    selector   [BZ_MAX_SELECTORS];
---
>            selector   ];
414c414
<        char    selector   [BZ_MAX_SELECTORS];
---
>               ];
414c414
<        char    selector   [BZ_MAX_SELECTORS];
---
>        char       [BZ_MAX_SELECTORS];
414c414
<        char    selector   [BZ_MAX_SELECTORS];
---
>        char       BZ_MAX_SELECTORS];
414c414
<        char    selector   [BZ_MAX_SELECTORS];
---
>        char       [];
414c414
<        char    selector   [BZ_MAX_SELECTORS];
---
>        char       ];
414c414
<        char    selector   [BZ_MAX_SELECTORS];
---
>        char       [BZ_MAX_SELECTORS;
414c414
<        char    selector   [BZ_MAX_SELECTORS];
---
>        char       BZ_MAX_SELECTORS;
414c414
<        char    selector   [BZ_MAX_SELECTORS];
---
>        char       [;
414c414
<        char    selector   [BZ_MAX_SELECTORS];
---
>        char       ;
414c414
<        char    selector   [BZ_MAX_SELECTORS];
---
>        char    selector   BZ_MAX_SELECTORS];
414c414
<        char    selector   [BZ_MAX_SELECTORS];
---
>        char    selector   ];
414c414
<        char    selector   [BZ_MAX_SELECTORS];
---
>        char    selector   BZ_MAX_SELECTORS;
414c414
<        char    selector   [BZ_MAX_SELECTORS];
---
>        char    selector   ;
(85.7 %, 29215 bytes)
414,415c414,415
<        char       ;
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>        char       
>            [BZ_MAX_SELECTORS];
415c415
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>        char    selectorMtf[BZ_MAX_SELECTORS];
415c415
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>            selectorMtf[BZ_MAX_SELECTORS];
415c415
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>        char    [BZ_MAX_SELECTORS];
415c415
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>            [BZ_MAX_SELECTORS];
415c415
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>        char    selectorMtfBZ_MAX_SELECTORS];
415c415
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>            selectorMtfBZ_MAX_SELECTORS];
415c415
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>        char    BZ_MAX_SELECTORS];
415c415
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>            BZ_MAX_SELECTORS];
415c415
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>       unsigned     selectorMtf[BZ_MAX_SELECTORS];
(85.7 %, 29207 bytes)
415c415
<        char    selectorMtf[BZ_MAX_SELECTORS];
---
>            selectorMtf[BZ_MAX_SELECTORS];
415c415
<        char    selectorMtf[BZ_MAX_SELECTORS];
---
>            [BZ_MAX_SELECTORS];
415c415
<        char    selectorMtf[BZ_MAX_SELECTORS];
---
>            selectorMtfBZ_MAX_SELECTORS];
415c415
<        char    selectorMtf[BZ_MAX_SELECTORS];
---
>            BZ_MAX_SELECTORS];
415c415
<        char    selectorMtf[BZ_MAX_SELECTORS];
---
>            selectorMtf[];
415c415
<        char    selectorMtf[BZ_MAX_SELECTORS];
---
>            [];
415c415
<        char    selectorMtf[BZ_MAX_SELECTORS];
---
>            selectorMtf];
415c415
<        char    selectorMtf[BZ_MAX_SELECTORS];
---
>            ];
415c415
<        char    selectorMtf[BZ_MAX_SELECTORS];
---
>        char    [BZ_MAX_SELECTORS];
415c415
<        char    selectorMtf[BZ_MAX_SELECTORS];
---
>        char    BZ_MAX_SELECTORS];
415c415
<        char    selectorMtf[BZ_MAX_SELECTORS];
---
>        char    [];
415c415
<        char    selectorMtf[BZ_MAX_SELECTORS];
---
>        char    ];
415c415
<        char    selectorMtf[BZ_MAX_SELECTORS];
---
>        char    [BZ_MAX_SELECTORS;
415c415
<        char    selectorMtf[BZ_MAX_SELECTORS];
---
>        char    BZ_MAX_SELECTORS;
415c415
<        char    selectorMtf[BZ_MAX_SELECTORS];
---
>        char    [;
415c415
<        char    selectorMtf[BZ_MAX_SELECTORS];
---
>        char    ;
415c415
<        char    selectorMtf[BZ_MAX_SELECTORS];
---
>        char    selectorMtfBZ_MAX_SELECTORS];
415c415
<        char    selectorMtf[BZ_MAX_SELECTORS];
---
>        char    selectorMtf];
415c415
<        char    selectorMtf[BZ_MAX_SELECTORS];
---
>        char    selectorMtfBZ_MAX_SELECTORS;
(85.8 %, 29178 bytes)
415c415
<        char    ;
---
>        char    
417c417
<       unsigned char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>                 [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
417c417
<       unsigned char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
417c417
<       unsigned char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
417c417
<       unsigned char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char         [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
417c417
<       unsigned char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>                 [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
417c417
<       unsigned char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
417c417
<       unsigned char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            len     BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
417c417
<       unsigned char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char         BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
417c417
<       unsigned char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>                 BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
417c417
<       unsigned char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       unsigned     len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(85.8 %, 29170 bytes)
417c417
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
417c417
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>                 [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
417c417
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            len     BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
417c417
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>                 BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
417c417
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            len     [][BZ_MAX_ALPHA_SIZE];
417c417
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>                 [][BZ_MAX_ALPHA_SIZE];
417c417
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            len     ][BZ_MAX_ALPHA_SIZE];
417c417
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>                 ][BZ_MAX_ALPHA_SIZE];
417c417
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char         [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
417c417
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char         BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
417c417
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char         [][BZ_MAX_ALPHA_SIZE];
417c417
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char         ][BZ_MAX_ALPHA_SIZE];
417c417
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char         [BZ_N_GROUPS[BZ_MAX_ALPHA_SIZE];
417c417
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char         BZ_N_GROUPS[BZ_MAX_ALPHA_SIZE];
417c417
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char         [[BZ_MAX_ALPHA_SIZE];
417c417
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char         [BZ_MAX_ALPHA_SIZE];
417c417
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
417c417
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     ][BZ_MAX_ALPHA_SIZE];
417c417
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     BZ_N_GROUPS[BZ_MAX_ALPHA_SIZE];
417c417
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     [BZ_MAX_ALPHA_SIZE];
417c417
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     BZ_N_GROUPS]BZ_MAX_ALPHA_SIZE];
417c417
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     ]BZ_MAX_ALPHA_SIZE];
417c417
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     BZ_N_GROUPSBZ_MAX_ALPHA_SIZE];
417c417
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     BZ_MAX_ALPHA_SIZE];
417c417
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     [][BZ_MAX_ALPHA_SIZE];
417c417
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     [[BZ_MAX_ALPHA_SIZE];
417c417
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     []BZ_MAX_ALPHA_SIZE];
417c417
<        char    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     [BZ_MAX_ALPHA_SIZE];
(85.8 %, 29157 bytes)
417c417
<        char    len     [BZ_MAX_ALPHA_SIZE];
---
>        char    len     ;
417c417
<        char    len     [BZ_MAX_ALPHA_SIZE];
---
>        char    len     BZ_MAX_ALPHA_SIZE]
417c417
<        char    len     [BZ_MAX_ALPHA_SIZE];
---
>        char    len     ]
417c417
<        char    len     [BZ_MAX_ALPHA_SIZE];
---
>        char    len     BZ_MAX_ALPHA_SIZE
417c417
<        char    len     [BZ_MAX_ALPHA_SIZE];
---
>        char    len     
417c417
<        char    len     [BZ_MAX_ALPHA_SIZE];
---
>        char    len     [];
417c417
<        char    len     [BZ_MAX_ALPHA_SIZE];
---
>        char    len     [;
417c417
<        char    len     [BZ_MAX_ALPHA_SIZE];
---
>        char    len     []
417c417
<        char    len     [BZ_MAX_ALPHA_SIZE];
---
>        char    len     [
417,418c417,418
<        char    len     [BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     [];
>           code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
417,418c417,418
<        char    len     [BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     [;
>           code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
417,418c417,418
<        char    len     [BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     []
>           code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
417,418c417,418
<        char    len     [BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     [
>           code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
417c417
<        char    len     [BZ_MAX_ALPHA_SIZE];
---
>        char    len     [BZ_MAX_ALPHA_SIZE;
417c417
<        char    len     [BZ_MAX_ALPHA_SIZE];
---
>        char    len     [BZ_MAX_ALPHA_SIZE
417,418c417,418
<        char    len     [BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     [BZ_MAX_ALPHA_SIZE;
>           code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
417,418c417,418
<        char    len     [BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     [BZ_MAX_ALPHA_SIZE
>           code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
417,418c417,418
<        char    len     [BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     [BZ_MAX_ALPHA_SIZE;
>       Int32        [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
417,418c417,418
<        char    len     [BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     [BZ_MAX_ALPHA_SIZE
>       Int32        [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
417,418c417,418
<        char    len     [BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     [BZ_MAX_ALPHA_SIZE;
>               [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
417,418c417,418
<        char    len     [BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     [BZ_MAX_ALPHA_SIZE
>               [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(85.8 %, 29138 bytes)
417,418c417,418
<        char    len     ;
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     
>               [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
417,418c417,418
<        char    len     ;
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     
>       Int32    code    BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
417,418c417,418
<        char    len     ;
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     
>           code    BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
417,418c417,418
<        char    len     ;
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     
>       Int32        BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
417,418c417,418
<        char    len     ;
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len     
>               BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
418c418
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
418c418
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>               [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
418c418
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           code    BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
418c418
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>               BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
418c418
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           code    [][BZ_MAX_ALPHA_SIZE];
418c418
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>               [][BZ_MAX_ALPHA_SIZE];
418c418
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           code    ][BZ_MAX_ALPHA_SIZE];
418c418
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>               ][BZ_MAX_ALPHA_SIZE];
(85.8 %, 29128 bytes)
418c418
<               [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>               [BZ_MAX_ALPHA_SIZE];
418c418
<               [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>               BZ_N_GROUPS]BZ_MAX_ALPHA_SIZE];
418c418
<               [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>               ]BZ_MAX_ALPHA_SIZE];
418c418
<               [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>               BZ_N_GROUPSBZ_MAX_ALPHA_SIZE];
418c418
<               [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>               BZ_MAX_ALPHA_SIZE];
418c418
<               [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>               [][BZ_MAX_ALPHA_SIZE];
418c418
<               [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>               [[BZ_MAX_ALPHA_SIZE];
418c418
<               [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>               []BZ_MAX_ALPHA_SIZE];
418c418
<               [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>               [BZ_MAX_ALPHA_SIZE];
(85.8 %, 29115 bytes)
418c418
<               [BZ_MAX_ALPHA_SIZE];
---
>               ;
418c418
<               [BZ_MAX_ALPHA_SIZE];
---
>               BZ_MAX_ALPHA_SIZE]
418c418
<               [BZ_MAX_ALPHA_SIZE];
---
>               ]
418c418
<               [BZ_MAX_ALPHA_SIZE];
---
>               BZ_MAX_ALPHA_SIZE
418c418
<               [BZ_MAX_ALPHA_SIZE];
---
>               
418c418
<               [BZ_MAX_ALPHA_SIZE];
---
>               [];
418c418
<               [BZ_MAX_ALPHA_SIZE];
---
>               [;
418c418
<               [BZ_MAX_ALPHA_SIZE];
---
>               []
418c418
<               [BZ_MAX_ALPHA_SIZE];
---
>               [
418,419c418,419
<               [BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>               [];
>           rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
418,419c418,419
<               [BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>               [;
>           rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(85.8 %, 29096 bytes)
418,419c418,419
<               ;
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>               
>              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
418,419c418,419
<               ;
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>               
>       Int32    rfreq   BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
418,419c418,419
<               ;
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>               
>           rfreq   BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
418,419c418,419
<               ;
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>               
>       Int32       BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
418,419c418,419
<               ;
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>               
>              BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
419c419
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
419c419
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
419c419
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           rfreq   BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
419c419
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
419c419
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           rfreq   [][BZ_MAX_ALPHA_SIZE];
419c419
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [][BZ_MAX_ALPHA_SIZE];
419c419
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           rfreq   ][BZ_MAX_ALPHA_SIZE];
419c419
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              ][BZ_MAX_ALPHA_SIZE];
419c419
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32       [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
419c419
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32       BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
419c419
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32       [][BZ_MAX_ALPHA_SIZE];
419c419
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32       ][BZ_MAX_ALPHA_SIZE];
419c419
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32       [BZ_N_GROUPS[BZ_MAX_ALPHA_SIZE];
419c419
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32       BZ_N_GROUPS[BZ_MAX_ALPHA_SIZE];
419c419
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32       [[BZ_MAX_ALPHA_SIZE];
(85.8 %, 29085 bytes)
419c419
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE];
419c419
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              BZ_N_GROUPS]BZ_MAX_ALPHA_SIZE];
419c419
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              ]BZ_MAX_ALPHA_SIZE];
419c419
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              BZ_N_GROUPSBZ_MAX_ALPHA_SIZE];
419c419
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              BZ_MAX_ALPHA_SIZE];
419c419
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [][BZ_MAX_ALPHA_SIZE];
419c419
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [[BZ_MAX_ALPHA_SIZE];
419c419
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              []BZ_MAX_ALPHA_SIZE];
419c419
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE];
(85.8 %, 29072 bytes)
419c419
<              [BZ_MAX_ALPHA_SIZE];
---
>              ;
419c419
<              [BZ_MAX_ALPHA_SIZE];
---
>              BZ_MAX_ALPHA_SIZE]
419c419
<              [BZ_MAX_ALPHA_SIZE];
---
>              ]
419c419
<              [BZ_MAX_ALPHA_SIZE];
---
>              BZ_MAX_ALPHA_SIZE
419c419
<              [BZ_MAX_ALPHA_SIZE];
---
>              
419c419
<              [BZ_MAX_ALPHA_SIZE];
---
>              [];
419c419
<              [BZ_MAX_ALPHA_SIZE];
---
>              [;
419c419
<              [BZ_MAX_ALPHA_SIZE];
---
>              []
419c419
<              [BZ_MAX_ALPHA_SIZE];
---
>              [
419c419
<              [BZ_MAX_ALPHA_SIZE];
---
>              [];
421c421
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>          len_pack[BZ_MAX_ALPHA_SIZE][4];
419c419
<              [BZ_MAX_ALPHA_SIZE];
---
>              [;
421c421
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>          len_pack[BZ_MAX_ALPHA_SIZE][4];
419c419
<              [BZ_MAX_ALPHA_SIZE];
---
>              []
421c421
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>          len_pack[BZ_MAX_ALPHA_SIZE][4];
419c419
<              [BZ_MAX_ALPHA_SIZE];
---
>              [
421c421
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>          len_pack[BZ_MAX_ALPHA_SIZE][4];
419c419
<              [BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE;
419c419
<              [BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE
419c419
<              [BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE;
421c421
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>          len_pack[BZ_MAX_ALPHA_SIZE][4];
419c419
<              [BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE
421c421
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>          len_pack[BZ_MAX_ALPHA_SIZE][4];
(85.8 %, 29053 bytes)
419c419
<              ;
---
>              
421c421
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>          [BZ_MAX_ALPHA_SIZE][4];
419c419
<              ;
---
>              
421c421
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>       UInt32   len_packBZ_MAX_ALPHA_SIZE][4];
419c419
<              ;
---
>              
421c421
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>          len_packBZ_MAX_ALPHA_SIZE][4];
419c419
<              ;
---
>              
421c421
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>       UInt32   BZ_MAX_ALPHA_SIZE][4];
419c419
<              ;
---
>              
421c421
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>          BZ_MAX_ALPHA_SIZE][4];
421c421
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>          len_pack[BZ_MAX_ALPHA_SIZE][4];
421c421
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>          [BZ_MAX_ALPHA_SIZE][4];
421c421
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>          len_packBZ_MAX_ALPHA_SIZE][4];
421c421
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>          BZ_MAX_ALPHA_SIZE][4];
421c421
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>          len_pack[][4];
421c421
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>          [][4];
421c421
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>          len_pack][4];
421c421
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>          ][4];
421c421
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>       UInt32   [BZ_MAX_ALPHA_SIZE][4];
421c421
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>       UInt32   BZ_MAX_ALPHA_SIZE][4];
421c421
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>       UInt32   [][4];
421c421
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>       UInt32   ][4];
(85.8 %, 29038 bytes)
421c421
<          [BZ_MAX_ALPHA_SIZE][4];
---
>          [4];
421c421
<          [BZ_MAX_ALPHA_SIZE][4];
---
>          BZ_MAX_ALPHA_SIZE]4];
421c421
<          [BZ_MAX_ALPHA_SIZE][4];
---
>          ]4];
421c421
<          [BZ_MAX_ALPHA_SIZE][4];
---
>          BZ_MAX_ALPHA_SIZE4];
421c421
<          [BZ_MAX_ALPHA_SIZE][4];
---
>          4];
421c421
<          [BZ_MAX_ALPHA_SIZE][4];
---
>          [][4];
(85.8 %, 29019 bytes)
421c421
<          [4];
---
>          ;
421c421
<          [4];
---
>          4]
421c421
<          [4];
---
>          ]
421c421
<          [4];
---
>          4
421c421
<          [4];
---
>          
421c421
<          [4];
---
>          [];
(85.8 %, 29016 bytes)
421c421
<          ;
---
>          
423,424c423,424
<    }
<    EState;
---
>    
>    ;
421c421
<          ;
---
>          
424c424
<    EState;
---
>    EState
421c421
<          ;
---
>          
423,424c423,424
<    }
<    EState;
---
>    
>    EState
421c421
<          ;
---
>          
424c424
<    EState;
---
>    
421c421
<          ;
---
>          
423,424c423,424
<    }
<    EState;
---
>    
>    
423c423
<    }
---
>    
423,424c423,424
<    }
<    EState;
---
>    
>    ;
423,424c423,424
<    }
<    EState;
---
>    
>    EState
423,424c423,424
<    }
<    EState;
---
>    
>    
423c423
<    }
---
>    
432c432
< ;
---
> 
423,424c423,425
<    }
<    EState;
---
>    
>    ;
> 
432d432
< ;
423,424c423,425
<    }
<    EState;
---
>    
>    EState
> 
432d432
< ;
423,424c423,425
<    }
<    EState;
---
>    
>    
> 
432d432
< ;
424c424
<    EState;
---
>    ;
424c424
<    EState;
---
>    
424c424,425
<    EState;
---
>    ;
> 
432d432
< ;
424c424,425
<    EState;
---
>    
> 
432d432
< ;
424c424
<    EState;
---
>    ;
434c434
< ;
---
> 
424c424
<    EState;
---
>    
434c434
< ;
---
> 
(85.8 %, 29014 bytes)
423c423
<    }
---
>    
434c434
< ;
---
> 
423,424c423,424
<    }
<    EState
---
>    
>    
434c434
< ;
---
> 
423c423
<    }
---
>    
432d431
< ;
434c433,434
< ;
---
> 
> 
423,424c423,426
<    }
<    EState
---
>    
>    
> 
> 
432d433
< ;
434d434
< ;
424c424
<    EState
---
>    
424c424,425
<    EState
---
>    
> 
432d432
< ;
424c424
<    EState
---
>    
434c434
< ;
---
> 
424c424,426
<    EState
---
>    
> 
> 
432d433
< ;
434d434
< ;
424c424
<    EState
---
>    
444c444
< #define BZ_X_IDLE        1
---
> define BZ_X_IDLE        1
424c424,425
<    EState
---
>    
> 
432d432
< ;
444c444
< #define BZ_X_IDLE        1
---
> define BZ_X_IDLE        1
424c424
<    EState
---
>    
434d433
< ;
444c443,444
< #define BZ_X_IDLE        1
---
> 
> define BZ_X_IDLE        1
424c424
<    EState
---
>    
432d431
< ;
434d432
< ;
444c442,444
< #define BZ_X_IDLE        1
---
> 
> 
> define BZ_X_IDLE        1
432c432
< ;
---
> 
432d431
< ;
434c433,434
< ;
---
> 
> 
432c432
< ;
---
> 
444c444
< #define BZ_X_IDLE        1
---
> define BZ_X_IDLE        1
432d431
< ;
434d432
< ;
444c442,444
< #define BZ_X_IDLE        1
---
> 
> 
> define BZ_X_IDLE        1
432c432
< ;
---
> 
444c444
< #define BZ_X_IDLE        1
---
> # BZ_X_IDLE        1
432d431
< ;
434d432
< ;
444c442,444
< #define BZ_X_IDLE        1
---
> 
> 
> # BZ_X_IDLE        1
432c432
< ;
---
> 
444c444
< #define BZ_X_IDLE        1
---
>  BZ_X_IDLE        1
432d431
< ;
434d432
< ;
444c442,444
< #define BZ_X_IDLE        1
---
> 
> 
>  BZ_X_IDLE        1
434c434
< ;
---
> 
(85.8 %, 29013 bytes)
434c434
< ;
---
> 
434d433
< ;
444c443,444
< #define BZ_X_IDLE        1
---
> 
> define BZ_X_IDLE        1
434d433
< ;
444c443,444
< #define BZ_X_IDLE        1
---
> 
> # BZ_X_IDLE        1
434d433
< ;
444c443,444
< #define BZ_X_IDLE        1
---
> 
>  BZ_X_IDLE        1
434d433
< ;
444c443,444
< #define BZ_X_IDLE        1
---
> 
> #define         1
434d433
< ;
444c443,444
< #define BZ_X_IDLE        1
---
> 
> define         1
434d433
< ;
444c443,444
< #define BZ_X_IDLE        1
---
> 
> #         1
434d433
< ;
444c443,444
< #define BZ_X_IDLE        1
---
> 
>          1
444c444
< #define BZ_X_IDLE        1
---
> define BZ_X_IDLE        1
444c444
< #define BZ_X_IDLE        1
---
>  BZ_X_IDLE        1
444c444
< #define BZ_X_IDLE        1
---
> define         1
444c444
< #define BZ_X_IDLE        1
---
>          1
444c444
< #define BZ_X_IDLE        1
---
> define BZ_X_IDLE        
444c444
< #define BZ_X_IDLE        1
---
>  BZ_X_IDLE        
444c444
< #define BZ_X_IDLE        1
---
> define         
444c444
< #define BZ_X_IDLE        1
---
>          
444c444
< #define BZ_X_IDLE        1
---
> # BZ_X_IDLE        1
444c444
< #define BZ_X_IDLE        1
---
> #         1
444c444
< #define BZ_X_IDLE        1
---
> # BZ_X_IDLE        
(85.9 %, 28996 bytes)
445c445
< #define BZ_X_OUTPUT      2
---
>        
445c445
< #define BZ_X_OUTPUT      2
---
> # BZ_X_OUTPUT      2
445c445
< #define BZ_X_OUTPUT      2
---
> #       2
(85.9 %, 28977 bytes)
447c447
< #define BZ_X_MAGIC_1     0
---
>       
447c447
< #define BZ_X_MAGIC_1     0
---
> # BZ_X_MAGIC_1     0
447c447
< #define BZ_X_MAGIC_1     0
---
> #      0
447c447
< #define BZ_X_MAGIC_1     0
---
> # BZ_X_MAGIC_1     
447c447
< #define BZ_X_MAGIC_1     0
---
> #      
447,448c447,448
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
> # BZ_X_MAGIC_1     0
> define BZ_X_MAGIC_2     1
447,448c447,448
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
> #      0
> define BZ_X_MAGIC_2     1
447,448c447,448
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
> # BZ_X_MAGIC_1     
> define BZ_X_MAGIC_2     1
447,448c447,448
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
> #      
> define BZ_X_MAGIC_2     1
447c447
< #define BZ_X_MAGIC_1     0
---
> #define      0
447c447
< #define BZ_X_MAGIC_1     0
---
> #define      
447,448c447,448
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
> #define      0
> define BZ_X_MAGIC_2     1
447,448c447,448
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
> #define      
> define BZ_X_MAGIC_2     1
447,448c447,448
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
> #define      0
> # BZ_X_MAGIC_2     1
447,448c447,448
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
> #define      
> # BZ_X_MAGIC_2     1
447,448c447,448
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
> #define      0
>  BZ_X_MAGIC_2     1
447,448c447,448
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
> #define      
>  BZ_X_MAGIC_2     1
447c447
< #define BZ_X_MAGIC_1     0
---
> #define BZ_X_MAGIC_1     
447,448c447,448
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
> #define BZ_X_MAGIC_1     
> define BZ_X_MAGIC_2     1
447,448c447,448
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
> #define BZ_X_MAGIC_1     
> # BZ_X_MAGIC_2     1
447,448c447,448
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
> #define BZ_X_MAGIC_1     
>  BZ_X_MAGIC_2     1
447,448c447,448
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
> #define BZ_X_MAGIC_1     
> #define      1
447,448c447,448
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
> #define BZ_X_MAGIC_1     
> define      1
447,448c447,448
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
> #define BZ_X_MAGIC_1     
> #      1
447,448c447,448
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
> #define BZ_X_MAGIC_1     
>       1
448c448
< #define BZ_X_MAGIC_2     1
---
> define BZ_X_MAGIC_2     1
448c448
< #define BZ_X_MAGIC_2     1
---
>  BZ_X_MAGIC_2     1
448c448
< #define BZ_X_MAGIC_2     1
---
> define      1
448c448
< #define BZ_X_MAGIC_2     1
---
>       1
448c448
< #define BZ_X_MAGIC_2     1
---
> define BZ_X_MAGIC_2     
448c448
< #define BZ_X_MAGIC_2     1
---
>  BZ_X_MAGIC_2     
448c448
< #define BZ_X_MAGIC_2     1
---
> define      
448c448
< #define BZ_X_MAGIC_2     1
---
>       
448c448
< #define BZ_X_MAGIC_2     1
---
> # BZ_X_MAGIC_2     1
448c448
< #define BZ_X_MAGIC_2     1
---
> #      1
(85.9 %, 28957 bytes)
449c449
< #define BZ_X_MAGIC_3     2
---
>       
449c449
< #define BZ_X_MAGIC_3     2
---
> # BZ_X_MAGIC_3     2
449c449
< #define BZ_X_MAGIC_3     2
---
> #      2
(85.9 %, 28937 bytes)
450c450
< #define BZ_X_MAGIC_4     3
---
>       
450c450
< #define BZ_X_MAGIC_4     3
---
> # BZ_X_MAGIC_4     3
450c450
< #define BZ_X_MAGIC_4     3
---
> #      3
(85.9 %, 28917 bytes)
451c451
< #define BZ_X_BLKHDR_1    4
---
>      
451c451
< #define BZ_X_BLKHDR_1    4
---
> # BZ_X_BLKHDR_1    4
451c451
< #define BZ_X_BLKHDR_1    4
---
> #     4
451c451
< #define BZ_X_BLKHDR_1    4
---
> # BZ_X_BLKHDR_1    
451c451
< #define BZ_X_BLKHDR_1    4
---
> #     
(85.9 %, 28896 bytes)
452c452
< #define BZ_X_BLKHDR_2    5
---
>      
452c452
< #define BZ_X_BLKHDR_2    5
---
> # BZ_X_BLKHDR_2    5
452c452
< #define BZ_X_BLKHDR_2    5
---
> #     5
(85.9 %, 28875 bytes)
453c453
< #define BZ_X_BLKHDR_3    6
---
>      
453c453
< #define BZ_X_BLKHDR_3    6
---
> # BZ_X_BLKHDR_3    6
453c453
< #define BZ_X_BLKHDR_3    6
---
> #     6
(85.9 %, 28854 bytes)
454c454
< #define BZ_X_BLKHDR_4    7
---
>      
454c454
< #define BZ_X_BLKHDR_4    7
---
> # BZ_X_BLKHDR_4    7
454c454
< #define BZ_X_BLKHDR_4    7
---
> #     7
454c454
< #define BZ_X_BLKHDR_4    7
---
> # BZ_X_BLKHDR_4    
(85.9 %, 28833 bytes)
455c455
< #define BZ_X_BLKHDR_5    8
---
>      
455c455
< #define BZ_X_BLKHDR_5    8
---
> # BZ_X_BLKHDR_5    8
455c455
< #define BZ_X_BLKHDR_5    8
---
> #     8
(85.9 %, 28812 bytes)
456c456
< #define BZ_X_BLKHDR_6    9
---
>      
456c456
< #define BZ_X_BLKHDR_6    9
---
> # BZ_X_BLKHDR_6    9
456c456
< #define BZ_X_BLKHDR_6    9
---
> #     9
(86.0 %, 28791 bytes)
457c457
< #define BZ_X_BCRC_1      0
---
>        
457c457
< #define BZ_X_BCRC_1      0
---
> # BZ_X_BCRC_1      0
457c457
< #define BZ_X_BCRC_1      0
---
> #       0
(86.0 %, 28772 bytes)
458c458
< #define BZ_X_BCRC_2      1
---
>        
458c458
< #define BZ_X_BCRC_2      1
---
> # BZ_X_BCRC_2      1
458c458
< #define BZ_X_BCRC_2      1
---
> #       1
(86.0 %, 28753 bytes)
459c459
< #define BZ_X_BCRC_3      2
---
>        
459c459
< #define BZ_X_BCRC_3      2
---
> # BZ_X_BCRC_3      2
459c459
< #define BZ_X_BCRC_3      2
---
> #       2
(86.0 %, 28734 bytes)
460c460
< #define BZ_X_BCRC_4      3
---
>        
460c460
< #define BZ_X_BCRC_4      3
---
> # BZ_X_BCRC_4      3
460c460
< #define BZ_X_BCRC_4      3
---
> #       3
(86.0 %, 28715 bytes)
461c461
< #define BZ_X_RANDBIT     4
---
>       
461c461
< #define BZ_X_RANDBIT     4
---
> # BZ_X_RANDBIT     4
461c461
< #define BZ_X_RANDBIT     4
---
> #      4
(86.0 %, 28695 bytes)
462c462
< #define BZ_X_ORIGPTR_1   5
---
>     
462c462
< #define BZ_X_ORIGPTR_1   5
---
> # BZ_X_ORIGPTR_1   5
462c462
< #define BZ_X_ORIGPTR_1   5
---
> #    5
462c462
< #define BZ_X_ORIGPTR_1   5
---
> # BZ_X_ORIGPTR_1   
(86.0 %, 28673 bytes)
463c463
< #define BZ_X_ORIGPTR_2   6
---
>     
463c463
< #define BZ_X_ORIGPTR_2   6
---
> # BZ_X_ORIGPTR_2   6
463c463
< #define BZ_X_ORIGPTR_2   6
---
> #    6
(86.0 %, 28651 bytes)
464c464
< #define BZ_X_ORIGPTR_3   7
---
>     
464c464
< #define BZ_X_ORIGPTR_3   7
---
> # BZ_X_ORIGPTR_3   7
464c464
< #define BZ_X_ORIGPTR_3   7
---
> #    7
(86.0 %, 28629 bytes)
465c465
< #define BZ_X_MAPPING_1   8
---
>     
465c465
< #define BZ_X_MAPPING_1   8
---
> # BZ_X_MAPPING_1   8
465c465
< #define BZ_X_MAPPING_1   8
---
> #    8
465c465
< #define BZ_X_MAPPING_1   8
---
> # BZ_X_MAPPING_1   
465c465
< #define BZ_X_MAPPING_1   8
---
> #    
(86.0 %, 28607 bytes)
466c466
< #define BZ_X_MAPPING_2   9
---
>     
466c466
< #define BZ_X_MAPPING_2   9
---
> # BZ_X_MAPPING_2   9
466c466
< #define BZ_X_MAPPING_2   9
---
> #    9
(86.1 %, 28585 bytes)
467c467
< #define BZ_X_SELECTOR_1  0
---
>    
467c467
< #define BZ_X_SELECTOR_1  0
---
> # BZ_X_SELECTOR_1  0
467c467
< #define BZ_X_SELECTOR_1  0
---
> #   0
467c467
< #define BZ_X_SELECTOR_1  0
---
> # BZ_X_SELECTOR_1  
467c467
< #define BZ_X_SELECTOR_1  0
---
> #   
(86.1 %, 28562 bytes)
468c468
< #define BZ_X_SELECTOR_2  1
---
>    
468c468
< #define BZ_X_SELECTOR_2  1
---
> # BZ_X_SELECTOR_2  1
468c468
< #define BZ_X_SELECTOR_2  1
---
> #   1
468c468
< #define BZ_X_SELECTOR_2  1
---
> # BZ_X_SELECTOR_2  
(86.1 %, 28539 bytes)
469c469
< #define BZ_X_SELECTOR_3  2
---
>    
469c469
< #define BZ_X_SELECTOR_3  2
---
> # BZ_X_SELECTOR_3  2
469c469
< #define BZ_X_SELECTOR_3  2
---
> #   2
(86.1 %, 28516 bytes)
470c470
< #define BZ_X_CODING_1    3
---
>      
470c470
< #define BZ_X_CODING_1    3
---
> # BZ_X_CODING_1    3
470c470
< #define BZ_X_CODING_1    3
---
> #     3
(86.1 %, 28495 bytes)
471c471
< #define BZ_X_CODING_2    4
---
>      
471c471
< #define BZ_X_CODING_2    4
---
> # BZ_X_CODING_2    4
471c471
< #define BZ_X_CODING_2    4
---
> #     4
(86.1 %, 28474 bytes)
472c472
< #define BZ_X_CODING_3    5
---
>      
472c472
< #define BZ_X_CODING_3    5
---
> # BZ_X_CODING_3    5
472c472
< #define BZ_X_CODING_3    5
---
> #     5
(86.1 %, 28453 bytes)
473c473
< #define BZ_X_MTF_1       6
---
>         
473c473
< #define BZ_X_MTF_1       6
---
> # BZ_X_MTF_1       6
473c473
< #define BZ_X_MTF_1       6
---
> #        6
(86.1 %, 28435 bytes)
474c474
< #define BZ_X_MTF_2       7
---
>         
474c474
< #define BZ_X_MTF_2       7
---
> # BZ_X_MTF_2       7
474c474
< #define BZ_X_MTF_2       7
---
> #        7
(86.1 %, 28417 bytes)
475c475
< #define BZ_X_MTF_3       8
---
>         
475c475
< #define BZ_X_MTF_3       8
---
> # BZ_X_MTF_3       8
475c475
< #define BZ_X_MTF_3       8
---
> #        8
(86.1 %, 28399 bytes)
476c476
< #define BZ_X_MTF_4       9
---
>         
476c476
< #define BZ_X_MTF_4       9
---
> # BZ_X_MTF_4       9
476c476
< #define BZ_X_MTF_4       9
---
> #        9
(86.2 %, 28381 bytes)
477c477
< #define BZ_X_MTF_5       0
---
>         
477c477
< #define BZ_X_MTF_5       0
---
> # BZ_X_MTF_5       0
477c477
< #define BZ_X_MTF_5       0
---
> #        0
(86.2 %, 28363 bytes)
478c478
< #define BZ_X_MTF_6       1
---
>         
478c478
< #define BZ_X_MTF_6       1
---
> # BZ_X_MTF_6       1
478c478
< #define BZ_X_MTF_6       1
---
> #        1
(86.2 %, 28345 bytes)
479c479
< #define BZ_X_ENDHDR_2    2
---
>      
479c479
< #define BZ_X_ENDHDR_2    2
---
> # BZ_X_ENDHDR_2    2
479c479
< #define BZ_X_ENDHDR_2    2
---
> #     2
(86.2 %, 28324 bytes)
480c480
< #define BZ_X_ENDHDR_3    3
---
>      
480c480
< #define BZ_X_ENDHDR_3    3
---
> # BZ_X_ENDHDR_3    3
480c480
< #define BZ_X_ENDHDR_3    3
---
> #     3
(86.2 %, 28303 bytes)
481c481
< #define BZ_X_ENDHDR_4    4
---
>      
481c481
< #define BZ_X_ENDHDR_4    4
---
> # BZ_X_ENDHDR_4    4
481c481
< #define BZ_X_ENDHDR_4    4
---
> #     4
(86.2 %, 28282 bytes)
482c482
< #define BZ_X_ENDHDR_5    5
---
>      
482c482
< #define BZ_X_ENDHDR_5    5
---
> # BZ_X_ENDHDR_5    5
482c482
< #define BZ_X_ENDHDR_5    5
---
> #     5
(86.2 %, 28261 bytes)
483c483
< #define BZ_X_ENDHDR_6    6
---
>      
483c483
< #define BZ_X_ENDHDR_6    6
---
> # BZ_X_ENDHDR_6    6
483c483
< #define BZ_X_ENDHDR_6    6
---
> #     6
(86.2 %, 28240 bytes)
484c484
< #define BZ_X_CCRC_1      7
---
>        
484c484
< #define BZ_X_CCRC_1      7
---
> # BZ_X_CCRC_1      7
484c484
< #define BZ_X_CCRC_1      7
---
> #       7
(86.2 %, 28221 bytes)
485c485
< #define BZ_X_CCRC_2      8
---
>        
485c485
< #define BZ_X_CCRC_2      8
---
> # BZ_X_CCRC_2      8
485c485
< #define BZ_X_CCRC_2      8
---
> #       8
(86.2 %, 28202 bytes)
486c486
< #define BZ_X_CCRC_3      9
---
>        
486c486
< #define BZ_X_CCRC_3      9
---
> # BZ_X_CCRC_3      9
486c486
< #define BZ_X_CCRC_3      9
---
> #       9
(86.2 %, 28183 bytes)
487c487
< #define BZ_X_CCRC_4      0
---
>        
487c487
< #define BZ_X_CCRC_4      0
---
> # BZ_X_CCRC_4      0
487c487
< #define BZ_X_CCRC_4      0
---
> #       0
(86.3 %, 28164 bytes)
493c493
< #define MTFA_SIZE 4096
---
>   
493c493
< #define MTFA_SIZE 4096
---
> # MTFA_SIZE 4096
493c493
< #define MTFA_SIZE 4096
---
> #  4096
493c493
< #define MTFA_SIZE 4096
---
> # MTFA_SIZE 
493c493
< #define MTFA_SIZE 4096
---
> #  
493,494c493,494
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> # MTFA_SIZE 4096
> define MTFL_SIZE 6
493,494c493,494
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #  4096
> define MTFL_SIZE 6
493,494c493,494
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> # MTFA_SIZE 
> define MTFL_SIZE 6
493,494c493,494
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #  
> define MTFL_SIZE 6
493c493
< #define MTFA_SIZE 4096
---
> #define  4096
493c493
< #define MTFA_SIZE 4096
---
> #define  
493,494c493,494
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define  4096
> define MTFL_SIZE 6
493,494c493,494
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define  
> define MTFL_SIZE 6
493,494c493,494
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define  4096
> # MTFL_SIZE 6
493,494c493,494
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define  
> # MTFL_SIZE 6
493,494c493,494
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define  4096
>  MTFL_SIZE 6
493,494c493,494
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define  
>  MTFL_SIZE 6
493c493
< #define MTFA_SIZE 4096
---
> #define MTFA_SIZE 
493,494c493,494
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define MTFA_SIZE 
> define MTFL_SIZE 6
493,494c493,494
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define MTFA_SIZE 
> # MTFL_SIZE 6
493,494c493,494
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define MTFA_SIZE 
>  MTFL_SIZE 6
493,494c493,494
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define MTFA_SIZE 
> #define  6
493,494c493,494
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define MTFA_SIZE 
> define  6
493,494c493,494
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define MTFA_SIZE 
> #  6
493,494c493,494
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define MTFA_SIZE 
>   6
494c494
< #define MTFL_SIZE 6
---
> define MTFL_SIZE 6
494c494
< #define MTFL_SIZE 6
---
>  MTFL_SIZE 6
494c494
< #define MTFL_SIZE 6
---
> define  6
494c494
< #define MTFL_SIZE 6
---
>   6
494c494
< #define MTFL_SIZE 6
---
> define MTFL_SIZE 
494c494
< #define MTFL_SIZE 6
---
>  MTFL_SIZE 
494c494
< #define MTFL_SIZE 6
---
> define  
494c494
< #define MTFL_SIZE 6
---
>   
494c494
< #define MTFL_SIZE 6
---
> # MTFL_SIZE 6
494c494
< #define MTFL_SIZE 6
---
> #  6
494c494
< #define MTFL_SIZE 6
---
> # MTFL_SIZE 
494c494
< #define MTFL_SIZE 6
---
> #  
494c494,495
< #define MTFL_SIZE 6
---
> # MTFL_SIZE 6
> 
500d500
< typedef
494c494,495
< #define MTFL_SIZE 6
---
> #  6
> 
500d500
< typedef
494c494,495
< #define MTFL_SIZE 6
---
> # MTFL_SIZE 
> 
500d500
< typedef
494c494,495
< #define MTFL_SIZE 6
---
> #  
> 
500d500
< typedef
494c494
< #define MTFL_SIZE 6
---
> #define  6
494c494
< #define MTFL_SIZE 6
---
> #define  
494c494,495
< #define MTFL_SIZE 6
---
> #define  6
> 
500d500
< typedef
494c494,495
< #define MTFL_SIZE 6
---
> #define  
> 
500d500
< typedef
494c494
< #define MTFL_SIZE 6
---
> #define  6
501c501
<    struct {
---
>     {
494c494
< #define MTFL_SIZE 6
---
> #define  
501c501
<    struct {
---
>     {
494c494
< #define MTFL_SIZE 6
---
> #define  6
500,501c500,501
< typedef
<    struct {
---
> 
>     {
494c494
< #define MTFL_SIZE 6
---
> #define  
500,501c500,501
< typedef
<    struct {
---
> 
>     {
494c494
< #define MTFL_SIZE 6
---
> #define MTFL_SIZE 
494c494,495
< #define MTFL_SIZE 6
---
> #define MTFL_SIZE 
> 
500d500
< typedef
494c494
< #define MTFL_SIZE 6
---
> #define MTFL_SIZE 
501c501
<    struct {
---
>     {
494c494
< #define MTFL_SIZE 6
---
> #define MTFL_SIZE 
500,501c500,501
< typedef
<    struct {
---
> 
>     {
494c494
< #define MTFL_SIZE 6
---
> #define MTFL_SIZE 
501c501
<    struct {
---
>    struct 
494c494
< #define MTFL_SIZE 6
---
> #define MTFL_SIZE 
500,501c500,501
< typedef
<    struct {
---
> 
>    struct 
494c494
< #define MTFL_SIZE 6
---
> #define MTFL_SIZE 
501c501
<    struct {
---
>     
494c494
< #define MTFL_SIZE 6
---
> #define MTFL_SIZE 
500,501c500,501
< typedef
<    struct {
---
> 
>     
500c500
< typedef
---
> 
500,501c500,501
< typedef
<    struct {
---
> 
>     {
500,501c500,501
< typedef
<    struct {
---
> 
>    struct 
500,501c500,501
< typedef
<    struct {
---
> 
>     
500c500
< typedef
---
> 
503c503
<       bz_stream strm;
---
>        strm;
500,501c500,501
< typedef
<    struct {
---
> 
>     {
503c503
<       bz_stream strm;
---
>        strm;
500,501c500,501
< typedef
<    struct {
---
> 
>    struct 
503c503
<       bz_stream strm;
---
>        strm;
500,501c500,501
< typedef
<    struct {
---
> 
>     
503c503
<       bz_stream strm;
---
>        strm;
501c501
<    struct {
---
>     {
501c501
<    struct {
---
>     
501c501
<    struct {
---
>     {
503c503
<       bz_stream strm;
---
>        strm;
501c501
<    struct {
---
>     
503c503
<       bz_stream strm;
---
>        strm;
501c501
<    struct {
---
>     {
503c503
<       bz_stream strm;
---
>       bz_stream ;
501c501
<    struct {
---
>     
503c503
<       bz_stream strm;
---
>       bz_stream ;
501c501
<    struct {
---
>     {
503c503
<       bz_stream strm;
---
>        ;
501c501
<    struct {
---
>     
503c503
<       bz_stream strm;
---
>        ;
501c501
<    struct {
---
>    struct 
501c501
<    struct {
---
>    struct 
503c503
<       bz_stream strm;
---
>        strm;
501c501
<    struct {
---
>    struct 
503c503
<       bz_stream strm;
---
>       bz_stream ;
501c501
<    struct {
---
>    struct 
503c503
<       bz_stream strm;
---
>        ;
501c501
<    struct {
---
>    struct 
503c503
<       bz_stream strm;
---
>       bz_stream strm
501c501
<    struct {
---
>    struct 
503c503
<       bz_stream strm;
---
>        strm
501c501
<    struct {
---
>    struct 
503c503
<       bz_stream strm;
---
>       bz_stream 
501c501
<    struct {
---
>    struct 
503c503
<       bz_stream strm;
---
>        
503c503
<       bz_stream strm;
---
>        strm;
503c503
<       bz_stream strm;
---
>        ;
503c503
<       bz_stream strm;
---
>        strm
503c503
<       bz_stream strm;
---
>        
503c503
<       bz_stream strm;
---
>        strm;
506c506
<       Int32    state;
---
>           state;
(86.3 %, 28151 bytes)
503c503
<        ;
---
>        
506c506
<       Int32    state;
---
>           state;
503c503
<        ;
---
>        
506c506
<       Int32    state;
---
>       Int32    ;
503c503
<        ;
---
>        
506c506
<       Int32    state;
---
>           ;
(86.3 %, 28145 bytes)
506c506
<       Int32    ;
---
>           ;
509c509
<       unsigned char    state_out_ch;
---
>        char    state_out_ch;
506c506
<       Int32    ;
---
>           
509c509
<       unsigned char    state_out_ch;
---
>        char    state_out_ch;
506c506
<       Int32    ;
---
>           ;
509c509
<       unsigned char    state_out_ch;
---
>       unsigned     state_out_ch;
(86.3 %, 28132 bytes)
506c506
<           ;
---
>           
509c509
<        char    state_out_ch;
---
>        char    ;
506c506
<           ;
---
>           
509c509
<        char    state_out_ch;
---
>            ;
(86.3 %, 28119 bytes)
509,510c509,510
<        char    ;
<       Int32    state_out_len;
---
>            ;
>           state_out_len;
509,510c509,510
<        char    ;
<       Int32    state_out_len;
---
>            
>           state_out_len;
509,510c509,510
<        char    ;
<       Int32    state_out_len;
---
>            ;
>       Int32    ;
509,510c509,510
<        char    ;
<       Int32    state_out_len;
---
>            
>       Int32    ;
509,510c509,510
<        char    ;
<       Int32    state_out_len;
---
>            ;
>           ;
(86.3 %, 28102 bytes)
509c509
<            ;
---
>            
511c511
<       Bool     blockRandomised;
---
>            blockRandomised;
509,511c509,511
<            ;
<       Int32    ;
<       Bool     blockRandomised;
---
>            
>           ;
>            blockRandomised;
509,511c509,511
<            ;
<       Int32    ;
<       Bool     blockRandomised;
---
>            
>       Int32    
>            blockRandomised;
509,511c509,511
<            ;
<       Int32    ;
<       Bool     blockRandomised;
---
>            
>           
>            blockRandomised;
510c510
<       Int32    ;
---
>           ;
(86.3 %, 28096 bytes)
510,512c510,512
<       Int32    
<            blockRandomised;
<       BZ_RAND_DECLS;
---
>           
>            blockRandomised
>       ;
510,512c510,512
<       Int32    
<            blockRandomised;
<       BZ_RAND_DECLS;
---
>           
>            
>       ;
511c511
<            blockRandomised;
---
>            ;
511c511
<            blockRandomised;
---
>            
(86.3 %, 28062 bytes)
512c512
<       ;
---
>       
515c515
<       UInt32   bsBuff;
---
>          
515c515
<       UInt32   bsBuff;
---
>          bsBuff;
515c515
<       UInt32   bsBuff;
---
>          ;
(86.3 %, 28048 bytes)
516c516
<       Int32    bsLive;
---
>           
519c519
<       Int32    blockSize100k;
---
>           blockSize100k;
516c516
<       Int32    bsLive;
---
>       Int32    ;
516c516
<       Int32    bsLive;
---
>       Int32    
516c516
<       Int32    bsLive;
---
>       Int32    ;
519c519
<       Int32    blockSize100k;
---
>           blockSize100k;
516c516
<       Int32    bsLive;
---
>       Int32    
519c519
<       Int32    blockSize100k;
---
>           blockSize100k;
(86.3 %, 28042 bytes)
516c516
<       Int32    ;
---
>       Int32    
516c516
<       Int32    ;
---
>       Int32    
519c519
<       Int32    blockSize100k;
---
>           blockSize100k;
516c516
<       Int32    ;
---
>       Int32    
519c519
<       Int32    blockSize100k;
---
>       Int32    ;
(86.3 %, 28036 bytes)
519c519
<           blockSize100k;
---
>           
519,520c519,520
<           blockSize100k;
<       Bool     smallDecompress;
---
>           ;
>            smallDecompress;
519,520c519,520
<           blockSize100k;
<       Bool     smallDecompress;
---
>           
>            smallDecompress;
519,520c519,520
<           blockSize100k;
<       Bool     smallDecompress;
---
>           ;
>       Bool     ;
(86.3 %, 28018 bytes)
520,521c520,521
<            smallDecompress;
<       Int32    currBlockNo;
---
>            
>           currBlockNo;
520,521c520,521
<            smallDecompress;
<       Int32    currBlockNo;
---
>            ;
>       Int32    ;
(86.3 %, 27997 bytes)
521,522c521,522
<           currBlockNo;
<       Int32    verbosity;
---
>           
>           verbosity;
521,522c521,522
<           currBlockNo;
<       Int32    verbosity;
---
>           ;
>       Int32    ;
(86.3 %, 27980 bytes)
522c522
<           verbosity;
---
>           
525c525
<       Int32    origPtr;
---
>           origPtr;
522c522
<           verbosity;
---
>           ;
525c525
<       Int32    origPtr;
---
>       Int32    ;
522c522
<           verbosity;
---
>           
525c525
<       Int32    origPtr;
---
>       Int32    ;
(86.4 %, 27965 bytes)
525,526c525,526
<           origPtr;
<       UInt32   tPos;
---
>           
>          tPos;
525,526c525,526
<           origPtr;
<       UInt32   tPos;
---
>           ;
>       UInt32   ;
525,526c525,526
<           origPtr;
<       UInt32   tPos;
---
>           
>       UInt32   ;
(86.4 %, 27951 bytes)
526,527c526,527
<          tPos;
<       Int32    k0;
---
>          
>           k0;
526,527c526,527
<          tPos;
<       Int32    k0;
---
>          ;
>       Int32    ;
(86.4 %, 27941 bytes)
527,528c527,528
<           k0;
<       Int32    unzftab[6];
---
>           
>           unzftab[6];
527,528c527,528
<           k0;
<       Int32    unzftab[6];
---
>           ;
>       Int32    [6];
527,528c527,528
<           k0;
<       Int32    unzftab[6];
---
>           
>       Int32    [6];
(86.4 %, 27933 bytes)
528c528
<           unzftab[6];
---
>           ];
528c528
<           unzftab[6];
---
>           [6;
528c528
<           unzftab[6];
---
>           6;
528c528
<           unzftab[6];
---
>           [;
528c528
<           unzftab[6];
---
>           ;
528c528
<           unzftab[6];
---
>           unzftab6];
528c528
<           unzftab[6];
---
>           unzftab];
528c528
<           unzftab[6];
---
>           unzftab6;
(86.4 %, 27923 bytes)
528,529c528,529
<           ;
<       Int32    nblock_used;
---
>           
>           
529c529
<       Int32    nblock_used;
---
>           nblock_used;
529c529
<       Int32    nblock_used;
---
>           ;
529c529
<       Int32    nblock_used;
---
>           nblock_used
529c529
<       Int32    nblock_used;
---
>           
(86.4 %, 27907 bytes)
529,530c529,530
<           ;
<       Int32    cftab[7];
---
>           
>           cftab[7];
529,530c529,530
<           ;
<       Int32    cftab[7];
---
>           
>       Int32    [7];
529,530c529,530
<           ;
<       Int32    cftab[7];
---
>           
>           [7];
529,530c529,530
<           ;
<       Int32    cftab[7];
---
>           
>       Int32    cftab7];
529,530c529,530
<           ;
<       Int32    cftab[7];
---
>           
>           cftab7];
529,530c529,530
<           ;
<       Int32    cftab[7];
---
>           
>       Int32    7];
529,530c529,530
<           ;
<       Int32    cftab[7];
---
>           
>           7];
530c530
<       Int32    cftab[7];
---
>           cftab[7];
530c530
<       Int32    cftab[7];
---
>           [7];
530c530
<       Int32    cftab[7];
---
>           cftab7];
530c530
<       Int32    cftab[7];
---
>           7];
530c530
<       Int32    cftab[7];
---
>           cftab[];
530c530
<       Int32    cftab[7];
---
>           [];
530c530
<       Int32    cftab[7];
---
>           cftab];
530c530
<       Int32    cftab[7];
---
>           ];
530c530
<       Int32    cftab[7];
---
>       Int32    [7];
530c530
<       Int32    cftab[7];
---
>       Int32    7];
530c530
<       Int32    cftab[7];
---
>       Int32    [];
530c530
<       Int32    cftab[7];
---
>       Int32    ];
530c530
<       Int32    cftab[7];
---
>       Int32    [7;
530c530
<       Int32    cftab[7];
---
>       Int32    7;
530c530
<       Int32    cftab[7];
---
>       Int32    [;
530c530
<       Int32    cftab[7];
---
>       Int32    ;
530c530
<       Int32    cftab[7];
---
>       Int32    cftab7];
530c530
<       Int32    cftab[7];
---
>       Int32    cftab];
530c530
<       Int32    cftab[7];
---
>       Int32    cftab7;
(86.4 %, 27899 bytes)
530,531c530,531
<       Int32    ;
<       Int32    cftabCopy[7];
---
>       Int32    
>           7];
531c531
<       Int32    cftabCopy[7];
---
>           cftabCopy[7];
531c531
<       Int32    cftabCopy[7];
---
>           [7];
531c531
<       Int32    cftabCopy[7];
---
>           cftabCopy7];
531c531
<       Int32    cftabCopy[7];
---
>           7];
531c531
<       Int32    cftabCopy[7];
---
>           cftabCopy[];
531c531
<       Int32    cftabCopy[7];
---
>           [];
531c531
<       Int32    cftabCopy[7];
---
>           cftabCopy];
531c531
<       Int32    cftabCopy[7];
---
>           ];
531c531
<       Int32    cftabCopy[7];
---
>       Int32    [7];
531c531
<       Int32    cftabCopy[7];
---
>       Int32    7];
531c531
<       Int32    cftabCopy[7];
---
>       Int32    [];
531c531
<       Int32    cftabCopy[7];
---
>       Int32    ];
531c531
<       Int32    cftabCopy[7];
---
>       Int32    [7;
531c531
<       Int32    cftabCopy[7];
---
>       Int32    7;
531c531
<       Int32    cftabCopy[7];
---
>       Int32    [;
531c531
<       Int32    cftabCopy[7];
---
>       Int32    ;
531c531
<       Int32    cftabCopy[7];
---
>       Int32    cftabCopy7];
531c531
<       Int32    cftabCopy[7];
---
>       Int32    cftabCopy];
531c531
<       Int32    cftabCopy[7];
---
>       Int32    cftabCopy7;
(86.4 %, 27887 bytes)
531c531
<       Int32    ;
---
>       Int32    
534c534
<       UInt32   tt;
---
>          
534c534
<       UInt32   tt;
---
>          tt;
534c534
<       UInt32   tt;
---
>          ;
534c534
<       UInt32   tt;
---
>          tt
534c534
<       UInt32   tt;
---
>          
534c534
<       UInt32   tt;
---
>          tt;
537c537
<       unsigned short   ll16;
---
>        short   ll16;
534c534
<       UInt32   tt;
---
>          ;
537c537
<       unsigned short   ll16;
---
>        short   ll16;
534c534
<       UInt32   tt;
---
>          tt
537c537
<       unsigned short   ll16;
---
>        short   ll16;
534c534
<       UInt32   tt;
---
>          
537c537
<       unsigned short   ll16;
---
>        short   ll16;
534c534
<       UInt32   tt;
---
>       UInt32   ;
534c534
<       UInt32   tt;
---
>       UInt32   
534c534
<       UInt32   tt;
---
>       UInt32   ;
537c537
<       unsigned short   ll16;
---
>        short   ll16;
534c534
<       UInt32   tt;
---
>       UInt32   
537c537
<       unsigned short   ll16;
---
>        short   ll16;
534c534
<       UInt32   tt;
---
>       UInt32   ;
537c537
<       unsigned short   ll16;
---
>       unsigned    ll16;
534c534
<       UInt32   tt;
---
>       UInt32   
537c537
<       unsigned short   ll16;
---
>       unsigned    ll16;
534c534
<       UInt32   tt;
---
>       UInt32   ;
537c537
<       unsigned short   ll16;
---
>           ll16;
534c534
<       UInt32   tt;
---
>       UInt32   
537c537
<       unsigned short   ll16;
---
>           ll16;
534c534
<       UInt32   tt;
---
>       UInt32   tt
534c534
<       UInt32   tt;
---
>       UInt32   tt
537c537
<       unsigned short   ll16;
---
>        short   ll16;
534c534
<       UInt32   tt;
---
>       UInt32   tt
537c537
<       unsigned short   ll16;
---
>       unsigned    ll16;
534c534
<       UInt32   tt;
---
>       UInt32   tt
537c537
<       unsigned short   ll16;
---
>           ll16;
534c534
<       UInt32   tt;
---
>       UInt32   tt
537c537
<       unsigned short   ll16;
---
>       unsigned short   ;
534c534
<       UInt32   tt;
---
>       UInt32   tt
537c537
<       unsigned short   ll16;
---
>        short   ;
534c534
<       UInt32   tt;
---
>       UInt32   tt
537c537
<       unsigned short   ll16;
---
>       unsigned    ;
534c534
<       UInt32   tt;
---
>       UInt32   tt
537c537
<       unsigned short   ll16;
---
>           ;
537c537
<       unsigned short   ll16;
---
>        short   ll16;
537c537
<       unsigned short   ll16;
---
>           ll16;
537c537
<       unsigned short   ll16;
---
>        short   ;
537c537
<       unsigned short   ll16;
---
>           ;
537c537
<       unsigned short   ll16;
---
>        short   ll16
537c537
<       unsigned short   ll16;
---
>           ll16
537c537
<       unsigned short   ll16;
---
>        short   
537c537
<       unsigned short   ll16;
---
>           
537c537
<       unsigned short   ll16;
---
>       unsigned    ll16;
(86.4 %, 27879 bytes)
537c537
<        short   ll16;
---
>           ll16;
537c537
<        short   ll16;
---
>           ;
537c537
<        short   ll16;
---
>           ll16
537c537
<        short   ll16;
---
>           
537,538c537,538
<        short   ll16;
<       unsigned char    *ll4;
---
>           ll16;
>        char    *ll4;
537,538c537,538
<        short   ll16;
<       unsigned char    *ll4;
---
>           ;
>        char    *ll4;
537,538c537,538
<        short   ll16;
<       unsigned char    *ll4;
---
>           ll16
>        char    *ll4;
537,538c537,538
<        short   ll16;
<       unsigned char    *ll4;
---
>           
>        char    *ll4;
537c537
<        short   ll16;
---
>        short   ;
537c537
<        short   ll16;
---
>        short   
537,538c537,538
<        short   ll16;
<       unsigned char    *ll4;
---
>        short   ;
>        char    *ll4;
537,538c537,538
<        short   ll16;
<       unsigned char    *ll4;
---
>        short   
>        char    *ll4;
537,538c537,538
<        short   ll16;
<       unsigned char    *ll4;
---
>        short   ;
>       unsigned     *ll4;
537,538c537,538
<        short   ll16;
<       unsigned char    *ll4;
---
>        short   
>       unsigned     *ll4;
537,538c537,538
<        short   ll16;
<       unsigned char    *ll4;
---
>        short   ;
>            *ll4;
537,538c537,538
<        short   ll16;
<       unsigned char    *ll4;
---
>        short   
>            *ll4;
537c537
<        short   ll16;
---
>        short   ll16
537,538c537,538
<        short   ll16;
<       unsigned char    *ll4;
---
>        short   ll16
>        char    *ll4;
537,538c537,538
<        short   ll16;
<       unsigned char    *ll4;
---
>        short   ll16
>       unsigned     *ll4;
537,538c537,538
<        short   ll16;
<       unsigned char    *ll4;
---
>        short   ll16
>            *ll4;
537,538c537,538
<        short   ll16;
<       unsigned char    *ll4;
---
>        short   ll16
>       unsigned char    ll4;
537,538c537,538
<        short   ll16;
<       unsigned char    *ll4;
---
>        short   ll16
>        char    ll4;
537,538c537,538
<        short   ll16;
<       unsigned char    *ll4;
---
>        short   ll16
>       unsigned     ll4;
537,538c537,538
<        short   ll16;
<       unsigned char    *ll4;
---
>        short   ll16
>            ll4;
538c538
<       unsigned char    *ll4;
---
>        char    *ll4;
538c538
<       unsigned char    *ll4;
---
>            *ll4;
538c538
<       unsigned char    *ll4;
---
>        char    ll4;
(86.4 %, 27871 bytes)
538c538
<        char    *ll4;
---
>            *ll4;
538c538
<        char    *ll4;
---
>            ll4;
538c538
<        char    *ll4;
---
>            *;
538c538
<        char    *ll4;
---
>            ;
538c538
<        char    *ll4;
---
>            *ll4
538c538
<        char    *ll4;
---
>            ll4
538c538
<        char    *ll4;
---
>            *
538c538
<        char    *ll4;
---
>            
538c538
<        char    *ll4;
---
>        char    ll4;
538c538
<        char    *ll4;
---
>        char    ;
538c538
<        char    *ll4;
---
>        char    ll4
538c538
<        char    *ll4;
---
>        char    
538c538
<        char    *ll4;
---
>        char    ll4;
541c541
<       UInt32   storedBlockCRC;
---
>          storedBlockCRC;
538c538
<        char    *ll4;
---
>        char    ;
541c541
<       UInt32   storedBlockCRC;
---
>          storedBlockCRC;
538c538
<        char    *ll4;
---
>        char    ll4
541c541
<       UInt32   storedBlockCRC;
---
>          storedBlockCRC;
538c538
<        char    *ll4;
---
>        char    
541c541
<       UInt32   storedBlockCRC;
---
>          storedBlockCRC;
538c538
<        char    *ll4;
---
>        char    *;
538c538
<        char    *ll4;
---
>        char    *
538c538
<        char    *ll4;
---
>        char    *;
541c541
<       UInt32   storedBlockCRC;
---
>          storedBlockCRC;
538c538
<        char    *ll4;
---
>        char    *
541c541
<       UInt32   storedBlockCRC;
---
>          storedBlockCRC;
538c538
<        char    *ll4;
---
>        char    *;
541c541
<       UInt32   storedBlockCRC;
---
>       UInt32   ;
538c538
<        char    *ll4;
---
>        char    *
541c541
<       UInt32   storedBlockCRC;
---
>       UInt32   ;
538c538
<        char    *ll4;
---
>        char    *;
541c541
<       UInt32   storedBlockCRC;
---
>          ;
538c538
<        char    *ll4;
---
>        char    *
541c541
<       UInt32   storedBlockCRC;
---
>          ;
538c538
<        char    *ll4;
---
>        char    *ll4
538c538
<        char    *ll4;
---
>        char    *ll4
541c541
<       UInt32   storedBlockCRC;
---
>          storedBlockCRC;
538c538
<        char    *ll4;
---
>        char    *ll4
541c541
<       UInt32   storedBlockCRC;
---
>       UInt32   ;
(86.4 %, 27870 bytes)
538c538
<        char    ll4;
---
>        char    ;
538c538
<        char    ll4;
---
>        char    
538c538
<        char    ll4;
---
>        char    ;
541c541
<       UInt32   storedBlockCRC;
---
>          storedBlockCRC;
538c538
<        char    ll4;
---
>        char    
541c541
<       UInt32   storedBlockCRC;
---
>          storedBlockCRC;
538c538
<        char    ll4;
---
>        char    ;
541c541
<       UInt32   storedBlockCRC;
---
>       UInt32   ;
538c538
<        char    ll4;
---
>        char    
541c541
<       UInt32   storedBlockCRC;
---
>       UInt32   ;
538c538
<        char    ll4;
---
>        char    ;
541c541
<       UInt32   storedBlockCRC;
---
>          ;
538c538
<        char    ll4;
---
>        char    
541c541
<       UInt32   storedBlockCRC;
---
>          ;
538c538
<        char    ll4;
---
>        char    ll4
538c538
<        char    ll4;
---
>        char    ll4
541c541
<       UInt32   storedBlockCRC;
---
>          storedBlockCRC;
538c538
<        char    ll4;
---
>        char    ll4
541c541
<       UInt32   storedBlockCRC;
---
>       UInt32   ;
538c538
<        char    ll4;
---
>        char    ll4
541c541
<       UInt32   storedBlockCRC;
---
>          ;
538c538
<        char    ll4;
---
>        char    ll4
541c541
<       UInt32   storedBlockCRC;
---
>       UInt32   storedBlockCRC
538c538
<        char    ll4;
---
>        char    ll4
541c541
<       UInt32   storedBlockCRC;
---
>          storedBlockCRC
538c538
<        char    ll4;
---
>        char    ll4
541c541
<       UInt32   storedBlockCRC;
---
>       UInt32   
538c538
<        char    ll4;
---
>        char    ll4
541c541
<       UInt32   storedBlockCRC;
---
>          
541c541
<       UInt32   storedBlockCRC;
---
>          storedBlockCRC;
541c541
<       UInt32   storedBlockCRC;
---
>          ;
(86.4 %, 27849 bytes)
540a541
>          
542d542
<       UInt32   storedCombinedCRC;
541,542c541,542
<          ;
<       UInt32   storedCombinedCRC;
---
>          
>       UInt32   storedCombinedCRC
541,542c541,542
<          ;
<       UInt32   storedCombinedCRC;
---
>          
>          storedCombinedCRC
541,542c541,542
<          ;
<       UInt32   storedCombinedCRC;
---
>          
>       UInt32   
541,542c541,542
<          ;
<       UInt32   storedCombinedCRC;
---
>          
>          
542c542
<       UInt32   storedCombinedCRC;
---
>          storedCombinedCRC;
542c542
<       UInt32   storedCombinedCRC;
---
>          ;
(86.4 %, 27825 bytes)
541a542
>          
543d543
<       UInt32   calculatedBlockCRC;
542,543c542,543
<          ;
<       UInt32   calculatedBlockCRC;
---
>          
>       UInt32   calculatedBlockCRC
542,543c542,543
<          ;
<       UInt32   calculatedBlockCRC;
---
>          
>          calculatedBlockCRC
542,543c542,543
<          ;
<       UInt32   calculatedBlockCRC;
---
>          
>       UInt32   
542,543c542,543
<          ;
<       UInt32   calculatedBlockCRC;
---
>          
>          
543c543
<       UInt32   calculatedBlockCRC;
---
>          calculatedBlockCRC;
543c543
<       UInt32   calculatedBlockCRC;
---
>          ;
(86.4 %, 27800 bytes)
542a543
>          
544d544
<       UInt32   calculatedCombinedCRC;
543,544c543,544
<          ;
<       UInt32   calculatedCombinedCRC;
---
>          
>       UInt32   calculatedCombinedCRC
543,544c543,544
<          ;
<       UInt32   calculatedCombinedCRC;
---
>          
>          calculatedCombinedCRC
543,544c543,544
<          ;
<       UInt32   calculatedCombinedCRC;
---
>          
>       UInt32   
543,544c543,544
<          ;
<       UInt32   calculatedCombinedCRC;
---
>          
>          
544c544
<       UInt32   calculatedCombinedCRC;
---
>          calculatedCombinedCRC;
544c544
<       UInt32   calculatedCombinedCRC;
---
>          ;
(86.4 %, 27772 bytes)
544c544
<          ;
---
>          
547c547
<       Int32    nInUse;
---
>           ;
544c544
<          ;
---
>          
547c547
<       Int32    nInUse;
---
>       Int32    nInUse
544c544
<          ;
---
>          
547c547
<       Int32    nInUse;
---
>           nInUse
544c544
<          ;
---
>          
547c547
<       Int32    nInUse;
---
>       Int32    
544c544
<          ;
---
>          
547c547
<       Int32    nInUse;
---
>           
547c547
<       Int32    nInUse;
---
>           nInUse;
547c547
<       Int32    nInUse;
---
>           ;
(86.5 %, 27760 bytes)
547,548c547,548
<           ;
<       Bool     inUse[6];
---
>           
>            [6];
547,548c547,548
<           ;
<       Bool     inUse[6];
---
>           
>       Bool     inUse6];
547,548c547,548
<           ;
<       Bool     inUse[6];
---
>           
>            inUse6];
547,548c547,548
<           ;
<       Bool     inUse[6];
---
>           
>       Bool     6];
547,548c547,548
<           ;
<       Bool     inUse[6];
---
>           
>            6];
548c548
<       Bool     inUse[6];
---
>            inUse[6];
548c548
<       Bool     inUse[6];
---
>            [6];
548c548
<       Bool     inUse[6];
---
>            inUse6];
548c548
<       Bool     inUse[6];
---
>            6];
548c548
<       Bool     inUse[6];
---
>            inUse[];
548c548
<       Bool     inUse[6];
---
>            [];
548c548
<       Bool     inUse[6];
---
>            inUse];
548c548
<       Bool     inUse[6];
---
>            ];
548c548
<       Bool     inUse[6];
---
>       Bool     [6];
548c548
<       Bool     inUse[6];
---
>       Bool     6];
548c548
<       Bool     inUse[6];
---
>       Bool     [];
548c548
<       Bool     inUse[6];
---
>       Bool     ];
548c548
<       Bool     inUse[6];
---
>       Bool     [6;
548c548
<       Bool     inUse[6];
---
>       Bool     6;
548c548
<       Bool     inUse[6];
---
>       Bool     [;
548c548
<       Bool     inUse[6];
---
>       Bool     ;
548c548
<       Bool     inUse[6];
---
>       Bool     inUse6];
548c548
<       Bool     inUse[6];
---
>       Bool     inUse];
548c548
<       Bool     inUse[6];
---
>       Bool     inUse6;
(86.5 %, 27752 bytes)
548,549c548,549
<       Bool     ;
<       Bool     inUse16[6];
---
>       Bool     
>            6];
549c549
<       Bool     inUse16[6];
---
>            inUse16[6];
549c549
<       Bool     inUse16[6];
---
>            [6];
549c549
<       Bool     inUse16[6];
---
>            inUse166];
549c549
<       Bool     inUse16[6];
---
>            6];
549c549
<       Bool     inUse16[6];
---
>            inUse16[];
549c549
<       Bool     inUse16[6];
---
>            [];
549c549
<       Bool     inUse16[6];
---
>            inUse16];
549c549
<       Bool     inUse16[6];
---
>            ];
549c549
<       Bool     inUse16[6];
---
>       Bool     [6];
549c549
<       Bool     inUse16[6];
---
>       Bool     6];
549c549
<       Bool     inUse16[6];
---
>       Bool     [];
549c549
<       Bool     inUse16[6];
---
>       Bool     ];
549c549
<       Bool     inUse16[6];
---
>       Bool     [6;
549c549
<       Bool     inUse16[6];
---
>       Bool     6;
549c549
<       Bool     inUse16[6];
---
>       Bool     [;
549c549
<       Bool     inUse16[6];
---
>       Bool     ;
549c549
<       Bool     inUse16[6];
---
>       Bool     inUse166];
549c549
<       Bool     inUse16[6];
---
>       Bool     inUse16];
549c549
<       Bool     inUse16[6];
---
>       Bool     inUse166;
(86.5 %, 27742 bytes)
549,550c549,550
<       Bool     ;
<       unsigned char    seqToUnseq[6];
---
>       Bool     
>            [6];
550c550
<       unsigned char    seqToUnseq[6];
---
>        char    seqToUnseq[6];
550c550
<       unsigned char    seqToUnseq[6];
---
>            seqToUnseq[6];
550c550
<       unsigned char    seqToUnseq[6];
---
>        char    [6];
550c550
<       unsigned char    seqToUnseq[6];
---
>            [6];
550c550
<       unsigned char    seqToUnseq[6];
---
>        char    seqToUnseq6];
550c550
<       unsigned char    seqToUnseq[6];
---
>            seqToUnseq6];
550c550
<       unsigned char    seqToUnseq[6];
---
>        char    6];
550c550
<       unsigned char    seqToUnseq[6];
---
>            6];
550c550
<       unsigned char    seqToUnseq[6];
---
>       unsigned     seqToUnseq[6];
(86.5 %, 27734 bytes)
550c550
<        char    seqToUnseq[6];
---
>            seqToUnseq[6];
550c550
<        char    seqToUnseq[6];
---
>            [6];
550c550
<        char    seqToUnseq[6];
---
>            seqToUnseq6];
550c550
<        char    seqToUnseq[6];
---
>            6];
550c550
<        char    seqToUnseq[6];
---
>            seqToUnseq[];
550c550
<        char    seqToUnseq[6];
---
>            [];
550c550
<        char    seqToUnseq[6];
---
>            seqToUnseq];
550c550
<        char    seqToUnseq[6];
---
>            ];
550c550
<        char    seqToUnseq[6];
---
>        char    [6];
550c550
<        char    seqToUnseq[6];
---
>        char    6];
550c550
<        char    seqToUnseq[6];
---
>        char    [];
550c550
<        char    seqToUnseq[6];
---
>        char    ];
550c550
<        char    seqToUnseq[6];
---
>        char    [6;
550c550
<        char    seqToUnseq[6];
---
>        char    6;
550c550
<        char    seqToUnseq[6];
---
>        char    [;
550c550
<        char    seqToUnseq[6];
---
>        char    ;
550c550
<        char    seqToUnseq[6];
---
>        char    seqToUnseq6];
550c550
<        char    seqToUnseq[6];
---
>        char    seqToUnseq];
550c550
<        char    seqToUnseq[6];
---
>        char    seqToUnseq6;
(86.5 %, 27721 bytes)
550c550
<        char    ;
---
>        char    
553c553
<       unsigned char    mtfa   [MTFA_SIZE];
---
>               [MTFA_SIZE];
553c553
<       unsigned char    mtfa   [MTFA_SIZE];
---
>        char    mtfa   [MTFA_SIZE];
553c553
<       unsigned char    mtfa   [MTFA_SIZE];
---
>            mtfa   [MTFA_SIZE];
553c553
<       unsigned char    mtfa   [MTFA_SIZE];
---
>        char       [MTFA_SIZE];
553c553
<       unsigned char    mtfa   [MTFA_SIZE];
---
>               [MTFA_SIZE];
553c553
<       unsigned char    mtfa   [MTFA_SIZE];
---
>        char    mtfa   MTFA_SIZE];
553c553
<       unsigned char    mtfa   [MTFA_SIZE];
---
>            mtfa   MTFA_SIZE];
553c553
<       unsigned char    mtfa   [MTFA_SIZE];
---
>        char       MTFA_SIZE];
553c553
<       unsigned char    mtfa   [MTFA_SIZE];
---
>               MTFA_SIZE];
553c553
<       unsigned char    mtfa   [MTFA_SIZE];
---
>       unsigned     mtfa   [MTFA_SIZE];
(86.5 %, 27713 bytes)
553c553
<        char    mtfa   [MTFA_SIZE];
---
>            mtfa   [MTFA_SIZE];
553c553
<        char    mtfa   [MTFA_SIZE];
---
>               [MTFA_SIZE];
553c553
<        char    mtfa   [MTFA_SIZE];
---
>            mtfa   MTFA_SIZE];
553c553
<        char    mtfa   [MTFA_SIZE];
---
>               MTFA_SIZE];
553c553
<        char    mtfa   [MTFA_SIZE];
---
>            mtfa   [];
553c553
<        char    mtfa   [MTFA_SIZE];
---
>               [];
553c553
<        char    mtfa   [MTFA_SIZE];
---
>            mtfa   ];
553c553
<        char    mtfa   [MTFA_SIZE];
---
>               ];
553c553
<        char    mtfa   [MTFA_SIZE];
---
>        char       [MTFA_SIZE];
553c553
<        char    mtfa   [MTFA_SIZE];
---
>        char       MTFA_SIZE];
553c553
<        char    mtfa   [MTFA_SIZE];
---
>        char       [];
553c553
<        char    mtfa   [MTFA_SIZE];
---
>        char       ];
553c553
<        char    mtfa   [MTFA_SIZE];
---
>        char       [MTFA_SIZE;
553c553
<        char    mtfa   [MTFA_SIZE];
---
>        char       MTFA_SIZE;
553c553
<        char    mtfa   [MTFA_SIZE];
---
>        char       [;
553c553
<        char    mtfa   [MTFA_SIZE];
---
>        char       ;
553c553
<        char    mtfa   [MTFA_SIZE];
---
>        char    mtfa   MTFA_SIZE];
553c553
<        char    mtfa   [MTFA_SIZE];
---
>        char    mtfa   ];
553c553
<        char    mtfa   [MTFA_SIZE];
---
>        char    mtfa   MTFA_SIZE;
553c553
<        char    mtfa   [MTFA_SIZE];
---
>        char    mtfa   ;
(86.5 %, 27698 bytes)
553,554c553,554
<        char       ;
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>        char       
>           6 / MTFL_SIZE];
554c554
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>           mtfbase[6 / MTFL_SIZE];
554c554
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>           [6 / MTFL_SIZE];
554c554
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>           mtfbase6 / MTFL_SIZE];
554c554
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>           6 / MTFL_SIZE];
554c554
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>           mtfbase[ / MTFL_SIZE];
554c554
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>           [ / MTFL_SIZE];
554c554
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>           mtfbase / MTFL_SIZE];
554c554
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>            / MTFL_SIZE];
554c554
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    [6 / MTFL_SIZE];
554c554
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    6 / MTFL_SIZE];
554c554
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    [ / MTFL_SIZE];
554c554
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32     / MTFL_SIZE];
554c554
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    [6  MTFL_SIZE];
554c554
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    6  MTFL_SIZE];
554c554
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    [  MTFL_SIZE];
554c554
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32      MTFL_SIZE];
554c554
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    mtfbase6 / MTFL_SIZE];
554c554
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    mtfbase / MTFL_SIZE];
554c554
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    mtfbase6  MTFL_SIZE];
554c554
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    mtfbase  MTFL_SIZE];
554c554
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    mtfbase6 / ];
554c554
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    mtfbase / ];
554c554
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    mtfbase6  ];
554c554
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    mtfbase  ];
554c554
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    mtfbase[ / MTFL_SIZE];
554c554
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    mtfbase[  MTFL_SIZE];
554c554
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    mtfbase[ / ];
554c554
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    mtfbase[  ];
554c554
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    mtfbase[ / MTFL_SIZE;
554c554
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    mtfbase[  MTFL_SIZE;
554c554
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    mtfbase[ / ;
554c554
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    mtfbase[  ;
554c554
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    mtfbase[6  MTFL_SIZE];
554c554
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       Int32    mtfbase[6  ];
(86.5 %, 27696 bytes)
554c554
<       Int32    mtfbase[  MTFL_SIZE];
---
>       Int32    mtfbase[  ;
554c554
<       Int32    mtfbase[  MTFL_SIZE];
---
>       Int32    mtfbase[  ]
554c554
<       Int32    mtfbase[  MTFL_SIZE];
---
>       Int32    mtfbase[  
554,555c554,555
<       Int32    mtfbase[  MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[  ];
>        char    selector   [BZ_MAX_SELECTORS];
554,555c554,555
<       Int32    mtfbase[  MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[  ;
>        char    selector   [BZ_MAX_SELECTORS];
554,555c554,555
<       Int32    mtfbase[  MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[  ]
>        char    selector   [BZ_MAX_SELECTORS];
554,555c554,555
<       Int32    mtfbase[  MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[  
>        char    selector   [BZ_MAX_SELECTORS];
554c554
<       Int32    mtfbase[  MTFL_SIZE];
---
>       Int32    mtfbase[  MTFL_SIZE;
554c554
<       Int32    mtfbase[  MTFL_SIZE];
---
>       Int32    mtfbase[  MTFL_SIZE
554,555c554,555
<       Int32    mtfbase[  MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[  MTFL_SIZE;
>        char    selector   [BZ_MAX_SELECTORS];
554,555c554,555
<       Int32    mtfbase[  MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[  MTFL_SIZE
>        char    selector   [BZ_MAX_SELECTORS];
554,555c554,555
<       Int32    mtfbase[  MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[  MTFL_SIZE;
>       unsigned     selector   [BZ_MAX_SELECTORS];
554,555c554,555
<       Int32    mtfbase[  MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[  MTFL_SIZE
>       unsigned     selector   [BZ_MAX_SELECTORS];
554,555c554,555
<       Int32    mtfbase[  MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[  MTFL_SIZE;
>            selector   [BZ_MAX_SELECTORS];
554,555c554,555
<       Int32    mtfbase[  MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[  MTFL_SIZE
>            selector   [BZ_MAX_SELECTORS];
554c554
<       Int32    mtfbase[  MTFL_SIZE];
---
>       Int32    mtfbase[  MTFL_SIZE]
554,555c554,555
<       Int32    mtfbase[  MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[  MTFL_SIZE]
>        char    selector   [BZ_MAX_SELECTORS];
554,555c554,555
<       Int32    mtfbase[  MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[  MTFL_SIZE]
>       unsigned     selector   [BZ_MAX_SELECTORS];
554,555c554,555
<       Int32    mtfbase[  MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[  MTFL_SIZE]
>            selector   [BZ_MAX_SELECTORS];
554,555c554,555
<       Int32    mtfbase[  MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[  MTFL_SIZE]
>       unsigned char       [BZ_MAX_SELECTORS];
554,555c554,555
<       Int32    mtfbase[  MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[  MTFL_SIZE]
>        char       [BZ_MAX_SELECTORS];
554,555c554,555
<       Int32    mtfbase[  MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[  MTFL_SIZE]
>       unsigned        [BZ_MAX_SELECTORS];
554,555c554,555
<       Int32    mtfbase[  MTFL_SIZE];
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[  MTFL_SIZE]
>               [BZ_MAX_SELECTORS];
555c555
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>        char    selector   [BZ_MAX_SELECTORS];
555c555
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>            selector   [BZ_MAX_SELECTORS];
555c555
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>        char       [BZ_MAX_SELECTORS];
555c555
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>               [BZ_MAX_SELECTORS];
555c555
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>        char    selector   BZ_MAX_SELECTORS];
555c555
<       unsigned char    selector   [BZ_MAX_SELECTORS];
---
>            selector   BZ_MAX_SELECTORS];
(86.5 %, 27675 bytes)
555c555
<               [BZ_MAX_SELECTORS];
---
>               
555c555
<               [BZ_MAX_SELECTORS];
---
>               [];
555c555
<               [BZ_MAX_SELECTORS];
---
>               [;
555c555
<               [BZ_MAX_SELECTORS];
---
>               []
555c555
<               [BZ_MAX_SELECTORS];
---
>               [
555,556c555,556
<               [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>               [];
>        char    selectorMtf[BZ_MAX_SELECTORS];
555,556c555,556
<               [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>               [;
>        char    selectorMtf[BZ_MAX_SELECTORS];
555,556c555,556
<               [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>               []
>        char    selectorMtf[BZ_MAX_SELECTORS];
555,556c555,556
<               [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>               [
>        char    selectorMtf[BZ_MAX_SELECTORS];
555c555
<               [BZ_MAX_SELECTORS];
---
>               [BZ_MAX_SELECTORS;
555c555
<               [BZ_MAX_SELECTORS];
---
>               [BZ_MAX_SELECTORS
555,556c555,556
<               [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>               [BZ_MAX_SELECTORS;
>        char    selectorMtf[BZ_MAX_SELECTORS];
555,556c555,556
<               [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>               [BZ_MAX_SELECTORS
>        char    selectorMtf[BZ_MAX_SELECTORS];
555,556c555,556
<               [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>               [BZ_MAX_SELECTORS;
>       unsigned     selectorMtf[BZ_MAX_SELECTORS];
555,556c555,556
<               [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>               [BZ_MAX_SELECTORS
>       unsigned     selectorMtf[BZ_MAX_SELECTORS];
555,556c555,556
<               [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>               [BZ_MAX_SELECTORS;
>            selectorMtf[BZ_MAX_SELECTORS];
555,556c555,556
<               [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>               [BZ_MAX_SELECTORS
>            selectorMtf[BZ_MAX_SELECTORS];
555c555
<               [BZ_MAX_SELECTORS];
---
>               [BZ_MAX_SELECTORS]
555,556c555,556
<               [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>               [BZ_MAX_SELECTORS]
>        char    selectorMtf[BZ_MAX_SELECTORS];
555,556c555,556
<               [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>               [BZ_MAX_SELECTORS]
>       unsigned     selectorMtf[BZ_MAX_SELECTORS];
555,556c555,556
<               [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>               [BZ_MAX_SELECTORS]
>            selectorMtf[BZ_MAX_SELECTORS];
555,556c555,556
<               [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>               [BZ_MAX_SELECTORS]
>       unsigned char    [BZ_MAX_SELECTORS];
555,556c555,556
<               [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>               [BZ_MAX_SELECTORS]
>        char    [BZ_MAX_SELECTORS];
555,556c555,556
<               [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>               [BZ_MAX_SELECTORS]
>       unsigned     [BZ_MAX_SELECTORS];
555,556c555,556
<               [BZ_MAX_SELECTORS];
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>               [BZ_MAX_SELECTORS]
>            [BZ_MAX_SELECTORS];
556c556
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>        char    selectorMtf[BZ_MAX_SELECTORS];
556c556
<       unsigned char    selectorMtf[BZ_MAX_SELECTORS];
---
>            selectorMtf[BZ_MAX_SELECTORS];
(86.5 %, 27651 bytes)
556c556
<            [BZ_MAX_SELECTORS];
---
>            
556c556
<            [BZ_MAX_SELECTORS];
---
>            [];
556c556
<            [BZ_MAX_SELECTORS];
---
>            [;
556c556
<            [BZ_MAX_SELECTORS];
---
>            []
556c556
<            [BZ_MAX_SELECTORS];
---
>            [
556,557c556,557
<            [BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            [];
>        char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
556,557c556,557
<            [BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            [;
>        char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
556,557c556,557
<            [BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            []
>        char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
556,557c556,557
<            [BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            [
>        char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
556c556
<            [BZ_MAX_SELECTORS];
---
>            [BZ_MAX_SELECTORS;
556c556
<            [BZ_MAX_SELECTORS];
---
>            [BZ_MAX_SELECTORS
556,557c556,557
<            [BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            [BZ_MAX_SELECTORS;
>        char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
556,557c556,557
<            [BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            [BZ_MAX_SELECTORS
>        char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
556,557c556,557
<            [BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            [BZ_MAX_SELECTORS;
>       unsigned     len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
556,557c556,557
<            [BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            [BZ_MAX_SELECTORS
>       unsigned     len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
556,557c556,557
<            [BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            [BZ_MAX_SELECTORS;
>            len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
556,557c556,557
<            [BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            [BZ_MAX_SELECTORS
>            len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
556c556
<            [BZ_MAX_SELECTORS];
---
>            [BZ_MAX_SELECTORS]
556,557c556,557
<            [BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            [BZ_MAX_SELECTORS]
>        char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
556,557c556,557
<            [BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            [BZ_MAX_SELECTORS]
>       unsigned     len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
556,557c556,557
<            [BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            [BZ_MAX_SELECTORS]
>            len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
556,557c556,557
<            [BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            [BZ_MAX_SELECTORS]
>       unsigned char      [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
556,557c556,557
<            [BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            [BZ_MAX_SELECTORS]
>        char      [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
556,557c556,557
<            [BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            [BZ_MAX_SELECTORS]
>       unsigned       [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
556,557c556,557
<            [BZ_MAX_SELECTORS];
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>            [BZ_MAX_SELECTORS]
>              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
557c557
<       unsigned char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>        char    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(86.5 %, 27635 bytes)
557c557
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              BZ_MAX_ALPHA_SIZE];
557c557
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [][BZ_MAX_ALPHA_SIZE];
557c557
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [[BZ_MAX_ALPHA_SIZE];
557c557
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              []BZ_MAX_ALPHA_SIZE];
557c557
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE];
557c557
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [][];
557c557
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [[];
557c557
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              []];
557c557
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [];
557c557
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [BZ_N_GROUPS[BZ_MAX_ALPHA_SIZE];
557c557
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [BZ_N_GROUPSBZ_MAX_ALPHA_SIZE];
557c557
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [BZ_N_GROUPS[];
557c557
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [BZ_N_GROUPS];
(86.5 %, 27622 bytes)
557c557
<              [BZ_MAX_ALPHA_SIZE];
---
>              [
557c557
<              [BZ_MAX_ALPHA_SIZE];
---
>              [];
559c559
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
557c557
<              [BZ_MAX_ALPHA_SIZE];
---
>              [;
559c559
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
557c557
<              [BZ_MAX_ALPHA_SIZE];
---
>              []
559c559
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
557c557
<              [BZ_MAX_ALPHA_SIZE];
---
>              [
559c559
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
557c557
<              [BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE;
557c557
<              [BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE
557c557
<              [BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE;
559c559
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
557c557
<              [BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE
559c559
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
557c557
<              [BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE;
559c559
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32      [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
557c557
<              [BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE
559c559
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32      [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
557c557
<              [BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE;
559c559
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
557c557
<              [BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE
559c559
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
557c557
<              [BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE]
557c557
<              [BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE]
559c559
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
557c557
<              [BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE]
559c559
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32      [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
557c557
<              [BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE]
559c559
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
557c557
<              [BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE]
559c559
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    limit  BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
557c557
<              [BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE]
559c559
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           limit  BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
557c557
<              [BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE]
559c559
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32      BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
557c557
<              [BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE]
559c559
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
559c559
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
559c559
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
559c559
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           limit  BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
559c559
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
559c559
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           limit  [][BZ_MAX_ALPHA_SIZE];
559c559
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             [][BZ_MAX_ALPHA_SIZE];
559c559
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           limit  ][BZ_MAX_ALPHA_SIZE];
559c559
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             ][BZ_MAX_ALPHA_SIZE];
(86.5 %, 27611 bytes)
559c559
<             [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             [BZ_MAX_ALPHA_SIZE];
559c559
<             [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             BZ_N_GROUPS]BZ_MAX_ALPHA_SIZE];
559c559
<             [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             ]BZ_MAX_ALPHA_SIZE];
559c559
<             [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             BZ_N_GROUPSBZ_MAX_ALPHA_SIZE];
559c559
<             [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             BZ_MAX_ALPHA_SIZE];
559c559
<             [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             [][BZ_MAX_ALPHA_SIZE];
559c559
<             [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             [[BZ_MAX_ALPHA_SIZE];
559c559
<             [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             []BZ_MAX_ALPHA_SIZE];
559c559
<             [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             [BZ_MAX_ALPHA_SIZE];
(86.5 %, 27598 bytes)
559c559
<             [BZ_MAX_ALPHA_SIZE];
---
>             ;
559c559
<             [BZ_MAX_ALPHA_SIZE];
---
>             BZ_MAX_ALPHA_SIZE]
559c559
<             [BZ_MAX_ALPHA_SIZE];
---
>             ]
559c559
<             [BZ_MAX_ALPHA_SIZE];
---
>             BZ_MAX_ALPHA_SIZE
559c559
<             [BZ_MAX_ALPHA_SIZE];
---
>             
559c559
<             [BZ_MAX_ALPHA_SIZE];
---
>             [];
559c559
<             [BZ_MAX_ALPHA_SIZE];
---
>             [;
559c559
<             [BZ_MAX_ALPHA_SIZE];
---
>             []
559c559
<             [BZ_MAX_ALPHA_SIZE];
---
>             [
559,560c559,560
<             [BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             [];
>           base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
559,560c559,560
<             [BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             [;
>           base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
559,560c559,560
<             [BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             []
>           base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
559,560c559,560
<             [BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             [
>           base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
559c559
<             [BZ_MAX_ALPHA_SIZE];
---
>             [BZ_MAX_ALPHA_SIZE;
559c559
<             [BZ_MAX_ALPHA_SIZE];
---
>             [BZ_MAX_ALPHA_SIZE
559,560c559,560
<             [BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             [BZ_MAX_ALPHA_SIZE;
>           base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(86.5 %, 27579 bytes)
559,560c559,560
<             ;
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             
>              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
559,560c559,560
<             ;
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             
>       Int32    base   BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
559,560c559,560
<             ;
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             
>           base   BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
559,560c559,560
<             ;
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             
>       Int32       BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
559,560c559,560
<             ;
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>             
>              BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
560c560
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
560c560
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
560c560
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           base   BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
560c560
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
560c560
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           base   [][BZ_MAX_ALPHA_SIZE];
560c560
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [][BZ_MAX_ALPHA_SIZE];
(86.5 %, 27569 bytes)
560c560
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE];
560c560
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              BZ_N_GROUPS]BZ_MAX_ALPHA_SIZE];
560c560
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              ]BZ_MAX_ALPHA_SIZE];
560c560
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              BZ_N_GROUPSBZ_MAX_ALPHA_SIZE];
560c560
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              BZ_MAX_ALPHA_SIZE];
560c560
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [][BZ_MAX_ALPHA_SIZE];
560c560
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [[BZ_MAX_ALPHA_SIZE];
560c560
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              []BZ_MAX_ALPHA_SIZE];
560c560
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE];
(86.6 %, 27556 bytes)
560c560
<              [BZ_MAX_ALPHA_SIZE];
---
>              ;
560c560
<              [BZ_MAX_ALPHA_SIZE];
---
>              BZ_MAX_ALPHA_SIZE]
560c560
<              [BZ_MAX_ALPHA_SIZE];
---
>              ]
560c560
<              [BZ_MAX_ALPHA_SIZE];
---
>              BZ_MAX_ALPHA_SIZE
560c560
<              [BZ_MAX_ALPHA_SIZE];
---
>              
560c560
<              [BZ_MAX_ALPHA_SIZE];
---
>              [];
560c560
<              [BZ_MAX_ALPHA_SIZE];
---
>              [;
560c560
<              [BZ_MAX_ALPHA_SIZE];
---
>              []
560c560
<              [BZ_MAX_ALPHA_SIZE];
---
>              [
560,561c560,561
<              [BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [];
>           perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
560,561c560,561
<              [BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [;
>           perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
560,561c560,561
<              [BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              []
>           perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
560,561c560,561
<              [BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [
>           perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
560c560
<              [BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE;
560c560
<              [BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE
560,561c560,561
<              [BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE;
>           perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
560,561c560,561
<              [BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE
>           perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
560,561c560,561
<              [BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE;
>       Int32       [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
560,561c560,561
<              [BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE
>       Int32       [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
560,561c560,561
<              [BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE;
>              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(86.6 %, 27537 bytes)
560,561c560,561
<              ;
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              
>              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
560,561c560,561
<              ;
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              
>       Int32    perm   BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
560,561c560,561
<              ;
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              
>           perm   BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
560,561c560,561
<              ;
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              
>       Int32       BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
560,561c560,561
<              ;
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              
>              BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
561c561
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
561c561
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
561c561
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           perm   BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
561c561
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
561c561
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           perm   [][BZ_MAX_ALPHA_SIZE];
561c561
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [][BZ_MAX_ALPHA_SIZE];
561c561
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>           perm   ][BZ_MAX_ALPHA_SIZE];
561c561
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              ][BZ_MAX_ALPHA_SIZE];
561c561
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32       [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
561c561
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32       BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(86.6 %, 27527 bytes)
561c561
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE];
561c561
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              BZ_N_GROUPS]BZ_MAX_ALPHA_SIZE];
561c561
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              ]BZ_MAX_ALPHA_SIZE];
561c561
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              BZ_N_GROUPSBZ_MAX_ALPHA_SIZE];
561c561
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              BZ_MAX_ALPHA_SIZE];
561c561
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [][BZ_MAX_ALPHA_SIZE];
561c561
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [[BZ_MAX_ALPHA_SIZE];
561c561
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              []BZ_MAX_ALPHA_SIZE];
561c561
<              [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE];
(86.6 %, 27514 bytes)
561c561
<              [BZ_MAX_ALPHA_SIZE];
---
>              ;
561c561
<              [BZ_MAX_ALPHA_SIZE];
---
>              BZ_MAX_ALPHA_SIZE]
561c561
<              [BZ_MAX_ALPHA_SIZE];
---
>              ]
561c561
<              [BZ_MAX_ALPHA_SIZE];
---
>              BZ_MAX_ALPHA_SIZE
561c561
<              [BZ_MAX_ALPHA_SIZE];
---
>              
561c561
<              [BZ_MAX_ALPHA_SIZE];
---
>              [];
561c561
<              [BZ_MAX_ALPHA_SIZE];
---
>              [;
561c561
<              [BZ_MAX_ALPHA_SIZE];
---
>              []
561c561
<              [BZ_MAX_ALPHA_SIZE];
---
>              [
561,562c561,562
<              [BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
---
>              [];
>           minLens[BZ_N_GROUPS];
561,562c561,562
<              [BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
---
>              [;
>           minLens[BZ_N_GROUPS];
561,562c561,562
<              [BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
---
>              []
>           minLens[BZ_N_GROUPS];
561,562c561,562
<              [BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
---
>              [
>           minLens[BZ_N_GROUPS];
561c561
<              [BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE;
561c561
<              [BZ_MAX_ALPHA_SIZE];
---
>              [BZ_MAX_ALPHA_SIZE
561,562c561,562
<              [BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
---
>              [BZ_MAX_ALPHA_SIZE;
>           minLens[BZ_N_GROUPS];
561,562c561,562
<              [BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
---
>              [BZ_MAX_ALPHA_SIZE
>           minLens[BZ_N_GROUPS];
561,562c561,562
<              [BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
---
>              [BZ_MAX_ALPHA_SIZE;
>       Int32    [BZ_N_GROUPS];
561,562c561,562
<              [BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
---
>              [BZ_MAX_ALPHA_SIZE
>       Int32    [BZ_N_GROUPS];
561,562c561,562
<              [BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
---
>              [BZ_MAX_ALPHA_SIZE;
>           [BZ_N_GROUPS];
(86.6 %, 27495 bytes)
561,562c561,562
<              ;
<       Int32    minLens[BZ_N_GROUPS];
---
>              
>           [BZ_N_GROUPS];
561,562c561,562
<              ;
<       Int32    minLens[BZ_N_GROUPS];
---
>              
>       Int32    minLensBZ_N_GROUPS];
561,562c561,562
<              ;
<       Int32    minLens[BZ_N_GROUPS];
---
>              
>           minLensBZ_N_GROUPS];
561,562c561,562
<              ;
<       Int32    minLens[BZ_N_GROUPS];
---
>              
>       Int32    BZ_N_GROUPS];
561,562c561,562
<              ;
<       Int32    minLens[BZ_N_GROUPS];
---
>              
>           BZ_N_GROUPS];
562c562
<       Int32    minLens[BZ_N_GROUPS];
---
>           minLens[BZ_N_GROUPS];
562c562
<       Int32    minLens[BZ_N_GROUPS];
---
>           [BZ_N_GROUPS];
562c562
<       Int32    minLens[BZ_N_GROUPS];
---
>           minLensBZ_N_GROUPS];
562c562
<       Int32    minLens[BZ_N_GROUPS];
---
>           BZ_N_GROUPS];
562c562
<       Int32    minLens[BZ_N_GROUPS];
---
>           minLens[];
562c562
<       Int32    minLens[BZ_N_GROUPS];
---
>           [];
562c562
<       Int32    minLens[BZ_N_GROUPS];
---
>           minLens];
562c562
<       Int32    minLens[BZ_N_GROUPS];
---
>           ];
562c562
<       Int32    minLens[BZ_N_GROUPS];
---
>       Int32    [BZ_N_GROUPS];
562c562
<       Int32    minLens[BZ_N_GROUPS];
---
>       Int32    BZ_N_GROUPS];
562c562
<       Int32    minLens[BZ_N_GROUPS];
---
>       Int32    [];
562c562
<       Int32    minLens[BZ_N_GROUPS];
---
>       Int32    ];
562c562
<       Int32    minLens[BZ_N_GROUPS];
---
>       Int32    [BZ_N_GROUPS;
562c562
<       Int32    minLens[BZ_N_GROUPS];
---
>       Int32    BZ_N_GROUPS;
(86.6 %, 27482 bytes)
562c562
<           [BZ_N_GROUPS];
---
>           ;
562c562
<           [BZ_N_GROUPS];
---
>           BZ_N_GROUPS]
562c562
<           [BZ_N_GROUPS];
---
>           ]
562c562
<           [BZ_N_GROUPS];
---
>           BZ_N_GROUPS
562c562
<           [BZ_N_GROUPS];
---
>           
562c562
<           [BZ_N_GROUPS];
---
>           [];
562c562
<           [BZ_N_GROUPS];
---
>           [;
562c562
<           [BZ_N_GROUPS];
---
>           []
562c562
<           [BZ_N_GROUPS];
---
>           [
562c562
<           [BZ_N_GROUPS];
---
>           [];
565c565
<       Int32    save_i;
---
>           save_i;
562c562
<           [BZ_N_GROUPS];
---
>           [;
565c565
<       Int32    save_i;
---
>           save_i;
562c562
<           [BZ_N_GROUPS];
---
>           []
565c565
<       Int32    save_i;
---
>           save_i;
562c562
<           [BZ_N_GROUPS];
---
>           [
565c565
<       Int32    save_i;
---
>           save_i;
562c562
<           [BZ_N_GROUPS];
---
>           [BZ_N_GROUPS;
562c562
<           [BZ_N_GROUPS];
---
>           [BZ_N_GROUPS
562c562
<           [BZ_N_GROUPS];
---
>           [BZ_N_GROUPS;
565c565
<       Int32    save_i;
---
>           save_i;
562c562
<           [BZ_N_GROUPS];
---
>           [BZ_N_GROUPS
565c565
<       Int32    save_i;
---
>           save_i;
562c562
<           [BZ_N_GROUPS];
---
>           [BZ_N_GROUPS;
565c565
<       Int32    save_i;
---
>       Int32    ;
(86.6 %, 27469 bytes)
562c562
<           ;
---
>           
565c565
<       Int32    save_i;
---
>           ;
562c562
<           ;
---
>           
565c565
<       Int32    save_i;
---
>       Int32    save_i
562c562
<           ;
---
>           
565c565
<       Int32    save_i;
---
>           save_i
562c562
<           ;
---
>           
565c565
<       Int32    save_i;
---
>       Int32    
562c562
<           ;
---
>           
565c565
<       Int32    save_i;
---
>           
565c565
<       Int32    save_i;
---
>           save_i;
565c565
<       Int32    save_i;
---
>           ;
(86.6 %, 27457 bytes)
564a565
>           
566d566
<       Int32    save_j;
565,566c565,566
<           ;
<       Int32    save_j;
---
>           
>       Int32    save_j
565,566c565,566
<           ;
<       Int32    save_j;
---
>           
>           save_j
565,566c565,566
<           ;
<       Int32    save_j;
---
>           
>       Int32    
565,566c565,566
<           ;
<       Int32    save_j;
---
>           
>           
566c566
<       Int32    save_j;
---
>           save_j;
566c566
<       Int32    save_j;
---
>           ;
(86.6 %, 27445 bytes)
565a566
>           
567d567
<       Int32    save_t;
566,567c566,567
<           ;
<       Int32    save_t;
---
>           
>       Int32    save_t
566,567c566,567
<           ;
<       Int32    save_t;
---
>           
>           save_t
566,567c566,567
<           ;
<       Int32    save_t;
---
>           
>       Int32    
566,567c566,567
<           ;
<       Int32    save_t;
---
>           
>           
567c567
<       Int32    save_t;
---
>           save_t;
567c567
<       Int32    save_t;
---
>           ;
(86.6 %, 27433 bytes)
566a567
>           
568d568
<       Int32    save_alphaSize;
567,568c567,568
<           ;
<       Int32    save_alphaSize;
---
>           
>       Int32    save_alphaSize
567,568c567,568
<           ;
<       Int32    save_alphaSize;
---
>           
>           save_alphaSize
567,568c567,568
<           ;
<       Int32    save_alphaSize;
---
>           
>       Int32    
567,568c567,568
<           ;
<       Int32    save_alphaSize;
---
>           
>           
568c568
<       Int32    save_alphaSize;
---
>           save_alphaSize;
568c568
<       Int32    save_alphaSize;
---
>           ;
(86.6 %, 27413 bytes)
567a568
>           
569d569
<       Int32    save_nGroups;
568,569c568,569
<           ;
<       Int32    save_nGroups;
---
>           
>       Int32    save_nGroups
568,569c568,569
<           ;
<       Int32    save_nGroups;
---
>           
>           save_nGroups
568,569c568,569
<           ;
<       Int32    save_nGroups;
---
>           
>       Int32    
568,569c568,569
<           ;
<       Int32    save_nGroups;
---
>           
>           
569c569
<       Int32    save_nGroups;
---
>           save_nGroups;
569c569
<       Int32    save_nGroups;
---
>           ;
(86.6 %, 27395 bytes)
568a569
>           
570d570
<       Int32    save_nSelectors;
569,570c569,570
<           ;
<       Int32    save_nSelectors;
---
>           
>       Int32    save_nSelectors
569,570c569,570
<           ;
<       Int32    save_nSelectors;
---
>           
>           save_nSelectors
569,570c569,570
<           ;
<       Int32    save_nSelectors;
---
>           
>       Int32    
569,570c569,570
<           ;
<       Int32    save_nSelectors;
---
>           
>           
570c570
<       Int32    save_nSelectors;
---
>           save_nSelectors;
570c570
<       Int32    save_nSelectors;
---
>           ;
(86.6 %, 27374 bytes)
569a570
>           
571d571
<       Int32    save_EOB;
570,571c570,571
<           ;
<       Int32    save_EOB;
---
>           
>       Int32    save_EOB
570,571c570,571
<           ;
<       Int32    save_EOB;
---
>           
>           save_EOB
570,571c570,571
<           ;
<       Int32    save_EOB;
---
>           
>       Int32    
570,571c570,571
<           ;
<       Int32    save_EOB;
---
>           
>           
571c571
<       Int32    save_EOB;
---
>           save_EOB;
571c571
<       Int32    save_EOB;
---
>           ;
(86.6 %, 27360 bytes)
570a571
>           
572d572
<       Int32    save_groupNo;
571,572c571,572
<           ;
<       Int32    save_groupNo;
---
>           
>       Int32    save_groupNo
571,572c571,572
<           ;
<       Int32    save_groupNo;
---
>           
>           save_groupNo
571,572c571,572
<           ;
<       Int32    save_groupNo;
---
>           
>       Int32    
571,572c571,572
<           ;
<       Int32    save_groupNo;
---
>           
>           
572c572
<       Int32    save_groupNo;
---
>           save_groupNo;
572c572
<       Int32    save_groupNo;
---
>           ;
(86.7 %, 27342 bytes)
571a572
>           
573d573
<       Int32    save_groupPos;
572,573c572,573
<           ;
<       Int32    save_groupPos;
---
>           
>       Int32    save_groupPos
572,573c572,573
<           ;
<       Int32    save_groupPos;
---
>           
>           save_groupPos
572,573c572,573
<           ;
<       Int32    save_groupPos;
---
>           
>       Int32    
572,573c572,573
<           ;
<       Int32    save_groupPos;
---
>           
>           
573c573
<       Int32    save_groupPos;
---
>           save_groupPos;
573c573
<       Int32    save_groupPos;
---
>           ;
(86.7 %, 27323 bytes)
572a573
>           
574d574
<       Int32    save_nextSym;
573,574c573,574
<           ;
<       Int32    save_nextSym;
---
>           
>       Int32    save_nextSym
573,574c573,574
<           ;
<       Int32    save_nextSym;
---
>           
>           save_nextSym
573,574c573,574
<           ;
<       Int32    save_nextSym;
---
>           
>       Int32    
573,574c573,574
<           ;
<       Int32    save_nextSym;
---
>           
>           
574c574
<       Int32    save_nextSym;
---
>           save_nextSym;
574c574
<       Int32    save_nextSym;
---
>           ;
(86.7 %, 27305 bytes)
573a574
>           
575d575
<       Int32    save_nblockMAX;
574,575c574,575
<           ;
<       Int32    save_nblockMAX;
---
>           
>       Int32    save_nblockMAX
574,575c574,575
<           ;
<       Int32    save_nblockMAX;
---
>           
>           save_nblockMAX
574,575c574,575
<           ;
<       Int32    save_nblockMAX;
---
>           
>       Int32    
574,575c574,575
<           ;
<       Int32    save_nblockMAX;
---
>           
>           
575c575
<       Int32    save_nblockMAX;
---
>           save_nblockMAX;
575c575
<       Int32    save_nblockMAX;
---
>           ;
(86.7 %, 27285 bytes)
574a575
>           
576d576
<       Int32    save_nblock;
575,576c575,576
<           ;
<       Int32    save_nblock;
---
>           
>       Int32    save_nblock
575,576c575,576
<           ;
<       Int32    save_nblock;
---
>           
>           save_nblock
575,576c575,576
<           ;
<       Int32    save_nblock;
---
>           
>       Int32    
575,576c575,576
<           ;
<       Int32    save_nblock;
---
>           
>           
576c576
<       Int32    save_nblock;
---
>           save_nblock;
576c576
<       Int32    save_nblock;
---
>           ;
(86.7 %, 27268 bytes)
575a576
>           
577d577
<       Int32    save_es;
576,577c576,577
<           ;
<       Int32    save_es;
---
>           
>       Int32    save_es
576,577c576,577
<           ;
<       Int32    save_es;
---
>           
>           save_es
576,577c576,577
<           ;
<       Int32    save_es;
---
>           
>       Int32    
576,577c576,577
<           ;
<       Int32    save_es;
---
>           
>           
577c577
<       Int32    save_es;
---
>           save_es;
577c577
<       Int32    save_es;
---
>           ;
(86.7 %, 27255 bytes)
576a577
>           
578d578
<       Int32    save_N;
577,578c577,578
<           ;
<       Int32    save_N;
---
>           
>       Int32    save_N
577,578c577,578
<           ;
<       Int32    save_N;
---
>           
>           save_N
577,578c577,578
<           ;
<       Int32    save_N;
---
>           
>       Int32    
577,578c577,578
<           ;
<       Int32    save_N;
---
>           
>           
578c578
<       Int32    save_N;
---
>           save_N;
578c578
<       Int32    save_N;
---
>           ;
(86.7 %, 27243 bytes)
577a578
>           
579d579
<       Int32    save_curr;
578,579c578,579
<           ;
<       Int32    save_curr;
---
>           
>       Int32    save_curr
578,579c578,579
<           ;
<       Int32    save_curr;
---
>           
>           save_curr
578,579c578,579
<           ;
<       Int32    save_curr;
---
>           
>       Int32    
578,579c578,579
<           ;
<       Int32    save_curr;
---
>           
>           
579c579
<       Int32    save_curr;
---
>           save_curr;
579c579
<       Int32    save_curr;
---
>           ;
(86.7 %, 27228 bytes)
578a579
>           
580d580
<       Int32    save_zt;
579,580c579,580
<           ;
<       Int32    save_zt;
---
>           
>       Int32    save_zt
579,580c579,580
<           ;
<       Int32    save_zt;
---
>           
>           save_zt
579,580c579,580
<           ;
<       Int32    save_zt;
---
>           
>       Int32    
579,580c579,580
<           ;
<       Int32    save_zt;
---
>           
>           
580c580
<       Int32    save_zt;
---
>           save_zt;
580c580
<       Int32    save_zt;
---
>           ;
(86.7 %, 27215 bytes)
580,581c580,581
<           ;
<       Int32    save_zn; 
---
>           
>           ; 
580,581c580,581
<           ;
<       Int32    save_zn; 
---
>           
>       Int32    save_zn 
580,581c580,581
<           ;
<       Int32    save_zn; 
---
>           
>           save_zn 
580,581c580,581
<           ;
<       Int32    save_zn; 
---
>           
>       Int32     
580,581c580,581
<           ;
<       Int32    save_zn; 
---
>           
>            
581c581
<       Int32    save_zn; 
---
>           save_zn; 
581c581
<       Int32    save_zn; 
---
>           ; 
(86.7 %, 27202 bytes)
581,582c581,582
<           ; 
<       Int32    save_zvec;
---
>            
>           ;
581,582c581,582
<           ; 
<       Int32    save_zvec;
---
>            
>       Int32    save_zvec
581,582c581,582
<           ; 
<       Int32    save_zvec;
---
>            
>           save_zvec
581,582c581,582
<           ; 
<       Int32    save_zvec;
---
>            
>       Int32    
581,582c581,582
<           ; 
<       Int32    save_zvec;
---
>            
>           
582c582
<       Int32    save_zvec;
---
>           save_zvec;
582c582
<       Int32    save_zvec;
---
>           ;
(86.7 %, 27187 bytes)
581a582
>           
583d583
<       Int32    save_zj;
582,583c582,583
<           ;
<       Int32    save_zj;
---
>           
>       Int32    save_zj
582,583c582,583
<           ;
<       Int32    save_zj;
---
>           
>           save_zj
582,583c582,583
<           ;
<       Int32    save_zj;
---
>           
>       Int32    
582,583c582,583
<           ;
<       Int32    save_zj;
---
>           
>           
583c583
<       Int32    save_zj;
---
>           save_zj;
583c583
<       Int32    save_zj;
---
>           ;
(86.7 %, 27174 bytes)
582a583
>           
584d584
<       Int32    save_gSel;
583,584c583,584
<           ;
<       Int32    save_gSel;
---
>           
>       Int32    save_gSel
583,584c583,584
<           ;
<       Int32    save_gSel;
---
>           
>           save_gSel
583,584c583,584
<           ;
<       Int32    save_gSel;
---
>           
>       Int32    
583,584c583,584
<           ;
<       Int32    save_gSel;
---
>           
>           
584c584
<       Int32    save_gSel;
---
>           save_gSel;
584c584
<       Int32    save_gSel;
---
>           ;
(86.7 %, 27159 bytes)
583a584
>           
585d585
<       Int32    save_gMinlen;
584,585c584,585
<           ;
<       Int32    save_gMinlen;
---
>           
>       Int32    save_gMinlen
584,585c584,585
<           ;
<       Int32    save_gMinlen;
---
>           
>           save_gMinlen
584,585c584,585
<           ;
<       Int32    save_gMinlen;
---
>           
>       Int32    
584,585c584,585
<           ;
<       Int32    save_gMinlen;
---
>           
>           
585c585
<       Int32    save_gMinlen;
---
>           save_gMinlen;
585c585
<       Int32    save_gMinlen;
---
>           ;
(86.8 %, 27141 bytes)
585,586c585,586
<           ;
<       Int32   save_gLimit;
---
>           
>          ;
585,586c585,586
<           ;
<       Int32   save_gLimit;
---
>           
>       Int32   save_gLimit
585,586c585,586
<           ;
<       Int32   save_gLimit;
---
>           
>          save_gLimit
585,586c585,586
<           ;
<       Int32   save_gLimit;
---
>           
>       Int32   
585,586c585,586
<           ;
<       Int32   save_gLimit;
---
>           
>          
586c586
<       Int32   save_gLimit;
---
>          save_gLimit;
586c586
<       Int32   save_gLimit;
---
>          ;
(86.8 %, 27124 bytes)
585a586
>          
587d587
<       Int32   save_gBase;
586,587c586,587
<          ;
<       Int32   save_gBase;
---
>          
>       Int32   save_gBase
586,587c586,587
<          ;
<       Int32   save_gBase;
---
>          
>          save_gBase
586,587c586,587
<          ;
<       Int32   save_gBase;
---
>          
>       Int32   
586,587c586,587
<          ;
<       Int32   save_gBase;
---
>          
>          
587c587
<       Int32   save_gBase;
---
>          save_gBase;
587c587
<       Int32   save_gBase;
---
>          ;
(86.8 %, 27108 bytes)
586a587
>          
588d588
<       Int32   save_gPerm;
587,588c587,588
<          ;
<       Int32   save_gPerm;
---
>          
>       Int32   save_gPerm
587,588c587,588
<          ;
<       Int32   save_gPerm;
---
>          
>          save_gPerm
587,588c587,588
<          ;
<       Int32   save_gPerm;
---
>          
>       Int32   
587,588c587,588
<          ;
<       Int32   save_gPerm;
---
>          
>          
(86.8 %, 27092 bytes)
588c588
<          ;
---
>          
590,591c590,591
<    }
<    DState;
---
>    
>    ;
588c588
<          ;
---
>          
591c591
<    DState;
---
>    DState
588c588
<          ;
---
>          
590,591c590,591
<    }
<    DState;
---
>    
>    DState
588c588
<          ;
---
>          
591c591
<    DState;
---
>    
588c588
<          ;
---
>          
590,591c590,591
<    }
<    DState;
---
>    
>    
590c590
<    }
---
>    
590,591c590,591
<    }
<    DState;
---
>    
>    ;
590,591c590,591
<    }
<    DState;
---
>    
>    DState
590,591c590,591
<    }
<    DState;
---
>    
>    
590c590
<    }
---
>    
597c597
< #define BZ_GET_FAST(c)                     \
---
> define BZ_GET_FAST(c)                     \
590,591c590,591
<    }
<    DState;
---
>    
>    ;
597c597
< #define BZ_GET_FAST(c)                     \
---
> define BZ_GET_FAST(c)                     \
590,591c590,591
<    }
<    DState;
---
>    
>    DState
597c597
< #define BZ_GET_FAST(c)                     \
---
> define BZ_GET_FAST(c)                     \
590,591c590,591
<    }
<    DState;
---
>    
>    
597c597
< #define BZ_GET_FAST(c)                     \
---
> define BZ_GET_FAST(c)                     \
591c591
<    DState;
---
>    ;
591c591
<    DState;
---
>    
591c591
<    DState;
---
>    ;
597c597
< #define BZ_GET_FAST(c)                     \
---
> define BZ_GET_FAST(c)                     \
591c591
<    DState;
---
>    
597c597
< #define BZ_GET_FAST(c)                     \
---
> define BZ_GET_FAST(c)                     \
591c591
<    DState;
---
>    ;
597c597
< #define BZ_GET_FAST(c)                     \
---
> # BZ_GET_FAST(c)                     \
591c591
<    DState;
---
>    
597c597
< #define BZ_GET_FAST(c)                     \
---
> # BZ_GET_FAST(c)                     \
591c591
<    DState;
---
>    ;
597c597
< #define BZ_GET_FAST(c)                     \
---
>  BZ_GET_FAST(c)                     \
591c591
<    DState;
---
>    
597c597
< #define BZ_GET_FAST(c)                     \
---
>  BZ_GET_FAST(c)                     \
591c591
<    DState;
---
>    DState
591c591
<    DState;
---
>    DState
597c597
< #define BZ_GET_FAST(c)                     \
---
> define BZ_GET_FAST(c)                     \
591c591
<    DState;
---
>    DState
597c597
< #define BZ_GET_FAST(c)                     \
---
> # BZ_GET_FAST(c)                     \
591c591
<    DState;
---
>    DState
597c597
< #define BZ_GET_FAST(c)                     \
---
>  BZ_GET_FAST(c)                     \
591c591
<    DState;
---
>    DState
597c597
< #define BZ_GET_FAST(c)                     \
---
> #define (c)                     \
591c591
<    DState;
---
>    DState
597c597
< #define BZ_GET_FAST(c)                     \
---
> define (c)                     \
591c591
<    DState;
---
>    DState
597c597
< #define BZ_GET_FAST(c)                     \
---
> # (c)                     \
591c591
<    DState;
---
>    DState
597c597
< #define BZ_GET_FAST(c)                     \
---
>  (c)                     \
597c597
< #define BZ_GET_FAST(c)                     \
---
> define BZ_GET_FAST(c)                     \
597c597
< #define BZ_GET_FAST(c)                     \
---
>  BZ_GET_FAST(c)                     \
597c597
< #define BZ_GET_FAST(c)                     \
---
> define (c)                     \
597c597
< #define BZ_GET_FAST(c)                     \
---
>  (c)                     \
597c597
< #define BZ_GET_FAST(c)                     \
---
> define BZ_GET_FASTc)                     \
597c597
< #define BZ_GET_FAST(c)                     \
---
>  BZ_GET_FASTc)                     \
597c597
< #define BZ_GET_FAST(c)                     \
---
> define c)                     \
597c597
< #define BZ_GET_FAST(c)                     \
---
>  c)                     \
597c597
< #define BZ_GET_FAST(c)                     \
---
> # BZ_GET_FAST(c)                     \
597c597
< #define BZ_GET_FAST(c)                     \
---
> # (c)                     \
597c597
< #define BZ_GET_FAST(c)                     \
---
> # BZ_GET_FASTc)                     \
597c597
< #define BZ_GET_FAST(c)                     \
---
> # c)                     \
597c597
< #define BZ_GET_FAST(c)                     \
---
> # BZ_GET_FAST()                     \
597c597
< #define BZ_GET_FAST(c)                     \
---
> # ()                     \
597c597
< #define BZ_GET_FAST(c)                     \
---
> # BZ_GET_FAST)                     \
597c597
< #define BZ_GET_FAST(c)                     \
---
> # )                     \
597c597
< #define BZ_GET_FAST(c)                     \
---
> #define (c)                     \
597c597
< #define BZ_GET_FAST(c)                     \
---
> #define c)                     \
597c597
< #define BZ_GET_FAST(c)                     \
---
> #define ()                     \
597c597
< #define BZ_GET_FAST(c)                     \
---
> #define )                     \
597c597
< #define BZ_GET_FAST(c)                     \
---
> #define (c                     \
597c597
< #define BZ_GET_FAST(c)                     \
---
> #define c                     \
(86.8 %, 27080 bytes)
597c597
< #define c)                     \
---
> #define                      \
597c597
< #define c)                     \
---
> #define )                     
597c597
< #define c)                     \
---
> #define                      
597,598c597,598
< #define c)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #define )                     \
>     ->tPos = s->tt[s->tPos];                 \
597,598c597,598
< #define c)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #define                      \
>     ->tPos = s->tt[s->tPos];                 \
597,598c597,598
< #define c)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #define )                     
>     ->tPos = s->tt[s->tPos];                 \
597,598c597,598
< #define c)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #define                      
>     ->tPos = s->tt[s->tPos];                 \
597c597
< #define c)                     \
---
> #define c                     \
597c597
< #define c)                     \
---
> #define c                     
597,598c597,598
< #define c)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #define c                     \
>     ->tPos = s->tt[s->tPos];                 \
(86.8 %, 27079 bytes)
597c597
< #define c                     \
---
> #define c                     
597,598c597,598
< #define c                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #define c                     
>     ->tPos = s->tt[s->tPos];                 \
597,598c597,598
< #define c                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #define c                     
>     stPos = s->tt[s->tPos];                 \
597,598c597,598
< #define c                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #define c                     
>     tPos = s->tt[s->tPos];                 \
597,598c597,598
< #define c                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #define c                     
>     s-> = s->tt[s->tPos];                 \
597,598c597,598
< #define c                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #define c                     
>     -> = s->tt[s->tPos];                 \
597,598c597,598
< #define c                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #define c                     
>     s = s->tt[s->tPos];                 \
597,598c597,598
< #define c                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #define c                     
>      = s->tt[s->tPos];                 \
598c598
<     s->tPos = s->tt[s->tPos];                 \
---
>     ->tPos = s->tt[s->tPos];                 \
598c598
<     s->tPos = s->tt[s->tPos];                 \
---
>     tPos = s->tt[s->tPos];                 \
(86.8 %, 27078 bytes)
598c598
<     ->tPos = s->tt[s->tPos];                 \
---
>     tPos = s->tt[s->tPos];                 \
598c598
<     ->tPos = s->tt[s->tPos];                 \
---
>      = s->tt[s->tPos];                 \
598c598
<     ->tPos = s->tt[s->tPos];                 \
---
>     tPos  s->tt[s->tPos];                 \
(86.8 %, 27076 bytes)
598c598
<     tPos = s->tt[s->tPos];                 \
---
>      = s->tt[s->tPos];                 \
598c598
<     tPos = s->tt[s->tPos];                 \
---
>       s->tt[s->tPos];                 \
598c598
<     tPos = s->tt[s->tPos];                 \
---
>      = ->tt[s->tPos];                 \
(86.8 %, 27072 bytes)
598c598
<      = s->tt[s->tPos];                 \
---
>       s->tt[s->tPos];                 \
598c598
<      = s->tt[s->tPos];                 \
---
>       ->tt[s->tPos];                 \
598c598
<      = s->tt[s->tPos];                 \
---
>       stt[s->tPos];                 \
(86.8 %, 27071 bytes)
598c598
<       s->tt[s->tPos];                 \
---
>       ->tt[s->tPos];                 \
598c598
<       s->tt[s->tPos];                 \
---
>       tt[s->tPos];                 \
(86.8 %, 27070 bytes)
598c598
<       ->tt[s->tPos];                 \
---
>       tt[s->tPos];                 \
598c598
<       ->tt[s->tPos];                 \
---
>       [s->tPos];                 \
(86.8 %, 27068 bytes)
598c598
<       tt[s->tPos];                 \
---
>       [s->tPos];                 \
598c598
<       tt[s->tPos];                 \
---
>       s->tPos];                 \
(86.8 %, 27066 bytes)
598c598
<       [s->tPos];                 \
---
>       s->tPos];                 \
598c598
<       [s->tPos];                 \
---
>       ->tPos];                 \
(86.8 %, 27065 bytes)
598c598
<       s->tPos];                 \
---
>       ->tPos];                 \
598c598
<       s->tPos];                 \
---
>       tPos];                 \
(86.8 %, 27064 bytes)
598c598
<       ->tPos];                 \
---
>       tPos];                 \
598c598
<       ->tPos];                 \
---
>       ];                 \
(86.8 %, 27062 bytes)
598c598
<       tPos];                 \
---
>       ];                 \
598c598
<       tPos];                 \
---
>       ;                 \
(86.8 %, 27058 bytes)
598c598
<       ];                 \
---
>       ;                 \
598c598
<       ];                 \
---
>                        \
(86.8 %, 27057 bytes)
598c598
<       ;                 \
---
>                        \
598c598
<       ;                 \
---
>                        
598,599c598,599
<       ;                 \
<     c = (UChar)(s->tPos & 0xf);           \
---
>                        \
>      = (UChar)(s->tPos & 0xf);           \
(86.8 %, 27056 bytes)
598c598
<                        \
---
>                        
598,599c598,599
<                        \
<     c = (UChar)(s->tPos & 0xf);           \
---
>                        
>      = (UChar)(s->tPos & 0xf);           \
598,599c598,599
<                        \
<     c = (UChar)(s->tPos & 0xf);           \
---
>                        
>     c  (UChar)(s->tPos & 0xf);           \
598,599c598,599
<                        \
<     c = (UChar)(s->tPos & 0xf);           \
---
>                        
>       (UChar)(s->tPos & 0xf);           \
598,599c598,599
<                        \
<     c = (UChar)(s->tPos & 0xf);           \
---
>                        
>     c = UChar)(s->tPos & 0xf);           \
598,599c598,599
<                        \
<     c = (UChar)(s->tPos & 0xf);           \
---
>                        
>      = UChar)(s->tPos & 0xf);           \
598,599c598,599
<                        \
<     c = (UChar)(s->tPos & 0xf);           \
---
>                        
>     c  UChar)(s->tPos & 0xf);           \
598,599c598,599
<                        \
<     c = (UChar)(s->tPos & 0xf);           \
---
>                        
>       UChar)(s->tPos & 0xf);           \
599c599
<     c = (UChar)(s->tPos & 0xf);           \
---
>      = (UChar)(s->tPos & 0xf);           \
599c599
<     c = (UChar)(s->tPos & 0xf);           \
---
>       (UChar)(s->tPos & 0xf);           \
599c599
<     c = (UChar)(s->tPos & 0xf);           \
---
>      = UChar)(s->tPos & 0xf);           \
(86.8 %, 27055 bytes)
599c599
<      = (UChar)(s->tPos & 0xf);           \
---
>       (UChar)(s->tPos & 0xf);           \
599c599
<      = (UChar)(s->tPos & 0xf);           \
---
>       UChar)(s->tPos & 0xf);           \
(86.8 %, 27054 bytes)
599c599
<       (UChar)(s->tPos & 0xf);           \
---
>       UChar)(s->tPos & 0xf);           \
599c599
<       (UChar)(s->tPos & 0xf);           \
---
>       )(s->tPos & 0xf);           \
599c599
<       (UChar)(s->tPos & 0xf);           \
---
>       UChar(s->tPos & 0xf);           \
(86.8 %, 27053 bytes)
599c599
<       UChar)(s->tPos & 0xf);           \
---
>       )(s->tPos & 0xf);           \
599c599
<       UChar)(s->tPos & 0xf);           \
---
>       (s->tPos & 0xf);           \
599c599
<       UChar)(s->tPos & 0xf);           \
---
>       )s->tPos & 0xf);           \
(86.8 %, 27048 bytes)
599c599
<       )(s->tPos & 0xf);           \
---
>       (s->tPos & 0xf);           \
599c599
<       )(s->tPos & 0xf);           \
---
>       s->tPos & 0xf);           \
(86.8 %, 27047 bytes)
599c599
<       (s->tPos & 0xf);           \
---
>       s->tPos & 0xf);           \
599c599
<       (s->tPos & 0xf);           \
---
>       ->tPos & 0xf);           \
(86.8 %, 27046 bytes)
599c599
<       s->tPos & 0xf);           \
---
>       ->tPos & 0xf);           \
599c599
<       s->tPos & 0xf);           \
---
>       tPos & 0xf);           \
(86.8 %, 27045 bytes)
599c599
<       ->tPos & 0xf);           \
---
>       tPos & 0xf);           \
599c599
<       ->tPos & 0xf);           \
---
>        & 0xf);           \
599c599
<       ->tPos & 0xf);           \
---
>       tPos  0xf);           \
(86.8 %, 27043 bytes)
599c599
<       tPos & 0xf);           \
---
>        & 0xf);           \
599c599
<       tPos & 0xf);           \
---
>         0xf);           \
(86.8 %, 27039 bytes)
599c599
<        & 0xf);           \
---
>         0xf);           \
599c599
<        & 0xf);           \
---
>         );           \
(86.8 %, 27038 bytes)
599c599
<         0xf);           \
---
>         );           \
599c599
<         0xf);           \
---
>         ;           \
599c599
<         0xf);           \
---
>         )           \
(86.8 %, 27035 bytes)
599c599
<         );           \
---
>         ;           \
599c599
<         );           \
---
>                    \
(86.8 %, 27034 bytes)
599c599
<         ;           \
---
>                    \
599c599
<         ;           \
---
>                    
599,600c599,600
<         ;           \
<     s->tPos >>= 8;
---
>                    \
>     ->tPos >>= 8;
(86.8 %, 27033 bytes)
599c599
<                    \
---
>                    
599,600c599,600
<                    \
<     s->tPos >>= 8;
---
>                    
>     ->tPos >>= 8;
599,600c599,600
<                    \
<     s->tPos >>= 8;
---
>                    
>     stPos >>= 8;
599,600c599,600
<                    \
<     s->tPos >>= 8;
---
>                    
>     tPos >>= 8;
599,600c599,600
<                    \
<     s->tPos >>= 8;
---
>                    
>     s-> >>= 8;
599,600c599,600
<                    \
<     s->tPos >>= 8;
---
>                    
>     -> >>= 8;
599,600c599,600
<                    \
<     s->tPos >>= 8;
---
>                    
>     s >>= 8;
599,600c599,600
<                    \
<     s->tPos >>= 8;
---
>                    
>      >>= 8;
600c600
<     s->tPos >>= 8;
---
>     ->tPos >>= 8;
600c600
<     s->tPos >>= 8;
---
>     tPos >>= 8;
600c600
<     s->tPos >>= 8;
---
>     -> >>= 8;
(86.8 %, 27032 bytes)
600c600
<     ->tPos >>= 8;
---
>     tPos >>= 8;
600c600
<     ->tPos >>= 8;
---
>      >>= 8;
(86.8 %, 27030 bytes)
600c600
<     tPos >>= 8;
---
>      >>= 8;
600c600
<     tPos >>= 8;
---
>       8;
(86.8 %, 27026 bytes)
600c600
<      >>= 8;
---
>       8;
600c600
<      >>= 8;
---
>       ;
600c600
<      >>= 8;
---
>       8
(86.8 %, 27023 bytes)
600c600
<       8;
---
>       ;
600c600
<       8;
---
>       
(86.8 %, 27022 bytes)
600c600
<       ;
---
>       
600c600
<       ;
---
>       
602c602
< #define BZ_GET_FAST_C(c)                   \
---
> define BZ_GET_FAST_C(c)                   \
600c600
<       ;
---
>       
602c602
< #define BZ_GET_FAST_C(c)                   \
---
> # BZ_GET_FAST_C(c)                   \
600c600
<       ;
---
>       
602c602
< #define BZ_GET_FAST_C(c)                   \
---
>  BZ_GET_FAST_C(c)                   \
600c600
<       ;
---
>       
602c602
< #define BZ_GET_FAST_C(c)                   \
---
> #define (c)                   \
600c600
<       ;
---
>       
602c602
< #define BZ_GET_FAST_C(c)                   \
---
> define (c)                   \
600c600
<       ;
---
>       
602c602
< #define BZ_GET_FAST_C(c)                   \
---
> # (c)                   \
600c600
<       ;
---
>       
602c602
< #define BZ_GET_FAST_C(c)                   \
---
>  (c)                   \
602c602
< #define BZ_GET_FAST_C(c)                   \
---
> define BZ_GET_FAST_C(c)                   \
602c602
< #define BZ_GET_FAST_C(c)                   \
---
>  BZ_GET_FAST_C(c)                   \
602c602
< #define BZ_GET_FAST_C(c)                   \
---
> define (c)                   \
602c602
< #define BZ_GET_FAST_C(c)                   \
---
>  (c)                   \
602c602
< #define BZ_GET_FAST_C(c)                   \
---
> define BZ_GET_FAST_Cc)                   \
602c602
< #define BZ_GET_FAST_C(c)                   \
---
>  BZ_GET_FAST_Cc)                   \
602c602
< #define BZ_GET_FAST_C(c)                   \
---
> define c)                   \
602c602
< #define BZ_GET_FAST_C(c)                   \
---
>  c)                   \
(86.8 %, 27021 bytes)
602c602
< #define BZ_GET_FAST_C(c)                   \
---
> define BZ_GET_FAST_C(c)                   \
602c602
< #define BZ_GET_FAST_C(c)                   \
---
>  BZ_GET_FAST_C(c)                   \
602c602
< #define BZ_GET_FAST_C(c)                   \
---
> define (c)                   \
602c602
< #define BZ_GET_FAST_C(c)                   \
---
>  (c)                   \
602c602
< #define BZ_GET_FAST_C(c)                   \
---
> define BZ_GET_FAST_Cc)                   \
602c602
< #define BZ_GET_FAST_C(c)                   \
---
>  BZ_GET_FAST_Cc)                   \
602c602
< #define BZ_GET_FAST_C(c)                   \
---
> define c)                   \
602c602
< #define BZ_GET_FAST_C(c)                   \
---
>  c)                   \
602c602
< #define BZ_GET_FAST_C(c)                   \
---
> # BZ_GET_FAST_C(c)                   \
602c602
< #define BZ_GET_FAST_C(c)                   \
---
> # (c)                   \
602c602
< #define BZ_GET_FAST_C(c)                   \
---
> # BZ_GET_FAST_Cc)                   \
602c602
< #define BZ_GET_FAST_C(c)                   \
---
> # c)                   \
602c602
< #define BZ_GET_FAST_C(c)                   \
---
> # BZ_GET_FAST_C()                   \
602c602
< #define BZ_GET_FAST_C(c)                   \
---
> # ()                   \
602c602
< #define BZ_GET_FAST_C(c)                   \
---
> # BZ_GET_FAST_C)                   \
602c602
< #define BZ_GET_FAST_C(c)                   \
---
> # )                   \
602c602
< #define BZ_GET_FAST_C(c)                   \
---
> #define (c)                   \
602c602
< #define BZ_GET_FAST_C(c)                   \
---
> #define c)                   \
602c602
< #define BZ_GET_FAST_C(c)                   \
---
> #define ()                   \
602c602
< #define BZ_GET_FAST_C(c)                   \
---
> #define )                   \
602c602
< #define BZ_GET_FAST_C(c)                   \
---
> #define (c                   \
602c602
< #define BZ_GET_FAST_C(c)                   \
---
> #define c                   \
(86.8 %, 27007 bytes)
602c602
< #define c)                   \
---
> #define                    \
602c602
< #define c)                   \
---
> #define )                   
602c602
< #define c)                   \
---
> #define                    
602,603c602,603
< #define c)                   \
<     c_tPos = c_tt[c_tPos];                    \
---
> #define )                   \
>      = c_tt[c_tPos];                    \
602,603c602,603
< #define c)                   \
<     c_tPos = c_tt[c_tPos];                    \
---
> #define                    \
>      = c_tt[c_tPos];                    \
602,603c602,603
< #define c)                   \
<     c_tPos = c_tt[c_tPos];                    \
---
> #define )                   
>      = c_tt[c_tPos];                    \
602,603c602,603
< #define c)                   \
<     c_tPos = c_tt[c_tPos];                    \
---
> #define                    
>      = c_tt[c_tPos];                    \
602c602
< #define c)                   \
---
> #define c                   \
(86.8 %, 27005 bytes)
602,603c602,603
< #define                    \
<     c_tPos = c_tt[c_tPos];                    \
---
> #define                    
>      = c_tt[c_tPos];                    \
602,603c602,603
< #define                    \
<     c_tPos = c_tt[c_tPos];                    \
---
> #define                    
>     c_tPos  c_tt[c_tPos];                    \
602,603c602,603
< #define                    \
<     c_tPos = c_tt[c_tPos];                    \
---
> #define                    
>       c_tt[c_tPos];                    \
602,603c602,603
< #define                    \
<     c_tPos = c_tt[c_tPos];                    \
---
> #define                    
>     c_tPos = [c_tPos];                    \
602,603c602,603
< #define                    \
<     c_tPos = c_tt[c_tPos];                    \
---
> #define                    
>      = [c_tPos];                    \
602,603c602,603
< #define                    \
<     c_tPos = c_tt[c_tPos];                    \
---
> #define                    
>     c_tPos  [c_tPos];                    \
602,603c602,603
< #define                    \
<     c_tPos = c_tt[c_tPos];                    \
---
> #define                    
>       [c_tPos];                    \
603c603
<     c_tPos = c_tt[c_tPos];                    \
---
>      = c_tt[c_tPos];                    \
603c603
<     c_tPos = c_tt[c_tPos];                    \
---
>       c_tt[c_tPos];                    \
603c603
<     c_tPos = c_tt[c_tPos];                    \
---
>      = [c_tPos];                    \
603c603
<     c_tPos = c_tt[c_tPos];                    \
---
>       [c_tPos];                    \
603c603
<     c_tPos = c_tt[c_tPos];                    \
---
>      = c_ttc_tPos];                    \
603c603
<     c_tPos = c_tt[c_tPos];                    \
---
>       c_ttc_tPos];                    \
(86.8 %, 26998 bytes)
603c603
<       c_tt[c_tPos];                    \
---
>       c_tPos];                    \
603c603
<       c_tt[c_tPos];                    \
---
>       [];                    \
603c603
<       c_tt[c_tPos];                    \
---
>       ];                    \
603c603
<       c_tt[c_tPos];                    \
---
>       [c_tPos;                    \
603c603
<       c_tt[c_tPos];                    \
---
>       c_tPos;                    \
603c603
<       c_tt[c_tPos];                    \
---
>       [;                    \
603c603
<       c_tt[c_tPos];                    \
---
>       ;                    \
(86.8 %, 26993 bytes)
603c603
<       c_tPos];                    \
---
>       ;                    \
603c603
<       c_tPos];                    \
---
>       ]                    \
603c603
<       c_tPos];                    \
---
>                           \
603c603
<       c_tPos];                    \
---
>       ];                    
603c603
<       c_tPos];                    \
---
>       ;                    
603c603
<       c_tPos];                    \
---
>       ]                    
603c603
<       c_tPos];                    \
---
>                           
603c603
<       c_tPos];                    \
---
>       c_tPos;                    \
(86.8 %, 26985 bytes)
603,604c603,604
<                           \
<     c = (UChar)(c_tPos & 0xf);            \
---
>                           
>       (UChar)(c_tPos & 0xf);            \
603,604c603,604
<                           \
<     c = (UChar)(c_tPos & 0xf);            \
---
>                           
>     c = UChar)(c_tPos & 0xf);            \
603,604c603,604
<                           \
<     c = (UChar)(c_tPos & 0xf);            \
---
>                           
>      = UChar)(c_tPos & 0xf);            \
603,604c603,604
<                           \
<     c = (UChar)(c_tPos & 0xf);            \
---
>                           
>     c  UChar)(c_tPos & 0xf);            \
603,604c603,604
<                           \
<     c = (UChar)(c_tPos & 0xf);            \
---
>                           
>       UChar)(c_tPos & 0xf);            \
604c604
<     c = (UChar)(c_tPos & 0xf);            \
---
>      = (UChar)(c_tPos & 0xf);            \
604c604
<     c = (UChar)(c_tPos & 0xf);            \
---
>       (UChar)(c_tPos & 0xf);            \
604c604
<     c = (UChar)(c_tPos & 0xf);            \
---
>      = UChar)(c_tPos & 0xf);            \
604c604
<     c = (UChar)(c_tPos & 0xf);            \
---
>       UChar)(c_tPos & 0xf);            \
604c604
<     c = (UChar)(c_tPos & 0xf);            \
---
>      = ()(c_tPos & 0xf);            \
604c604
<     c = (UChar)(c_tPos & 0xf);            \
---
>       ()(c_tPos & 0xf);            \
604c604
<     c = (UChar)(c_tPos & 0xf);            \
---
>      = )(c_tPos & 0xf);            \
604c604
<     c = (UChar)(c_tPos & 0xf);            \
---
>       )(c_tPos & 0xf);            \
604c604
<     c = (UChar)(c_tPos & 0xf);            \
---
>     c  (UChar)(c_tPos & 0xf);            \
(86.8 %, 26982 bytes)
604c604
<       UChar)(c_tPos & 0xf);            \
---
>       c_tPos & 0xf);            \
604c604
<       UChar)(c_tPos & 0xf);            \
---
>       )( & 0xf);            \
604c604
<       UChar)(c_tPos & 0xf);            \
---
>       ( & 0xf);            \
604c604
<       UChar)(c_tPos & 0xf);            \
---
>       ) & 0xf);            \
604c604
<       UChar)(c_tPos & 0xf);            \
---
>        & 0xf);            \
604c604
<       UChar)(c_tPos & 0xf);            \
---
>       UChar(c_tPos & 0xf);            \
604c604
<       UChar)(c_tPos & 0xf);            \
---
>       UCharc_tPos & 0xf);            \
(86.8 %, 26975 bytes)
604c604
<       c_tPos & 0xf);            \
---
>         );            \
604c604
<       c_tPos & 0xf);            \
---
>        & 0xf;            \
604c604
<       c_tPos & 0xf);            \
---
>         0xf;            \
604c604
<       c_tPos & 0xf);            \
---
>        & ;            \
604c604
<       c_tPos & 0xf);            \
---
>         ;            \
604c604
<       c_tPos & 0xf);            \
---
>       c_tPos  0xf);            \
604c604
<       c_tPos & 0xf);            \
---
>       c_tPos  );            \
(86.8 %, 26974 bytes)
604c604
<       c_tPos  0xf);            \
---
>       c_tPos  );            \
604c604
<       c_tPos  0xf);            \
---
>       c_tPos  ;            \
(86.8 %, 26971 bytes)
604c604
<       c_tPos  );            \
---
>       c_tPos  ;            \
604c604
<       c_tPos  );            \
---
>       c_tPos              \
(86.8 %, 26970 bytes)
604c604
<       c_tPos  ;            \
---
>       c_tPos              \
604c604
<       c_tPos  ;            \
---
>       c_tPos              
604,605c604,605
<       c_tPos  ;            \
<     c_tPos >>= 8;
---
>       c_tPos              \
>      >>= 8;
(86.8 %, 26969 bytes)
604c604
<       c_tPos              \
---
>       c_tPos              
604,605c604,605
<       c_tPos              \
<     c_tPos >>= 8;
---
>       c_tPos              
>      >>= 8;
604,605c604,605
<       c_tPos              \
<     c_tPos >>= 8;
---
>       c_tPos              
>     c_tPos  8;
604,605c604,605
<       c_tPos              \
<     c_tPos >>= 8;
---
>       c_tPos              
>       8;
604,605c604,605
<       c_tPos              \
<     c_tPos >>= 8;
---
>       c_tPos              
>     c_tPos >>= ;
604,605c604,605
<       c_tPos              \
<     c_tPos >>= 8;
---
>       c_tPos              
>      >>= ;
604,605c604,605
<       c_tPos              \
<     c_tPos >>= 8;
---
>       c_tPos              
>     c_tPos  ;
604,605c604,605
<       c_tPos              \
<     c_tPos >>= 8;
---
>       c_tPos              
>       ;
605c605
<     c_tPos >>= 8;
---
>      >>= 8;
(86.8 %, 26964 bytes)
605c605
<     c_tPos  ;
---
>       ;
607c607
< #define SET_LL4(i,n)                                          \
---
>  SET_LL4(i,n)                                          \
605c605
<     c_tPos  ;
---
>       
607c607
< #define SET_LL4(i,n)                                          \
---
>  SET_LL4(i,n)                                          \
605c605
<     c_tPos  ;
---
>     c_tPos  
605c605
<     c_tPos  ;
---
>     c_tPos  
607c607
< #define SET_LL4(i,n)                                          \
---
> define SET_LL4(i,n)                                          \
605c605
<     c_tPos  ;
---
>     c_tPos  
607c607
< #define SET_LL4(i,n)                                          \
---
> # SET_LL4(i,n)                                          \
605c605
<     c_tPos  ;
---
>     c_tPos  
607c607
< #define SET_LL4(i,n)                                          \
---
>  SET_LL4(i,n)                                          \
605c605
<     c_tPos  ;
---
>     c_tPos  
607c607
< #define SET_LL4(i,n)                                          \
---
> #define (i,n)                                          \
605c605
<     c_tPos  ;
---
>     c_tPos  
607c607
< #define SET_LL4(i,n)                                          \
---
> define (i,n)                                          \
605c605
<     c_tPos  ;
---
>     c_tPos  
607c607
< #define SET_LL4(i,n)                                          \
---
> # (i,n)                                          \
605c605
<     c_tPos  ;
---
>     c_tPos  
607c607
< #define SET_LL4(i,n)                                          \
---
>  (i,n)                                          \
607c607
< #define SET_LL4(i,n)                                          \
---
> define SET_LL4(i,n)                                          \
607c607
< #define SET_LL4(i,n)                                          \
---
>  SET_LL4(i,n)                                          \
607c607
< #define SET_LL4(i,n)                                          \
---
> define (i,n)                                          \
607c607
< #define SET_LL4(i,n)                                          \
---
>  (i,n)                                          \
607c607
< #define SET_LL4(i,n)                                          \
---
> define SET_LL4i,n)                                          \
607c607
< #define SET_LL4(i,n)                                          \
---
>  SET_LL4i,n)                                          \
607c607
< #define SET_LL4(i,n)                                          \
---
> define i,n)                                          \
607c607
< #define SET_LL4(i,n)                                          \
---
>  i,n)                                          \
607c607
< #define SET_LL4(i,n)                                          \
---
> # SET_LL4(i,n)                                          \
607c607
< #define SET_LL4(i,n)                                          \
---
> # (i,n)                                          \
(86.8 %, 26963 bytes)
607c607
< #define SET_LL4(i,n)                                          \
---
> define SET_LL4(i,n)                                          \
607c607
< #define SET_LL4(i,n)                                          \
---
>  SET_LL4(i,n)                                          \
607c607
< #define SET_LL4(i,n)                                          \
---
> define (i,n)                                          \
607c607
< #define SET_LL4(i,n)                                          \
---
>  (i,n)                                          \
607c607
< #define SET_LL4(i,n)                                          \
---
> define SET_LL4i,n)                                          \
607c607
< #define SET_LL4(i,n)                                          \
---
>  SET_LL4i,n)                                          \
607c607
< #define SET_LL4(i,n)                                          \
---
> define i,n)                                          \
607c607
< #define SET_LL4(i,n)                                          \
---
>  i,n)                                          \
607c607
< #define SET_LL4(i,n)                                          \
---
> # SET_LL4(i,n)                                          \
607c607
< #define SET_LL4(i,n)                                          \
---
> # (i,n)                                          \
607c607
< #define SET_LL4(i,n)                                          \
---
> # SET_LL4i,n)                                          \
607c607
< #define SET_LL4(i,n)                                          \
---
> # i,n)                                          \
607c607
< #define SET_LL4(i,n)                                          \
---
> # SET_LL4(,n)                                          \
607c607
< #define SET_LL4(i,n)                                          \
---
> # (,n)                                          \
607c607
< #define SET_LL4(i,n)                                          \
---
> # SET_LL4,n)                                          \
607c607
< #define SET_LL4(i,n)                                          \
---
> # ,n)                                          \
607c607
< #define SET_LL4(i,n)                                          \
---
> #define (i,n)                                          \
607c607
< #define SET_LL4(i,n)                                          \
---
> #define i,n)                                          \
607c607
< #define SET_LL4(i,n)                                          \
---
> #define (,n)                                          \
607c607
< #define SET_LL4(i,n)                                          \
---
> #define ,n)                                          \
607c607
< #define SET_LL4(i,n)                                          \
---
> #define (in)                                          \
607c607
< #define SET_LL4(i,n)                                          \
---
> #define in)                                          \
607c607
< #define SET_LL4(i,n)                                          \
---
> #define (n)                                          \
607c607
< #define SET_LL4(i,n)                                          \
---
> #define n)                                          \
607c607
< #define SET_LL4(i,n)                                          \
---
> #define SET_LL4i,n)                                          \
(86.8 %, 26954 bytes)
607c607
< #define in)                                          \
---
> #define                                           \
610c610
< #define GET_LL4(i)                             \
---
> define GET_LL4(i)                             \
607c607
< #define in)                                          \
---
> #define )                                          
610c610
< #define GET_LL4(i)                             \
---
> define GET_LL4(i)                             \
607c607
< #define in)                                          \
---
> #define                                           
610c610
< #define GET_LL4(i)                             \
---
> define GET_LL4(i)                             \
607c607
< #define in)                                          \
---
> #define in                                          \
607c607
< #define in)                                          \
---
> #define in                                          
(86.8 %, 26953 bytes)
607c607
< #define in                                          \
---
> #define in                                          
607c607
< #define in                                          \
---
> #define in                                          
610c610
< #define GET_LL4(i)                             \
---
> define GET_LL4(i)                             \
607c607
< #define in                                          \
---
> #define in                                          
610c610
< #define GET_LL4(i)                             \
---
> # GET_LL4(i)                             \
607c607
< #define in                                          \
---
> #define in                                          
610c610
< #define GET_LL4(i)                             \
---
>  GET_LL4(i)                             \
607c607
< #define in                                          \
---
> #define in                                          
610c610
< #define GET_LL4(i)                             \
---
> #define (i)                             \
607c607
< #define in                                          \
---
> #define in                                          
610c610
< #define GET_LL4(i)                             \
---
> define (i)                             \
607c607
< #define in                                          \
---
> #define in                                          
610c610
< #define GET_LL4(i)                             \
---
> # (i)                             \
607c607
< #define in                                          \
---
> #define in                                          
610c610
< #define GET_LL4(i)                             \
---
>  (i)                             \
610c610
< #define GET_LL4(i)                             \
---
> define GET_LL4(i)                             \
610c610
< #define GET_LL4(i)                             \
---
>  GET_LL4(i)                             \
610c610
< #define GET_LL4(i)                             \
---
> define (i)                             \
610c610
< #define GET_LL4(i)                             \
---
>  (i)                             \
610c610
< #define GET_LL4(i)                             \
---
> define GET_LL4i)                             \
610c610
< #define GET_LL4(i)                             \
---
>  GET_LL4i)                             \
610c610
< #define GET_LL4(i)                             \
---
> define i)                             \
610c610
< #define GET_LL4(i)                             \
---
>  i)                             \
610c610
< #define GET_LL4(i)                             \
---
> # GET_LL4(i)                             \
610c610
< #define GET_LL4(i)                             \
---
> # (i)                             \
610c610
< #define GET_LL4(i)                             \
---
> # GET_LL4i)                             \
(86.8 %, 26952 bytes)
610c610
< #define GET_LL4(i)                             \
---
> define GET_LL4(i)                             \
610c610
< #define GET_LL4(i)                             \
---
>  GET_LL4(i)                             \
610c610
< #define GET_LL4(i)                             \
---
> define (i)                             \
610c610
< #define GET_LL4(i)                             \
---
>  (i)                             \
610c610
< #define GET_LL4(i)                             \
---
> define GET_LL4i)                             \
610c610
< #define GET_LL4(i)                             \
---
>  GET_LL4i)                             \
610c610
< #define GET_LL4(i)                             \
---
> define i)                             \
610c610
< #define GET_LL4(i)                             \
---
>  i)                             \
610c610
< #define GET_LL4(i)                             \
---
> # GET_LL4(i)                             \
610c610
< #define GET_LL4(i)                             \
---
> # (i)                             \
610c610
< #define GET_LL4(i)                             \
---
> # GET_LL4i)                             \
610c610
< #define GET_LL4(i)                             \
---
> # i)                             \
610c610
< #define GET_LL4(i)                             \
---
> # GET_LL4()                             \
610c610
< #define GET_LL4(i)                             \
---
> # ()                             \
610c610
< #define GET_LL4(i)                             \
---
> # GET_LL4)                             \
610c610
< #define GET_LL4(i)                             \
---
> # )                             \
610c610
< #define GET_LL4(i)                             \
---
> #define (i)                             \
610c610
< #define GET_LL4(i)                             \
---
> #define i)                             \
610c610
< #define GET_LL4(i)                             \
---
> #define ()                             \
610c610
< #define GET_LL4(i)                             \
---
> #define )                             \
610c610
< #define GET_LL4(i)                             \
---
> #define (i                             \
610c610
< #define GET_LL4(i)                             \
---
> #define i                             \
610c610
< #define GET_LL4(i)                             \
---
> #define (                             \
610c610
< #define GET_LL4(i)                             \
---
> #define                              \
610c610
< #define GET_LL4(i)                             \
---
> #define GET_LL4i)                             \
610c610
< #define GET_LL4(i)                             \
---
> #define GET_LL4)                             \
(86.8 %, 26951 bytes)
610c610
< #define GET_LL4i)                             \
---
> #define GET_LL4i                             \
610c610
< #define GET_LL4i)                             \
---
> #define GET_LL4i                             
610,611c610,611
< #define GET_LL4i)                             \
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
> #define GET_LL4i                             \
>    (((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
(86.8 %, 26950 bytes)
610c610
< #define GET_LL4i                             \
---
> #define GET_LL4i                             
610,611c610,611
< #define GET_LL4i                             \
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
> #define GET_LL4i                             
>    (((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
610,611c610,611
< #define GET_LL4i                             \
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
> #define GET_LL4i                             
>    (((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
610,611c610,611
< #define GET_LL4i                             \
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
> #define GET_LL4i                             
>    ((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
610,611c610,611
< #define GET_LL4i                             \
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
> #define GET_LL4i                             
>    (((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
610,611c610,611
< #define GET_LL4i                             \
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
> #define GET_LL4i                             
>    ((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
610,611c610,611
< #define GET_LL4i                             \
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
> #define GET_LL4i                             
>    ((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
610,611c610,611
< #define GET_LL4i                             \
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
> #define GET_LL4i                             
>    (UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    (((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    ((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    ((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
(86.9 %, 26949 bytes)
611c611
<    (((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    ((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
611c611
<    (((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    (UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
611c611
<    (((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    (UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
(86.9 %, 26948 bytes)
611c611
<    ((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    (UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
611c611
<    ((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
(86.9 %, 26947 bytes)
611c611
<    (UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
611c611
<    (UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    )(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
611c611
<    (UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    UInt32(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
(86.9 %, 26946 bytes)
611c611
<    UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    )(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
611c611
<    UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    (s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
(86.9 %, 26940 bytes)
611c611
<    )(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    (s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
611c611
<    )(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
611c611
<    )(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    (->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
(86.9 %, 26939 bytes)
611c611
<    (s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
611c611
<    (s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    ->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
(86.9 %, 26938 bytes)
611c611
<    s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    ->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
611c611
<    s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
611c611
<    s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    ->[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
(86.9 %, 26937 bytes)
611c611
<    ->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
611c611
<    ->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    [(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
611c611
<    ->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    ll4(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
(86.9 %, 26935 bytes)
611c611
<    ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    [(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
611c611
<    ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    (i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
(86.9 %, 26932 bytes)
611c611
<    [(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    (i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
611c611
<    [(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
(86.9 %, 26931 bytes)
611c611
<    (i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
611c611
<    (i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    ) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
(86.9 %, 26930 bytes)
611c611
<    i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    ) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
611c611
<    i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>     >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
(86.9 %, 26929 bytes)
611c611
<    ) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>     >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
611c611
<    ) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>      1])) >> (((i) << 2) & 0x4)) & 0xF)
(86.9 %, 26928 bytes)
611c611
<     >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>      1])) >> (((i) << 2) & 0x4)) & 0xF)
611c611
<     >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>      ])) >> (((i) << 2) & 0x4)) & 0xF)
611c611
<     >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>      1)) >> (((i) << 2) & 0x4)) & 0xF)
(86.9 %, 26926 bytes)
611c611
<      1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>      ])) >> (((i) << 2) & 0x4)) & 0xF)
611c611
<      1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>      )) >> (((i) << 2) & 0x4)) & 0xF)
611c611
<      1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>      ]) >> (((i) << 2) & 0x4)) & 0xF)
(86.9 %, 26925 bytes)
611c611
<      ])) >> (((i) << 2) & 0x4)) & 0xF)
---
>      )) >> (((i) << 2) & 0x4)) & 0xF)
611c611
<      ])) >> (((i) << 2) & 0x4)) & 0xF)
---
>      ) >> (((i) << 2) & 0x4)) & 0xF)
611c611
<      ])) >> (((i) << 2) & 0x4)) & 0xF)
---
>      ) >> (((i) << 2) & 0x4)) & 0xF)
(86.9 %, 26924 bytes)
611c611
<      )) >> (((i) << 2) & 0x4)) & 0xF)
---
>      ) >> (((i) << 2) & 0x4)) & 0xF)
611c611
<      )) >> (((i) << 2) & 0x4)) & 0xF)
---
>       >> (((i) << 2) & 0x4)) & 0xF)
611c611
<      )) >> (((i) << 2) & 0x4)) & 0xF)
---
>      )  (((i) << 2) & 0x4)) & 0xF)
(86.9 %, 26923 bytes)
611c611
<      ) >> (((i) << 2) & 0x4)) & 0xF)
---
>       >> (((i) << 2) & 0x4)) & 0xF)
611c611
<      ) >> (((i) << 2) & 0x4)) & 0xF)
---
>        (((i) << 2) & 0x4)) & 0xF)
(86.9 %, 26922 bytes)
611c611
<       >> (((i) << 2) & 0x4)) & 0xF)
---
>        (((i) << 2) & 0x4)) & 0xF)
611c611
<       >> (((i) << 2) & 0x4)) & 0xF)
---
>        ((i) << 2) & 0x4)) & 0xF)
(86.9 %, 26920 bytes)
611c611
<        (((i) << 2) & 0x4)) & 0xF)
---
>        ((i) << 2) & 0x4)) & 0xF)
611c611
<        (((i) << 2) & 0x4)) & 0xF)
---
>        (i) << 2) & 0x4)) & 0xF)
(86.9 %, 26919 bytes)
611c611
<        ((i) << 2) & 0x4)) & 0xF)
---
>        (i) << 2) & 0x4)) & 0xF)
611c611
<        ((i) << 2) & 0x4)) & 0xF)
---
>        i) << 2) & 0x4)) & 0xF)
(86.9 %, 26918 bytes)
611c611
<        (i) << 2) & 0x4)) & 0xF)
---
>        i) << 2) & 0x4)) & 0xF)
611c611
<        (i) << 2) & 0x4)) & 0xF)
---
>        ) << 2) & 0x4)) & 0xF)
611c611
<        (i) << 2) & 0x4)) & 0xF)
---
>        i << 2) & 0x4)) & 0xF)
(86.9 %, 26917 bytes)
611c611
<        i) << 2) & 0x4)) & 0xF)
---
>        ) << 2) & 0x4)) & 0xF)
611c611
<        i) << 2) & 0x4)) & 0xF)
---
>         << 2) & 0x4)) & 0xF)
611c611
<        i) << 2) & 0x4)) & 0xF)
---
>        )  2) & 0x4)) & 0xF)
(86.9 %, 26916 bytes)
611c611
<        ) << 2) & 0x4)) & 0xF)
---
>         << 2) & 0x4)) & 0xF)
611c611
<        ) << 2) & 0x4)) & 0xF)
---
>          2) & 0x4)) & 0xF)
(86.9 %, 26915 bytes)
611c611
<         << 2) & 0x4)) & 0xF)
---
>          2) & 0x4)) & 0xF)
611c611
<         << 2) & 0x4)) & 0xF)
---
>          ) & 0x4)) & 0xF)
(86.9 %, 26913 bytes)
611c611
<          2) & 0x4)) & 0xF)
---
>          ) & 0x4)) & 0xF)
611c611
<          2) & 0x4)) & 0xF)
---
>           & 0x4)) & 0xF)
(86.9 %, 26912 bytes)
611c611
<          ) & 0x4)) & 0xF)
---
>           & 0x4)) & 0xF)
611c611
<          ) & 0x4)) & 0xF)
---
>            0x4)) & 0xF)
611c611
<          ) & 0x4)) & 0xF)
---
>           & )) & 0xF)
(86.9 %, 26911 bytes)
611c611
<           & 0x4)) & 0xF)
---
>            0x4)) & 0xF)
611c611
<           & 0x4)) & 0xF)
---
>            )) & 0xF)
(86.9 %, 26910 bytes)
611c611
<            0x4)) & 0xF)
---
>            )) & 0xF)
611c611
<            0x4)) & 0xF)
---
>            ) & 0xF)
(86.9 %, 26907 bytes)
611c611
<            )) & 0xF)
---
>            ) & 0xF)
611c611
<            )) & 0xF)
---
>             & 0xF)
611c611
<            )) & 0xF)
---
>            )  0xF)
(86.9 %, 26906 bytes)
611c611
<            ) & 0xF)
---
>             & 0xF)
611c611
<            ) & 0xF)
---
>              0xF)
(86.9 %, 26905 bytes)
611c611
<             & 0xF)
---
>              0xF)
611c611
<             & 0xF)
---
>              )
611c611
<             & 0xF)
---
>              0xF
(86.9 %, 26904 bytes)
611c611
<              0xF)
---
>              )
611c611
<              0xF)
---
>              
611c611
<              0xF)
---
>              )
613c613
< #define SET_LL(i,n)                          \
---
> define SET_LL(i,n)                          \
(86.9 %, 26901 bytes)
611c611
<              )
---
>              
611c611
<              )
---
>              
613c613
< #define SET_LL(i,n)                          \
---
> define SET_LL(i,n)                          \
611c611
<              )
---
>              
613c613
< #define SET_LL(i,n)                          \
---
> # SET_LL(i,n)                          \
611c611
<              )
---
>              
613c613
< #define SET_LL(i,n)                          \
---
>  SET_LL(i,n)                          \
611c611
<              )
---
>              
613c613
< #define SET_LL(i,n)                          \
---
> #define (i,n)                          \
611c611
<              )
---
>              
613c613
< #define SET_LL(i,n)                          \
---
> define (i,n)                          \
611c611
<              )
---
>              
613c613
< #define SET_LL(i,n)                          \
---
> # (i,n)                          \
611c611
<              )
---
>              
613c613
< #define SET_LL(i,n)                          \
---
>  (i,n)                          \
613c613
< #define SET_LL(i,n)                          \
---
> define SET_LL(i,n)                          \
613c613
< #define SET_LL(i,n)                          \
---
>  SET_LL(i,n)                          \
613c613
< #define SET_LL(i,n)                          \
---
> define (i,n)                          \
613c613
< #define SET_LL(i,n)                          \
---
>  (i,n)                          \
613c613
< #define SET_LL(i,n)                          \
---
> define SET_LLi,n)                          \
613c613
< #define SET_LL(i,n)                          \
---
>  SET_LLi,n)                          \
613c613
< #define SET_LL(i,n)                          \
---
> define i,n)                          \
613c613
< #define SET_LL(i,n)                          \
---
>  i,n)                          \
613c613
< #define SET_LL(i,n)                          \
---
> # SET_LL(i,n)                          \
613c613
< #define SET_LL(i,n)                          \
---
> # (i,n)                          \
(86.9 %, 26900 bytes)
613c613
< #define SET_LL(i,n)                          \
---
> define SET_LL(i,n)                          \
613c613
< #define SET_LL(i,n)                          \
---
>  SET_LL(i,n)                          \
613c613
< #define SET_LL(i,n)                          \
---
> define (i,n)                          \
613c613
< #define SET_LL(i,n)                          \
---
>  (i,n)                          \
613c613
< #define SET_LL(i,n)                          \
---
> define SET_LLi,n)                          \
613c613
< #define SET_LL(i,n)                          \
---
>  SET_LLi,n)                          \
613c613
< #define SET_LL(i,n)                          \
---
> define i,n)                          \
613c613
< #define SET_LL(i,n)                          \
---
>  i,n)                          \
613c613
< #define SET_LL(i,n)                          \
---
> # SET_LL(i,n)                          \
613c613
< #define SET_LL(i,n)                          \
---
> # (i,n)                          \
613c613
< #define SET_LL(i,n)                          \
---
> # SET_LLi,n)                          \
613c613
< #define SET_LL(i,n)                          \
---
> # i,n)                          \
613c613
< #define SET_LL(i,n)                          \
---
> # SET_LL(,n)                          \
613c613
< #define SET_LL(i,n)                          \
---
> # (,n)                          \
613c613
< #define SET_LL(i,n)                          \
---
> # SET_LL,n)                          \
613c613
< #define SET_LL(i,n)                          \
---
> # ,n)                          \
613c613
< #define SET_LL(i,n)                          \
---
> #define (i,n)                          \
613c613
< #define SET_LL(i,n)                          \
---
> #define i,n)                          \
613c613
< #define SET_LL(i,n)                          \
---
> #define (,n)                          \
613c613
< #define SET_LL(i,n)                          \
---
> #define ,n)                          \
613c613
< #define SET_LL(i,n)                          \
---
> #define (in)                          \
613c613
< #define SET_LL(i,n)                          \
---
> #define in)                          \
613c613
< #define SET_LL(i,n)                          \
---
> #define (n)                          \
613c613
< #define SET_LL(i,n)                          \
---
> #define n)                          \
613c613
< #define SET_LL(i,n)                          \
---
> #define SET_LLi,n)                          \
(86.9 %, 26892 bytes)
613c613
< #define in)                          \
---
> #define                           \
616c616
< #define GET_LL(i) \
---
> define GET_LL(i) \
613c613
< #define in)                          \
---
> #define )                          
616c616
< #define GET_LL(i) \
---
> define GET_LL(i) \
613c613
< #define in)                          \
---
> #define                           
616c616
< #define GET_LL(i) \
---
> define GET_LL(i) \
613c613
< #define in)                          \
---
> #define in                          \
613c613
< #define in)                          \
---
> #define in                          
613c613
< #define in)                          \
---
> #define in                          \
616c616
< #define GET_LL(i) \
---
> define GET_LL(i) \
613c613
< #define in)                          \
---
> #define in                          
616c616
< #define GET_LL(i) \
---
> define GET_LL(i) \
613c613
< #define in)                          \
---
> #define in                          \
616c616
< #define GET_LL(i) \
---
> # GET_LL(i) \
613c613
< #define in)                          \
---
> #define in                          
616c616
< #define GET_LL(i) \
---
> # GET_LL(i) \
613c613
< #define in)                          \
---
> #define in                          \
616c616
< #define GET_LL(i) \
---
>  GET_LL(i) \
613c613
< #define in)                          \
---
> #define in                          
616c616
< #define GET_LL(i) \
---
>  GET_LL(i) \
613c613
< #define in)                          \
---
> #define in)                          
(86.9 %, 26891 bytes)
613c613
< #define in                          \
---
> #define in                          
613c613
< #define in                          \
---
> #define in                          
616c616
< #define GET_LL(i) \
---
> define GET_LL(i) \
613c613
< #define in                          \
---
> #define in                          
616c616
< #define GET_LL(i) \
---
> # GET_LL(i) \
613c613
< #define in                          \
---
> #define in                          
616c616
< #define GET_LL(i) \
---
>  GET_LL(i) \
613c613
< #define in                          \
---
> #define in                          
616c616
< #define GET_LL(i) \
---
> #define (i) \
613c613
< #define in                          \
---
> #define in                          
616c616
< #define GET_LL(i) \
---
> define (i) \
613c613
< #define in                          \
---
> #define in                          
616c616
< #define GET_LL(i) \
---
> # (i) \
613c613
< #define in                          \
---
> #define in                          
616c616
< #define GET_LL(i) \
---
>  (i) \
616c616
< #define GET_LL(i) \
---
> define GET_LL(i) \
616c616
< #define GET_LL(i) \
---
>  GET_LL(i) \
616c616
< #define GET_LL(i) \
---
> define (i) \
616c616
< #define GET_LL(i) \
---
>  (i) \
616c616
< #define GET_LL(i) \
---
> define GET_LLi) \
616c616
< #define GET_LL(i) \
---
>  GET_LLi) \
616c616
< #define GET_LL(i) \
---
> define i) \
(86.9 %, 26890 bytes)
616c616
< #define GET_LL(i) \
---
> define GET_LL(i) \
616c616
< #define GET_LL(i) \
---
>  GET_LL(i) \
616c616
< #define GET_LL(i) \
---
> define (i) \
616c616
< #define GET_LL(i) \
---
>  (i) \
616c616
< #define GET_LL(i) \
---
> define GET_LLi) \
616c616
< #define GET_LL(i) \
---
>  GET_LLi) \
616c616
< #define GET_LL(i) \
---
> define i) \
616c616
< #define GET_LL(i) \
---
>  i) \
616c616
< #define GET_LL(i) \
---
> # GET_LL(i) \
616c616
< #define GET_LL(i) \
---
> # (i) \
616c616
< #define GET_LL(i) \
---
> # GET_LLi) \
616c616
< #define GET_LL(i) \
---
> # i) \
616c616
< #define GET_LL(i) \
---
> # GET_LL() \
616c616
< #define GET_LL(i) \
---
> # () \
616c616
< #define GET_LL(i) \
---
> # GET_LL) \
616c616
< #define GET_LL(i) \
---
> # ) \
616c616
< #define GET_LL(i) \
---
> #define (i) \
616c616
< #define GET_LL(i) \
---
> #define i) \
616c616
< #define GET_LL(i) \
---
> #define () \
616c616
< #define GET_LL(i) \
---
> #define ) \
616c616
< #define GET_LL(i) \
---
> #define (i \
616c616
< #define GET_LL(i) \
---
> #define i \
616c616
< #define GET_LL(i) \
---
> #define ( \
616c616
< #define GET_LL(i) \
---
> #define  \
616c616
< #define GET_LL(i) \
---
> #define GET_LLi) \
616c616
< #define GET_LL(i) \
---
> #define GET_LL) \
(86.9 %, 26889 bytes)
616c616
< #define GET_LLi) \
---
> #define GET_LLi \
616c616
< #define GET_LLi) \
---
> #define GET_LLi 
616,617c616,617
< #define GET_LLi) \
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
---
> #define GET_LLi \
>    ((UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
(86.9 %, 26888 bytes)
616c616
< #define GET_LLi \
---
> #define GET_LLi 
616,617c616,617
< #define GET_LLi \
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
---
> #define GET_LLi 
>    ((UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
616,617c616,617
< #define GET_LLi \
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
---
> #define GET_LLi 
>    ((UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
616,617c616,617
< #define GET_LLi \
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
---
> #define GET_LLi 
>    (UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
616,617c616,617
< #define GET_LLi \
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
---
> #define GET_LLi 
>    ((UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
616,617c616,617
< #define GET_LLi \
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
---
> #define GET_LLi 
>    (UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
616,617c616,617
< #define GET_LLi \
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
---
> #define GET_LLi 
>    (UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
616,617c616,617
< #define GET_LLi \
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
---
> #define GET_LLi 
>    UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
---
>    ((UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
---
>    (UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
(86.9 %, 26887 bytes)
617c617
<    ((UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
---
>    (UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
617c617
<    ((UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
---
>    UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
617c617
<    ((UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
---
>    ()s->ll16[i]) | (GET_LL4(i) << 6))
(86.9 %, 26886 bytes)
617c617
<    (UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
---
>    UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
617c617
<    (UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
---
>    )s->ll16[i]) | (GET_LL4(i) << 6))
617c617
<    (UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
---
>    UInt32s->ll16[i]) | (GET_LL4(i) << 6))
(86.9 %, 26885 bytes)
617c617
<    UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
---
>    )s->ll16[i]) | (GET_LL4(i) << 6))
617c617
<    UInt32)s->ll16[i]) | (GET_LL4(i) << 6))
---
>    s->ll16[i]) | (GET_LL4(i) << 6))
(86.9 %, 26879 bytes)
617c617
<    )s->ll16[i]) | (GET_LL4(i) << 6))
---
>    s->ll16[i]) | (GET_LL4(i) << 6))
617c617
<    )s->ll16[i]) | (GET_LL4(i) << 6))
---
>    ->ll16[i]) | (GET_LL4(i) << 6))
617c617
<    )s->ll16[i]) | (GET_LL4(i) << 6))
---
>    sll16[i]) | (GET_LL4(i) << 6))
(86.9 %, 26878 bytes)
617c617
<    s->ll16[i]) | (GET_LL4(i) << 6))
---
>    ->ll16[i]) | (GET_LL4(i) << 6))
617c617
<    s->ll16[i]) | (GET_LL4(i) << 6))
---
>    ll16[i]) | (GET_LL4(i) << 6))
617c617
<    s->ll16[i]) | (GET_LL4(i) << 6))
---
>    ->[i]) | (GET_LL4(i) << 6))
(86.9 %, 26877 bytes)
617c617
<    ->ll16[i]) | (GET_LL4(i) << 6))
---
>    ll16[i]) | (GET_LL4(i) << 6))
617c617
<    ->ll16[i]) | (GET_LL4(i) << 6))
---
>    [i]) | (GET_LL4(i) << 6))
(86.9 %, 26875 bytes)
617c617
<    ll16[i]) | (GET_LL4(i) << 6))
---
>    [i]) | (GET_LL4(i) << 6))
617c617
<    ll16[i]) | (GET_LL4(i) << 6))
---
>    i]) | (GET_LL4(i) << 6))
(86.9 %, 26871 bytes)
617c617
<    [i]) | (GET_LL4(i) << 6))
---
>    i]) | (GET_LL4(i) << 6))
617c617
<    [i]) | (GET_LL4(i) << 6))
---
>    ]) | (GET_LL4(i) << 6))
(86.9 %, 26870 bytes)
617c617
<    i]) | (GET_LL4(i) << 6))
---
>    ]) | (GET_LL4(i) << 6))
617c617
<    i]) | (GET_LL4(i) << 6))
---
>    ) | (GET_LL4(i) << 6))
(86.9 %, 26869 bytes)
617c617
<    ]) | (GET_LL4(i) << 6))
---
>    ) | (GET_LL4(i) << 6))
617c617
<    ]) | (GET_LL4(i) << 6))
---
>     | (GET_LL4(i) << 6))
617c617
<    ]) | (GET_LL4(i) << 6))
---
>    )  (GET_LL4(i) << 6))
(86.9 %, 26868 bytes)
617c617
<    ) | (GET_LL4(i) << 6))
---
>     | (GET_LL4(i) << 6))
617c617
<    ) | (GET_LL4(i) << 6))
---
>      (GET_LL4(i) << 6))
(86.9 %, 26867 bytes)
617c617
<     | (GET_LL4(i) << 6))
---
>      (GET_LL4(i) << 6))
617c617
<     | (GET_LL4(i) << 6))
---
>      GET_LL4(i) << 6))
(86.9 %, 26866 bytes)
617c617
<      (GET_LL4(i) << 6))
---
>      GET_LL4(i) << 6))
617c617
<      (GET_LL4(i) << 6))
---
>      (i) << 6))
(86.9 %, 26865 bytes)
617c617
<      GET_LL4(i) << 6))
---
>      (i) << 6))
617c617
<      GET_LL4(i) << 6))
---
>      i) << 6))
617c617
<      GET_LL4(i) << 6))
---
>      () << 6))
(86.9 %, 26858 bytes)
617c617
<      (i) << 6))
---
>      i) << 6))
617c617
<      (i) << 6))
---
>      ) << 6))
617c617
<      (i) << 6))
---
>      i << 6))
(86.9 %, 26857 bytes)
617c617
<      i) << 6))
---
>      ) << 6))
617c617
<      i) << 6))
---
>       << 6))
617c617
<      i) << 6))
---
>      )  6))
(86.9 %, 26856 bytes)
617c617
<      ) << 6))
---
>       << 6))
617c617
<      ) << 6))
---
>        6))
617c617
<      ) << 6))
---
>       << ))
(86.9 %, 26855 bytes)
617c617
<       << 6))
---
>        6))
617c617
<       << 6))
---
>        ))
(86.9 %, 26853 bytes)
617c617
<        6))
---
>        ))
617c617
<        6))
---
>        )
617c617
<        6))
---
>        )
(86.9 %, 26852 bytes)
617c617
<        ))
---
>        )
617c617
<        ))
---
>        
(86.9 %, 26851 bytes)
617c617
<        )
---
>        
617c617
<        )
---
>        
619c619
< #define BZ_GET_SMALL(c)                            \
---
> define BZ_GET_SMALL(c)                            \
617c617
<        )
---
>        
619c619
< #define BZ_GET_SMALL(c)                            \
---
> # BZ_GET_SMALL(c)                            \
617c617
<        )
---
>        
619c619
< #define BZ_GET_SMALL(c)                            \
---
>  BZ_GET_SMALL(c)                            \
617c617
<        )
---
>        
619c619
< #define BZ_GET_SMALL(c)                            \
---
> #define (c)                            \
617c617
<        )
---
>        
619c619
< #define BZ_GET_SMALL(c)                            \
---
> define (c)                            \
617c617
<        )
---
>        
619c619
< #define BZ_GET_SMALL(c)                            \
---
> # (c)                            \
617c617
<        )
---
>        
619c619
< #define BZ_GET_SMALL(c)                            \
---
>  (c)                            \
619c619
< #define BZ_GET_SMALL(c)                            \
---
> define BZ_GET_SMALL(c)                            \
619c619
< #define BZ_GET_SMALL(c)                            \
---
>  BZ_GET_SMALL(c)                            \
619c619
< #define BZ_GET_SMALL(c)                            \
---
> define (c)                            \
619c619
< #define BZ_GET_SMALL(c)                            \
---
>  (c)                            \
619c619
< #define BZ_GET_SMALL(c)                            \
---
> define BZ_GET_SMALLc)                            \
619c619
< #define BZ_GET_SMALL(c)                            \
---
>  BZ_GET_SMALLc)                            \
619c619
< #define BZ_GET_SMALL(c)                            \
---
> define c)                            \
619c619
< #define BZ_GET_SMALL(c)                            \
---
>  c)                            \
619c619
< #define BZ_GET_SMALL(c)                            \
---
> # BZ_GET_SMALL(c)                            \
619c619
< #define BZ_GET_SMALL(c)                            \
---
> # (c)                            \
619c619
< #define BZ_GET_SMALL(c)                            \
---
> # BZ_GET_SMALLc)                            \
(86.9 %, 26850 bytes)
619c619
< #define BZ_GET_SMALL(c)                            \
---
> define BZ_GET_SMALL(c)                            \
619c619
< #define BZ_GET_SMALL(c)                            \
---
>  BZ_GET_SMALL(c)                            \
619c619
< #define BZ_GET_SMALL(c)                            \
---
> define (c)                            \
619c619
< #define BZ_GET_SMALL(c)                            \
---
>  (c)                            \
619c619
< #define BZ_GET_SMALL(c)                            \
---
> define BZ_GET_SMALLc)                            \
619c619
< #define BZ_GET_SMALL(c)                            \
---
>  BZ_GET_SMALLc)                            \
619c619
< #define BZ_GET_SMALL(c)                            \
---
> define c)                            \
619c619
< #define BZ_GET_SMALL(c)                            \
---
>  c)                            \
619c619
< #define BZ_GET_SMALL(c)                            \
---
> # BZ_GET_SMALL(c)                            \
619c619
< #define BZ_GET_SMALL(c)                            \
---
> # (c)                            \
619c619
< #define BZ_GET_SMALL(c)                            \
---
> # BZ_GET_SMALLc)                            \
619c619
< #define BZ_GET_SMALL(c)                            \
---
> # c)                            \
619c619
< #define BZ_GET_SMALL(c)                            \
---
> # BZ_GET_SMALL()                            \
619c619
< #define BZ_GET_SMALL(c)                            \
---
> # ()                            \
619c619
< #define BZ_GET_SMALL(c)                            \
---
> # BZ_GET_SMALL)                            \
619c619
< #define BZ_GET_SMALL(c)                            \
---
> # )                            \
619c619
< #define BZ_GET_SMALL(c)                            \
---
> #define (c)                            \
619c619
< #define BZ_GET_SMALL(c)                            \
---
> #define c)                            \
619c619
< #define BZ_GET_SMALL(c)                            \
---
> #define ()                            \
619c619
< #define BZ_GET_SMALL(c)                            \
---
> #define )                            \
619c619
< #define BZ_GET_SMALL(c)                            \
---
> #define (c                            \
619c619
< #define BZ_GET_SMALL(c)                            \
---
> #define c                            \
(86.9 %, 26837 bytes)
619c619
< #define c)                            \
---
> #define                             \
619c619
< #define c)                            \
---
> #define )                            
619c619
< #define c)                            \
---
> #define                             
619,620c619,620
< #define c)                            \
<       c = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
> #define )                            \
>        = BZ2_indexIntoF ( s->tPos, s->cftab );    \
619,620c619,620
< #define c)                            \
<       c = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
> #define                             \
>        = BZ2_indexIntoF ( s->tPos, s->cftab );    \
619,620c619,620
< #define c)                            \
<       c = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
> #define )                            
>        = BZ2_indexIntoF ( s->tPos, s->cftab );    \
619,620c619,620
< #define c)                            \
<       c = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
> #define                             
>        = BZ2_indexIntoF ( s->tPos, s->cftab );    \
619c619
< #define c)                            \
---
> #define c                            \
(86.9 %, 26835 bytes)
619,620c619,620
< #define                             \
<       c = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
> #define                             
>        = BZ2_indexIntoF ( s->tPos, s->cftab );    \
619,620c619,620
< #define                             \
<       c = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
> #define                             
>       c  BZ2_indexIntoF ( s->tPos, s->cftab );    \
619,620c619,620
< #define                             \
<       c = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
> #define                             
>         BZ2_indexIntoF ( s->tPos, s->cftab );    \
619,620c619,620
< #define                             \
<       c = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
> #define                             
>       c =  ( s->tPos, s->cftab );    \
619,620c619,620
< #define                             \
<       c = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
> #define                             
>        =  ( s->tPos, s->cftab );    \
619,620c619,620
< #define                             \
<       c = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
> #define                             
>       c   ( s->tPos, s->cftab );    \
619,620c619,620
< #define                             \
<       c = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
> #define                             
>          ( s->tPos, s->cftab );    \
620c620
<       c = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>        = BZ2_indexIntoF ( s->tPos, s->cftab );    \
620c620
<       c = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>         BZ2_indexIntoF ( s->tPos, s->cftab );    \
620c620
<       c = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>        =  ( s->tPos, s->cftab );    \
620c620
<       c = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>          ( s->tPos, s->cftab );    \
620c620
<       c = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>        = BZ2_indexIntoF  s->tPos, s->cftab );    \
620c620
<       c = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>         BZ2_indexIntoF  s->tPos, s->cftab );    \
620c620
<       c = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>        =   s->tPos, s->cftab );    \
(86.9 %, 26833 bytes)
620c620
<         BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>           s->tPos, s->cftab );    \
620c620
<         BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>          ( ->tPos, s->cftab );    \
620c620
<         BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>           ->tPos, s->cftab );    \
620c620
<         BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>          ( stPos, s->cftab );    \
620c620
<         BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>           stPos, s->cftab );    \
620c620
<         BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>          ( tPos, s->cftab );    \
620c620
<         BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>           tPos, s->cftab );    \
620c620
<         BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>         BZ2_indexIntoF  s->tPos, s->cftab );    \
(86.9 %, 26816 bytes)
620c620
<           stPos, s->cftab );    \
---
>            scftab );    \
620c620
<           stPos, s->cftab );    \
---
>           , cftab );    \
620c620
<           stPos, s->cftab );    \
---
>            cftab );    \
(86.9 %, 26808 bytes)
620c620
<            scftab );    \
---
>             ;    
620c620
<            scftab );    \
---
>             )    
620c620
<            scftab );    \
---
>                 
620c620
<            scftab );    \
---
>            scftab ;    \
620c620
<            scftab );    \
---
>            scftab     \
(86.9 %, 26807 bytes)
620c620
<            scftab ;    \
---
>            scftab     \
620c620
<            scftab ;    \
---
>            scftab     
620,621c620,621
<            scftab ;    \
<       s->tPos = GET_LL(s->tPos);
---
>            scftab     \
>       ->tPos = GET_LL(s->tPos);
(86.9 %, 26806 bytes)
620c620
<            scftab     \
---
>            scftab     
620,621c620,621
<            scftab     \
<       s->tPos = GET_LL(s->tPos);
---
>            scftab     
>       ->tPos = GET_LL(s->tPos);
620,621c620,621
<            scftab     \
<       s->tPos = GET_LL(s->tPos);
---
>            scftab     
>       stPos = GET_LL(s->tPos);
620,621c620,621
<            scftab     \
<       s->tPos = GET_LL(s->tPos);
---
>            scftab     
>       tPos = GET_LL(s->tPos);
620,621c620,621
<            scftab     \
<       s->tPos = GET_LL(s->tPos);
---
>            scftab     
>       s-> = GET_LL(s->tPos);
620,621c620,621
<            scftab     \
<       s->tPos = GET_LL(s->tPos);
---
>            scftab     
>       -> = GET_LL(s->tPos);
620,621c620,621
<            scftab     \
<       s->tPos = GET_LL(s->tPos);
---
>            scftab     
>       s = GET_LL(s->tPos);
620,621c620,621
<            scftab     \
<       s->tPos = GET_LL(s->tPos);
---
>            scftab     
>        = GET_LL(s->tPos);
621c621
<       s->tPos = GET_LL(s->tPos);
---
>       ->tPos = GET_LL(s->tPos);
621c621
<       s->tPos = GET_LL(s->tPos);
---
>       tPos = GET_LL(s->tPos);
(86.9 %, 26805 bytes)
621c621
<       ->tPos = GET_LL(s->tPos);
---
>       tPos = GET_LL(s->tPos);
621c621
<       ->tPos = GET_LL(s->tPos);
---
>        = GET_LL(s->tPos);
(86.9 %, 26803 bytes)
621c621
<       tPos = GET_LL(s->tPos);
---
>        = GET_LL(s->tPos);
621c621
<       tPos = GET_LL(s->tPos);
---
>         GET_LL(s->tPos);
621c621
<       tPos = GET_LL(s->tPos);
---
>        = (s->tPos);
(86.9 %, 26799 bytes)
621c621
<        = GET_LL(s->tPos);
---
>         GET_LL(s->tPos);
621c621
<        = GET_LL(s->tPos);
---
>         (s->tPos);
(86.9 %, 26798 bytes)
621c621
<         GET_LL(s->tPos);
---
>         (s->tPos);
621c621
<         GET_LL(s->tPos);
---
>         s->tPos);
621c621
<         GET_LL(s->tPos);
---
>         (->tPos);
(86.9 %, 26792 bytes)
621c621
<         (s->tPos);
---
>         s->tPos);
621c621
<         (s->tPos);
---
>         ->tPos);
621c621
<         (s->tPos);
---
>         stPos);
(86.9 %, 26791 bytes)
621c621
<         s->tPos);
---
>         ->tPos);
621c621
<         s->tPos);
---
>         tPos);
(86.9 %, 26790 bytes)
621c621
<         ->tPos);
---
>         tPos);
621c621
<         ->tPos);
---
>         );
(86.9 %, 26788 bytes)
621c621
<         tPos);
---
>         );
621c621
<         tPos);
---
>         ;
(86.9 %, 26784 bytes)
621c621
<         );
---
>         ;
621c621
<         );
---
>         
(86.9 %, 26783 bytes)
621c621
<         ;
---
>         
621c621
<         ;
---
>         
628c628
< void  
---
>   
621c621
<         ;
---
>         
629c629
< BZ2_decompress ( DState* );
---
>  ( DState* );
621c621
<         ;
---
>         
628,629c628,629
< void  
< BZ2_decompress ( DState* );
---
>   
>  ( DState* );
621c621
<         ;
---
>         
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress  DState* );
621c621
<         ;
---
>         
628,629c628,629
< void  
< BZ2_decompress ( DState* );
---
>   
> BZ2_decompress  DState* );
621c621
<         ;
---
>         
629c629
< BZ2_decompress ( DState* );
---
>   DState* );
621c621
<         ;
---
>         
628,629c628,629
< void  
< BZ2_decompress ( DState* );
---
>   
>   DState* );
628c628
< void  
---
>   
628,629c628,629
< void  
< BZ2_decompress ( DState* );
---
>   
>  ( DState* );
628,629c628,629
< void  
< BZ2_decompress ( DState* );
---
>   
> BZ2_decompress  DState* );
628,629c628,629
< void  
< BZ2_decompress ( DState* );
---
>   
>   DState* );
628,629c628,629
< void  
< BZ2_decompress ( DState* );
---
>   
> BZ2_decompress ( * );
628,629c628,629
< void  
< BZ2_decompress ( DState* );
---
>   
>  ( * );
628,629c628,629
< void  
< BZ2_decompress ( DState* );
---
>   
> BZ2_decompress  * );
628,629c628,629
< void  
< BZ2_decompress ( DState* );
---
>   
>   * );
629c629
< BZ2_decompress ( DState* );
---
>  ( DState* );
629c629
< BZ2_decompress ( DState* );
---
>   DState* );
(86.9 %, 26782 bytes)
628c628
< void  
---
>   
628,629c628,629
< void  
< BZ2_decompress ( DState* );
---
>   
>  ( DState* );
628,629c628,629
< void  
< BZ2_decompress ( DState* );
---
>   
> BZ2_decompress  DState* );
628,629c628,629
< void  
< BZ2_decompress ( DState* );
---
>   
>   DState* );
628,629c628,629
< void  
< BZ2_decompress ( DState* );
---
>   
> BZ2_decompress ( * );
628,629c628,629
< void  
< BZ2_decompress ( DState* );
---
>   
>  ( * );
628,629c628,629
< void  
< BZ2_decompress ( DState* );
---
>   
> BZ2_decompress  * );
628,629c628,629
< void  
< BZ2_decompress ( DState* );
---
>   
>   * );
629c629
< BZ2_decompress ( DState* );
---
>  ( DState* );
629c629
< BZ2_decompress ( DState* );
---
>   DState* );
629c629
< BZ2_decompress ( DState* );
---
>  ( * );
629c629
< BZ2_decompress ( DState* );
---
>   * );
629c629
< BZ2_decompress ( DState* );
---
>  ( DState );
629c629
< BZ2_decompress ( DState* );
---
>   DState );
629c629
< BZ2_decompress ( DState* );
---
>  (  );
629c629
< BZ2_decompress ( DState* );
---
>    );
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress  DState* );
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress  * );
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress  DState );
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress   );
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress  DState* ;
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress  * ;
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress  DState ;
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress   ;
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress ( * );
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress (  );
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress ( * ;
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress (  ;
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress ( * )
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress (  )
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress ( * 
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress (  
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress ( DState );
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress ( DState ;
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress ( DState )
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress ( DState 
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress ( DState );
658c658
< #define fswap(zz1, zz2) \
---
> define fswap(zz1, zz2) \
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress ( DState ;
658c658
< #define fswap(zz1, zz2) \
---
> define fswap(zz1, zz2) \
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress ( DState )
658c658
< #define fswap(zz1, zz2) \
---
> define fswap(zz1, zz2) \
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress ( DState 
658c658
< #define fswap(zz1, zz2) \
---
> define fswap(zz1, zz2) \
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress ( DState* ;
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress ( DState* 
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress ( DState* ;
658c658
< #define fswap(zz1, zz2) \
---
> define fswap(zz1, zz2) \
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress ( DState* 
658c658
< #define fswap(zz1, zz2) \
---
> define fswap(zz1, zz2) \
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress ( DState* ;
658c658
< #define fswap(zz1, zz2) \
---
> # fswap(zz1, zz2) \
(86.9 %, 26775 bytes)
629c629
< BZ2_decompress (  );
---
> BZ2_decompress (  
629c629
< BZ2_decompress (  );
---
> BZ2_decompress (  ;
658c658
< #define fswap(zz1, zz2) \
---
> define fswap(zz1, zz2) \
629c629
< BZ2_decompress (  );
---
> BZ2_decompress (  
658c658
< #define fswap(zz1, zz2) \
---
> define fswap(zz1, zz2) \
629c629
< BZ2_decompress (  );
---
> BZ2_decompress (  ;
658c658
< #define fswap(zz1, zz2) \
---
> # fswap(zz1, zz2) \
629c629
< BZ2_decompress (  );
---
> BZ2_decompress (  
658c658
< #define fswap(zz1, zz2) \
---
> # fswap(zz1, zz2) \
629c629
< BZ2_decompress (  );
---
> BZ2_decompress (  ;
658c658
< #define fswap(zz1, zz2) \
---
>  fswap(zz1, zz2) \
629c629
< BZ2_decompress (  );
---
> BZ2_decompress (  
658c658
< #define fswap(zz1, zz2) \
---
>  fswap(zz1, zz2) \
629c629
< BZ2_decompress (  );
---
> BZ2_decompress (  )
629c629
< BZ2_decompress (  );
---
> BZ2_decompress (  )
658c658
< #define fswap(zz1, zz2) \
---
> define fswap(zz1, zz2) \
629c629
< BZ2_decompress (  );
---
> BZ2_decompress (  )
658c658
< #define fswap(zz1, zz2) \
---
> # fswap(zz1, zz2) \
629c629
< BZ2_decompress (  );
---
> BZ2_decompress (  )
658c658
< #define fswap(zz1, zz2) \
---
>  fswap(zz1, zz2) \
629c629
< BZ2_decompress (  );
---
> BZ2_decompress (  )
658c658
< #define fswap(zz1, zz2) \
---
> #define (zz1, zz2) \
629c629
< BZ2_decompress (  );
---
> BZ2_decompress (  )
658c658
< #define fswap(zz1, zz2) \
---
> define (zz1, zz2) \
629c629
< BZ2_decompress (  );
---
> BZ2_decompress (  )
658c658
< #define fswap(zz1, zz2) \
---
> # (zz1, zz2) \
629c629
< BZ2_decompress (  );
---
> BZ2_decompress (  )
658c658
< #define fswap(zz1, zz2) \
---
>  (zz1, zz2) \
658c658
< #define fswap(zz1, zz2) \
---
> define fswap(zz1, zz2) \
658c658
< #define fswap(zz1, zz2) \
---
>  fswap(zz1, zz2) \
658c658
< #define fswap(zz1, zz2) \
---
> define (zz1, zz2) \
658c658
< #define fswap(zz1, zz2) \
---
>  (zz1, zz2) \
658c658
< #define fswap(zz1, zz2) \
---
> define fswapzz1, zz2) \
658c658
< #define fswap(zz1, zz2) \
---
>  fswapzz1, zz2) \
658c658
< #define fswap(zz1, zz2) \
---
> define zz1, zz2) \
658c658
< #define fswap(zz1, zz2) \
---
>  zz1, zz2) \
658c658
< #define fswap(zz1, zz2) \
---
> # fswap(zz1, zz2) \
658c658
< #define fswap(zz1, zz2) \
---
> # (zz1, zz2) \
658c658
< #define fswap(zz1, zz2) \
---
> # fswapzz1, zz2) \
658c658
< #define fswap(zz1, zz2) \
---
> # zz1, zz2) \
658c658
< #define fswap(zz1, zz2) \
---
> # fswap(, zz2) \
658c658
< #define fswap(zz1, zz2) \
---
> # (, zz2) \
658c658
< #define fswap(zz1, zz2) \
---
> # fswap, zz2) \
658c658
< #define fswap(zz1, zz2) \
---
> # , zz2) \
658c658
< #define fswap(zz1, zz2) \
---
> #define (zz1, zz2) \
658c658
< #define fswap(zz1, zz2) \
---
> #define zz1, zz2) \
658c658
< #define fswap(zz1, zz2) \
---
> #define (, zz2) \
658c658
< #define fswap(zz1, zz2) \
---
> #define , zz2) \
658c658
< #define fswap(zz1, zz2) \
---
> #define (zz1 zz2) \
658c658
< #define fswap(zz1, zz2) \
---
> #define zz1 zz2) \
(86.9 %, 26769 bytes)
658c658
< #define zz1, zz2) \
---
> #define  zz2) \
658c658
< #define zz1, zz2) \
---
> #define , ) \
658c658
< #define zz1, zz2) \
---
> #define  ) \
658c658
< #define zz1, zz2) \
---
> #define , zz2 \
658c658
< #define zz1, zz2) \
---
> #define  zz2 \
(86.9 %, 26765 bytes)
658c658
< #define  zz2) \
---
> #define   \
658c658
< #define  zz2) \
---
> #define  ) 
658c658
< #define  zz2) \
---
> #define   
658c658
< #define  zz2) \
---
> #define  ) \
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> define fvswap(zzp1, zzp2, zzn)       \
658c658
< #define  zz2) \
---
> #define   \
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> define fvswap(zzp1, zzp2, zzn)       \
658c658
< #define  zz2) \
---
> #define  ) 
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> define fvswap(zzp1, zzp2, zzn)       \
658c658
< #define  zz2) \
---
> #define   
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> define fvswap(zzp1, zzp2, zzn)       \
658c658
< #define  zz2) \
---
> #define  zz2 \
658c658
< #define  zz2) \
---
> #define  zz2 
(86.9 %, 26764 bytes)
658c658
< #define  zz2 \
---
> #define  zz2 
658c658
< #define  zz2 \
---
> #define  zz2 
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> define fvswap(zzp1, zzp2, zzn)       \
658c658
< #define  zz2 \
---
> #define  zz2 
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> # fvswap(zzp1, zzp2, zzn)       \
658c658
< #define  zz2 \
---
> #define  zz2 
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
>  fvswap(zzp1, zzp2, zzn)       \
658c658
< #define  zz2 \
---
> #define  zz2 
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> #define (zzp1, zzp2, zzn)       \
658c658
< #define  zz2 \
---
> #define  zz2 
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> define (zzp1, zzp2, zzn)       \
658c658
< #define  zz2 \
---
> #define  zz2 
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> # (zzp1, zzp2, zzn)       \
658c658
< #define  zz2 \
---
> #define  zz2 
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
>  (zzp1, zzp2, zzn)       \
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> define fvswap(zzp1, zzp2, zzn)       \
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
>  fvswap(zzp1, zzp2, zzn)       \
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> define (zzp1, zzp2, zzn)       \
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
>  (zzp1, zzp2, zzn)       \
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> define fvswapzzp1, zzp2, zzn)       \
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
>  fvswapzzp1, zzp2, zzn)       \
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> define zzp1, zzp2, zzn)       \
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
>  zzp1, zzp2, zzn)       \
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> # fvswap(zzp1, zzp2, zzn)       \
(86.9 %, 26763 bytes)
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> define fvswap(zzp1, zzp2, zzn)       \
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
>  fvswap(zzp1, zzp2, zzn)       \
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> define (zzp1, zzp2, zzn)       \
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
>  (zzp1, zzp2, zzn)       \
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> define fvswapzzp1, zzp2, zzn)       \
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
>  fvswapzzp1, zzp2, zzn)       \
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> define zzp1, zzp2, zzn)       \
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
>  zzp1, zzp2, zzn)       \
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> # fvswap(zzp1, zzp2, zzn)       \
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> # (zzp1, zzp2, zzn)       \
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> # fvswapzzp1, zzp2, zzn)       \
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> # zzp1, zzp2, zzn)       \
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> # fvswap(, zzp2, zzn)       \
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> # (, zzp2, zzn)       \
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> # fvswap, zzp2, zzn)       \
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> # , zzp2, zzn)       \
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> #define (zzp1, zzp2, zzn)       \
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> #define zzp1, zzp2, zzn)       \
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> #define (, zzp2, zzn)       \
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> #define , zzp2, zzn)       \
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> #define (zzp1 zzp2, zzn)       \
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> #define zzp1 zzp2, zzn)       \
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> #define ( zzp2, zzn)       \
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> #define  zzp2, zzn)       \
(86.9 %, 26756 bytes)
661c661
< #define zzp1, zzp2, zzn)       \
---
> #define  zzp2, zzn)       \
661c661
< #define zzp1, zzp2, zzn)       \
---
> #define , , zzn)       \
661c661
< #define zzp1, zzp2, zzn)       \
---
> #define  , zzn)       \
661c661
< #define zzp1, zzp2, zzn)       \
---
> #define , zzp2 zzn)       \
661c661
< #define zzp1, zzp2, zzn)       \
---
> #define  zzp2 zzn)       \
(86.9 %, 26751 bytes)
661c661
< #define  zzp2, zzn)       \
---
> #define   zzn)       \
661c661
< #define  zzp2, zzn)       \
---
> #define  , )       \
661c661
< #define  zzp2, zzn)       \
---
> #define   )       \
661c661
< #define  zzp2, zzn)       \
---
> #define  , zzn       \
661c661
< #define  zzp2, zzn)       \
---
> #define   zzn       \
(86.9 %, 26746 bytes)
661c661
< #define   zzn)       \
---
> #define          \
661c661
< #define   zzn)       \
---
> #define   )       
661c661
< #define   zzn)       \
---
> #define          
661c661
< #define   zzn)       \
---
> #define   )       \
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> define fmin(a,b) ((a) < (b)) ? (a) : (b)
661c661
< #define   zzn)       \
---
> #define          \
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> define fmin(a,b) ((a) < (b)) ? (a) : (b)
661c661
< #define   zzn)       \
---
> #define   )       
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> define fmin(a,b) ((a) < (b)) ? (a) : (b)
661c661
< #define   zzn)       \
---
> #define          
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> define fmin(a,b) ((a) < (b)) ? (a) : (b)
661c661
< #define   zzn)       \
---
> #define   zzn       \
661c661
< #define   zzn)       \
---
> #define   zzn       
(86.9 %, 26745 bytes)
661c661
< #define   zzn       \
---
> #define   zzn       
661c661
< #define   zzn       \
---
> #define   zzn       
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> define fmin(a,b) ((a) < (b)) ? (a) : (b)
661c661
< #define   zzn       \
---
> #define   zzn       
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> # fmin(a,b) ((a) < (b)) ? (a) : (b)
661c661
< #define   zzn       \
---
> #define   zzn       
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
>  fmin(a,b) ((a) < (b)) ? (a) : (b)
661c661
< #define   zzn       \
---
> #define   zzn       
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define (a,b) ((a) < (b)) ? (a) : (b)
661c661
< #define   zzn       \
---
> #define   zzn       
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> define (a,b) ((a) < (b)) ? (a) : (b)
661c661
< #define   zzn       \
---
> #define   zzn       
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> # (a,b) ((a) < (b)) ? (a) : (b)
661c661
< #define   zzn       \
---
> #define   zzn       
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
>  (a,b) ((a) < (b)) ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> define fmin(a,b) ((a) < (b)) ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
>  fmin(a,b) ((a) < (b)) ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> define (a,b) ((a) < (b)) ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
>  (a,b) ((a) < (b)) ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> define fmina,b) ((a) < (b)) ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
>  fmina,b) ((a) < (b)) ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> define a,b) ((a) < (b)) ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
>  a,b) ((a) < (b)) ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> # fmin(a,b) ((a) < (b)) ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> # (a,b) ((a) < (b)) ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> # fmina,b) ((a) < (b)) ? (a) : (b)
(87.0 %, 26744 bytes)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> define fmin(a,b) ((a) < (b)) ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
>  fmin(a,b) ((a) < (b)) ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> define (a,b) ((a) < (b)) ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
>  (a,b) ((a) < (b)) ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> define fmina,b) ((a) < (b)) ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
>  fmina,b) ((a) < (b)) ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> define a,b) ((a) < (b)) ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
>  a,b) ((a) < (b)) ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> # fmin(a,b) ((a) < (b)) ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> # (a,b) ((a) < (b)) ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> # fmina,b) ((a) < (b)) ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> # a,b) ((a) < (b)) ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> # fmin(,b) ((a) < (b)) ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> # (,b) ((a) < (b)) ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> # fmin,b) ((a) < (b)) ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> # ,b) ((a) < (b)) ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define (a,b) ((a) < (b)) ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define a,b) ((a) < (b)) ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define (,b) ((a) < (b)) ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define ,b) ((a) < (b)) ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define (ab) ((a) < (b)) ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define ab) ((a) < (b)) ? (a) : (b)
(87.0 %, 26739 bytes)
665c665
< #define a,b) ((a) < (b)) ? (a) : (b)
---
> #define b) ((a) < (b)) ? (a) : (b)
665c665
< #define a,b) ((a) < (b)) ? (a) : (b)
---
> #define ,) ((a) < (b)) ? (a) : (b)
665c665
< #define a,b) ((a) < (b)) ? (a) : (b)
---
> #define ) ((a) < (b)) ? (a) : (b)
665c665
< #define a,b) ((a) < (b)) ? (a) : (b)
---
> #define ,b ((a) < (b)) ? (a) : (b)
665c665
< #define a,b) ((a) < (b)) ? (a) : (b)
---
> #define b ((a) < (b)) ? (a) : (b)
665c665
< #define a,b) ((a) < (b)) ? (a) : (b)
---
> #define , ((a) < (b)) ? (a) : (b)
665c665
< #define a,b) ((a) < (b)) ? (a) : (b)
---
> #define  ((a) < (b)) ? (a) : (b)
665c665
< #define a,b) ((a) < (b)) ? (a) : (b)
---
> #define ab) ((a) < (b)) ? (a) : (b)
665c665
< #define a,b) ((a) < (b)) ? (a) : (b)
---
> #define a) ((a) < (b)) ? (a) : (b)
665c665
< #define a,b) ((a) < (b)) ? (a) : (b)
---
> #define ab ((a) < (b)) ? (a) : (b)
(87.0 %, 26738 bytes)
665c665
< #define ab) ((a) < (b)) ? (a) : (b)
---
> #define ab ((a) < (b)) ? (a) : (b)
665c665
< #define ab) ((a) < (b)) ? (a) : (b)
---
> #define ab (a) < (b)) ? (a) : (b)
(87.0 %, 26737 bytes)
665c665
< #define ab ((a) < (b)) ? (a) : (b)
---
> #define ab (a) < (b)) ? (a) : (b)
665c665
< #define ab ((a) < (b)) ? (a) : (b)
---
> #define ab a) < (b)) ? (a) : (b)
(87.0 %, 26736 bytes)
665c665
< #define ab (a) < (b)) ? (a) : (b)
---
> #define ab a) < (b)) ? (a) : (b)
665c665
< #define ab (a) < (b)) ? (a) : (b)
---
> #define ab ) < (b)) ? (a) : (b)
(87.0 %, 26735 bytes)
665c665
< #define ab a) < (b)) ? (a) : (b)
---
> #define ab ) < (b)) ? (a) : (b)
665c665
< #define ab a) < (b)) ? (a) : (b)
---
> #define ab  < (b)) ? (a) : (b)
665c665
< #define ab a) < (b)) ? (a) : (b)
---
> #define ab )  (b)) ? (a) : (b)
(87.0 %, 26734 bytes)
665c665
< #define ab ) < (b)) ? (a) : (b)
---
> #define ab  < (b)) ? (a) : (b)
665c665
< #define ab ) < (b)) ? (a) : (b)
---
> #define ab   (b)) ? (a) : (b)
665c665
< #define ab ) < (b)) ? (a) : (b)
---
> #define ab  < b)) ? (a) : (b)
(87.0 %, 26733 bytes)
665c665
< #define ab  < (b)) ? (a) : (b)
---
> #define ab   (b)) ? (a) : (b)
665c665
< #define ab  < (b)) ? (a) : (b)
---
> #define ab   b)) ? (a) : (b)
(87.0 %, 26732 bytes)
665c665
< #define ab   (b)) ? (a) : (b)
---
> #define ab   b)) ? (a) : (b)
665c665
< #define ab   (b)) ? (a) : (b)
---
> #define ab   )) ? (a) : (b)
665c665
< #define ab   (b)) ? (a) : (b)
---
> #define ab   b) ? (a) : (b)
(87.0 %, 26731 bytes)
665c665
< #define ab   b)) ? (a) : (b)
---
> #define ab   )) ? (a) : (b)
665c665
< #define ab   b)) ? (a) : (b)
---
> #define ab   ) ? (a) : (b)
665c665
< #define ab   b)) ? (a) : (b)
---
> #define ab   ) ? (a) : (b)
(87.0 %, 26730 bytes)
665c665
< #define ab   )) ? (a) : (b)
---
> #define ab   ) ? (a) : (b)
665c665
< #define ab   )) ? (a) : (b)
---
> #define ab    ? (a) : (b)
(87.0 %, 26729 bytes)
665c665
< #define ab   ) ? (a) : (b)
---
> #define ab    ? (a) : (b)
665c665
< #define ab   ) ? (a) : (b)
---
> #define ab     (a) : (b)
(87.0 %, 26728 bytes)
665c665
< #define ab    ? (a) : (b)
---
> #define ab     (a) : (b)
665c665
< #define ab    ? (a) : (b)
---
> #define ab     a) : (b)
(87.0 %, 26727 bytes)
665c665
< #define ab     (a) : (b)
---
> #define ab     a) : (b)
665c665
< #define ab     (a) : (b)
---
> #define ab     ) : (b)
665c665
< #define ab     (a) : (b)
---
> #define ab     a : (b)
(87.0 %, 26726 bytes)
665c665
< #define ab     a) : (b)
---
> #define ab     ) : (b)
665c665
< #define ab     a) : (b)
---
> #define ab      : (b)
665c665
< #define ab     a) : (b)
---
> #define ab     )  (b)
(87.0 %, 26725 bytes)
665c665
< #define ab     ) : (b)
---
> #define ab      : (b)
665c665
< #define ab     ) : (b)
---
> #define ab       (b)
(87.0 %, 26724 bytes)
665c665
< #define ab      : (b)
---
> #define ab       (b)
665c665
< #define ab      : (b)
---
> #define ab       b)
665c665
< #define ab      : (b)
---
> #define ab       ()
(87.0 %, 26723 bytes)
665c665
< #define ab       (b)
---
> #define ab       b)
665c665
< #define ab       (b)
---
> #define ab       )
665c665
< #define ab       (b)
---
> #define ab       b
(87.0 %, 26722 bytes)
665c665
< #define ab       b)
---
> #define ab       )
665c665
< #define ab       b)
---
> #define ab       
(87.0 %, 26721 bytes)
665c665
< #define ab       )
---
> #define ab       
665c665
< #define ab       )
---
> #define ab       
667c667
< #define fpush(lz,hz) 
---
> define fpush(lz,hz) 
665c665
< #define ab       )
---
> #define ab       
667c667
< #define fpush(lz,hz) 
---
> # fpush(lz,hz) 
665c665
< #define ab       )
---
> #define ab       
667c667
< #define fpush(lz,hz) 
---
>  fpush(lz,hz) 
665c665
< #define ab       )
---
> #define ab       
667c667
< #define fpush(lz,hz) 
---
> #define (lz,hz) 
665c665
< #define ab       )
---
> #define ab       
667c667
< #define fpush(lz,hz) 
---
> define (lz,hz) 
665c665
< #define ab       )
---
> #define ab       
667c667
< #define fpush(lz,hz) 
---
> # (lz,hz) 
665c665
< #define ab       )
---
> #define ab       
667c667
< #define fpush(lz,hz) 
---
>  (lz,hz) 
667c667
< #define fpush(lz,hz) 
---
> define fpush(lz,hz) 
667c667
< #define fpush(lz,hz) 
---
>  fpush(lz,hz) 
667c667
< #define fpush(lz,hz) 
---
> define (lz,hz) 
667c667
< #define fpush(lz,hz) 
---
>  (lz,hz) 
667c667
< #define fpush(lz,hz) 
---
> define fpushlz,hz) 
667c667
< #define fpush(lz,hz) 
---
>  fpushlz,hz) 
667c667
< #define fpush(lz,hz) 
---
> define lz,hz) 
667c667
< #define fpush(lz,hz) 
---
>  lz,hz) 
667c667
< #define fpush(lz,hz) 
---
> # fpush(lz,hz) 
667c667
< #define fpush(lz,hz) 
---
> # (lz,hz) 
(87.0 %, 26720 bytes)
667c667
< #define fpush(lz,hz) 
---
> define fpush(lz,hz) 
667c667
< #define fpush(lz,hz) 
---
>  fpush(lz,hz) 
667c667
< #define fpush(lz,hz) 
---
> define (lz,hz) 
667c667
< #define fpush(lz,hz) 
---
>  (lz,hz) 
667c667
< #define fpush(lz,hz) 
---
> define fpushlz,hz) 
667c667
< #define fpush(lz,hz) 
---
>  fpushlz,hz) 
667c667
< #define fpush(lz,hz) 
---
> define lz,hz) 
667c667
< #define fpush(lz,hz) 
---
>  lz,hz) 
667c667
< #define fpush(lz,hz) 
---
> # fpush(lz,hz) 
667c667
< #define fpush(lz,hz) 
---
> # (lz,hz) 
667c667
< #define fpush(lz,hz) 
---
> # fpushlz,hz) 
667c667
< #define fpush(lz,hz) 
---
> # lz,hz) 
667c667
< #define fpush(lz,hz) 
---
> # fpush(,hz) 
667c667
< #define fpush(lz,hz) 
---
> # (,hz) 
667c667
< #define fpush(lz,hz) 
---
> # fpush,hz) 
667c667
< #define fpush(lz,hz) 
---
> # ,hz) 
667c667
< #define fpush(lz,hz) 
---
> #define (lz,hz) 
667c667
< #define fpush(lz,hz) 
---
> #define lz,hz) 
667c667
< #define fpush(lz,hz) 
---
> #define (,hz) 
667c667
< #define fpush(lz,hz) 
---
> #define ,hz) 
667c667
< #define fpush(lz,hz) 
---
> #define (lzhz) 
667c667
< #define fpush(lz,hz) 
---
> #define lzhz) 
(87.0 %, 26714 bytes)
667c667
< #define lz,hz) 
---
> #define hz) 
667c667
< #define lz,hz) 
---
> #define ,) 
667c667
< #define lz,hz) 
---
> #define ) 
667c667
< #define lz,hz) 
---
> #define ,hz 
667c667
< #define lz,hz) 
---
> #define hz 
(87.0 %, 26711 bytes)
667c667
< #define hz) 
---
> #define  
667c667
< #define hz) 
---
> #define ) 
669c669
< #define fpop(lz,hz) 
---
> define fpop(lz,hz) 
667c667
< #define hz) 
---
> #define  
669c669
< #define fpop(lz,hz) 
---
> define fpop(lz,hz) 
667c667
< #define hz) 
---
> #define ) 
669c669
< #define fpop(lz,hz) 
---
> # fpop(lz,hz) 
667c667
< #define hz) 
---
> #define  
669c669
< #define fpop(lz,hz) 
---
> # fpop(lz,hz) 
667c667
< #define hz) 
---
> #define ) 
669c669
< #define fpop(lz,hz) 
---
>  fpop(lz,hz) 
667c667
< #define hz) 
---
> #define  
669c669
< #define fpop(lz,hz) 
---
>  fpop(lz,hz) 
667c667
< #define hz) 
---
> #define hz 
667c667
< #define hz) 
---
> #define hz 
669c669
< #define fpop(lz,hz) 
---
> define fpop(lz,hz) 
667c667
< #define hz) 
---
> #define hz 
669c669
< #define fpop(lz,hz) 
---
> # fpop(lz,hz) 
667c667
< #define hz) 
---
> #define hz 
669c669
< #define fpop(lz,hz) 
---
>  fpop(lz,hz) 
667c667
< #define hz) 
---
> #define hz 
669c669
< #define fpop(lz,hz) 
---
> #define (lz,hz) 
667c667
< #define hz) 
---
> #define hz 
669c669
< #define fpop(lz,hz) 
---
> define (lz,hz) 
667c667
< #define hz) 
---
> #define hz 
669c669
< #define fpop(lz,hz) 
---
> # (lz,hz) 
667c667
< #define hz) 
---
> #define hz 
669c669
< #define fpop(lz,hz) 
---
>  (lz,hz) 
669c669
< #define fpop(lz,hz) 
---
> define fpop(lz,hz) 
669c669
< #define fpop(lz,hz) 
---
>  fpop(lz,hz) 
669c669
< #define fpop(lz,hz) 
---
> define (lz,hz) 
669c669
< #define fpop(lz,hz) 
---
>  (lz,hz) 
669c669
< #define fpop(lz,hz) 
---
> define fpoplz,hz) 
669c669
< #define fpop(lz,hz) 
---
>  fpoplz,hz) 
669c669
< #define fpop(lz,hz) 
---
> define lz,hz) 
(87.0 %, 26710 bytes)
669c669
< #define fpop(lz,hz) 
---
> define fpop(lz,hz) 
669c669
< #define fpop(lz,hz) 
---
>  fpop(lz,hz) 
669c669
< #define fpop(lz,hz) 
---
> define (lz,hz) 
669c669
< #define fpop(lz,hz) 
---
>  (lz,hz) 
669c669
< #define fpop(lz,hz) 
---
> define fpoplz,hz) 
669c669
< #define fpop(lz,hz) 
---
>  fpoplz,hz) 
669c669
< #define fpop(lz,hz) 
---
> define lz,hz) 
669c669
< #define fpop(lz,hz) 
---
>  lz,hz) 
669c669
< #define fpop(lz,hz) 
---
> # fpop(lz,hz) 
669c669
< #define fpop(lz,hz) 
---
> # (lz,hz) 
669c669
< #define fpop(lz,hz) 
---
> # fpoplz,hz) 
669c669
< #define fpop(lz,hz) 
---
> # lz,hz) 
669c669
< #define fpop(lz,hz) 
---
> # fpop(,hz) 
669c669
< #define fpop(lz,hz) 
---
> # (,hz) 
669c669
< #define fpop(lz,hz) 
---
> # fpop,hz) 
669c669
< #define fpop(lz,hz) 
---
> # ,hz) 
669c669
< #define fpop(lz,hz) 
---
> #define (lz,hz) 
669c669
< #define fpop(lz,hz) 
---
> #define lz,hz) 
669c669
< #define fpop(lz,hz) 
---
> #define (,hz) 
669c669
< #define fpop(lz,hz) 
---
> #define ,hz) 
669c669
< #define fpop(lz,hz) 
---
> #define (lzhz) 
669c669
< #define fpop(lz,hz) 
---
> #define lzhz) 
(87.0 %, 26705 bytes)
669c669
< #define lz,hz) 
---
> #define hz) 
669c669
< #define lz,hz) 
---
> #define ,) 
669c669
< #define lz,hz) 
---
> #define ) 
669c669
< #define lz,hz) 
---
> #define ,hz 
669c669
< #define lz,hz) 
---
> #define hz 
669c669
< #define lz,hz) 
---
> #define , 
(87.0 %, 26702 bytes)
669c669
< #define hz) 
---
> #define  
669c669
< #define hz) 
---
> #define ) 
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 0
---
> define FALLBACK_QSORT_SMALL_THRESH 0
669c669
< #define hz) 
---
> #define  
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 0
---
> define FALLBACK_QSORT_SMALL_THRESH 0
669c669
< #define hz) 
---
> #define ) 
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 0
---
> # FALLBACK_QSORT_SMALL_THRESH 0
669c669
< #define hz) 
---
> #define  
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 0
---
> # FALLBACK_QSORT_SMALL_THRESH 0
669c669
< #define hz) 
---
> #define ) 
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 0
---
>  FALLBACK_QSORT_SMALL_THRESH 0
669c669
< #define hz) 
---
> #define  
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 0
---
>  FALLBACK_QSORT_SMALL_THRESH 0
669c669
< #define hz) 
---
> #define hz 
669c669
< #define hz) 
---
> #define hz 
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 0
---
> define FALLBACK_QSORT_SMALL_THRESH 0
669c669
< #define hz) 
---
> #define hz 
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 0
---
> # FALLBACK_QSORT_SMALL_THRESH 0
669c669
< #define hz) 
---
> #define hz 
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 0
---
>  FALLBACK_QSORT_SMALL_THRESH 0
669c669
< #define hz) 
---
> #define hz 
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 0
---
> #define  0
669c669
< #define hz) 
---
> #define hz 
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 0
---
> define  0
669c669
< #define hz) 
---
> #define hz 
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 0
---
> #  0
(87.0 %, 26701 bytes)
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 0
---
> define FALLBACK_QSORT_SMALL_THRESH 0
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 0
---
>  FALLBACK_QSORT_SMALL_THRESH 0
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 0
---
> define  0
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 0
---
>   0
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 0
---
> define FALLBACK_QSORT_SMALL_THRESH 
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 0
---
>  FALLBACK_QSORT_SMALL_THRESH 
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 0
---
> define  
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 0
---
>   
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 0
---
> # FALLBACK_QSORT_SMALL_THRESH 0
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 0
---
> #  0
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 0
---
> # FALLBACK_QSORT_SMALL_THRESH 
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 0
---
> #  
(87.0 %, 26666 bytes)
672c672
< #define FALLBACK_QSORT_STACK_SIZE   0
---
>     
672c672
< #define FALLBACK_QSORT_STACK_SIZE   0
---
> # FALLBACK_QSORT_STACK_SIZE   0
672c672
< #define FALLBACK_QSORT_STACK_SIZE   0
---
> #    0
(87.0 %, 26633 bytes)
677,678c677,678
< #undef fmin
< #undef fpush
---
>  
> undef fpush
677c677
< #undef fmin
---
> # fmin
677c677
< #undef fmin
---
> # 
677,678c677,678
< #undef fmin
< #undef fpush
---
> # fmin
> undef fpush
677,678c677,678
< #undef fmin
< #undef fpush
---
> # 
> undef fpush
677,678c677,678
< #undef fmin
< #undef fpush
---
> # fmin
> # fpush
677,678c677,678
< #undef fmin
< #undef fpush
---
> # 
> # fpush
677,678c677,678
< #undef fmin
< #undef fpush
---
> # fmin
>  fpush
677,678c677,678
< #undef fmin
< #undef fpush
---
> # 
>  fpush
677c677
< #undef fmin
---
> #undef 
677,678c677,678
< #undef fmin
< #undef fpush
---
> #undef 
> undef fpush
677,678c677,678
< #undef fmin
< #undef fpush
---
> #undef 
> # fpush
677,678c677,678
< #undef fmin
< #undef fpush
---
> #undef 
>  fpush
677,678c677,678
< #undef fmin
< #undef fpush
---
> #undef 
> #undef 
677,678c677,678
< #undef fmin
< #undef fpush
---
> #undef 
> undef 
677,678c677,678
< #undef fmin
< #undef fpush
---
> #undef 
> # 
677,678c677,678
< #undef fmin
< #undef fpush
---
> #undef 
>  
678c678
< #undef fpush
---
> undef fpush
678c678
< #undef fpush
---
>  fpush
678c678
< #undef fpush
---
> undef 
(87.0 %, 26624 bytes)
678c678
< #undef fpush
---
>  fpush
678c678
< #undef fpush
---
> undef 
678c678
< #undef fpush
---
>  
678,679c678,679
< #undef fpush
< #undef fpop
---
> undef fpush
> undef fpop
678,679c678,679
< #undef fpush
< #undef fpop
---
>  fpush
> undef fpop
678,679c678,679
< #undef fpush
< #undef fpop
---
> undef 
> undef fpop
678,679c678,679
< #undef fpush
< #undef fpop
---
>  
> undef fpop
678c678
< #undef fpush
---
> # fpush
678c678
< #undef fpush
---
> # 
(87.0 %, 26613 bytes)
679c679
< #undef fpop
---
>  
679,680c679,680
< #undef fpop
< #undef fswap
---
> undef fpop
> undef fswap
679,680c679,680
< #undef fpop
< #undef fswap
---
>  fpop
> undef fswap
679,680c679,680
< #undef fpop
< #undef fswap
---
> undef 
> undef fswap
679,680c679,680
< #undef fpop
< #undef fswap
---
>  
> undef fswap
679c679
< #undef fpop
---
> # fpop
679c679
< #undef fpop
---
> # 
(87.0 %, 26603 bytes)
680c680
< #undef fswap
---
>  
680,681c680,681
< #undef fswap
< #undef fvswap
---
> undef fswap
> undef fvswap
680,681c680,681
< #undef fswap
< #undef fvswap
---
>  fswap
> undef fvswap
680,681c680,681
< #undef fswap
< #undef fvswap
---
> undef 
> undef fvswap
680,681c680,681
< #undef fswap
< #undef fvswap
---
>  
> undef fvswap
680c680
< #undef fswap
---
> # fswap
680c680
< #undef fswap
---
> # 
(87.0 %, 26592 bytes)
681c681
< #undef fvswap
---
>  
681,682c681,682
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
---
> undef fvswap
> undef FALLBACK_QSORT_SMALL_THRESH
681,682c681,682
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
---
>  fvswap
> undef FALLBACK_QSORT_SMALL_THRESH
681,682c681,682
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
---
> undef 
> undef FALLBACK_QSORT_SMALL_THRESH
681,682c681,682
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
---
>  
> undef FALLBACK_QSORT_SMALL_THRESH
681c681
< #undef fvswap
---
> # fvswap
681c681
< #undef fvswap
---
> # 
(87.0 %, 26580 bytes)
682c682
< #undef FALLBACK_QSORT_SMALL_THRESH
---
>  
682,683c682,683
< #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
---
> undef FALLBACK_QSORT_SMALL_THRESH
> undef FALLBACK_QSORT_STACK_SIZE
682,683c682,683
< #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
---
>  FALLBACK_QSORT_SMALL_THRESH
> undef FALLBACK_QSORT_STACK_SIZE
682,683c682,683
< #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
---
> undef 
> undef FALLBACK_QSORT_STACK_SIZE
682,683c682,683
< #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
---
>  
> undef FALLBACK_QSORT_STACK_SIZE
682c682
< #undef FALLBACK_QSORT_SMALL_THRESH
---
> # FALLBACK_QSORT_SMALL_THRESH
682c682
< #undef FALLBACK_QSORT_SMALL_THRESH
---
> # 
(87.0 %, 26547 bytes)
683c683
< #undef FALLBACK_QSORT_STACK_SIZE
---
>  
683c683
< #undef FALLBACK_QSORT_STACK_SIZE
---
> undef FALLBACK_QSORT_STACK_SIZE
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
> define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
683c683
< #undef FALLBACK_QSORT_STACK_SIZE
---
>  FALLBACK_QSORT_STACK_SIZE
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
> define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
683c683
< #undef FALLBACK_QSORT_STACK_SIZE
---
> undef 
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
> define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
683c683
< #undef FALLBACK_QSORT_STACK_SIZE
---
>  
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
> define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
683c683
< #undef FALLBACK_QSORT_STACK_SIZE
---
> # FALLBACK_QSORT_STACK_SIZE
683c683
< #undef FALLBACK_QSORT_STACK_SIZE
---
> # 
(87.1 %, 26516 bytes)
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
>        (zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
> define       SET_BHzz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
>        SET_BHzz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
> define       zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
>        zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
> #       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
> #       (zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
> #       SET_BHzz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
> #       zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
> #       SET_BH()  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
> #       ()  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
> #       SET_BH)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
> #       )  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
> #define       (zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
> #define       zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
> #define       ()  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
> #define       )  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
> #define       (zz  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
> #define       zz  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
(87.1 %, 26509 bytes)
689c689
< #define       zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
> #define         bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
689c689
< #define       zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
> #define       )  [(zz) >> 5] |= (1 << ((zz) & 1))
689c689
< #define       zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
> #define         [(zz) >> 5] |= (1 << ((zz) & 1))
689c689
< #define       zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
> #define       )  bhtab(zz) >> 5] |= (1 << ((zz) & 1))
689c689
< #define       zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
> #define         bhtab(zz) >> 5] |= (1 << ((zz) & 1))
(87.1 %, 26506 bytes)
689c689
< #define         bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
> #define         (zz) >> 5] |= (1 << ((zz) & 1))
689c689
< #define         bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
> #define         [zz) >> 5] |= (1 << ((zz) & 1))
689c689
< #define         bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
> #define         zz) >> 5] |= (1 << ((zz) & 1))
689c689
< #define         bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
> #define         [() >> 5] |= (1 << ((zz) & 1))
689c689
< #define         bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
> #define         () >> 5] |= (1 << ((zz) & 1))
689c689
< #define         bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
> #define         [) >> 5] |= (1 << ((zz) & 1))
689c689
< #define         bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
> #define         ) >> 5] |= (1 << ((zz) & 1))
689c689
< #define         bhtab[(zz) >> 5] |= (1 << ((zz) & 1))
---
> #define         bhtab(zz) >> 5] |= (1 << ((zz) & 1))
(87.1 %, 26499 bytes)
689c689
< #define         zz) >> 5] |= (1 << ((zz) & 1))
---
> #define           5] |= (1 << ((zz) & 1))
689c689
< #define         zz) >> 5] |= (1 << ((zz) & 1))
---
> #define         ) >> ] |= (1 << ((zz) & 1))
689c689
< #define         zz) >> 5] |= (1 << ((zz) & 1))
---
> #define          >> ] |= (1 << ((zz) & 1))
689c689
< #define         zz) >> 5] |= (1 << ((zz) & 1))
---
> #define         )  ] |= (1 << ((zz) & 1))
689c689
< #define         zz) >> 5] |= (1 << ((zz) & 1))
---
> #define           ] |= (1 << ((zz) & 1))
689c689
< #define         zz) >> 5] |= (1 << ((zz) & 1))
---
> #define         zz >> 5] |= (1 << ((zz) & 1))
689c689
< #define         zz) >> 5] |= (1 << ((zz) & 1))
---
> #define         zz  5] |= (1 << ((zz) & 1))
689c689
< #define         zz) >> 5] |= (1 << ((zz) & 1))
---
> #define         zz >> ] |= (1 << ((zz) & 1))
(87.1 %, 26498 bytes)
689c689
< #define         zz >> 5] |= (1 << ((zz) & 1))
---
> #define         zz  5] |= (1 << ((zz) & 1))
689c689
< #define         zz >> 5] |= (1 << ((zz) & 1))
---
> #define         zz  ] |= (1 << ((zz) & 1))
689c689
< #define         zz >> 5] |= (1 << ((zz) & 1))
---
> #define         zz  5 |= (1 << ((zz) & 1))
(87.1 %, 26496 bytes)
689c689
< #define         zz  5] |= (1 << ((zz) & 1))
---
> #define         zz  ] |= (1 << ((zz) & 1))
689c689
< #define         zz  5] |= (1 << ((zz) & 1))
---
> #define         zz   |= (1 << ((zz) & 1))
689c689
< #define         zz  5] |= (1 << ((zz) & 1))
---
> #define         zz  ]  (1 << ((zz) & 1))
(87.1 %, 26495 bytes)
689c689
< #define         zz  ] |= (1 << ((zz) & 1))
---
> #define         zz   |= (1 << ((zz) & 1))
689c689
< #define         zz  ] |= (1 << ((zz) & 1))
---
> #define         zz    (1 << ((zz) & 1))
689c689
< #define         zz  ] |= (1 << ((zz) & 1))
---
> #define         zz   |= 1 << ((zz) & 1))
(87.1 %, 26494 bytes)
689c689
< #define         zz   |= (1 << ((zz) & 1))
---
> #define         zz    (1 << ((zz) & 1))
689c689
< #define         zz   |= (1 << ((zz) & 1))
---
> #define         zz    1 << ((zz) & 1))
(87.1 %, 26492 bytes)
689c689
< #define         zz    (1 << ((zz) & 1))
---
> #define         zz    1 << ((zz) & 1))
689c689
< #define         zz    (1 << ((zz) & 1))
---
> #define         zz     << ((zz) & 1))
689c689
< #define         zz    (1 << ((zz) & 1))
---
> #define         zz    1  ((zz) & 1))
(87.1 %, 26491 bytes)
689c689
< #define         zz    1 << ((zz) & 1))
---
> #define         zz     << ((zz) & 1))
689c689
< #define         zz    1 << ((zz) & 1))
---
> #define         zz      ((zz) & 1))
(87.1 %, 26490 bytes)
689c689
< #define         zz     << ((zz) & 1))
---
> #define         zz      ((zz) & 1))
689c689
< #define         zz     << ((zz) & 1))
---
> #define         zz      (zz) & 1))
(87.1 %, 26488 bytes)
689c689
< #define         zz      ((zz) & 1))
---
> #define         zz      (zz) & 1))
689c689
< #define         zz      ((zz) & 1))
---
> #define         zz      zz) & 1))
(87.1 %, 26487 bytes)
689c689
< #define         zz      (zz) & 1))
---
> #define         zz      zz) & 1))
689c689
< #define         zz      (zz) & 1))
---
> #define         zz      ) & 1))
(87.1 %, 26486 bytes)
689c689
< #define         zz      zz) & 1))
---
> #define         zz      ) & 1))
689c689
< #define         zz      zz) & 1))
---
> #define         zz       & 1))
689c689
< #define         zz      zz) & 1))
---
> #define         zz      )  1))
(87.1 %, 26484 bytes)
689c689
< #define         zz      ) & 1))
---
> #define         zz       & 1))
689c689
< #define         zz      ) & 1))
---
> #define         zz        1))
(87.1 %, 26483 bytes)
689c689
< #define         zz       & 1))
---
> #define         zz        1))
689c689
< #define         zz       & 1))
---
> #define         zz        ))
(87.1 %, 26482 bytes)
689c689
< #define         zz        1))
---
> #define         zz        ))
689c689
< #define         zz        1))
---
> #define         zz        )
(87.1 %, 26481 bytes)
689c689
< #define         zz        ))
---
> #define         zz        )
689c689
< #define         zz        ))
---
> #define         zz        
689,690c689,690
< #define         zz        ))
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define         zz        )
> define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
(87.1 %, 26480 bytes)
689c689
< #define         zz        )
---
> #define         zz        
689,690c689,690
< #define         zz        )
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define         zz        
> define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
689,690c689,690
< #define         zz        )
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define         zz        
> #     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
689,690c689,690
< #define         zz        )
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define         zz        
>      CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
689,690c689,690
< #define         zz        )
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define         zz        
> #define     (zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
689,690c689,690
< #define         zz        )
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define         zz        
> define     (zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
689,690c689,690
< #define         zz        )
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define         zz        
> #     (zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
689,690c689,690
< #define         zz        )
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define         zz        
>      (zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
>      CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> define     (zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
>      (zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> define     CLEAR_BHzz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
>      CLEAR_BHzz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> define     zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
(87.1 %, 26479 bytes)
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
>      CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> define     (zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
>      (zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> define     CLEAR_BHzz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
>      CLEAR_BHzz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> define     zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
>      zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #     (zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #     CLEAR_BHzz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #     zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #     CLEAR_BH()  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #     ()  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #     CLEAR_BH)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #     )  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define     (zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define     zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define     ()  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define     )  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define     (zz  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define     zz  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
(87.1 %, 26470 bytes)
690c690
< #define     zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define       bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
690c690
< #define     zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define     )  [(zz) >> 5] &= ~(1 << ((zz) & 1))
690c690
< #define     zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define       [(zz) >> 5] &= ~(1 << ((zz) & 1))
690c690
< #define     zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define     )  bhtab(zz) >> 5] &= ~(1 << ((zz) & 1))
690c690
< #define     zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define       bhtab(zz) >> 5] &= ~(1 << ((zz) & 1))
(87.1 %, 26467 bytes)
690c690
< #define       bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define       (zz) >> 5] &= ~(1 << ((zz) & 1))
690c690
< #define       bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define       [zz) >> 5] &= ~(1 << ((zz) & 1))
690c690
< #define       bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define       zz) >> 5] &= ~(1 << ((zz) & 1))
690c690
< #define       bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define       [() >> 5] &= ~(1 << ((zz) & 1))
690c690
< #define       bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define       () >> 5] &= ~(1 << ((zz) & 1))
690c690
< #define       bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define       [) >> 5] &= ~(1 << ((zz) & 1))
690c690
< #define       bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define       ) >> 5] &= ~(1 << ((zz) & 1))
690c690
< #define       bhtab[(zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define       bhtab(zz) >> 5] &= ~(1 << ((zz) & 1))
(87.1 %, 26460 bytes)
690c690
< #define       zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define         5] &= ~(1 << ((zz) & 1))
690c690
< #define       zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define       ) >> ] &= ~(1 << ((zz) & 1))
690c690
< #define       zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define        >> ] &= ~(1 << ((zz) & 1))
690c690
< #define       zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define       )  ] &= ~(1 << ((zz) & 1))
690c690
< #define       zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define         ] &= ~(1 << ((zz) & 1))
690c690
< #define       zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define       zz >> 5] &= ~(1 << ((zz) & 1))
690c690
< #define       zz) >> 5] &= ~(1 << ((zz) & 1))
---
> #define       zz  5] &= ~(1 << ((zz) & 1))
(87.1 %, 26459 bytes)
690c690
< #define       zz >> 5] &= ~(1 << ((zz) & 1))
---
> #define       zz  5] &= ~(1 << ((zz) & 1))
690c690
< #define       zz >> 5] &= ~(1 << ((zz) & 1))
---
> #define       zz  ] &= ~(1 << ((zz) & 1))
690c690
< #define       zz >> 5] &= ~(1 << ((zz) & 1))
---
> #define       zz  5 &= ~(1 << ((zz) & 1))
(87.1 %, 26457 bytes)
690c690
< #define       zz  5] &= ~(1 << ((zz) & 1))
---
> #define       zz  ] &= ~(1 << ((zz) & 1))
690c690
< #define       zz  5] &= ~(1 << ((zz) & 1))
---
> #define       zz   &= ~(1 << ((zz) & 1))
(87.1 %, 26456 bytes)
690c690
< #define       zz  ] &= ~(1 << ((zz) & 1))
---
> #define       zz   &= ~(1 << ((zz) & 1))
690c690
< #define       zz  ] &= ~(1 << ((zz) & 1))
---
> #define       zz    ~(1 << ((zz) & 1))
690c690
< #define       zz  ] &= ~(1 << ((zz) & 1))
---
> #define       zz   &= (1 << ((zz) & 1))
(87.1 %, 26455 bytes)
690c690
< #define       zz   &= ~(1 << ((zz) & 1))
---
> #define       zz    ~(1 << ((zz) & 1))
690c690
< #define       zz   &= ~(1 << ((zz) & 1))
---
> #define       zz    (1 << ((zz) & 1))
(87.1 %, 26453 bytes)
690c690
< #define       zz    ~(1 << ((zz) & 1))
---
> #define       zz    (1 << ((zz) & 1))
690c690
< #define       zz    ~(1 << ((zz) & 1))
---
> #define       zz    1 << ((zz) & 1))
690c690
< #define       zz    ~(1 << ((zz) & 1))
---
> #define       zz    ( << ((zz) & 1))
(87.1 %, 26452 bytes)
690c690
< #define       zz    (1 << ((zz) & 1))
---
> #define       zz    1 << ((zz) & 1))
690c690
< #define       zz    (1 << ((zz) & 1))
---
> #define       zz     << ((zz) & 1))
(87.1 %, 26451 bytes)
690c690
< #define       zz    1 << ((zz) & 1))
---
> #define       zz     << ((zz) & 1))
690c690
< #define       zz    1 << ((zz) & 1))
---
> #define       zz      ((zz) & 1))
690c690
< #define       zz    1 << ((zz) & 1))
---
> #define       zz     << (zz) & 1))
(87.1 %, 26450 bytes)
690c690
< #define       zz     << ((zz) & 1))
---
> #define       zz      ((zz) & 1))
690c690
< #define       zz     << ((zz) & 1))
---
> #define       zz      (zz) & 1))
690c690
< #define       zz     << ((zz) & 1))
---
> #define       zz      (zz) & 1))
(87.1 %, 26448 bytes)
690c690
< #define       zz      ((zz) & 1))
---
> #define       zz      (zz) & 1))
690c690
< #define       zz      ((zz) & 1))
---
> #define       zz      zz) & 1))
(87.1 %, 26447 bytes)
690c690
< #define       zz      (zz) & 1))
---
> #define       zz      zz) & 1))
690c690
< #define       zz      (zz) & 1))
---
> #define       zz      ) & 1))
690c690
< #define       zz      (zz) & 1))
---
> #define       zz      zz & 1))
(87.1 %, 26446 bytes)
690c690
< #define       zz      zz) & 1))
---
> #define       zz      ) & 1))
690c690
< #define       zz      zz) & 1))
---
> #define       zz       & 1))
690c690
< #define       zz      zz) & 1))
---
> #define       zz      )  1))
(87.1 %, 26444 bytes)
690c690
< #define       zz      ) & 1))
---
> #define       zz       & 1))
690c690
< #define       zz      ) & 1))
---
> #define       zz        1))
(87.1 %, 26443 bytes)
690c690
< #define       zz       & 1))
---
> #define       zz        1))
690c690
< #define       zz       & 1))
---
> #define       zz        ))
(87.1 %, 26442 bytes)
690c690
< #define       zz        1))
---
> #define       zz        ))
690c690
< #define       zz        1))
---
> #define       zz        )
690c690
< #define       zz        1))
---
> #define       zz        )
(87.1 %, 26441 bytes)
690c690
< #define       zz        ))
---
> #define       zz        )
690c690
< #define       zz        ))
---
> #define       zz        
690,691c690,691
< #define       zz        ))
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #define       zz        )
> define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
(87.1 %, 26440 bytes)
690c690
< #define       zz        )
---
> #define       zz        
690,691c690,691
< #define       zz        )
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #define       zz        
> define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
690,691c690,691
< #define       zz        )
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #define       zz        
> #     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
690,691c690,691
< #define       zz        )
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #define       zz        
>      ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
690,691c690,691
< #define       zz        )
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #define       zz        
> #define     (zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
690,691c690,691
< #define       zz        )
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #define       zz        
> define     (zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
690,691c690,691
< #define       zz        )
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #define       zz        
> #     (zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
690,691c690,691
< #define       zz        )
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #define       zz        
>      (zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
>      ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> define     (zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
>      (zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> define     ISSET_BHzz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
>      ISSET_BHzz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> define     zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
(87.1 %, 26439 bytes)
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
>      ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> define     (zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
>      (zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> define     ISSET_BHzz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
>      ISSET_BHzz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> define     zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
>      zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #     (zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #     ISSET_BHzz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #     zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #     ISSET_BH()  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #     ()  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #     ISSET_BH)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #     )  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #define     (zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #define     zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #define     ()  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #define     )  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #define     (zz  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #define     zz  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
(87.1 %, 26430 bytes)
691c691
< #define     zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #define       (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
691c691
< #define     zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #define     )  bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
691c691
< #define     zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #define       bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
691c691
< #define     zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #define     )  ([(zz) >> 5] & (1 << ((zz) & 1)))
691c691
< #define     zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #define       ([(zz) >> 5] & (1 << ((zz) & 1)))
691c691
< #define     zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #define     )  [(zz) >> 5] & (1 << ((zz) & 1)))
691c691
< #define     zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #define       [(zz) >> 5] & (1 << ((zz) & 1)))
691c691
< #define     zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #define     zz  (bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
(87.1 %, 26426 bytes)
691c691
< #define       bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #define       zz) >> 5] & (1 << ((zz) & 1)))
691c691
< #define       bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #define       [() >> 5] & (1 << ((zz) & 1)))
691c691
< #define       bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #define       () >> 5] & (1 << ((zz) & 1)))
691c691
< #define       bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #define       [) >> 5] & (1 << ((zz) & 1)))
691c691
< #define       bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #define       ) >> 5] & (1 << ((zz) & 1)))
691c691
< #define       bhtab[(zz) >> 5] & (1 << ((zz) & 1)))
---
> #define       bhtab(zz) >> 5] & (1 << ((zz) & 1)))
(87.1 %, 26419 bytes)
691c691
< #define       zz) >> 5] & (1 << ((zz) & 1)))
---
> #define         5] & (1 << ((zz) & 1)))
691c691
< #define       zz) >> 5] & (1 << ((zz) & 1)))
---
> #define       ) >> ] & (1 << ((zz) & 1)))
691c691
< #define       zz) >> 5] & (1 << ((zz) & 1)))
---
> #define        >> ] & (1 << ((zz) & 1)))
691c691
< #define       zz) >> 5] & (1 << ((zz) & 1)))
---
> #define       )  ] & (1 << ((zz) & 1)))
691c691
< #define       zz) >> 5] & (1 << ((zz) & 1)))
---
> #define         ] & (1 << ((zz) & 1)))
691c691
< #define       zz) >> 5] & (1 << ((zz) & 1)))
---
> #define       zz >> 5] & (1 << ((zz) & 1)))
691c691
< #define       zz) >> 5] & (1 << ((zz) & 1)))
---
> #define       zz  5] & (1 << ((zz) & 1)))
691c691
< #define       zz) >> 5] & (1 << ((zz) & 1)))
---
> #define       zz >> ] & (1 << ((zz) & 1)))
(87.1 %, 26418 bytes)
691c691
< #define       zz >> 5] & (1 << ((zz) & 1)))
---
> #define       zz  5] & (1 << ((zz) & 1)))
691c691
< #define       zz >> 5] & (1 << ((zz) & 1)))
---
> #define       zz  ] & (1 << ((zz) & 1)))
(87.1 %, 26416 bytes)
691c691
< #define       zz  5] & (1 << ((zz) & 1)))
---
> #define       zz  ] & (1 << ((zz) & 1)))
691c691
< #define       zz  5] & (1 << ((zz) & 1)))
---
> #define       zz   & (1 << ((zz) & 1)))
(87.1 %, 26415 bytes)
691c691
< #define       zz  ] & (1 << ((zz) & 1)))
---
> #define       zz   & (1 << ((zz) & 1)))
691c691
< #define       zz  ] & (1 << ((zz) & 1)))
---
> #define       zz    (1 << ((zz) & 1)))
(87.1 %, 26414 bytes)
691c691
< #define       zz   & (1 << ((zz) & 1)))
---
> #define       zz    (1 << ((zz) & 1)))
691c691
< #define       zz   & (1 << ((zz) & 1)))
---
> #define       zz    1 << ((zz) & 1)))
(87.1 %, 26413 bytes)
691c691
< #define       zz    (1 << ((zz) & 1)))
---
> #define       zz    1 << ((zz) & 1)))
691c691
< #define       zz    (1 << ((zz) & 1)))
---
> #define       zz     << ((zz) & 1)))
(87.1 %, 26412 bytes)
691c691
< #define       zz    1 << ((zz) & 1)))
---
> #define       zz     << ((zz) & 1)))
691c691
< #define       zz    1 << ((zz) & 1)))
---
> #define       zz      ((zz) & 1)))
(87.1 %, 26411 bytes)
691c691
< #define       zz     << ((zz) & 1)))
---
> #define       zz      ((zz) & 1)))
691c691
< #define       zz     << ((zz) & 1)))
---
> #define       zz      (zz) & 1)))
691c691
< #define       zz     << ((zz) & 1)))
---
> #define       zz      (zz) & 1)))
(87.1 %, 26409 bytes)
691c691
< #define       zz      ((zz) & 1)))
---
> #define       zz      (zz) & 1)))
691c691
< #define       zz      ((zz) & 1)))
---
> #define       zz      zz) & 1)))
(87.1 %, 26408 bytes)
691c691
< #define       zz      (zz) & 1)))
---
> #define       zz      zz) & 1)))
691c691
< #define       zz      (zz) & 1)))
---
> #define       zz      ) & 1)))
(87.1 %, 26407 bytes)
691c691
< #define       zz      zz) & 1)))
---
> #define       zz      ) & 1)))
691c691
< #define       zz      zz) & 1)))
---
> #define       zz       & 1)))
(87.1 %, 26405 bytes)
691c691
< #define       zz      ) & 1)))
---
> #define       zz       & 1)))
691c691
< #define       zz      ) & 1)))
---
> #define       zz        1)))
691c691
< #define       zz      ) & 1)))
---
> #define       zz       & )))
(87.1 %, 26404 bytes)
691c691
< #define       zz       & 1)))
---
> #define       zz        1)))
691c691
< #define       zz       & 1)))
---
> #define       zz        )))
691c691
< #define       zz       & 1)))
---
> #define       zz        1))
(87.1 %, 26403 bytes)
691c691
< #define       zz        1)))
---
> #define       zz        )))
691c691
< #define       zz        1)))
---
> #define       zz        ))
(87.1 %, 26402 bytes)
691c691
< #define       zz        )))
---
> #define       zz        ))
691c691
< #define       zz        )))
---
> #define       zz        )
691c691
< #define       zz        )))
---
> #define       zz        )
(87.1 %, 26401 bytes)
691c691
< #define       zz        ))
---
> #define       zz        )
691c691
< #define       zz        ))
---
> #define       zz        
(87.1 %, 26400 bytes)
691c691
< #define       zz        )
---
> #define       zz        
691,692c691,692
< #define       zz        )
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define       zz        
> define      WORD_BH(zz)  bhtab[(zz) >> 5]
691,692c691,692
< #define       zz        )
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define       zz        
> #      WORD_BH(zz)  bhtab[(zz) >> 5]
691,692c691,692
< #define       zz        )
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define       zz        
>       WORD_BH(zz)  bhtab[(zz) >> 5]
691,692c691,692
< #define       zz        )
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define       zz        
> #define      (zz)  bhtab[(zz) >> 5]
691,692c691,692
< #define       zz        )
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define       zz        
> define      (zz)  bhtab[(zz) >> 5]
691,692c691,692
< #define       zz        )
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define       zz        
> #      (zz)  bhtab[(zz) >> 5]
691,692c691,692
< #define       zz        )
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define       zz        
>       (zz)  bhtab[(zz) >> 5]
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> define      WORD_BH(zz)  bhtab[(zz) >> 5]
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
>       WORD_BH(zz)  bhtab[(zz) >> 5]
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> define      (zz)  bhtab[(zz) >> 5]
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
>       (zz)  bhtab[(zz) >> 5]
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> define      WORD_BHzz)  bhtab[(zz) >> 5]
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
>       WORD_BHzz)  bhtab[(zz) >> 5]
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> define      zz)  bhtab[(zz) >> 5]
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
>       zz)  bhtab[(zz) >> 5]
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #      WORD_BH(zz)  bhtab[(zz) >> 5]
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #      (zz)  bhtab[(zz) >> 5]
(87.1 %, 26399 bytes)
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> define      WORD_BH(zz)  bhtab[(zz) >> 5]
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
>       WORD_BH(zz)  bhtab[(zz) >> 5]
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> define      (zz)  bhtab[(zz) >> 5]
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
>       (zz)  bhtab[(zz) >> 5]
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> define      WORD_BHzz)  bhtab[(zz) >> 5]
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
>       WORD_BHzz)  bhtab[(zz) >> 5]
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> define      zz)  bhtab[(zz) >> 5]
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
>       zz)  bhtab[(zz) >> 5]
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #      WORD_BH(zz)  bhtab[(zz) >> 5]
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #      (zz)  bhtab[(zz) >> 5]
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #      WORD_BHzz)  bhtab[(zz) >> 5]
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #      zz)  bhtab[(zz) >> 5]
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #      WORD_BH()  bhtab[(zz) >> 5]
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #      ()  bhtab[(zz) >> 5]
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #      WORD_BH)  bhtab[(zz) >> 5]
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #      )  bhtab[(zz) >> 5]
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define      (zz)  bhtab[(zz) >> 5]
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define      zz)  bhtab[(zz) >> 5]
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define      ()  bhtab[(zz) >> 5]
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define      )  bhtab[(zz) >> 5]
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define      (zz  bhtab[(zz) >> 5]
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define      zz  bhtab[(zz) >> 5]
(87.1 %, 26391 bytes)
692c692
< #define      zz)  bhtab[(zz) >> 5]
---
> #define        bhtab[(zz) >> 5]
692c692
< #define      zz)  bhtab[(zz) >> 5]
---
> #define      )  [(zz) >> 5]
692c692
< #define      zz)  bhtab[(zz) >> 5]
---
> #define        [(zz) >> 5]
692c692
< #define      zz)  bhtab[(zz) >> 5]
---
> #define      )  bhtab(zz) >> 5]
692c692
< #define      zz)  bhtab[(zz) >> 5]
---
> #define        bhtab(zz) >> 5]
(87.1 %, 26388 bytes)
692c692
< #define        bhtab[(zz) >> 5]
---
> #define        (zz) >> 5]
692c692
< #define        bhtab[(zz) >> 5]
---
> #define        [zz) >> 5]
692c692
< #define        bhtab[(zz) >> 5]
---
> #define        zz) >> 5]
692c692
< #define        bhtab[(zz) >> 5]
---
> #define        [() >> 5]
692c692
< #define        bhtab[(zz) >> 5]
---
> #define        () >> 5]
692c692
< #define        bhtab[(zz) >> 5]
---
> #define        [) >> 5]
692c692
< #define        bhtab[(zz) >> 5]
---
> #define        ) >> 5]
692c692
< #define        bhtab[(zz) >> 5]
---
> #define        bhtab(zz) >> 5]
(87.1 %, 26381 bytes)
692c692
< #define        zz) >> 5]
---
> #define          5]
692c692
< #define        zz) >> 5]
---
> #define        ) >> ]
692c692
< #define        zz) >> 5]
---
> #define         >> ]
692c692
< #define        zz) >> 5]
---
> #define        )  ]
692c692
< #define        zz) >> 5]
---
> #define          ]
692c692
< #define        zz) >> 5]
---
> #define        zz >> 5]
692c692
< #define        zz) >> 5]
---
> #define        zz  5]
(87.1 %, 26380 bytes)
692c692
< #define        zz >> 5]
---
> #define        zz  5]
692c692
< #define        zz >> 5]
---
> #define        zz  ]
692c692
< #define        zz >> 5]
---
> #define        zz  5
(87.1 %, 26378 bytes)
692c692
< #define        zz  5]
---
> #define        zz  ]
692c692
< #define        zz  5]
---
> #define        zz  
(87.1 %, 26377 bytes)
692c692
< #define        zz  ]
---
> #define        zz  
692,693c692,693
< #define        zz  ]
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
> #define        zz  
> define UNALIGNED_BH(zz)  ((zz) & 0xf)
692,693c692,693
< #define        zz  ]
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
> #define        zz  
> # UNALIGNED_BH(zz)  ((zz) & 0xf)
692,693c692,693
< #define        zz  ]
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
> #define        zz  
>  UNALIGNED_BH(zz)  ((zz) & 0xf)
692,693c692,693
< #define        zz  ]
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
> #define        zz  
> #define (zz)  ((zz) & 0xf)
692,693c692,693
< #define        zz  ]
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
> #define        zz  
> define (zz)  ((zz) & 0xf)
692,693c692,693
< #define        zz  ]
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
> #define        zz  
> # (zz)  ((zz) & 0xf)
692,693c692,693
< #define        zz  ]
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
> #define        zz  
>  (zz)  ((zz) & 0xf)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
> define UNALIGNED_BH(zz)  ((zz) & 0xf)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
>  UNALIGNED_BH(zz)  ((zz) & 0xf)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
> define (zz)  ((zz) & 0xf)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
>  (zz)  ((zz) & 0xf)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
> define UNALIGNED_BHzz)  ((zz) & 0xf)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
>  UNALIGNED_BHzz)  ((zz) & 0xf)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
> define zz)  ((zz) & 0xf)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
>  zz)  ((zz) & 0xf)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
> # UNALIGNED_BH(zz)  ((zz) & 0xf)
(87.1 %, 26376 bytes)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
> define UNALIGNED_BH(zz)  ((zz) & 0xf)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
>  UNALIGNED_BH(zz)  ((zz) & 0xf)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
> define (zz)  ((zz) & 0xf)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
>  (zz)  ((zz) & 0xf)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
> define UNALIGNED_BHzz)  ((zz) & 0xf)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
>  UNALIGNED_BHzz)  ((zz) & 0xf)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
> define zz)  ((zz) & 0xf)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
>  zz)  ((zz) & 0xf)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
> # UNALIGNED_BH(zz)  ((zz) & 0xf)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
> # (zz)  ((zz) & 0xf)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
> # UNALIGNED_BHzz)  ((zz) & 0xf)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
> # zz)  ((zz) & 0xf)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
> # UNALIGNED_BH()  ((zz) & 0xf)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
> # ()  ((zz) & 0xf)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
> # UNALIGNED_BH)  ((zz) & 0xf)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
> # )  ((zz) & 0xf)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
> #define (zz)  ((zz) & 0xf)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
> #define zz)  ((zz) & 0xf)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
> #define ()  ((zz) & 0xf)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
> #define )  ((zz) & 0xf)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
> #define (zz  ((zz) & 0xf)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
> #define zz  ((zz) & 0xf)
(87.1 %, 26363 bytes)
693c693
< #define zz)  ((zz) & 0xf)
---
> #define   ((zz) & 0xf)
693c693
< #define zz)  ((zz) & 0xf)
---
> #define )  (zz) & 0xf)
693c693
< #define zz)  ((zz) & 0xf)
---
> #define   (zz) & 0xf)
693c693
< #define zz)  ((zz) & 0xf)
---
> #define )  (zz) & 0xf)
693c693
< #define zz)  ((zz) & 0xf)
---
> #define   (zz) & 0xf)
693c693
< #define zz)  ((zz) & 0xf)
---
> #define )  zz) & 0xf)
693c693
< #define zz)  ((zz) & 0xf)
---
> #define   zz) & 0xf)
693c693
< #define zz)  ((zz) & 0xf)
---
> #define zz  ((zz) & 0xf)
(87.1 %, 26358 bytes)
693c693
< #define   zz) & 0xf)
---
> #define     )
693c693
< #define   zz) & 0xf)
---
> #define   zz & 0xf)
693c693
< #define   zz) & 0xf)
---
> #define   zz  0xf)
(87.1 %, 26357 bytes)
693c693
< #define   zz & 0xf)
---
> #define   zz  0xf)
693c693
< #define   zz & 0xf)
---
> #define   zz  )
(87.1 %, 26356 bytes)
693c693
< #define   zz  0xf)
---
> #define   zz  )
693c693
< #define   zz  0xf)
---
> #define   zz  
693c693
< #define   zz  0xf)
---
> #define   zz  )
697c697
< #undef       SET_BH
---
> undef       SET_BH
(87.1 %, 26353 bytes)
693c693
< #define   zz  )
---
> #define   zz  
693c693
< #define   zz  )
---
> #define   zz  
697c697
< #undef       SET_BH
---
> undef       SET_BH
693c693
< #define   zz  )
---
> #define   zz  
697c697
< #undef       SET_BH
---
> #       SET_BH
693c693
< #define   zz  )
---
> #define   zz  
697c697
< #undef       SET_BH
---
>        SET_BH
693c693
< #define   zz  )
---
> #define   zz  
697c697
< #undef       SET_BH
---
> #undef       
693c693
< #define   zz  )
---
> #define   zz  
697c697
< #undef       SET_BH
---
> undef       
693c693
< #define   zz  )
---
> #define   zz  
697c697
< #undef       SET_BH
---
> #       
(87.1 %, 26352 bytes)
697c697
< #undef       SET_BH
---
> undef       SET_BH
697c697
< #undef       SET_BH
---
>        SET_BH
697c697
< #undef       SET_BH
---
> undef       
697c697
< #undef       SET_BH
---
>        
697,698c697,698
< #undef       SET_BH
< #undef     CLEAR_BH
---
> undef       SET_BH
> undef     CLEAR_BH
697,698c697,698
< #undef       SET_BH
< #undef     CLEAR_BH
---
>        SET_BH
> undef     CLEAR_BH
697,698c697,698
< #undef       SET_BH
< #undef     CLEAR_BH
---
> undef       
> undef     CLEAR_BH
697,698c697,698
< #undef       SET_BH
< #undef     CLEAR_BH
---
>        
> undef     CLEAR_BH
697c697
< #undef       SET_BH
---
> #       SET_BH
697c697
< #undef       SET_BH
---
> #       
(87.1 %, 26340 bytes)
698c698
< #undef     CLEAR_BH
---
>      
698,699c698,699
< #undef     CLEAR_BH
< #undef     ISSET_BH
---
> undef     CLEAR_BH
> undef     ISSET_BH
698,699c698,699
< #undef     CLEAR_BH
< #undef     ISSET_BH
---
>      CLEAR_BH
> undef     ISSET_BH
698,699c698,699
< #undef     CLEAR_BH
< #undef     ISSET_BH
---
> undef     
> undef     ISSET_BH
698,699c698,699
< #undef     CLEAR_BH
< #undef     ISSET_BH
---
>      
> undef     ISSET_BH
698c698
< #undef     CLEAR_BH
---
> #     CLEAR_BH
698c698
< #undef     CLEAR_BH
---
> #     
(87.2 %, 26326 bytes)
699c699
< #undef     ISSET_BH
---
>      
699,700c699,700
< #undef     ISSET_BH
< #undef      WORD_BH
---
> undef     ISSET_BH
> undef      WORD_BH
699,700c699,700
< #undef     ISSET_BH
< #undef      WORD_BH
---
>      ISSET_BH
> undef      WORD_BH
699,700c699,700
< #undef     ISSET_BH
< #undef      WORD_BH
---
> undef     
> undef      WORD_BH
699,700c699,700
< #undef     ISSET_BH
< #undef      WORD_BH
---
>      
> undef      WORD_BH
699c699
< #undef     ISSET_BH
---
> #     ISSET_BH
699c699
< #undef     ISSET_BH
---
> #     
(87.2 %, 26312 bytes)
700c700
< #undef      WORD_BH
---
>       
700,701c700,701
< #undef      WORD_BH
< #undef UNALIGNED_BH
---
> undef      WORD_BH
> undef UNALIGNED_BH
700,701c700,701
< #undef      WORD_BH
< #undef UNALIGNED_BH
---
>       WORD_BH
> undef UNALIGNED_BH
700,701c700,701
< #undef      WORD_BH
< #undef UNALIGNED_BH
---
> undef      
> undef UNALIGNED_BH
700,701c700,701
< #undef      WORD_BH
< #undef UNALIGNED_BH
---
>       
> undef UNALIGNED_BH
700c700
< #undef      WORD_BH
---
> #      WORD_BH
700c700
< #undef      WORD_BH
---
> #      
(87.2 %, 26299 bytes)
701c701
< #undef UNALIGNED_BH
---
>  
701c701
< #undef UNALIGNED_BH
---
> undef UNALIGNED_BH
724c724
< #define mswap(zz1, zz2) \
---
> define mswap(zz1, zz2) \
701c701
< #undef UNALIGNED_BH
---
>  UNALIGNED_BH
724c724
< #define mswap(zz1, zz2) \
---
> define mswap(zz1, zz2) \
701c701
< #undef UNALIGNED_BH
---
> undef 
724c724
< #define mswap(zz1, zz2) \
---
> define mswap(zz1, zz2) \
701c701
< #undef UNALIGNED_BH
---
>  
724c724
< #define mswap(zz1, zz2) \
---
> define mswap(zz1, zz2) \
701c701
< #undef UNALIGNED_BH
---
> # UNALIGNED_BH
701c701
< #undef UNALIGNED_BH
---
> # 
(87.2 %, 26281 bytes)
724c724
< #define mswap(zz1, zz2) \
---
>  (zz1, zz2) \
724c724
< #define mswap(zz1, zz2) \
---
> define mswapzz1, zz2) \
724c724
< #define mswap(zz1, zz2) \
---
>  mswapzz1, zz2) \
724c724
< #define mswap(zz1, zz2) \
---
> define zz1, zz2) \
724c724
< #define mswap(zz1, zz2) \
---
>  zz1, zz2) \
724c724
< #define mswap(zz1, zz2) \
---
> # mswap(zz1, zz2) \
724c724
< #define mswap(zz1, zz2) \
---
> # (zz1, zz2) \
724c724
< #define mswap(zz1, zz2) \
---
> # mswapzz1, zz2) \
724c724
< #define mswap(zz1, zz2) \
---
> # zz1, zz2) \
724c724
< #define mswap(zz1, zz2) \
---
> # mswap(, zz2) \
724c724
< #define mswap(zz1, zz2) \
---
> # (, zz2) \
724c724
< #define mswap(zz1, zz2) \
---
> # mswap, zz2) \
724c724
< #define mswap(zz1, zz2) \
---
> # , zz2) \
724c724
< #define mswap(zz1, zz2) \
---
> #define (zz1, zz2) \
724c724
< #define mswap(zz1, zz2) \
---
> #define zz1, zz2) \
724c724
< #define mswap(zz1, zz2) \
---
> #define (, zz2) \
724c724
< #define mswap(zz1, zz2) \
---
> #define , zz2) \
724c724
< #define mswap(zz1, zz2) \
---
> #define (zz1 zz2) \
724c724
< #define mswap(zz1, zz2) \
---
> #define zz1 zz2) \
(87.2 %, 26275 bytes)
724c724
< #define zz1, zz2) \
---
> #define  zz2) \
724c724
< #define zz1, zz2) \
---
> #define , ) \
724c724
< #define zz1, zz2) \
---
> #define  ) \
724c724
< #define zz1, zz2) \
---
> #define , zz2 \
724c724
< #define zz1, zz2) \
---
> #define  zz2 \
(87.2 %, 26271 bytes)
724c724
< #define  zz2) \
---
> #define   \
724c724
< #define  zz2) \
---
> #define  ) 
724c724
< #define  zz2) \
---
> #define   
724c724
< #define  zz2) \
---
> #define  ) \
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> define mvswap(zzp1, zzp2, zzn)       \
724c724
< #define  zz2) \
---
> #define   \
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> define mvswap(zzp1, zzp2, zzn)       \
724c724
< #define  zz2) \
---
> #define  ) 
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> define mvswap(zzp1, zzp2, zzn)       \
724c724
< #define  zz2) \
---
> #define   
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> define mvswap(zzp1, zzp2, zzn)       \
724c724
< #define  zz2) \
---
> #define  zz2 \
724c724
< #define  zz2) \
---
> #define  zz2 
(87.2 %, 26270 bytes)
724c724
< #define  zz2 \
---
> #define  zz2 
724c724
< #define  zz2 \
---
> #define  zz2 
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> define mvswap(zzp1, zzp2, zzn)       \
724c724
< #define  zz2 \
---
> #define  zz2 
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> # mvswap(zzp1, zzp2, zzn)       \
724c724
< #define  zz2 \
---
> #define  zz2 
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
>  mvswap(zzp1, zzp2, zzn)       \
724c724
< #define  zz2 \
---
> #define  zz2 
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> #define (zzp1, zzp2, zzn)       \
724c724
< #define  zz2 \
---
> #define  zz2 
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> define (zzp1, zzp2, zzn)       \
724c724
< #define  zz2 \
---
> #define  zz2 
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> # (zzp1, zzp2, zzn)       \
724c724
< #define  zz2 \
---
> #define  zz2 
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
>  (zzp1, zzp2, zzn)       \
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> define mvswap(zzp1, zzp2, zzn)       \
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
>  mvswap(zzp1, zzp2, zzn)       \
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> define (zzp1, zzp2, zzn)       \
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
>  (zzp1, zzp2, zzn)       \
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> define mvswapzzp1, zzp2, zzn)       \
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
>  mvswapzzp1, zzp2, zzn)       \
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> define zzp1, zzp2, zzn)       \
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
>  zzp1, zzp2, zzn)       \
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> # mvswap(zzp1, zzp2, zzn)       \
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> # (zzp1, zzp2, zzn)       \
(87.2 %, 26269 bytes)
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> define mvswap(zzp1, zzp2, zzn)       \
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
>  mvswap(zzp1, zzp2, zzn)       \
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> define (zzp1, zzp2, zzn)       \
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
>  (zzp1, zzp2, zzn)       \
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> define mvswapzzp1, zzp2, zzn)       \
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
>  mvswapzzp1, zzp2, zzn)       \
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> define zzp1, zzp2, zzn)       \
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
>  zzp1, zzp2, zzn)       \
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> # mvswap(zzp1, zzp2, zzn)       \
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> # (zzp1, zzp2, zzn)       \
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> # mvswapzzp1, zzp2, zzn)       \
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> # zzp1, zzp2, zzn)       \
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> # mvswap(, zzp2, zzn)       \
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> # (, zzp2, zzn)       \
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> # mvswap, zzp2, zzn)       \
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> # , zzp2, zzn)       \
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> #define (zzp1, zzp2, zzn)       \
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> #define zzp1, zzp2, zzn)       \
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> #define (, zzp2, zzn)       \
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> #define , zzp2, zzn)       \
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> #define (zzp1 zzp2, zzn)       \
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> #define zzp1 zzp2, zzn)       \
(87.2 %, 26262 bytes)
727c727
< #define zzp1, zzp2, zzn)       \
---
> #define  zzp2, zzn)       \
727c727
< #define zzp1, zzp2, zzn)       \
---
> #define , , zzn)       \
727c727
< #define zzp1, zzp2, zzn)       \
---
> #define  , zzn)       \
727c727
< #define zzp1, zzp2, zzn)       \
---
> #define , zzp2 zzn)       \
727c727
< #define zzp1, zzp2, zzn)       \
---
> #define  zzp2 zzn)       \
(87.2 %, 26257 bytes)
727c727
< #define  zzp2, zzn)       \
---
> #define   zzn)       \
727c727
< #define  zzp2, zzn)       \
---
> #define  , )       \
727c727
< #define  zzp2, zzn)       \
---
> #define   )       \
727c727
< #define  zzp2, zzn)       \
---
> #define  , zzn       \
727c727
< #define  zzp2, zzn)       \
---
> #define   zzn       \
727c727
< #define  zzp2, zzn)       \
---
> #define  ,        \
(87.2 %, 26252 bytes)
727c727
< #define   zzn)       \
---
> #define          \
727c727
< #define   zzn)       \
---
> #define   )       
727c727
< #define   zzn)       \
---
> #define          
727c727
< #define   zzn)       \
---
> #define   )       \
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> define mmin(a,b) ((a) < (b)) ? (a) : (b)
727c727
< #define   zzn)       \
---
> #define          \
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> define mmin(a,b) ((a) < (b)) ? (a) : (b)
727c727
< #define   zzn)       \
---
> #define   )       
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> define mmin(a,b) ((a) < (b)) ? (a) : (b)
727c727
< #define   zzn)       \
---
> #define          
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> define mmin(a,b) ((a) < (b)) ? (a) : (b)
727c727
< #define   zzn)       \
---
> #define   zzn       \
727c727
< #define   zzn)       \
---
> #define   zzn       
(87.2 %, 26251 bytes)
727c727
< #define   zzn       \
---
> #define   zzn       
727c727
< #define   zzn       \
---
> #define   zzn       
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> define mmin(a,b) ((a) < (b)) ? (a) : (b)
727c727
< #define   zzn       \
---
> #define   zzn       
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> # mmin(a,b) ((a) < (b)) ? (a) : (b)
727c727
< #define   zzn       \
---
> #define   zzn       
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
>  mmin(a,b) ((a) < (b)) ? (a) : (b)
727c727
< #define   zzn       \
---
> #define   zzn       
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define (a,b) ((a) < (b)) ? (a) : (b)
727c727
< #define   zzn       \
---
> #define   zzn       
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> define (a,b) ((a) < (b)) ? (a) : (b)
727c727
< #define   zzn       \
---
> #define   zzn       
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> # (a,b) ((a) < (b)) ? (a) : (b)
727c727
< #define   zzn       \
---
> #define   zzn       
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
>  (a,b) ((a) < (b)) ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> define mmin(a,b) ((a) < (b)) ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
>  mmin(a,b) ((a) < (b)) ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> define (a,b) ((a) < (b)) ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
>  (a,b) ((a) < (b)) ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> define mmina,b) ((a) < (b)) ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
>  mmina,b) ((a) < (b)) ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> define a,b) ((a) < (b)) ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
>  a,b) ((a) < (b)) ? (a) : (b)
(87.2 %, 26250 bytes)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> define mmin(a,b) ((a) < (b)) ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
>  mmin(a,b) ((a) < (b)) ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> define (a,b) ((a) < (b)) ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
>  (a,b) ((a) < (b)) ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> define mmina,b) ((a) < (b)) ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
>  mmina,b) ((a) < (b)) ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> define a,b) ((a) < (b)) ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
>  a,b) ((a) < (b)) ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> # mmin(a,b) ((a) < (b)) ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> # (a,b) ((a) < (b)) ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> # mmina,b) ((a) < (b)) ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> # a,b) ((a) < (b)) ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> # mmin(,b) ((a) < (b)) ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> # (,b) ((a) < (b)) ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> # mmin,b) ((a) < (b)) ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> # ,b) ((a) < (b)) ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define (a,b) ((a) < (b)) ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define a,b) ((a) < (b)) ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define (,b) ((a) < (b)) ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define ,b) ((a) < (b)) ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define (ab) ((a) < (b)) ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define ab) ((a) < (b)) ? (a) : (b)
(87.2 %, 26245 bytes)
732c732
< #define a,b) ((a) < (b)) ? (a) : (b)
---
> #define b) ((a) < (b)) ? (a) : (b)
732c732
< #define a,b) ((a) < (b)) ? (a) : (b)
---
> #define ,) ((a) < (b)) ? (a) : (b)
732c732
< #define a,b) ((a) < (b)) ? (a) : (b)
---
> #define ) ((a) < (b)) ? (a) : (b)
732c732
< #define a,b) ((a) < (b)) ? (a) : (b)
---
> #define ,b ((a) < (b)) ? (a) : (b)
732c732
< #define a,b) ((a) < (b)) ? (a) : (b)
---
> #define b ((a) < (b)) ? (a) : (b)
732c732
< #define a,b) ((a) < (b)) ? (a) : (b)
---
> #define , ((a) < (b)) ? (a) : (b)
732c732
< #define a,b) ((a) < (b)) ? (a) : (b)
---
> #define  ((a) < (b)) ? (a) : (b)
732c732
< #define a,b) ((a) < (b)) ? (a) : (b)
---
> #define ab) ((a) < (b)) ? (a) : (b)
732c732
< #define a,b) ((a) < (b)) ? (a) : (b)
---
> #define a) ((a) < (b)) ? (a) : (b)
(87.2 %, 26244 bytes)
732c732
< #define ab) ((a) < (b)) ? (a) : (b)
---
> #define ab ((a) < (b)) ? (a) : (b)
732c732
< #define ab) ((a) < (b)) ? (a) : (b)
---
> #define ab (a) < (b)) ? (a) : (b)
(87.2 %, 26243 bytes)
732c732
< #define ab ((a) < (b)) ? (a) : (b)
---
> #define ab (a) < (b)) ? (a) : (b)
732c732
< #define ab ((a) < (b)) ? (a) : (b)
---
> #define ab a) < (b)) ? (a) : (b)
(87.2 %, 26242 bytes)
732c732
< #define ab (a) < (b)) ? (a) : (b)
---
> #define ab a) < (b)) ? (a) : (b)
732c732
< #define ab (a) < (b)) ? (a) : (b)
---
> #define ab ) < (b)) ? (a) : (b)
732c732
< #define ab (a) < (b)) ? (a) : (b)
---
> #define ab a < (b)) ? (a) : (b)
(87.2 %, 26241 bytes)
732c732
< #define ab a) < (b)) ? (a) : (b)
---
> #define ab ) < (b)) ? (a) : (b)
732c732
< #define ab a) < (b)) ? (a) : (b)
---
> #define ab  < (b)) ? (a) : (b)
732c732
< #define ab a) < (b)) ? (a) : (b)
---
> #define ab )  (b)) ? (a) : (b)
(87.2 %, 26240 bytes)
732c732
< #define ab ) < (b)) ? (a) : (b)
---
> #define ab  < (b)) ? (a) : (b)
732c732
< #define ab ) < (b)) ? (a) : (b)
---
> #define ab   (b)) ? (a) : (b)
(87.2 %, 26239 bytes)
732c732
< #define ab  < (b)) ? (a) : (b)
---
> #define ab   (b)) ? (a) : (b)
732c732
< #define ab  < (b)) ? (a) : (b)
---
> #define ab   b)) ? (a) : (b)
(87.2 %, 26238 bytes)
732c732
< #define ab   (b)) ? (a) : (b)
---
> #define ab   b)) ? (a) : (b)
732c732
< #define ab   (b)) ? (a) : (b)
---
> #define ab   )) ? (a) : (b)
732c732
< #define ab   (b)) ? (a) : (b)
---
> #define ab   b) ? (a) : (b)
(87.2 %, 26237 bytes)
732c732
< #define ab   b)) ? (a) : (b)
---
> #define ab   )) ? (a) : (b)
732c732
< #define ab   b)) ? (a) : (b)
---
> #define ab   ) ? (a) : (b)
(87.2 %, 26236 bytes)
732c732
< #define ab   )) ? (a) : (b)
---
> #define ab   ) ? (a) : (b)
732c732
< #define ab   )) ? (a) : (b)
---
> #define ab    ? (a) : (b)
732c732
< #define ab   )) ? (a) : (b)
---
> #define ab   )  (a) : (b)
(87.2 %, 26235 bytes)
732c732
< #define ab   ) ? (a) : (b)
---
> #define ab    ? (a) : (b)
732c732
< #define ab   ) ? (a) : (b)
---
> #define ab     (a) : (b)
(87.2 %, 26234 bytes)
732c732
< #define ab    ? (a) : (b)
---
> #define ab     (a) : (b)
732c732
< #define ab    ? (a) : (b)
---
> #define ab     a) : (b)
(87.2 %, 26233 bytes)
732c732
< #define ab     (a) : (b)
---
> #define ab     a) : (b)
732c732
< #define ab     (a) : (b)
---
> #define ab     ) : (b)
732c732
< #define ab     (a) : (b)
---
> #define ab     a : (b)
(87.2 %, 26232 bytes)
732c732
< #define ab     a) : (b)
---
> #define ab     ) : (b)
732c732
< #define ab     a) : (b)
---
> #define ab      : (b)
732c732
< #define ab     a) : (b)
---
> #define ab     )  (b)
(87.2 %, 26231 bytes)
732c732
< #define ab     ) : (b)
---
> #define ab      : (b)
732c732
< #define ab     ) : (b)
---
> #define ab       (b)
732c732
< #define ab     ) : (b)
---
> #define ab      : b)
(87.2 %, 26230 bytes)
732c732
< #define ab      : (b)
---
> #define ab       (b)
732c732
< #define ab      : (b)
---
> #define ab       b)
732c732
< #define ab      : (b)
---
> #define ab       ()
(87.2 %, 26229 bytes)
732c732
< #define ab       (b)
---
> #define ab       b)
732c732
< #define ab       (b)
---
> #define ab       )
732c732
< #define ab       (b)
---
> #define ab       b
(87.2 %, 26228 bytes)
732c732
< #define ab       b)
---
> #define ab       )
732c732
< #define ab       b)
---
> #define ab       
(87.2 %, 26227 bytes)
732c732
< #define ab       )
---
> #define ab       
732c732
< #define ab       )
---
> #define ab       
734c734
< #define mpush(lz,hz,dz) 
---
> define mpush(lz,hz,dz) 
732c732
< #define ab       )
---
> #define ab       
734c734
< #define mpush(lz,hz,dz) 
---
> # mpush(lz,hz,dz) 
732c732
< #define ab       )
---
> #define ab       
734c734
< #define mpush(lz,hz,dz) 
---
>  mpush(lz,hz,dz) 
732c732
< #define ab       )
---
> #define ab       
734c734
< #define mpush(lz,hz,dz) 
---
> #define (lz,hz,dz) 
732c732
< #define ab       )
---
> #define ab       
734c734
< #define mpush(lz,hz,dz) 
---
> define (lz,hz,dz) 
732c732
< #define ab       )
---
> #define ab       
734c734
< #define mpush(lz,hz,dz) 
---
> # (lz,hz,dz) 
732c732
< #define ab       )
---
> #define ab       
734c734
< #define mpush(lz,hz,dz) 
---
>  (lz,hz,dz) 
734c734
< #define mpush(lz,hz,dz) 
---
> define mpush(lz,hz,dz) 
734c734
< #define mpush(lz,hz,dz) 
---
>  mpush(lz,hz,dz) 
734c734
< #define mpush(lz,hz,dz) 
---
> define (lz,hz,dz) 
734c734
< #define mpush(lz,hz,dz) 
---
>  (lz,hz,dz) 
734c734
< #define mpush(lz,hz,dz) 
---
> define mpushlz,hz,dz) 
734c734
< #define mpush(lz,hz,dz) 
---
>  mpushlz,hz,dz) 
734c734
< #define mpush(lz,hz,dz) 
---
> define lz,hz,dz) 
734c734
< #define mpush(lz,hz,dz) 
---
>  lz,hz,dz) 
734c734
< #define mpush(lz,hz,dz) 
---
> # mpush(lz,hz,dz) 
734c734
< #define mpush(lz,hz,dz) 
---
> # (lz,hz,dz) 
734c734
< #define mpush(lz,hz,dz) 
---
> # mpushlz,hz,dz) 
(87.2 %, 26226 bytes)
734c734
< #define mpush(lz,hz,dz) 
---
> define mpush(lz,hz,dz) 
734c734
< #define mpush(lz,hz,dz) 
---
>  mpush(lz,hz,dz) 
734c734
< #define mpush(lz,hz,dz) 
---
> define (lz,hz,dz) 
734c734
< #define mpush(lz,hz,dz) 
---
>  (lz,hz,dz) 
734c734
< #define mpush(lz,hz,dz) 
---
> define mpushlz,hz,dz) 
734c734
< #define mpush(lz,hz,dz) 
---
>  mpushlz,hz,dz) 
734c734
< #define mpush(lz,hz,dz) 
---
> define lz,hz,dz) 
734c734
< #define mpush(lz,hz,dz) 
---
>  lz,hz,dz) 
734c734
< #define mpush(lz,hz,dz) 
---
> # mpush(lz,hz,dz) 
734c734
< #define mpush(lz,hz,dz) 
---
> # (lz,hz,dz) 
734c734
< #define mpush(lz,hz,dz) 
---
> # mpushlz,hz,dz) 
734c734
< #define mpush(lz,hz,dz) 
---
> # lz,hz,dz) 
734c734
< #define mpush(lz,hz,dz) 
---
> # mpush(,hz,dz) 
734c734
< #define mpush(lz,hz,dz) 
---
> # (,hz,dz) 
734c734
< #define mpush(lz,hz,dz) 
---
> # mpush,hz,dz) 
734c734
< #define mpush(lz,hz,dz) 
---
> # ,hz,dz) 
734c734
< #define mpush(lz,hz,dz) 
---
> #define (lz,hz,dz) 
734c734
< #define mpush(lz,hz,dz) 
---
> #define lz,hz,dz) 
734c734
< #define mpush(lz,hz,dz) 
---
> #define (,hz,dz) 
734c734
< #define mpush(lz,hz,dz) 
---
> #define ,hz,dz) 
734c734
< #define mpush(lz,hz,dz) 
---
> #define (lzhz,dz) 
734c734
< #define mpush(lz,hz,dz) 
---
> #define lzhz,dz) 
734c734
< #define mpush(lz,hz,dz) 
---
> #define (hz,dz) 
(87.2 %, 26220 bytes)
734c734
< #define lz,hz,dz) 
---
> #define hz,dz) 
734c734
< #define lz,hz,dz) 
---
> #define ,,dz) 
734c734
< #define lz,hz,dz) 
---
> #define ,dz) 
734c734
< #define lz,hz,dz) 
---
> #define ,hzdz) 
734c734
< #define lz,hz,dz) 
---
> #define hzdz) 
(87.2 %, 26217 bytes)
734c734
< #define hz,dz) 
---
> #define dz) 
734c734
< #define hz,dz) 
---
> #define ,) 
734c734
< #define hz,dz) 
---
> #define ) 
734c734
< #define hz,dz) 
---
> #define ,dz 
734c734
< #define hz,dz) 
---
> #define dz 
(87.2 %, 26214 bytes)
734c734
< #define dz) 
---
> #define  
734c734
< #define dz) 
---
> #define ) 
736c736
< #define mpop(lz,hz,dz) 
---
> define mpop(lz,hz,dz) 
734c734
< #define dz) 
---
> #define  
736c736
< #define mpop(lz,hz,dz) 
---
> define mpop(lz,hz,dz) 
734c734
< #define dz) 
---
> #define ) 
736c736
< #define mpop(lz,hz,dz) 
---
> # mpop(lz,hz,dz) 
734c734
< #define dz) 
---
> #define  
736c736
< #define mpop(lz,hz,dz) 
---
> # mpop(lz,hz,dz) 
734c734
< #define dz) 
---
> #define ) 
736c736
< #define mpop(lz,hz,dz) 
---
>  mpop(lz,hz,dz) 
734c734
< #define dz) 
---
> #define  
736c736
< #define mpop(lz,hz,dz) 
---
>  mpop(lz,hz,dz) 
734c734
< #define dz) 
---
> #define dz 
734c734
< #define dz) 
---
> #define dz 
736c736
< #define mpop(lz,hz,dz) 
---
> define mpop(lz,hz,dz) 
734c734
< #define dz) 
---
> #define dz 
736c736
< #define mpop(lz,hz,dz) 
---
> # mpop(lz,hz,dz) 
734c734
< #define dz) 
---
> #define dz 
736c736
< #define mpop(lz,hz,dz) 
---
>  mpop(lz,hz,dz) 
734c734
< #define dz) 
---
> #define dz 
736c736
< #define mpop(lz,hz,dz) 
---
> #define (lz,hz,dz) 
734c734
< #define dz) 
---
> #define dz 
736c736
< #define mpop(lz,hz,dz) 
---
> define (lz,hz,dz) 
734c734
< #define dz) 
---
> #define dz 
736c736
< #define mpop(lz,hz,dz) 
---
> # (lz,hz,dz) 
734c734
< #define dz) 
---
> #define dz 
736c736
< #define mpop(lz,hz,dz) 
---
>  (lz,hz,dz) 
736c736
< #define mpop(lz,hz,dz) 
---
> define mpop(lz,hz,dz) 
736c736
< #define mpop(lz,hz,dz) 
---
>  mpop(lz,hz,dz) 
736c736
< #define mpop(lz,hz,dz) 
---
> define (lz,hz,dz) 
736c736
< #define mpop(lz,hz,dz) 
---
>  (lz,hz,dz) 
736c736
< #define mpop(lz,hz,dz) 
---
> define mpoplz,hz,dz) 
736c736
< #define mpop(lz,hz,dz) 
---
>  mpoplz,hz,dz) 
736c736
< #define mpop(lz,hz,dz) 
---
> define lz,hz,dz) 
736c736
< #define mpop(lz,hz,dz) 
---
>  lz,hz,dz) 
736c736
< #define mpop(lz,hz,dz) 
---
> # mpop(lz,hz,dz) 
(87.2 %, 26213 bytes)
736c736
< #define mpop(lz,hz,dz) 
---
> define mpop(lz,hz,dz) 
736c736
< #define mpop(lz,hz,dz) 
---
>  mpop(lz,hz,dz) 
736c736
< #define mpop(lz,hz,dz) 
---
> define (lz,hz,dz) 
736c736
< #define mpop(lz,hz,dz) 
---
>  (lz,hz,dz) 
736c736
< #define mpop(lz,hz,dz) 
---
> define mpoplz,hz,dz) 
736c736
< #define mpop(lz,hz,dz) 
---
>  mpoplz,hz,dz) 
736c736
< #define mpop(lz,hz,dz) 
---
> define lz,hz,dz) 
736c736
< #define mpop(lz,hz,dz) 
---
>  lz,hz,dz) 
736c736
< #define mpop(lz,hz,dz) 
---
> # mpop(lz,hz,dz) 
736c736
< #define mpop(lz,hz,dz) 
---
> # (lz,hz,dz) 
736c736
< #define mpop(lz,hz,dz) 
---
> # mpoplz,hz,dz) 
736c736
< #define mpop(lz,hz,dz) 
---
> # lz,hz,dz) 
736c736
< #define mpop(lz,hz,dz) 
---
> # mpop(,hz,dz) 
736c736
< #define mpop(lz,hz,dz) 
---
> # (,hz,dz) 
736c736
< #define mpop(lz,hz,dz) 
---
> # mpop,hz,dz) 
736c736
< #define mpop(lz,hz,dz) 
---
> # ,hz,dz) 
736c736
< #define mpop(lz,hz,dz) 
---
> #define (lz,hz,dz) 
736c736
< #define mpop(lz,hz,dz) 
---
> #define lz,hz,dz) 
736c736
< #define mpop(lz,hz,dz) 
---
> #define (,hz,dz) 
736c736
< #define mpop(lz,hz,dz) 
---
> #define ,hz,dz) 
736c736
< #define mpop(lz,hz,dz) 
---
> #define (lzhz,dz) 
736c736
< #define mpop(lz,hz,dz) 
---
> #define lzhz,dz) 
(87.2 %, 26208 bytes)
736c736
< #define lz,hz,dz) 
---
> #define hz,dz) 
736c736
< #define lz,hz,dz) 
---
> #define ,,dz) 
736c736
< #define lz,hz,dz) 
---
> #define ,dz) 
736c736
< #define lz,hz,dz) 
---
> #define ,hzdz) 
736c736
< #define lz,hz,dz) 
---
> #define hzdz) 
(87.2 %, 26205 bytes)
736c736
< #define hz,dz) 
---
> #define dz) 
736c736
< #define hz,dz) 
---
> #define ,) 
736c736
< #define hz,dz) 
---
> #define ) 
736c736
< #define hz,dz) 
---
> #define ,dz 
736c736
< #define hz,dz) 
---
> #define dz 
(87.2 %, 26202 bytes)
736c736
< #define dz) 
---
> #define  
736c736
< #define dz) 
---
> #define ) 
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> define mnextsize(az) (nextHi[az]-nextLo[az])
736c736
< #define dz) 
---
> #define  
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> define mnextsize(az) (nextHi[az]-nextLo[az])
736c736
< #define dz) 
---
> #define ) 
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> # mnextsize(az) (nextHi[az]-nextLo[az])
736c736
< #define dz) 
---
> #define  
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> # mnextsize(az) (nextHi[az]-nextLo[az])
736c736
< #define dz) 
---
> #define ) 
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
>  mnextsize(az) (nextHi[az]-nextLo[az])
736c736
< #define dz) 
---
> #define  
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
>  mnextsize(az) (nextHi[az]-nextLo[az])
736c736
< #define dz) 
---
> #define dz 
736c736
< #define dz) 
---
> #define dz 
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> define mnextsize(az) (nextHi[az]-nextLo[az])
736c736
< #define dz) 
---
> #define dz 
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> # mnextsize(az) (nextHi[az]-nextLo[az])
736c736
< #define dz) 
---
> #define dz 
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
>  mnextsize(az) (nextHi[az]-nextLo[az])
736c736
< #define dz) 
---
> #define dz 
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define (az) (nextHi[az]-nextLo[az])
736c736
< #define dz) 
---
> #define dz 
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> define (az) (nextHi[az]-nextLo[az])
736c736
< #define dz) 
---
> #define dz 
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> # (az) (nextHi[az]-nextLo[az])
736c736
< #define dz) 
---
> #define dz 
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
>  (az) (nextHi[az]-nextLo[az])
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> define mnextsize(az) (nextHi[az]-nextLo[az])
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
>  mnextsize(az) (nextHi[az]-nextLo[az])
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> define (az) (nextHi[az]-nextLo[az])
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
>  (az) (nextHi[az]-nextLo[az])
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> define mnextsizeaz) (nextHi[az]-nextLo[az])
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
>  mnextsizeaz) (nextHi[az]-nextLo[az])
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> define az) (nextHi[az]-nextLo[az])
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
>  az) (nextHi[az]-nextLo[az])
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> # mnextsize(az) (nextHi[az]-nextLo[az])
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> # (az) (nextHi[az]-nextLo[az])
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> # mnextsizeaz) (nextHi[az]-nextLo[az])
(87.2 %, 26201 bytes)
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> define mnextsize(az) (nextHi[az]-nextLo[az])
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
>  mnextsize(az) (nextHi[az]-nextLo[az])
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> define (az) (nextHi[az]-nextLo[az])
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
>  (az) (nextHi[az]-nextLo[az])
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> define mnextsizeaz) (nextHi[az]-nextLo[az])
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
>  mnextsizeaz) (nextHi[az]-nextLo[az])
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> define az) (nextHi[az]-nextLo[az])
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
>  az) (nextHi[az]-nextLo[az])
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> # mnextsize(az) (nextHi[az]-nextLo[az])
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> # (az) (nextHi[az]-nextLo[az])
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> # mnextsizeaz) (nextHi[az]-nextLo[az])
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> # az) (nextHi[az]-nextLo[az])
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> # mnextsize() (nextHi[az]-nextLo[az])
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> # () (nextHi[az]-nextLo[az])
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> # mnextsize) (nextHi[az]-nextLo[az])
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> # ) (nextHi[az]-nextLo[az])
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define (az) (nextHi[az]-nextLo[az])
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define az) (nextHi[az]-nextLo[az])
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define () (nextHi[az]-nextLo[az])
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define ) (nextHi[az]-nextLo[az])
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define (az (nextHi[az]-nextLo[az])
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define az (nextHi[az]-nextLo[az])
(87.2 %, 26191 bytes)
739c739
< #define az) (nextHi[az]-nextLo[az])
---
> #define  (nextHi[az]-nextLo[az])
739c739
< #define az) (nextHi[az]-nextLo[az])
---
> #define ) nextHi[az]-nextLo[az])
739c739
< #define az) (nextHi[az]-nextLo[az])
---
> #define  nextHi[az]-nextLo[az])
739c739
< #define az) (nextHi[az]-nextLo[az])
---
> #define ) ([az]-nextLo[az])
739c739
< #define az) (nextHi[az]-nextLo[az])
---
> #define  ([az]-nextLo[az])
739c739
< #define az) (nextHi[az]-nextLo[az])
---
> #define ) [az]-nextLo[az])
739c739
< #define az) (nextHi[az]-nextLo[az])
---
> #define  [az]-nextLo[az])
739c739
< #define az) (nextHi[az]-nextLo[az])
---
> #define az (nextHi[az]-nextLo[az])
(87.2 %, 26187 bytes)
739c739
< #define  nextHi[az]-nextLo[az])
---
> #define  ]-nextLo[az])
739c739
< #define  nextHi[az]-nextLo[az])
---
> #define  [az-nextLo[az])
739c739
< #define  nextHi[az]-nextLo[az])
---
> #define  az-nextLo[az])
739c739
< #define  nextHi[az]-nextLo[az])
---
> #define  [-nextLo[az])
739c739
< #define  nextHi[az]-nextLo[az])
---
> #define  -nextLo[az])
739c739
< #define  nextHi[az]-nextLo[az])
---
> #define  nextHiaz]-nextLo[az])
739c739
< #define  nextHi[az]-nextLo[az])
---
> #define  nextHi]-nextLo[az])
(87.2 %, 26179 bytes)
739c739
< #define  az-nextLo[az])
---
> #define  nextLoaz])
739c739
< #define  az-nextLo[az])
---
> #define  -az])
739c739
< #define  az-nextLo[az])
---
> #define  az])
(87.2 %, 26175 bytes)
739c739
< #define  nextLoaz])
---
> #define  )
741c741
< #define mnextswap(az,bz)                                        \
---
> define mnextswap(az,bz)                                        \
739c739
< #define  nextLoaz])
---
> #define  ]
741c741
< #define mnextswap(az,bz)                                        \
---
> define mnextswap(az,bz)                                        \
739c739
< #define  nextLoaz])
---
> #define  
741c741
< #define mnextswap(az,bz)                                        \
---
> define mnextswap(az,bz)                                        \
739c739
< #define  nextLoaz])
---
> #define  nextLoaz)
739c739
< #define  nextLoaz])
---
> #define  nextLoaz
(87.2 %, 26174 bytes)
739c739
< #define  nextLoaz)
---
> #define  nextLoaz
739c739
< #define  nextLoaz)
---
> #define  nextLoaz
741c741
< #define mnextswap(az,bz)                                        \
---
> define mnextswap(az,bz)                                        \
739c739
< #define  nextLoaz)
---
> #define  nextLoaz
741c741
< #define mnextswap(az,bz)                                        \
---
> # mnextswap(az,bz)                                        \
739c739
< #define  nextLoaz)
---
> #define  nextLoaz
741c741
< #define mnextswap(az,bz)                                        \
---
>  mnextswap(az,bz)                                        \
739c739
< #define  nextLoaz)
---
> #define  nextLoaz
741c741
< #define mnextswap(az,bz)                                        \
---
> #define (az,bz)                                        \
739c739
< #define  nextLoaz)
---
> #define  nextLoaz
741c741
< #define mnextswap(az,bz)                                        \
---
> define (az,bz)                                        \
739c739
< #define  nextLoaz)
---
> #define  nextLoaz
741c741
< #define mnextswap(az,bz)                                        \
---
> # (az,bz)                                        \
739c739
< #define  nextLoaz)
---
> #define  nextLoaz
741c741
< #define mnextswap(az,bz)                                        \
---
>  (az,bz)                                        \
741c741
< #define mnextswap(az,bz)                                        \
---
> define mnextswap(az,bz)                                        \
741c741
< #define mnextswap(az,bz)                                        \
---
>  mnextswap(az,bz)                                        \
741c741
< #define mnextswap(az,bz)                                        \
---
> define (az,bz)                                        \
741c741
< #define mnextswap(az,bz)                                        \
---
>  (az,bz)                                        \
741c741
< #define mnextswap(az,bz)                                        \
---
> define mnextswapaz,bz)                                        \
741c741
< #define mnextswap(az,bz)                                        \
---
>  mnextswapaz,bz)                                        \
741c741
< #define mnextswap(az,bz)                                        \
---
> define az,bz)                                        \
741c741
< #define mnextswap(az,bz)                                        \
---
>  az,bz)                                        \
741c741
< #define mnextswap(az,bz)                                        \
---
> # mnextswap(az,bz)                                        \
(87.2 %, 26173 bytes)
741c741
< #define mnextswap(az,bz)                                        \
---
> define mnextswap(az,bz)                                        \
741c741
< #define mnextswap(az,bz)                                        \
---
>  mnextswap(az,bz)                                        \
741c741
< #define mnextswap(az,bz)                                        \
---
> define (az,bz)                                        \
741c741
< #define mnextswap(az,bz)                                        \
---
>  (az,bz)                                        \
741c741
< #define mnextswap(az,bz)                                        \
---
> define mnextswapaz,bz)                                        \
741c741
< #define mnextswap(az,bz)                                        \
---
>  mnextswapaz,bz)                                        \
741c741
< #define mnextswap(az,bz)                                        \
---
> define az,bz)                                        \
741c741
< #define mnextswap(az,bz)                                        \
---
>  az,bz)                                        \
741c741
< #define mnextswap(az,bz)                                        \
---
> # mnextswap(az,bz)                                        \
741c741
< #define mnextswap(az,bz)                                        \
---
> # (az,bz)                                        \
741c741
< #define mnextswap(az,bz)                                        \
---
> # mnextswapaz,bz)                                        \
741c741
< #define mnextswap(az,bz)                                        \
---
> # az,bz)                                        \
741c741
< #define mnextswap(az,bz)                                        \
---
> # mnextswap(,bz)                                        \
741c741
< #define mnextswap(az,bz)                                        \
---
> # (,bz)                                        \
741c741
< #define mnextswap(az,bz)                                        \
---
> # mnextswap,bz)                                        \
741c741
< #define mnextswap(az,bz)                                        \
---
> # ,bz)                                        \
741c741
< #define mnextswap(az,bz)                                        \
---
> #define (az,bz)                                        \
741c741
< #define mnextswap(az,bz)                                        \
---
> #define az,bz)                                        \
741c741
< #define mnextswap(az,bz)                                        \
---
> #define (,bz)                                        \
741c741
< #define mnextswap(az,bz)                                        \
---
> #define ,bz)                                        \
741c741
< #define mnextswap(az,bz)                                        \
---
> #define (azbz)                                        \
741c741
< #define mnextswap(az,bz)                                        \
---
> #define azbz)                                        \
(87.2 %, 26163 bytes)
741c741
< #define az,bz)                                        \
---
> #define bz)                                        \
741c741
< #define az,bz)                                        \
---
> #define ,)                                        \
741c741
< #define az,bz)                                        \
---
> #define )                                        \
741c741
< #define az,bz)                                        \
---
> #define ,bz                                        \
741c741
< #define az,bz)                                        \
---
> #define bz                                        \
(87.2 %, 26160 bytes)
741c741
< #define bz)                                        \
---
> #define                                         \
741c741
< #define bz)                                        \
---
> #define )                                        
741c741
< #define bz)                                        \
---
> #define                                         
741c741
< #define bz)                                        \
---
> #define )                                        \
745c745
< #define MAIN_QSORT_SMALL_THRESH 0
---
> define MAIN_QSORT_SMALL_THRESH 0
741c741
< #define bz)                                        \
---
> #define                                         \
745c745
< #define MAIN_QSORT_SMALL_THRESH 0
---
> define MAIN_QSORT_SMALL_THRESH 0
741c741
< #define bz)                                        \
---
> #define )                                        
745c745
< #define MAIN_QSORT_SMALL_THRESH 0
---
> define MAIN_QSORT_SMALL_THRESH 0
741c741
< #define bz)                                        \
---
> #define                                         
745c745
< #define MAIN_QSORT_SMALL_THRESH 0
---
> define MAIN_QSORT_SMALL_THRESH 0
741c741
< #define bz)                                        \
---
> #define bz                                        \
741c741
< #define bz)                                        \
---
> #define bz                                        
(87.2 %, 26159 bytes)
741c741
< #define bz                                        \
---
> #define bz                                        
741c741
< #define bz                                        \
---
> #define bz                                        
745c745
< #define MAIN_QSORT_SMALL_THRESH 0
---
> define MAIN_QSORT_SMALL_THRESH 0
741c741
< #define bz                                        \
---
> #define bz                                        
745c745
< #define MAIN_QSORT_SMALL_THRESH 0
---
> # MAIN_QSORT_SMALL_THRESH 0
741c741
< #define bz                                        \
---
> #define bz                                        
745c745
< #define MAIN_QSORT_SMALL_THRESH 0
---
>  MAIN_QSORT_SMALL_THRESH 0
741c741
< #define bz                                        \
---
> #define bz                                        
745c745
< #define MAIN_QSORT_SMALL_THRESH 0
---
> #define  0
741c741
< #define bz                                        \
---
> #define bz                                        
745c745
< #define MAIN_QSORT_SMALL_THRESH 0
---
> define  0
741c741
< #define bz                                        \
---
> #define bz                                        
745c745
< #define MAIN_QSORT_SMALL_THRESH 0
---
> #  0
(87.2 %, 26158 bytes)
745c745
< #define MAIN_QSORT_SMALL_THRESH 0
---
> define MAIN_QSORT_SMALL_THRESH 0
745c745
< #define MAIN_QSORT_SMALL_THRESH 0
---
>  MAIN_QSORT_SMALL_THRESH 0
745c745
< #define MAIN_QSORT_SMALL_THRESH 0
---
> define  0
745c745
< #define MAIN_QSORT_SMALL_THRESH 0
---
>   0
745c745
< #define MAIN_QSORT_SMALL_THRESH 0
---
> define MAIN_QSORT_SMALL_THRESH 
745c745
< #define MAIN_QSORT_SMALL_THRESH 0
---
>  MAIN_QSORT_SMALL_THRESH 
745c745
< #define MAIN_QSORT_SMALL_THRESH 0
---
> define  
745c745
< #define MAIN_QSORT_SMALL_THRESH 0
---
>   
745c745
< #define MAIN_QSORT_SMALL_THRESH 0
---
> # MAIN_QSORT_SMALL_THRESH 0
745c745
< #define MAIN_QSORT_SMALL_THRESH 0
---
> #  0
(87.3 %, 26127 bytes)
746c746
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
---
>   BZ_N_RADIX + BZ_N_QSORT)
746c746
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
---
> # MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
746c746
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
---
> #  (BZ_N_RADIX + BZ_N_QSORT)
746c746
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
---
> # MAIN_QSORT_DEPTH_THRESH BZ_N_RADIX + BZ_N_QSORT)
746c746
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
---
> #  BZ_N_RADIX + BZ_N_QSORT)
746c746
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
---
> # MAIN_QSORT_DEPTH_THRESH ( + BZ_N_QSORT)
746c746
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
---
> #  ( + BZ_N_QSORT)
746c746
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
---
> # MAIN_QSORT_DEPTH_THRESH  + BZ_N_QSORT)
746c746
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
---
> #   + BZ_N_QSORT)
746c746
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
---
> #define  (BZ_N_RADIX + BZ_N_QSORT)
746c746
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
---
> #define  BZ_N_RADIX + BZ_N_QSORT)
746c746
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
---
> #define  ( + BZ_N_QSORT)
746c746
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
---
> #define   + BZ_N_QSORT)
746c746
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
---
> #define  (BZ_N_RADIX  BZ_N_QSORT)
746c746
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
---
> #define  BZ_N_RADIX  BZ_N_QSORT)
(87.3 %, 26103 bytes)
746c746
< #define  BZ_N_RADIX + BZ_N_QSORT)
---
> #define    BZ_N_QSORT)
746c746
< #define  BZ_N_RADIX + BZ_N_QSORT)
---
> #define   + )
746c746
< #define  BZ_N_RADIX + BZ_N_QSORT)
---
> #define    )
746c746
< #define  BZ_N_RADIX + BZ_N_QSORT)
---
> #define   + BZ_N_QSORT
746c746
< #define  BZ_N_RADIX + BZ_N_QSORT)
---
> #define    BZ_N_QSORT
(87.3 %, 26092 bytes)
746c746
< #define    BZ_N_QSORT)
---
> #define    
746,747c746,747
< #define    BZ_N_QSORT)
< #define MAIN_QSORT_STACK_SIZE 0
---
> #define    )
> define MAIN_QSORT_STACK_SIZE 0
746,747c746,747
< #define    BZ_N_QSORT)
< #define MAIN_QSORT_STACK_SIZE 0
---
> #define    
> define MAIN_QSORT_STACK_SIZE 0
746,747c746,747
< #define    BZ_N_QSORT)
< #define MAIN_QSORT_STACK_SIZE 0
---
> #define    )
> # MAIN_QSORT_STACK_SIZE 0
746,747c746,747
< #define    BZ_N_QSORT)
< #define MAIN_QSORT_STACK_SIZE 0
---
> #define    
> # MAIN_QSORT_STACK_SIZE 0
746,747c746,747
< #define    BZ_N_QSORT)
< #define MAIN_QSORT_STACK_SIZE 0
---
> #define    )
>  MAIN_QSORT_STACK_SIZE 0
746,747c746,747
< #define    BZ_N_QSORT)
< #define MAIN_QSORT_STACK_SIZE 0
---
> #define    
>  MAIN_QSORT_STACK_SIZE 0
746c746
< #define    BZ_N_QSORT)
---
> #define    BZ_N_QSORT
746,747c746,747
< #define    BZ_N_QSORT)
< #define MAIN_QSORT_STACK_SIZE 0
---
> #define    BZ_N_QSORT
> define MAIN_QSORT_STACK_SIZE 0
746,747c746,747
< #define    BZ_N_QSORT)
< #define MAIN_QSORT_STACK_SIZE 0
---
> #define    BZ_N_QSORT
> # MAIN_QSORT_STACK_SIZE 0
746,747c746,747
< #define    BZ_N_QSORT)
< #define MAIN_QSORT_STACK_SIZE 0
---
> #define    BZ_N_QSORT
>  MAIN_QSORT_STACK_SIZE 0
746,747c746,747
< #define    BZ_N_QSORT)
< #define MAIN_QSORT_STACK_SIZE 0
---
> #define    BZ_N_QSORT
> #define  0
746,747c746,747
< #define    BZ_N_QSORT)
< #define MAIN_QSORT_STACK_SIZE 0
---
> #define    BZ_N_QSORT
> define  0
746,747c746,747
< #define    BZ_N_QSORT)
< #define MAIN_QSORT_STACK_SIZE 0
---
> #define    BZ_N_QSORT
> #  0
(87.3 %, 26091 bytes)
747c747
< #define MAIN_QSORT_STACK_SIZE 0
---
> define MAIN_QSORT_STACK_SIZE 0
747c747
< #define MAIN_QSORT_STACK_SIZE 0
---
>  MAIN_QSORT_STACK_SIZE 0
747c747
< #define MAIN_QSORT_STACK_SIZE 0
---
> define  0
747c747
< #define MAIN_QSORT_STACK_SIZE 0
---
>   0
747c747
< #define MAIN_QSORT_STACK_SIZE 0
---
> define MAIN_QSORT_STACK_SIZE 
747c747
< #define MAIN_QSORT_STACK_SIZE 0
---
>  MAIN_QSORT_STACK_SIZE 
747c747
< #define MAIN_QSORT_STACK_SIZE 0
---
> define  
747c747
< #define MAIN_QSORT_STACK_SIZE 0
---
>   
747c747
< #define MAIN_QSORT_STACK_SIZE 0
---
> # MAIN_QSORT_STACK_SIZE 0
747c747
< #define MAIN_QSORT_STACK_SIZE 0
---
> #  0
747c747
< #define MAIN_QSORT_STACK_SIZE 0
---
> # MAIN_QSORT_STACK_SIZE 
747c747
< #define MAIN_QSORT_STACK_SIZE 0
---
> #  
(87.3 %, 26062 bytes)
751,752c751,752
< #undef mswap
< #undef mvswap
---
>  
> undef mvswap
751c751
< #undef mswap
---
> # mswap
751c751
< #undef mswap
---
> # 
751,752c751,752
< #undef mswap
< #undef mvswap
---
> # mswap
> undef mvswap
751,752c751,752
< #undef mswap
< #undef mvswap
---
> # 
> undef mvswap
751,752c751,752
< #undef mswap
< #undef mvswap
---
> # mswap
> # mvswap
751,752c751,752
< #undef mswap
< #undef mvswap
---
> # 
> # mvswap
751,752c751,752
< #undef mswap
< #undef mvswap
---
> # mswap
>  mvswap
751,752c751,752
< #undef mswap
< #undef mvswap
---
> # 
>  mvswap
751c751
< #undef mswap
---
> #undef 
751,752c751,752
< #undef mswap
< #undef mvswap
---
> #undef 
> undef mvswap
751,752c751,752
< #undef mswap
< #undef mvswap
---
> #undef 
> # mvswap
751,752c751,752
< #undef mswap
< #undef mvswap
---
> #undef 
>  mvswap
751,752c751,752
< #undef mswap
< #undef mvswap
---
> #undef 
> #undef 
751,752c751,752
< #undef mswap
< #undef mvswap
---
> #undef 
> undef 
751,752c751,752
< #undef mswap
< #undef mvswap
---
> #undef 
> # 
751,752c751,752
< #undef mswap
< #undef mvswap
---
> #undef 
>  
752c752
< #undef mvswap
---
> undef mvswap
752c752
< #undef mvswap
---
>  mvswap
752c752
< #undef mvswap
---
> undef 
(87.3 %, 26052 bytes)
752c752
< #undef mvswap
---
>  mvswap
752c752
< #undef mvswap
---
> undef 
752c752
< #undef mvswap
---
>  
752,753c752,753
< #undef mvswap
< #undef mpush
---
> undef mvswap
> undef mpush
752,753c752,753
< #undef mvswap
< #undef mpush
---
>  mvswap
> undef mpush
752,753c752,753
< #undef mvswap
< #undef mpush
---
> undef 
> undef mpush
752,753c752,753
< #undef mvswap
< #undef mpush
---
>  
> undef mpush
752c752
< #undef mvswap
---
> # mvswap
752c752
< #undef mvswap
---
> # 
(87.3 %, 26040 bytes)
753c753
< #undef mpush
---
>  
753,754c753,754
< #undef mpush
< #undef mpop
---
> undef mpush
> undef mpop
753,754c753,754
< #undef mpush
< #undef mpop
---
>  mpush
> undef mpop
753,754c753,754
< #undef mpush
< #undef mpop
---
> undef 
> undef mpop
753,754c753,754
< #undef mpush
< #undef mpop
---
>  
> undef mpop
753c753
< #undef mpush
---
> # mpush
753c753
< #undef mpush
---
> # 
(87.3 %, 26029 bytes)
754c754
< #undef mpop
---
>  
754,755c754,755
< #undef mpop
< #undef mmin
---
> undef mpop
> undef mmin
754,755c754,755
< #undef mpop
< #undef mmin
---
>  mpop
> undef mmin
754,755c754,755
< #undef mpop
< #undef mmin
---
> undef 
> undef mmin
754,755c754,755
< #undef mpop
< #undef mmin
---
>  
> undef mmin
754c754
< #undef mpop
---
> # mpop
754c754
< #undef mpop
---
> # 
(87.3 %, 26019 bytes)
755c755
< #undef mmin
---
>  
755,756c755,756
< #undef mmin
< #undef mnextsize
---
> undef mmin
> undef mnextsize
755,756c755,756
< #undef mmin
< #undef mnextsize
---
>  mmin
> undef mnextsize
755,756c755,756
< #undef mmin
< #undef mnextsize
---
> undef 
> undef mnextsize
755,756c755,756
< #undef mmin
< #undef mnextsize
---
>  
> undef mnextsize
755c755
< #undef mmin
---
> # mmin
755c755
< #undef mmin
---
> # 
(87.3 %, 26009 bytes)
756c756
< #undef mnextsize
---
>  
756,757c756,757
< #undef mnextsize
< #undef mnextswap
---
> undef mnextsize
> undef mnextswap
756,757c756,757
< #undef mnextsize
< #undef mnextswap
---
>  mnextsize
> undef mnextswap
756,757c756,757
< #undef mnextsize
< #undef mnextswap
---
> undef 
> undef mnextswap
756,757c756,757
< #undef mnextsize
< #undef mnextswap
---
>  
> undef mnextswap
756c756
< #undef mnextsize
---
> # mnextsize
756c756
< #undef mnextsize
---
> # 
(87.3 %, 25994 bytes)
757c757
< #undef mnextswap
---
>  
757,758c757,758
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
---
> undef mnextswap
> undef MAIN_QSORT_SMALL_THRESH
757,758c757,758
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
---
>  mnextswap
> undef MAIN_QSORT_SMALL_THRESH
757,758c757,758
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
---
> undef 
> undef MAIN_QSORT_SMALL_THRESH
757,758c757,758
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
---
>  
> undef MAIN_QSORT_SMALL_THRESH
757c757
< #undef mnextswap
---
> # mnextswap
757c757
< #undef mnextswap
---
> # 
(87.3 %, 25979 bytes)
758c758
< #undef MAIN_QSORT_SMALL_THRESH
---
>  
758,759c758,759
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
---
> undef MAIN_QSORT_SMALL_THRESH
> undef MAIN_QSORT_DEPTH_THRESH
758,759c758,759
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
---
>  MAIN_QSORT_SMALL_THRESH
> undef MAIN_QSORT_DEPTH_THRESH
758,759c758,759
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
---
> undef 
> undef MAIN_QSORT_DEPTH_THRESH
758,759c758,759
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
---
>  
> undef MAIN_QSORT_DEPTH_THRESH
758c758
< #undef MAIN_QSORT_SMALL_THRESH
---
> # MAIN_QSORT_SMALL_THRESH
758c758
< #undef MAIN_QSORT_SMALL_THRESH
---
> # 
(87.3 %, 25950 bytes)
759c759
< #undef MAIN_QSORT_DEPTH_THRESH
---
>  
759,760c759,760
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
---
> undef MAIN_QSORT_DEPTH_THRESH
> undef MAIN_QSORT_STACK_SIZE
759,760c759,760
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
---
>  MAIN_QSORT_DEPTH_THRESH
> undef MAIN_QSORT_STACK_SIZE
759,760c759,760
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
---
> undef 
> undef MAIN_QSORT_STACK_SIZE
759,760c759,760
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
---
>  
> undef MAIN_QSORT_STACK_SIZE
759c759
< #undef MAIN_QSORT_DEPTH_THRESH
---
> # MAIN_QSORT_DEPTH_THRESH
759c759
< #undef MAIN_QSORT_DEPTH_THRESH
---
> # 
(87.4 %, 25921 bytes)
760c760
< #undef MAIN_QSORT_STACK_SIZE
---
>  
760c760
< #undef MAIN_QSORT_STACK_SIZE
---
> undef MAIN_QSORT_STACK_SIZE
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
760c760
< #undef MAIN_QSORT_STACK_SIZE
---
>  MAIN_QSORT_STACK_SIZE
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
760c760
< #undef MAIN_QSORT_STACK_SIZE
---
> undef 
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
760c760
< #undef MAIN_QSORT_STACK_SIZE
---
>  
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
760c760
< #undef MAIN_QSORT_STACK_SIZE
---
> # MAIN_QSORT_STACK_SIZE
760c760
< #undef MAIN_QSORT_STACK_SIZE
---
> # 
(87.4 %, 25894 bytes)
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
>  (b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> define BIGFREQb) (ftab[((b)+1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
>  BIGFREQb) (ftab[((b)+1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> define b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
>  b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> # BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> # (b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> # BIGFREQb) (ftab[((b)+1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> # b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> # BIGFREQ() (ftab[((b)+1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> # () (ftab[((b)+1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> # BIGFREQ) (ftab[((b)+1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> # ) (ftab[((b)+1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define (b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define () (ftab[((b)+1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define ) (ftab[((b)+1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define (b (ftab[((b)+1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define b (ftab[((b)+1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define ( (ftab[((b)+1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define  (ftab[((b)+1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb) (ftab[((b)+1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ) (ftab[((b)+1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb (ftab[((b)+1) << 8] - ftab[(b) << 8])
(87.4 %, 25893 bytes)
766c766
< #define BIGFREQb) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb (ftab[((b)+1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQb) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb ftab[((b)+1) << 8] - ftab[(b) << 8])
(87.4 %, 25892 bytes)
766c766
< #define BIGFREQb (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb ftab[((b)+1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQb (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb [((b)+1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQb (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb ftab((b)+1) << 8] - ftab[(b) << 8])
(87.4 %, 25891 bytes)
766c766
< #define BIGFREQb ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb [((b)+1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQb ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb ((b)+1) << 8] - ftab[(b) << 8])
(87.4 %, 25887 bytes)
766c766
< #define BIGFREQb [((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb ((b)+1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQb [((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb (b)+1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQb [((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb (b)+1) << 8] - ftab[(b) << 8])
(87.4 %, 25886 bytes)
766c766
< #define BIGFREQb ((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb (b)+1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQb ((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb b)+1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQb ((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb ()+1) << 8] - ftab[(b) << 8])
(87.4 %, 25885 bytes)
766c766
< #define BIGFREQb (b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb b)+1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQb (b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb )+1) << 8] - ftab[(b) << 8])
(87.4 %, 25884 bytes)
766c766
< #define BIGFREQb b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb )+1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQb b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb +1) << 8] - ftab[(b) << 8])
(87.4 %, 25883 bytes)
766c766
< #define BIGFREQb )+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb +1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQb )+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb 1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQb )+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb +) << 8] - ftab[(b) << 8])
(87.4 %, 25882 bytes)
766c766
< #define BIGFREQb +1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb 1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQb +1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb ) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQb +1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb 1 << 8] - ftab[(b) << 8])
(87.4 %, 25881 bytes)
766c766
< #define BIGFREQb 1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb ) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQb 1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb  << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQb 1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb )  8] - ftab[(b) << 8])
(87.4 %, 25880 bytes)
766c766
< #define BIGFREQb ) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb  << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQb ) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb   8] - ftab[(b) << 8])
766c766
< #define BIGFREQb ) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb  << ] - ftab[(b) << 8])
(87.4 %, 25879 bytes)
766c766
< #define BIGFREQb  << 8] - ftab[(b) << 8])
---
> #define BIGFREQb   8] - ftab[(b) << 8])
766c766
< #define BIGFREQb  << 8] - ftab[(b) << 8])
---
> #define BIGFREQb   ] - ftab[(b) << 8])
(87.4 %, 25877 bytes)
766c766
< #define BIGFREQb   8] - ftab[(b) << 8])
---
> #define BIGFREQb   ] - ftab[(b) << 8])
766c766
< #define BIGFREQb   8] - ftab[(b) << 8])
---
> #define BIGFREQb    - ftab[(b) << 8])
(87.4 %, 25876 bytes)
766c766
< #define BIGFREQb   ] - ftab[(b) << 8])
---
> #define BIGFREQb    - ftab[(b) << 8])
766c766
< #define BIGFREQb   ] - ftab[(b) << 8])
---
> #define BIGFREQb     ftab[(b) << 8])
766c766
< #define BIGFREQb   ] - ftab[(b) << 8])
---
> #define BIGFREQb    - [(b) << 8])
(87.4 %, 25875 bytes)
766c766
< #define BIGFREQb    - ftab[(b) << 8])
---
> #define BIGFREQb     ftab[(b) << 8])
766c766
< #define BIGFREQb    - ftab[(b) << 8])
---
> #define BIGFREQb     [(b) << 8])
(87.4 %, 25874 bytes)
766c766
< #define BIGFREQb     ftab[(b) << 8])
---
> #define BIGFREQb     [(b) << 8])
766c766
< #define BIGFREQb     ftab[(b) << 8])
---
> #define BIGFREQb     (b) << 8])
(87.4 %, 25870 bytes)
766c766
< #define BIGFREQb     [(b) << 8])
---
> #define BIGFREQb     (b) << 8])
766c766
< #define BIGFREQb     [(b) << 8])
---
> #define BIGFREQb     b) << 8])
766c766
< #define BIGFREQb     [(b) << 8])
---
> #define BIGFREQb     () << 8])
(87.4 %, 25869 bytes)
766c766
< #define BIGFREQb     (b) << 8])
---
> #define BIGFREQb     b) << 8])
766c766
< #define BIGFREQb     (b) << 8])
---
> #define BIGFREQb     ) << 8])
(87.4 %, 25868 bytes)
766c766
< #define BIGFREQb     b) << 8])
---
> #define BIGFREQb     ) << 8])
766c766
< #define BIGFREQb     b) << 8])
---
> #define BIGFREQb      << 8])
(87.4 %, 25867 bytes)
766c766
< #define BIGFREQb     ) << 8])
---
> #define BIGFREQb      << 8])
766c766
< #define BIGFREQb     ) << 8])
---
> #define BIGFREQb       8])
(87.4 %, 25866 bytes)
766c766
< #define BIGFREQb      << 8])
---
> #define BIGFREQb       8])
766c766
< #define BIGFREQb      << 8])
---
> #define BIGFREQb       ])
(87.4 %, 25864 bytes)
766c766
< #define BIGFREQb       8])
---
> #define BIGFREQb       ])
766c766
< #define BIGFREQb       8])
---
> #define BIGFREQb       )
(87.4 %, 25863 bytes)
766c766
< #define BIGFREQb       ])
---
> #define BIGFREQb       )
766c766
< #define BIGFREQb       ])
---
> #define BIGFREQb       
766,767c766,767
< #define BIGFREQb       ])
< #define SETMASK (1 << 1)
---
> #define BIGFREQb       )
> define SETMASK (1 << 1)
766,767c766,767
< #define BIGFREQb       ])
< #define SETMASK (1 << 1)
---
> #define BIGFREQb       
> define SETMASK (1 << 1)
766,767c766,767
< #define BIGFREQb       ])
< #define SETMASK (1 << 1)
---
> #define BIGFREQb       )
> # SETMASK (1 << 1)
766,767c766,767
< #define BIGFREQb       ])
< #define SETMASK (1 << 1)
---
> #define BIGFREQb       
> # SETMASK (1 << 1)
(87.4 %, 25862 bytes)
766c766
< #define BIGFREQb       )
---
> #define BIGFREQb       
766,767c766,767
< #define BIGFREQb       )
< #define SETMASK (1 << 1)
---
> #define BIGFREQb       
> define SETMASK (1 << 1)
766,767c766,767
< #define BIGFREQb       )
< #define SETMASK (1 << 1)
---
> #define BIGFREQb       
> # SETMASK (1 << 1)
766,767c766,767
< #define BIGFREQb       )
< #define SETMASK (1 << 1)
---
> #define BIGFREQb       
>  SETMASK (1 << 1)
766,767c766,767
< #define BIGFREQb       )
< #define SETMASK (1 << 1)
---
> #define BIGFREQb       
> #define  (1 << 1)
766,767c766,767
< #define BIGFREQb       )
< #define SETMASK (1 << 1)
---
> #define BIGFREQb       
> define  (1 << 1)
766,767c766,767
< #define BIGFREQb       )
< #define SETMASK (1 << 1)
---
> #define BIGFREQb       
> #  (1 << 1)
766,767c766,767
< #define BIGFREQb       )
< #define SETMASK (1 << 1)
---
> #define BIGFREQb       
>   (1 << 1)
767c767
< #define SETMASK (1 << 1)
---
> define SETMASK (1 << 1)
767c767
< #define SETMASK (1 << 1)
---
>  SETMASK (1 << 1)
767c767
< #define SETMASK (1 << 1)
---
> define  (1 << 1)
767c767
< #define SETMASK (1 << 1)
---
>   (1 << 1)
767c767
< #define SETMASK (1 << 1)
---
> define SETMASK 1 << 1)
767c767
< #define SETMASK (1 << 1)
---
>  SETMASK 1 << 1)
767c767
< #define SETMASK (1 << 1)
---
> define  1 << 1)
767c767
< #define SETMASK (1 << 1)
---
>   1 << 1)
767c767
< #define SETMASK (1 << 1)
---
> # SETMASK (1 << 1)
767c767
< #define SETMASK (1 << 1)
---
> #  (1 << 1)
(87.4 %, 25861 bytes)
767c767
< #define SETMASK (1 << 1)
---
> define SETMASK (1 << 1)
767c767
< #define SETMASK (1 << 1)
---
>  SETMASK (1 << 1)
767c767
< #define SETMASK (1 << 1)
---
> define  (1 << 1)
767c767
< #define SETMASK (1 << 1)
---
>   (1 << 1)
767c767
< #define SETMASK (1 << 1)
---
> define SETMASK 1 << 1)
767c767
< #define SETMASK (1 << 1)
---
>  SETMASK 1 << 1)
767c767
< #define SETMASK (1 << 1)
---
> define  1 << 1)
767c767
< #define SETMASK (1 << 1)
---
>   1 << 1)
767c767
< #define SETMASK (1 << 1)
---
> # SETMASK (1 << 1)
767c767
< #define SETMASK (1 << 1)
---
> #  (1 << 1)
767c767
< #define SETMASK (1 << 1)
---
> # SETMASK 1 << 1)
767c767
< #define SETMASK (1 << 1)
---
> #  1 << 1)
767c767
< #define SETMASK (1 << 1)
---
> # SETMASK ( << 1)
767c767
< #define SETMASK (1 << 1)
---
> #  ( << 1)
767c767
< #define SETMASK (1 << 1)
---
> # SETMASK  << 1)
767c767
< #define SETMASK (1 << 1)
---
> #   << 1)
767c767
< #define SETMASK (1 << 1)
---
> #define  (1 << 1)
767c767
< #define SETMASK (1 << 1)
---
> #define  1 << 1)
767c767
< #define SETMASK (1 << 1)
---
> #define  ( << 1)
767c767
< #define SETMASK (1 << 1)
---
> #define   << 1)
767c767
< #define SETMASK (1 << 1)
---
> #define  (1  1)
767c767
< #define SETMASK (1 << 1)
---
> #define  1  1)
767c767
< #define SETMASK (1 << 1)
---
> #define  (  1)
767c767
< #define SETMASK (1 << 1)
---
> #define    1)
767c767
< #define SETMASK (1 << 1)
---
> #define SETMASK 1 << 1)
767c767
< #define SETMASK (1 << 1)
---
> #define SETMASK  << 1)
(87.4 %, 25860 bytes)
767c767
< #define SETMASK 1 << 1)
---
> #define SETMASK  << 1)
767c767
< #define SETMASK 1 << 1)
---
> #define SETMASK   1)
767c767
< #define SETMASK 1 << 1)
---
> #define SETMASK  << )
(87.4 %, 25859 bytes)
767c767
< #define SETMASK  << 1)
---
> #define SETMASK   1)
767c767
< #define SETMASK  << 1)
---
> #define SETMASK   )
767c767
< #define SETMASK  << 1)
---
> #define SETMASK   1
(87.4 %, 25857 bytes)
767c767
< #define SETMASK   1)
---
> #define SETMASK   )
767c767
< #define SETMASK   1)
---
> #define SETMASK   
(87.4 %, 25856 bytes)
767c767
< #define SETMASK   )
---
> #define SETMASK   
767,768c767,768
< #define SETMASK   )
< #define CLEARMASK (~(SETMASK))
---
> #define SETMASK   
> define CLEARMASK (~(SETMASK))
767,768c767,768
< #define SETMASK   )
< #define CLEARMASK (~(SETMASK))
---
> #define SETMASK   
> # CLEARMASK (~(SETMASK))
767,768c767,768
< #define SETMASK   )
< #define CLEARMASK (~(SETMASK))
---
> #define SETMASK   
>  CLEARMASK (~(SETMASK))
767,768c767,768
< #define SETMASK   )
< #define CLEARMASK (~(SETMASK))
---
> #define SETMASK   
> #define  (~(SETMASK))
767,768c767,768
< #define SETMASK   )
< #define CLEARMASK (~(SETMASK))
---
> #define SETMASK   
> define  (~(SETMASK))
767,768c767,768
< #define SETMASK   )
< #define CLEARMASK (~(SETMASK))
---
> #define SETMASK   
> #  (~(SETMASK))
767,768c767,768
< #define SETMASK   )
< #define CLEARMASK (~(SETMASK))
---
> #define SETMASK   
>   (~(SETMASK))
768c768
< #define CLEARMASK (~(SETMASK))
---
> define CLEARMASK (~(SETMASK))
768c768
< #define CLEARMASK (~(SETMASK))
---
>  CLEARMASK (~(SETMASK))
768c768
< #define CLEARMASK (~(SETMASK))
---
> define  (~(SETMASK))
768c768
< #define CLEARMASK (~(SETMASK))
---
>   (~(SETMASK))
768c768
< #define CLEARMASK (~(SETMASK))
---
> define CLEARMASK ~(SETMASK))
768c768
< #define CLEARMASK (~(SETMASK))
---
>  CLEARMASK ~(SETMASK))
768c768
< #define CLEARMASK (~(SETMASK))
---
> define  ~(SETMASK))
768c768
< #define CLEARMASK (~(SETMASK))
---
>   ~(SETMASK))
768c768
< #define CLEARMASK (~(SETMASK))
---
> # CLEARMASK (~(SETMASK))
768c768
< #define CLEARMASK (~(SETMASK))
---
> #  (~(SETMASK))
768c768
< #define CLEARMASK (~(SETMASK))
---
> # CLEARMASK ~(SETMASK))
(87.4 %, 25855 bytes)
768c768
< #define CLEARMASK (~(SETMASK))
---
> define CLEARMASK (~(SETMASK))
768c768
< #define CLEARMASK (~(SETMASK))
---
>  CLEARMASK (~(SETMASK))
768c768
< #define CLEARMASK (~(SETMASK))
---
> define  (~(SETMASK))
768c768
< #define CLEARMASK (~(SETMASK))
---
>   (~(SETMASK))
768c768
< #define CLEARMASK (~(SETMASK))
---
> define CLEARMASK ~(SETMASK))
768c768
< #define CLEARMASK (~(SETMASK))
---
>  CLEARMASK ~(SETMASK))
768c768
< #define CLEARMASK (~(SETMASK))
---
> define  ~(SETMASK))
768c768
< #define CLEARMASK (~(SETMASK))
---
>   ~(SETMASK))
768c768
< #define CLEARMASK (~(SETMASK))
---
> # CLEARMASK (~(SETMASK))
768c768
< #define CLEARMASK (~(SETMASK))
---
> #  (~(SETMASK))
768c768
< #define CLEARMASK (~(SETMASK))
---
> # CLEARMASK ~(SETMASK))
768c768
< #define CLEARMASK (~(SETMASK))
---
> #  ~(SETMASK))
768c768
< #define CLEARMASK (~(SETMASK))
---
> # CLEARMASK ((SETMASK))
768c768
< #define CLEARMASK (~(SETMASK))
---
> #  ((SETMASK))
768c768
< #define CLEARMASK (~(SETMASK))
---
> # CLEARMASK (SETMASK))
768c768
< #define CLEARMASK (~(SETMASK))
---
> #  (SETMASK))
768c768
< #define CLEARMASK (~(SETMASK))
---
> #define  (~(SETMASK))
768c768
< #define CLEARMASK (~(SETMASK))
---
> #define  ~(SETMASK))
768c768
< #define CLEARMASK (~(SETMASK))
---
> #define  ((SETMASK))
768c768
< #define CLEARMASK (~(SETMASK))
---
> #define  (SETMASK))
768c768
< #define CLEARMASK (~(SETMASK))
---
> #define  (~SETMASK))
768c768
< #define CLEARMASK (~(SETMASK))
---
> #define  ~SETMASK))
768c768
< #define CLEARMASK (~(SETMASK))
---
> #define  (SETMASK))
768c768
< #define CLEARMASK (~(SETMASK))
---
> #define  SETMASK))
768c768
< #define CLEARMASK (~(SETMASK))
---
> #define CLEARMASK ~(SETMASK))
(87.4 %, 25843 bytes)
768c768
< #define  SETMASK))
---
> #define  
772c772
< #undef BIGFREQ
---
> undef BIGFREQ
768c768
< #define  SETMASK))
---
> #define  SETMASK)
768c768
< #define  SETMASK))
---
> #define  SETMASK
(87.4 %, 25842 bytes)
768c768
< #define  SETMASK)
---
> #define  SETMASK
768c768
< #define  SETMASK)
---
> #define  SETMASK
772c772
< #undef BIGFREQ
---
> undef BIGFREQ
768c768
< #define  SETMASK)
---
> #define  SETMASK
772c772
< #undef BIGFREQ
---
> # BIGFREQ
768c768
< #define  SETMASK)
---
> #define  SETMASK
772c772
< #undef BIGFREQ
---
>  BIGFREQ
768c768
< #define  SETMASK)
---
> #define  SETMASK
772c772
< #undef BIGFREQ
---
> #undef 
768c768
< #define  SETMASK)
---
> #define  SETMASK
772c772
< #undef BIGFREQ
---
> undef 
768c768
< #define  SETMASK)
---
> #define  SETMASK
772c772
< #undef BIGFREQ
---
> # 
(87.4 %, 25841 bytes)
772c772
< #undef BIGFREQ
---
> undef BIGFREQ
772c772
< #undef BIGFREQ
---
>  BIGFREQ
772c772
< #undef BIGFREQ
---
> undef 
772c772
< #undef BIGFREQ
---
>  
772,773c772,773
< #undef BIGFREQ
< #undef SETMASK
---
> undef BIGFREQ
> undef SETMASK
772,773c772,773
< #undef BIGFREQ
< #undef SETMASK
---
>  BIGFREQ
> undef SETMASK
772,773c772,773
< #undef BIGFREQ
< #undef SETMASK
---
> undef 
> undef SETMASK
772,773c772,773
< #undef BIGFREQ
< #undef SETMASK
---
>  
> undef SETMASK
772c772
< #undef BIGFREQ
---
> # BIGFREQ
772c772
< #undef BIGFREQ
---
> # 
(87.4 %, 25828 bytes)
773c773
< #undef SETMASK
---
>  
773,774c773,774
< #undef SETMASK
< #undef CLEARMASK
---
> undef SETMASK
> undef CLEARMASK
773,774c773,774
< #undef SETMASK
< #undef CLEARMASK
---
>  SETMASK
> undef CLEARMASK
773,774c773,774
< #undef SETMASK
< #undef CLEARMASK
---
> undef 
> undef CLEARMASK
773,774c773,774
< #undef SETMASK
< #undef CLEARMASK
---
>  
> undef CLEARMASK
773c773
< #undef SETMASK
---
> # SETMASK
773c773
< #undef SETMASK
---
> # 
(87.4 %, 25815 bytes)
774c774
< #undef CLEARMASK
---
>  
774c774
< #undef CLEARMASK
---
> undef CLEARMASK
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0x0)
---
> define WEIGHTOF(zz0)  ((zz0) & 0x0)
774c774
< #undef CLEARMASK
---
>  CLEARMASK
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0x0)
---
> define WEIGHTOF(zz0)  ((zz0) & 0x0)
774c774
< #undef CLEARMASK
---
> undef 
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0x0)
---
> define WEIGHTOF(zz0)  ((zz0) & 0x0)
774c774
< #undef CLEARMASK
---
>  
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0x0)
---
> define WEIGHTOF(zz0)  ((zz0) & 0x0)
774c774
< #undef CLEARMASK
---
> # CLEARMASK
774c774
< #undef CLEARMASK
---
> # 
(87.4 %, 25800 bytes)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0x0)
---
>  (zz0)  ((zz0) & 0x0)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0x0)
---
> define WEIGHTOFzz0)  ((zz0) & 0x0)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0x0)
---
>  WEIGHTOFzz0)  ((zz0) & 0x0)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0x0)
---
> define zz0)  ((zz0) & 0x0)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0x0)
---
>  zz0)  ((zz0) & 0x0)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0x0)
---
> # WEIGHTOF(zz0)  ((zz0) & 0x0)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0x0)
---
> # (zz0)  ((zz0) & 0x0)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0x0)
---
> # WEIGHTOFzz0)  ((zz0) & 0x0)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0x0)
---
> # zz0)  ((zz0) & 0x0)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0x0)
---
> # WEIGHTOF()  ((zz0) & 0x0)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0x0)
---
> # ()  ((zz0) & 0x0)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0x0)
---
> # WEIGHTOF)  ((zz0) & 0x0)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0x0)
---
> # )  ((zz0) & 0x0)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0x0)
---
> #define (zz0)  ((zz0) & 0x0)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0x0)
---
> #define zz0)  ((zz0) & 0x0)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0x0)
---
> #define ()  ((zz0) & 0x0)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0x0)
---
> #define )  ((zz0) & 0x0)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0x0)
---
> #define (zz0  ((zz0) & 0x0)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0x0)
---
> #define zz0  ((zz0) & 0x0)
(87.4 %, 25791 bytes)
793c793
< #define zz0)  ((zz0) & 0x0)
---
> #define   ((zz0) & 0x0)
793c793
< #define zz0)  ((zz0) & 0x0)
---
> #define )  (zz0) & 0x0)
793c793
< #define zz0)  ((zz0) & 0x0)
---
> #define   (zz0) & 0x0)
793c793
< #define zz0)  ((zz0) & 0x0)
---
> #define )  (zz0) & 0x0)
793c793
< #define zz0)  ((zz0) & 0x0)
---
> #define   (zz0) & 0x0)
793c793
< #define zz0)  ((zz0) & 0x0)
---
> #define )  zz0) & 0x0)
793c793
< #define zz0)  ((zz0) & 0x0)
---
> #define   zz0) & 0x0)
793c793
< #define zz0)  ((zz0) & 0x0)
---
> #define zz0  ((zz0) & 0x0)
(87.4 %, 25785 bytes)
793c793
< #define   zz0) & 0x0)
---
> #define     )
793c793
< #define   zz0) & 0x0)
---
> #define   zz0 & 0x0)
793c793
< #define   zz0) & 0x0)
---
> #define   zz0  0x0)
(87.4 %, 25784 bytes)
793c793
< #define   zz0 & 0x0)
---
> #define   zz0  0x0)
793c793
< #define   zz0 & 0x0)
---
> #define   zz0  )
(87.4 %, 25783 bytes)
793c793
< #define   zz0  0x0)
---
> #define   zz0  )
793c793
< #define   zz0  0x0)
---
> #define   zz0  
793,794c793,794
< #define   zz0  0x0)
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
> #define   zz0  )
> define DEPTHOF(zz1)   ((zz1) & 0xf)
(87.4 %, 25780 bytes)
793c793
< #define   zz0  )
---
> #define   zz0  
793,794c793,794
< #define   zz0  )
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
> #define   zz0  
> define DEPTHOF(zz1)   ((zz1) & 0xf)
793,794c793,794
< #define   zz0  )
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
> #define   zz0  
> # DEPTHOF(zz1)   ((zz1) & 0xf)
793,794c793,794
< #define   zz0  )
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
> #define   zz0  
>  DEPTHOF(zz1)   ((zz1) & 0xf)
793,794c793,794
< #define   zz0  )
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
> #define   zz0  
> #define (zz1)   ((zz1) & 0xf)
793,794c793,794
< #define   zz0  )
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
> #define   zz0  
> define (zz1)   ((zz1) & 0xf)
793,794c793,794
< #define   zz0  )
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
> #define   zz0  
> # (zz1)   ((zz1) & 0xf)
793,794c793,794
< #define   zz0  )
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
> #define   zz0  
>  (zz1)   ((zz1) & 0xf)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
> define DEPTHOF(zz1)   ((zz1) & 0xf)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
>  DEPTHOF(zz1)   ((zz1) & 0xf)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
> define (zz1)   ((zz1) & 0xf)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
>  (zz1)   ((zz1) & 0xf)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
> define DEPTHOFzz1)   ((zz1) & 0xf)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
>  DEPTHOFzz1)   ((zz1) & 0xf)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
> define zz1)   ((zz1) & 0xf)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
>  zz1)   ((zz1) & 0xf)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
> # DEPTHOF(zz1)   ((zz1) & 0xf)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
> # (zz1)   ((zz1) & 0xf)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
> # DEPTHOFzz1)   ((zz1) & 0xf)
(87.4 %, 25779 bytes)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
> define DEPTHOF(zz1)   ((zz1) & 0xf)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
>  DEPTHOF(zz1)   ((zz1) & 0xf)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
> define (zz1)   ((zz1) & 0xf)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
>  (zz1)   ((zz1) & 0xf)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
> define DEPTHOFzz1)   ((zz1) & 0xf)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
>  DEPTHOFzz1)   ((zz1) & 0xf)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
> define zz1)   ((zz1) & 0xf)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
>  zz1)   ((zz1) & 0xf)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
> # DEPTHOF(zz1)   ((zz1) & 0xf)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
> # (zz1)   ((zz1) & 0xf)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
> # DEPTHOFzz1)   ((zz1) & 0xf)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
> # zz1)   ((zz1) & 0xf)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
> # DEPTHOF()   ((zz1) & 0xf)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
> # ()   ((zz1) & 0xf)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
> # DEPTHOF)   ((zz1) & 0xf)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
> # )   ((zz1) & 0xf)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
> #define (zz1)   ((zz1) & 0xf)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
> #define zz1)   ((zz1) & 0xf)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
> #define ()   ((zz1) & 0xf)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
> #define )   ((zz1) & 0xf)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
> #define (zz1   ((zz1) & 0xf)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0xf)
---
> #define zz1   ((zz1) & 0xf)
(87.4 %, 25771 bytes)
794c794
< #define zz1)   ((zz1) & 0xf)
---
> #define    ((zz1) & 0xf)
794c794
< #define zz1)   ((zz1) & 0xf)
---
> #define )   (zz1) & 0xf)
794c794
< #define zz1)   ((zz1) & 0xf)
---
> #define    (zz1) & 0xf)
794c794
< #define zz1)   ((zz1) & 0xf)
---
> #define )   (zz1) & 0xf)
794c794
< #define zz1)   ((zz1) & 0xf)
---
> #define    (zz1) & 0xf)
794c794
< #define zz1)   ((zz1) & 0xf)
---
> #define )   zz1) & 0xf)
794c794
< #define zz1)   ((zz1) & 0xf)
---
> #define    zz1) & 0xf)
794c794
< #define zz1)   ((zz1) & 0xf)
---
> #define zz1   ((zz1) & 0xf)
794c794
< #define zz1)   ((zz1) & 0xf)
---
> #define zz1   (zz1) & 0xf)
(87.4 %, 25765 bytes)
794c794
< #define    zz1) & 0xf)
---
> #define      )
794c794
< #define    zz1) & 0xf)
---
> #define    zz1 & 0xf)
794c794
< #define    zz1) & 0xf)
---
> #define    zz1  0xf)
794c794
< #define    zz1) & 0xf)
---
> #define    zz1 & )
(87.4 %, 25764 bytes)
794c794
< #define    zz1 & 0xf)
---
> #define    zz1  0xf)
794c794
< #define    zz1 & 0xf)
---
> #define    zz1  )
794c794
< #define    zz1 & 0xf)
---
> #define    zz1  0xf
(87.4 %, 25763 bytes)
794c794
< #define    zz1  0xf)
---
> #define    zz1  )
794c794
< #define    zz1  0xf)
---
> #define    zz1  
(87.4 %, 25760 bytes)
794c794
< #define    zz1  )
---
> #define    zz1  
794,795c794,795
< #define    zz1  )
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define    zz1  
> define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
794,795c794,795
< #define    zz1  )
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define    zz1  
> # MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
794,795c794,795
< #define    zz1  )
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define    zz1  
>  MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
794,795c794,795
< #define    zz1  )
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define    zz1  
> #define (zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
794,795c794,795
< #define    zz1  )
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define    zz1  
> define (zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
794,795c794,795
< #define    zz1  )
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define    zz1  
> # (zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
794,795c794,795
< #define    zz1  )
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define    zz1  
>  (zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
>  MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> define (zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
>  (zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> define MYMAXzz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
>  MYMAXzz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> define zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
>  zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
(87.4 %, 25759 bytes)
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
>  MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> define (zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
>  (zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> define MYMAXzz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
>  MYMAXzz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> define zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
>  zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> # MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> # (zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> # MYMAXzz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> # zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> # MYMAX(,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> # (,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> # MYMAX,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> # ,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define (zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define (,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define ,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define (zz2zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define zz2zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
(87.4 %, 25753 bytes)
795c795
< #define zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define ,) ((zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define ) ((zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define ,zz3 ((zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define zz3 ((zz2) > (zz3) ? (zz2) : (zz3))
(87.4 %, 25749 bytes)
795c795
< #define zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define  ((zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define ) (zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define  (zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define ) (zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define  (zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define ) zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define  zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define zz3 ((zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define zz3 (zz2) > (zz3) ? (zz2) : (zz3))
(87.4 %, 25743 bytes)
795c795
< #define  zz2) > (zz3) ? (zz2) : (zz3))
---
> #define    zz3) ? (zz2) : (zz3))
795c795
< #define  zz2) > (zz3) ? (zz2) : (zz3))
---
> #define  zz2 > (zz3) ? (zz2) : (zz3))
(87.4 %, 25737 bytes)
795c795
< #define    zz3) ? (zz2) : (zz3))
---
> #define      zz2) : (zz3))
795c795
< #define    zz3) ? (zz2) : (zz3))
---
> #define    zz3 ? (zz2) : (zz3))
795c795
< #define    zz3) ? (zz2) : (zz3))
---
> #define    zz3  (zz2) : (zz3))
(87.4 %, 25731 bytes)
795c795
< #define      zz2) : (zz3))
---
> #define        zz3))
795c795
< #define      zz2) : (zz3))
---
> #define      zz2 : (zz3))
(87.4 %, 25725 bytes)
795c795
< #define        zz3))
---
> #define        
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> define ADDWEIGHTS(zw1,zw2)                           \
795c795
< #define        zz3))
---
> #define        zz3)
795c795
< #define        zz3))
---
> #define        zz3
(87.4 %, 25724 bytes)
795c795
< #define        zz3)
---
> #define        zz3
795c795
< #define        zz3)
---
> #define        zz3
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> define ADDWEIGHTS(zw1,zw2)                           \
795c795
< #define        zz3)
---
> #define        zz3
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> # ADDWEIGHTS(zw1,zw2)                           \
795c795
< #define        zz3)
---
> #define        zz3
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
>  ADDWEIGHTS(zw1,zw2)                           \
795c795
< #define        zz3)
---
> #define        zz3
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> #define (zw1,zw2)                           \
795c795
< #define        zz3)
---
> #define        zz3
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> define (zw1,zw2)                           \
795c795
< #define        zz3)
---
> #define        zz3
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> # (zw1,zw2)                           \
795c795
< #define        zz3)
---
> #define        zz3
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
>  (zw1,zw2)                           \
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> define ADDWEIGHTS(zw1,zw2)                           \
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
>  ADDWEIGHTS(zw1,zw2)                           \
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> define (zw1,zw2)                           \
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
>  (zw1,zw2)                           \
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> define ADDWEIGHTSzw1,zw2)                           \
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
>  ADDWEIGHTSzw1,zw2)                           \
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> define zw1,zw2)                           \
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
>  zw1,zw2)                           \
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> # ADDWEIGHTS(zw1,zw2)                           \
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> # (zw1,zw2)                           \
(87.4 %, 25723 bytes)
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> define ADDWEIGHTS(zw1,zw2)                           \
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
>  ADDWEIGHTS(zw1,zw2)                           \
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> define (zw1,zw2)                           \
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
>  (zw1,zw2)                           \
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> define ADDWEIGHTSzw1,zw2)                           \
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
>  ADDWEIGHTSzw1,zw2)                           \
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> define zw1,zw2)                           \
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
>  zw1,zw2)                           \
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> # ADDWEIGHTS(zw1,zw2)                           \
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> # (zw1,zw2)                           \
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> # ADDWEIGHTSzw1,zw2)                           \
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> # zw1,zw2)                           \
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> # ADDWEIGHTS(,zw2)                           \
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> # (,zw2)                           \
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> # ADDWEIGHTS,zw2)                           \
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> # ,zw2)                           \
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> #define (zw1,zw2)                           \
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> #define zw1,zw2)                           \
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> #define (,zw2)                           \
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> #define ,zw2)                           \
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> #define (zw1zw2)                           \
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> #define zw1zw2)                           \
(87.5 %, 25712 bytes)
797c797
< #define zw1,zw2)                           \
---
> #define zw2)                           \
797c797
< #define zw1,zw2)                           \
---
> #define ,)                           \
797c797
< #define zw1,zw2)                           \
---
> #define )                           \
797c797
< #define zw1,zw2)                           \
---
> #define ,zw2                           \
797c797
< #define zw1,zw2)                           \
---
> #define zw2                           \
(87.5 %, 25708 bytes)
797c797
< #define zw2)                           \
---
> #define                            \
797c797
< #define zw2)                           \
---
> #define )                           
797c797
< #define zw2)                           \
---
> #define                            
797,798c797,798
< #define zw2)                           \
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
> #define )                           \
>    WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
797,798c797,798
< #define zw2)                           \
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
> #define                            \
>    WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
797,798c797,798
< #define zw2)                           \
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
> #define )                           
>    WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
797,798c797,798
< #define zw2)                           \
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
> #define                            
>    WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
797c797
< #define zw2)                           \
---
> #define zw2                           \
(87.5 %, 25703 bytes)
797,798c797,798
< #define                            \
<    WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
> #define                            
>    ()+WEIGHTOF(zw2)) |                    \
797,798c797,798
< #define                            \
<    WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
> #define                            
>    WEIGHTOF)+WEIGHTOF(zw2)) |                    \
797,798c797,798
< #define                            \
<    WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
> #define                            
>    )+WEIGHTOF(zw2)) |                    \
798c798
<    WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
>    (zw1)+WEIGHTOF(zw2)) |                    \
798c798
<    WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
>    zw1)+WEIGHTOF(zw2)) |                    \
798c798
<    WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
>    ()+WEIGHTOF(zw2)) |                    \
798c798
<    WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
>    )+WEIGHTOF(zw2)) |                    \
798c798
<    WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
>    (zw1+WEIGHTOF(zw2)) |                    \
798c798
<    WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
>    zw1+WEIGHTOF(zw2)) |                    \
(87.5 %, 25694 bytes)
798c798
<    zw1)+WEIGHTOF(zw2)) |                    \
---
>    +WEIGHTOF(zw2)) |                    \
798c798
<    zw1)+WEIGHTOF(zw2)) |                    \
---
>    )WEIGHTOF(zw2)) |                    \
798c798
<    zw1)+WEIGHTOF(zw2)) |                    \
---
>    WEIGHTOF(zw2)) |                    \
798c798
<    zw1)+WEIGHTOF(zw2)) |                    \
---
>    )+(zw2)) |                    \
798c798
<    zw1)+WEIGHTOF(zw2)) |                    \
---
>    +(zw2)) |                    \
798c798
<    zw1)+WEIGHTOF(zw2)) |                    \
---
>    )(zw2)) |                    \
798c798
<    zw1)+WEIGHTOF(zw2)) |                    \
---
>    (zw2)) |                    \
798c798
<    zw1)+WEIGHTOF(zw2)) |                    \
---
>    zw1+WEIGHTOF(zw2)) |                    \
(87.5 %, 25689 bytes)
798c798
<    WEIGHTOF(zw2)) |                    \
---
>    )) |                    \
798c798
<    WEIGHTOF(zw2)) |                    \
---
>    (zw2) |                    \
798c798
<    WEIGHTOF(zw2)) |                    \
---
>    zw2) |                    \
798c798
<    WEIGHTOF(zw2)) |                    \
---
>    () |                    \
798c798
<    WEIGHTOF(zw2)) |                    \
---
>    ) |                    \
798c798
<    WEIGHTOF(zw2)) |                    \
---
>    WEIGHTOFzw2)) |                    \
(87.5 %, 25679 bytes)
798c798
<    zw2) |                    \
---
>     |                    
798c798
<    zw2) |                    \
---
>    )                     
798c798
<    zw2) |                    \
---
>                         
798c798
<    zw2) |                    \
---
>    zw2 |                    \
798c798
<    zw2) |                    \
---
>    zw2                     \
(87.5 %, 25678 bytes)
798c798
<    zw2 |                    \
---
>    zw2                     \
798c798
<    zw2 |                    \
---
>    zw2                     
798,799c798,799
<    zw2 |                    \
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>    zw2                     \
>    1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
(87.5 %, 25677 bytes)
798c798
<    zw2                     \
---
>    zw2                     
798,799c798,799
<    zw2                     \
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>    zw2                     
>    1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
798,799c798,799
<    zw2                     \
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>    zw2                     
>    ( + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
798,799c798,799
<    zw2                     \
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>    zw2                     
>     + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
798,799c798,799
<    zw2                     \
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>    zw2                     
>    (1  MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
798,799c798,799
<    zw2                     \
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>    zw2                     
>    1  MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
798,799c798,799
<    zw2                     \
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>    zw2                     
>    (  MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
798,799c798,799
<    zw2                     \
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>    zw2                     
>      MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
799c799
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>    1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
799c799
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>     + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
(87.5 %, 25676 bytes)
799c799
<    1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>     + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
799c799
<    1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>      MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
(87.5 %, 25675 bytes)
799c799
<     + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>      MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
799c799
<     + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>      (DEPTHOF(zw1),DEPTHOF(zw2)))
(87.5 %, 25674 bytes)
799c799
<      MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>      (DEPTHOF(zw1),DEPTHOF(zw2)))
799c799
<      MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>      DEPTHOF(zw1),DEPTHOF(zw2)))
(87.5 %, 25669 bytes)
799c799
<      (DEPTHOF(zw1),DEPTHOF(zw2)))
---
>      DEPTHOF(zw1),DEPTHOF(zw2)))
799c799
<      (DEPTHOF(zw1),DEPTHOF(zw2)))
---
>      (zw1),DEPTHOF(zw2)))
(87.5 %, 25668 bytes)
799c799
<      DEPTHOF(zw1),DEPTHOF(zw2)))
---
>      (zw1),DEPTHOF(zw2)))
799c799
<      DEPTHOF(zw1),DEPTHOF(zw2)))
---
>      zw1),DEPTHOF(zw2)))
799c799
<      DEPTHOF(zw1),DEPTHOF(zw2)))
---
>      (),DEPTHOF(zw2)))
(87.5 %, 25661 bytes)
799c799
<      (zw1),DEPTHOF(zw2)))
---
>      zw1),DEPTHOF(zw2)))
799c799
<      (zw1),DEPTHOF(zw2)))
---
>      ),DEPTHOF(zw2)))
799c799
<      (zw1),DEPTHOF(zw2)))
---
>      zw1,DEPTHOF(zw2)))
(87.5 %, 25660 bytes)
799c799
<      zw1),DEPTHOF(zw2)))
---
>      ),DEPTHOF(zw2)))
799c799
<      zw1),DEPTHOF(zw2)))
---
>      ,DEPTHOF(zw2)))
799c799
<      zw1),DEPTHOF(zw2)))
---
>      )DEPTHOF(zw2)))
(87.5 %, 25657 bytes)
799c799
<      ),DEPTHOF(zw2)))
---
>      ,DEPTHOF(zw2)))
799c799
<      ),DEPTHOF(zw2)))
---
>      DEPTHOF(zw2)))
(87.5 %, 25656 bytes)
799c799
<      ,DEPTHOF(zw2)))
---
>      DEPTHOF(zw2)))
799c799
<      ,DEPTHOF(zw2)))
---
>      (zw2)))
799c799
<      ,DEPTHOF(zw2)))
---
>      DEPTHOFzw2)))
(87.5 %, 25655 bytes)
799c799
<      DEPTHOF(zw2)))
---
>      (zw2)))
799c799
<      DEPTHOF(zw2)))
---
>      zw2)))
799c799
<      DEPTHOF(zw2)))
---
>      ()))
(87.5 %, 25648 bytes)
799c799
<      (zw2)))
---
>      zw2)))
799c799
<      (zw2)))
---
>      )))
799c799
<      (zw2)))
---
>      zw2))
(87.5 %, 25647 bytes)
799c799
<      zw2)))
---
>      )))
799c799
<      zw2)))
---
>      ))
799c799
<      zw2)))
---
>      ))
(87.5 %, 25644 bytes)
799c799
<      )))
---
>      ))
799c799
<      )))
---
>      )
799c799
<      )))
---
>      )
(87.5 %, 25643 bytes)
799c799
<      ))
---
>      )
799c799
<      ))
---
>      
(87.5 %, 25642 bytes)
799c799
<      )
---
>      
799c799
<      )
---
>      
801c801
< #define UPHEAP(z)                                     \
---
> define UPHEAP(z)                                     \
799c799
<      )
---
>      
801c801
< #define UPHEAP(z)                                     \
---
> # UPHEAP(z)                                     \
799c799
<      )
---
>      
801c801
< #define UPHEAP(z)                                     \
---
>  UPHEAP(z)                                     \
799c799
<      )
---
>      
801c801
< #define UPHEAP(z)                                     \
---
> #define (z)                                     \
799c799
<      )
---
>      
801c801
< #define UPHEAP(z)                                     \
---
> define (z)                                     \
799c799
<      )
---
>      
801c801
< #define UPHEAP(z)                                     \
---
> # (z)                                     \
799c799
<      )
---
>      
801c801
< #define UPHEAP(z)                                     \
---
>  (z)                                     \
801c801
< #define UPHEAP(z)                                     \
---
> define UPHEAP(z)                                     \
801c801
< #define UPHEAP(z)                                     \
---
>  UPHEAP(z)                                     \
801c801
< #define UPHEAP(z)                                     \
---
> define (z)                                     \
801c801
< #define UPHEAP(z)                                     \
---
>  (z)                                     \
801c801
< #define UPHEAP(z)                                     \
---
> define UPHEAPz)                                     \
801c801
< #define UPHEAP(z)                                     \
---
>  UPHEAPz)                                     \
801c801
< #define UPHEAP(z)                                     \
---
> define z)                                     \
801c801
< #define UPHEAP(z)                                     \
---
>  z)                                     \
801c801
< #define UPHEAP(z)                                     \
---
> # UPHEAP(z)                                     \
(87.5 %, 25641 bytes)
801c801
< #define UPHEAP(z)                                     \
---
> define UPHEAP(z)                                     \
801c801
< #define UPHEAP(z)                                     \
---
>  UPHEAP(z)                                     \
801c801
< #define UPHEAP(z)                                     \
---
> define (z)                                     \
801c801
< #define UPHEAP(z)                                     \
---
>  (z)                                     \
801c801
< #define UPHEAP(z)                                     \
---
> define UPHEAPz)                                     \
801c801
< #define UPHEAP(z)                                     \
---
>  UPHEAPz)                                     \
801c801
< #define UPHEAP(z)                                     \
---
> define z)                                     \
801c801
< #define UPHEAP(z)                                     \
---
>  z)                                     \
801c801
< #define UPHEAP(z)                                     \
---
> # UPHEAP(z)                                     \
801c801
< #define UPHEAP(z)                                     \
---
> # (z)                                     \
801c801
< #define UPHEAP(z)                                     \
---
> # UPHEAPz)                                     \
801c801
< #define UPHEAP(z)                                     \
---
> # z)                                     \
801c801
< #define UPHEAP(z)                                     \
---
> # UPHEAP()                                     \
801c801
< #define UPHEAP(z)                                     \
---
> # ()                                     \
801c801
< #define UPHEAP(z)                                     \
---
> # UPHEAP)                                     \
801c801
< #define UPHEAP(z)                                     \
---
> # )                                     \
801c801
< #define UPHEAP(z)                                     \
---
> #define (z)                                     \
801c801
< #define UPHEAP(z)                                     \
---
> #define z)                                     \
801c801
< #define UPHEAP(z)                                     \
---
> #define ()                                     \
801c801
< #define UPHEAP(z)                                     \
---
> #define )                                     \
801c801
< #define UPHEAP(z)                                     \
---
> #define (z                                     \
801c801
< #define UPHEAP(z)                                     \
---
> #define z                                     \
(87.5 %, 25634 bytes)
801c801
< #define z)                                     \
---
> #define                                      \
801c801
< #define z)                                     \
---
> #define )                                     
801c801
< #define z)                                     \
---
> #define                                      
801c801
< #define z)                                     \
---
> #define )                                     \
804c804
< #define DOWNHEAP(z)                                   \
---
> define DOWNHEAP(z)                                   \
801c801
< #define z)                                     \
---
> #define                                      \
804c804
< #define DOWNHEAP(z)                                   \
---
> define DOWNHEAP(z)                                   \
801c801
< #define z)                                     \
---
> #define )                                     
804c804
< #define DOWNHEAP(z)                                   \
---
> define DOWNHEAP(z)                                   \
801c801
< #define z)                                     \
---
> #define                                      
804c804
< #define DOWNHEAP(z)                                   \
---
> define DOWNHEAP(z)                                   \
801c801
< #define z)                                     \
---
> #define z                                     \
801c801
< #define z)                                     \
---
> #define z                                     
(87.5 %, 25633 bytes)
801c801
< #define z                                     \
---
> #define z                                     
801c801
< #define z                                     \
---
> #define z                                     
804c804
< #define DOWNHEAP(z)                                   \
---
> define DOWNHEAP(z)                                   \
801c801
< #define z                                     \
---
> #define z                                     
804c804
< #define DOWNHEAP(z)                                   \
---
> # DOWNHEAP(z)                                   \
801c801
< #define z                                     \
---
> #define z                                     
804c804
< #define DOWNHEAP(z)                                   \
---
>  DOWNHEAP(z)                                   \
801c801
< #define z                                     \
---
> #define z                                     
804c804
< #define DOWNHEAP(z)                                   \
---
> #define (z)                                   \
801c801
< #define z                                     \
---
> #define z                                     
804c804
< #define DOWNHEAP(z)                                   \
---
> define (z)                                   \
801c801
< #define z                                     \
---
> #define z                                     
804c804
< #define DOWNHEAP(z)                                   \
---
> # (z)                                   \
801c801
< #define z                                     \
---
> #define z                                     
804c804
< #define DOWNHEAP(z)                                   \
---
>  (z)                                   \
804c804
< #define DOWNHEAP(z)                                   \
---
> define DOWNHEAP(z)                                   \
804c804
< #define DOWNHEAP(z)                                   \
---
>  DOWNHEAP(z)                                   \
804c804
< #define DOWNHEAP(z)                                   \
---
> define (z)                                   \
804c804
< #define DOWNHEAP(z)                                   \
---
>  (z)                                   \
804c804
< #define DOWNHEAP(z)                                   \
---
> define DOWNHEAPz)                                   \
804c804
< #define DOWNHEAP(z)                                   \
---
>  DOWNHEAPz)                                   \
804c804
< #define DOWNHEAP(z)                                   \
---
> define z)                                   \
804c804
< #define DOWNHEAP(z)                                   \
---
>  z)                                   \
804c804
< #define DOWNHEAP(z)                                   \
---
> # DOWNHEAP(z)                                   \
(87.5 %, 25632 bytes)
804c804
< #define DOWNHEAP(z)                                   \
---
> define DOWNHEAP(z)                                   \
804c804
< #define DOWNHEAP(z)                                   \
---
>  DOWNHEAP(z)                                   \
804c804
< #define DOWNHEAP(z)                                   \
---
> define (z)                                   \
804c804
< #define DOWNHEAP(z)                                   \
---
>  (z)                                   \
804c804
< #define DOWNHEAP(z)                                   \
---
> define DOWNHEAPz)                                   \
804c804
< #define DOWNHEAP(z)                                   \
---
>  DOWNHEAPz)                                   \
804c804
< #define DOWNHEAP(z)                                   \
---
> define z)                                   \
804c804
< #define DOWNHEAP(z)                                   \
---
>  z)                                   \
804c804
< #define DOWNHEAP(z)                                   \
---
> # DOWNHEAP(z)                                   \
804c804
< #define DOWNHEAP(z)                                   \
---
> # (z)                                   \
804c804
< #define DOWNHEAP(z)                                   \
---
> # DOWNHEAPz)                                   \
804c804
< #define DOWNHEAP(z)                                   \
---
> # z)                                   \
804c804
< #define DOWNHEAP(z)                                   \
---
> # DOWNHEAP()                                   \
804c804
< #define DOWNHEAP(z)                                   \
---
> # ()                                   \
804c804
< #define DOWNHEAP(z)                                   \
---
> # DOWNHEAP)                                   \
804c804
< #define DOWNHEAP(z)                                   \
---
> # )                                   \
804c804
< #define DOWNHEAP(z)                                   \
---
> #define (z)                                   \
804c804
< #define DOWNHEAP(z)                                   \
---
> #define z)                                   \
804c804
< #define DOWNHEAP(z)                                   \
---
> #define ()                                   \
804c804
< #define DOWNHEAP(z)                                   \
---
> #define )                                   \
804c804
< #define DOWNHEAP(z)                                   \
---
> #define (z                                   \
804c804
< #define DOWNHEAP(z)                                   \
---
> #define z                                   \
(87.5 %, 25623 bytes)
804c804
< #define z)                                   \
---
> #define                                    \
804c804
< #define z)                                   \
---
> #define )                                   
804c804
< #define z)                                   \
---
> #define                                    
804c804
< #define z)                                   \
---
> #define )                                   \
872c872
< #define bsNEEDW(nz)                           \
---
> define bsNEEDW(nz)                           \
804c804
< #define z)                                   \
---
> #define                                    \
872c872
< #define bsNEEDW(nz)                           \
---
> define bsNEEDW(nz)                           \
804c804
< #define z)                                   \
---
> #define )                                   
872c872
< #define bsNEEDW(nz)                           \
---
> define bsNEEDW(nz)                           \
804c804
< #define z)                                   \
---
> #define                                    
872c872
< #define bsNEEDW(nz)                           \
---
> define bsNEEDW(nz)                           \
804c804
< #define z)                                   \
---
> #define z                                   \
804c804
< #define z)                                   \
---
> #define z                                   
(87.5 %, 25622 bytes)
804c804
< #define z                                   \
---
> #define z                                   
804c804
< #define z                                   \
---
> #define z                                   
872c872
< #define bsNEEDW(nz)                           \
---
> define bsNEEDW(nz)                           \
804c804
< #define z                                   \
---
> #define z                                   
872c872
< #define bsNEEDW(nz)                           \
---
> # bsNEEDW(nz)                           \
804c804
< #define z                                   \
---
> #define z                                   
872c872
< #define bsNEEDW(nz)                           \
---
>  bsNEEDW(nz)                           \
804c804
< #define z                                   \
---
> #define z                                   
872c872
< #define bsNEEDW(nz)                           \
---
> #define (nz)                           \
804c804
< #define z                                   \
---
> #define z                                   
872c872
< #define bsNEEDW(nz)                           \
---
> define (nz)                           \
804c804
< #define z                                   \
---
> #define z                                   
872c872
< #define bsNEEDW(nz)                           \
---
> # (nz)                           \
804c804
< #define z                                   \
---
> #define z                                   
872c872
< #define bsNEEDW(nz)                           \
---
>  (nz)                           \
872c872
< #define bsNEEDW(nz)                           \
---
> define bsNEEDW(nz)                           \
872c872
< #define bsNEEDW(nz)                           \
---
>  bsNEEDW(nz)                           \
872c872
< #define bsNEEDW(nz)                           \
---
> define (nz)                           \
872c872
< #define bsNEEDW(nz)                           \
---
>  (nz)                           \
872c872
< #define bsNEEDW(nz)                           \
---
> define bsNEEDWnz)                           \
872c872
< #define bsNEEDW(nz)                           \
---
>  bsNEEDWnz)                           \
872c872
< #define bsNEEDW(nz)                           \
---
> define nz)                           \
872c872
< #define bsNEEDW(nz)                           \
---
>  nz)                           \
(87.5 %, 25621 bytes)
872c872
< #define bsNEEDW(nz)                           \
---
> define bsNEEDW(nz)                           \
872c872
< #define bsNEEDW(nz)                           \
---
>  bsNEEDW(nz)                           \
872c872
< #define bsNEEDW(nz)                           \
---
> define (nz)                           \
872c872
< #define bsNEEDW(nz)                           \
---
>  (nz)                           \
872c872
< #define bsNEEDW(nz)                           \
---
> define bsNEEDWnz)                           \
872c872
< #define bsNEEDW(nz)                           \
---
>  bsNEEDWnz)                           \
872c872
< #define bsNEEDW(nz)                           \
---
> define nz)                           \
872c872
< #define bsNEEDW(nz)                           \
---
>  nz)                           \
872c872
< #define bsNEEDW(nz)                           \
---
> # bsNEEDW(nz)                           \
872c872
< #define bsNEEDW(nz)                           \
---
> # (nz)                           \
872c872
< #define bsNEEDW(nz)                           \
---
> # bsNEEDWnz)                           \
872c872
< #define bsNEEDW(nz)                           \
---
> # nz)                           \
872c872
< #define bsNEEDW(nz)                           \
---
> # bsNEEDW()                           \
872c872
< #define bsNEEDW(nz)                           \
---
> # ()                           \
872c872
< #define bsNEEDW(nz)                           \
---
> # bsNEEDW)                           \
872c872
< #define bsNEEDW(nz)                           \
---
> # )                           \
872c872
< #define bsNEEDW(nz)                           \
---
> #define (nz)                           \
872c872
< #define bsNEEDW(nz)                           \
---
> #define nz)                           \
872c872
< #define bsNEEDW(nz)                           \
---
> #define ()                           \
872c872
< #define bsNEEDW(nz)                           \
---
> #define )                           \
872c872
< #define bsNEEDW(nz)                           \
---
> #define (nz                           \
872c872
< #define bsNEEDW(nz)                           \
---
> #define nz                           \
872c872
< #define bsNEEDW(nz)                           \
---
> #define (                           \
872c872
< #define bsNEEDW(nz)                           \
---
> #define                            \
872c872
< #define bsNEEDW(nz)                           \
---
> #define bsNEEDWnz)                           \
(87.5 %, 25613 bytes)
872c872
< #define nz)                           \
---
> #define                            \
872c872
< #define nz)                           \
---
> #define )                           
872c872
< #define nz)                           \
---
> #define                            
872c872
< #define nz)                           \
---
> #define )                           \
893c893
< EState * makeMaps_e_s;
---
>  * makeMaps_e_s;
872c872
< #define nz)                           \
---
> #define                            \
893c893
< EState * makeMaps_e_s;
---
>  * makeMaps_e_s;
872c872
< #define nz)                           \
---
> #define )                           
893c893
< EState * makeMaps_e_s;
---
>  * makeMaps_e_s;
872c872
< #define nz)                           \
---
> #define                            
893c893
< EState * makeMaps_e_s;
---
>  * makeMaps_e_s;
872c872
< #define nz)                           \
---
> #define nz                           \
872c872
< #define nz)                           \
---
> #define nz                           
(87.5 %, 25612 bytes)
872c872
< #define nz                           \
---
> #define nz                           
872c872
< #define nz                           \
---
> #define nz                           
893c893
< EState * makeMaps_e_s;
---
>  * makeMaps_e_s;
872c872
< #define nz                           \
---
> #define nz                           
893c893
< EState * makeMaps_e_s;
---
> EState  makeMaps_e_s;
872c872
< #define nz                           \
---
> #define nz                           
893c893
< EState * makeMaps_e_s;
---
>   makeMaps_e_s;
872c872
< #define nz                           \
---
> #define nz                           
893c893
< EState * makeMaps_e_s;
---
> EState * ;
872c872
< #define nz                           \
---
> #define nz                           
893c893
< EState * makeMaps_e_s;
---
>  * ;
872c872
< #define nz                           \
---
> #define nz                           
893c893
< EState * makeMaps_e_s;
---
> EState  ;
872c872
< #define nz                           \
---
> #define nz                           
893c893
< EState * makeMaps_e_s;
---
>   ;
893c893
< EState * makeMaps_e_s;
---
>  * makeMaps_e_s;
893c893
< EState * makeMaps_e_s;
---
>   makeMaps_e_s;
893c893
< EState * makeMaps_e_s;
---
>  * ;
893c893
< EState * makeMaps_e_s;
---
>   ;
893c893
< EState * makeMaps_e_s;
---
>  * makeMaps_e_s
(87.5 %, 25611 bytes)
893c893
< EState * makeMaps_e_s;
---
>  * makeMaps_e_s;
893c893
< EState * makeMaps_e_s;
---
>   makeMaps_e_s;
893c893
< EState * makeMaps_e_s;
---
>  * ;
893c893
< EState * makeMaps_e_s;
---
>   ;
893c893
< EState * makeMaps_e_s;
---
>  * makeMaps_e_s
893c893
< EState * makeMaps_e_s;
---
>   makeMaps_e_s
893c893
< EState * makeMaps_e_s;
---
>  * 
893c893
< EState * makeMaps_e_s;
---
>   
893c893
< EState * makeMaps_e_s;
---
> EState  makeMaps_e_s;
893c893
< EState * makeMaps_e_s;
---
> EState  ;
893c893
< EState * makeMaps_e_s;
---
> EState  makeMaps_e_s
893c893
< EState * makeMaps_e_s;
---
> EState  
893,894c893,894
< EState * makeMaps_e_s;
< static
---
> EState  makeMaps_e_s;
> 
893,894c893,894
< EState * makeMaps_e_s;
< static
---
> EState  ;
> 
893,894c893,894
< EState * makeMaps_e_s;
< static
---
> EState  makeMaps_e_s
> 
893,894c893,894
< EState * makeMaps_e_s;
< static
---
> EState  
> 
893c893
< EState * makeMaps_e_s;
---
> EState * ;
893c893
< EState * makeMaps_e_s;
---
> EState * 
893,894c893,894
< EState * makeMaps_e_s;
< static
---
> EState * ;
> 
893,894c893,894
< EState * makeMaps_e_s;
< static
---
> EState * 
> 
893c893
< EState * makeMaps_e_s;
---
> EState * ;
895c895
< void makeMaps_e ( void )
---
>  makeMaps_e ( void )
893c893
< EState * makeMaps_e_s;
---
> EState * 
895c895
< void makeMaps_e ( void )
---
>  makeMaps_e ( void )
893,895c893,895
< EState * makeMaps_e_s;
< static
< void makeMaps_e ( void )
---
> EState * ;
> 
>  makeMaps_e ( void )
893,895c893,895
< EState * makeMaps_e_s;
< static
< void makeMaps_e ( void )
---
> EState * 
> 
>  makeMaps_e ( void )
893c893
< EState * makeMaps_e_s;
---
> EState * makeMaps_e_s
893,894c893,894
< EState * makeMaps_e_s;
< static
---
> EState * makeMaps_e_s
> 
893c893
< EState * makeMaps_e_s;
---
> EState * makeMaps_e_s
895c895
< void makeMaps_e ( void )
---
>  makeMaps_e ( void )
893,895c893,895
< EState * makeMaps_e_s;
< static
< void makeMaps_e ( void )
---
> EState * makeMaps_e_s
> 
>  makeMaps_e ( void )
893c893
< EState * makeMaps_e_s;
---
> EState * makeMaps_e_s
895c895
< void makeMaps_e ( void )
---
> void  ( void )
893,895c893,895
< EState * makeMaps_e_s;
< static
< void makeMaps_e ( void )
---
> EState * makeMaps_e_s
> 
> void  ( void )
893c893
< EState * makeMaps_e_s;
---
> EState * makeMaps_e_s
895c895
< void makeMaps_e ( void )
---
>   ( void )
893,895c893,895
< EState * makeMaps_e_s;
< static
< void makeMaps_e ( void )
---
> EState * makeMaps_e_s
> 
>   ( void )
894c894
< static
---
> 
894,895c894,895
< static
< void makeMaps_e ( void )
---
> 
>  makeMaps_e ( void )
894,895c894,895
< static
< void makeMaps_e ( void )
---
> 
> void  ( void )
(87.5 %, 25605 bytes)
895c895
< void makeMaps_e ( void )
---
>  makeMaps_e ( void )
895c895
< void makeMaps_e ( void )
---
>   ( void )
895c895
< void makeMaps_e ( void )
---
>  makeMaps_e  void )
895c895
< void makeMaps_e ( void )
---
>    void )
895c895
< void makeMaps_e ( void )
---
>  makeMaps_e (  )
(87.5 %, 25601 bytes)
895c895
<  makeMaps_e ( void )
---
>   ( void )
895c895
<  makeMaps_e ( void )
---
>    void )
895c895
<  makeMaps_e ( void )
---
>   (  )
895c895
<  makeMaps_e ( void )
---
>     )
895c895
<  makeMaps_e ( void )
---
>   ( void 
895c895
<  makeMaps_e ( void )
---
>    void 
895c895
<  makeMaps_e ( void )
---
>   (  
895c895
<  makeMaps_e ( void )
---
>     
895c895
<  makeMaps_e ( void )
---
>  makeMaps_e  void )
895c895
<  makeMaps_e ( void )
---
>  makeMaps_e   )
895c895
<  makeMaps_e ( void )
---
>  makeMaps_e  void 
895c895
<  makeMaps_e ( void )
---
>  makeMaps_e   
895,896c895,896
<  makeMaps_e ( void )
< {
---
>  makeMaps_e  void )
> 
895,896c895,896
<  makeMaps_e ( void )
< {
---
>  makeMaps_e   )
> 
895,896c895,896
<  makeMaps_e ( void )
< {
---
>  makeMaps_e  void 
> 
895,896c895,896
<  makeMaps_e ( void )
< {
---
>  makeMaps_e   
> 
895c895
<  makeMaps_e ( void )
---
>  makeMaps_e (  )
895c895
<  makeMaps_e ( void )
---
>  makeMaps_e (  
895,896c895,896
<  makeMaps_e ( void )
< {
---
>  makeMaps_e (  )
> 
895,896c895,896
<  makeMaps_e ( void )
< {
---
>  makeMaps_e (  
> 
895c895
<  makeMaps_e ( void )
---
>  makeMaps_e (  )
897c897
<    Int32 i;
---
>     i;
895c895
<  makeMaps_e ( void )
---
>  makeMaps_e (  
897c897
<    Int32 i;
---
>     i;
895,897c895,897
<  makeMaps_e ( void )
< {
<    Int32 i;
---
>  makeMaps_e (  )
> 
>     i;
895,897c895,897
<  makeMaps_e ( void )
< {
<    Int32 i;
---
>  makeMaps_e (  
> 
>     i;
895c895
<  makeMaps_e ( void )
---
>  makeMaps_e ( void 
895,896c895,896
<  makeMaps_e ( void )
< {
---
>  makeMaps_e ( void 
> 
895c895
<  makeMaps_e ( void )
---
>  makeMaps_e ( void 
897c897
<    Int32 i;
---
>     i;
895,897c895,897
<  makeMaps_e ( void )
< {
<    Int32 i;
---
>  makeMaps_e ( void 
> 
>     i;
895c895
<  makeMaps_e ( void )
---
>  makeMaps_e ( void 
897c897
<    Int32 i;
---
>    Int32 ;
895,897c895,897
<  makeMaps_e ( void )
< {
<    Int32 i;
---
>  makeMaps_e ( void 
> 
>    Int32 ;
895c895
<  makeMaps_e ( void )
---
>  makeMaps_e ( void 
897c897
<    Int32 i;
---
>     ;
895,897c895,897
<  makeMaps_e ( void )
< {
<    Int32 i;
---
>  makeMaps_e ( void 
> 
>     ;
896c896
< {
---
> 
896,897c896,897
< {
<    Int32 i;
---
> 
>     i;
896,897c896,897
< {
<    Int32 i;
---
> 
>    Int32 ;
(87.5 %, 25597 bytes)
895c895
<  makeMaps_e (  )
---
>  makeMaps_e (  
895,896c895,896
<  makeMaps_e (  )
< {
---
>  makeMaps_e (  
> 
895c895
<  makeMaps_e (  )
---
>  makeMaps_e (  
897c897
<    Int32 i;
---
>     i;
895,897c895,897
<  makeMaps_e (  )
< {
<    Int32 i;
---
>  makeMaps_e (  
> 
>     i;
895c895
<  makeMaps_e (  )
---
>  makeMaps_e (  
897c897
<    Int32 i;
---
>    Int32 ;
895,897c895,897
<  makeMaps_e (  )
< {
<    Int32 i;
---
>  makeMaps_e (  
> 
>    Int32 ;
895c895
<  makeMaps_e (  )
---
>  makeMaps_e (  
897c897
<    Int32 i;
---
>     ;
895,897c895,897
<  makeMaps_e (  )
< {
<    Int32 i;
---
>  makeMaps_e (  
> 
>     ;
896c896
< {
---
> 
896,897c896,897
< {
<    Int32 i;
---
> 
>     i;
896,897c896,897
< {
<    Int32 i;
---
> 
>    Int32 ;
896,897c896,897
< {
<    Int32 i;
---
> 
>     ;
896,897c896,897
< {
<    Int32 i;
---
> 
>    Int32 i
896,897c896,897
< {
<    Int32 i;
---
> 
>     i
896,897c896,897
< {
<    Int32 i;
---
> 
>    Int32 
896,897c896,897
< {
<    Int32 i;
---
> 
>     
897c897
<    Int32 i;
---
>     i;
897c897
<    Int32 i;
---
>     ;
897c897
<    Int32 i;
---
>     i
897c897
<    Int32 i;
---
>     
897,898c897,898
<    Int32 i;
<    makeMaps_e_s->nInUse = 0;
---
>     i;
>    ->nInUse = 0;
897,898c897,898
<    Int32 i;
<    makeMaps_e_s->nInUse = 0;
---
>     ;
>    ->nInUse = 0;
897,898c897,898
<    Int32 i;
<    makeMaps_e_s->nInUse = 0;
---
>     i
>    ->nInUse = 0;
897,898c897,898
<    Int32 i;
<    makeMaps_e_s->nInUse = 0;
---
>     
>    ->nInUse = 0;
897c897
<    Int32 i;
---
>    Int32 ;
897c897
<    Int32 i;
---
>    Int32 
897,898c897,898
<    Int32 i;
<    makeMaps_e_s->nInUse = 0;
---
>    Int32 ;
>    ->nInUse = 0;
897,898c897,898
<    Int32 i;
<    makeMaps_e_s->nInUse = 0;
---
>    Int32 
>    ->nInUse = 0;
897,898c897,898
<    Int32 i;
<    makeMaps_e_s->nInUse = 0;
---
>    Int32 ;
>    makeMaps_e_snInUse = 0;
897,898c897,898
<    Int32 i;
<    makeMaps_e_s->nInUse = 0;
---
>    Int32 
>    makeMaps_e_snInUse = 0;
897,898c897,898
<    Int32 i;
<    makeMaps_e_s->nInUse = 0;
---
>    Int32 ;
>    nInUse = 0;
897,898c897,898
<    Int32 i;
<    makeMaps_e_s->nInUse = 0;
---
>    Int32 
>    nInUse = 0;
897c897
<    Int32 i;
---
>    Int32 i
897,898c897,898
<    Int32 i;
<    makeMaps_e_s->nInUse = 0;
---
>    Int32 i
>    ->nInUse = 0;
897,898c897,898
<    Int32 i;
<    makeMaps_e_s->nInUse = 0;
---
>    Int32 i
>    makeMaps_e_snInUse = 0;
897,898c897,898
<    Int32 i;
<    makeMaps_e_s->nInUse = 0;
---
>    Int32 i
>    nInUse = 0;
897,898c897,898
<    Int32 i;
<    makeMaps_e_s->nInUse = 0;
---
>    Int32 i
>    makeMaps_e_s-> = 0;
897,898c897,898
<    Int32 i;
<    makeMaps_e_s->nInUse = 0;
---
>    Int32 i
>    -> = 0;
897,898c897,898
<    Int32 i;
<    makeMaps_e_s->nInUse = 0;
---
>    Int32 i
>    makeMaps_e_s = 0;
897,898c897,898
<    Int32 i;
<    makeMaps_e_s->nInUse = 0;
---
>    Int32 i
>     = 0;
898c898
<    makeMaps_e_s->nInUse = 0;
---
>    ->nInUse = 0;
898c898
<    makeMaps_e_s->nInUse = 0;
---
>    nInUse = 0;
898c898
<    makeMaps_e_s->nInUse = 0;
---
>    -> = 0;
898c898
<    makeMaps_e_s->nInUse = 0;
---
>     = 0;
898c898
<    makeMaps_e_s->nInUse = 0;
---
>    ->nInUse  0;
898c898
<    makeMaps_e_s->nInUse = 0;
---
>    nInUse  0;
898c898
<    makeMaps_e_s->nInUse = 0;
---
>    ->  0;
898c898
<    makeMaps_e_s->nInUse = 0;
---
>      0;
(87.5 %, 25576 bytes)
897a898
>      
899d899
<    i = 0;
898c898
<     = 0;
---
>     = ;
898c898
<     = 0;
---
>     = 
(87.5 %, 25572 bytes)
899c899
<     = 0;
---
>      
901c901
<    for (i; 0 < 6; i++)
---
>     (i; 0 < 6; i++)
899c899
<     = 0;
---
>     = ;
899c899
<     = 0;
---
>     = 
899c899
<     = 0;
---
>     = ;
901c901
<    for (i; 0 < 6; i++)
---
>     (i; 0 < 6; i++)
899c899
<     = 0;
---
>     = 
901c901
<    for (i; 0 < 6; i++)
---
>     (i; 0 < 6; i++)
899c899
<     = 0;
---
>     = ;
901c901
<    for (i; 0 < 6; i++)
---
>    for i; 0 < 6; i++)
899c899
<     = 0;
---
>     = 
901c901
<    for (i; 0 < 6; i++)
---
>    for i; 0 < 6; i++)
899c899
<     = 0;
---
>     = ;
901c901
<    for (i; 0 < 6; i++)
---
>     i; 0 < 6; i++)
899c899
<     = 0;
---
>     = 
901c901
<    for (i; 0 < 6; i++)
---
>     i; 0 < 6; i++)
899c899
<     = 0;
---
>     = 0
899c899
<     = 0;
---
>     = 0
901c901
<    for (i; 0 < 6; i++)
---
>     (i; 0 < 6; i++)
899c899
<     = 0;
---
>     = 0
901c901
<    for (i; 0 < 6; i++)
---
>    for i; 0 < 6; i++)
899c899
<     = 0;
---
>     = 0
901c901
<    for (i; 0 < 6; i++)
---
>     i; 0 < 6; i++)
899c899
<     = 0;
---
>     = 0
901c901
<    for (i; 0 < 6; i++)
---
>    for (; 0 < 6; i++)
899c899
<     = 0;
---
>     = 0
901c901
<    for (i; 0 < 6; i++)
---
>     (; 0 < 6; i++)
899c899
<     = 0;
---
>     = 0
901c901
<    for (i; 0 < 6; i++)
---
>    for ; 0 < 6; i++)
899c899
<     = 0;
---
>     = 0
901c901
<    for (i; 0 < 6; i++)
---
>     ; 0 < 6; i++)
901c901
<    for (i; 0 < 6; i++)
---
>     (i; 0 < 6; i++)
901c901
<    for (i; 0 < 6; i++)
---
>     i; 0 < 6; i++)
901c901
<    for (i; 0 < 6; i++)
---
>     (; 0 < 6; i++)
901c901
<    for (i; 0 < 6; i++)
---
>     ; 0 < 6; i++)
901c901
<    for (i; 0 < 6; i++)
---
>     (i 0 < 6; i++)
901c901
<    for (i; 0 < 6; i++)
---
>     i 0 < 6; i++)
901c901
<    for (i; 0 < 6; i++)
---
>     ( 0 < 6; i++)
901c901
<    for (i; 0 < 6; i++)
---
>      0 < 6; i++)
901c901
<    for (i; 0 < 6; i++)
---
>    for i; 0 < 6; i++)
901c901
<    for (i; 0 < 6; i++)
---
>    for ; 0 < 6; i++)
901c901
<    for (i; 0 < 6; i++)
---
>    for i 0 < 6; i++)
901c901
<    for (i; 0 < 6; i++)
---
>    for  0 < 6; i++)
901c901
<    for (i; 0 < 6; i++)
---
>    for i;  < 6; i++)
901c901
<    for (i; 0 < 6; i++)
---
>    for ;  < 6; i++)
901c901
<    for (i; 0 < 6; i++)
---
>    for i  < 6; i++)
901c901
<    for (i; 0 < 6; i++)
---
>    for   < 6; i++)
901c901
<    for (i; 0 < 6; i++)
---
>    for (; 0 < 6; i++)
901c901
<    for (i; 0 < 6; i++)
---
>    for ( 0 < 6; i++)
901c901
<    for (i; 0 < 6; i++)
---
>    for (;  < 6; i++)
901c901
<    for (i; 0 < 6; i++)
---
>    for (  < 6; i++)
901c901
<    for (i; 0 < 6; i++)
---
>    for (; 0  6; i++)
901c901
<    for (i; 0 < 6; i++)
---
>    for ( 0  6; i++)
901c901
<    for (i; 0 < 6; i++)
---
>    for (;   6; i++)
(87.5 %, 25571 bytes)
901c901
<    for (; 0 < 6; i++)
---
>    for ( 0 < 6; i++)
901c901
<    for (; 0 < 6; i++)
---
>    for (  < 6; i++)
901c901
<    for (; 0 < 6; i++)
---
>    for ( 0  6; i++)
901c901
<    for (; 0 < 6; i++)
---
>    for (   6; i++)
901c901
<    for (; 0 < 6; i++)
---
>    for ( 0 < ; i++)
901c901
<    for (; 0 < 6; i++)
---
>    for (  < ; i++)
901c901
<    for (; 0 < 6; i++)
---
>    for ( 0  ; i++)
901c901
<    for (; 0 < 6; i++)
---
>    for (   ; i++)
901c901
<    for (; 0 < 6; i++)
---
>    for (;  < 6; i++)
901c901
<    for (; 0 < 6; i++)
---
>    for (;   6; i++)
901c901
<    for (; 0 < 6; i++)
---
>    for (;  < ; i++)
901c901
<    for (; 0 < 6; i++)
---
>    for (;   ; i++)
(87.5 %, 25569 bytes)
901c901
<    for (;   6; i++)
---
>    for (;    i++)
901c901
<    for (;   6; i++)
---
>    for (;   ; ++)
901c901
<    for (;   6; i++)
---
>    for (;    ++)
901c901
<    for (;   6; i++)
---
>    for (;   ; i)
901c901
<    for (;   6; i++)
---
>    for (;    i)
901c901
<    for (;   6; i++)
---
>    for (;   ; )
(87.5 %, 25566 bytes)
901c901
<    for (;   ; i)
---
>    for (;    i)
903c903
<          makeMaps_e_s->nInUse++;
---
>          ->nInUse++;
901c901
<    for (;   ; i)
---
>    for (;    )
903c903
<          makeMaps_e_s->nInUse++;
---
>          ->nInUse++;
901c901
<    for (;   ; i)
---
>    for (;    i
903c903
<          makeMaps_e_s->nInUse++;
---
>          ->nInUse++;
901c901
<    for (;   ; i)
---
>    for (;    
903c903
<          makeMaps_e_s->nInUse++;
---
>          ->nInUse++;
901c901
<    for (;   ; i)
---
>    for (;   ; )
901c901
<    for (;   ; i)
---
>    for (;   ; 
901c901
<    for (;   ; i)
---
>    for (;   ; )
903c903
<          makeMaps_e_s->nInUse++;
---
>          ->nInUse++;
901c901
<    for (;   ; i)
---
>    for (;   ; 
903c903
<          makeMaps_e_s->nInUse++;
---
>          ->nInUse++;
901c901
<    for (;   ; i)
---
>    for (;   ; )
903c903
<          makeMaps_e_s->nInUse++;
---
>          makeMaps_e_snInUse++;
901c901
<    for (;   ; i)
---
>    for (;   ; 
903c903
<          makeMaps_e_s->nInUse++;
---
>          makeMaps_e_snInUse++;
901c901
<    for (;   ; i)
---
>    for (;   ; )
903c903
<          makeMaps_e_s->nInUse++;
---
>          nInUse++;
901c901
<    for (;   ; i)
---
>    for (;   ; 
903c903
<          makeMaps_e_s->nInUse++;
---
>          nInUse++;
901c901
<    for (;   ; i)
---
>    for (;   ; i
901c901
<    for (;   ; i)
---
>    for (;   ; i
903c903
<          makeMaps_e_s->nInUse++;
---
>          ->nInUse++;
901c901
<    for (;   ; i)
---
>    for (;   ; i
903c903
<          makeMaps_e_s->nInUse++;
---
>          makeMaps_e_snInUse++;
901c901
<    for (;   ; i)
---
>    for (;   ; i
903c903
<          makeMaps_e_s->nInUse++;
---
>          nInUse++;
901c901
<    for (;   ; i)
---
>    for (;   ; i
903c903
<          makeMaps_e_s->nInUse++;
---
>          makeMaps_e_s->++;
901c901
<    for (;   ; i)
---
>    for (;   ; i
903c903
<          makeMaps_e_s->nInUse++;
---
>          ->++;
901c901
<    for (;   ; i)
---
>    for (;   ; i
903c903
<          makeMaps_e_s->nInUse++;
---
>          makeMaps_e_s++;
901c901
<    for (;   ; i)
---
>    for (;   ; i
903c903
<          makeMaps_e_s->nInUse++;
---
>          ++;
(87.5 %, 25565 bytes)
901c901
<    for (;   ; )
---
>    for (;   ; 
901c901
<    for (;   ; )
---
>    for (;   ; 
903c903
<          makeMaps_e_s->nInUse++;
---
>          ->nInUse++;
901c901
<    for (;   ; )
---
>    for (;   ; 
903c903
<          makeMaps_e_s->nInUse++;
---
>          makeMaps_e_snInUse++;
901c901
<    for (;   ; )
---
>    for (;   ; 
903c903
<          makeMaps_e_s->nInUse++;
---
>          nInUse++;
901c901
<    for (;   ; )
---
>    for (;   ; 
903c903
<          makeMaps_e_s->nInUse++;
---
>          makeMaps_e_s->++;
901c901
<    for (;   ; )
---
>    for (;   ; 
903c903
<          makeMaps_e_s->nInUse++;
---
>          ->++;
901c901
<    for (;   ; )
---
>    for (;   ; 
903c903
<          makeMaps_e_s->nInUse++;
---
>          makeMaps_e_s++;
901c901
<    for (;   ; )
---
>    for (;   ; 
903c903
<          makeMaps_e_s->nInUse++;
---
>          ++;
903c903
<          makeMaps_e_s->nInUse++;
---
>          ->nInUse++;
903c903
<          makeMaps_e_s->nInUse++;
---
>          nInUse++;
903c903
<          makeMaps_e_s->nInUse++;
---
>          ->++;
903c903
<          makeMaps_e_s->nInUse++;
---
>          ++;
903c903
<          makeMaps_e_s->nInUse++;
---
>          ->nInUse;
903c903
<          makeMaps_e_s->nInUse++;
---
>          nInUse;
903c903
<          makeMaps_e_s->nInUse++;
---
>          ->;
903c903
<          makeMaps_e_s->nInUse++;
---
>          ;
903c903
<          makeMaps_e_s->nInUse++;
---
>          makeMaps_e_snInUse++;
903c903
<          makeMaps_e_s->nInUse++;
---
>          makeMaps_e_s++;
(87.5 %, 25543 bytes)
903c903
<          ;
---
>          
905d904
< }
909c908,909
< EState  generateMTFValues_s;
---
> 
>   ;
905c905
< }
---
> 
905d904
< }
909c908,909
< EState  generateMTFValues_s;
---
> 
>   generateMTFValues_s;
905d904
< }
909c908,909
< EState  generateMTFValues_s;
---
> 
> EState  ;
905d904
< }
909c908,909
< EState  generateMTFValues_s;
---
> 
>   ;
905d904
< }
909c908,909
< EState  generateMTFValues_s;
---
> 
> EState  generateMTFValues_s
905d904
< }
909c908,909
< EState  generateMTFValues_s;
---
> 
>   generateMTFValues_s
905d904
< }
909c908,909
< EState  generateMTFValues_s;
---
> 
> EState  
905d904
< }
909c908,909
< EState  generateMTFValues_s;
---
> 
>   
909c909
< EState  generateMTFValues_s;
---
>   generateMTFValues_s;
909c909
< EState  generateMTFValues_s;
---
>   ;
909c909
< EState  generateMTFValues_s;
---
>   generateMTFValues_s
909c909
< EState  generateMTFValues_s;
---
>   
909,910c909,910
< EState  generateMTFValues_s;
< static
---
>   generateMTFValues_s;
> 
909,910c909,910
< EState  generateMTFValues_s;
< static
---
>   ;
> 
909,910c909,910
< EState  generateMTFValues_s;
< static
---
>   generateMTFValues_s
> 
909,910c909,910
< EState  generateMTFValues_s;
< static
---
>   
> 
909c909
< EState  generateMTFValues_s;
---
> EState  ;
909c909
< EState  generateMTFValues_s;
---
> EState  
909,910c909,910
< EState  generateMTFValues_s;
< static
---
> EState  ;
> 
909,910c909,910
< EState  generateMTFValues_s;
< static
---
> EState  
> 
909c909
< EState  generateMTFValues_s;
---
> EState  ;
911c911
< void generateMTFValues ( void )
---
>  generateMTFValues ( void )
909c909
< EState  generateMTFValues_s;
---
> EState  
911c911
< void generateMTFValues ( void )
---
>  generateMTFValues ( void )
909,911c909,911
< EState  generateMTFValues_s;
< static
< void generateMTFValues ( void )
---
> EState  ;
> 
>  generateMTFValues ( void )
909,911c909,911
< EState  generateMTFValues_s;
< static
< void generateMTFValues ( void )
---
> EState  
> 
>  generateMTFValues ( void )
909c909
< EState  generateMTFValues_s;
---
> EState  generateMTFValues_s
909,910c909,910
< EState  generateMTFValues_s;
< static
---
> EState  generateMTFValues_s
> 
909c909
< EState  generateMTFValues_s;
---
> EState  generateMTFValues_s
911c911
< void generateMTFValues ( void )
---
>  generateMTFValues ( void )
909,911c909,911
< EState  generateMTFValues_s;
< static
< void generateMTFValues ( void )
---
> EState  generateMTFValues_s
> 
>  generateMTFValues ( void )
909c909
< EState  generateMTFValues_s;
---
> EState  generateMTFValues_s
911c911
< void generateMTFValues ( void )
---
> void  ( void )
909,911c909,911
< EState  generateMTFValues_s;
< static
< void generateMTFValues ( void )
---
> EState  generateMTFValues_s
> 
> void  ( void )
909c909
< EState  generateMTFValues_s;
---
> EState  generateMTFValues_s
911c911
< void generateMTFValues ( void )
---
>   ( void )
909,911c909,911
< EState  generateMTFValues_s;
< static
< void generateMTFValues ( void )
---
> EState  generateMTFValues_s
> 
>   ( void )
910c910
< static
---
> 
910,911c910,911
< static
< void generateMTFValues ( void )
---
> 
>  generateMTFValues ( void )
(87.5 %, 25537 bytes)
911c911
< void generateMTFValues ( void )
---
>  generateMTFValues ( void )
911c911
< void generateMTFValues ( void )
---
>   ( void )
911c911
< void generateMTFValues ( void )
---
>  generateMTFValues  void )
911c911
< void generateMTFValues ( void )
---
>    void )
911c911
< void generateMTFValues ( void )
---
>  generateMTFValues (  )
(87.5 %, 25533 bytes)
911c911
<  generateMTFValues ( void )
---
>   ( void )
911c911
<  generateMTFValues ( void )
---
>    void )
911c911
<  generateMTFValues ( void )
---
>   (  )
911c911
<  generateMTFValues ( void )
---
>     )
911c911
<  generateMTFValues ( void )
---
>   ( void 
911c911
<  generateMTFValues ( void )
---
>    void 
911c911
<  generateMTFValues ( void )
---
>   (  
911c911
<  generateMTFValues ( void )
---
>     
911c911
<  generateMTFValues ( void )
---
>  generateMTFValues  void )
911c911
<  generateMTFValues ( void )
---
>  generateMTFValues   )
911c911
<  generateMTFValues ( void )
---
>  generateMTFValues  void 
911c911
<  generateMTFValues ( void )
---
>  generateMTFValues   
911,912c911,912
<  generateMTFValues ( void )
< {
---
>  generateMTFValues  void )
> 
911,912c911,912
<  generateMTFValues ( void )
< {
---
>  generateMTFValues   )
> 
911,912c911,912
<  generateMTFValues ( void )
< {
---
>  generateMTFValues  void 
> 
911,912c911,912
<  generateMTFValues ( void )
< {
---
>  generateMTFValues   
> 
911c911
<  generateMTFValues ( void )
---
>  generateMTFValues (  )
911c911
<  generateMTFValues ( void )
---
>  generateMTFValues (  
911,912c911,912
<  generateMTFValues ( void )
< {
---
>  generateMTFValues (  )
> 
911,912c911,912
<  generateMTFValues ( void )
< {
---
>  generateMTFValues (  
> 
911c911
<  generateMTFValues ( void )
---
>  generateMTFValues (  )
913c913
<    unsigned char   yy[6];
---
>     char   yy[6];
911c911
<  generateMTFValues ( void )
---
>  generateMTFValues (  
913c913
<    unsigned char   yy[6];
---
>     char   yy[6];
911,913c911,913
<  generateMTFValues ( void )
< {
<    unsigned char   yy[6];
---
>  generateMTFValues (  )
> 
>     char   yy[6];
(87.5 %, 25529 bytes)
911c911
<  generateMTFValues (  )
---
>  generateMTFValues (  
911,912c911,912
<  generateMTFValues (  )
< {
---
>  generateMTFValues (  
> 
911c911
<  generateMTFValues (  )
---
>  generateMTFValues (  
913c913
<    unsigned char   yy[6];
---
>     char   yy[6];
911,913c911,913
<  generateMTFValues (  )
< {
<    unsigned char   yy[6];
---
>  generateMTFValues (  
> 
>     char   yy[6];
911c911
<  generateMTFValues (  )
---
>  generateMTFValues (  
913c913
<    unsigned char   yy[6];
---
>    unsigned    yy[6];
911,913c911,913
<  generateMTFValues (  )
< {
<    unsigned char   yy[6];
---
>  generateMTFValues (  
> 
>    unsigned    yy[6];
911c911
<  generateMTFValues (  )
---
>  generateMTFValues (  
913c913
<    unsigned char   yy[6];
---
>        yy[6];
911,913c911,913
<  generateMTFValues (  )
< {
<    unsigned char   yy[6];
---
>  generateMTFValues (  
> 
>        yy[6];
912c912
< {
---
> 
912,913c912,913
< {
<    unsigned char   yy[6];
---
> 
>     char   yy[6];
912,913c912,913
< {
<    unsigned char   yy[6];
---
> 
>    unsigned    yy[6];
912,913c912,913
< {
<    unsigned char   yy[6];
---
> 
>        yy[6];
912,913c912,913
< {
<    unsigned char   yy[6];
---
> 
>    unsigned char   [6];
912,913c912,913
< {
<    unsigned char   yy[6];
---
> 
>     char   [6];
912,913c912,913
< {
<    unsigned char   yy[6];
---
> 
>    unsigned    [6];
912,913c912,913
< {
<    unsigned char   yy[6];
---
> 
>        [6];
913c913
<    unsigned char   yy[6];
---
>     char   yy[6];
913c913
<    unsigned char   yy[6];
---
>        yy[6];
913c913
<    unsigned char   yy[6];
---
>     char   [6];
913c913
<    unsigned char   yy[6];
---
>        [6];
913c913
<    unsigned char   yy[6];
---
>     char   yy6];
913c913
<    unsigned char   yy[6];
---
>        yy6];
913c913
<    unsigned char   yy[6];
---
>     char   6];
913c913
<    unsigned char   yy[6];
---
>        6];
913c913
<    unsigned char   yy[6];
---
>    unsigned    yy[6];
(87.5 %, 25521 bytes)
913c913
<     char   yy[6];
---
>        yy[6];
913c913
<     char   yy[6];
---
>        [6];
913c913
<     char   yy[6];
---
>        yy6];
913c913
<     char   yy[6];
---
>        6];
913c913
<     char   yy[6];
---
>        yy[];
913c913
<     char   yy[6];
---
>        [];
913c913
<     char   yy[6];
---
>        yy];
913c913
<     char   yy[6];
---
>        ];
913c913
<     char   yy[6];
---
>     char   [6];
913c913
<     char   yy[6];
---
>     char   6];
913c913
<     char   yy[6];
---
>     char   [];
913c913
<     char   yy[6];
---
>     char   ];
913c913
<     char   yy[6];
---
>     char   [6;
913c913
<     char   yy[6];
---
>     char   6;
913c913
<     char   yy[6];
---
>     char   [;
913c913
<     char   yy[6];
---
>     char   ;
913c913
<     char   yy[6];
---
>     char   yy6];
913c913
<     char   yy[6];
---
>     char   yy];
913c913
<     char   yy[6];
---
>     char   yy6;
(87.5 %, 25516 bytes)
913,914c913,914
<     char   ;
<    unsigned char yy_1;
---
>     char   
>      ;
914c914
<    unsigned char yy_1;
---
>     char yy_1;
914c914
<    unsigned char yy_1;
---
>      yy_1;
(87.6 %, 25499 bytes)
913a914
>      
915d915
<    unsigned char yy_0;
915c915
<    unsigned char yy_0;
---
>     char yy_0;
915c915
<    unsigned char yy_0;
---
>      yy_0;
915c915
<    unsigned char yy_0;
---
>     char ;
915c915
<    unsigned char yy_0;
---
>      ;
915c915
<    unsigned char yy_0;
---
>     char yy_0
915c915
<    unsigned char yy_0;
---
>      yy_0
915c915
<    unsigned char yy_0;
---
>     char 
915c915
<    unsigned char yy_0;
---
>      
915c915
<    unsigned char yy_0;
---
>    unsigned  yy_0;
(87.6 %, 25491 bytes)
915c915
<     char yy_0;
---
>      yy_0;
915c915
<     char yy_0;
---
>      ;
915c915
<     char yy_0;
---
>      yy_0
915c915
<     char yy_0;
---
>      
915,916c915,916
<     char yy_0;
<    Int32   i, j;
---
>      yy_0;
>       i, j;
915,916c915,916
<     char yy_0;
<    Int32   i, j;
---
>      ;
>       i, j;
915,916c915,916
<     char yy_0;
<    Int32   i, j;
---
>      yy_0
>       i, j;
915,916c915,916
<     char yy_0;
<    Int32   i, j;
---
>      
>       i, j;
915c915
<     char yy_0;
---
>     char ;
915c915
<     char yy_0;
---
>     char 
915,916c915,916
<     char yy_0;
<    Int32   i, j;
---
>     char ;
>       i, j;
915,916c915,916
<     char yy_0;
<    Int32   i, j;
---
>     char 
>       i, j;
915,916c915,916
<     char yy_0;
<    Int32   i, j;
---
>     char ;
>    Int32   , j;
915,916c915,916
<     char yy_0;
<    Int32   i, j;
---
>     char 
>    Int32   , j;
915,916c915,916
<     char yy_0;
<    Int32   i, j;
---
>     char ;
>       , j;
915,916c915,916
<     char yy_0;
<    Int32   i, j;
---
>     char 
>       , j;
915c915
<     char yy_0;
---
>     char yy_0
915,916c915,916
<     char yy_0;
<    Int32   i, j;
---
>     char yy_0
>       i, j;
915,916c915,916
<     char yy_0;
<    Int32   i, j;
---
>     char yy_0
>    Int32   , j;
915,916c915,916
<     char yy_0;
<    Int32   i, j;
---
>     char yy_0
>       , j;
915,916c915,916
<     char yy_0;
<    Int32   i, j;
---
>     char yy_0
>    Int32   i j;
915,916c915,916
<     char yy_0;
<    Int32   i, j;
---
>     char yy_0
>       i j;
915,916c915,916
<     char yy_0;
<    Int32   i, j;
---
>     char yy_0
>    Int32    j;
915,916c915,916
<     char yy_0;
<    Int32   i, j;
---
>     char yy_0
>        j;
916c916
<    Int32   i, j;
---
>       i, j;
916c916
<    Int32   i, j;
---
>       , j;
916c916
<    Int32   i, j;
---
>       i j;
916c916
<    Int32   i, j;
---
>        j;
916c916
<    Int32   i, j;
---
>       i, ;
916c916
<    Int32   i, j;
---
>       , ;
916c916
<    Int32   i, j;
---
>       i ;
916c916
<    Int32   i, j;
---
>        ;
916c916
<    Int32   i, j;
---
>    Int32   , j;
916c916
<    Int32   i, j;
---
>    Int32    j;
916c916
<    Int32   i, j;
---
>    Int32   , ;
916c916
<    Int32   i, j;
---
>    Int32    ;
916c916
<    Int32   i, j;
---
>    Int32   , j
916c916
<    Int32   i, j;
---
>    Int32    j
916c916
<    Int32   i, j;
---
>    Int32   , 
916c916
<    Int32   i, j;
---
>    Int32    
916c916
<    Int32   i, j;
---
>    Int32   i j;
916c916
<    Int32   i, j;
---
>    Int32   i ;
916c916
<    Int32   i, j;
---
>    Int32   i j
916c916
<    Int32   i, j;
---
>    Int32   i 
916,917c916,917
<    Int32   i, j;
<    Int32   zPend;
---
>    Int32   i j;
>       zPend;
916,917c916,917
<    Int32   i, j;
<    Int32   zPend;
---
>    Int32   i ;
>       zPend;
916,917c916,917
<    Int32   i, j;
<    Int32   zPend;
---
>    Int32   i j
>       zPend;
916,917c916,917
<    Int32   i, j;
<    Int32   zPend;
---
>    Int32   i 
>       zPend;
916c916
<    Int32   i, j;
---
>    Int32   i, ;
916c916
<    Int32   i, j;
---
>    Int32   i, 
916,917c916,917
<    Int32   i, j;
<    Int32   zPend;
---
>    Int32   i, ;
>       zPend;
916,917c916,917
<    Int32   i, j;
<    Int32   zPend;
---
>    Int32   i, 
>       zPend;
(87.6 %, 25489 bytes)
916,917c916,917
<    Int32   i ;
<    Int32   zPend;
---
>    Int32   i 
>       zPend;
916,917c916,917
<    Int32   i ;
<    Int32   zPend;
---
>    Int32   i 
>    Int32   ;
916,917c916,917
<    Int32   i ;
<    Int32   zPend;
---
>    Int32   i 
>       ;
916,917c916,917
<    Int32   i ;
<    Int32   zPend;
---
>    Int32   i 
>    Int32   zPend
916,917c916,917
<    Int32   i ;
<    Int32   zPend;
---
>    Int32   i 
>       zPend
916,917c916,917
<    Int32   i ;
<    Int32   zPend;
---
>    Int32   i 
>    Int32   
916,917c916,917
<    Int32   i ;
<    Int32   zPend;
---
>    Int32   i 
>       
917c917
<    Int32   zPend;
---
>       zPend;
917c917
<    Int32   zPend;
---
>       ;
917c917
<    Int32   zPend;
---
>       zPend
917c917
<    Int32   zPend;
---
>       
917,918c917,918
<    Int32   zPend;
<    Int32   wr;
---
>       zPend;
>       wr;
917,918c917,918
<    Int32   zPend;
<    Int32   wr;
---
>       ;
>       wr;
917,918c917,918
<    Int32   zPend;
<    Int32   wr;
---
>       zPend
>       wr;
917,918c917,918
<    Int32   zPend;
<    Int32   wr;
---
>       
>       wr;
917c917
<    Int32   zPend;
---
>    Int32   ;
917c917
<    Int32   zPend;
---
>    Int32   
917,918c917,918
<    Int32   zPend;
<    Int32   wr;
---
>    Int32   ;
>       wr;
917,918c917,918
<    Int32   zPend;
<    Int32   wr;
---
>    Int32   
>       wr;
917,918c917,918
<    Int32   zPend;
<    Int32   wr;
---
>    Int32   ;
>    Int32   ;
917,918c917,918
<    Int32   zPend;
<    Int32   wr;
---
>    Int32   
>    Int32   ;
917,918c917,918
<    Int32   zPend;
<    Int32   wr;
---
>    Int32   ;
>       ;
917,918c917,918
<    Int32   zPend;
<    Int32   wr;
---
>    Int32   
>       ;
917c917
<    Int32   zPend;
---
>    Int32   zPend
917,918c917,918
<    Int32   zPend;
<    Int32   wr;
---
>    Int32   zPend
>       wr;
917,918c917,918
<    Int32   zPend;
<    Int32   wr;
---
>    Int32   zPend
>    Int32   ;
917,918c917,918
<    Int32   zPend;
<    Int32   wr;
---
>    Int32   zPend
>       ;
917,918c917,918
<    Int32   zPend;
<    Int32   wr;
---
>    Int32   zPend
>    Int32   wr
917,918c917,918
<    Int32   zPend;
<    Int32   wr;
---
>    Int32   zPend
>       wr
917,918c917,918
<    Int32   zPend;
<    Int32   wr;
---
>    Int32   zPend
>    Int32   
917,918c917,918
<    Int32   zPend;
<    Int32   wr;
---
>    Int32   zPend
>       
918c918
<    Int32   wr;
---
>       wr;
918c918
<    Int32   wr;
---
>       ;
918c918
<    Int32   wr;
---
>       wr
918c918
<    Int32   wr;
---
>       
918,919c918,919
<    Int32   wr;
<    Int32   EOB;
---
>       wr;
>       EOB;
918,919c918,919
<    Int32   wr;
<    Int32   EOB;
---
>       ;
>       EOB;
918,919c918,919
<    Int32   wr;
<    Int32   EOB;
---
>       wr
>       EOB;
918,919c918,919
<    Int32   wr;
<    Int32   EOB;
---
>       
>       EOB;
918c918
<    Int32   wr;
---
>    Int32   ;
918c918
<    Int32   wr;
---
>    Int32   
918,919c918,919
<    Int32   wr;
<    Int32   EOB;
---
>    Int32   ;
>       EOB;
918,919c918,919
<    Int32   wr;
<    Int32   EOB;
---
>    Int32   
>       EOB;
918,919c918,919
<    Int32   wr;
<    Int32   EOB;
---
>    Int32   ;
>    Int32   ;
918,919c918,919
<    Int32   wr;
<    Int32   EOB;
---
>    Int32   
>    Int32   ;
918,919c918,919
<    Int32   wr;
<    Int32   EOB;
---
>    Int32   ;
>       ;
918,919c918,919
<    Int32   wr;
<    Int32   EOB;
---
>    Int32   
>       ;
918c918
<    Int32   wr;
---
>    Int32   wr
918,919c918,919
<    Int32   wr;
<    Int32   EOB;
---
>    Int32   wr
>       EOB;
918,919c918,919
<    Int32   wr;
<    Int32   EOB;
---
>    Int32   wr
>    Int32   ;
918,919c918,919
<    Int32   wr;
<    Int32   EOB;
---
>    Int32   wr
>       ;
918,919c918,919
<    Int32   wr;
<    Int32   EOB;
---
>    Int32   wr
>    Int32   EOB
918,919c918,919
<    Int32   wr;
<    Int32   EOB;
---
>    Int32   wr
>       EOB
918,919c918,919
<    Int32   wr;
<    Int32   EOB;
---
>    Int32   wr
>    Int32   
918,919c918,919
<    Int32   wr;
<    Int32   EOB;
---
>    Int32   wr
>       
919c919
<    Int32   EOB;
---
>       EOB;
919c919
<    Int32   EOB;
---
>       ;
919c919
<    Int32   EOB;
---
>       EOB
919c919
<    Int32   EOB;
---
>       
919c919
<    Int32   EOB;
---
>       EOB;
922c922
<    UInt32 ptr   = (&generateMTFValues_s.ptr);
---
>     ptr   = (&generateMTFValues_s.ptr);
919c919
<    Int32   EOB;
---
>       ;
922c922
<    UInt32 ptr   = (&generateMTFValues_s.ptr);
---
>     ptr   = (&generateMTFValues_s.ptr);
919c919
<    Int32   EOB;
---
>       EOB
922c922
<    UInt32 ptr   = (&generateMTFValues_s.ptr);
---
>     ptr   = (&generateMTFValues_s.ptr);
919c919
<    Int32   EOB;
---
>       
922c922
<    UInt32 ptr   = (&generateMTFValues_s.ptr);
---
>     ptr   = (&generateMTFValues_s.ptr);
919c919
<    Int32   EOB;
---
>    Int32   ;
919c919
<    Int32   EOB;
---
>    Int32   
919c919
<    Int32   EOB;
---
>    Int32   ;
922c922
<    UInt32 ptr   = (&generateMTFValues_s.ptr);
---
>     ptr   = (&generateMTFValues_s.ptr);
919c919
<    Int32   EOB;
---
>    Int32   
922c922
<    UInt32 ptr   = (&generateMTFValues_s.ptr);
---
>     ptr   = (&generateMTFValues_s.ptr);
919c919
<    Int32   EOB;
---
>    Int32   ;
922c922
<    UInt32 ptr   = (&generateMTFValues_s.ptr);
---
>    UInt32    = (&generateMTFValues_s.ptr);
919c919
<    Int32   EOB;
---
>    Int32   
922c922
<    UInt32 ptr   = (&generateMTFValues_s.ptr);
---
>    UInt32    = (&generateMTFValues_s.ptr);
919c919
<    Int32   EOB;
---
>    Int32   ;
922c922
<    UInt32 ptr   = (&generateMTFValues_s.ptr);
---
>        = (&generateMTFValues_s.ptr);
919c919
<    Int32   EOB;
---
>    Int32   
922c922
<    UInt32 ptr   = (&generateMTFValues_s.ptr);
---
>        = (&generateMTFValues_s.ptr);
919c919
<    Int32   EOB;
---
>    Int32   EOB
919c919
<    Int32   EOB;
---
>    Int32   EOB
922c922
<    UInt32 ptr   = (&generateMTFValues_s.ptr);
---
>     ptr   = (&generateMTFValues_s.ptr);
919c919
<    Int32   EOB;
---
>    Int32   EOB
922c922
<    UInt32 ptr   = (&generateMTFValues_s.ptr);
---
>    UInt32    = (&generateMTFValues_s.ptr);
919c919
<    Int32   EOB;
---
>    Int32   EOB
922c922
<    UInt32 ptr   = (&generateMTFValues_s.ptr);
---
>        = (&generateMTFValues_s.ptr);
919c919
<    Int32   EOB;
---
>    Int32   EOB
922c922
<    UInt32 ptr   = (&generateMTFValues_s.ptr);
---
>    UInt32 ptr    (&generateMTFValues_s.ptr);
919c919
<    Int32   EOB;
---
>    Int32   EOB
922c922
<    UInt32 ptr   = (&generateMTFValues_s.ptr);
---
>     ptr    (&generateMTFValues_s.ptr);
919c919
<    Int32   EOB;
---
>    Int32   EOB
922c922
<    UInt32 ptr   = (&generateMTFValues_s.ptr);
---
>    UInt32     (&generateMTFValues_s.ptr);
919c919
<    Int32   EOB;
---
>    Int32   EOB
922c922
<    UInt32 ptr   = (&generateMTFValues_s.ptr);
---
>         (&generateMTFValues_s.ptr);
922c922
<    UInt32 ptr   = (&generateMTFValues_s.ptr);
---
>     ptr   = (&generateMTFValues_s.ptr);
922c922
<    UInt32 ptr   = (&generateMTFValues_s.ptr);
---
>        = (&generateMTFValues_s.ptr);
922c922
<    UInt32 ptr   = (&generateMTFValues_s.ptr);
---
>     ptr    (&generateMTFValues_s.ptr);
(87.6 %, 25479 bytes)
922c922
<        = (&generateMTFValues_s.ptr);
---
>         generateMTFValues_s.ptr);
922c922
<        = (&generateMTFValues_s.ptr);
---
>         (&.ptr);
922c922
<        = (&generateMTFValues_s.ptr);
---
>         &.ptr);
922c922
<        = (&generateMTFValues_s.ptr);
---
>         (.ptr);
922c922
<        = (&generateMTFValues_s.ptr);
---
>         .ptr);
922c922
<        = (&generateMTFValues_s.ptr);
---
>        = &generateMTFValues_s.ptr);
922c922
<        = (&generateMTFValues_s.ptr);
---
>        = generateMTFValues_s.ptr);
922c922
<        = (&generateMTFValues_s.ptr);
---
>        = &.ptr);
922c922
<        = (&generateMTFValues_s.ptr);
---
>        = .ptr);
922c922
<        = (&generateMTFValues_s.ptr);
---
>        = &generateMTFValues_sptr);
922c922
<        = (&generateMTFValues_s.ptr);
---
>        = generateMTFValues_sptr);
922c922
<        = (&generateMTFValues_s.ptr);
---
>        = &ptr);
922c922
<        = (&generateMTFValues_s.ptr);
---
>        = ptr);
922c922
<        = (&generateMTFValues_s.ptr);
---
>        = (generateMTFValues_s.ptr);
922c922
<        = (&generateMTFValues_s.ptr);
---
>        = (.ptr);
922c922
<        = (&generateMTFValues_s.ptr);
---
>        = (generateMTFValues_sptr);
922c922
<        = (&generateMTFValues_s.ptr);
---
>        = (ptr);
922c922
<        = (&generateMTFValues_s.ptr);
---
>        = (generateMTFValues_s.);
922c922
<        = (&generateMTFValues_s.ptr);
---
>        = (.);
922c922
<        = (&generateMTFValues_s.ptr);
---
>        = (generateMTFValues_s);
922c922
<        = (&generateMTFValues_s.ptr);
---
>        = ();
922c922
<        = (&generateMTFValues_s.ptr);
---
>        = (&.ptr);
922c922
<        = (&generateMTFValues_s.ptr);
---
>        = (&ptr);
922c922
<        = (&generateMTFValues_s.ptr);
---
>        = (&.);
922c922
<        = (&generateMTFValues_s.ptr);
---
>        = (&);
922c922
<        = (&generateMTFValues_s.ptr);
---
>        = (&.ptr;
922c922
<        = (&generateMTFValues_s.ptr);
---
>        = (&ptr;
922c922
<        = (&generateMTFValues_s.ptr);
---
>        = (&.;
922c922
<        = (&generateMTFValues_s.ptr);
---
>        = (&;
922c922
<        = (&generateMTFValues_s.ptr);
---
>        = (&generateMTFValues_sptr);
922c922
<        = (&generateMTFValues_s.ptr);
---
>        = (&generateMTFValues_s);
(87.6 %, 25478 bytes)
922c922
<        = (generateMTFValues_s.ptr);
---
>        = (.ptr);
922c922
<        = (generateMTFValues_s.ptr);
---
>        = (ptr);
922c922
<        = (generateMTFValues_s.ptr);
---
>        = (.);
922c922
<        = (generateMTFValues_s.ptr);
---
>        = ();
922c922
<        = (generateMTFValues_s.ptr);
---
>        = (.ptr;
922c922
<        = (generateMTFValues_s.ptr);
---
>        = (ptr;
922c922
<        = (generateMTFValues_s.ptr);
---
>        = (.;
922c922
<        = (generateMTFValues_s.ptr);
---
>        = (;
922c922
<        = (generateMTFValues_s.ptr);
---
>        = (generateMTFValues_sptr);
922c922
<        = (generateMTFValues_s.ptr);
---
>        = (generateMTFValues_s);
922c922
<        = (generateMTFValues_s.ptr);
---
>        = (generateMTFValues_sptr;
922c922
<        = (generateMTFValues_s.ptr);
---
>        = (generateMTFValues_s;
922c922
<        = (generateMTFValues_s.ptr);
---
>        = (generateMTFValues_sptr)
922c922
<        = (generateMTFValues_s.ptr);
---
>        = (generateMTFValues_s)
922c922
<        = (generateMTFValues_s.ptr);
---
>        = (generateMTFValues_sptr
922c922
<        = (generateMTFValues_s.ptr);
---
>        = (generateMTFValues_s
922c922
<        = (generateMTFValues_s.ptr);
---
>        = (generateMTFValues_s.);
922c922
<        = (generateMTFValues_s.ptr);
---
>        = (generateMTFValues_s.;
922c922
<        = (generateMTFValues_s.ptr);
---
>        = (generateMTFValues_s.)
922c922
<        = (generateMTFValues_s.ptr);
---
>        = (generateMTFValues_s.
922,923c922,923
<        = (generateMTFValues_s.ptr);
<    UInt32 ptr_0;
---
>        = (generateMTFValues_s.);
>     ptr_0;
922,923c922,923
<        = (generateMTFValues_s.ptr);
<    UInt32 ptr_0;
---
>        = (generateMTFValues_s.;
>     ptr_0;
922,923c922,923
<        = (generateMTFValues_s.ptr);
<    UInt32 ptr_0;
---
>        = (generateMTFValues_s.)
>     ptr_0;
922,923c922,923
<        = (generateMTFValues_s.ptr);
<    UInt32 ptr_0;
---
>        = (generateMTFValues_s.
>     ptr_0;
922c922
<        = (generateMTFValues_s.ptr);
---
>        = (generateMTFValues_s.ptr;
922c922
<        = (generateMTFValues_s.ptr);
---
>        = (generateMTFValues_s.ptr
922,923c922,923
<        = (generateMTFValues_s.ptr);
<    UInt32 ptr_0;
---
>        = (generateMTFValues_s.ptr;
>     ptr_0;
922,923c922,923
<        = (generateMTFValues_s.ptr);
<    UInt32 ptr_0;
---
>        = (generateMTFValues_s.ptr
>     ptr_0;
922,923c922,923
<        = (generateMTFValues_s.ptr);
<    UInt32 ptr_0;
---
>        = (generateMTFValues_s.ptr;
>    UInt32 ;
922,923c922,923
<        = (generateMTFValues_s.ptr);
<    UInt32 ptr_0;
---
>        = (generateMTFValues_s.ptr
>    UInt32 ;
922,923c922,923
<        = (generateMTFValues_s.ptr);
<    UInt32 ptr_0;
---
>        = (generateMTFValues_s.ptr;
>     ;
922,923c922,923
<        = (generateMTFValues_s.ptr);
<    UInt32 ptr_0;
---
>        = (generateMTFValues_s.ptr
>     ;
922c922
<        = (generateMTFValues_s.ptr);
---
>        = (generateMTFValues_s.ptr)
922,923c922,923
<        = (generateMTFValues_s.ptr);
<    UInt32 ptr_0;
---
>        = (generateMTFValues_s.ptr)
>     ptr_0;
922,923c922,923
<        = (generateMTFValues_s.ptr);
<    UInt32 ptr_0;
---
>        = (generateMTFValues_s.ptr)
>    UInt32 ;
922,923c922,923
<        = (generateMTFValues_s.ptr);
<    UInt32 ptr_0;
---
>        = (generateMTFValues_s.ptr)
>     ;
922,923c922,923
<        = (generateMTFValues_s.ptr);
<    UInt32 ptr_0;
---
>        = (generateMTFValues_s.ptr)
>    UInt32 ptr_0
922,923c922,923
<        = (generateMTFValues_s.ptr);
<    UInt32 ptr_0;
---
>        = (generateMTFValues_s.ptr)
>     ptr_0
922,923c922,923
<        = (generateMTFValues_s.ptr);
<    UInt32 ptr_0;
---
>        = (generateMTFValues_s.ptr)
>    UInt32 
922,923c922,923
<        = (generateMTFValues_s.ptr);
<    UInt32 ptr_0;
---
>        = (generateMTFValues_s.ptr)
>     
923c923
<    UInt32 ptr_0;
---
>     ptr_0;
923c923
<    UInt32 ptr_0;
---
>     ;
(87.6 %, 25466 bytes)
923,924c923,924
<     ;
<    unsigned char* block  = generateMTFValues_s.block;
---
>     
>     * block  = generateMTFValues_s.block;
923,924c923,924
<     ;
<    unsigned char* block  = generateMTFValues_s.block;
---
>     
>    unsigned char block  = generateMTFValues_s.block;
923,924c923,924
<     ;
<    unsigned char* block  = generateMTFValues_s.block;
---
>     
>     char block  = generateMTFValues_s.block;
923,924c923,924
<     ;
<    unsigned char* block  = generateMTFValues_s.block;
---
>     
>    unsigned  block  = generateMTFValues_s.block;
923,924c923,924
<     ;
<    unsigned char* block  = generateMTFValues_s.block;
---
>     
>      block  = generateMTFValues_s.block;
924c924
<    unsigned char* block  = generateMTFValues_s.block;
---
>     char* block  = generateMTFValues_s.block;
924c924
<    unsigned char* block  = generateMTFValues_s.block;
---
>     * block  = generateMTFValues_s.block;
924c924
<    unsigned char* block  = generateMTFValues_s.block;
---
>     char block  = generateMTFValues_s.block;
(87.6 %, 25458 bytes)
924c924
<     char* block  = generateMTFValues_s.block;
---
>     * block  = generateMTFValues_s.block;
924c924
<     char* block  = generateMTFValues_s.block;
---
>      block  = generateMTFValues_s.block;
924c924
<     char* block  = generateMTFValues_s.block;
---
>     *   = generateMTFValues_s.block;
924c924
<     char* block  = generateMTFValues_s.block;
---
>        = generateMTFValues_s.block;
924c924
<     char* block  = generateMTFValues_s.block;
---
>     * block   generateMTFValues_s.block;
924c924
<     char* block  = generateMTFValues_s.block;
---
>      block   generateMTFValues_s.block;
924c924
<     char* block  = generateMTFValues_s.block;
---
>     *    generateMTFValues_s.block;
924c924
<     char* block  = generateMTFValues_s.block;
---
>         generateMTFValues_s.block;
924c924
<     char* block  = generateMTFValues_s.block;
---
>     char block  = generateMTFValues_s.block;
(87.6 %, 25447 bytes)
924c924
<         generateMTFValues_s.block;
---
>         
924c924
<         generateMTFValues_s.block;
---
>         generateMTFValues_sblock;
924c924
<         generateMTFValues_s.block;
---
>         generateMTFValues_s;
(87.6 %, 25421 bytes)
925c925
<    unsigned char block_0;
---
>      
925c925
<    unsigned char block_0;
---
>    unsigned  block_0;
(87.6 %, 25401 bytes)
926c926
<    unsigned short mtfv  = (&generateMTFValues_s.mtfv);
---
>         (&generateMTFValues_s.mtfv);
926c926
<    unsigned short mtfv  = (&generateMTFValues_s.mtfv);
---
>    unsigned  mtfv  = (&generateMTFValues_s.mtfv);
926c926
<    unsigned short mtfv  = (&generateMTFValues_s.mtfv);
---
>    unsigned    = (&generateMTFValues_s.mtfv);
926c926
<    unsigned short mtfv  = (&generateMTFValues_s.mtfv);
---
>    unsigned  mtfv   (&generateMTFValues_s.mtfv);
926c926
<    unsigned short mtfv  = (&generateMTFValues_s.mtfv);
---
>    unsigned     (&generateMTFValues_s.mtfv);
926c926
<    unsigned short mtfv  = (&generateMTFValues_s.mtfv);
---
>    unsigned  mtfv  = &generateMTFValues_s.mtfv);
926c926
<    unsigned short mtfv  = (&generateMTFValues_s.mtfv);
---
>    unsigned    = &generateMTFValues_s.mtfv);
(87.6 %, 25383 bytes)
926c926
<         (&generateMTFValues_s.mtfv);
---
>         mtfv);
926c926
<         (&generateMTFValues_s.mtfv);
---
>         (generateMTFValues_s.mtfv);
926c926
<         (&generateMTFValues_s.mtfv);
---
>         (.mtfv);
926c926
<         (&generateMTFValues_s.mtfv);
---
>         (generateMTFValues_smtfv);
926c926
<         (&generateMTFValues_s.mtfv);
---
>         (mtfv);
926c926
<         (&generateMTFValues_s.mtfv);
---
>         (generateMTFValues_s.);
926c926
<         (&generateMTFValues_s.mtfv);
---
>         (.);
926c926
<         (&generateMTFValues_s.mtfv);
---
>         (generateMTFValues_s);
(87.6 %, 25382 bytes)
926c926
<         (generateMTFValues_s.mtfv);
---
>         (.mtfv);
926c926
<         (generateMTFValues_s.mtfv);
---
>         (mtfv);
926c926
<         (generateMTFValues_s.mtfv);
---
>         (.);
926c926
<         (generateMTFValues_s.mtfv);
---
>         ();
926c926
<         (generateMTFValues_s.mtfv);
---
>         (.mtfv;
926c926
<         (generateMTFValues_s.mtfv);
---
>         (mtfv;
926c926
<         (generateMTFValues_s.mtfv);
---
>         (.;
926c926
<         (generateMTFValues_s.mtfv);
---
>         (;
926c926
<         (generateMTFValues_s.mtfv);
---
>         (generateMTFValues_smtfv);
926c926
<         (generateMTFValues_s.mtfv);
---
>         (generateMTFValues_s);
926c926
<         (generateMTFValues_s.mtfv);
---
>         (generateMTFValues_smtfv;
926c926
<         (generateMTFValues_s.mtfv);
---
>         (generateMTFValues_s;
926c926
<         (generateMTFValues_s.mtfv);
---
>         (generateMTFValues_smtfv)
926c926
<         (generateMTFValues_s.mtfv);
---
>         (generateMTFValues_s)
926c926
<         (generateMTFValues_s.mtfv);
---
>         (generateMTFValues_smtfv
926c926
<         (generateMTFValues_s.mtfv);
---
>         (generateMTFValues_s
926c926
<         (generateMTFValues_s.mtfv);
---
>         (generateMTFValues_s.);
926c926
<         (generateMTFValues_s.mtfv);
---
>         (generateMTFValues_s.;
926c926
<         (generateMTFValues_s.mtfv);
---
>         (generateMTFValues_s.)
926c926
<         (generateMTFValues_s.mtfv);
---
>         (generateMTFValues_s.
926,927c926,927
<         (generateMTFValues_s.mtfv);
<    unsigned short mtfv_0;
---
>         (generateMTFValues_s.);
>     short mtfv_0;
926,927c926,927
<         (generateMTFValues_s.mtfv);
<    unsigned short mtfv_0;
---
>         (generateMTFValues_s.;
>     short mtfv_0;
926,927c926,927
<         (generateMTFValues_s.mtfv);
<    unsigned short mtfv_0;
---
>         (generateMTFValues_s.)
>     short mtfv_0;
926,927c926,927
<         (generateMTFValues_s.mtfv);
<    unsigned short mtfv_0;
---
>         (generateMTFValues_s.
>     short mtfv_0;
926c926
<         (generateMTFValues_s.mtfv);
---
>         (generateMTFValues_s.mtfv;
926c926
<         (generateMTFValues_s.mtfv);
---
>         (generateMTFValues_s.mtfv
926,927c926,927
<         (generateMTFValues_s.mtfv);
<    unsigned short mtfv_0;
---
>         (generateMTFValues_s.mtfv;
>     short mtfv_0;
(87.6 %, 25377 bytes)
926c926
<         (generateMTFValues_s);
---
>         (generateMTFValues_s
926,927c926,927
<         (generateMTFValues_s);
<    unsigned short mtfv_0;
---
>         (generateMTFValues_s;
>     short mtfv_0;
926,927c926,927
<         (generateMTFValues_s);
<    unsigned short mtfv_0;
---
>         (generateMTFValues_s
>     short mtfv_0;
926,927c926,927
<         (generateMTFValues_s);
<    unsigned short mtfv_0;
---
>         (generateMTFValues_s;
>    unsigned  mtfv_0;
926,927c926,927
<         (generateMTFValues_s);
<    unsigned short mtfv_0;
---
>         (generateMTFValues_s
>    unsigned  mtfv_0;
926,927c926,927
<         (generateMTFValues_s);
<    unsigned short mtfv_0;
---
>         (generateMTFValues_s;
>      mtfv_0;
926,927c926,927
<         (generateMTFValues_s);
<    unsigned short mtfv_0;
---
>         (generateMTFValues_s
>      mtfv_0;
926c926
<         (generateMTFValues_s);
---
>         (generateMTFValues_s)
926,927c926,927
<         (generateMTFValues_s);
<    unsigned short mtfv_0;
---
>         (generateMTFValues_s)
>     short mtfv_0;
926,927c926,927
<         (generateMTFValues_s);
<    unsigned short mtfv_0;
---
>         (generateMTFValues_s)
>    unsigned  mtfv_0;
926,927c926,927
<         (generateMTFValues_s);
<    unsigned short mtfv_0;
---
>         (generateMTFValues_s)
>      mtfv_0;
926,927c926,927
<         (generateMTFValues_s);
<    unsigned short mtfv_0;
---
>         (generateMTFValues_s)
>    unsigned short ;
926,927c926,927
<         (generateMTFValues_s);
<    unsigned short mtfv_0;
---
>         (generateMTFValues_s)
>     short ;
926,927c926,927
<         (generateMTFValues_s);
<    unsigned short mtfv_0;
---
>         (generateMTFValues_s)
>    unsigned  ;
926,927c926,927
<         (generateMTFValues_s);
<    unsigned short mtfv_0;
---
>         (generateMTFValues_s)
>      ;
927c927
<    unsigned short mtfv_0;
---
>     short mtfv_0;
927c927
<    unsigned short mtfv_0;
---
>      mtfv_0;
927c927
<    unsigned short mtfv_0;
---
>     short ;
927c927
<    unsigned short mtfv_0;
---
>      ;
927c927
<    unsigned short mtfv_0;
---
>     short mtfv_0
(87.6 %, 25369 bytes)
927c927
<     short mtfv_0;
---
>      mtfv_0;
927c927
<     short mtfv_0;
---
>      ;
927c927
<     short mtfv_0;
---
>      mtfv_0
927c927
<     short mtfv_0;
---
>      
927c927
<     short mtfv_0;
---
>      mtfv_0;
929c929
<    ;
---
>    
927c927
<     short mtfv_0;
---
>      ;
929c929
<    ;
---
>    
927c927
<     short mtfv_0;
---
>      mtfv_0
929c929
<    ;
---
>    
927c927
<     short mtfv_0;
---
>      
929c929
<    ;
---
>    
927c927
<     short mtfv_0;
---
>     short ;
927c927
<     short mtfv_0;
---
>     short 
927c927
<     short mtfv_0;
---
>     short ;
929c929
<    ;
---
>    
927c927
<     short mtfv_0;
---
>     short 
929c929
<    ;
---
>    
927c927
<     short mtfv_0;
---
>     short ;
930c930
<    EOB = generateMTFValues_s.nInUse+1;
---
>     = generateMTFValues_s.nInUse+1;
927c927
<     short mtfv_0;
---
>     short 
930c930
<    EOB = generateMTFValues_s.nInUse+1;
---
>     = generateMTFValues_s.nInUse+1;
927c927
<     short mtfv_0;
---
>     short ;
929,930c929,930
<    ;
<    EOB = generateMTFValues_s.nInUse+1;
---
>    
>     = generateMTFValues_s.nInUse+1;
927c927
<     short mtfv_0;
---
>     short 
929,930c929,930
<    ;
<    EOB = generateMTFValues_s.nInUse+1;
---
>    
>     = generateMTFValues_s.nInUse+1;
927c927
<     short mtfv_0;
---
>     short mtfv_0
927c927
<     short mtfv_0;
---
>     short mtfv_0
929c929
<    ;
---
>    
927c927
<     short mtfv_0;
---
>     short mtfv_0
930c930
<    EOB = generateMTFValues_s.nInUse+1;
---
>     = generateMTFValues_s.nInUse+1;
927c927
<     short mtfv_0;
---
>     short mtfv_0
929,930c929,930
<    ;
<    EOB = generateMTFValues_s.nInUse+1;
---
>    
>     = generateMTFValues_s.nInUse+1;
(87.6 %, 25368 bytes)
929c929
<    ;
---
>    
929,930c929,930
<    ;
<    EOB = generateMTFValues_s.nInUse+1;
---
>    
>     = generateMTFValues_s.nInUse+1;
929,930c929,930
<    ;
<    EOB = generateMTFValues_s.nInUse+1;
---
>    
>    EOB  generateMTFValues_s.nInUse+1;
929,930c929,930
<    ;
<    EOB = generateMTFValues_s.nInUse+1;
---
>    
>      generateMTFValues_s.nInUse+1;
929,930c929,930
<    ;
<    EOB = generateMTFValues_s.nInUse+1;
---
>    
>    EOB = .nInUse+1;
929,930c929,930
<    ;
<    EOB = generateMTFValues_s.nInUse+1;
---
>    
>     = .nInUse+1;
929,930c929,930
<    ;
<    EOB = generateMTFValues_s.nInUse+1;
---
>    
>    EOB  .nInUse+1;
929,930c929,930
<    ;
<    EOB = generateMTFValues_s.nInUse+1;
---
>    
>      .nInUse+1;
930c930
<    EOB = generateMTFValues_s.nInUse+1;
---
>     = generateMTFValues_s.nInUse+1;
930c930
<    EOB = generateMTFValues_s.nInUse+1;
---
>      generateMTFValues_s.nInUse+1;
(87.6 %, 25364 bytes)
930c930
<     = generateMTFValues_s.nInUse+1;
---
>      .nInUse+1;
930c930
<     = generateMTFValues_s.nInUse+1;
---
>      generateMTFValues_snInUse+1;
930c930
<     = generateMTFValues_s.nInUse+1;
---
>      nInUse+1;
930c930
<     = generateMTFValues_s.nInUse+1;
---
>      generateMTFValues_s.+1;
930c930
<     = generateMTFValues_s.nInUse+1;
---
>      .+1;
930c930
<     = generateMTFValues_s.nInUse+1;
---
>      generateMTFValues_s+1;
930c930
<     = generateMTFValues_s.nInUse+1;
---
>      +1;
930c930
<     = generateMTFValues_s.nInUse+1;
---
>     = .nInUse+1;
930c930
<     = generateMTFValues_s.nInUse+1;
---
>     = nInUse+1;
930c930
<     = generateMTFValues_s.nInUse+1;
---
>     = .+1;
930c930
<     = generateMTFValues_s.nInUse+1;
---
>     = +1;
930c930
<     = generateMTFValues_s.nInUse+1;
---
>     = .nInUse1;
930c930
<     = generateMTFValues_s.nInUse+1;
---
>     = nInUse1;
930c930
<     = generateMTFValues_s.nInUse+1;
---
>     = .1;
(87.6 %, 25338 bytes)
930c930
<     = +1;
---
>     = 
930c930
<     = +1;
---
>     = 1;
932c932
<    i = 0;
---
>     = 0;
930c930
<     = +1;
---
>     = ;
932c932
<    i = 0;
---
>     = 0;
930c930
<     = +1;
---
>     = 1
932c932
<    i = 0;
---
>     = 0;
930c930
<     = +1;
---
>     = 
932c932
<    i = 0;
---
>     = 0;
930c930
<     = +1;
---
>     = +;
930c930
<     = +1;
---
>     = +
930c930
<     = +1;
---
>     = +;
932c932
<    i = 0;
---
>     = 0;
930c930
<     = +1;
---
>     = +
932c932
<    i = 0;
---
>     = 0;
930c930
<     = +1;
---
>     = +;
932c932
<    i = 0;
---
>    i  0;
930c930
<     = +1;
---
>     = +
932c932
<    i = 0;
---
>    i  0;
930c930
<     = +1;
---
>     = +;
932c932
<    i = 0;
---
>      0;
930c930
<     = +1;
---
>     = +
932c932
<    i = 0;
---
>      0;
(87.6 %, 25335 bytes)
932c932
<    i = 0;
---
>      ;
932c932
<    i = 0;
---
>     = 0
932c932
<    i = 0;
---
>      0
932c932
<    i = 0;
---
>     = 
932c932
<    i = 0;
---
>      
932c932
<    i = 0;
---
>    i  0;
932c932
<    i = 0;
---
>    i  ;
932c932
<    i = 0;
---
>    i  0
932c932
<    i = 0;
---
>    i  
932c932
<    i = 0;
---
>    i  0;
934c934
<    for (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>     (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
932c932
<    i = 0;
---
>    i  ;
934c934
<    for (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>     (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
932c932
<    i = 0;
---
>    i  0
934c934
<    for (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>     (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
932c932
<    i = 0;
---
>    i  
934c934
<    for (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>     (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
932c932
<    i = 0;
---
>    i = ;
932c932
<    i = 0;
---
>    i = 
932c932
<    i = 0;
---
>    i = ;
934c934
<    for (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>     (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
932c932
<    i = 0;
---
>    i = 
934c934
<    for (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>     (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
932c932
<    i = 0;
---
>    i = ;
934c934
<    for (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
932c932
<    i = 0;
---
>    i = 
934c934
<    for (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
932c932
<    i = 0;
---
>    i = ;
934c934
<    for (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>     i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
932c932
<    i = 0;
---
>    i = 
934c934
<    for (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>     i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
932c932
<    i = 0;
---
>    i = 0
932c932
<    i = 0;
---
>    i = 0
934c934
<    for (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>     (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
932c932
<    i = 0;
---
>    i = 0
934c934
<    for (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
(87.6 %, 25333 bytes)
932c932
<    i  ;
---
>    i  
934c934
<    for (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>     (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
932c932
<    i  ;
---
>    i  
934c934
<    for (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
932c932
<    i  ;
---
>    i  
934c934
<    for (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>     i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
932c932
<    i  ;
---
>    i  
934c934
<    for (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
932c932
<    i  ;
---
>    i  
934c934
<    for (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>     (; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
932c932
<    i  ;
---
>    i  
934c934
<    for (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for ; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
932c932
<    i  ;
---
>    i  
934c934
<    for (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>     ; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
934c934
<    for (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>     (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
934c934
<    for (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>     i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
934c934
<    for (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>     (; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
934c934
<    for (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>     ; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
934c934
<    for (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>     (i 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
934c934
<    for (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>     i 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
934c934
<    for (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>     ( 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
934c934
<    for (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>      0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
934c934
<    for (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
934c934
<    for (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for ; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
934c934
<    for (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for i 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
934c934
<    for (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for  0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
934c934
<    for (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for i;  <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
934c934
<    for (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for ;  <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
934c934
<    for (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for i  <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
934c934
<    for (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for   <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
934c934
<    for (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
934c934
<    for (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for ( 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
934c934
<    for (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;  <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
934c934
<    for (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (  <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
934c934
<    for (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (; 0  EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
934c934
<    for (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for ( 0  EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
934c934
<    for (i; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
(87.6 %, 25332 bytes)
934c934
<    for (; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for ( 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
934c934
<    for (; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (  <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
934c934
<    for (; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for ( 0  EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
934c934
<    for (; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (   EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
934c934
<    for (; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for ( 0 <= ; i++) generateMTFValues_s.mtfFreq[0] = 0;
934c934
<    for (; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (  <= ; i++) generateMTFValues_s.mtfFreq[0] = 0;
934c934
<    for (; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for ( 0  ; i++) generateMTFValues_s.mtfFreq[0] = 0;
934c934
<    for (; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (   ; i++) generateMTFValues_s.mtfFreq[0] = 0;
934c934
<    for (; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;  <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
934c934
<    for (; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
934c934
<    for (; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;  <= ; i++) generateMTFValues_s.mtfFreq[0] = 0;
934c934
<    for (; 0 <= EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; i++) generateMTFValues_s.mtfFreq[0] = 0;
(87.6 %, 25329 bytes)
934c934
<    for (;   EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;    i++) generateMTFValues_s.mtfFreq[0] = 0;
934c934
<    for (;   EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ++) generateMTFValues_s.mtfFreq[0] = 0;
934c934
<    for (;   EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;    ++) generateMTFValues_s.mtfFreq[0] = 0;
934c934
<    for (;   EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; i) generateMTFValues_s.mtfFreq[0] = 0;
934c934
<    for (;   EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;    i) generateMTFValues_s.mtfFreq[0] = 0;
934c934
<    for (;   EOB; i++) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
(87.6 %, 25324 bytes)
934c934
<    for (;   ; i) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;    i) .mtfFreq[0] = 0;
934c934
<    for (;   ; i) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;    ) .mtfFreq[0] = 0;
934c934
<    for (;   ; i) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;    i .mtfFreq[0] = 0;
934c934
<    for (;   ; i) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;     .mtfFreq[0] = 0;
934c934
<    for (;   ; i) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
934c934
<    for (;   ; i) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ;  generateMTFValues_s.mtfFreq[0] = 0;
934c934
<    for (;   ; i) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) .mtfFreq[0] = 0;
934c934
<    for (;   ; i) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ;  .mtfFreq[0] = 0;
934c934
<    for (;   ; i) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_smtfFreq[0] = 0;
934c934
<    for (;   ; i) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ;  generateMTFValues_smtfFreq[0] = 0;
934c934
<    for (;   ; i) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) mtfFreq[0] = 0;
934c934
<    for (;   ; i) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ;  mtfFreq[0] = 0;
934c934
<    for (;   ; i) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; i generateMTFValues_s.mtfFreq[0] = 0;
934c934
<    for (;   ; i) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; i .mtfFreq[0] = 0;
934c934
<    for (;   ; i) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; i generateMTFValues_smtfFreq[0] = 0;
934c934
<    for (;   ; i) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; i mtfFreq[0] = 0;
934c934
<    for (;   ; i) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; i generateMTFValues_s.[0] = 0;
934c934
<    for (;   ; i) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; i .[0] = 0;
934c934
<    for (;   ; i) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; i generateMTFValues_s[0] = 0;
934c934
<    for (;   ; i) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; i [0] = 0;
934c934
<    for (;   ; i) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; i) .mtfFreq[0] = 0;
(87.6 %, 25323 bytes)
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ;  generateMTFValues_s.mtfFreq[0] = 0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ;  .mtfFreq[0] = 0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ;  generateMTFValues_smtfFreq[0] = 0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ;  mtfFreq[0] = 0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ;  generateMTFValues_s.[0] = 0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ;  .[0] = 0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ;  generateMTFValues_s[0] = 0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ;  [0] = 0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) .mtfFreq[0] = 0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) mtfFreq[0] = 0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) .[0] = 0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) [0] = 0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) .mtfFreq0] = 0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) mtfFreq0] = 0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) .0] = 0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) 0] = 0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_smtfFreq[0] = 0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s[0] = 0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_smtfFreq0] = 0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s0] = 0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_smtfFreq[] = 0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s[] = 0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_smtfFreq] = 0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s] = 0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s.[0] = 0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s.0] = 0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s.[] = 0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s.] = 0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s.[0 = 0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s.0 = 0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s.[ = 0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s. = 0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s.mtfFreq0] = 0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s.mtfFreq] = 0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s.mtfFreq0 = 0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s.mtfFreq = 0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s.mtfFreq0]  0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s.mtfFreq]  0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s.mtfFreq0  0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s.mtfFreq  0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s.mtfFreq[] = 0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s.mtfFreq[ = 0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s.mtfFreq[]  0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s.mtfFreq[  0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s.mtfFreq[] = ;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s.mtfFreq[ = ;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s.mtfFreq[]  ;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s.mtfFreq[  ;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s.mtfFreq[0 = 0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s.mtfFreq[0  0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s.mtfFreq[0 = ;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s.mtfFreq[0  ;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s.mtfFreq[0 = 0
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s.mtfFreq[0  0
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s.mtfFreq[0 = 
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s.mtfFreq[0  
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s.mtfFreq[0]  0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s.mtfFreq[0]  ;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s.mtfFreq[0]  0
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s.mtfFreq[0]  
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s.mtfFreq[0]  0;
936c936
<    wr = 0;
---
>     = 0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s.mtfFreq[0]  ;
936c936
<    wr = 0;
---
>     = 0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s.mtfFreq[0]  0
936c936
<    wr = 0;
---
>     = 0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0] = 0;
---
>    for (;   ; ) generateMTFValues_s.mtfFreq[0]  
936c936
<    wr = 0;
---
>     = 0;
(87.6 %, 25321 bytes)
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0]  ;
---
>    for (;   ; ) generateMTFValues_s.mtfFreq[0]  
936c936
<    wr = 0;
---
>     = 0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0]  ;
---
>    for (;   ; ) generateMTFValues_s.mtfFreq[0]  
936c936
<    wr = 0;
---
>    wr  0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0]  ;
---
>    for (;   ; ) generateMTFValues_s.mtfFreq[0]  
936c936
<    wr = 0;
---
>      0;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0]  ;
---
>    for (;   ; ) generateMTFValues_s.mtfFreq[0]  
936c936
<    wr = 0;
---
>    wr = ;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0]  ;
---
>    for (;   ; ) generateMTFValues_s.mtfFreq[0]  
936c936
<    wr = 0;
---
>     = ;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0]  ;
---
>    for (;   ; ) generateMTFValues_s.mtfFreq[0]  
936c936
<    wr = 0;
---
>    wr  ;
934c934
<    for (;   ; ) generateMTFValues_s.mtfFreq[0]  ;
---
>    for (;   ; ) generateMTFValues_s.mtfFreq[0]  
936c936
<    wr = 0;
---
>      ;
(87.6 %, 25318 bytes)
936c936
<     = 0;
---
>      ;
936c936
<     = 0;
---
>      0
936c936
<     = 0;
---
>      
935a936
>      0;
937d937
<    zPend = 0;
935a936
>      ;
937d937
<    zPend = 0;
935a936
>      0
937d937
<    zPend = 0;
935a936
>      
937d937
<    zPend = 0;
(87.6 %, 25316 bytes)
936,937c936,937
<      ;
<    zPend = 0;
---
>      
>     = 0;
936,937c936,937
<      ;
<    zPend = 0;
---
>      
>    zPend  0;
936,937c936,937
<      ;
<    zPend = 0;
---
>      
>      0;
936,937c936,937
<      ;
<    zPend = 0;
---
>      
>    zPend = ;
936,937c936,937
<      ;
<    zPend = 0;
---
>      
>     = ;
936,937c936,937
<      ;
<    zPend = 0;
---
>      
>    zPend  ;
935a936
>      
937d937
<    zPend = 0;
(87.6 %, 25310 bytes)
937c937
<     = 0;
---
>      ;
937c937
<     = 0;
---
>      0
937c937
<     = 0;
---
>      
936a937
>      0;
938d938
<    i = 0;
936a937
>      ;
938d938
<    i = 0;
936a937
>      0
938d938
<    i = 0;
936a937
>      
938d938
<    i = 0;
(87.7 %, 25308 bytes)
937,938c937,938
<      ;
<    i = 0;
---
>      
>     = 0;
937,938c937,938
<      ;
<    i = 0;
---
>      
>    i  0;
937,938c937,938
<      ;
<    i = 0;
---
>      
>      0;
937,938c937,938
<      ;
<    i = 0;
---
>      
>    i = ;
937,938c937,938
<      ;
<    i = 0;
---
>      
>     = ;
937,938c937,938
<      ;
<    i = 0;
---
>      
>    i  ;
936a937
>      
938d938
<    i = 0;
(87.7 %, 25306 bytes)
938c938
<     = 0;
---
>      ;
938c938
<     = 0;
---
>      0
938c938
<     = 0;
---
>      
938c938
<     = 0;
---
>      0;
940c940
<    for (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>     (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
938c938
<     = 0;
---
>      ;
940c940
<    for (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>     (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
938c938
<     = 0;
---
>      0
940c940
<    for (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>     (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
938c938
<     = 0;
---
>      
940c940
<    for (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>     (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
938c938
<     = 0;
---
>     = ;
938c938
<     = 0;
---
>     = 
938c938
<     = 0;
---
>     = ;
940c940
<    for (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>     (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
938c938
<     = 0;
---
>     = 
940c940
<    for (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>     (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
938c938
<     = 0;
---
>     = ;
940c940
<    for (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
938c938
<     = 0;
---
>     = 
940c940
<    for (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
938c938
<     = 0;
---
>     = ;
940c940
<    for (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>     i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
938c938
<     = 0;
---
>     = 
940c940
<    for (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>     i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
938c938
<     = 0;
---
>     = 0
938c938
<     = 0;
---
>     = 0
940c940
<    for (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>     (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
938c938
<     = 0;
---
>     = 0
940c940
<    for (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
(87.7 %, 25304 bytes)
938c938
<      ;
---
>      
940c940
<    for (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>     (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
938c938
<      ;
---
>      
940c940
<    for (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
938c938
<      ;
---
>      
940c940
<    for (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>     i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
938c938
<      ;
---
>      
940c940
<    for (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
938c938
<      ;
---
>      
940c940
<    for (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>     (; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
938c938
<      ;
---
>      
940c940
<    for (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for ; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
938c938
<      ;
---
>      
940c940
<    for (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>     ; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>     (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>     i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>     (; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>     ; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>     (i 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>     i 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>     ( 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>      0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for ; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for i 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for  0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for i;  < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for ;  < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for i  < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for   < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for ( 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (;  < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (  < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (; 0  generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for ( 0  generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (i; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (;   generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
(87.7 %, 25303 bytes)
940c940
<    for (; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for ( 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (  < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for ( 0  generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (   generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for ( 0 < .nInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (  < .nInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for ( 0  .nInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (   .nInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (;  < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (;   generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (;  < .nInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (;   .nInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (;  < generateMTFValues_snInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (;   generateMTFValues_snInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (;  < nInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (;   nInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (; 0  generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (; 0  .nInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (; 0  generateMTFValues_snInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (; 0  nInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (; 0  generateMTFValues_s.; i++) yy_0 = (unsigned char) 0;
940c940
<    for (; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (; 0  .; i++) yy_0 = (unsigned char) 0;
940c940
<    for (; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (; 0  generateMTFValues_s; i++) yy_0 = (unsigned char) 0;
940c940
<    for (; 0 < generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (; 0  ; i++) yy_0 = (unsigned char) 0;
(87.7 %, 25301 bytes)
940c940
<    for (;   generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (;   nInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (;   generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (;   .; i++) yy_0 = (unsigned char) 0;
940c940
<    for (;   generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (;   ; i++) yy_0 = (unsigned char) 0;
940c940
<    for (;   generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (;   .nInUse i++) yy_0 = (unsigned char) 0;
940c940
<    for (;   generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (;   nInUse i++) yy_0 = (unsigned char) 0;
940c940
<    for (;   generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (;   . i++) yy_0 = (unsigned char) 0;
940c940
<    for (;   generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (;    i++) yy_0 = (unsigned char) 0;
940c940
<    for (;   generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (;   generateMTFValues_snInUse; i++) yy_0 = (unsigned char) 0;
940c940
<    for (;   generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (;   generateMTFValues_s; i++) yy_0 = (unsigned char) 0;
940c940
<    for (;   generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (;   generateMTFValues_snInUse i++) yy_0 = (unsigned char) 0;
940c940
<    for (;   generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (;   generateMTFValues_s i++) yy_0 = (unsigned char) 0;
940c940
<    for (;   generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (;   generateMTFValues_snInUse; ++) yy_0 = (unsigned char) 0;
940c940
<    for (;   generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (;   generateMTFValues_s; ++) yy_0 = (unsigned char) 0;
940c940
<    for (;   generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (;   generateMTFValues_snInUse ++) yy_0 = (unsigned char) 0;
940c940
<    for (;   generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (;   generateMTFValues_s ++) yy_0 = (unsigned char) 0;
940c940
<    for (;   generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (;   generateMTFValues_s.; i++) yy_0 = (unsigned char) 0;
940c940
<    for (;   generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (;   generateMTFValues_s. i++) yy_0 = (unsigned char) 0;
940c940
<    for (;   generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (;   generateMTFValues_s.; ++) yy_0 = (unsigned char) 0;
940c940
<    for (;   generateMTFValues_s.nInUse; i++) yy_0 = (unsigned char) 0;
---
>    for (;   generateMTFValues_s. ++) yy_0 = (unsigned char) 0;
(87.7 %, 25275 bytes)
940c940
<    for (;   ; i++) yy_0 = (unsigned char) 0;
---
>    for (;    ) yy_0 = (unsigned char) 0;
940c940
<    for (;   ; i++) yy_0 = (unsigned char) 0;
---
>    for (;    i++ yy_0 = (unsigned char) 0;
940c940
<    for (;   ; i++) yy_0 = (unsigned char) 0;
---
>    for (;    ++ yy_0 = (unsigned char) 0;
940c940
<    for (;   ; i++) yy_0 = (unsigned char) 0;
---
>    for (;    i yy_0 = (unsigned char) 0;
940c940
<    for (;   ; i++) yy_0 = (unsigned char) 0;
---
>    for (;     yy_0 = (unsigned char) 0;
940c940
<    for (;   ; i++) yy_0 = (unsigned char) 0;
---
>    for (;   ; ++) yy_0 = (unsigned char) 0;
940c940
<    for (;   ; i++) yy_0 = (unsigned char) 0;
---
>    for (;   ; ) yy_0 = (unsigned char) 0;
940c940
<    for (;   ; i++) yy_0 = (unsigned char) 0;
---
>    for (;   ; ++ yy_0 = (unsigned char) 0;
940c940
<    for (;   ; i++) yy_0 = (unsigned char) 0;
---
>    for (;   ;  yy_0 = (unsigned char) 0;
940c940
<    for (;   ; i++) yy_0 = (unsigned char) 0;
---
>    for (;   ; ++)  = (unsigned char) 0;
940c940
<    for (;   ; i++) yy_0 = (unsigned char) 0;
---
>    for (;   ; )  = (unsigned char) 0;
940c940
<    for (;   ; i++) yy_0 = (unsigned char) 0;
---
>    for (;   ; ++  = (unsigned char) 0;
940c940
<    for (;   ; i++) yy_0 = (unsigned char) 0;
---
>    for (;   ;   = (unsigned char) 0;
940c940
<    for (;   ; i++) yy_0 = (unsigned char) 0;
---
>    for (;   ; i) yy_0 = (unsigned char) 0;
(87.7 %, 25272 bytes)
940c940
<    for (;   ; ) yy_0 = (unsigned char) 0;
---
>    for (;   ;   = (unsigned char) 0;
940c940
<    for (;   ; ) yy_0 = (unsigned char) 0;
---
>    for (;   ;  yy_0  (unsigned char) 0;
940c940
<    for (;   ; ) yy_0 = (unsigned char) 0;
---
>    for (;   ;    (unsigned char) 0;
940c940
<    for (;   ; ) yy_0 = (unsigned char) 0;
---
>    for (;   ;  yy_0 = unsigned char) 0;
940c940
<    for (;   ; ) yy_0 = (unsigned char) 0;
---
>    for (;   ;   = unsigned char) 0;
940c940
<    for (;   ; ) yy_0 = (unsigned char) 0;
---
>    for (;   ;  yy_0  unsigned char) 0;
940c940
<    for (;   ; ) yy_0 = (unsigned char) 0;
---
>    for (;   ;    unsigned char) 0;
940c940
<    for (;   ; ) yy_0 = (unsigned char) 0;
---
>    for (;   ; )  = (unsigned char) 0;
940c940
<    for (;   ; ) yy_0 = (unsigned char) 0;
---
>    for (;   ; )   (unsigned char) 0;
940c940
<    for (;   ; ) yy_0 = (unsigned char) 0;
---
>    for (;   ; )  = unsigned char) 0;
940c940
<    for (;   ; ) yy_0 = (unsigned char) 0;
---
>    for (;   ; )   unsigned char) 0;
940c940
<    for (;   ; ) yy_0 = (unsigned char) 0;
---
>    for (;   ; )  = ( char) 0;
940c940
<    for (;   ; ) yy_0 = (unsigned char) 0;
---
>    for (;   ; )   ( char) 0;
(87.7 %, 25267 bytes)
940c940
<    for (;   ; )   (unsigned char) 0;
---
>    for (;   ; )    char) 0;
940c940
<    for (;   ; )   (unsigned char) 0;
---
>    for (;   ; )   unsigned ) 0;
940c940
<    for (;   ; )   (unsigned char) 0;
---
>    for (;   ; )    ) 0;
940c940
<    for (;   ; )   (unsigned char) 0;
---
>    for (;   ; )   unsigned char 0;
940c940
<    for (;   ; )   (unsigned char) 0;
---
>    for (;   ; )    char 0;
940c940
<    for (;   ; )   (unsigned char) 0;
---
>    for (;   ; )   unsigned  0;
940c940
<    for (;   ; )   (unsigned char) 0;
---
>    for (;   ; )     0;
940c940
<    for (;   ; )   (unsigned char) 0;
---
>    for (;   ; )   ( char) 0;
(87.7 %, 25253 bytes)
940c940
<    for (;   ; )     0;
---
>    for (;   ; )     
942c942
<    i = 0;
---
>      0;
940c940
<    for (;   ; )     0;
---
>    for (;   ; )     0
940c940
<    for (;   ; )     0;
---
>    for (;   ; )     0
942c942
<    i = 0;
---
>     = 0;
940c940
<    for (;   ; )     0;
---
>    for (;   ; )     0
942c942
<    i = 0;
---
>    i  0;
940c940
<    for (;   ; )     0;
---
>    for (;   ; )     0
942c942
<    i = 0;
---
>      0;
940c940
<    for (;   ; )     0;
---
>    for (;   ; )     0
942c942
<    i = 0;
---
>    i = ;
940c940
<    for (;   ; )     0;
---
>    for (;   ; )     0
942c942
<    i = 0;
---
>     = ;
940c940
<    for (;   ; )     0;
---
>    for (;   ; )     0
942c942
<    i = 0;
---
>    i  ;
940c940
<    for (;   ; )     0;
---
>    for (;   ; )     0
942c942
<    i = 0;
---
>      ;
(87.7 %, 25249 bytes)
942c942
<      0;
---
>      
944c944
<    for (i; 0 < generateMTFValues_s.nblock; i++) 
---
>     i; 0 < generateMTFValues_s.nblock; i++) 
942c942
<      0;
---
>      0
942c942
<      0;
---
>      0
944c944
<    for (i; 0 < generateMTFValues_s.nblock; i++) 
---
>     (i; 0 < generateMTFValues_s.nblock; i++) 
942c942
<      0;
---
>      0
944c944
<    for (i; 0 < generateMTFValues_s.nblock; i++) 
---
>    for i; 0 < generateMTFValues_s.nblock; i++) 
942c942
<      0;
---
>      0
944c944
<    for (i; 0 < generateMTFValues_s.nblock; i++) 
---
>     i; 0 < generateMTFValues_s.nblock; i++) 
942c942
<      0;
---
>      0
944c944
<    for (i; 0 < generateMTFValues_s.nblock; i++) 
---
>    for (; 0 < generateMTFValues_s.nblock; i++) 
942c942
<      0;
---
>      0
944c944
<    for (i; 0 < generateMTFValues_s.nblock; i++) 
---
>     (; 0 < generateMTFValues_s.nblock; i++) 
942c942
<      0;
---
>      0
944c944
<    for (i; 0 < generateMTFValues_s.nblock; i++) 
---
>    for ; 0 < generateMTFValues_s.nblock; i++) 
942c942
<      0;
---
>      0
944c944
<    for (i; 0 < generateMTFValues_s.nblock; i++) 
---
>     ; 0 < generateMTFValues_s.nblock; i++) 
944c944
<    for (i; 0 < generateMTFValues_s.nblock; i++) 
---
>     (i; 0 < generateMTFValues_s.nblock; i++) 
944c944
<    for (i; 0 < generateMTFValues_s.nblock; i++) 
---
>     i; 0 < generateMTFValues_s.nblock; i++) 
944c944
<    for (i; 0 < generateMTFValues_s.nblock; i++) 
---
>     (; 0 < generateMTFValues_s.nblock; i++) 
944c944
<    for (i; 0 < generateMTFValues_s.nblock; i++) 
---
>     ; 0 < generateMTFValues_s.nblock; i++) 
944c944
<    for (i; 0 < generateMTFValues_s.nblock; i++) 
---
>     (i 0 < generateMTFValues_s.nblock; i++) 
944c944
<    for (i; 0 < generateMTFValues_s.nblock; i++) 
---
>     i 0 < generateMTFValues_s.nblock; i++) 
944c944
<    for (i; 0 < generateMTFValues_s.nblock; i++) 
---
>     ( 0 < generateMTFValues_s.nblock; i++) 
944c944
<    for (i; 0 < generateMTFValues_s.nblock; i++) 
---
>      0 < generateMTFValues_s.nblock; i++) 
944c944
<    for (i; 0 < generateMTFValues_s.nblock; i++) 
---
>    for i; 0 < generateMTFValues_s.nblock; i++) 
944c944
<    for (i; 0 < generateMTFValues_s.nblock; i++) 
---
>    for ; 0 < generateMTFValues_s.nblock; i++) 
944c944
<    for (i; 0 < generateMTFValues_s.nblock; i++) 
---
>    for i 0 < generateMTFValues_s.nblock; i++) 
944c944
<    for (i; 0 < generateMTFValues_s.nblock; i++) 
---
>    for  0 < generateMTFValues_s.nblock; i++) 
944c944
<    for (i; 0 < generateMTFValues_s.nblock; i++) 
---
>    for i;  < generateMTFValues_s.nblock; i++) 
944c944
<    for (i; 0 < generateMTFValues_s.nblock; i++) 
---
>    for ;  < generateMTFValues_s.nblock; i++) 
944c944
<    for (i; 0 < generateMTFValues_s.nblock; i++) 
---
>    for i  < generateMTFValues_s.nblock; i++) 
944c944
<    for (i; 0 < generateMTFValues_s.nblock; i++) 
---
>    for   < generateMTFValues_s.nblock; i++) 
944c944
<    for (i; 0 < generateMTFValues_s.nblock; i++) 
---
>    for (; 0 < generateMTFValues_s.nblock; i++) 
944c944
<    for (i; 0 < generateMTFValues_s.nblock; i++) 
---
>    for ( 0 < generateMTFValues_s.nblock; i++) 
944c944
<    for (i; 0 < generateMTFValues_s.nblock; i++) 
---
>    for (;  < generateMTFValues_s.nblock; i++) 
944c944
<    for (i; 0 < generateMTFValues_s.nblock; i++) 
---
>    for (  < generateMTFValues_s.nblock; i++) 
944c944
<    for (i; 0 < generateMTFValues_s.nblock; i++) 
---
>    for (; 0  generateMTFValues_s.nblock; i++) 
944c944
<    for (i; 0 < generateMTFValues_s.nblock; i++) 
---
>    for ( 0  generateMTFValues_s.nblock; i++) 
944c944
<    for (i; 0 < generateMTFValues_s.nblock; i++) 
---
>    for (;   generateMTFValues_s.nblock; i++) 
(87.7 %, 25248 bytes)
944c944
<    for (; 0 < generateMTFValues_s.nblock; i++) 
---
>    for ( 0 < generateMTFValues_s.nblock; i++) 
944c944
<    for (; 0 < generateMTFValues_s.nblock; i++) 
---
>    for (  < generateMTFValues_s.nblock; i++) 
944c944
<    for (; 0 < generateMTFValues_s.nblock; i++) 
---
>    for ( 0  generateMTFValues_s.nblock; i++) 
944c944
<    for (; 0 < generateMTFValues_s.nblock; i++) 
---
>    for (   generateMTFValues_s.nblock; i++) 
944c944
<    for (; 0 < generateMTFValues_s.nblock; i++) 
---
>    for ( 0 < .nblock; i++) 
944c944
<    for (; 0 < generateMTFValues_s.nblock; i++) 
---
>    for (  < .nblock; i++) 
944c944
<    for (; 0 < generateMTFValues_s.nblock; i++) 
---
>    for ( 0  .nblock; i++) 
944c944
<    for (; 0 < generateMTFValues_s.nblock; i++) 
---
>    for (   .nblock; i++) 
944c944
<    for (; 0 < generateMTFValues_s.nblock; i++) 
---
>    for (;  < generateMTFValues_s.nblock; i++) 
944c944
<    for (; 0 < generateMTFValues_s.nblock; i++) 
---
>    for (;   generateMTFValues_s.nblock; i++) 
944c944
<    for (; 0 < generateMTFValues_s.nblock; i++) 
---
>    for (;  < .nblock; i++) 
944c944
<    for (; 0 < generateMTFValues_s.nblock; i++) 
---
>    for (;   .nblock; i++) 
944c944
<    for (; 0 < generateMTFValues_s.nblock; i++) 
---
>    for (;  < generateMTFValues_snblock; i++) 
944c944
<    for (; 0 < generateMTFValues_s.nblock; i++) 
---
>    for (;   generateMTFValues_snblock; i++) 
944c944
<    for (; 0 < generateMTFValues_s.nblock; i++) 
---
>    for (;  < nblock; i++) 
944c944
<    for (; 0 < generateMTFValues_s.nblock; i++) 
---
>    for (;   nblock; i++) 
944c944
<    for (; 0 < generateMTFValues_s.nblock; i++) 
---
>    for (; 0  generateMTFValues_s.nblock; i++) 
944c944
<    for (; 0 < generateMTFValues_s.nblock; i++) 
---
>    for (; 0  .nblock; i++) 
944c944
<    for (; 0 < generateMTFValues_s.nblock; i++) 
---
>    for (; 0  generateMTFValues_snblock; i++) 
944c944
<    for (; 0 < generateMTFValues_s.nblock; i++) 
---
>    for (; 0  nblock; i++) 
944c944
<    for (; 0 < generateMTFValues_s.nblock; i++) 
---
>    for (; 0  generateMTFValues_s.; i++) 
944c944
<    for (; 0 < generateMTFValues_s.nblock; i++) 
---
>    for (; 0  .; i++) 
944c944
<    for (; 0 < generateMTFValues_s.nblock; i++) 
---
>    for (; 0  generateMTFValues_s; i++) 
944c944
<    for (; 0 < generateMTFValues_s.nblock; i++) 
---
>    for (; 0  ; i++) 
(87.7 %, 25246 bytes)
944c944
<    for (;   generateMTFValues_s.nblock; i++) 
---
>    for (;   nblock; i++) 
944c944
<    for (;   generateMTFValues_s.nblock; i++) 
---
>    for (;   .; i++) 
944c944
<    for (;   generateMTFValues_s.nblock; i++) 
---
>    for (;   ; i++) 
944c944
<    for (;   generateMTFValues_s.nblock; i++) 
---
>    for (;   .nblock i++) 
944c944
<    for (;   generateMTFValues_s.nblock; i++) 
---
>    for (;   nblock i++) 
944c944
<    for (;   generateMTFValues_s.nblock; i++) 
---
>    for (;   . i++) 
944c944
<    for (;   generateMTFValues_s.nblock; i++) 
---
>    for (;    i++) 
944c944
<    for (;   generateMTFValues_s.nblock; i++) 
---
>    for (;   generateMTFValues_snblock; i++) 
944c944
<    for (;   generateMTFValues_s.nblock; i++) 
---
>    for (;   generateMTFValues_s; i++) 
944c944
<    for (;   generateMTFValues_s.nblock; i++) 
---
>    for (;   generateMTFValues_snblock i++) 
944c944
<    for (;   generateMTFValues_s.nblock; i++) 
---
>    for (;   generateMTFValues_s i++) 
944c944
<    for (;   generateMTFValues_s.nblock; i++) 
---
>    for (;   generateMTFValues_snblock; ++) 
944c944
<    for (;   generateMTFValues_s.nblock; i++) 
---
>    for (;   generateMTFValues_s; ++) 
944c944
<    for (;   generateMTFValues_s.nblock; i++) 
---
>    for (;   generateMTFValues_snblock ++) 
944c944
<    for (;   generateMTFValues_s.nblock; i++) 
---
>    for (;   generateMTFValues_s ++) 
944c944
<    for (;   generateMTFValues_s.nblock; i++) 
---
>    for (;   generateMTFValues_s.; i++) 
944c944
<    for (;   generateMTFValues_s.nblock; i++) 
---
>    for (;   generateMTFValues_s. i++) 
944c944
<    for (;   generateMTFValues_s.nblock; i++) 
---
>    for (;   generateMTFValues_s.; ++) 
944c944
<    for (;   generateMTFValues_s.nblock; i++) 
---
>    for (;   generateMTFValues_s. ++) 
944c944
<    for (;   generateMTFValues_s.nblock; i++) 
---
>    for (;   generateMTFValues_s.; i) 
944c944
<    for (;   generateMTFValues_s.nblock; i++) 
---
>    for (;   generateMTFValues_s. i) 
944c944
<    for (;   generateMTFValues_s.nblock; i++) 
---
>    for (;   generateMTFValues_s.; ) 
(87.7 %, 25220 bytes)
944c944
<    for (;   ; i++) 
---
>    for (;    ) 
944c944
<    for (;   ; i++) 
---
>    for (;    i++ 
944c944
<    for (;   ; i++) 
---
>    for (;    ++ 
944c944
<    for (;   ; i++) 
---
>    for (;    i 
944c944
<    for (;   ; i++) 
---
>    for (;     
944c944
<    for (;   ; i++) 
---
>    for (;   ; ++) 
944c944
<    for (;   ; i++) 
---
>    for (;   ; ) 
944c944
<    for (;   ; i++) 
---
>    for (;   ; ++ 
944c944
<    for (;   ; i++) 
---
>    for (;   ;  
944c944
<    for (;   ; i++) 
---
>    for (;   ; ++) 
946c946
<    0 > 0;
---
>     > 0;
944c944
<    for (;   ; i++) 
---
>    for (;   ; ) 
946c946
<    0 > 0;
---
>     > 0;
944c944
<    for (;   ; i++) 
---
>    for (;   ; ++ 
946c946
<    0 > 0;
---
>     > 0;
944c944
<    for (;   ; i++) 
---
>    for (;   ;  
946c946
<    0 > 0;
---
>     > 0;
944c944
<    for (;   ; i++) 
---
>    for (;   ; i) 
(87.7 %, 25217 bytes)
944c944
<    for (;   ; ) 
---
>    for (;   ;  
946c946
<    0 > 0;
---
>     > 0;
944c944
<    for (;   ; ) 
---
>    for (;   ;  
946c946
<    0 > 0;
---
>    0  0;
944c944
<    for (;   ; ) 
---
>    for (;   ;  
946c946
<    0 > 0;
---
>      0;
944c944
<    for (;   ; ) 
---
>    for (;   ;  
946c946
<    0 > 0;
---
>    0 > ;
944c944
<    for (;   ; ) 
---
>    for (;   ;  
946c946
<    0 > 0;
---
>     > ;
944c944
<    for (;   ; ) 
---
>    for (;   ;  
946c946
<    0 > 0;
---
>    0  ;
944c944
<    for (;   ; ) 
---
>    for (;   ;  
946c946
<    0 > 0;
---
>      ;
946c946
<    0 > 0;
---
>     > 0;
946c946
<    0 > 0;
---
>      0;
946c946
<    0 > 0;
---
>     > ;
946c946
<    0 > 0;
---
>      ;
(87.7 %, 25215 bytes)
946c946
<      0;
---
>      
946c946
<      0;
---
>      ;
948c948
<     mtfv_0 = EOB; wr++; generateMTFValues_s.mtfFreq[EOB]++;
---
>      = EOB; wr++; generateMTFValues_s.mtfFreq[EOB]++;
946c946
<      0;
---
>      
948c948
<     mtfv_0 = EOB; wr++; generateMTFValues_s.mtfFreq[EOB]++;
---
>      = EOB; wr++; generateMTFValues_s.mtfFreq[EOB]++;
946c946
<      0;
---
>      ;
948c948
<     mtfv_0 = EOB; wr++; generateMTFValues_s.mtfFreq[EOB]++;
---
>     mtfv_0  EOB; wr++; generateMTFValues_s.mtfFreq[EOB]++;
946c946
<      0;
---
>      
948c948
<     mtfv_0 = EOB; wr++; generateMTFValues_s.mtfFreq[EOB]++;
---
>     mtfv_0  EOB; wr++; generateMTFValues_s.mtfFreq[EOB]++;
946c946
<      0;
---
>      ;
948c948
<     mtfv_0 = EOB; wr++; generateMTFValues_s.mtfFreq[EOB]++;
---
>       EOB; wr++; generateMTFValues_s.mtfFreq[EOB]++;
(87.7 %, 25213 bytes)
948c948
<     mtfv_0 = EOB; wr++; generateMTFValues_s.mtfFreq[EOB]++;
---
>       EOB; wr++; generateMTFValues_s.mtfFreq[EOB]++;
948c948
<     mtfv_0 = EOB; wr++; generateMTFValues_s.mtfFreq[EOB]++;
---
>      = ; wr++; generateMTFValues_s.mtfFreq[EOB]++;
948c948
<     mtfv_0 = EOB; wr++; generateMTFValues_s.mtfFreq[EOB]++;
---
>       ; wr++; generateMTFValues_s.mtfFreq[EOB]++;
(87.7 %, 25206 bytes)
948c948
<       EOB; wr++; generateMTFValues_s.mtfFreq[EOB]++;
---
>        wr++; generateMTFValues_s.mtfFreq[EOB]++;
948c948
<       EOB; wr++; generateMTFValues_s.mtfFreq[EOB]++;
---
>       ; ++; generateMTFValues_s.mtfFreq[EOB]++;
948c948
<       EOB; wr++; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ++; generateMTFValues_s.mtfFreq[EOB]++;
948c948
<       EOB; wr++; generateMTFValues_s.mtfFreq[EOB]++;
---
>       ; wr; generateMTFValues_s.mtfFreq[EOB]++;
(87.7 %, 25202 bytes)
948c948
<        wr++; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; generateMTFValues_s.mtfFreq[EOB]++;
948c948
<        wr++; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ++ generateMTFValues_s.mtfFreq[EOB]++;
948c948
<        wr++; generateMTFValues_s.mtfFreq[EOB]++;
---
>         generateMTFValues_s.mtfFreq[EOB]++;
(87.7 %, 25198 bytes)
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>         .mtfFreq[EOB]++;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>         generateMTFValues_smtfFreq[EOB]++;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>         mtfFreq[EOB]++;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>         generateMTFValues_s.[EOB]++;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>         .[EOB]++;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>         generateMTFValues_s[EOB]++;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>         [EOB]++;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; .mtfFreq[EOB]++;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; mtfFreq[EOB]++;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; .[EOB]++;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; [EOB]++;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; .mtfFreqEOB]++;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; mtfFreqEOB]++;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; .EOB]++;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; EOB]++;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; generateMTFValues_smtfFreq[EOB]++;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; generateMTFValues_s[EOB]++;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; generateMTFValues_smtfFreqEOB]++;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; generateMTFValues_sEOB]++;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; generateMTFValues_smtfFreq[]++;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; generateMTFValues_s[]++;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; generateMTFValues_smtfFreq]++;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; generateMTFValues_s]++;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; generateMTFValues_s.[EOB]++;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; generateMTFValues_s.EOB]++;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; generateMTFValues_s.[]++;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; generateMTFValues_s.]++;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; generateMTFValues_s.[EOB++;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; generateMTFValues_s.EOB++;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; generateMTFValues_s.[++;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; generateMTFValues_s.++;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; generateMTFValues_s.mtfFreqEOB]++;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; generateMTFValues_s.mtfFreq]++;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; generateMTFValues_s.mtfFreqEOB++;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; generateMTFValues_s.mtfFreq++;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; generateMTFValues_s.mtfFreqEOB];
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; generateMTFValues_s.mtfFreq];
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; generateMTFValues_s.mtfFreqEOB;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; generateMTFValues_s.mtfFreq;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; generateMTFValues_s.mtfFreq[]++;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; generateMTFValues_s.mtfFreq[++;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; generateMTFValues_s.mtfFreq[];
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; generateMTFValues_s.mtfFreq[;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; generateMTFValues_s.mtfFreq[]++
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; generateMTFValues_s.mtfFreq[++
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; generateMTFValues_s.mtfFreq[]
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; generateMTFValues_s.mtfFreq[
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; generateMTFValues_s.mtfFreq[EOB++;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; generateMTFValues_s.mtfFreq[EOB;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; generateMTFValues_s.mtfFreq[EOB++
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; generateMTFValues_s.mtfFreq[EOB
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; generateMTFValues_s.mtfFreq[EOB++;
950c950
<    generateMTFValues_s.nMTF = 0;
---
>    .nMTF = 0;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; generateMTFValues_s.mtfFreq[EOB;
950c950
<    generateMTFValues_s.nMTF = 0;
---
>    .nMTF = 0;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; generateMTFValues_s.mtfFreq[EOB++
950c950
<    generateMTFValues_s.nMTF = 0;
---
>    .nMTF = 0;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; generateMTFValues_s.mtfFreq[EOB
950c950
<    generateMTFValues_s.nMTF = 0;
---
>    .nMTF = 0;
948c948
<        ; generateMTFValues_s.mtfFreq[EOB]++;
---
>        ; generateMTFValues_s.mtfFreq[EOB];
(87.7 %, 25191 bytes)
948c948
<        ; generateMTFValues_s.mtfFreq;
---
>        ; generateMTFValues_s.mtfFreq
950c950
<    generateMTFValues_s.nMTF = 0;
---
>     = 0;
950c950
<    generateMTFValues_s.nMTF = 0;
---
>    .nMTF = 0;
950c950
<    generateMTFValues_s.nMTF = 0;
---
>    nMTF = 0;
950c950
<    generateMTFValues_s.nMTF = 0;
---
>    . = 0;
950c950
<    generateMTFValues_s.nMTF = 0;
---
>     = 0;
950c950
<    generateMTFValues_s.nMTF = 0;
---
>    .nMTF  0;
950c950
<    generateMTFValues_s.nMTF = 0;
---
>    nMTF  0;
950c950
<    generateMTFValues_s.nMTF = 0;
---
>    .  0;
950c950
<    generateMTFValues_s.nMTF = 0;
---
>      0;
950c950
<    generateMTFValues_s.nMTF = 0;
---
>    generateMTFValues_snMTF = 0;
950c950
<    generateMTFValues_s.nMTF = 0;
---
>    generateMTFValues_s = 0;
950c950
<    generateMTFValues_s.nMTF = 0;
---
>    generateMTFValues_snMTF  0;
950c950
<    generateMTFValues_s.nMTF = 0;
---
>    generateMTFValues_s  0;
950c950
<    generateMTFValues_s.nMTF = 0;
---
>    generateMTFValues_snMTF = ;
950c950
<    generateMTFValues_s.nMTF = 0;
---
>    generateMTFValues_s = ;
950c950
<    generateMTFValues_s.nMTF = 0;
---
>    generateMTFValues_snMTF  ;
950c950
<    generateMTFValues_s.nMTF = 0;
---
>    generateMTFValues_s  ;
(87.7 %, 25166 bytes)
950,951c950
<      0;
< }
---
>      
955c954,955
< #define BZ_LESSER_ICOST  0
---
> 
> define BZ_LESSER_ICOST  0
950c950
<      0;
---
>      0
950,951c950,951
<      0;
< }
---
>      0
> 
950c950
<      0;
---
>      0
955c955
< #define BZ_LESSER_ICOST  0
---
> define BZ_LESSER_ICOST  0
950,951c950
<      0;
< }
---
>      0
955c954,955
< #define BZ_LESSER_ICOST  0
---
> 
> define BZ_LESSER_ICOST  0
950c950
<      0;
---
>      0
955c955
< #define BZ_LESSER_ICOST  0
---
> # BZ_LESSER_ICOST  0
950,951c950
<      0;
< }
---
>      0
955c954,955
< #define BZ_LESSER_ICOST  0
---
> 
> # BZ_LESSER_ICOST  0
950c950
<      0;
---
>      0
955c955
< #define BZ_LESSER_ICOST  0
---
>  BZ_LESSER_ICOST  0
950,951c950
<      0;
< }
---
>      0
955c954,955
< #define BZ_LESSER_ICOST  0
---
> 
>  BZ_LESSER_ICOST  0
951c951
< }
---
> 
951d950
< }
955c954,955
< #define BZ_LESSER_ICOST  0
---
> 
> define BZ_LESSER_ICOST  0
951d950
< }
955c954,955
< #define BZ_LESSER_ICOST  0
---
> 
> # BZ_LESSER_ICOST  0
951d950
< }
955c954,955
< #define BZ_LESSER_ICOST  0
---
> 
>  BZ_LESSER_ICOST  0
951d950
< }
955c954,955
< #define BZ_LESSER_ICOST  0
---
> 
> #define   0
951d950
< }
955c954,955
< #define BZ_LESSER_ICOST  0
---
> 
> define   0
951d950
< }
955c954,955
< #define BZ_LESSER_ICOST  0
---
> 
> #   0
951d950
< }
955c954,955
< #define BZ_LESSER_ICOST  0
---
> 
>    0
955c955
< #define BZ_LESSER_ICOST  0
---
> define BZ_LESSER_ICOST  0
955c955
< #define BZ_LESSER_ICOST  0
---
>  BZ_LESSER_ICOST  0
955c955
< #define BZ_LESSER_ICOST  0
---
> define   0
955c955
< #define BZ_LESSER_ICOST  0
---
>    0
955c955
< #define BZ_LESSER_ICOST  0
---
> define BZ_LESSER_ICOST  
955c955
< #define BZ_LESSER_ICOST  0
---
>  BZ_LESSER_ICOST  
955c955
< #define BZ_LESSER_ICOST  0
---
> define   
955c955
< #define BZ_LESSER_ICOST  0
---
>    
955c955
< #define BZ_LESSER_ICOST  0
---
> # BZ_LESSER_ICOST  0
955c955
< #define BZ_LESSER_ICOST  0
---
> #   0
(87.7 %, 25143 bytes)
956c956
< #define BZ_GREATER_ICOST 5
---
>   
956c956
< #define BZ_GREATER_ICOST 5
---
> # BZ_GREATER_ICOST 5
956c956
< #define BZ_GREATER_ICOST 5
---
> #  5
956c956
< #define BZ_GREATER_ICOST 5
---
> # BZ_GREATER_ICOST 
956c956
< #define BZ_GREATER_ICOST 5
---
> #  
(87.7 %, 25119 bytes)
980c980
< #define RETURN(rrr)                               \
---
>  rrr)                               \
980c980
< #define RETURN(rrr)                               \
---
> # RETURN(rrr)                               \
980c980
< #define RETURN(rrr)                               \
---
> # (rrr)                               \
980c980
< #define RETURN(rrr)                               \
---
> # RETURNrrr)                               \
980c980
< #define RETURN(rrr)                               \
---
> # rrr)                               \
980c980
< #define RETURN(rrr)                               \
---
> # RETURN()                               \
980c980
< #define RETURN(rrr)                               \
---
> # ()                               \
980c980
< #define RETURN(rrr)                               \
---
> # RETURN)                               \
980c980
< #define RETURN(rrr)                               \
---
> # )                               \
980c980
< #define RETURN(rrr)                               \
---
> #define (rrr)                               \
980c980
< #define RETURN(rrr)                               \
---
> #define rrr)                               \
980c980
< #define RETURN(rrr)                               \
---
> #define ()                               \
980c980
< #define RETURN(rrr)                               \
---
> #define )                               \
980c980
< #define RETURN(rrr)                               \
---
> #define (rrr                               \
980c980
< #define RETURN(rrr)                               \
---
> #define rrr                               \
(87.7 %, 25112 bytes)
980c980
< #define rrr)                               \
---
> #define                                \
980c980
< #define rrr)                               \
---
> #define )                               
980c980
< #define rrr)                               \
---
> #define                                
980,981c980,981
< #define rrr)                               \
<    ;
---
> #define )                               \
>    
980,981c980,981
< #define rrr)                               \
<    ;
---
> #define                                \
>    
980,981c980,981
< #define rrr)                               \
<    ;
---
> #define )                               
>    
980,981c980,981
< #define rrr)                               \
<    ;
---
> #define                                
>    
980c980
< #define rrr)                               \
---
> #define rrr                               \
980c980
< #define rrr)                               \
---
> #define rrr                               
980,981c980,981
< #define rrr)                               \
<    ;
---
> #define rrr                               \
>    
(87.7 %, 25111 bytes)
980c980
< #define rrr                               \
---
> #define rrr                               
980,981c980,981
< #define rrr                               \
<    ;
---
> #define rrr                               
>    
980c980
< #define rrr                               \
---
> #define rrr                               
983c983
< #define GET_BITS(lll,vvv,nnn)                     \
---
> define GET_BITS(lll,vvv,nnn)                     \
(87.7 %, 25110 bytes)
981c981
<    ;
---
>    
981c981
<    ;
---
>    
983c983
< #define GET_BITS(lll,vvv,nnn)                     \
---
> define GET_BITS(lll,vvv,nnn)                     \
981c981
<    ;
---
>    
983c983
< #define GET_BITS(lll,vvv,nnn)                     \
---
> # GET_BITS(lll,vvv,nnn)                     \
981c981
<    ;
---
>    
983c983
< #define GET_BITS(lll,vvv,nnn)                     \
---
>  GET_BITS(lll,vvv,nnn)                     \
981c981
<    ;
---
>    
983c983
< #define GET_BITS(lll,vvv,nnn)                     \
---
> #define (lll,vvv,nnn)                     \
981c981
<    ;
---
>    
983c983
< #define GET_BITS(lll,vvv,nnn)                     \
---
> define (lll,vvv,nnn)                     \
981c981
<    ;
---
>    
983c983
< #define GET_BITS(lll,vvv,nnn)                     \
---
> # (lll,vvv,nnn)                     \
981c981
<    ;
---
>    
983c983
< #define GET_BITS(lll,vvv,nnn)                     \
---
>  (lll,vvv,nnn)                     \
983c983
< #define GET_BITS(lll,vvv,nnn)                     \
---
> define GET_BITS(lll,vvv,nnn)                     \
983c983
< #define GET_BITS(lll,vvv,nnn)                     \
---
>  GET_BITS(lll,vvv,nnn)                     \
983c983
< #define GET_BITS(lll,vvv,nnn)                     \
---
> define (lll,vvv,nnn)                     \
(87.7 %, 25109 bytes)
983c983
< #define GET_BITS(lll,vvv,nnn)                     \
---
> define GET_BITS(lll,vvv,nnn)                     \
983c983
< #define GET_BITS(lll,vvv,nnn)                     \
---
>  GET_BITS(lll,vvv,nnn)                     \
983c983
< #define GET_BITS(lll,vvv,nnn)                     \
---
> define (lll,vvv,nnn)                     \
983c983
< #define GET_BITS(lll,vvv,nnn)                     \
---
>  (lll,vvv,nnn)                     \
983c983
< #define GET_BITS(lll,vvv,nnn)                     \
---
> define GET_BITSlll,vvv,nnn)                     \
983c983
< #define GET_BITS(lll,vvv,nnn)                     \
---
>  GET_BITSlll,vvv,nnn)                     \
983c983
< #define GET_BITS(lll,vvv,nnn)                     \
---
> define lll,vvv,nnn)                     \
983c983
< #define GET_BITS(lll,vvv,nnn)                     \
---
>  lll,vvv,nnn)                     \
983c983
< #define GET_BITS(lll,vvv,nnn)                     \
---
> # GET_BITS(lll,vvv,nnn)                     \
983c983
< #define GET_BITS(lll,vvv,nnn)                     \
---
> # (lll,vvv,nnn)                     \
983c983
< #define GET_BITS(lll,vvv,nnn)                     \
---
> # GET_BITSlll,vvv,nnn)                     \
983c983
< #define GET_BITS(lll,vvv,nnn)                     \
---
> # lll,vvv,nnn)                     \
983c983
< #define GET_BITS(lll,vvv,nnn)                     \
---
> # GET_BITS(,vvv,nnn)                     \
983c983
< #define GET_BITS(lll,vvv,nnn)                     \
---
> # (,vvv,nnn)                     \
983c983
< #define GET_BITS(lll,vvv,nnn)                     \
---
> # GET_BITS,vvv,nnn)                     \
983c983
< #define GET_BITS(lll,vvv,nnn)                     \
---
> # ,vvv,nnn)                     \
983c983
< #define GET_BITS(lll,vvv,nnn)                     \
---
> #define (lll,vvv,nnn)                     \
983c983
< #define GET_BITS(lll,vvv,nnn)                     \
---
> #define lll,vvv,nnn)                     \
983c983
< #define GET_BITS(lll,vvv,nnn)                     \
---
> #define (,vvv,nnn)                     \
983c983
< #define GET_BITS(lll,vvv,nnn)                     \
---
> #define ,vvv,nnn)                     \
983c983
< #define GET_BITS(lll,vvv,nnn)                     \
---
> #define (lllvvv,nnn)                     \
983c983
< #define GET_BITS(lll,vvv,nnn)                     \
---
> #define lllvvv,nnn)                     \
(87.8 %, 25100 bytes)
983c983
< #define lll,vvv,nnn)                     \
---
> #define vvv,nnn)                     \
983c983
< #define lll,vvv,nnn)                     \
---
> #define ,,nnn)                     \
983c983
< #define lll,vvv,nnn)                     \
---
> #define ,nnn)                     \
983c983
< #define lll,vvv,nnn)                     \
---
> #define ,vvvnnn)                     \
983c983
< #define lll,vvv,nnn)                     \
---
> #define vvvnnn)                     \
(87.8 %, 25096 bytes)
983c983
< #define vvv,nnn)                     \
---
> #define nnn)                     \
983c983
< #define vvv,nnn)                     \
---
> #define ,)                     \
983c983
< #define vvv,nnn)                     \
---
> #define )                     \
983c983
< #define vvv,nnn)                     \
---
> #define ,nnn                     \
983c983
< #define vvv,nnn)                     \
---
> #define nnn                     \
(87.8 %, 25092 bytes)
983c983
< #define nnn)                     \
---
> #define                      \
983c983
< #define nnn)                     \
---
> #define )                     
983c983
< #define nnn)                     \
---
> #define                      
983,984c983,984
< #define nnn)                     \
<    case lll: s->state = lll;                      \
---
> #define )                     \
>     lll: s->state = lll;                      \
983,984c983,984
< #define nnn)                     \
<    case lll: s->state = lll;                      \
---
> #define                      \
>     lll: s->state = lll;                      \
(87.8 %, 25088 bytes)
983,984c983,984
< #define                      \
<    case lll: s->state = lll;                      \
---
> #define                      
>     lll: s->state = lll;                      \
983,984c983,984
< #define                      \
<    case lll: s->state = lll;                      \
---
> #define                      
>    case : s->state = lll;                      \
983,984c983,984
< #define                      \
<    case lll: s->state = lll;                      \
---
> #define                      
>     : s->state = lll;                      \
983,984c983,984
< #define                      \
<    case lll: s->state = lll;                      \
---
> #define                      
>    case lll s->state = lll;                      \
983,984c983,984
< #define                      \
<    case lll: s->state = lll;                      \
---
> #define                      
>     lll s->state = lll;                      \
983,984c983,984
< #define                      \
<    case lll: s->state = lll;                      \
---
> #define                      
>    case  s->state = lll;                      \
983,984c983,984
< #define                      \
<    case lll: s->state = lll;                      \
---
> #define                      
>      s->state = lll;                      \
984c984
<    case lll: s->state = lll;                      \
---
>     lll: s->state = lll;                      \
984c984
<    case lll: s->state = lll;                      \
---
>     : s->state = lll;                      \
984c984
<    case lll: s->state = lll;                      \
---
>     lll s->state = lll;                      \
(87.8 %, 25084 bytes)
984c984
<     lll: s->state = lll;                      \
---
>     : s->state = lll;                      \
984c984
<     lll: s->state = lll;                      \
---
>      s->state = lll;                      \
984c984
<     lll: s->state = lll;                      \
---
>     : ->state = lll;                      \
984c984
<     lll: s->state = lll;                      \
---
>      ->state = lll;                      \
984c984
<     lll: s->state = lll;                      \
---
>     : sstate = lll;                      \
984c984
<     lll: s->state = lll;                      \
---
>      sstate = lll;                      \
984c984
<     lll: s->state = lll;                      \
---
>     : state = lll;                      \
984c984
<     lll: s->state = lll;                      \
---
>      state = lll;                      \
984c984
<     lll: s->state = lll;                      \
---
>     lll s->state = lll;                      \
(87.8 %, 25078 bytes)
984c984
<      sstate = lll;                      \
---
>        lll                      \
984c984
<      sstate = lll;                      \
---
>       =                       \
984c984
<      sstate = lll;                      \
---
>                              \
984c984
<      sstate = lll;                      \
---
>      sstate  lll;                      \
(87.8 %, 25070 bytes)
984,985c984,985
<        lll                      \
<    while (True) 
---
>                              
>    while True) 
984,985c984,985
<        lll                      \
<    while (True) 
---
>                              \
>     True) 
984,985c984,985
<        lll                      \
<    while (True) 
---
>                              
>     True) 
984c984
<        lll                      \
---
>        lll                      
984,985c984,985
<        lll                      \
<    while (True) 
---
>        lll                      
>     (True) 
984,985c984,985
<        lll                      \
<    while (True) 
---
>        lll                      
>    while True) 
984,985c984,985
<        lll                      \
<    while (True) 
---
>        lll                      
>     True) 
984,985c984,985
<        lll                      \
<    while (True) 
---
>        lll                      
>    while () 
984,985c984,985
<        lll                      \
<    while (True) 
---
>        lll                      
>     () 
984,985c984,985
<        lll                      \
<    while (True) 
---
>        lll                      
>    while ) 
984,985c984,985
<        lll                      \
<    while (True) 
---
>        lll                      
>     ) 
985c985
<    while (True) 
---
>     (True) 
985c985
<    while (True) 
---
>     True) 
985c985
<    while (True) 
---
>     () 
(87.8 %, 25065 bytes)
985c985
<     (True) 
---
>     True) 
985c985
<     (True) 
---
>     ) 
985c985
<     (True) 
---
>     True 
(87.8 %, 25064 bytes)
985c985
<     True) 
---
>     ) 
985c985
<     True) 
---
>      
(87.8 %, 25060 bytes)
985c985
<     ) 
---
>      
985c985
<     ) 
---
>      
987c987
< #define GET_UCHAR(lll,uuu)                        \
---
> define GET_UCHAR(lll,uuu)                        \
985c985
<     ) 
---
>      
987c987
< #define GET_UCHAR(lll,uuu)                        \
---
> # GET_UCHAR(lll,uuu)                        \
985c985
<     ) 
---
>      
987c987
< #define GET_UCHAR(lll,uuu)                        \
---
>  GET_UCHAR(lll,uuu)                        \
985c985
<     ) 
---
>      
987c987
< #define GET_UCHAR(lll,uuu)                        \
---
> #define (lll,uuu)                        \
985c985
<     ) 
---
>      
987c987
< #define GET_UCHAR(lll,uuu)                        \
---
> define (lll,uuu)                        \
985c985
<     ) 
---
>      
987c987
< #define GET_UCHAR(lll,uuu)                        \
---
> # (lll,uuu)                        \
985c985
<     ) 
---
>      
987c987
< #define GET_UCHAR(lll,uuu)                        \
---
>  (lll,uuu)                        \
987c987
< #define GET_UCHAR(lll,uuu)                        \
---
> define GET_UCHAR(lll,uuu)                        \
987c987
< #define GET_UCHAR(lll,uuu)                        \
---
>  GET_UCHAR(lll,uuu)                        \
987c987
< #define GET_UCHAR(lll,uuu)                        \
---
> define (lll,uuu)                        \
987c987
< #define GET_UCHAR(lll,uuu)                        \
---
>  (lll,uuu)                        \
987c987
< #define GET_UCHAR(lll,uuu)                        \
---
> define GET_UCHARlll,uuu)                        \
987c987
< #define GET_UCHAR(lll,uuu)                        \
---
>  GET_UCHARlll,uuu)                        \
987c987
< #define GET_UCHAR(lll,uuu)                        \
---
> define lll,uuu)                        \
987c987
< #define GET_UCHAR(lll,uuu)                        \
---
>  lll,uuu)                        \
987c987
< #define GET_UCHAR(lll,uuu)                        \
---
> # GET_UCHAR(lll,uuu)                        \
(87.8 %, 25059 bytes)
987c987
< #define GET_UCHAR(lll,uuu)                        \
---
> define GET_UCHAR(lll,uuu)                        \
987c987
< #define GET_UCHAR(lll,uuu)                        \
---
>  GET_UCHAR(lll,uuu)                        \
987c987
< #define GET_UCHAR(lll,uuu)                        \
---
> define (lll,uuu)                        \
987c987
< #define GET_UCHAR(lll,uuu)                        \
---
>  (lll,uuu)                        \
987c987
< #define GET_UCHAR(lll,uuu)                        \
---
> define GET_UCHARlll,uuu)                        \
987c987
< #define GET_UCHAR(lll,uuu)                        \
---
>  GET_UCHARlll,uuu)                        \
987c987
< #define GET_UCHAR(lll,uuu)                        \
---
> define lll,uuu)                        \
987c987
< #define GET_UCHAR(lll,uuu)                        \
---
>  lll,uuu)                        \
987c987
< #define GET_UCHAR(lll,uuu)                        \
---
> # GET_UCHAR(lll,uuu)                        \
987c987
< #define GET_UCHAR(lll,uuu)                        \
---
> # (lll,uuu)                        \
987c987
< #define GET_UCHAR(lll,uuu)                        \
---
> # GET_UCHARlll,uuu)                        \
987c987
< #define GET_UCHAR(lll,uuu)                        \
---
> # lll,uuu)                        \
987c987
< #define GET_UCHAR(lll,uuu)                        \
---
> # GET_UCHAR(,uuu)                        \
987c987
< #define GET_UCHAR(lll,uuu)                        \
---
> # (,uuu)                        \
987c987
< #define GET_UCHAR(lll,uuu)                        \
---
> # GET_UCHAR,uuu)                        \
987c987
< #define GET_UCHAR(lll,uuu)                        \
---
> # ,uuu)                        \
987c987
< #define GET_UCHAR(lll,uuu)                        \
---
> #define (lll,uuu)                        \
987c987
< #define GET_UCHAR(lll,uuu)                        \
---
> #define lll,uuu)                        \
987c987
< #define GET_UCHAR(lll,uuu)                        \
---
> #define (,uuu)                        \
987c987
< #define GET_UCHAR(lll,uuu)                        \
---
> #define ,uuu)                        \
987c987
< #define GET_UCHAR(lll,uuu)                        \
---
> #define (llluuu)                        \
987c987
< #define GET_UCHAR(lll,uuu)                        \
---
> #define llluuu)                        \
(87.8 %, 25049 bytes)
987c987
< #define lll,uuu)                        \
---
> #define uuu)                        \
987c987
< #define lll,uuu)                        \
---
> #define ,)                        \
987c987
< #define lll,uuu)                        \
---
> #define )                        \
987c987
< #define lll,uuu)                        \
---
> #define ,uuu                        \
987c987
< #define lll,uuu)                        \
---
> #define uuu                        \
(87.8 %, 25045 bytes)
987c987
< #define uuu)                        \
---
> #define                         \
987c987
< #define uuu)                        \
---
> #define )                        
987c987
< #define uuu)                        \
---
> #define                         
987,988c987,988
< #define uuu)                        \
<    GET_BITS(lll,uuu,8)
---
> #define )                        \
>    (lll,uuu,8)
987,988c987,988
< #define uuu)                        \
<    GET_BITS(lll,uuu,8)
---
> #define                         \
>    (lll,uuu,8)
987,988c987,988
< #define uuu)                        \
<    GET_BITS(lll,uuu,8)
---
> #define )                        
>    (lll,uuu,8)
987,988c987,988
< #define uuu)                        \
<    GET_BITS(lll,uuu,8)
---
> #define                         
>    (lll,uuu,8)
987c987
< #define uuu)                        \
---
> #define uuu                        \
987c987
< #define uuu)                        \
---
> #define uuu                        
987,988c987,988
< #define uuu)                        \
<    GET_BITS(lll,uuu,8)
---
> #define uuu                        \
>    (lll,uuu,8)
(87.8 %, 25044 bytes)
987c987
< #define uuu                        \
---
> #define uuu                        
987,988c987,988
< #define uuu                        \
<    GET_BITS(lll,uuu,8)
---
> #define uuu                        
>    (lll,uuu,8)
987,988c987,988
< #define uuu                        \
<    GET_BITS(lll,uuu,8)
---
> #define uuu                        
>    GET_BITSlll,uuu,8)
987,988c987,988
< #define uuu                        \
<    GET_BITS(lll,uuu,8)
---
> #define uuu                        
>    lll,uuu,8)
987,988c987,988
< #define uuu                        \
<    GET_BITS(lll,uuu,8)
---
> #define uuu                        
>    GET_BITS(,uuu,8)
987,988c987,988
< #define uuu                        \
<    GET_BITS(lll,uuu,8)
---
> #define uuu                        
>    (,uuu,8)
987,988c987,988
< #define uuu                        \
<    GET_BITS(lll,uuu,8)
---
> #define uuu                        
>    GET_BITS,uuu,8)
987,988c987,988
< #define uuu                        \
<    GET_BITS(lll,uuu,8)
---
> #define uuu                        
>    ,uuu,8)
988c988
<    GET_BITS(lll,uuu,8)
---
>    (lll,uuu,8)
988c988
<    GET_BITS(lll,uuu,8)
---
>    lll,uuu,8)
988c988
<    GET_BITS(lll,uuu,8)
---
>    (,uuu,8)
(87.8 %, 25036 bytes)
988c988
<    (lll,uuu,8)
---
>    lll,uuu,8)
988c988
<    (lll,uuu,8)
---
>    ,uuu,8)
(87.8 %, 25035 bytes)
988c988
<    lll,uuu,8)
---
>    ,uuu,8)
988c988
<    lll,uuu,8)
---
>    uuu,8)
(87.8 %, 25032 bytes)
988c988
<    ,uuu,8)
---
>    uuu,8)
988c988
<    ,uuu,8)
---
>    ,8)
988c988
<    ,uuu,8)
---
>    uuu8)
(87.8 %, 25031 bytes)
988c988
<    uuu,8)
---
>    ,8)
988c988
<    uuu,8)
---
>    8)
(87.8 %, 25028 bytes)
988c988
<    ,8)
---
>    8)
988c988
<    ,8)
---
>    )
988c988
<    ,8)
---
>    8
(87.8 %, 25027 bytes)
988c988
<    8)
---
>    )
988c988
<    8)
---
>    
988c988
<    8)
---
>    )
990c990
< #define GET_BIT(lll,uuu)                          \
---
> define GET_BIT(lll,uuu)                          \
(87.8 %, 25026 bytes)
988c988
<    )
---
>    
988c988
<    )
---
>    
990c990
< #define GET_BIT(lll,uuu)                          \
---
> define GET_BIT(lll,uuu)                          \
988c988
<    )
---
>    
990c990
< #define GET_BIT(lll,uuu)                          \
---
> # GET_BIT(lll,uuu)                          \
988c988
<    )
---
>    
990c990
< #define GET_BIT(lll,uuu)                          \
---
>  GET_BIT(lll,uuu)                          \
988c988
<    )
---
>    
990c990
< #define GET_BIT(lll,uuu)                          \
---
> #define (lll,uuu)                          \
988c988
<    )
---
>    
990c990
< #define GET_BIT(lll,uuu)                          \
---
> define (lll,uuu)                          \
988c988
<    )
---
>    
990c990
< #define GET_BIT(lll,uuu)                          \
---
> # (lll,uuu)                          \
988c988
<    )
---
>    
990c990
< #define GET_BIT(lll,uuu)                          \
---
>  (lll,uuu)                          \
990c990
< #define GET_BIT(lll,uuu)                          \
---
> define GET_BIT(lll,uuu)                          \
990c990
< #define GET_BIT(lll,uuu)                          \
---
>  GET_BIT(lll,uuu)                          \
990c990
< #define GET_BIT(lll,uuu)                          \
---
> define (lll,uuu)                          \
990c990
< #define GET_BIT(lll,uuu)                          \
---
>  (lll,uuu)                          \
990c990
< #define GET_BIT(lll,uuu)                          \
---
> define GET_BITlll,uuu)                          \
990c990
< #define GET_BIT(lll,uuu)                          \
---
>  GET_BITlll,uuu)                          \
990c990
< #define GET_BIT(lll,uuu)                          \
---
> define lll,uuu)                          \
990c990
< #define GET_BIT(lll,uuu)                          \
---
>  lll,uuu)                          \
990c990
< #define GET_BIT(lll,uuu)                          \
---
> # GET_BIT(lll,uuu)                          \
990c990
< #define GET_BIT(lll,uuu)                          \
---
> # (lll,uuu)                          \
(87.8 %, 25025 bytes)
990c990
< #define GET_BIT(lll,uuu)                          \
---
> define GET_BIT(lll,uuu)                          \
990c990
< #define GET_BIT(lll,uuu)                          \
---
>  GET_BIT(lll,uuu)                          \
990c990
< #define GET_BIT(lll,uuu)                          \
---
> define (lll,uuu)                          \
990c990
< #define GET_BIT(lll,uuu)                          \
---
>  (lll,uuu)                          \
990c990
< #define GET_BIT(lll,uuu)                          \
---
> define GET_BITlll,uuu)                          \
990c990
< #define GET_BIT(lll,uuu)                          \
---
>  GET_BITlll,uuu)                          \
990c990
< #define GET_BIT(lll,uuu)                          \
---
> define lll,uuu)                          \
990c990
< #define GET_BIT(lll,uuu)                          \
---
>  lll,uuu)                          \
990c990
< #define GET_BIT(lll,uuu)                          \
---
> # GET_BIT(lll,uuu)                          \
990c990
< #define GET_BIT(lll,uuu)                          \
---
> # (lll,uuu)                          \
990c990
< #define GET_BIT(lll,uuu)                          \
---
> # GET_BITlll,uuu)                          \
990c990
< #define GET_BIT(lll,uuu)                          \
---
> # lll,uuu)                          \
990c990
< #define GET_BIT(lll,uuu)                          \
---
> # GET_BIT(,uuu)                          \
990c990
< #define GET_BIT(lll,uuu)                          \
---
> # (,uuu)                          \
990c990
< #define GET_BIT(lll,uuu)                          \
---
> # GET_BIT,uuu)                          \
990c990
< #define GET_BIT(lll,uuu)                          \
---
> # ,uuu)                          \
990c990
< #define GET_BIT(lll,uuu)                          \
---
> #define (lll,uuu)                          \
990c990
< #define GET_BIT(lll,uuu)                          \
---
> #define lll,uuu)                          \
990c990
< #define GET_BIT(lll,uuu)                          \
---
> #define (,uuu)                          \
990c990
< #define GET_BIT(lll,uuu)                          \
---
> #define ,uuu)                          \
990c990
< #define GET_BIT(lll,uuu)                          \
---
> #define (llluuu)                          \
990c990
< #define GET_BIT(lll,uuu)                          \
---
> #define llluuu)                          \
(87.8 %, 25017 bytes)
990c990
< #define lll,uuu)                          \
---
> #define uuu)                          \
990c990
< #define lll,uuu)                          \
---
> #define ,)                          \
990c990
< #define lll,uuu)                          \
---
> #define )                          \
990c990
< #define lll,uuu)                          \
---
> #define ,uuu                          \
990c990
< #define lll,uuu)                          \
---
> #define uuu                          \
(87.8 %, 25013 bytes)
990c990
< #define uuu)                          \
---
> #define                           \
990c990
< #define uuu)                          \
---
> #define )                          
990c990
< #define uuu)                          \
---
> #define                           
990,991c990,991
< #define uuu)                          \
<    GET_BITS(lll,uuu,1)
---
> #define )                          \
>    (lll,uuu,1)
990,991c990,991
< #define uuu)                          \
<    GET_BITS(lll,uuu,1)
---
> #define                           \
>    (lll,uuu,1)
990,991c990,991
< #define uuu)                          \
<    GET_BITS(lll,uuu,1)
---
> #define )                          
>    (lll,uuu,1)
990,991c990,991
< #define uuu)                          \
<    GET_BITS(lll,uuu,1)
---
> #define                           
>    (lll,uuu,1)
990c990
< #define uuu)                          \
---
> #define uuu                          \
990c990
< #define uuu)                          \
---
> #define uuu                          
990,991c990,991
< #define uuu)                          \
<    GET_BITS(lll,uuu,1)
---
> #define uuu                          \
>    (lll,uuu,1)
(87.8 %, 25012 bytes)
990c990
< #define uuu                          \
---
> #define uuu                          
990,991c990,991
< #define uuu                          \
<    GET_BITS(lll,uuu,1)
---
> #define uuu                          
>    (lll,uuu,1)
990,991c990,991
< #define uuu                          \
<    GET_BITS(lll,uuu,1)
---
> #define uuu                          
>    GET_BITSlll,uuu,1)
990,991c990,991
< #define uuu                          \
<    GET_BITS(lll,uuu,1)
---
> #define uuu                          
>    lll,uuu,1)
990,991c990,991
< #define uuu                          \
<    GET_BITS(lll,uuu,1)
---
> #define uuu                          
>    GET_BITS(,uuu,1)
990,991c990,991
< #define uuu                          \
<    GET_BITS(lll,uuu,1)
---
> #define uuu                          
>    (,uuu,1)
990,991c990,991
< #define uuu                          \
<    GET_BITS(lll,uuu,1)
---
> #define uuu                          
>    GET_BITS,uuu,1)
990,991c990,991
< #define uuu                          \
<    GET_BITS(lll,uuu,1)
---
> #define uuu                          
>    ,uuu,1)
991c991
<    GET_BITS(lll,uuu,1)
---
>    (lll,uuu,1)
991c991
<    GET_BITS(lll,uuu,1)
---
>    lll,uuu,1)
991c991
<    GET_BITS(lll,uuu,1)
---
>    (,uuu,1)
(87.8 %, 25004 bytes)
991c991
<    (lll,uuu,1)
---
>    lll,uuu,1)
991c991
<    (lll,uuu,1)
---
>    ,uuu,1)
(87.8 %, 25003 bytes)
991c991
<    lll,uuu,1)
---
>    ,uuu,1)
991c991
<    lll,uuu,1)
---
>    uuu,1)
(87.8 %, 25000 bytes)
991c991
<    ,uuu,1)
---
>    uuu,1)
991c991
<    ,uuu,1)
---
>    ,1)
991c991
<    ,uuu,1)
---
>    uuu1)
(87.8 %, 24999 bytes)
991c991
<    uuu,1)
---
>    ,1)
991c991
<    uuu,1)
---
>    1)
991c991
<    uuu,1)
---
>    ,)
(87.8 %, 24996 bytes)
991c991
<    ,1)
---
>    1)
991c991
<    ,1)
---
>    )
(87.8 %, 24995 bytes)
991c991
<    1)
---
>    )
991c991
<    1)
---
>    
(87.8 %, 24994 bytes)
991c991
<    )
---
>    
991c991
<    )
---
>    
994c994
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> define GET_MTF_VAL(label1,label2,lval)           \
991c991
<    )
---
>    
994c994
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> # GET_MTF_VAL(label1,label2,lval)           \
991c991
<    )
---
>    
994c994
< #define GET_MTF_VAL(label1,label2,lval)           \
---
>  GET_MTF_VAL(label1,label2,lval)           \
991c991
<    )
---
>    
994c994
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> #define (label1,label2,lval)           \
991c991
<    )
---
>    
994c994
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> define (label1,label2,lval)           \
991c991
<    )
---
>    
994c994
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> # (label1,label2,lval)           \
991c991
<    )
---
>    
994c994
< #define GET_MTF_VAL(label1,label2,lval)           \
---
>  (label1,label2,lval)           \
994c994
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> define GET_MTF_VAL(label1,label2,lval)           \
994c994
< #define GET_MTF_VAL(label1,label2,lval)           \
---
>  GET_MTF_VAL(label1,label2,lval)           \
994c994
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> define (label1,label2,lval)           \
994c994
< #define GET_MTF_VAL(label1,label2,lval)           \
---
>  (label1,label2,lval)           \
994c994
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> define GET_MTF_VALlabel1,label2,lval)           \
(87.8 %, 24993 bytes)
994c994
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> define GET_MTF_VAL(label1,label2,lval)           \
994c994
< #define GET_MTF_VAL(label1,label2,lval)           \
---
>  GET_MTF_VAL(label1,label2,lval)           \
994c994
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> define (label1,label2,lval)           \
994c994
< #define GET_MTF_VAL(label1,label2,lval)           \
---
>  (label1,label2,lval)           \
994c994
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> define GET_MTF_VALlabel1,label2,lval)           \
994c994
< #define GET_MTF_VAL(label1,label2,lval)           \
---
>  GET_MTF_VALlabel1,label2,lval)           \
994c994
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> define label1,label2,lval)           \
994c994
< #define GET_MTF_VAL(label1,label2,lval)           \
---
>  label1,label2,lval)           \
994c994
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> # GET_MTF_VAL(label1,label2,lval)           \
994c994
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> # (label1,label2,lval)           \
994c994
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> # GET_MTF_VALlabel1,label2,lval)           \
994c994
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> # label1,label2,lval)           \
994c994
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> # GET_MTF_VAL(,label2,lval)           \
994c994
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> # (,label2,lval)           \
994c994
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> # GET_MTF_VAL,label2,lval)           \
994c994
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> # ,label2,lval)           \
994c994
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> #define (label1,label2,lval)           \
994c994
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> #define label1,label2,lval)           \
994c994
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> #define (,label2,lval)           \
994c994
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> #define ,label2,lval)           \
994c994
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> #define (label1label2,lval)           \
994c994
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> #define label1label2,lval)           \
(87.8 %, 24981 bytes)
994c994
< #define label1,label2,lval)           \
---
> #define label2,lval)           \
994c994
< #define label1,label2,lval)           \
---
> #define ,,lval)           \
994c994
< #define label1,label2,lval)           \
---
> #define ,lval)           \
994c994
< #define label1,label2,lval)           \
---
> #define ,label2lval)           \
994c994
< #define label1,label2,lval)           \
---
> #define label2lval)           \
(87.8 %, 24974 bytes)
994c994
< #define label2,lval)           \
---
> #define lval)           \
994c994
< #define label2,lval)           \
---
> #define ,)           \
994c994
< #define label2,lval)           \
---
> #define )           \
994c994
< #define label2,lval)           \
---
> #define ,lval           \
994c994
< #define label2,lval)           \
---
> #define lval           \
(87.8 %, 24967 bytes)
994c994
< #define lval)           \
---
> #define            \
994c994
< #define lval)           \
---
> #define )           
994c994
< #define lval)           \
---
> #define            
994c994
< #define lval)           \
---
> #define )           \
999c999
< void  BZ2_decompress ( DState* s )
---
>   BZ2_decompress ( DState* s )
994c994
< #define lval)           \
---
> #define            \
999c999
< void  BZ2_decompress ( DState* s )
---
>   BZ2_decompress ( DState* s )
994c994
< #define lval)           \
---
> #define )           
999c999
< void  BZ2_decompress ( DState* s )
---
>   BZ2_decompress ( DState* s )
994c994
< #define lval)           \
---
> #define            
999c999
< void  BZ2_decompress ( DState* s )
---
>   BZ2_decompress ( DState* s )
994c994
< #define lval)           \
---
> #define lval           \
994c994
< #define lval)           \
---
> #define lval           
(87.8 %, 24966 bytes)
994c994
< #define lval           \
---
> #define lval           
994c994
< #define lval           \
---
> #define lval           
999c999
< void  BZ2_decompress ( DState* s )
---
>   BZ2_decompress ( DState* s )
994c994
< #define lval           \
---
> #define lval           
999c999
< void  BZ2_decompress ( DState* s )
---
> void   ( DState* s )
994c994
< #define lval           \
---
> #define lval           
999c999
< void  BZ2_decompress ( DState* s )
---
>    ( DState* s )
994c994
< #define lval           \
---
> #define lval           
999c999
< void  BZ2_decompress ( DState* s )
---
> void  BZ2_decompress  DState* s )
994c994
< #define lval           \
---
> #define lval           
999c999
< void  BZ2_decompress ( DState* s )
---
>   BZ2_decompress  DState* s )
994c994
< #define lval           \
---
> #define lval           
999c999
< void  BZ2_decompress ( DState* s )
---
> void    DState* s )
994c994
< #define lval           \
---
> #define lval           
999c999
< void  BZ2_decompress ( DState* s )
---
>     DState* s )
999c999
< void  BZ2_decompress ( DState* s )
---
>   BZ2_decompress ( DState* s )
999c999
< void  BZ2_decompress ( DState* s )
---
>    ( DState* s )
999c999
< void  BZ2_decompress ( DState* s )
---
>   BZ2_decompress  DState* s )
999c999
< void  BZ2_decompress ( DState* s )
---
>     DState* s )
999c999
< void  BZ2_decompress ( DState* s )
---
>   BZ2_decompress ( * s )
999c999
< void  BZ2_decompress ( DState* s )
---
>    ( * s )
(87.8 %, 24965 bytes)
999c999
< void  BZ2_decompress ( DState* s )
---
>   BZ2_decompress ( DState* s )
999c999
< void  BZ2_decompress ( DState* s )
---
>    ( DState* s )
999c999
< void  BZ2_decompress ( DState* s )
---
>   BZ2_decompress  DState* s )
999c999
< void  BZ2_decompress ( DState* s )
---
>     DState* s )
999c999
< void  BZ2_decompress ( DState* s )
---
>   BZ2_decompress ( * s )
999c999
< void  BZ2_decompress ( DState* s )
---
>    ( * s )
999c999
< void  BZ2_decompress ( DState* s )
---
>   BZ2_decompress  * s )
999c999
< void  BZ2_decompress ( DState* s )
---
>     * s )
999c999
< void  BZ2_decompress ( DState* s )
---
> void   ( DState* s )
999c999
< void  BZ2_decompress ( DState* s )
---
> void    DState* s )
999c999
< void  BZ2_decompress ( DState* s )
---
> void   ( * s )
(87.8 %, 24941 bytes)
999c999
<    ( * s )
---
>      s 
999c999
<    ( * s )
---
>     *  
999c999
<    ( * s )
---
>       
(87.8 %, 24938 bytes)
999,1000c999
<      s 
< ;
---
>       
1018c1017,1018
< void BZ2_bz__AssertH__fail ( void )
---
> 
> void  ( void )
999c999
<      s 
---
>       
1018c1018
< void BZ2_bz__AssertH__fail ( void )
---
>   ( void )
999,1000c999
<      s 
< ;
---
>       
1018c1017,1018
< void BZ2_bz__AssertH__fail ( void )
---
> 
>   ( void )
1000c1000
< ;
---
> 
1000d999
< ;
1018c1017,1018
< void BZ2_bz__AssertH__fail ( void )
---
> 
>  BZ2_bz__AssertH__fail ( void )
1000d999
< ;
1018c1017,1018
< void BZ2_bz__AssertH__fail ( void )
---
> 
> void  ( void )
1000d999
< ;
1018c1017,1018
< void BZ2_bz__AssertH__fail ( void )
---
> 
>   ( void )
1000d999
< ;
1018c1017,1018
< void BZ2_bz__AssertH__fail ( void )
---
> 
> void BZ2_bz__AssertH__fail  void )
1000d999
< ;
1018c1017,1018
< void BZ2_bz__AssertH__fail ( void )
---
> 
>  BZ2_bz__AssertH__fail  void )
1000d999
< ;
1018c1017,1018
< void BZ2_bz__AssertH__fail ( void )
---
> 
> void   void )
1000d999
< ;
1018c1017,1018
< void BZ2_bz__AssertH__fail ( void )
---
> 
>    void )
1018c1018
< void BZ2_bz__AssertH__fail ( void )
---
>  BZ2_bz__AssertH__fail ( void )
(87.8 %, 24912 bytes)
1018c1018
<   ( void )
---
>     
1018,1019c1018,1019
<   ( void )
< ;
---
>    void )
> 
1018,1019c1018,1019
<   ( void )
< ;
---
>     )
> 
1018,1019c1018,1019
<   ( void )
< ;
---
>    void 
> 
1018,1019c1018,1019
<   ( void )
< ;
---
>     
> 
1018c1018
<   ( void )
---
>   (  )
(87.8 %, 24906 bytes)
1019d1018
< ;
1023c1022,1023
< void  bz_config_ok ( void )
---
> 
>    ( void )
1019d1018
< ;
1023c1022,1023
< void  bz_config_ok ( void )
---
> 
> void  bz_config_ok  void )
1019d1018
< ;
1023c1022,1023
< void  bz_config_ok ( void )
---
> 
>   bz_config_ok  void )
1019d1018
< ;
1023c1022,1023
< void  bz_config_ok ( void )
---
> 
> void    void )
1019d1018
< ;
1023c1022,1023
< void  bz_config_ok ( void )
---
> 
>     void )
1023c1023
< void  bz_config_ok ( void )
---
>   bz_config_ok ( void )
(87.9 %, 24889 bytes)
1023c1023
<    ( void )
---
>      
1023,1024c1023,1024
<    ( void )
< ;
---
>     void )
> 
1023,1024c1023,1024
<    ( void )
< ;
---
>      )
> 
1023,1024c1023,1024
<    ( void )
< ;
---
>     void 
> 
1023,1024c1023,1024
<    ( void )
< ;
---
>      
> 
1023c1023
<    ( void )
---
>    (  )
(87.9 %, 24883 bytes)
1024d1023
< ;
1028c1027,1028
< void  default_bzalloc (   void )
---
> 
>    (   void )
1024d1023
< ;
1028c1027,1028
< void  default_bzalloc (   void )
---
> 
> void  default_bzalloc    void )
1024d1023
< ;
1028c1027,1028
< void  default_bzalloc (   void )
---
> 
>   default_bzalloc    void )
1024d1023
< ;
1028c1027,1028
< void  default_bzalloc (   void )
---
> 
> void      void )
1024d1023
< ;
1028c1027,1028
< void  default_bzalloc (   void )
---
> 
>       void )
1028c1028
< void  default_bzalloc (   void )
---
>   default_bzalloc (   void )
1028c1028
< void  default_bzalloc (   void )
---
>    (   void )
1028c1028
< void  default_bzalloc (   void )
---
>   default_bzalloc    void )
1028c1028
< void  default_bzalloc (   void )
---
>       void )
1028c1028
< void  default_bzalloc (   void )
---
>   default_bzalloc (    )
(87.9 %, 24879 bytes)
1028c1028
<   default_bzalloc (   void )
---
>    (   void )
1028c1028
<   default_bzalloc (   void )
---
>       void )
1028c1028
<   default_bzalloc (   void )
---
>    (    )
1028c1028
<   default_bzalloc (   void )
---
>        )
1028c1028
<   default_bzalloc (   void )
---
>    (   void 
1028c1028
<   default_bzalloc (   void )
---
>       void 
1028c1028
<   default_bzalloc (   void )
---
>    (    
1028c1028
<   default_bzalloc (   void )
---
>        
1028c1028
<   default_bzalloc (   void )
---
>   default_bzalloc    void )
1028c1028
<   default_bzalloc (   void )
---
>   default_bzalloc     )
1028c1028
<   default_bzalloc (   void )
---
>   default_bzalloc    void 
1028c1028
<   default_bzalloc (   void )
---
>   default_bzalloc     
1028,1029c1028,1029
<   default_bzalloc (   void )
< ;
---
>   default_bzalloc    void )
> 
1028,1029c1028,1029
<   default_bzalloc (   void )
< ;
---
>   default_bzalloc     )
> 
1028,1029c1028,1029
<   default_bzalloc (   void )
< ;
---
>   default_bzalloc    void 
> 
1028,1029c1028,1029
<   default_bzalloc (   void )
< ;
---
>   default_bzalloc     
> 
1028c1028
<   default_bzalloc (   void )
---
>   default_bzalloc (    )
(87.9 %, 24873 bytes)
1029d1028
< ;
1031,1032c1030,1032
< static
< void default_bzfree (  void )
---
> 
> 
>  default_bzfree (  void )
1029c1029
< ;
---
> 
1032c1032
< void default_bzfree (  void )
---
> void  (  void )
1029d1028
< ;
1031,1032c1030,1032
< static
< void default_bzfree (  void )
---
> 
> 
> void  (  void )
1029c1029
< ;
---
> 
1032c1032
< void default_bzfree (  void )
---
>   (  void )
1029d1028
< ;
1031,1032c1030,1032
< static
< void default_bzfree (  void )
---
> 
> 
>   (  void )
1031c1031
< static
---
> 
1031,1032c1031,1032
< static
< void default_bzfree (  void )
---
> 
>  default_bzfree (  void )
(87.9 %, 24867 bytes)
1032c1032
< void default_bzfree (  void )
---
>  default_bzfree (  void )
1032c1032
< void default_bzfree (  void )
---
>   (  void )
1032c1032
< void default_bzfree (  void )
---
>  default_bzfree   void )
1032c1032
< void default_bzfree (  void )
---
>     void )
1032c1032
< void default_bzfree (  void )
---
>  default_bzfree (   )
(87.9 %, 24863 bytes)
1032c1032
<  default_bzfree (  void )
---
>   (  void )
1032c1032
<  default_bzfree (  void )
---
>     void )
1032c1032
<  default_bzfree (  void )
---
>   (   )
1032c1032
<  default_bzfree (  void )
---
>      )
1032c1032
<  default_bzfree (  void )
---
>   (  void 
1032c1032
<  default_bzfree (  void )
---
>     void 
1032c1032
<  default_bzfree (  void )
---
>   (   
1032c1032
<  default_bzfree (  void )
---
>      
1032c1032
<  default_bzfree (  void )
---
>  default_bzfree   void )
1032c1032
<  default_bzfree (  void )
---
>  default_bzfree    )
1032c1032
<  default_bzfree (  void )
---
>  default_bzfree   void 
1032c1032
<  default_bzfree (  void )
---
>  default_bzfree    
1032,1033c1032,1033
<  default_bzfree (  void )
< ;
---
>  default_bzfree   void )
> 
1032,1033c1032,1033
<  default_bzfree (  void )
< ;
---
>  default_bzfree    )
> 
1032,1033c1032,1033
<  default_bzfree (  void )
< ;
---
>  default_bzfree   void 
> 
1032,1033c1032,1033
<  default_bzfree (  void )
< ;
---
>  default_bzfree    
> 
1032c1032
<  default_bzfree (  void )
---
>  default_bzfree (   )
(87.9 %, 24857 bytes)
1033d1032
< ;
1037,1038c1036,1038
< static
< void prepare_new_block ( void )
---
> 
> 
>  prepare_new_block ( void )
1033c1033
< ;
---
> 
1038c1038
< void prepare_new_block ( void )
---
> void  ( void )
1033d1032
< ;
1037,1038c1036,1038
< static
< void prepare_new_block ( void )
---
> 
> 
> void  ( void )
1033c1033
< ;
---
> 
1038c1038
< void prepare_new_block ( void )
---
>   ( void )
1033d1032
< ;
1037,1038c1036,1038
< static
< void prepare_new_block ( void )
---
> 
> 
>   ( void )
1037c1037
< static
---
> 
(87.9 %, 24829 bytes)
1038,1039c1038,1039
<   ( void )
< ;
---
>     
> 
1038c1038
<   ( void )
---
>   (  )
1038c1038
<   ( void )
---
>   (  
1038,1039c1038,1039
<   ( void )
< ;
---
>   (  )
> 
1038,1039c1038,1039
<   ( void )
< ;
---
>   (  
> 
1038c1038
<   ( void )
---
>   (  )
1043c1043
< static
---
> 
(87.9 %, 24825 bytes)
1038c1038
<   (  )
---
>   (  
1038,1039c1038,1039
<   (  )
< ;
---
>   (  
> 
1038c1038
<   (  )
---
>   (  
1043c1043
< static
---
> 
1038,1039c1038,1040
<   (  )
< ;
---
>   (  
> 
> 
1043d1043
< static
1038c1038
<   (  )
---
>   (  
1044c1044
< void init_RL ( void )
---
>  init_RL ( void )
1038,1039c1038,1039
<   (  )
< ;
---
>   (  
> 
1044c1044
< void init_RL ( void )
---
>  init_RL ( void )
1038c1038
<   (  )
---
>   (  
1043,1044c1043,1044
< static
< void init_RL ( void )
---
> 
>  init_RL ( void )
1038,1039c1038
<   (  )
< ;
---
>   (  
1043,1044c1042,1044
< static
< void init_RL ( void )
---
> 
> 
>  init_RL ( void )
1039c1039
< ;
---
> 
1039d1038
< ;
1043c1042,1043
< static
---
> 
> 
1039c1039
< ;
---
> 
1044c1044
< void init_RL ( void )
---
>  init_RL ( void )
1039d1038
< ;
1043,1044c1042,1044
< static
< void init_RL ( void )
---
> 
> 
>  init_RL ( void )
1039c1039
< ;
---
> 
1044c1044
< void init_RL ( void )
---
> void  ( void )
1039d1038
< ;
1043,1044c1042,1044
< static
< void init_RL ( void )
---
> 
> 
> void  ( void )
1039c1039
< ;
---
> 
1044c1044
< void init_RL ( void )
---
>   ( void )
1039d1038
< ;
1043,1044c1042,1044
< static
< void init_RL ( void )
---
> 
> 
>   ( void )
1043c1043
< static
---
> 
1043,1044c1043,1044
< static
< void init_RL ( void )
---
> 
>  init_RL ( void )
1043,1044c1043,1044
< static
< void init_RL ( void )
---
> 
> void  ( void )
(87.9 %, 24819 bytes)
1044c1044
< void init_RL ( void )
---
>  init_RL ( void )
1044c1044
< void init_RL ( void )
---
>   ( void )
1044c1044
< void init_RL ( void )
---
>  init_RL  void )
1044c1044
< void init_RL ( void )
---
>    void )
1044c1044
< void init_RL ( void )
---
>  init_RL (  )
(87.9 %, 24815 bytes)
1044c1044
<  init_RL ( void )
---
>   ( void )
1044c1044
<  init_RL ( void )
---
>    void )
1044c1044
<  init_RL ( void )
---
>   (  )
1044c1044
<  init_RL ( void )
---
>     )
1044c1044
<  init_RL ( void )
---
>   ( void 
1044c1044
<  init_RL ( void )
---
>    void 
1044c1044
<  init_RL ( void )
---
>   (  
1044c1044
<  init_RL ( void )
---
>     
1044c1044
<  init_RL ( void )
---
>  init_RL  void )
(87.9 %, 24806 bytes)
1044,1045c1044
<    void 
< ;
---
>     
1048c1047,1048
< void  isempty_RL ( void )
---
> 
> void   ( void )
1044c1044
<    void 
---
>     
1048c1048
< void  isempty_RL ( void )
---
>    ( void )
1044,1045c1044
<    void 
< ;
---
>     
1048c1047,1048
< void  isempty_RL ( void )
---
> 
>    ( void )
1045c1045
< ;
---
> 
1045d1044
< ;
1048c1047,1048
< void  isempty_RL ( void )
---
> 
>   isempty_RL ( void )
1045d1044
< ;
1048c1047,1048
< void  isempty_RL ( void )
---
> 
> void   ( void )
1045d1044
< ;
1048c1047,1048
< void  isempty_RL ( void )
---
> 
>    ( void )
1045d1044
< ;
1048c1047,1048
< void  isempty_RL ( void )
---
> 
> void  isempty_RL  void )
1045d1044
< ;
1048c1047,1048
< void  isempty_RL ( void )
---
> 
>   isempty_RL  void )
1045d1044
< ;
1048c1047,1048
< void  isempty_RL ( void )
---
> 
> void    void )
1045d1044
< ;
1048c1047,1048
< void  isempty_RL ( void )
---
> 
>     void )
1048c1048
< void  isempty_RL ( void )
---
>   isempty_RL ( void )
(87.9 %, 24801 bytes)
1048c1048
<   isempty_RL ( void )
---
>     void )
1048c1048
<   isempty_RL ( void )
---
>    (  )
1048c1048
<   isempty_RL ( void )
---
>      )
1048c1048
<   isempty_RL ( void )
---
>    ( void 
1048c1048
<   isempty_RL ( void )
---
>     void 
1048c1048
<   isempty_RL ( void )
---
>    (  
1048c1048
<   isempty_RL ( void )
---
>      
1048c1048
<   isempty_RL ( void )
---
>   isempty_RL  void )
1048c1048
<   isempty_RL ( void )
---
>   isempty_RL   )
1048c1048
<   isempty_RL ( void )
---
>   isempty_RL  void 
1048c1048
<   isempty_RL ( void )
---
>   isempty_RL   
1048,1049c1048,1049
<   isempty_RL ( void )
< ;
---
>   isempty_RL  void )
> 
1048,1049c1048,1049
<   isempty_RL ( void )
< ;
---
>   isempty_RL   )
> 
1048,1049c1048,1049
<   isempty_RL ( void )
< ;
---
>   isempty_RL  void 
> 
1048,1049c1048,1049
<   isempty_RL ( void )
< ;
---
>   isempty_RL   
> 
1048c1048
<   isempty_RL ( void )
---
>   isempty_RL (  )
(87.9 %, 24785 bytes)
1049d1048
< ;
1053c1052,1053
< int BZ_API(BZ2_bzCompressInit) 
---
> 
>  BZ2_bzCompressInit) 
1053c1053
< int BZ_API(BZ2_bzCompressInit) 
---
>  BZ_API(BZ2_bzCompressInit) 
1053c1053
< int BZ_API(BZ2_bzCompressInit) 
---
>  (BZ2_bzCompressInit) 
1053c1053
< int BZ_API(BZ2_bzCompressInit) 
---
>  BZ_APIBZ2_bzCompressInit) 
(87.9 %, 24782 bytes)
1053c1053
<  BZ_API(BZ2_bzCompressInit) 
---
>  (BZ2_bzCompressInit) 
1053c1053
<  BZ_API(BZ2_bzCompressInit) 
---
>  BZ2_bzCompressInit) 
1053c1053
<  BZ_API(BZ2_bzCompressInit) 
---
>  () 
1053c1053
<  BZ_API(BZ2_bzCompressInit) 
---
>  ) 
1053c1053
<  BZ_API(BZ2_bzCompressInit) 
---
>  (BZ2_bzCompressInit 
1053c1053
<  BZ_API(BZ2_bzCompressInit) 
---
>  BZ2_bzCompressInit 
(87.9 %, 24776 bytes)
1053c1053
<  (BZ2_bzCompressInit) 
---
>  BZ2_bzCompressInit) 
1053c1053
<  (BZ2_bzCompressInit) 
---
>  ) 
1053c1053
<  (BZ2_bzCompressInit) 
---
>  BZ2_bzCompressInit 
1053c1053
<  (BZ2_bzCompressInit) 
---
>   
1053,1054c1053,1054
<  (BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
>  BZ2_bzCompressInit) 
>                      bz_stream* strm, 
1053,1054c1053,1054
<  (BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
>  ) 
>                      bz_stream* strm, 
1053,1054c1053,1054
<  (BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
>  BZ2_bzCompressInit 
>                      bz_stream* strm, 
1053,1054c1053,1054
<  (BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
>   
>                      bz_stream* strm, 
1053c1053
<  (BZ2_bzCompressInit) 
---
>  () 
1053c1053
<  (BZ2_bzCompressInit) 
---
>  ( 
1053,1054c1053,1054
<  (BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
>  () 
>                      bz_stream* strm, 
1053,1054c1053,1054
<  (BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
>  ( 
>                      bz_stream* strm, 
1053,1054c1053,1054
<  (BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
>  () 
>                     ( * strm, 
(87.9 %, 24774 bytes)
1053,1054c1053,1054
<  BZ2_bzCompressInit 
<                     ( bz_stream* strm, 
---
>   
>                     ( * strm, 
1053,1054c1053,1054
<  BZ2_bzCompressInit 
<                     ( bz_stream* strm, 
---
>   
>                      * strm, 
1053,1054c1053,1054
<  BZ2_bzCompressInit 
<                     ( bz_stream* strm, 
---
>   
>                     ( bz_stream strm, 
1053,1054c1053,1054
<  BZ2_bzCompressInit 
<                     ( bz_stream* strm, 
---
>   
>                      bz_stream strm, 
1053,1054c1053,1054
<  BZ2_bzCompressInit 
<                     ( bz_stream* strm, 
---
>   
>                     (  strm, 
1053,1054c1053,1054
<  BZ2_bzCompressInit 
<                     ( bz_stream* strm, 
---
>   
>                       strm, 
1054c1054
<                     ( bz_stream* strm, 
---
>                      bz_stream* strm, 
1054c1054
<                     ( bz_stream* strm, 
---
>                      * strm, 
1054c1054
<                     ( bz_stream* strm, 
---
>                      bz_stream strm, 
1054c1054
<                     ( bz_stream* strm, 
---
>                       strm, 
1054c1054
<                     ( bz_stream* strm, 
---
>                      bz_stream* , 
1054c1054
<                     ( bz_stream* strm, 
---
>                      * , 
1054c1054
<                     ( bz_stream* strm, 
---
>                      bz_stream , 
1054c1054
<                     ( bz_stream* strm, 
---
>                       , 
1054c1054
<                     ( bz_stream* strm, 
---
>                     ( * strm, 
1054c1054
<                     ( bz_stream* strm, 
---
>                     (  strm, 
1054c1054
<                     ( bz_stream* strm, 
---
>                     ( * , 
1054c1054
<                     ( bz_stream* strm, 
---
>                     (  , 
1054c1054
<                     ( bz_stream* strm, 
---
>                     ( * strm 
1054c1054
<                     ( bz_stream* strm, 
---
>                     (  strm 
1054c1054
<                     ( bz_stream* strm, 
---
>                     ( *  
1054c1054
<                     ( bz_stream* strm, 
---
>                     (   
1054c1054
<                     ( bz_stream* strm, 
---
>                     ( bz_stream strm, 
1054c1054
<                     ( bz_stream* strm, 
---
>                     ( bz_stream , 
1054c1054
<                     ( bz_stream* strm, 
---
>                     ( bz_stream strm 
1054c1054
<                     ( bz_stream* strm, 
---
>                     ( bz_stream  
1054,1055c1054,1055
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>                     ( bz_stream strm, 
>                              blockSize100k,
1054,1055c1054,1055
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>                     ( bz_stream , 
>                              blockSize100k,
1054,1055c1054,1055
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>                     ( bz_stream strm 
>                              blockSize100k,
1054,1055c1054,1055
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>                     ( bz_stream  
>                              blockSize100k,
1054c1054
<                     ( bz_stream* strm, 
---
>                     ( bz_stream* , 
1054c1054
<                     ( bz_stream* strm, 
---
>                     ( bz_stream*  
1054,1055c1054,1055
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>                     ( bz_stream* , 
>                              blockSize100k,
1054,1055c1054,1055
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>                     ( bz_stream*  
>                              blockSize100k,
1054,1055c1054,1055
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>                     ( bz_stream* , 
>                      int        ,
1054,1055c1054,1055
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>                     ( bz_stream*  
>                      int        ,
1054,1055c1054,1055
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>                     ( bz_stream* , 
>                              ,
1054,1055c1054,1055
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>                     ( bz_stream*  
>                              ,
1054c1054
<                     ( bz_stream* strm, 
---
>                     ( bz_stream* strm 
1054,1055c1054,1055
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>                     ( bz_stream* strm 
>                              blockSize100k,
1054,1055c1054,1055
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>                     ( bz_stream* strm 
>                      int        ,
1054,1055c1054,1055
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>                     ( bz_stream* strm 
>                              ,
1054,1055c1054,1055
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>                     ( bz_stream* strm 
>                      int        blockSize100k
1054,1055c1054,1055
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>                     ( bz_stream* strm 
>                              blockSize100k
1054,1055c1054,1055
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>                     ( bz_stream* strm 
>                      int        
1054,1055c1054,1055
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>                     ( bz_stream* strm 
>                              
1055c1055
<                      int        blockSize100k,
---
>                              blockSize100k,
1055c1055
<                      int        blockSize100k,
---
>                              ,
1055c1055
<                      int        blockSize100k,
---
>                              blockSize100k
1055c1055
<                      int        blockSize100k,
---
>                              
1055,1056c1055,1056
<                      int        blockSize100k,
<                      int        verbosity,
---
>                              blockSize100k,
>                              verbosity,
1055,1056c1055,1056
<                      int        blockSize100k,
<                      int        verbosity,
---
>                              ,
>                              verbosity,
1055,1056c1055,1056
<                      int        blockSize100k,
<                      int        verbosity,
---
>                              blockSize100k
>                              verbosity,
1055,1056c1055,1056
<                      int        blockSize100k,
<                      int        verbosity,
---
>                              
>                              verbosity,
1055c1055
<                      int        blockSize100k,
---
>                      int        ,
1055c1055
<                      int        blockSize100k,
---
>                      int        
1055,1056c1055,1056
<                      int        blockSize100k,
<                      int        verbosity,
---
>                      int        ,
>                              verbosity,
1055,1056c1055,1056
<                      int        blockSize100k,
<                      int        verbosity,
---
>                      int        
>                              verbosity,
1055,1056c1055,1056
<                      int        blockSize100k,
<                      int        verbosity,
---
>                      int        ,
>                      int        ,
1055,1056c1055,1056
<                      int        blockSize100k,
<                      int        verbosity,
---
>                      int        
>                      int        ,
1055,1056c1055,1056
<                      int        blockSize100k,
<                      int        verbosity,
---
>                      int        ,
>                              ,
1055,1056c1055,1056
<                      int        blockSize100k,
<                      int        verbosity,
---
>                      int        
>                              ,
1055c1055
<                      int        blockSize100k,
---
>                      int        blockSize100k
1055,1056c1055,1056
<                      int        blockSize100k,
<                      int        verbosity,
---
>                      int        blockSize100k
>                              verbosity,
1055,1056c1055,1056
<                      int        blockSize100k,
<                      int        verbosity,
---
>                      int        blockSize100k
>                      int        ,
1055,1056c1055,1056
<                      int        blockSize100k,
<                      int        verbosity,
---
>                      int        blockSize100k
>                              ,
1055,1056c1055,1056
<                      int        blockSize100k,
<                      int        verbosity,
---
>                      int        blockSize100k
>                      int        verbosity
1055,1056c1055,1056
<                      int        blockSize100k,
<                      int        verbosity,
---
>                      int        blockSize100k
>                              verbosity
1055,1056c1055,1056
<                      int        blockSize100k,
<                      int        verbosity,
---
>                      int        blockSize100k
>                      int        
1055,1056c1055,1056
<                      int        blockSize100k,
<                      int        verbosity,
---
>                      int        blockSize100k
>                              
1056c1056
<                      int        verbosity,
---
>                              verbosity,
1056c1056
<                      int        verbosity,
---
>                              ,
1056c1056
<                      int        verbosity,
---
>                              verbosity
1056c1056
<                      int        verbosity,
---
>                              
1056,1057c1056,1057
<                      int        verbosity,
<                      int        workFactor )
---
>                              verbosity,
>                              workFactor )
1056,1057c1056,1057
<                      int        verbosity,
<                      int        workFactor )
---
>                              ,
>                              workFactor )
1056,1057c1056,1057
<                      int        verbosity,
<                      int        workFactor )
---
>                              verbosity
>                              workFactor )
1056,1057c1056,1057
<                      int        verbosity,
<                      int        workFactor )
---
>                              
>                              workFactor )
1056c1056
<                      int        verbosity,
---
>                      int        ,
1056c1056
<                      int        verbosity,
---
>                      int        
1056,1057c1056,1057
<                      int        verbosity,
<                      int        workFactor )
---
>                      int        ,
>                              workFactor )
1056,1057c1056,1057
<                      int        verbosity,
<                      int        workFactor )
---
>                      int        
>                              workFactor )
1056,1057c1056,1057
<                      int        verbosity,
<                      int        workFactor )
---
>                      int        ,
>                      int         )
1056,1057c1056,1057
<                      int        verbosity,
<                      int        workFactor )
---
>                      int        
>                      int         )
1056,1057c1056,1057
<                      int        verbosity,
<                      int        workFactor )
---
>                      int        ,
>                               )
1056,1057c1056,1057
<                      int        verbosity,
<                      int        workFactor )
---
>                      int        
>                               )
1056c1056
<                      int        verbosity,
---
>                      int        verbosity
1056,1057c1056,1057
<                      int        verbosity,
<                      int        workFactor )
---
>                      int        verbosity
>                              workFactor )
1056,1057c1056,1057
<                      int        verbosity,
<                      int        workFactor )
---
>                      int        verbosity
>                      int         )
1056,1057c1056,1057
<                      int        verbosity,
<                      int        workFactor )
---
>                      int        verbosity
>                               )
1056,1057c1056,1057
<                      int        verbosity,
<                      int        workFactor )
---
>                      int        verbosity
>                      int        workFactor 
1056,1057c1056,1057
<                      int        verbosity,
<                      int        workFactor )
---
>                      int        verbosity
>                              workFactor 
1056,1057c1056,1057
<                      int        verbosity,
<                      int        workFactor )
---
>                      int        verbosity
>                      int         
1056,1057c1056,1057
<                      int        verbosity,
<                      int        workFactor )
---
>                      int        verbosity
>                               
1057c1057
<                      int        workFactor )
---
>                              workFactor )
1057c1057
<                      int        workFactor )
---
>                               )
1057c1057
<                      int        workFactor )
---
>                              workFactor 
1057c1057
<                      int        workFactor )
---
>                               
1057,1058c1057,1058
<                      int        workFactor )
< {
---
>                              workFactor )
> 
1057,1058c1057,1058
<                      int        workFactor )
< {
---
>                               )
> 
1057,1058c1057,1058
<                      int        workFactor )
< {
---
>                              workFactor 
> 
1057,1058c1057,1058
<                      int        workFactor )
< {
---
>                               
> 
1057c1057
<                      int        workFactor )
---
>                      int         )
1057c1057
<                      int        workFactor )
---
>                      int         
1057,1058c1057,1058
<                      int        workFactor )
< {
---
>                      int         )
> 
1057,1058c1057,1058
<                      int        workFactor )
< {
---
>                      int         
> 
1057c1057
<                      int        workFactor )
---
>                      int         )
1059c1059
<    Int32   n;
---
>       n;
1057c1057
<                      int        workFactor )
---
>                      int         
1059c1059
<    Int32   n;
---
>       n;
1057,1059c1057,1059
<                      int        workFactor )
< {
<    Int32   n;
---
>                      int         )
> 
>       n;
1057,1059c1057,1059
<                      int        workFactor )
< {
<    Int32   n;
---
>                      int         
> 
>       n;
1057c1057
<                      int        workFactor )
---
>                      int        workFactor 
1057,1058c1057,1058
<                      int        workFactor )
< {
---
>                      int        workFactor 
> 
1057c1057
<                      int        workFactor )
---
>                      int        workFactor 
1059c1059
<    Int32   n;
---
>       n;
1057,1059c1057,1059
<                      int        workFactor )
< {
<    Int32   n;
---
>                      int        workFactor 
> 
>       n;
1057c1057
<                      int        workFactor )
---
>                      int        workFactor 
1059c1059
<    Int32   n;
---
>    Int32   ;
1057,1059c1057,1059
<                      int        workFactor )
< {
<    Int32   n;
---
>                      int        workFactor 
> 
>    Int32   ;
1057c1057
<                      int        workFactor )
---
>                      int        workFactor 
1059c1059
<    Int32   n;
---
>       ;
1057,1059c1057,1059
<                      int        workFactor )
< {
<    Int32   n;
---
>                      int        workFactor 
> 
>       ;
1058c1058
< {
---
> 
1058,1059c1058,1059
< {
<    Int32   n;
---
> 
>       n;
1058,1059c1058,1059
< {
<    Int32   n;
---
> 
>    Int32   ;
1058,1059c1058,1059
< {
<    Int32   n;
---
> 
>       ;
1058,1059c1058,1059
< {
<    Int32   n;
---
> 
>    Int32   n
1058,1059c1058,1059
< {
<    Int32   n;
---
> 
>       n
1058,1059c1058,1059
< {
<    Int32   n;
---
> 
>    Int32   
1058,1059c1058,1059
< {
<    Int32   n;
---
> 
>       
1059c1059
<    Int32   n;
---
>       n;
1059c1059
<    Int32   n;
---
>       ;
1059c1059
<    Int32   n;
---
>       n
1059c1059
<    Int32   n;
---
>       
1059,1060c1059,1060
<    Int32   n;
<    EState* s;
---
>       n;
>    * s;
1059,1060c1059,1060
<    Int32   n;
<    EState* s;
---
>       ;
>    * s;
1059,1060c1059,1060
<    Int32   n;
<    EState* s;
---
>       n
>    * s;
1059,1060c1059,1060
<    Int32   n;
<    EState* s;
---
>       
>    * s;
1059c1059
<    Int32   n;
---
>    Int32   ;
1059c1059
<    Int32   n;
---
>    Int32   
1059,1060c1059,1060
<    Int32   n;
<    EState* s;
---
>    Int32   ;
>    * s;
1059,1060c1059,1060
<    Int32   n;
<    EState* s;
---
>    Int32   
>    * s;
1059,1060c1059,1060
<    Int32   n;
<    EState* s;
---
>    Int32   ;
>    EState s;
1059,1060c1059,1060
<    Int32   n;
<    EState* s;
---
>    Int32   
>    EState s;
1059,1060c1059,1060
<    Int32   n;
<    EState* s;
---
>    Int32   ;
>     s;
1059,1060c1059,1060
<    Int32   n;
<    EState* s;
---
>    Int32   
>     s;
1059c1059
<    Int32   n;
---
>    Int32   n
1059,1060c1059,1060
<    Int32   n;
<    EState* s;
---
>    Int32   n
>    * s;
1059,1060c1059,1060
<    Int32   n;
<    EState* s;
---
>    Int32   n
>    EState s;
1059,1060c1059,1060
<    Int32   n;
<    EState* s;
---
>    Int32   n
>     s;
1059,1060c1059,1060
<    Int32   n;
<    EState* s;
---
>    Int32   n
>    EState* ;
1059,1060c1059,1060
<    Int32   n;
<    EState* s;
---
>    Int32   n
>    * ;
1059,1060c1059,1060
<    Int32   n;
<    EState* s;
---
>    Int32   n
>    EState ;
1059,1060c1059,1060
<    Int32   n;
<    EState* s;
---
>    Int32   n
>     ;
1060c1060
<    EState* s;
---
>    * s;
1060c1060
<    EState* s;
---
>     s;
1060c1060
<    EState* s;
---
>    * ;
1060c1060
<    EState* s;
---
>     ;
1060c1060
<    EState* s;
---
>    * s
1060c1060
<    EState* s;
---
>     s
1060c1060
<    EState* s;
---
>    * 
1060c1060
<    EState* s;
---
>     
1060c1060
<    EState* s;
---
>    EState s;
1060c1060
<    EState* s;
---
>    EState ;
1060c1060
<    EState* s;
---
>    EState s
1060c1060
<    EState* s;
---
>    EState 
1060,1061c1060,1061
<    EState* s;
<    UInt32 s_8;
---
>    EState s;
>     s_8;
1060,1061c1060,1061
<    EState* s;
<    UInt32 s_8;
---
>    EState ;
>     s_8;
1060,1061c1060,1061
<    EState* s;
<    UInt32 s_8;
---
>    EState s
>     s_8;
1060,1061c1060,1061
<    EState* s;
<    UInt32 s_8;
---
>    EState 
>     s_8;
1060c1060
<    EState* s;
---
>    EState* ;
1060c1060
<    EState* s;
---
>    EState* 
1060,1061c1060,1061
<    EState* s;
<    UInt32 s_8;
---
>    EState* ;
>     s_8;
1060,1061c1060,1061
<    EState* s;
<    UInt32 s_8;
---
>    EState* 
>     s_8;
1060,1061c1060,1061
<    EState* s;
<    UInt32 s_8;
---
>    EState* ;
>    UInt32 ;
1060,1061c1060,1061
<    EState* s;
<    UInt32 s_8;
---
>    EState* 
>    UInt32 ;
1060,1061c1060,1061
<    EState* s;
<    UInt32 s_8;
---
>    EState* ;
>     ;
1060,1061c1060,1061
<    EState* s;
<    UInt32 s_8;
---
>    EState* 
>     ;
1060c1060
<    EState* s;
---
>    EState* s
1060,1061c1060,1061
<    EState* s;
<    UInt32 s_8;
---
>    EState* s
>     s_8;
1060,1061c1060,1061
<    EState* s;
<    UInt32 s_8;
---
>    EState* s
>    UInt32 ;
1060,1061c1060,1061
<    EState* s;
<    UInt32 s_8;
---
>    EState* s
>     ;
1060,1061c1060,1061
<    EState* s;
<    UInt32 s_8;
---
>    EState* s
>    UInt32 s_8
1060,1061c1060,1061
<    EState* s;
<    UInt32 s_8;
---
>    EState* s
>     s_8
1060,1061c1060,1061
<    EState* s;
<    UInt32 s_8;
---
>    EState* s
>    UInt32 
1060,1061c1060,1061
<    EState* s;
<    UInt32 s_8;
---
>    EState* s
>     
1061c1061
<    UInt32 s_8;
---
>     s_8;
1061c1061
<    UInt32 s_8;
---
>     ;
1061c1061
<    UInt32 s_8;
---
>     s_8
1061c1061
<    UInt32 s_8;
---
>     
1061,1062c1061,1062
<    UInt32 s_8;
<    unsigned short s_10;
---
>     s_8;
>     short s_10;
1061,1062c1061,1062
<    UInt32 s_8;
<    unsigned short s_10;
---
>     ;
>     short s_10;
1061,1062c1061,1062
<    UInt32 s_8;
<    unsigned short s_10;
---
>     s_8
>     short s_10;
1061,1062c1061,1062
<    UInt32 s_8;
<    unsigned short s_10;
---
>     
>     short s_10;
1061c1061
<    UInt32 s_8;
---
>    UInt32 ;
1061c1061
<    UInt32 s_8;
---
>    UInt32 
1061,1062c1061,1062
<    UInt32 s_8;
<    unsigned short s_10;
---
>    UInt32 ;
>     short s_10;
1061,1062c1061,1062
<    UInt32 s_8;
<    unsigned short s_10;
---
>    UInt32 
>     short s_10;
1061,1062c1061,1062
<    UInt32 s_8;
<    unsigned short s_10;
---
>    UInt32 ;
>    unsigned  s_10;
1061,1062c1061,1062
<    UInt32 s_8;
<    unsigned short s_10;
---
>    UInt32 
>    unsigned  s_10;
1061,1062c1061,1062
<    UInt32 s_8;
<    unsigned short s_10;
---
>    UInt32 ;
>      s_10;
1061,1062c1061,1062
<    UInt32 s_8;
<    unsigned short s_10;
---
>    UInt32 
>      s_10;
1061c1061
<    UInt32 s_8;
---
>    UInt32 s_8
1061,1062c1061,1062
<    UInt32 s_8;
<    unsigned short s_10;
---
>    UInt32 s_8
>     short s_10;
1061,1062c1061,1062
<    UInt32 s_8;
<    unsigned short s_10;
---
>    UInt32 s_8
>    unsigned  s_10;
1061,1062c1061,1062
<    UInt32 s_8;
<    unsigned short s_10;
---
>    UInt32 s_8
>      s_10;
1061,1062c1061,1062
<    UInt32 s_8;
<    unsigned short s_10;
---
>    UInt32 s_8
>    unsigned short ;
1061,1062c1061,1062
<    UInt32 s_8;
<    unsigned short s_10;
---
>    UInt32 s_8
>     short ;
1061,1062c1061,1062
<    UInt32 s_8;
<    unsigned short s_10;
---
>    UInt32 s_8
>    unsigned  ;
1061,1062c1061,1062
<    UInt32 s_8;
<    unsigned short s_10;
---
>    UInt32 s_8
>      ;
1062c1062
<    unsigned short s_10;
---
>     short s_10;
1062c1062
<    unsigned short s_10;
---
>      s_10;
1062c1062
<    unsigned short s_10;
---
>     short ;
1062c1062
<    unsigned short s_10;
---
>      ;
1062c1062
<    unsigned short s_10;
---
>     short s_10
1062c1062
<    unsigned short s_10;
---
>      s_10
1062c1062
<    unsigned short s_10;
---
>     short 
1062c1062
<    unsigned short s_10;
---
>      
1062c1062
<    unsigned short s_10;
---
>    unsigned  s_10;
(87.9 %, 24766 bytes)
1062c1062
<     short s_10;
---
>      s_10;
1062c1062
<     short s_10;
---
>      ;
1062c1062
<     short s_10;
---
>      s_10
1062c1062
<     short s_10;
---
>      
1062,1063c1062,1063
<     short s_10;
<    unsigned char *s_9;
---
>      s_10;
>     char *s_9;
1062,1063c1062,1063
<     short s_10;
<    unsigned char *s_9;
---
>      ;
>     char *s_9;
1062,1063c1062,1063
<     short s_10;
<    unsigned char *s_9;
---
>      s_10
>     char *s_9;
1062,1063c1062,1063
<     short s_10;
<    unsigned char *s_9;
---
>      
>     char *s_9;
1062c1062
<     short s_10;
---
>     short ;
1062c1062
<     short s_10;
---
>     short 
1062,1063c1062,1063
<     short s_10;
<    unsigned char *s_9;
---
>     short ;
>     char *s_9;
1062,1063c1062,1063
<     short s_10;
<    unsigned char *s_9;
---
>     short 
>     char *s_9;
1062,1063c1062,1063
<     short s_10;
<    unsigned char *s_9;
---
>     short ;
>    unsigned  *s_9;
1062,1063c1062,1063
<     short s_10;
<    unsigned char *s_9;
---
>     short 
>    unsigned  *s_9;
1062,1063c1062,1063
<     short s_10;
<    unsigned char *s_9;
---
>     short ;
>      *s_9;
1062,1063c1062,1063
<     short s_10;
<    unsigned char *s_9;
---
>     short 
>      *s_9;
1062c1062
<     short s_10;
---
>     short s_10
1062,1063c1062,1063
<     short s_10;
<    unsigned char *s_9;
---
>     short s_10
>     char *s_9;
1062,1063c1062,1063
<     short s_10;
<    unsigned char *s_9;
---
>     short s_10
>    unsigned  *s_9;
1062,1063c1062,1063
<     short s_10;
<    unsigned char *s_9;
---
>     short s_10
>      *s_9;
1062,1063c1062,1063
<     short s_10;
<    unsigned char *s_9;
---
>     short s_10
>    unsigned char s_9;
1062,1063c1062,1063
<     short s_10;
<    unsigned char *s_9;
---
>     short s_10
>     char s_9;
1062,1063c1062,1063
<     short s_10;
<    unsigned char *s_9;
---
>     short s_10
>    unsigned  s_9;
1062,1063c1062,1063
<     short s_10;
<    unsigned char *s_9;
---
>     short s_10
>      s_9;
1063c1063
<    unsigned char *s_9;
---
>     char *s_9;
1063c1063
<    unsigned char *s_9;
---
>      *s_9;
1063c1063
<    unsigned char *s_9;
---
>     char s_9;
(87.9 %, 24758 bytes)
1063c1063
<     char *s_9;
---
>      *s_9;
1063c1063
<     char *s_9;
---
>      s_9;
1063c1063
<     char *s_9;
---
>      *;
1063c1063
<     char *s_9;
---
>      ;
1063c1063
<     char *s_9;
---
>      *s_9
1063c1063
<     char *s_9;
---
>      s_9
1063c1063
<     char *s_9;
---
>      *
1063c1063
<     char *s_9;
---
>      
1063c1063
<     char *s_9;
---
>     char s_9;
1063c1063
<     char *s_9;
---
>     char ;
1063c1063
<     char *s_9;
---
>     char s_9
1063c1063
<     char *s_9;
---
>     char 
1063,1064c1063,1064
<     char *s_9;
<    Int32 s_12;
---
>     char s_9;
>     s_12;
1063,1064c1063,1064
<     char *s_9;
<    Int32 s_12;
---
>     char ;
>     s_12;
1063,1064c1063,1064
<     char *s_9;
<    Int32 s_12;
---
>     char s_9
>     s_12;
1063,1064c1063,1064
<     char *s_9;
<    Int32 s_12;
---
>     char 
>     s_12;
1063c1063
<     char *s_9;
---
>     char *;
1063c1063
<     char *s_9;
---
>     char *
1063,1064c1063,1064
<     char *s_9;
<    Int32 s_12;
---
>     char *;
>     s_12;
1063,1064c1063,1064
<     char *s_9;
<    Int32 s_12;
---
>     char *
>     s_12;
1063,1064c1063,1064
<     char *s_9;
<    Int32 s_12;
---
>     char *;
>    Int32 ;
1063,1064c1063,1064
<     char *s_9;
<    Int32 s_12;
---
>     char *
>    Int32 ;
1063,1064c1063,1064
<     char *s_9;
<    Int32 s_12;
---
>     char *;
>     ;
1063,1064c1063,1064
<     char *s_9;
<    Int32 s_12;
---
>     char *
>     ;
1063c1063
<     char *s_9;
---
>     char *s_9
1063,1064c1063,1064
<     char *s_9;
<    Int32 s_12;
---
>     char *s_9
>     s_12;
(87.9 %, 24757 bytes)
1063c1063
<     char s_9;
---
>     char ;
1063c1063
<     char s_9;
---
>     char 
1063,1064c1063,1064
<     char s_9;
<    Int32 s_12;
---
>     char ;
>     s_12;
1063,1064c1063,1064
<     char s_9;
<    Int32 s_12;
---
>     char 
>     s_12;
1063,1064c1063,1064
<     char s_9;
<    Int32 s_12;
---
>     char ;
>    Int32 ;
1063,1064c1063,1064
<     char s_9;
<    Int32 s_12;
---
>     char 
>    Int32 ;
1063,1064c1063,1064
<     char s_9;
<    Int32 s_12;
---
>     char ;
>     ;
1063,1064c1063,1064
<     char s_9;
<    Int32 s_12;
---
>     char 
>     ;
1063c1063
<     char s_9;
---
>     char s_9
1063,1064c1063,1064
<     char s_9;
<    Int32 s_12;
---
>     char s_9
>     s_12;
1063,1064c1063,1064
<     char s_9;
<    Int32 s_12;
---
>     char s_9
>    Int32 ;
1063,1064c1063,1064
<     char s_9;
<    Int32 s_12;
---
>     char s_9
>     ;
1063,1064c1063,1064
<     char s_9;
<    Int32 s_12;
---
>     char s_9
>    Int32 s_12
1063,1064c1063,1064
<     char s_9;
<    Int32 s_12;
---
>     char s_9
>     s_12
1063,1064c1063,1064
<     char s_9;
<    Int32 s_12;
---
>     char s_9
>    Int32 
1063,1064c1063,1064
<     char s_9;
<    Int32 s_12;
---
>     char s_9
>     
1064c1064
<    Int32 s_12;
---
>     s_12;
1064c1064
<    Int32 s_12;
---
>     ;
1064c1064
<    Int32 s_12;
---
>     s_12
1064c1064
<    Int32 s_12;
---
>     
1064,1065c1064,1065
<    Int32 s_12;
<    Int32 s_28;
---
>     s_12;
>     s_28;
1064,1065c1064,1065
<    Int32 s_12;
<    Int32 s_28;
---
>     ;
>     s_28;
1064,1065c1064,1065
<    Int32 s_12;
<    Int32 s_28;
---
>     s_12
>     s_28;
1064,1065c1064,1065
<    Int32 s_12;
<    Int32 s_28;
---
>     
>     s_28;
1064c1064
<    Int32 s_12;
---
>    Int32 ;
1064c1064
<    Int32 s_12;
---
>    Int32 
1064,1065c1064,1065
<    Int32 s_12;
<    Int32 s_28;
---
>    Int32 ;
>     s_28;
1064,1065c1064,1065
<    Int32 s_12;
<    Int32 s_28;
---
>    Int32 
>     s_28;
1064,1065c1064,1065
<    Int32 s_12;
<    Int32 s_28;
---
>    Int32 ;
>    Int32 ;
1064,1065c1064,1065
<    Int32 s_12;
<    Int32 s_28;
---
>    Int32 
>    Int32 ;
1064,1065c1064,1065
<    Int32 s_12;
<    Int32 s_28;
---
>    Int32 ;
>     ;
1064,1065c1064,1065
<    Int32 s_12;
<    Int32 s_28;
---
>    Int32 
>     ;
1064c1064
<    Int32 s_12;
---
>    Int32 s_12
1064,1065c1064,1065
<    Int32 s_12;
<    Int32 s_28;
---
>    Int32 s_12
>     s_28;
1064,1065c1064,1065
<    Int32 s_12;
<    Int32 s_28;
---
>    Int32 s_12
>    Int32 ;
1064,1065c1064,1065
<    Int32 s_12;
<    Int32 s_28;
---
>    Int32 s_12
>     ;
1064,1065c1064,1065
<    Int32 s_12;
<    Int32 s_28;
---
>    Int32 s_12
>    Int32 s_28
1064,1065c1064,1065
<    Int32 s_12;
<    Int32 s_28;
---
>    Int32 s_12
>     s_28
1064,1065c1064,1065
<    Int32 s_12;
<    Int32 s_28;
---
>    Int32 s_12
>    Int32 
1064,1065c1064,1065
<    Int32 s_12;
<    Int32 s_28;
---
>    Int32 s_12
>     
1065c1065
<    Int32 s_28;
---
>     s_28;
1065c1065
<    Int32 s_28;
---
>     ;
1065c1065
<    Int32 s_28;
---
>     s_28
1065c1065
<    Int32 s_28;
---
>     
1065,1066c1065,1066
<    Int32 s_28;
<    Int32 s_18;
---
>     s_28;
>     s_18;
1065,1066c1065,1066
<    Int32 s_28;
<    Int32 s_18;
---
>     ;
>     s_18;
1065,1066c1065,1066
<    Int32 s_28;
<    Int32 s_18;
---
>     s_28
>     s_18;
1065,1066c1065,1066
<    Int32 s_28;
<    Int32 s_18;
---
>     
>     s_18;
1065c1065
<    Int32 s_28;
---
>    Int32 ;
1065c1065
<    Int32 s_28;
---
>    Int32 
1065,1066c1065,1066
<    Int32 s_28;
<    Int32 s_18;
---
>    Int32 ;
>     s_18;
1065,1066c1065,1066
<    Int32 s_28;
<    Int32 s_18;
---
>    Int32 
>     s_18;
1065,1066c1065,1066
<    Int32 s_28;
<    Int32 s_18;
---
>    Int32 ;
>    Int32 ;
1065,1066c1065,1066
<    Int32 s_28;
<    Int32 s_18;
---
>    Int32 
>    Int32 ;
1065,1066c1065,1066
<    Int32 s_28;
<    Int32 s_18;
---
>    Int32 ;
>     ;
1065,1066c1065,1066
<    Int32 s_28;
<    Int32 s_18;
---
>    Int32 
>     ;
1065c1065
<    Int32 s_28;
---
>    Int32 s_28
1065,1066c1065,1066
<    Int32 s_28;
<    Int32 s_18;
---
>    Int32 s_28
>     s_18;
1065,1066c1065,1066
<    Int32 s_28;
<    Int32 s_18;
---
>    Int32 s_28
>    Int32 ;
1065,1066c1065,1066
<    Int32 s_28;
<    Int32 s_18;
---
>    Int32 s_28
>     ;
1065,1066c1065,1066
<    Int32 s_28;
<    Int32 s_18;
---
>    Int32 s_28
>    Int32 s_18
1065,1066c1065,1066
<    Int32 s_28;
<    Int32 s_18;
---
>    Int32 s_28
>     s_18
1065,1066c1065,1066
<    Int32 s_28;
<    Int32 s_18;
---
>    Int32 s_28
>    Int32 
1065,1066c1065,1066
<    Int32 s_28;
<    Int32 s_18;
---
>    Int32 s_28
>     
1066c1066
<    Int32 s_18;
---
>     s_18;
1066c1066
<    Int32 s_18;
---
>     ;
1066c1066
<    Int32 s_18;
---
>     s_18
1066c1066
<    Int32 s_18;
---
>     
1066,1067c1066,1067
<    Int32 s_18;
<    Int32 s_30;
---
>     s_18;
>     s_30;
1066,1067c1066,1067
<    Int32 s_18;
<    Int32 s_30;
---
>     ;
>     s_30;
1066,1067c1066,1067
<    Int32 s_18;
<    Int32 s_30;
---
>     s_18
>     s_30;
1066,1067c1066,1067
<    Int32 s_18;
<    Int32 s_30;
---
>     
>     s_30;
1066c1066
<    Int32 s_18;
---
>    Int32 ;
1066c1066
<    Int32 s_18;
---
>    Int32 
1066,1067c1066,1067
<    Int32 s_18;
<    Int32 s_30;
---
>    Int32 ;
>     s_30;
1066,1067c1066,1067
<    Int32 s_18;
<    Int32 s_30;
---
>    Int32 
>     s_30;
1066,1067c1066,1067
<    Int32 s_18;
<    Int32 s_30;
---
>    Int32 ;
>    Int32 ;
1066,1067c1066,1067
<    Int32 s_18;
<    Int32 s_30;
---
>    Int32 
>    Int32 ;
1066,1067c1066,1067
<    Int32 s_18;
<    Int32 s_30;
---
>    Int32 ;
>     ;
1066,1067c1066,1067
<    Int32 s_18;
<    Int32 s_30;
---
>    Int32 
>     ;
1066c1066
<    Int32 s_18;
---
>    Int32 s_18
1066,1067c1066,1067
<    Int32 s_18;
<    Int32 s_30;
---
>    Int32 s_18
>     s_30;
1066,1067c1066,1067
<    Int32 s_18;
<    Int32 s_30;
---
>    Int32 s_18
>    Int32 ;
1066,1067c1066,1067
<    Int32 s_18;
<    Int32 s_30;
---
>    Int32 s_18
>     ;
1066,1067c1066,1067
<    Int32 s_18;
<    Int32 s_30;
---
>    Int32 s_18
>    Int32 s_30
1066,1067c1066,1067
<    Int32 s_18;
<    Int32 s_30;
---
>    Int32 s_18
>     s_30
1066,1067c1066,1067
<    Int32 s_18;
<    Int32 s_30;
---
>    Int32 s_18
>    Int32 
1066,1067c1066,1067
<    Int32 s_18;
<    Int32 s_30;
---
>    Int32 s_18
>     
1067c1067
<    Int32 s_30;
---
>     s_30;
1067c1067
<    Int32 s_30;
---
>     ;
1067c1067
<    Int32 s_30;
---
>     s_30
1067c1067
<    Int32 s_30;
---
>     
1067,1068c1067,1068
<    Int32 s_30;
<    UInt32 s_27;
---
>     s_30;
>     s_27;
1067,1068c1067,1068
<    Int32 s_30;
<    UInt32 s_27;
---
>     ;
>     s_27;
1067,1068c1067,1068
<    Int32 s_30;
<    UInt32 s_27;
---
>     s_30
>     s_27;
1067,1068c1067,1068
<    Int32 s_30;
<    UInt32 s_27;
---
>     
>     s_27;
1067c1067
<    Int32 s_30;
---
>    Int32 ;
1067c1067
<    Int32 s_30;
---
>    Int32 
1067,1068c1067,1068
<    Int32 s_30;
<    UInt32 s_27;
---
>    Int32 ;
>     s_27;
1067,1068c1067,1068
<    Int32 s_30;
<    UInt32 s_27;
---
>    Int32 
>     s_27;
1067,1068c1067,1068
<    Int32 s_30;
<    UInt32 s_27;
---
>    Int32 ;
>    UInt32 ;
1067,1068c1067,1068
<    Int32 s_30;
<    UInt32 s_27;
---
>    Int32 
>    UInt32 ;
1067,1068c1067,1068
<    Int32 s_30;
<    UInt32 s_27;
---
>    Int32 ;
>     ;
1067,1068c1067,1068
<    Int32 s_30;
<    UInt32 s_27;
---
>    Int32 
>     ;
1067c1067
<    Int32 s_30;
---
>    Int32 s_30
1067,1068c1067,1068
<    Int32 s_30;
<    UInt32 s_27;
---
>    Int32 s_30
>     s_27;
1067,1068c1067,1068
<    Int32 s_30;
<    UInt32 s_27;
---
>    Int32 s_30
>    UInt32 ;
1067,1068c1067,1068
<    Int32 s_30;
<    UInt32 s_27;
---
>    Int32 s_30
>     ;
1067,1068c1067,1068
<    Int32 s_30;
<    UInt32 s_27;
---
>    Int32 s_30
>    UInt32 s_27
1067,1068c1067,1068
<    Int32 s_30;
<    UInt32 s_27;
---
>    Int32 s_30
>     s_27
1067,1068c1067,1068
<    Int32 s_30;
<    UInt32 s_27;
---
>    Int32 s_30
>    UInt32 
1067,1068c1067,1068
<    Int32 s_30;
<    UInt32 s_27;
---
>    Int32 s_30
>     
1068c1068
<    UInt32 s_27;
---
>     s_27;
1068c1068
<    UInt32 s_27;
---
>     ;
1068c1068
<    UInt32 s_27;
---
>     s_27
1068c1068
<    UInt32 s_27;
---
>     
1068,1069c1068,1069
<    UInt32 s_27;
<    Int32 s_1;
---
>     s_27;
>     s_1;
1068,1069c1068,1069
<    UInt32 s_27;
<    Int32 s_1;
---
>     ;
>     s_1;
1068,1069c1068,1069
<    UInt32 s_27;
<    Int32 s_1;
---
>     s_27
>     s_1;
1068,1069c1068,1069
<    UInt32 s_27;
<    Int32 s_1;
---
>     
>     s_1;
1068c1068
<    UInt32 s_27;
---
>    UInt32 ;
1068c1068
<    UInt32 s_27;
---
>    UInt32 
1068,1069c1068,1069
<    UInt32 s_27;
<    Int32 s_1;
---
>    UInt32 ;
>     s_1;
1068,1069c1068,1069
<    UInt32 s_27;
<    Int32 s_1;
---
>    UInt32 
>     s_1;
1068,1069c1068,1069
<    UInt32 s_27;
<    Int32 s_1;
---
>    UInt32 ;
>    Int32 ;
1068,1069c1068,1069
<    UInt32 s_27;
<    Int32 s_1;
---
>    UInt32 
>    Int32 ;
1068,1069c1068,1069
<    UInt32 s_27;
<    Int32 s_1;
---
>    UInt32 ;
>     ;
1068,1069c1068,1069
<    UInt32 s_27;
<    Int32 s_1;
---
>    UInt32 
>     ;
1068c1068
<    UInt32 s_27;
---
>    UInt32 s_27
1068,1069c1068,1069
<    UInt32 s_27;
<    Int32 s_1;
---
>    UInt32 s_27
>     s_1;
1068,1069c1068,1069
<    UInt32 s_27;
<    Int32 s_1;
---
>    UInt32 s_27
>    Int32 ;
1068,1069c1068,1069
<    UInt32 s_27;
<    Int32 s_1;
---
>    UInt32 s_27
>     ;
1068,1069c1068,1069
<    UInt32 s_27;
<    Int32 s_1;
---
>    UInt32 s_27
>    Int32 s_1
1068,1069c1068,1069
<    UInt32 s_27;
<    Int32 s_1;
---
>    UInt32 s_27
>     s_1
1068,1069c1068,1069
<    UInt32 s_27;
<    Int32 s_1;
---
>    UInt32 s_27
>    Int32 
1068,1069c1068,1069
<    UInt32 s_27;
<    Int32 s_1;
---
>    UInt32 s_27
>     
1069c1069
<    Int32 s_1;
---
>     s_1;
1069c1069
<    Int32 s_1;
---
>     ;
1069c1069
<    Int32 s_1;
---
>     s_1
1069c1069
<    Int32 s_1;
---
>     
1069,1070c1069,1070
<    Int32 s_1;
<    Int32 s_2;
---
>     s_1;
>     s_2;
1069,1070c1069,1070
<    Int32 s_1;
<    Int32 s_2;
---
>     ;
>     s_2;
1069,1070c1069,1070
<    Int32 s_1;
<    Int32 s_2;
---
>     s_1
>     s_2;
1069,1070c1069,1070
<    Int32 s_1;
<    Int32 s_2;
---
>     
>     s_2;
1069c1069
<    Int32 s_1;
---
>    Int32 ;
1069c1069
<    Int32 s_1;
---
>    Int32 
1069,1070c1069,1070
<    Int32 s_1;
<    Int32 s_2;
---
>    Int32 ;
>     s_2;
1069,1070c1069,1070
<    Int32 s_1;
<    Int32 s_2;
---
>    Int32 
>     s_2;
1069,1070c1069,1070
<    Int32 s_1;
<    Int32 s_2;
---
>    Int32 ;
>    Int32 ;
1069,1070c1069,1070
<    Int32 s_1;
<    Int32 s_2;
---
>    Int32 
>    Int32 ;
1069,1070c1069,1070
<    Int32 s_1;
<    Int32 s_2;
---
>    Int32 ;
>     ;
1069,1070c1069,1070
<    Int32 s_1;
<    Int32 s_2;
---
>    Int32 
>     ;
1069c1069
<    Int32 s_1;
---
>    Int32 s_1
1069,1070c1069,1070
<    Int32 s_1;
<    Int32 s_2;
---
>    Int32 s_1
>     s_2;
1069,1070c1069,1070
<    Int32 s_1;
<    Int32 s_2;
---
>    Int32 s_1
>    Int32 ;
1069,1070c1069,1070
<    Int32 s_1;
<    Int32 s_2;
---
>    Int32 s_1
>     ;
1069,1070c1069,1070
<    Int32 s_1;
<    Int32 s_2;
---
>    Int32 s_1
>    Int32 s_2
1069,1070c1069,1070
<    Int32 s_1;
<    Int32 s_2;
---
>    Int32 s_1
>     s_2
1069,1070c1069,1070
<    Int32 s_1;
<    Int32 s_2;
---
>    Int32 s_1
>    Int32 
1069,1070c1069,1070
<    Int32 s_1;
<    Int32 s_2;
---
>    Int32 s_1
>     
1070c1070
<    Int32 s_2;
---
>     s_2;
1070c1070
<    Int32 s_2;
---
>     ;
1070c1070
<    Int32 s_2;
---
>     s_2
1070c1070
<    Int32 s_2;
---
>     
1070,1071c1070,1071
<    Int32 s_2;
<    UInt32 *s_6;
---
>     s_2;
>     *s_6;
1070,1071c1070,1071
<    Int32 s_2;
<    UInt32 *s_6;
---
>     ;
>     *s_6;
1070,1071c1070,1071
<    Int32 s_2;
<    UInt32 *s_6;
---
>     s_2
>     *s_6;
1070,1071c1070,1071
<    Int32 s_2;
<    UInt32 *s_6;
---
>     
>     *s_6;
1070c1070
<    Int32 s_2;
---
>    Int32 ;
1070c1070
<    Int32 s_2;
---
>    Int32 
1070,1071c1070,1071
<    Int32 s_2;
<    UInt32 *s_6;
---
>    Int32 ;
>     *s_6;
1070,1071c1070,1071
<    Int32 s_2;
<    UInt32 *s_6;
---
>    Int32 
>     *s_6;
1070,1071c1070,1071
<    Int32 s_2;
<    UInt32 *s_6;
---
>    Int32 ;
>    UInt32 s_6;
1070,1071c1070,1071
<    Int32 s_2;
<    UInt32 *s_6;
---
>    Int32 
>    UInt32 s_6;
1070,1071c1070,1071
<    Int32 s_2;
<    UInt32 *s_6;
---
>    Int32 ;
>     s_6;
1070,1071c1070,1071
<    Int32 s_2;
<    UInt32 *s_6;
---
>    Int32 
>     s_6;
1070c1070
<    Int32 s_2;
---
>    Int32 s_2
1070,1071c1070,1071
<    Int32 s_2;
<    UInt32 *s_6;
---
>    Int32 s_2
>     *s_6;
1070,1071c1070,1071
<    Int32 s_2;
<    UInt32 *s_6;
---
>    Int32 s_2
>    UInt32 s_6;
1070,1071c1070,1071
<    Int32 s_2;
<    UInt32 *s_6;
---
>    Int32 s_2
>     s_6;
1070,1071c1070,1071
<    Int32 s_2;
<    UInt32 *s_6;
---
>    Int32 s_2
>    UInt32 *;
1070,1071c1070,1071
<    Int32 s_2;
<    UInt32 *s_6;
---
>    Int32 s_2
>     *;
1070,1071c1070,1071
<    Int32 s_2;
<    UInt32 *s_6;
---
>    Int32 s_2
>    UInt32 ;
1070,1071c1070,1071
<    Int32 s_2;
<    UInt32 *s_6;
---
>    Int32 s_2
>     ;
1071c1071
<    UInt32 *s_6;
---
>     *s_6;
1071c1071
<    UInt32 *s_6;
---
>     s_6;
1071c1071
<    UInt32 *s_6;
---
>     *;
1071c1071
<    UInt32 *s_6;
---
>     ;
1071c1071
<    UInt32 *s_6;
---
>     *s_6
1071c1071
<    UInt32 *s_6;
---
>     s_6
1071c1071
<    UInt32 *s_6;
---
>     *
1071c1071
<    UInt32 *s_6;
---
>     
1071c1071
<    UInt32 *s_6;
---
>    UInt32 s_6;
1071c1071
<    UInt32 *s_6;
---
>    UInt32 ;
1071c1071
<    UInt32 *s_6;
---
>    UInt32 s_6
1071c1071
<    UInt32 *s_6;
---
>    UInt32 
1071,1072c1071,1072
<    UInt32 *s_6;
<    UInt32 *s_5;
---
>    UInt32 s_6;
>     *s_5;
1071,1072c1071,1072
<    UInt32 *s_6;
<    UInt32 *s_5;
---
>    UInt32 ;
>     *s_5;
1071,1072c1071,1072
<    UInt32 *s_6;
<    UInt32 *s_5;
---
>    UInt32 s_6
>     *s_5;
1071,1072c1071,1072
<    UInt32 *s_6;
<    UInt32 *s_5;
---
>    UInt32 
>     *s_5;
1071c1071
<    UInt32 *s_6;
---
>    UInt32 *;
1071c1071
<    UInt32 *s_6;
---
>    UInt32 *
1071,1072c1071,1072
<    UInt32 *s_6;
<    UInt32 *s_5;
---
>    UInt32 *;
>     *s_5;
1071,1072c1071,1072
<    UInt32 *s_6;
<    UInt32 *s_5;
---
>    UInt32 *
>     *s_5;
1071,1072c1071,1072
<    UInt32 *s_6;
<    UInt32 *s_5;
---
>    UInt32 *;
>    UInt32 s_5;
1071,1072c1071,1072
<    UInt32 *s_6;
<    UInt32 *s_5;
---
>    UInt32 *
>    UInt32 s_5;
1071,1072c1071,1072
<    UInt32 *s_6;
<    UInt32 *s_5;
---
>    UInt32 *;
>     s_5;
1071,1072c1071,1072
<    UInt32 *s_6;
<    UInt32 *s_5;
---
>    UInt32 *
>     s_5;
1071c1071
<    UInt32 *s_6;
---
>    UInt32 *s_6
(87.9 %, 24756 bytes)
1071c1071
<    UInt32 s_6;
---
>    UInt32 ;
1071c1071
<    UInt32 s_6;
---
>    UInt32 
1071,1072c1071,1072
<    UInt32 s_6;
<    UInt32 *s_5;
---
>    UInt32 ;
>     *s_5;
1071,1072c1071,1072
<    UInt32 s_6;
<    UInt32 *s_5;
---
>    UInt32 
>     *s_5;
1071,1072c1071,1072
<    UInt32 s_6;
<    UInt32 *s_5;
---
>    UInt32 ;
>    UInt32 s_5;
1071,1072c1071,1072
<    UInt32 s_6;
<    UInt32 *s_5;
---
>    UInt32 
>    UInt32 s_5;
1071,1072c1071,1072
<    UInt32 s_6;
<    UInt32 *s_5;
---
>    UInt32 ;
>     s_5;
1071,1072c1071,1072
<    UInt32 s_6;
<    UInt32 *s_5;
---
>    UInt32 
>     s_5;
1071c1071
<    UInt32 s_6;
---
>    UInt32 s_6
1071,1072c1071,1072
<    UInt32 s_6;
<    UInt32 *s_5;
---
>    UInt32 s_6
>     *s_5;
1071,1072c1071,1072
<    UInt32 s_6;
<    UInt32 *s_5;
---
>    UInt32 s_6
>    UInt32 s_5;
1071,1072c1071,1072
<    UInt32 s_6;
<    UInt32 *s_5;
---
>    UInt32 s_6
>     s_5;
1071,1072c1071,1072
<    UInt32 s_6;
<    UInt32 *s_5;
---
>    UInt32 s_6
>    UInt32 *;
1071,1072c1071,1072
<    UInt32 s_6;
<    UInt32 *s_5;
---
>    UInt32 s_6
>     *;
1071,1072c1071,1072
<    UInt32 s_6;
<    UInt32 *s_5;
---
>    UInt32 s_6
>    UInt32 ;
1071,1072c1071,1072
<    UInt32 s_6;
<    UInt32 *s_5;
---
>    UInt32 s_6
>     ;
1072c1072
<    UInt32 *s_5;
---
>     *s_5;
1072c1072
<    UInt32 *s_5;
---
>     s_5;
1072c1072
<    UInt32 *s_5;
---
>     *;
1072c1072
<    UInt32 *s_5;
---
>     ;
1072c1072
<    UInt32 *s_5;
---
>     *s_5
1072c1072
<    UInt32 *s_5;
---
>     s_5
1072c1072
<    UInt32 *s_5;
---
>     *
1072c1072
<    UInt32 *s_5;
---
>     
1072c1072
<    UInt32 *s_5;
---
>    UInt32 s_5;
1072c1072
<    UInt32 *s_5;
---
>    UInt32 ;
1072c1072
<    UInt32 *s_5;
---
>    UInt32 s_5
1072c1072
<    UInt32 *s_5;
---
>    UInt32 
1072,1073c1072,1073
<    UInt32 *s_5;
<    UInt32 *s_4;
---
>    UInt32 s_5;
>     *s_4;
1072,1073c1072,1073
<    UInt32 *s_5;
<    UInt32 *s_4;
---
>    UInt32 ;
>     *s_4;
1072,1073c1072,1073
<    UInt32 *s_5;
<    UInt32 *s_4;
---
>    UInt32 s_5
>     *s_4;
1072,1073c1072,1073
<    UInt32 *s_5;
<    UInt32 *s_4;
---
>    UInt32 
>     *s_4;
1072c1072
<    UInt32 *s_5;
---
>    UInt32 *;
1072c1072
<    UInt32 *s_5;
---
>    UInt32 *
1072,1073c1072,1073
<    UInt32 *s_5;
<    UInt32 *s_4;
---
>    UInt32 *;
>     *s_4;
1072,1073c1072,1073
<    UInt32 *s_5;
<    UInt32 *s_4;
---
>    UInt32 *
>     *s_4;
1072,1073c1072,1073
<    UInt32 *s_5;
<    UInt32 *s_4;
---
>    UInt32 *;
>    UInt32 s_4;
1072,1073c1072,1073
<    UInt32 *s_5;
<    UInt32 *s_4;
---
>    UInt32 *
>    UInt32 s_4;
1072,1073c1072,1073
<    UInt32 *s_5;
<    UInt32 *s_4;
---
>    UInt32 *;
>     s_4;
1072,1073c1072,1073
<    UInt32 *s_5;
<    UInt32 *s_4;
---
>    UInt32 *
>     s_4;
1072c1072
<    UInt32 *s_5;
---
>    UInt32 *s_5
(87.9 %, 24755 bytes)
1072c1072
<    UInt32 s_5;
---
>    UInt32 ;
1072c1072
<    UInt32 s_5;
---
>    UInt32 
1072,1073c1072,1073
<    UInt32 s_5;
<    UInt32 *s_4;
---
>    UInt32 ;
>     *s_4;
1072,1073c1072,1073
<    UInt32 s_5;
<    UInt32 *s_4;
---
>    UInt32 
>     *s_4;
1072,1073c1072,1073
<    UInt32 s_5;
<    UInt32 *s_4;
---
>    UInt32 ;
>    UInt32 s_4;
1072,1073c1072,1073
<    UInt32 s_5;
<    UInt32 *s_4;
---
>    UInt32 
>    UInt32 s_4;
1072,1073c1072,1073
<    UInt32 s_5;
<    UInt32 *s_4;
---
>    UInt32 ;
>     s_4;
1072,1073c1072,1073
<    UInt32 s_5;
<    UInt32 *s_4;
---
>    UInt32 
>     s_4;
1072c1072
<    UInt32 s_5;
---
>    UInt32 s_5
1072,1073c1072,1073
<    UInt32 s_5;
<    UInt32 *s_4;
---
>    UInt32 s_5
>     *s_4;
1072,1073c1072,1073
<    UInt32 s_5;
<    UInt32 *s_4;
---
>    UInt32 s_5
>    UInt32 s_4;
1072,1073c1072,1073
<    UInt32 s_5;
<    UInt32 *s_4;
---
>    UInt32 s_5
>     s_4;
1072,1073c1072,1073
<    UInt32 s_5;
<    UInt32 *s_4;
---
>    UInt32 s_5
>    UInt32 *;
1072,1073c1072,1073
<    UInt32 s_5;
<    UInt32 *s_4;
---
>    UInt32 s_5
>     *;
1072,1073c1072,1073
<    UInt32 s_5;
<    UInt32 *s_4;
---
>    UInt32 s_5
>    UInt32 ;
1072,1073c1072,1073
<    UInt32 s_5;
<    UInt32 *s_4;
---
>    UInt32 s_5
>     ;
1073c1073
<    UInt32 *s_4;
---
>     *s_4;
1073c1073
<    UInt32 *s_4;
---
>     s_4;
1073c1073
<    UInt32 *s_4;
---
>     *;
1073c1073
<    UInt32 *s_4;
---
>     ;
1073c1073
<    UInt32 *s_4;
---
>     *s_4
1073c1073
<    UInt32 *s_4;
---
>     s_4
1073c1073
<    UInt32 *s_4;
---
>     *
1073c1073
<    UInt32 *s_4;
---
>     
1073c1073
<    UInt32 *s_4;
---
>    UInt32 s_4;
1073c1073
<    UInt32 *s_4;
---
>    UInt32 ;
1073c1073
<    UInt32 *s_4;
---
>    UInt32 s_4
1073c1073
<    UInt32 *s_4;
---
>    UInt32 
1073,1074c1073,1074
<    UInt32 *s_4;
<    bz_stream *s_0;
---
>    UInt32 s_4;
>     *s_0;
1073,1074c1073,1074
<    UInt32 *s_4;
<    bz_stream *s_0;
---
>    UInt32 ;
>     *s_0;
1073,1074c1073,1074
<    UInt32 *s_4;
<    bz_stream *s_0;
---
>    UInt32 s_4
>     *s_0;
1073,1074c1073,1074
<    UInt32 *s_4;
<    bz_stream *s_0;
---
>    UInt32 
>     *s_0;
1073c1073
<    UInt32 *s_4;
---
>    UInt32 *;
1073c1073
<    UInt32 *s_4;
---
>    UInt32 *
1073,1074c1073,1074
<    UInt32 *s_4;
<    bz_stream *s_0;
---
>    UInt32 *;
>     *s_0;
1073,1074c1073,1074
<    UInt32 *s_4;
<    bz_stream *s_0;
---
>    UInt32 *
>     *s_0;
1073,1074c1073,1074
<    UInt32 *s_4;
<    bz_stream *s_0;
---
>    UInt32 *;
>    bz_stream s_0;
(87.9 %, 24754 bytes)
1073c1073
<    UInt32 s_4;
---
>    UInt32 ;
1073c1073
<    UInt32 s_4;
---
>    UInt32 
1073,1074c1073,1074
<    UInt32 s_4;
<    bz_stream *s_0;
---
>    UInt32 ;
>     *s_0;
1073,1074c1073,1074
<    UInt32 s_4;
<    bz_stream *s_0;
---
>    UInt32 
>     *s_0;
1073,1074c1073,1074
<    UInt32 s_4;
<    bz_stream *s_0;
---
>    UInt32 ;
>    bz_stream s_0;
1073,1074c1073,1074
<    UInt32 s_4;
<    bz_stream *s_0;
---
>    UInt32 
>    bz_stream s_0;
1073,1074c1073,1074
<    UInt32 s_4;
<    bz_stream *s_0;
---
>    UInt32 ;
>     s_0;
1073,1074c1073,1074
<    UInt32 s_4;
<    bz_stream *s_0;
---
>    UInt32 
>     s_0;
1073c1073
<    UInt32 s_4;
---
>    UInt32 s_4
1073,1074c1073,1074
<    UInt32 s_4;
<    bz_stream *s_0;
---
>    UInt32 s_4
>     *s_0;
1073,1074c1073,1074
<    UInt32 s_4;
<    bz_stream *s_0;
---
>    UInt32 s_4
>    bz_stream s_0;
1073,1074c1073,1074
<    UInt32 s_4;
<    bz_stream *s_0;
---
>    UInt32 s_4
>     s_0;
1073,1074c1073,1074
<    UInt32 s_4;
<    bz_stream *s_0;
---
>    UInt32 s_4
>    bz_stream *;
1073,1074c1073,1074
<    UInt32 s_4;
<    bz_stream *s_0;
---
>    UInt32 s_4
>     *;
1073,1074c1073,1074
<    UInt32 s_4;
<    bz_stream *s_0;
---
>    UInt32 s_4
>    bz_stream ;
1073,1074c1073,1074
<    UInt32 s_4;
<    bz_stream *s_0;
---
>    UInt32 s_4
>     ;
1074c1074
<    bz_stream *s_0;
---
>     *s_0;
1074c1074
<    bz_stream *s_0;
---
>     s_0;
1074c1074
<    bz_stream *s_0;
---
>     *;
1074c1074
<    bz_stream *s_0;
---
>     ;
1074c1074
<    bz_stream *s_0;
---
>     *s_0
1074c1074
<    bz_stream *s_0;
---
>     s_0
1074c1074
<    bz_stream *s_0;
---
>     *
1074c1074
<    bz_stream *s_0;
---
>     
1074c1074
<    bz_stream *s_0;
---
>    bz_stream s_0;
1074c1074
<    bz_stream *s_0;
---
>    bz_stream ;
1074c1074
<    bz_stream *s_0;
---
>    bz_stream s_0
1074c1074
<    bz_stream *s_0;
---
>    bz_stream 
1074c1074
<    bz_stream *s_0;
---
>    bz_stream s_0;
1076c1076
<    if (!0) return BZ_CONFIG_ERROR;
---
>     (!0) return BZ_CONFIG_ERROR;
1074c1074
<    bz_stream *s_0;
---
>    bz_stream ;
1076c1076
<    if (!0) return BZ_CONFIG_ERROR;
---
>     (!0) return BZ_CONFIG_ERROR;
1074c1074
<    bz_stream *s_0;
---
>    bz_stream s_0
1076c1076
<    if (!0) return BZ_CONFIG_ERROR;
---
>     (!0) return BZ_CONFIG_ERROR;
1074c1074
<    bz_stream *s_0;
---
>    bz_stream 
1076c1076
<    if (!0) return BZ_CONFIG_ERROR;
---
>     (!0) return BZ_CONFIG_ERROR;
1074c1074
<    bz_stream *s_0;
---
>    bz_stream *;
1074c1074
<    bz_stream *s_0;
---
>    bz_stream *
1074c1074
<    bz_stream *s_0;
---
>    bz_stream *;
1076c1076
<    if (!0) return BZ_CONFIG_ERROR;
---
>     (!0) return BZ_CONFIG_ERROR;
1074c1074
<    bz_stream *s_0;
---
>    bz_stream *
1076c1076
<    if (!0) return BZ_CONFIG_ERROR;
---
>     (!0) return BZ_CONFIG_ERROR;
1074c1074
<    bz_stream *s_0;
---
>    bz_stream *;
1076c1076
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if !0) return BZ_CONFIG_ERROR;
1074c1074
<    bz_stream *s_0;
---
>    bz_stream *
1076c1076
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if !0) return BZ_CONFIG_ERROR;
1074c1074
<    bz_stream *s_0;
---
>    bz_stream *;
1076c1076
<    if (!0) return BZ_CONFIG_ERROR;
---
>     !0) return BZ_CONFIG_ERROR;
1074c1074
<    bz_stream *s_0;
---
>    bz_stream *
1076c1076
<    if (!0) return BZ_CONFIG_ERROR;
---
>     !0) return BZ_CONFIG_ERROR;
1074c1074
<    bz_stream *s_0;
---
>    bz_stream *s_0
1074c1074
<    bz_stream *s_0;
---
>    bz_stream *s_0
1076c1076
<    if (!0) return BZ_CONFIG_ERROR;
---
>     (!0) return BZ_CONFIG_ERROR;
1074c1074
<    bz_stream *s_0;
---
>    bz_stream *s_0
1076c1076
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if !0) return BZ_CONFIG_ERROR;
1074c1074
<    bz_stream *s_0;
---
>    bz_stream *s_0
1076c1076
<    if (!0) return BZ_CONFIG_ERROR;
---
>     !0) return BZ_CONFIG_ERROR;
1074c1074
<    bz_stream *s_0;
---
>    bz_stream *s_0
1076c1076
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if (0) return BZ_CONFIG_ERROR;
1074c1074
<    bz_stream *s_0;
---
>    bz_stream *s_0
1076c1076
<    if (!0) return BZ_CONFIG_ERROR;
---
>     (0) return BZ_CONFIG_ERROR;
1074c1074
<    bz_stream *s_0;
---
>    bz_stream *s_0
1076c1076
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if 0) return BZ_CONFIG_ERROR;
1074c1074
<    bz_stream *s_0;
---
>    bz_stream *s_0
1076c1076
<    if (!0) return BZ_CONFIG_ERROR;
---
>     0) return BZ_CONFIG_ERROR;
1076c1076
<    if (!0) return BZ_CONFIG_ERROR;
---
>     (!0) return BZ_CONFIG_ERROR;
1076c1076
<    if (!0) return BZ_CONFIG_ERROR;
---
>     !0) return BZ_CONFIG_ERROR;
1076c1076
<    if (!0) return BZ_CONFIG_ERROR;
---
>     (0) return BZ_CONFIG_ERROR;
1076c1076
<    if (!0) return BZ_CONFIG_ERROR;
---
>     0) return BZ_CONFIG_ERROR;
1076c1076
<    if (!0) return BZ_CONFIG_ERROR;
---
>     (!) return BZ_CONFIG_ERROR;
1076c1076
<    if (!0) return BZ_CONFIG_ERROR;
---
>     !) return BZ_CONFIG_ERROR;
1076c1076
<    if (!0) return BZ_CONFIG_ERROR;
---
>     () return BZ_CONFIG_ERROR;
1076c1076
<    if (!0) return BZ_CONFIG_ERROR;
---
>     ) return BZ_CONFIG_ERROR;
1076c1076
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if !0) return BZ_CONFIG_ERROR;
1076c1076
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if 0) return BZ_CONFIG_ERROR;
1076c1076
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if !) return BZ_CONFIG_ERROR;
1076c1076
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if ) return BZ_CONFIG_ERROR;
1076c1076
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if !0 return BZ_CONFIG_ERROR;
1076c1076
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if 0 return BZ_CONFIG_ERROR;
1076c1076
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if ! return BZ_CONFIG_ERROR;
1076c1076
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if  return BZ_CONFIG_ERROR;
1076c1076
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if (0) return BZ_CONFIG_ERROR;
1076c1076
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if () return BZ_CONFIG_ERROR;
1076c1076
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if (0 return BZ_CONFIG_ERROR;
1076c1076
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if ( return BZ_CONFIG_ERROR;
1076c1076
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if (0)  BZ_CONFIG_ERROR;
(87.9 %, 24753 bytes)
1076c1076
<    if (0) return BZ_CONFIG_ERROR;
---
>    if () return BZ_CONFIG_ERROR;
1076c1076
<    if (0) return BZ_CONFIG_ERROR;
---
>    if ( return BZ_CONFIG_ERROR;
1076c1076
<    if (0) return BZ_CONFIG_ERROR;
---
>    if ()  BZ_CONFIG_ERROR;
1076c1076
<    if (0) return BZ_CONFIG_ERROR;
---
>    if (  BZ_CONFIG_ERROR;
1076c1076
<    if (0) return BZ_CONFIG_ERROR;
---
>    if () return ;
1076c1076
<    if (0) return BZ_CONFIG_ERROR;
---
>    if ( return ;
1076c1076
<    if (0) return BZ_CONFIG_ERROR;
---
>    if ()  ;
1076c1076
<    if (0) return BZ_CONFIG_ERROR;
---
>    if (  ;
1076c1076
<    if (0) return BZ_CONFIG_ERROR;
---
>    if (0 return BZ_CONFIG_ERROR;
1076c1076
<    if (0) return BZ_CONFIG_ERROR;
---
>    if (0  BZ_CONFIG_ERROR;
1076c1076
<    if (0) return BZ_CONFIG_ERROR;
---
>    if (0 return ;
1076c1076
<    if (0) return BZ_CONFIG_ERROR;
---
>    if (0  ;
1076c1076
<    if (0) return BZ_CONFIG_ERROR;
---
>    if (0 return BZ_CONFIG_ERROR
1076c1076
<    if (0) return BZ_CONFIG_ERROR;
---
>    if (0  BZ_CONFIG_ERROR
1076c1076
<    if (0) return BZ_CONFIG_ERROR;
---
>    if (0 return 
1076c1076
<    if (0) return BZ_CONFIG_ERROR;
---
>    if (0  
1076c1076
<    if (0) return BZ_CONFIG_ERROR;
---
>    if (0)  BZ_CONFIG_ERROR;
1076c1076
<    if (0) return BZ_CONFIG_ERROR;
---
>    if (0)  ;
(87.9 %, 24747 bytes)
1076c1076
<    if (0)  BZ_CONFIG_ERROR;
---
>    if (0)  ;
1076c1076
<    if (0)  BZ_CONFIG_ERROR;
---
>    if (0)  
(87.9 %, 24732 bytes)
1076c1076
<    if (0)  ;
---
>    if (0)  
1076c1076
<    if (0)  ;
---
>    if (0)  
1078c1078
<    if (strm == NULL || 
---
>     (strm == NULL || 
1076c1076
<    if (0)  ;
---
>    if (0)  
1078c1078
<    if (strm == NULL || 
---
>    if strm == NULL || 
1076c1076
<    if (0)  ;
---
>    if (0)  
1078c1078
<    if (strm == NULL || 
---
>     strm == NULL || 
1076c1076
<    if (0)  ;
---
>    if (0)  
1078c1078
<    if (strm == NULL || 
---
>    if ( == NULL || 
1076c1076
<    if (0)  ;
---
>    if (0)  
1078c1078
<    if (strm == NULL || 
---
>     ( == NULL || 
1076c1076
<    if (0)  ;
---
>    if (0)  
1078c1078
<    if (strm == NULL || 
---
>    if  == NULL || 
1076c1076
<    if (0)  ;
---
>    if (0)  
1078c1078
<    if (strm == NULL || 
---
>      == NULL || 
1078c1078
<    if (strm == NULL || 
---
>     (strm == NULL || 
1078c1078
<    if (strm == NULL || 
---
>     strm == NULL || 
1078c1078
<    if (strm == NULL || 
---
>     ( == NULL || 
1078c1078
<    if (strm == NULL || 
---
>      == NULL || 
1078c1078
<    if (strm == NULL || 
---
>     (strm  NULL || 
1078c1078
<    if (strm == NULL || 
---
>     strm  NULL || 
1078c1078
<    if (strm == NULL || 
---
>     (  NULL || 
1078c1078
<    if (strm == NULL || 
---
>       NULL || 
(87.9 %, 24731 bytes)
1078c1078
<    if (strm == NULL || 
---
>     (strm == NULL || 
1078c1078
<    if (strm == NULL || 
---
>     strm == NULL || 
1078c1078
<    if (strm == NULL || 
---
>     ( == NULL || 
1078c1078
<    if (strm == NULL || 
---
>      == NULL || 
1078c1078
<    if (strm == NULL || 
---
>     (strm  NULL || 
1078c1078
<    if (strm == NULL || 
---
>     strm  NULL || 
1078c1078
<    if (strm == NULL || 
---
>     (  NULL || 
1078c1078
<    if (strm == NULL || 
---
>       NULL || 
1078c1078
<    if (strm == NULL || 
---
>    if strm == NULL || 
1078c1078
<    if (strm == NULL || 
---
>    if  == NULL || 
1078c1078
<    if (strm == NULL || 
---
>    if strm  NULL || 
1078c1078
<    if (strm == NULL || 
---
>    if   NULL || 
1078c1078
<    if (strm == NULL || 
---
>    if strm ==  || 
1078c1078
<    if (strm == NULL || 
---
>    if  ==  || 
1078c1078
<    if (strm == NULL || 
---
>    if strm   || 
1078c1078
<    if (strm == NULL || 
---
>    if    || 
1078c1078
<    if (strm == NULL || 
---
>    if ( == NULL || 
1078c1078
<    if (strm == NULL || 
---
>    if (  NULL || 
1078c1078
<    if (strm == NULL || 
---
>    if ( ==  || 
1078c1078
<    if (strm == NULL || 
---
>    if (   || 
1078c1078
<    if (strm == NULL || 
---
>    if ( == NULL  
1078c1078
<    if (strm == NULL || 
---
>    if (  NULL  
1078c1078
<    if (strm == NULL || 
---
>    if ( ==   
1078c1078
<    if (strm == NULL || 
---
>    if (    
(87.9 %, 24725 bytes)
1078c1078
<    if (  NULL || 
---
>    if (    
1078,1079c1078,1079
<    if (  NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (   || 
>         < 1 || blockSize100k > 9 ||
1078,1079c1078,1079
<    if (  NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (    
>         < 1 || blockSize100k > 9 ||
1078,1079c1078,1079
<    if (  NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (   || 
>        blockSize100k  1 || blockSize100k > 9 ||
1078,1079c1078,1079
<    if (  NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (    
>        blockSize100k  1 || blockSize100k > 9 ||
1078,1079c1078,1079
<    if (  NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (   || 
>          1 || blockSize100k > 9 ||
1078,1079c1078,1079
<    if (  NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (    
>          1 || blockSize100k > 9 ||
(87.9 %, 24719 bytes)
1079c1079
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>          1 || blockSize100k > 9 ||
1079c1079
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>         <  || blockSize100k > 9 ||
1079c1079
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>           || blockSize100k > 9 ||
1079c1079
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>         < 1  blockSize100k > 9 ||
1079c1079
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>          1  blockSize100k > 9 ||
1079c1079
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>         <   blockSize100k > 9 ||
1079c1079
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>            blockSize100k > 9 ||
(87.9 %, 24705 bytes)
1079c1079
<          1 || blockSize100k > 9 ||
---
>            blockSize100k > 9 ||
1079c1079
<          1 || blockSize100k > 9 ||
---
>           ||  > 9 ||
1079c1079
<          1 || blockSize100k > 9 ||
---
>             > 9 ||
1079c1079
<          1 || blockSize100k > 9 ||
---
>           || blockSize100k  9 ||
1079c1079
<          1 || blockSize100k > 9 ||
---
>            blockSize100k  9 ||
1079c1079
<          1 || blockSize100k > 9 ||
---
>           ||   9 ||
1079c1079
<          1 || blockSize100k > 9 ||
---
>              9 ||
(87.9 %, 24702 bytes)
1079c1079
<            blockSize100k > 9 ||
---
>              9 ||
1079c1079
<            blockSize100k > 9 ||
---
>             >  ||
1079c1079
<            blockSize100k > 9 ||
---
>               ||
1079c1079
<            blockSize100k > 9 ||
---
>             > 9 
1079c1079
<            blockSize100k > 9 ||
---
>              9 
1079c1079
<            blockSize100k > 9 ||
---
>             >  
1079c1079
<            blockSize100k > 9 ||
---
>               
(88.0 %, 24688 bytes)
1079c1079
<              9 ||
---
>               
1079,1080c1079,1080
<              9 ||
<        workFactor < 0 || workFactor > 0)
---
>               ||
>         < 0 || workFactor > 0)
1079,1080c1079,1080
<              9 ||
<        workFactor < 0 || workFactor > 0)
---
>               
>         < 0 || workFactor > 0)
1079,1080c1079,1080
<              9 ||
<        workFactor < 0 || workFactor > 0)
---
>               ||
>        workFactor  0 || workFactor > 0)
1079,1080c1079,1080
<              9 ||
<        workFactor < 0 || workFactor > 0)
---
>               
>        workFactor  0 || workFactor > 0)
1079,1080c1079,1080
<              9 ||
<        workFactor < 0 || workFactor > 0)
---
>               ||
>          0 || workFactor > 0)
1079,1080c1079,1080
<              9 ||
<        workFactor < 0 || workFactor > 0)
---
>               
>          0 || workFactor > 0)
(88.0 %, 24685 bytes)
1080c1080
<        workFactor < 0 || workFactor > 0)
---
>          0 || workFactor > 0)
1080c1080
<        workFactor < 0 || workFactor > 0)
---
>         <  || workFactor > 0)
1080c1080
<        workFactor < 0 || workFactor > 0)
---
>           || workFactor > 0)
1080c1080
<        workFactor < 0 || workFactor > 0)
---
>         < 0  workFactor > 0)
1080c1080
<        workFactor < 0 || workFactor > 0)
---
>          0  workFactor > 0)
1080c1080
<        workFactor < 0 || workFactor > 0)
---
>         <   workFactor > 0)
1080c1080
<        workFactor < 0 || workFactor > 0)
---
>            workFactor > 0)
(88.0 %, 24674 bytes)
1080c1080
<          0 || workFactor > 0)
---
>            workFactor > 0)
1080c1080
<          0 || workFactor > 0)
---
>           ||  > 0)
1080c1080
<          0 || workFactor > 0)
---
>             > 0)
1080c1080
<          0 || workFactor > 0)
---
>           || workFactor  0)
1080c1080
<          0 || workFactor > 0)
---
>            workFactor  0)
1080c1080
<          0 || workFactor > 0)
---
>           ||   0)
1080c1080
<          0 || workFactor > 0)
---
>              0)
(88.0 %, 24671 bytes)
1080c1080
<            workFactor > 0)
---
>              0)
1080c1080
<            workFactor > 0)
---
>             > )
1080c1080
<            workFactor > 0)
---
>              )
1080c1080
<            workFactor > 0)
---
>             > 0
1080c1080
<            workFactor > 0)
---
>              0
1080c1080
<            workFactor > 0)
---
>             > 
1080c1080
<            workFactor > 0)
---
>              
1080c1080
<            workFactor > 0)
---
>            workFactor  0)
1080c1080
<            workFactor > 0)
---
>            workFactor  )
(88.0 %, 24660 bytes)
1080c1080
<              0)
---
>              
1080,1081c1080,1081
<              0)
<      return BZ_PARAM_ERROR;
---
>              )
>       BZ_PARAM_ERROR;
1080,1081c1080,1081
<              0)
<      return BZ_PARAM_ERROR;
---
>              
>       BZ_PARAM_ERROR;
1080,1081c1080,1081
<              0)
<      return BZ_PARAM_ERROR;
---
>              )
>      return ;
1080,1081c1080,1081
<              0)
<      return BZ_PARAM_ERROR;
---
>              
>      return ;
1080,1081c1080,1081
<              0)
<      return BZ_PARAM_ERROR;
---
>              )
>       ;
1080,1081c1080,1081
<              0)
<      return BZ_PARAM_ERROR;
---
>              
>       ;
1080c1080
<              0)
---
>              0
1080,1081c1080,1081
<              0)
<      return BZ_PARAM_ERROR;
---
>              0
>       BZ_PARAM_ERROR;
1080,1081c1080,1081
<              0)
<      return BZ_PARAM_ERROR;
---
>              0
>      return ;
1080,1081c1080,1081
<              0)
<      return BZ_PARAM_ERROR;
---
>              0
>       ;
1080,1081c1080,1081
<              0)
<      return BZ_PARAM_ERROR;
---
>              0
>      return BZ_PARAM_ERROR
1080,1081c1080,1081
<              0)
<      return BZ_PARAM_ERROR;
---
>              0
>       BZ_PARAM_ERROR
1080,1081c1080,1081
<              0)
<      return BZ_PARAM_ERROR;
---
>              0
>      return 
1080,1081c1080,1081
<              0)
<      return BZ_PARAM_ERROR;
---
>              0
>       
1081c1081
<      return BZ_PARAM_ERROR;
---
>       BZ_PARAM_ERROR;
1081c1081
<      return BZ_PARAM_ERROR;
---
>       ;
1081c1081
<      return BZ_PARAM_ERROR;
---
>       BZ_PARAM_ERROR
(88.0 %, 24654 bytes)
1081c1081
<       BZ_PARAM_ERROR;
---
>       ;
1081c1081
<       BZ_PARAM_ERROR;
---
>       
1081c1081
<       BZ_PARAM_ERROR;
---
>       ;
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>     (workFactor == 0) workFactor = 0;
(88.0 %, 24640 bytes)
1081c1081
<       ;
---
>       
1081c1081
<       ;
---
>       
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>     (workFactor == 0) workFactor = 0;
1081c1081
<       ;
---
>       
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>    if workFactor == 0) workFactor = 0;
1081c1081
<       ;
---
>       
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>     workFactor == 0) workFactor = 0;
1081c1081
<       ;
---
>       
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>    if ( == 0) workFactor = 0;
1081c1081
<       ;
---
>       
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>     ( == 0) workFactor = 0;
1081c1081
<       ;
---
>       
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>    if  == 0) workFactor = 0;
1081c1081
<       ;
---
>       
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>      == 0) workFactor = 0;
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>     (workFactor == 0) workFactor = 0;
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>     workFactor == 0) workFactor = 0;
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>     ( == 0) workFactor = 0;
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>      == 0) workFactor = 0;
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>     (workFactor  0) workFactor = 0;
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>     workFactor  0) workFactor = 0;
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>     (  0) workFactor = 0;
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>       0) workFactor = 0;
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>    if workFactor == 0) workFactor = 0;
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>    if  == 0) workFactor = 0;
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>    if workFactor  0) workFactor = 0;
(88.0 %, 24639 bytes)
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>     (workFactor == 0) workFactor = 0;
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>     workFactor == 0) workFactor = 0;
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>     ( == 0) workFactor = 0;
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>      == 0) workFactor = 0;
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>     (workFactor  0) workFactor = 0;
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>     workFactor  0) workFactor = 0;
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>     (  0) workFactor = 0;
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>       0) workFactor = 0;
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>    if workFactor == 0) workFactor = 0;
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>    if  == 0) workFactor = 0;
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>    if workFactor  0) workFactor = 0;
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>    if   0) workFactor = 0;
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>    if workFactor == ) workFactor = 0;
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>    if  == ) workFactor = 0;
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>    if workFactor  ) workFactor = 0;
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>    if   ) workFactor = 0;
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>    if ( == 0) workFactor = 0;
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>    if (  0) workFactor = 0;
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>    if ( == ) workFactor = 0;
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>    if (  ) workFactor = 0;
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>    if ( == 0 workFactor = 0;
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>    if (  0 workFactor = 0;
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>    if ( ==  workFactor = 0;
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>    if (   workFactor = 0;
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>    if (workFactor  0) workFactor = 0;
1083c1083
<    if (workFactor == 0) workFactor = 0;
---
>    if (workFactor  ) workFactor = 0;
(88.0 %, 24627 bytes)
1083c1083
<    if (  0) workFactor = 0;
---
>    if (   workFactor = 0;
1083c1083
<    if (  0) workFactor = 0;
---
>    if (  )  = 0;
1083c1083
<    if (  0) workFactor = 0;
---
>    if (    = 0;
1083c1083
<    if (  0) workFactor = 0;
---
>    if (  ) workFactor  0;
1083c1083
<    if (  0) workFactor = 0;
---
>    if (   workFactor  0;
1083c1083
<    if (  0) workFactor = 0;
---
>    if (  )   0;
1083c1083
<    if (  0) workFactor = 0;
---
>    if (     0;
1083c1083
<    if (  0) workFactor = 0;
---
>    if (  0 workFactor = 0;
1083c1083
<    if (  0) workFactor = 0;
---
>    if (  0  = 0;
1083c1083
<    if (  0) workFactor = 0;
---
>    if (  0 workFactor  0;
1083c1083
<    if (  0) workFactor = 0;
---
>    if (  0   0;
1083c1083
<    if (  0) workFactor = 0;
---
>    if (  0 workFactor = ;
1083c1083
<    if (  0) workFactor = 0;
---
>    if (  0  = ;
1083c1083
<    if (  0) workFactor = 0;
---
>    if (  0 workFactor  ;
1083c1083
<    if (  0) workFactor = 0;
---
>    if (  0   ;
1083c1083
<    if (  0) workFactor = 0;
---
>    if (  0)  = 0;
1083c1083
<    if (  0) workFactor = 0;
---
>    if (  0)   0;
1083c1083
<    if (  0) workFactor = 0;
---
>    if (  0)  = ;
1083c1083
<    if (  0) workFactor = 0;
---
>    if (  0)   ;
1083c1083
<    if (  0) workFactor = 0;
---
>    if (  0)  = 0
(88.0 %, 24616 bytes)
1083c1083
<    if (  0)   0;
---
>    if (  0)   
1083,1084c1083,1084
<    if (  0)   0;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (  0)   ;
>     (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1083,1084c1083,1084
<    if (  0)   0;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (  0)   
>     (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1083,1084c1083,1084
<    if (  0)   0;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (  0)   ;
>    if strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1083,1084c1083,1084
<    if (  0)   0;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (  0)   
>    if strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1083,1084c1083,1084
<    if (  0)   0;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (  0)   ;
>     strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1083,1084c1083,1084
<    if (  0)   0;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (  0)   
>     strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1083c1083
<    if (  0)   0;
---
>    if (  0)   0
1083,1084c1083,1084
<    if (  0)   0;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (  0)   0
>     (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1083,1084c1083,1084
<    if (  0)   0;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (  0)   0
>    if strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1083,1084c1083,1084
<    if (  0)   0;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (  0)   0
>     strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1083,1084c1083,1084
<    if (  0)   0;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (  0)   0
>    if (->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1083,1084c1083,1084
<    if (  0)   0;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (  0)   0
>     (->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1083,1084c1083,1084
<    if (  0)   0;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (  0)   0
>    if ->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1083,1084c1083,1084
<    if (  0)   0;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (  0)   0
>     ->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1084c1084
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>     (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1084c1084
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>     strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1084c1084
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>     (->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1084c1084
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>     ->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1084c1084
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>     (strmbzalloc == NULL) strm->bzalloc = default_bzalloc;
1084c1084
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>     strmbzalloc == NULL) strm->bzalloc = default_bzalloc;
1084c1084
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>     (bzalloc == NULL) strm->bzalloc = default_bzalloc;
(88.0 %, 24614 bytes)
1084c1084
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>     strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1084c1084
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>     (->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1084c1084
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>     ->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1084c1084
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>     (strmbzalloc == NULL) strm->bzalloc = default_bzalloc;
1084c1084
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>     strmbzalloc == NULL) strm->bzalloc = default_bzalloc;
1084c1084
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>     (bzalloc == NULL) strm->bzalloc = default_bzalloc;
1084c1084
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>     bzalloc == NULL) strm->bzalloc = default_bzalloc;
1084c1084
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1084c1084
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if ->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1084c1084
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if strmbzalloc == NULL) strm->bzalloc = default_bzalloc;
1084c1084
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if bzalloc == NULL) strm->bzalloc = default_bzalloc;
1084c1084
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if strm-> == NULL) strm->bzalloc = default_bzalloc;
1084c1084
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if -> == NULL) strm->bzalloc = default_bzalloc;
1084c1084
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if strm == NULL) strm->bzalloc = default_bzalloc;
1084c1084
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if  == NULL) strm->bzalloc = default_bzalloc;
1084c1084
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (->bzalloc == NULL) strm->bzalloc = default_bzalloc;
1084c1084
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc == NULL) strm->bzalloc = default_bzalloc;
1084c1084
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (-> == NULL) strm->bzalloc = default_bzalloc;
1084c1084
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if ( == NULL) strm->bzalloc = default_bzalloc;
1084c1084
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (->bzalloc  NULL) strm->bzalloc = default_bzalloc;
1084c1084
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
1084c1084
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (->  NULL) strm->bzalloc = default_bzalloc;
1084c1084
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (  NULL) strm->bzalloc = default_bzalloc;
(88.0 %, 24606 bytes)
1084c1084
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (  ) ->bzalloc = default_bzalloc;
1084c1084
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (  NULL ->bzalloc = default_bzalloc;
1084c1084
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (   ->bzalloc = default_bzalloc;
1084c1084
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  ) strm->bzalloc = default_bzalloc;
1084c1084
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc   strm->bzalloc = default_bzalloc;
1084c1084
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  ) ->bzalloc = default_bzalloc;
1084c1084
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc   ->bzalloc = default_bzalloc;
1084c1084
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  ) strmbzalloc = default_bzalloc;
1084c1084
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc   strmbzalloc = default_bzalloc;
1084c1084
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  ) bzalloc = default_bzalloc;
1084c1084
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc   bzalloc = default_bzalloc;
1084c1084
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL strm->bzalloc = default_bzalloc;
1084c1084
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL ->bzalloc = default_bzalloc;
1084c1084
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL strmbzalloc = default_bzalloc;
1084c1084
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL bzalloc = default_bzalloc;
1084c1084
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL strm-> = default_bzalloc;
1084c1084
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL -> = default_bzalloc;
1084c1084
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL strm = default_bzalloc;
1084c1084
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL  = default_bzalloc;
1084c1084
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL) ->bzalloc = default_bzalloc;
1084c1084
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL) bzalloc = default_bzalloc;
1084c1084
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL) -> = default_bzalloc;
1084c1084
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL)  = default_bzalloc;
1084c1084
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL) ->bzalloc  default_bzalloc;
1084c1084
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL) bzalloc  default_bzalloc;
1084c1084
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL) ->  default_bzalloc;
1084c1084
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL)   default_bzalloc;
1084c1084
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL) strmbzalloc = default_bzalloc;
1084c1084
<    if (bzalloc  NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc  NULL) strm = default_bzalloc;
(88.0 %, 24592 bytes)
1084,1085c1084,1085
<    if (bzalloc  NULL)   default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (bzalloc  NULL)   
>     strm->bzfree == NULL) strm->bzfree = default_bzfree;
1084c1084
<    if (bzalloc  NULL)   default_bzalloc;
---
>    if (bzalloc  NULL)   default_bzalloc
1084,1085c1084,1085
<    if (bzalloc  NULL)   default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (bzalloc  NULL)   default_bzalloc
>     (strm->bzfree == NULL) strm->bzfree = default_bzfree;
1084,1085c1084,1085
<    if (bzalloc  NULL)   default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (bzalloc  NULL)   default_bzalloc
>    if strm->bzfree == NULL) strm->bzfree = default_bzfree;
1084,1085c1084,1085
<    if (bzalloc  NULL)   default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (bzalloc  NULL)   default_bzalloc
>     strm->bzfree == NULL) strm->bzfree = default_bzfree;
1084,1085c1084,1085
<    if (bzalloc  NULL)   default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (bzalloc  NULL)   default_bzalloc
>    if (->bzfree == NULL) strm->bzfree = default_bzfree;
1084,1085c1084,1085
<    if (bzalloc  NULL)   default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (bzalloc  NULL)   default_bzalloc
>     (->bzfree == NULL) strm->bzfree = default_bzfree;
1084,1085c1084,1085
<    if (bzalloc  NULL)   default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (bzalloc  NULL)   default_bzalloc
>    if ->bzfree == NULL) strm->bzfree = default_bzfree;
1084,1085c1084,1085
<    if (bzalloc  NULL)   default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (bzalloc  NULL)   default_bzalloc
>     ->bzfree == NULL) strm->bzfree = default_bzfree;
1085c1085
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>     (strm->bzfree == NULL) strm->bzfree = default_bzfree;
1085c1085
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>     strm->bzfree == NULL) strm->bzfree = default_bzfree;
1085c1085
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>     (->bzfree == NULL) strm->bzfree = default_bzfree;
1085c1085
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>     ->bzfree == NULL) strm->bzfree = default_bzfree;
1085c1085
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>     (strmbzfree == NULL) strm->bzfree = default_bzfree;
1085c1085
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>     strmbzfree == NULL) strm->bzfree = default_bzfree;
1085c1085
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>     (bzfree == NULL) strm->bzfree = default_bzfree;
1085c1085
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>     bzfree == NULL) strm->bzfree = default_bzfree;
1085c1085
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if strm->bzfree == NULL) strm->bzfree = default_bzfree;
1085c1085
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if ->bzfree == NULL) strm->bzfree = default_bzfree;
1085c1085
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if strmbzfree == NULL) strm->bzfree = default_bzfree;
1085c1085
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if bzfree == NULL) strm->bzfree = default_bzfree;
1085c1085
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if strm-> == NULL) strm->bzfree = default_bzfree;
1085c1085
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if -> == NULL) strm->bzfree = default_bzfree;
1085c1085
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if strm == NULL) strm->bzfree = default_bzfree;
1085c1085
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if  == NULL) strm->bzfree = default_bzfree;
1085c1085
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (->bzfree == NULL) strm->bzfree = default_bzfree;
1085c1085
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree == NULL) strm->bzfree = default_bzfree;
1085c1085
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (-> == NULL) strm->bzfree = default_bzfree;
1085c1085
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if ( == NULL) strm->bzfree = default_bzfree;
1085c1085
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (->bzfree  NULL) strm->bzfree = default_bzfree;
1085c1085
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL) strm->bzfree = default_bzfree;
1085c1085
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (->  NULL) strm->bzfree = default_bzfree;
1085c1085
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (  NULL) strm->bzfree = default_bzfree;
(88.0 %, 24584 bytes)
1085c1085
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (  ) ->bzfree = default_bzfree;
1085c1085
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (  NULL ->bzfree = default_bzfree;
1085c1085
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (   ->bzfree = default_bzfree;
1085c1085
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  ) strm->bzfree = default_bzfree;
1085c1085
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree   strm->bzfree = default_bzfree;
1085c1085
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  ) ->bzfree = default_bzfree;
1085c1085
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree   ->bzfree = default_bzfree;
1085c1085
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  ) strmbzfree = default_bzfree;
1085c1085
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree   strmbzfree = default_bzfree;
1085c1085
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  ) bzfree = default_bzfree;
1085c1085
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree   bzfree = default_bzfree;
1085c1085
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL strm->bzfree = default_bzfree;
1085c1085
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL ->bzfree = default_bzfree;
1085c1085
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL strmbzfree = default_bzfree;
1085c1085
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL bzfree = default_bzfree;
1085c1085
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL strm-> = default_bzfree;
1085c1085
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL -> = default_bzfree;
1085c1085
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL strm = default_bzfree;
1085c1085
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL  = default_bzfree;
1085c1085
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL) ->bzfree = default_bzfree;
1085c1085
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL) bzfree = default_bzfree;
1085c1085
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL) -> = default_bzfree;
1085c1085
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL)  = default_bzfree;
1085c1085
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL) ->bzfree  default_bzfree;
1085c1085
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL) bzfree  default_bzfree;
1085c1085
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL) ->  default_bzfree;
1085c1085
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL)   default_bzfree;
1085c1085
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL) strmbzfree = default_bzfree;
1085c1085
<    if (bzfree  NULL) strm->bzfree = default_bzfree;
---
>    if (bzfree  NULL) strm = default_bzfree;
(88.0 %, 24571 bytes)
1085c1085
<    if (bzfree  NULL)   default_bzfree;
---
>    if (bzfree  NULL)   
1087c1087
<    s = BZALLOC( sizeof(EState) );
---
>      BZALLOC( sizeof(EState) );
1085c1085
<    if (bzfree  NULL)   default_bzfree;
---
>    if (bzfree  NULL)   default_bzfree
1085c1085
<    if (bzfree  NULL)   default_bzfree;
---
>    if (bzfree  NULL)   default_bzfree
1087c1087
<    s = BZALLOC( sizeof(EState) );
---
>     = BZALLOC( sizeof(EState) );
1085c1085
<    if (bzfree  NULL)   default_bzfree;
---
>    if (bzfree  NULL)   default_bzfree
1087c1087
<    s = BZALLOC( sizeof(EState) );
---
>    s  BZALLOC( sizeof(EState) );
1085c1085
<    if (bzfree  NULL)   default_bzfree;
---
>    if (bzfree  NULL)   default_bzfree
1087c1087
<    s = BZALLOC( sizeof(EState) );
---
>      BZALLOC( sizeof(EState) );
1085c1085
<    if (bzfree  NULL)   default_bzfree;
---
>    if (bzfree  NULL)   default_bzfree
1087c1087
<    s = BZALLOC( sizeof(EState) );
---
>    s = ( sizeof(EState) );
1085c1085
<    if (bzfree  NULL)   default_bzfree;
---
>    if (bzfree  NULL)   default_bzfree
1087c1087
<    s = BZALLOC( sizeof(EState) );
---
>     = ( sizeof(EState) );
1085c1085
<    if (bzfree  NULL)   default_bzfree;
---
>    if (bzfree  NULL)   default_bzfree
1087c1087
<    s = BZALLOC( sizeof(EState) );
---
>    s  ( sizeof(EState) );
1085c1085
<    if (bzfree  NULL)   default_bzfree;
---
>    if (bzfree  NULL)   default_bzfree
1087c1087
<    s = BZALLOC( sizeof(EState) );
---
>      ( sizeof(EState) );
(88.0 %, 24554 bytes)
1087c1087
<      BZALLOC( sizeof(EState) );
---
>       EState) );
1087c1087
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC sizeof(EState) );
1087c1087
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC (EState) );
1087c1087
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC sizeofEState) );
1087c1087
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC EState) );
1087c1087
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC sizeof() );
1087c1087
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC () );
1087c1087
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC sizeof) );
1087c1087
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC ) );
1087c1087
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( (EState) );
1087c1087
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( EState) );
1087c1087
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( () );
1087c1087
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( ) );
1087c1087
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( (EState );
1087c1087
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( EState );
1087c1087
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( ( );
1087c1087
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC(  );
1087c1087
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( sizeofEState) );
1087c1087
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( sizeof) );
1087c1087
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( sizeofEState );
1087c1087
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( sizeof );
1087c1087
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( sizeofEState) ;
1087c1087
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( sizeof) ;
1087c1087
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( sizeofEState ;
1087c1087
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( sizeof ;
1087c1087
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( sizeof() );
1087c1087
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( sizeof( );
1087c1087
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( sizeof() ;
1087c1087
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( sizeof( ;
1087c1087
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( sizeof() )
1087c1087
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( sizeof( )
1087c1087
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( sizeof() 
1087c1087
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( sizeof( 
1087c1087
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( sizeof(EState );
1087c1087
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( sizeof(EState ;
1087c1087
<      BZALLOC( sizeof(EState) );
---
>      BZALLOC( sizeof(EState )
(88.0 %, 24540 bytes)
1087,1088c1087,1088
<      BZALLOC(  );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>      BZALLOC(  
>     s == NULL) return BZ_MEM_ERROR;
1087c1087
<      BZALLOC(  );
---
>      BZALLOC(  )
1087,1088c1087,1088
<      BZALLOC(  );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>      BZALLOC(  )
>     (s == NULL) return BZ_MEM_ERROR;
1087,1088c1087,1088
<      BZALLOC(  );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>      BZALLOC(  )
>    if s == NULL) return BZ_MEM_ERROR;
1087,1088c1087,1088
<      BZALLOC(  );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>      BZALLOC(  )
>     s == NULL) return BZ_MEM_ERROR;
1087,1088c1087,1088
<      BZALLOC(  );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>      BZALLOC(  )
>    if ( == NULL) return BZ_MEM_ERROR;
1087,1088c1087,1088
<      BZALLOC(  );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>      BZALLOC(  )
>     ( == NULL) return BZ_MEM_ERROR;
1087,1088c1087,1088
<      BZALLOC(  );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>      BZALLOC(  )
>    if  == NULL) return BZ_MEM_ERROR;
1087,1088c1087,1088
<      BZALLOC(  );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>      BZALLOC(  )
>      == NULL) return BZ_MEM_ERROR;
1088c1088
<    if (s == NULL) return BZ_MEM_ERROR;
---
>     (s == NULL) return BZ_MEM_ERROR;
1088c1088
<    if (s == NULL) return BZ_MEM_ERROR;
---
>     s == NULL) return BZ_MEM_ERROR;
1088c1088
<    if (s == NULL) return BZ_MEM_ERROR;
---
>     ( == NULL) return BZ_MEM_ERROR;
1088c1088
<    if (s == NULL) return BZ_MEM_ERROR;
---
>      == NULL) return BZ_MEM_ERROR;
1088c1088
<    if (s == NULL) return BZ_MEM_ERROR;
---
>     (s  NULL) return BZ_MEM_ERROR;
1088c1088
<    if (s == NULL) return BZ_MEM_ERROR;
---
>     s  NULL) return BZ_MEM_ERROR;
1088c1088
<    if (s == NULL) return BZ_MEM_ERROR;
---
>     (  NULL) return BZ_MEM_ERROR;
1088c1088
<    if (s == NULL) return BZ_MEM_ERROR;
---
>       NULL) return BZ_MEM_ERROR;
1088c1088
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if s == NULL) return BZ_MEM_ERROR;
1088c1088
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if  == NULL) return BZ_MEM_ERROR;
1088c1088
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if s  NULL) return BZ_MEM_ERROR;
1088c1088
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if   NULL) return BZ_MEM_ERROR;
1088c1088
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if s == ) return BZ_MEM_ERROR;
1088c1088
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if  == ) return BZ_MEM_ERROR;
1088c1088
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if s  ) return BZ_MEM_ERROR;
1088c1088
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if   ) return BZ_MEM_ERROR;
1088c1088
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if ( == NULL) return BZ_MEM_ERROR;
1088c1088
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if (  NULL) return BZ_MEM_ERROR;
1088c1088
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if ( == ) return BZ_MEM_ERROR;
1088c1088
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if (  ) return BZ_MEM_ERROR;
1088c1088
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if ( == NULL return BZ_MEM_ERROR;
1088c1088
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if (  NULL return BZ_MEM_ERROR;
1088c1088
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if ( ==  return BZ_MEM_ERROR;
1088c1088
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if (   return BZ_MEM_ERROR;
1088c1088
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if (s  NULL) return BZ_MEM_ERROR;
1088c1088
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if (s  ) return BZ_MEM_ERROR;
(88.0 %, 24537 bytes)
1088c1088
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (   return BZ_MEM_ERROR;
1088c1088
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (  )  BZ_MEM_ERROR;
1088c1088
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (    BZ_MEM_ERROR;
1088c1088
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (  ) return ;
1088c1088
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (   return ;
1088c1088
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (  )  ;
1088c1088
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (    ;
1088c1088
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (  NULL return BZ_MEM_ERROR;
1088c1088
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (  NULL  BZ_MEM_ERROR;
1088c1088
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (  NULL return ;
1088c1088
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (  NULL  ;
1088c1088
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (  NULL return BZ_MEM_ERROR
1088c1088
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (  NULL  BZ_MEM_ERROR
1088c1088
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (  NULL return 
1088c1088
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (  NULL  
1088c1088
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (  NULL)  BZ_MEM_ERROR;
1088c1088
<    if (  NULL) return BZ_MEM_ERROR;
---
>    if (  NULL)  ;
(88.0 %, 24531 bytes)
1088c1088
<    if (  NULL)  BZ_MEM_ERROR;
---
>    if (  NULL)  ;
1088c1088
<    if (  NULL)  BZ_MEM_ERROR;
---
>    if (  NULL)  
(88.0 %, 24519 bytes)
1088c1088
<    if (  NULL)  ;
---
>    if (  NULL)  
1088,1089c1088,1089
<    if (  NULL)  ;
<    s_0 = strm;
---
>    if (  NULL)  
>     = strm;
1088,1089c1088,1089
<    if (  NULL)  ;
<    s_0 = strm;
---
>    if (  NULL)  
>    s_0  strm;
1088,1089c1088,1089
<    if (  NULL)  ;
<    s_0 = strm;
---
>    if (  NULL)  
>      strm;
(88.0 %, 24518 bytes)
1089c1089
<    s_0 = strm;
---
>     = strm;
1089c1089
<    s_0 = strm;
---
>      strm;
1089c1089
<    s_0 = strm;
---
>     = ;
1089c1089
<    s_0 = strm;
---
>      ;
(88.0 %, 24514 bytes)
1089c1089
<      strm;
---
>      
1089c1089
<      strm;
---
>      ;
1091c1091
<    s->arr1 = NULL;
---
>    ->arr1 = NULL;
1089c1089
<      strm;
---
>      
1091c1091
<    s->arr1 = NULL;
---
>    ->arr1 = NULL;
1089c1089
<      strm;
---
>      ;
1091c1091
<    s->arr1 = NULL;
---
>    sarr1 = NULL;
1089c1089
<      strm;
---
>      
1091c1091
<    s->arr1 = NULL;
---
>    sarr1 = NULL;
1089c1089
<      strm;
---
>      ;
1091c1091
<    s->arr1 = NULL;
---
>    arr1 = NULL;
1089c1089
<      strm;
---
>      
1091c1091
<    s->arr1 = NULL;
---
>    arr1 = NULL;
1089c1089
<      strm;
---
>      strm
1089c1089
<      strm;
---
>      strm
1091c1091
<    s->arr1 = NULL;
---
>    ->arr1 = NULL;
1089c1089
<      strm;
---
>      strm
1091c1091
<    s->arr1 = NULL;
---
>    sarr1 = NULL;
1089c1089
<      strm;
---
>      strm
1091c1091
<    s->arr1 = NULL;
---
>    arr1 = NULL;
1089c1089
<      strm;
---
>      strm
1091c1091
<    s->arr1 = NULL;
---
>    s-> = NULL;
1089c1089
<      strm;
---
>      strm
1091c1091
<    s->arr1 = NULL;
---
>    -> = NULL;
1089c1089
<      strm;
---
>      strm
1091c1091
<    s->arr1 = NULL;
---
>    s = NULL;
1089c1089
<      strm;
---
>      strm
1091c1091
<    s->arr1 = NULL;
---
>     = NULL;
(88.0 %, 24509 bytes)
1091c1091
<    s->arr1 = NULL;
---
>    arr1 = NULL;
1091c1091
<    s->arr1 = NULL;
---
>    -> = NULL;
1091c1091
<    s->arr1 = NULL;
---
>     = NULL;
1091c1091
<    s->arr1 = NULL;
---
>    ->arr1  NULL;
1091c1091
<    s->arr1 = NULL;
---
>    arr1  NULL;
1091c1091
<    s->arr1 = NULL;
---
>    ->  NULL;
1091c1091
<    s->arr1 = NULL;
---
>      NULL;
1091c1091
<    s->arr1 = NULL;
---
>    sarr1 = NULL;
1091c1091
<    s->arr1 = NULL;
---
>    s = NULL;
(88.0 %, 24505 bytes)
1091,1092c1091,1092
<    arr1  NULL;
<    s->arr2 = NULL;
---
>      ;
>    ->arr2 = NULL;
1091,1092c1091,1092
<    arr1  NULL;
<    s->arr2 = NULL;
---
>      NULL
>    ->arr2 = NULL;
1091,1092c1091,1092
<    arr1  NULL;
<    s->arr2 = NULL;
---
>      
>    ->arr2 = NULL;
1091c1091
<    arr1  NULL;
---
>    arr1  ;
1091c1091
<    arr1  NULL;
---
>    arr1  
1091,1092c1091,1092
<    arr1  NULL;
<    s->arr2 = NULL;
---
>    arr1  ;
>    ->arr2 = NULL;
1091,1092c1091,1092
<    arr1  NULL;
<    s->arr2 = NULL;
---
>    arr1  
>    ->arr2 = NULL;
1091,1092c1091,1092
<    arr1  NULL;
<    s->arr2 = NULL;
---
>    arr1  ;
>    sarr2 = NULL;
1091,1092c1091,1092
<    arr1  NULL;
<    s->arr2 = NULL;
---
>    arr1  
>    sarr2 = NULL;
1091,1092c1091,1092
<    arr1  NULL;
<    s->arr2 = NULL;
---
>    arr1  ;
>    arr2 = NULL;
1091,1092c1091,1092
<    arr1  NULL;
<    s->arr2 = NULL;
---
>    arr1  
>    arr2 = NULL;
1091c1091
<    arr1  NULL;
---
>    arr1  NULL
1091,1092c1091,1092
<    arr1  NULL;
<    s->arr2 = NULL;
---
>    arr1  NULL
>    ->arr2 = NULL;
1091,1092c1091,1092
<    arr1  NULL;
<    s->arr2 = NULL;
---
>    arr1  NULL
>    sarr2 = NULL;
1091,1092c1091,1092
<    arr1  NULL;
<    s->arr2 = NULL;
---
>    arr1  NULL
>    arr2 = NULL;
1091,1092c1091,1092
<    arr1  NULL;
<    s->arr2 = NULL;
---
>    arr1  NULL
>    s-> = NULL;
1091,1092c1091,1092
<    arr1  NULL;
<    s->arr2 = NULL;
---
>    arr1  NULL
>    -> = NULL;
1091,1092c1091,1092
<    arr1  NULL;
<    s->arr2 = NULL;
---
>    arr1  NULL
>    s = NULL;
1091,1092c1091,1092
<    arr1  NULL;
<    s->arr2 = NULL;
---
>    arr1  NULL
>     = NULL;
1092c1092
<    s->arr2 = NULL;
---
>    ->arr2 = NULL;
1092c1092
<    s->arr2 = NULL;
---
>    arr2 = NULL;
1092c1092
<    s->arr2 = NULL;
---
>    -> = NULL;
1092c1092
<    s->arr2 = NULL;
---
>     = NULL;
1092c1092
<    s->arr2 = NULL;
---
>    ->arr2  NULL;
1092c1092
<    s->arr2 = NULL;
---
>    arr2  NULL;
1092c1092
<    s->arr2 = NULL;
---
>    ->  NULL;
1092c1092
<    s->arr2 = NULL;
---
>      NULL;
(88.0 %, 24501 bytes)
1092,1093c1092,1093
<    arr2  NULL;
<    s->ftab = NULL;
---
>      ;
>    ->ftab = NULL;
1092,1093c1092,1093
<    arr2  NULL;
<    s->ftab = NULL;
---
>      NULL
>    ->ftab = NULL;
1092,1093c1092,1093
<    arr2  NULL;
<    s->ftab = NULL;
---
>      
>    ->ftab = NULL;
1092c1092
<    arr2  NULL;
---
>    arr2  ;
1092c1092
<    arr2  NULL;
---
>    arr2  
1092,1093c1092,1093
<    arr2  NULL;
<    s->ftab = NULL;
---
>    arr2  ;
>    ->ftab = NULL;
1092,1093c1092,1093
<    arr2  NULL;
<    s->ftab = NULL;
---
>    arr2  
>    ->ftab = NULL;
1092,1093c1092,1093
<    arr2  NULL;
<    s->ftab = NULL;
---
>    arr2  ;
>    sftab = NULL;
1092,1093c1092,1093
<    arr2  NULL;
<    s->ftab = NULL;
---
>    arr2  
>    sftab = NULL;
1092,1093c1092,1093
<    arr2  NULL;
<    s->ftab = NULL;
---
>    arr2  ;
>    ftab = NULL;
1092,1093c1092,1093
<    arr2  NULL;
<    s->ftab = NULL;
---
>    arr2  
>    ftab = NULL;
1092c1092
<    arr2  NULL;
---
>    arr2  NULL
1092,1093c1092,1093
<    arr2  NULL;
<    s->ftab = NULL;
---
>    arr2  NULL
>    ->ftab = NULL;
1092,1093c1092,1093
<    arr2  NULL;
<    s->ftab = NULL;
---
>    arr2  NULL
>    sftab = NULL;
1092,1093c1092,1093
<    arr2  NULL;
<    s->ftab = NULL;
---
>    arr2  NULL
>    ftab = NULL;
1092,1093c1092,1093
<    arr2  NULL;
<    s->ftab = NULL;
---
>    arr2  NULL
>    s-> = NULL;
1092,1093c1092,1093
<    arr2  NULL;
<    s->ftab = NULL;
---
>    arr2  NULL
>    -> = NULL;
1092,1093c1092,1093
<    arr2  NULL;
<    s->ftab = NULL;
---
>    arr2  NULL
>    s = NULL;
1092,1093c1092,1093
<    arr2  NULL;
<    s->ftab = NULL;
---
>    arr2  NULL
>     = NULL;
1093c1093
<    s->ftab = NULL;
---
>    ->ftab = NULL;
1093c1093
<    s->ftab = NULL;
---
>    ftab = NULL;
1093c1093
<    s->ftab = NULL;
---
>    -> = NULL;
1093c1093
<    s->ftab = NULL;
---
>     = NULL;
1093c1093
<    s->ftab = NULL;
---
>    ->ftab  NULL;
1093c1093
<    s->ftab = NULL;
---
>    ftab  NULL;
1093c1093
<    s->ftab = NULL;
---
>    ->  NULL;
1093c1093
<    s->ftab = NULL;
---
>      NULL;
(88.0 %, 24497 bytes)
1093c1093
<    ftab  NULL;
---
>      ;
1095c1095
<    n       = 0 * blockSize100k;
---
>           = 0 * blockSize100k;
1093c1093
<    ftab  NULL;
---
>      NULL
1095c1095
<    n       = 0 * blockSize100k;
---
>           = 0 * blockSize100k;
1093c1093
<    ftab  NULL;
---
>      
1095c1095
<    n       = 0 * blockSize100k;
---
>           = 0 * blockSize100k;
1093c1093
<    ftab  NULL;
---
>    ftab  ;
1093c1093
<    ftab  NULL;
---
>    ftab  
1093c1093
<    ftab  NULL;
---
>    ftab  ;
1095c1095
<    n       = 0 * blockSize100k;
---
>           = 0 * blockSize100k;
1093c1093
<    ftab  NULL;
---
>    ftab  
1095c1095
<    n       = 0 * blockSize100k;
---
>           = 0 * blockSize100k;
1093c1093
<    ftab  NULL;
---
>    ftab  ;
1095c1095
<    n       = 0 * blockSize100k;
---
>    n        0 * blockSize100k;
1093c1093
<    ftab  NULL;
---
>    ftab  
1095c1095
<    n       = 0 * blockSize100k;
---
>    n        0 * blockSize100k;
1093c1093
<    ftab  NULL;
---
>    ftab  ;
1095c1095
<    n       = 0 * blockSize100k;
---
>            0 * blockSize100k;
1093c1093
<    ftab  NULL;
---
>    ftab  
1095c1095
<    n       = 0 * blockSize100k;
---
>            0 * blockSize100k;
1093c1093
<    ftab  NULL;
---
>    ftab  NULL
1093c1093
<    ftab  NULL;
---
>    ftab  NULL
1095c1095
<    n       = 0 * blockSize100k;
---
>           = 0 * blockSize100k;
1093c1093
<    ftab  NULL;
---
>    ftab  NULL
1095c1095
<    n       = 0 * blockSize100k;
---
>    n        0 * blockSize100k;
1093c1093
<    ftab  NULL;
---
>    ftab  NULL
1095c1095
<    n       = 0 * blockSize100k;
---
>            0 * blockSize100k;
1093c1093
<    ftab  NULL;
---
>    ftab  NULL
1095c1095
<    n       = 0 * blockSize100k;
---
>    n       =  * blockSize100k;
1093c1093
<    ftab  NULL;
---
>    ftab  NULL
1095c1095
<    n       = 0 * blockSize100k;
---
>           =  * blockSize100k;
1093c1093
<    ftab  NULL;
---
>    ftab  NULL
1095c1095
<    n       = 0 * blockSize100k;
---
>    n         * blockSize100k;
1093c1093
<    ftab  NULL;
---
>    ftab  NULL
1095c1095
<    n       = 0 * blockSize100k;
---
>             * blockSize100k;
1095c1095
<    n       = 0 * blockSize100k;
---
>           = 0 * blockSize100k;
1095c1095
<    n       = 0 * blockSize100k;
---
>            0 * blockSize100k;
1095c1095
<    n       = 0 * blockSize100k;
---
>           =  * blockSize100k;
1095c1095
<    n       = 0 * blockSize100k;
---
>             * blockSize100k;
1095c1095
<    n       = 0 * blockSize100k;
---
>           = 0  blockSize100k;
1095c1095
<    n       = 0 * blockSize100k;
---
>            0  blockSize100k;
1095c1095
<    n       = 0 * blockSize100k;
---
>           =   blockSize100k;
1095c1095
<    n       = 0 * blockSize100k;
---
>              blockSize100k;
(88.0 %, 24493 bytes)
1095,1096c1095,1096
<             * blockSize100k;
<    s_4 = BZALLOC( n                  * sizeof(UInt32) );
---
>              
>     = BZALLOC( n                  * sizeof(UInt32) );
1095c1095
<             * blockSize100k;
---
>             * ;
1095c1095
<             * blockSize100k;
---
>             * 
1095,1096c1095,1096
<             * blockSize100k;
<    s_4 = BZALLOC( n                  * sizeof(UInt32) );
---
>             * ;
>     = BZALLOC( n                  * sizeof(UInt32) );
1095,1096c1095,1096
<             * blockSize100k;
<    s_4 = BZALLOC( n                  * sizeof(UInt32) );
---
>             * 
>     = BZALLOC( n                  * sizeof(UInt32) );
1095,1096c1095,1096
<             * blockSize100k;
<    s_4 = BZALLOC( n                  * sizeof(UInt32) );
---
>             * ;
>    s_4  BZALLOC( n                  * sizeof(UInt32) );
1095,1096c1095,1096
<             * blockSize100k;
<    s_4 = BZALLOC( n                  * sizeof(UInt32) );
---
>             * 
>    s_4  BZALLOC( n                  * sizeof(UInt32) );
1095,1096c1095,1096
<             * blockSize100k;
<    s_4 = BZALLOC( n                  * sizeof(UInt32) );
---
>             * ;
>      BZALLOC( n                  * sizeof(UInt32) );
1095,1096c1095,1096
<             * blockSize100k;
<    s_4 = BZALLOC( n                  * sizeof(UInt32) );
---
>             * 
>      BZALLOC( n                  * sizeof(UInt32) );
1095c1095
<             * blockSize100k;
---
>             * blockSize100k
1095,1096c1095,1096
<             * blockSize100k;
<    s_4 = BZALLOC( n                  * sizeof(UInt32) );
---
>             * blockSize100k
>     = BZALLOC( n                  * sizeof(UInt32) );
1095,1096c1095,1096
<             * blockSize100k;
<    s_4 = BZALLOC( n                  * sizeof(UInt32) );
---
>             * blockSize100k
>    s_4  BZALLOC( n                  * sizeof(UInt32) );
1095,1096c1095,1096
<             * blockSize100k;
<    s_4 = BZALLOC( n                  * sizeof(UInt32) );
---
>             * blockSize100k
>      BZALLOC( n                  * sizeof(UInt32) );
1095,1096c1095,1096
<             * blockSize100k;
<    s_4 = BZALLOC( n                  * sizeof(UInt32) );
---
>             * blockSize100k
>    s_4 = ( n                  * sizeof(UInt32) );
1095,1096c1095,1096
<             * blockSize100k;
<    s_4 = BZALLOC( n                  * sizeof(UInt32) );
---
>             * blockSize100k
>     = ( n                  * sizeof(UInt32) );
1095,1096c1095,1096
<             * blockSize100k;
<    s_4 = BZALLOC( n                  * sizeof(UInt32) );
---
>             * blockSize100k
>    s_4  ( n                  * sizeof(UInt32) );
1095,1096c1095,1096
<             * blockSize100k;
<    s_4 = BZALLOC( n                  * sizeof(UInt32) );
---
>             * blockSize100k
>      ( n                  * sizeof(UInt32) );
1096c1096
<    s_4 = BZALLOC( n                  * sizeof(UInt32) );
---
>     = BZALLOC( n                  * sizeof(UInt32) );
1096c1096
<    s_4 = BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC( n                  * sizeof(UInt32) );
(88.1 %, 24475 bytes)
1096c1096
<      BZALLOC( n                  * sizeof(UInt32) );
---
>                          sizeof(UInt32) );
1096c1096
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC n                  * sizeof(UInt32) );
1096c1096
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC                   * sizeof(UInt32) );
1096c1096
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC n                   sizeof(UInt32) );
1096c1096
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC                    sizeof(UInt32) );
1096c1096
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC n                  * (UInt32) );
1096c1096
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC                   * (UInt32) );
1096c1096
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC n                   (UInt32) );
1096c1096
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC                    (UInt32) );
1096c1096
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC(                   * sizeof(UInt32) );
1096c1096
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC(                    sizeof(UInt32) );
1096c1096
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC(                   * (UInt32) );
1096c1096
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC(                    (UInt32) );
1096c1096
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC(                   * sizeofUInt32) );
1096c1096
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC(                    sizeofUInt32) );
1096c1096
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC(                   * UInt32) );
1096c1096
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC(                    UInt32) );
1096c1096
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC( n                   sizeof(UInt32) );
1096c1096
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC( n                   (UInt32) );
1096c1096
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC( n                   sizeofUInt32) );
1096c1096
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC( n                   UInt32) );
1096c1096
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC( n                   sizeof() );
1096c1096
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC( n                   () );
1096c1096
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC( n                   sizeof) );
1096c1096
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC( n                   ) );
1096c1096
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC( n                  * (UInt32) );
1096c1096
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC( n                  * UInt32) );
1096c1096
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC( n                  * () );
1096c1096
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC( n                  * ) );
1096c1096
<      BZALLOC( n                  * sizeof(UInt32) );
---
>      BZALLOC( n                  * (UInt32 );
(88.1 %, 24473 bytes)
1096c1096
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                    UInt32) );
1096c1096
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                    () );
1096c1096
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                    ) );
1096c1096
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                    (UInt32 );
1096c1096
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                    UInt32 );
1096c1096
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                    ( );
1096c1096
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                     );
1096c1096
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                    sizeofUInt32) );
1096c1096
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                    sizeof) );
1096c1096
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                    sizeofUInt32 );
1096c1096
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                    sizeof );
1096c1096
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                    sizeofUInt32) ;
1096c1096
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                    sizeof) ;
1096c1096
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                    sizeofUInt32 ;
1096c1096
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                    sizeof ;
1096c1096
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                    sizeof() );
1096c1096
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                    sizeof( );
1096c1096
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                    sizeof() ;
1096c1096
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                    sizeof( ;
1096c1096
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                    sizeof() )
1096c1096
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                    sizeof( )
1096c1096
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                    sizeof() 
1096c1096
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                    sizeof( 
1096c1096
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                    sizeof(UInt32 );
1096c1096
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                    sizeof(UInt32 ;
1096c1096
<      BZALLOC(                    sizeof(UInt32) );
---
>      BZALLOC(                    sizeof(UInt32 )
(88.1 %, 24459 bytes)
1096,1097c1096,1097
<      BZALLOC(                     );
<    s_5 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>      BZALLOC(                     
>      BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
1096c1096
<      BZALLOC(                     );
---
>      BZALLOC(                     )
1096,1097c1096,1097
<      BZALLOC(                     );
<    s_5 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>      BZALLOC(                     )
>     = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
1096,1097c1096,1097
<      BZALLOC(                     );
<    s_5 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>      BZALLOC(                     )
>    s_5  BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
1096,1097c1096,1097
<      BZALLOC(                     );
<    s_5 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>      BZALLOC(                     )
>      BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
1096,1097c1096,1097
<      BZALLOC(                     );
<    s_5 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>      BZALLOC(                     )
>    s_5 = ( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
1096,1097c1096,1097
<      BZALLOC(                     );
<    s_5 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>      BZALLOC(                     )
>     = ( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
1096,1097c1096,1097
<      BZALLOC(                     );
<    s_5 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>      BZALLOC(                     )
>    s_5  ( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
1096,1097c1096,1097
<      BZALLOC(                     );
<    s_5 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>      BZALLOC(                     )
>      ( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
1097c1097
<    s_5 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>     = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
1097c1097
<    s_5 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>      BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
1097c1097
<    s_5 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>     = ( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
1097c1097
<    s_5 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>      ( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
(88.1 %, 24455 bytes)
1097c1097
<      BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>       (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
1097c1097
<      BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>      ( n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
1097c1097
<      BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>       n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
1097c1097
<      BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>      ( (+BZ_N_OVERSHOOT) * sizeof(UInt32) );
1097c1097
<      BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>       (+BZ_N_OVERSHOOT) * sizeof(UInt32) );
1097c1097
<      BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>      ( +BZ_N_OVERSHOOT) * sizeof(UInt32) );
1097c1097
<      BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>       +BZ_N_OVERSHOOT) * sizeof(UInt32) );
1097c1097
<      BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>      BZALLOC (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
1097c1097
<      BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>      BZALLOC n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
1097c1097
<      BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>      BZALLOC (+BZ_N_OVERSHOOT) * sizeof(UInt32) );
1097c1097
<      BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>      BZALLOC +BZ_N_OVERSHOOT) * sizeof(UInt32) );
1097c1097
<      BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>      BZALLOC (nBZ_N_OVERSHOOT) * sizeof(UInt32) );
1097c1097
<      BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>      BZALLOC nBZ_N_OVERSHOOT) * sizeof(UInt32) );
1097c1097
<      BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>      BZALLOC (BZ_N_OVERSHOOT) * sizeof(UInt32) );
1097c1097
<      BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>      BZALLOC BZ_N_OVERSHOOT) * sizeof(UInt32) );
1097c1097
<      BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>      BZALLOC( n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
1097c1097
<      BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>      BZALLOC( +BZ_N_OVERSHOOT) * sizeof(UInt32) );
1097c1097
<      BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>      BZALLOC( nBZ_N_OVERSHOOT) * sizeof(UInt32) );
1097c1097
<      BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>      BZALLOC( BZ_N_OVERSHOOT) * sizeof(UInt32) );
1097c1097
<      BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>      BZALLOC( n+) * sizeof(UInt32) );
1097c1097
<      BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>      BZALLOC( +) * sizeof(UInt32) );
1097c1097
<      BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>      BZALLOC( n) * sizeof(UInt32) );
1097c1097
<      BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>      BZALLOC( ) * sizeof(UInt32) );
1097c1097
<      BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>      BZALLOC( (+BZ_N_OVERSHOOT) * sizeof(UInt32) );
(88.1 %, 24447 bytes)
1097c1097
<      ( (+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>       (+) * sizeof(UInt32) );
1097c1097
<      ( (+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>       +) * sizeof(UInt32) );
1097c1097
<      ( (+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>       () * sizeof(UInt32) );
1097c1097
<      ( (+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>       ) * sizeof(UInt32) );
1097c1097
<      ( (+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>      ( +BZ_N_OVERSHOOT) * sizeof(UInt32) );
1097c1097
<      ( (+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>      ( BZ_N_OVERSHOOT) * sizeof(UInt32) );
1097c1097
<      ( (+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>      ( +) * sizeof(UInt32) );
1097c1097
<      ( (+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>      ( ) * sizeof(UInt32) );
1097c1097
<      ( (+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>      ( +BZ_N_OVERSHOOT * sizeof(UInt32) );
1097c1097
<      ( (+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>      ( BZ_N_OVERSHOOT * sizeof(UInt32) );
(88.1 %, 24445 bytes)
1097c1097
<      ( +BZ_N_OVERSHOOT * sizeof(UInt32) );
---
>      ( BZ_N_OVERSHOOT * (UInt32) );
1097c1097
<      ( +BZ_N_OVERSHOOT * sizeof(UInt32) );
---
>      (  * (UInt32) );
1097c1097
<      ( +BZ_N_OVERSHOOT * sizeof(UInt32) );
---
>      ( BZ_N_OVERSHOOT  (UInt32) );
1097c1097
<      ( +BZ_N_OVERSHOOT * sizeof(UInt32) );
---
>      (   (UInt32) );
1097c1097
<      ( +BZ_N_OVERSHOOT * sizeof(UInt32) );
---
>      ( + * sizeof(UInt32) );
1097c1097
<      ( +BZ_N_OVERSHOOT * sizeof(UInt32) );
---
>      ( +  sizeof(UInt32) );
1097c1097
<      ( +BZ_N_OVERSHOOT * sizeof(UInt32) );
---
>      ( + * (UInt32) );
1097c1097
<      ( +BZ_N_OVERSHOOT * sizeof(UInt32) );
---
>      ( +  (UInt32) );
1097c1097
<      ( +BZ_N_OVERSHOOT * sizeof(UInt32) );
---
>      ( + * sizeofUInt32) );
1097c1097
<      ( +BZ_N_OVERSHOOT * sizeof(UInt32) );
---
>      ( +  sizeofUInt32) );
1097c1097
<      ( +BZ_N_OVERSHOOT * sizeof(UInt32) );
---
>      ( + * UInt32) );
1097c1097
<      ( +BZ_N_OVERSHOOT * sizeof(UInt32) );
---
>      ( +  UInt32) );
1097c1097
<      ( +BZ_N_OVERSHOOT * sizeof(UInt32) );
---
>      ( +BZ_N_OVERSHOOT  sizeof(UInt32) );
1097c1097
<      ( +BZ_N_OVERSHOOT * sizeof(UInt32) );
---
>      ( +BZ_N_OVERSHOOT  (UInt32) );
1097c1097
<      ( +BZ_N_OVERSHOOT * sizeof(UInt32) );
---
>      ( +BZ_N_OVERSHOOT  sizeofUInt32) );
1097c1097
<      ( +BZ_N_OVERSHOOT * sizeof(UInt32) );
---
>      ( +BZ_N_OVERSHOOT  UInt32) );
1097c1097
<      ( +BZ_N_OVERSHOOT * sizeof(UInt32) );
---
>      ( +BZ_N_OVERSHOOT  sizeof() );
1097c1097
<      ( +BZ_N_OVERSHOOT * sizeof(UInt32) );
---
>      ( +BZ_N_OVERSHOOT  () );
1097c1097
<      ( +BZ_N_OVERSHOOT * sizeof(UInt32) );
---
>      ( +BZ_N_OVERSHOOT  sizeof) );
1097c1097
<      ( +BZ_N_OVERSHOOT * sizeof(UInt32) );
---
>      ( +BZ_N_OVERSHOOT  ) );
1097c1097
<      ( +BZ_N_OVERSHOOT * sizeof(UInt32) );
---
>      ( +BZ_N_OVERSHOOT * (UInt32) );
1097c1097
<      ( +BZ_N_OVERSHOOT * sizeof(UInt32) );
---
>      ( +BZ_N_OVERSHOOT * UInt32) );
1097c1097
<      ( +BZ_N_OVERSHOOT * sizeof(UInt32) );
---
>      ( +BZ_N_OVERSHOOT * () );
(88.1 %, 24430 bytes)
1097c1097
<      ( +  sizeof(UInt32) );
---
>      ( +  UInt32) );
1097c1097
<      ( +  sizeof(UInt32) );
---
>      ( +  () );
1097c1097
<      ( +  sizeof(UInt32) );
---
>      ( +  ) );
1097c1097
<      ( +  sizeof(UInt32) );
---
>      ( +  (UInt32 );
1097c1097
<      ( +  sizeof(UInt32) );
---
>      ( +  UInt32 );
1097c1097
<      ( +  sizeof(UInt32) );
---
>      ( +  ( );
1097c1097
<      ( +  sizeof(UInt32) );
---
>      ( +   );
1097c1097
<      ( +  sizeof(UInt32) );
---
>      ( +  sizeofUInt32) );
1097c1097
<      ( +  sizeof(UInt32) );
---
>      ( +  sizeof) );
1097c1097
<      ( +  sizeof(UInt32) );
---
>      ( +  sizeofUInt32 );
1097c1097
<      ( +  sizeof(UInt32) );
---
>      ( +  sizeof );
1097c1097
<      ( +  sizeof(UInt32) );
---
>      ( +  sizeofUInt32) ;
1097c1097
<      ( +  sizeof(UInt32) );
---
>      ( +  sizeof) ;
1097c1097
<      ( +  sizeof(UInt32) );
---
>      ( +  sizeofUInt32 ;
1097c1097
<      ( +  sizeof(UInt32) );
---
>      ( +  sizeof ;
1097c1097
<      ( +  sizeof(UInt32) );
---
>      ( +  sizeof() );
1097c1097
<      ( +  sizeof(UInt32) );
---
>      ( +  sizeof( );
1097c1097
<      ( +  sizeof(UInt32) );
---
>      ( +  sizeof() ;
1097c1097
<      ( +  sizeof(UInt32) );
---
>      ( +  sizeof( ;
1097c1097
<      ( +  sizeof(UInt32) );
---
>      ( +  sizeof() )
1097c1097
<      ( +  sizeof(UInt32) );
---
>      ( +  sizeof( )
1097c1097
<      ( +  sizeof(UInt32) );
---
>      ( +  sizeof() 
1097c1097
<      ( +  sizeof(UInt32) );
---
>      ( +  sizeof( 
1097c1097
<      ( +  sizeof(UInt32) );
---
>      ( +  sizeof(UInt32 );
1097c1097
<      ( +  sizeof(UInt32) );
---
>      ( +  sizeof(UInt32 ;
1097c1097
<      ( +  sizeof(UInt32) );
---
>      ( +  sizeof(UInt32 )
1097c1097
<      ( +  sizeof(UInt32) );
---
>      ( +  sizeof(UInt32 
1097,1098c1097,1098
<      ( +  sizeof(UInt32) );
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>      ( +  sizeof(UInt32 );
>     = BZALLOC( 7              * sizeof(UInt32) );
1097,1098c1097,1098
<      ( +  sizeof(UInt32) );
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>      ( +  sizeof(UInt32 ;
>     = BZALLOC( 7              * sizeof(UInt32) );
1097,1098c1097,1098
<      ( +  sizeof(UInt32) );
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>      ( +  sizeof(UInt32 )
>     = BZALLOC( 7              * sizeof(UInt32) );
1097,1098c1097,1098
<      ( +  sizeof(UInt32) );
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>      ( +  sizeof(UInt32 
>     = BZALLOC( 7              * sizeof(UInt32) );
1097c1097
<      ( +  sizeof(UInt32) );
---
>      ( +  sizeof(UInt32) ;
1097c1097
<      ( +  sizeof(UInt32) );
---
>      ( +  sizeof(UInt32) 
1097,1098c1097,1098
<      ( +  sizeof(UInt32) );
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>      ( +  sizeof(UInt32) ;
>     = BZALLOC( 7              * sizeof(UInt32) );
1097,1098c1097,1098
<      ( +  sizeof(UInt32) );
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>      ( +  sizeof(UInt32) 
>     = BZALLOC( 7              * sizeof(UInt32) );
1097,1098c1097,1098
<      ( +  sizeof(UInt32) );
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>      ( +  sizeof(UInt32) ;
>    s_6  BZALLOC( 7              * sizeof(UInt32) );
1097,1098c1097,1098
<      ( +  sizeof(UInt32) );
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>      ( +  sizeof(UInt32) 
>    s_6  BZALLOC( 7              * sizeof(UInt32) );
1097,1098c1097,1098
<      ( +  sizeof(UInt32) );
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>      ( +  sizeof(UInt32) ;
>      BZALLOC( 7              * sizeof(UInt32) );
1097,1098c1097,1098
<      ( +  sizeof(UInt32) );
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>      ( +  sizeof(UInt32) 
>      BZALLOC( 7              * sizeof(UInt32) );
1097c1097
<      ( +  sizeof(UInt32) );
---
>      ( +  sizeof(UInt32) )
1097,1098c1097,1098
<      ( +  sizeof(UInt32) );
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>      ( +  sizeof(UInt32) )
>     = BZALLOC( 7              * sizeof(UInt32) );
1097,1098c1097,1098
<      ( +  sizeof(UInt32) );
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>      ( +  sizeof(UInt32) )
>    s_6  BZALLOC( 7              * sizeof(UInt32) );
1097,1098c1097,1098
<      ( +  sizeof(UInt32) );
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>      ( +  sizeof(UInt32) )
>      BZALLOC( 7              * sizeof(UInt32) );
1097,1098c1097,1098
<      ( +  sizeof(UInt32) );
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>      ( +  sizeof(UInt32) )
>    s_6 = ( 7              * sizeof(UInt32) );
1097,1098c1097,1098
<      ( +  sizeof(UInt32) );
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>      ( +  sizeof(UInt32) )
>     = ( 7              * sizeof(UInt32) );
1097,1098c1097,1098
<      ( +  sizeof(UInt32) );
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>      ( +  sizeof(UInt32) )
>    s_6  ( 7              * sizeof(UInt32) );
1097,1098c1097,1098
<      ( +  sizeof(UInt32) );
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>      ( +  sizeof(UInt32) )
>      ( 7              * sizeof(UInt32) );
1098c1098
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>     = BZALLOC( 7              * sizeof(UInt32) );
1098c1098
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>      BZALLOC( 7              * sizeof(UInt32) );
1098c1098
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>     = ( 7              * sizeof(UInt32) );
1098c1098
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>      ( 7              * sizeof(UInt32) );
(88.1 %, 24426 bytes)
1098c1098
<      BZALLOC( 7              * sizeof(UInt32) );
---
>       7              * sizeof(UInt32) );
1098c1098
<      BZALLOC( 7              * sizeof(UInt32) );
---
>      (               * sizeof(UInt32) );
1098c1098
<      BZALLOC( 7              * sizeof(UInt32) );
---
>                     * sizeof(UInt32) );
1098c1098
<      BZALLOC( 7              * sizeof(UInt32) );
---
>      ( 7               sizeof(UInt32) );
1098c1098
<      BZALLOC( 7              * sizeof(UInt32) );
---
>       7               sizeof(UInt32) );
1098c1098
<      BZALLOC( 7              * sizeof(UInt32) );
---
>      (                sizeof(UInt32) );
1098c1098
<      BZALLOC( 7              * sizeof(UInt32) );
---
>                      sizeof(UInt32) );
1098c1098
<      BZALLOC( 7              * sizeof(UInt32) );
---
>      BZALLOC 7              * sizeof(UInt32) );
1098c1098
<      BZALLOC( 7              * sizeof(UInt32) );
---
>      BZALLOC               * sizeof(UInt32) );
1098c1098
<      BZALLOC( 7              * sizeof(UInt32) );
---
>      BZALLOC 7               sizeof(UInt32) );
1098c1098
<      BZALLOC( 7              * sizeof(UInt32) );
---
>      BZALLOC                sizeof(UInt32) );
1098c1098
<      BZALLOC( 7              * sizeof(UInt32) );
---
>      BZALLOC 7              * (UInt32) );
1098c1098
<      BZALLOC( 7              * sizeof(UInt32) );
---
>      BZALLOC               * (UInt32) );
1098c1098
<      BZALLOC( 7              * sizeof(UInt32) );
---
>      BZALLOC 7               (UInt32) );
1098c1098
<      BZALLOC( 7              * sizeof(UInt32) );
---
>      BZALLOC                (UInt32) );
1098c1098
<      BZALLOC( 7              * sizeof(UInt32) );
---
>      BZALLOC(               * sizeof(UInt32) );
1098c1098
<      BZALLOC( 7              * sizeof(UInt32) );
---
>      BZALLOC(                sizeof(UInt32) );
(88.1 %, 24417 bytes)
1098c1098
<      (                sizeof(UInt32) );
---
>                      sizeof) );
1098c1098
<      (                sizeof(UInt32) );
---
>                      ) );
1098c1098
<      (                sizeof(UInt32) );
---
>      (                (UInt32) );
1098c1098
<      (                sizeof(UInt32) );
---
>      (                UInt32) );
1098c1098
<      (                sizeof(UInt32) );
---
>      (                () );
1098c1098
<      (                sizeof(UInt32) );
---
>      (                ) );
1098c1098
<      (                sizeof(UInt32) );
---
>      (                (UInt32 );
1098c1098
<      (                sizeof(UInt32) );
---
>      (                UInt32 );
1098c1098
<      (                sizeof(UInt32) );
---
>      (                ( );
1098c1098
<      (                sizeof(UInt32) );
---
>      (                 );
1098c1098
<      (                sizeof(UInt32) );
---
>      (                sizeofUInt32) );
1098c1098
<      (                sizeof(UInt32) );
---
>      (                sizeof) );
1098c1098
<      (                sizeof(UInt32) );
---
>      (                sizeofUInt32 );
1098c1098
<      (                sizeof(UInt32) );
---
>      (                sizeof );
1098c1098
<      (                sizeof(UInt32) );
---
>      (                sizeofUInt32) ;
1098c1098
<      (                sizeof(UInt32) );
---
>      (                sizeof) ;
1098c1098
<      (                sizeof(UInt32) );
---
>      (                sizeofUInt32 ;
1098c1098
<      (                sizeof(UInt32) );
---
>      (                sizeof ;
1098c1098
<      (                sizeof(UInt32) );
---
>      (                sizeof() );
1098c1098
<      (                sizeof(UInt32) );
---
>      (                sizeof( );
1098c1098
<      (                sizeof(UInt32) );
---
>      (                sizeof() ;
1098c1098
<      (                sizeof(UInt32) );
---
>      (                sizeof( ;
1098c1098
<      (                sizeof(UInt32) );
---
>      (                sizeof() )
1098c1098
<      (                sizeof(UInt32) );
---
>      (                sizeof( )
1098c1098
<      (                sizeof(UInt32) );
---
>      (                sizeof() 
1098c1098
<      (                sizeof(UInt32) );
---
>      (                sizeof( 
1098c1098
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32 );
1098c1098
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32 ;
1098c1098
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32 )
1098c1098
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32 
1098c1098
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32 );
1100c1100
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>     (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1098c1098
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32 ;
1100c1100
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>     (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1098c1098
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32 )
1100c1100
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>     (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1098c1098
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32 
1100c1100
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>     (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1098c1098
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32) ;
1098c1098
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32) 
1098c1098
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32) ;
1100c1100
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>     (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1098c1098
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32) 
1100c1100
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>     (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1098c1098
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32) ;
1100c1100
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1098c1098
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32) 
1100c1100
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1098c1098
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32) ;
1100c1100
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>     s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1098c1098
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32) 
1100c1100
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>     s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1098c1098
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32) )
1098c1098
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32) )
1100c1100
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>     (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1098c1098
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32) )
1100c1100
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1098c1098
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32) )
1100c1100
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>     s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1098c1098
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32) )
1100c1100
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1098c1098
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32) )
1100c1100
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>     (->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1098c1098
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32) )
1100c1100
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if ->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1098c1098
<      (                sizeof(UInt32) );
---
>      (                sizeof(UInt32) )
1100c1100
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>     ->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1100c1100
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>     (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1100c1100
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>     s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1100c1100
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>     (->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1100c1100
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>     ->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1100c1100
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>     (sarr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1100c1100
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>     sarr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1100c1100
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>     (arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1100c1100
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>     arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1100c1100
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1100c1100
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if ->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1100c1100
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if sarr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1100c1100
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1100c1100
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if s-> == NULL || s->arr2 == NULL || s->ftab == NULL) 
1100c1100
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if -> == NULL || s->arr2 == NULL || s->ftab == NULL) 
1100c1100
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if s == NULL || s->arr2 == NULL || s->ftab == NULL) 
1100c1100
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if  == NULL || s->arr2 == NULL || s->ftab == NULL) 
1100c1100
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1100c1100
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1100c1100
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (-> == NULL || s->arr2 == NULL || s->ftab == NULL) 
1100c1100
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if ( == NULL || s->arr2 == NULL || s->ftab == NULL) 
1100c1100
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (->arr1  NULL || s->arr2 == NULL || s->ftab == NULL) 
1100c1100
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (arr1  NULL || s->arr2 == NULL || s->ftab == NULL) 
(88.1 %, 24414 bytes)
1100c1100
<    if (arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (  NULL || s->arr2 == NULL || s->ftab == NULL) 
1100c1100
<    if (arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if ( ==  || s->arr2 == NULL || s->ftab == NULL) 
1100c1100
<    if (arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (   || s->arr2 == NULL || s->ftab == NULL) 
1100c1100
<    if (arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if ( == NULL  s->arr2 == NULL || s->ftab == NULL) 
1100c1100
<    if (arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (  NULL  s->arr2 == NULL || s->ftab == NULL) 
1100c1100
<    if (arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if ( ==   s->arr2 == NULL || s->ftab == NULL) 
1100c1100
<    if (arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (    s->arr2 == NULL || s->ftab == NULL) 
(88.1 %, 24408 bytes)
1100c1100
<    if (  NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (    s->arr2 == NULL || s->ftab == NULL) 
1100c1100
<    if (  NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (   || ->arr2 == NULL || s->ftab == NULL) 
1100c1100
<    if (  NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (    ->arr2 == NULL || s->ftab == NULL) 
1100c1100
<    if (  NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (   || sarr2 == NULL || s->ftab == NULL) 
1100c1100
<    if (  NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (    sarr2 == NULL || s->ftab == NULL) 
1100c1100
<    if (  NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (   || arr2 == NULL || s->ftab == NULL) 
1100c1100
<    if (  NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (    arr2 == NULL || s->ftab == NULL) 
(88.1 %, 24402 bytes)
1100c1100
<    if (    s->arr2 == NULL || s->ftab == NULL) 
---
>    if (    arr2 == NULL || s->ftab == NULL) 
1100c1100
<    if (    s->arr2 == NULL || s->ftab == NULL) 
---
>    if (    -> == NULL || s->ftab == NULL) 
1100c1100
<    if (    s->arr2 == NULL || s->ftab == NULL) 
---
>    if (     == NULL || s->ftab == NULL) 
1100c1100
<    if (    s->arr2 == NULL || s->ftab == NULL) 
---
>    if (    ->arr2  NULL || s->ftab == NULL) 
1100c1100
<    if (    s->arr2 == NULL || s->ftab == NULL) 
---
>    if (    arr2  NULL || s->ftab == NULL) 
(88.1 %, 24399 bytes)
1100c1100
<    if (    arr2 == NULL || s->ftab == NULL) 
---
>    if (      NULL || s->ftab == NULL) 
1100c1100
<    if (    arr2 == NULL || s->ftab == NULL) 
---
>    if (     ==  || s->ftab == NULL) 
1100c1100
<    if (    arr2 == NULL || s->ftab == NULL) 
---
>    if (       || s->ftab == NULL) 
1100c1100
<    if (    arr2 == NULL || s->ftab == NULL) 
---
>    if (     == NULL  s->ftab == NULL) 
1100c1100
<    if (    arr2 == NULL || s->ftab == NULL) 
---
>    if (      NULL  s->ftab == NULL) 
1100c1100
<    if (    arr2 == NULL || s->ftab == NULL) 
---
>    if (     ==   s->ftab == NULL) 
1100c1100
<    if (    arr2 == NULL || s->ftab == NULL) 
---
>    if (        s->ftab == NULL) 
(88.1 %, 24393 bytes)
1100c1100
<    if (      NULL || s->ftab == NULL) 
---
>    if (        s->ftab == NULL) 
1100c1100
<    if (      NULL || s->ftab == NULL) 
---
>    if (       || ->ftab == NULL) 
1100c1100
<    if (      NULL || s->ftab == NULL) 
---
>    if (        ->ftab == NULL) 
1100c1100
<    if (      NULL || s->ftab == NULL) 
---
>    if (       || sftab == NULL) 
1100c1100
<    if (      NULL || s->ftab == NULL) 
---
>    if (        sftab == NULL) 
1100c1100
<    if (      NULL || s->ftab == NULL) 
---
>    if (       || ftab == NULL) 
1100c1100
<    if (      NULL || s->ftab == NULL) 
---
>    if (        ftab == NULL) 
(88.1 %, 24387 bytes)
1100c1100
<    if (        s->ftab == NULL) 
---
>    if (        ftab == NULL) 
1100c1100
<    if (        s->ftab == NULL) 
---
>    if (        -> == NULL) 
1100c1100
<    if (        s->ftab == NULL) 
---
>    if (         == NULL) 
1100c1100
<    if (        s->ftab == NULL) 
---
>    if (        ->ftab  NULL) 
1100c1100
<    if (        s->ftab == NULL) 
---
>    if (        ftab  NULL) 
(88.1 %, 24384 bytes)
1100c1100
<    if (        ftab == NULL) 
---
>    if (          NULL) 
1100c1100
<    if (        ftab == NULL) 
---
>    if (         == ) 
1100c1100
<    if (        ftab == NULL) 
---
>    if (          ) 
1100c1100
<    if (        ftab == NULL) 
---
>    if (         == NULL 
1100c1100
<    if (        ftab == NULL) 
---
>    if (          NULL 
1100c1100
<    if (        ftab == NULL) 
---
>    if (         ==  
1100c1100
<    if (        ftab == NULL) 
---
>    if (           
1100c1100
<    if (        ftab == NULL) 
---
>    if (        ftab  NULL) 
(88.1 %, 24378 bytes)
1100c1100
<    if (          NULL) 
---
>    if (           
1100c1100
<    if (          NULL) 
---
>    if (          ) 
1102c1102
<    s->blockNo           = 0;
---
>    ->blockNo           = 0;
1100c1100
<    if (          NULL) 
---
>    if (           
1102c1102
<    s->blockNo           = 0;
---
>    ->blockNo           = 0;
1100c1100
<    if (          NULL) 
---
>    if (          ) 
1102c1102
<    s->blockNo           = 0;
---
>    sblockNo           = 0;
1100c1100
<    if (          NULL) 
---
>    if (           
1102c1102
<    s->blockNo           = 0;
---
>    sblockNo           = 0;
1100c1100
<    if (          NULL) 
---
>    if (          ) 
1102c1102
<    s->blockNo           = 0;
---
>    blockNo           = 0;
1100c1100
<    if (          NULL) 
---
>    if (           
1102c1102
<    s->blockNo           = 0;
---
>    blockNo           = 0;
1100c1100
<    if (          NULL) 
---
>    if (          NULL 
1100c1100
<    if (          NULL) 
---
>    if (          NULL 
1102c1102
<    s->blockNo           = 0;
---
>    ->blockNo           = 0;
1100c1100
<    if (          NULL) 
---
>    if (          NULL 
1102c1102
<    s->blockNo           = 0;
---
>    sblockNo           = 0;
1100c1100
<    if (          NULL) 
---
>    if (          NULL 
1102c1102
<    s->blockNo           = 0;
---
>    blockNo           = 0;
1100c1100
<    if (          NULL) 
---
>    if (          NULL 
1102c1102
<    s->blockNo           = 0;
---
>    s->           = 0;
1100c1100
<    if (          NULL) 
---
>    if (          NULL 
1102c1102
<    s->blockNo           = 0;
---
>    ->           = 0;
1100c1100
<    if (          NULL) 
---
>    if (          NULL 
1102c1102
<    s->blockNo           = 0;
---
>    s           = 0;
1100c1100
<    if (          NULL) 
---
>    if (          NULL 
1102c1102
<    s->blockNo           = 0;
---
>               = 0;
1102c1102
<    s->blockNo           = 0;
---
>    ->blockNo           = 0;
1102c1102
<    s->blockNo           = 0;
---
>    blockNo           = 0;
1102c1102
<    s->blockNo           = 0;
---
>    ->           = 0;
1102c1102
<    s->blockNo           = 0;
---
>               = 0;
1102c1102
<    s->blockNo           = 0;
---
>    ->blockNo            0;
1102c1102
<    s->blockNo           = 0;
---
>    blockNo            0;
1102c1102
<    s->blockNo           = 0;
---
>    ->            0;
1102c1102
<    s->blockNo           = 0;
---
>                0;
1102c1102
<    s->blockNo           = 0;
---
>    sblockNo           = 0;
1102c1102
<    s->blockNo           = 0;
---
>    s           = 0;
(88.1 %, 24367 bytes)
1102,1103c1102,1103
<                0;
<    s_2             = BZ_S_INPUT;
---
>                
>                  BZ_S_INPUT;
1102c1102
<                0;
---
>                0
1102,1103c1102,1103
<                0;
<    s_2             = BZ_S_INPUT;
---
>                0
>                 = BZ_S_INPUT;
1102,1103c1102,1103
<                0;
<    s_2             = BZ_S_INPUT;
---
>                0
>    s_2              BZ_S_INPUT;
1102,1103c1102,1103
<                0;
<    s_2             = BZ_S_INPUT;
---
>                0
>                  BZ_S_INPUT;
1102,1103c1102,1103
<                0;
<    s_2             = BZ_S_INPUT;
---
>                0
>    s_2             = ;
1102,1103c1102,1103
<                0;
<    s_2             = BZ_S_INPUT;
---
>                0
>                 = ;
1102,1103c1102,1103
<                0;
<    s_2             = BZ_S_INPUT;
---
>                0
>    s_2              ;
1102,1103c1102,1103
<                0;
<    s_2             = BZ_S_INPUT;
---
>                0
>                  ;
(88.1 %, 24361 bytes)
1103,1104c1103,1104
<                  BZ_S_INPUT;
<    s_1              = BZ_M_RUNNING;
---
>                  
>                   BZ_M_RUNNING;
1103c1103
<                  BZ_S_INPUT;
---
>                  BZ_S_INPUT
1103,1104c1103,1104
<                  BZ_S_INPUT;
<    s_1              = BZ_M_RUNNING;
---
>                  BZ_S_INPUT
>                  = BZ_M_RUNNING;
1103,1104c1103,1104
<                  BZ_S_INPUT;
<    s_1              = BZ_M_RUNNING;
---
>                  BZ_S_INPUT
>    s_1               BZ_M_RUNNING;
1103,1104c1103,1104
<                  BZ_S_INPUT;
<    s_1              = BZ_M_RUNNING;
---
>                  BZ_S_INPUT
>                   BZ_M_RUNNING;
1103,1104c1103,1104
<                  BZ_S_INPUT;
<    s_1              = BZ_M_RUNNING;
---
>                  BZ_S_INPUT
>    s_1              = ;
1103,1104c1103,1104
<                  BZ_S_INPUT;
<    s_1              = BZ_M_RUNNING;
---
>                  BZ_S_INPUT
>                  = ;
1103,1104c1103,1104
<                  BZ_S_INPUT;
<    s_1              = BZ_M_RUNNING;
---
>                  BZ_S_INPUT
>    s_1               ;
1103,1104c1103,1104
<                  BZ_S_INPUT;
<    s_1              = BZ_M_RUNNING;
---
>                  BZ_S_INPUT
>                   ;
(88.1 %, 24346 bytes)
1104,1105c1104,1105
<                   BZ_M_RUNNING;
<    s_27       = 0;
---
>                   
>            0;
1104c1104
<                   BZ_M_RUNNING;
---
>                   BZ_M_RUNNING
1104,1105c1104,1105
<                   BZ_M_RUNNING;
<    s_27       = 0;
---
>                   BZ_M_RUNNING
>           = 0;
1104,1105c1104,1105
<                   BZ_M_RUNNING;
<    s_27       = 0;
---
>                   BZ_M_RUNNING
>    s_27        0;
1104,1105c1104,1105
<                   BZ_M_RUNNING;
<    s_27       = 0;
---
>                   BZ_M_RUNNING
>            0;
1104,1105c1104,1105
<                   BZ_M_RUNNING;
<    s_27       = 0;
---
>                   BZ_M_RUNNING
>    s_27       = ;
1104,1105c1104,1105
<                   BZ_M_RUNNING;
<    s_27       = 0;
---
>                   BZ_M_RUNNING
>           = ;
1104,1105c1104,1105
<                   BZ_M_RUNNING;
<    s_27       = 0;
---
>                   BZ_M_RUNNING
>    s_27        ;
1104,1105c1104,1105
<                   BZ_M_RUNNING;
<    s_27       = 0;
---
>                   BZ_M_RUNNING
>            ;
(88.1 %, 24328 bytes)
1105,1106c1105,1106
<            0;
<    s_30     = blockSize100k;
---
>            
>          blockSize100k;
1105c1105
<            0;
---
>            0
1105,1106c1105,1106
<            0;
<    s_30     = blockSize100k;
---
>            0
>         = blockSize100k;
1105,1106c1105,1106
<            0;
<    s_30     = blockSize100k;
---
>            0
>    s_30      blockSize100k;
1105,1106c1105,1106
<            0;
<    s_30     = blockSize100k;
---
>            0
>          blockSize100k;
1105,1106c1105,1106
<            0;
<    s_30     = blockSize100k;
---
>            0
>    s_30     = ;
1105,1106c1105,1106
<            0;
<    s_30     = blockSize100k;
---
>            0
>         = ;
1105,1106c1105,1106
<            0;
<    s_30     = blockSize100k;
---
>            0
>    s_30      ;
1105,1106c1105,1106
<            0;
<    s_30     = blockSize100k;
---
>            0
>          ;
(88.1 %, 24321 bytes)
1106,1107c1106,1107
<          blockSize100k;
<    s_18         = 0 * blockSize100k - 9;
---
>          
>              0 * blockSize100k - 9;
1106c1106
<          blockSize100k;
---
>          blockSize100k
1106,1107c1106,1107
<          blockSize100k;
<    s_18         = 0 * blockSize100k - 9;
---
>          blockSize100k
>             = 0 * blockSize100k - 9;
1106,1107c1106,1107
<          blockSize100k;
<    s_18         = 0 * blockSize100k - 9;
---
>          blockSize100k
>    s_18          0 * blockSize100k - 9;
1106,1107c1106,1107
<          blockSize100k;
<    s_18         = 0 * blockSize100k - 9;
---
>          blockSize100k
>              0 * blockSize100k - 9;
(88.1 %, 24302 bytes)
1107c1107
<              0 * blockSize100k - 9;
---
>                  9;
1107c1107
<              0 * blockSize100k - 9;
---
>              0  blockSize100k - 9;
1107c1107
<              0 * blockSize100k - 9;
---
>              0   - 9;
(88.1 %, 24286 bytes)
1107,1108c1107,1108
<                  9;
<    s_28         = verbosity;
---
>                  
>              verbosity;
1107c1107
<                  9;
---
>                  9
1107,1108c1107,1108
<                  9;
<    s_28         = verbosity;
---
>                  9
>             = verbosity;
1107,1108c1107,1108
<                  9;
<    s_28         = verbosity;
---
>                  9
>    s_28          verbosity;
1107,1108c1107,1108
<                  9;
<    s_28         = verbosity;
---
>                  9
>              verbosity;
1107,1108c1107,1108
<                  9;
<    s_28         = verbosity;
---
>                  9
>    s_28         = ;
1107,1108c1107,1108
<                  9;
<    s_28         = verbosity;
---
>                  9
>             = ;
347,2190c347
< #define BZ_N_OVERSHOOT (      2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<        
< 
<       
<       
<           
<           
< 
<       
<          ;
< 
<       
<       UInt32  arr1;
<       UInt32  arr2;
<       UInt32  ftab
<           ;
< 
<       
<       UInt32  ptr;
<        char   block;
<        short  mtfv;
<        char   zbits
< 
<       
<           
< 
<       
<          
<           ;
<       
< 
<       
<       Int32    nblock
<           
<           
<           ;
< 
<       
<       Int32    nInUse;
<       Bool     ;
<        char    ;
< 
<       
<          
<           
< 
<       
<       UInt32   
<          
< 
<       
<           
<           blockNo
<           ;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<        char       ;
<        char    ;
< 
<        char    len     
<               
<              
<       
<          
< 
<    }
<    EState
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
<          
<        
< 
< #define BZ_X_MAGIC_1     0
<       
<       
<       
<      
<      
<      
<      
<      
<      
<        
<        
<        
<        
<       
<     
<     
<     
<     
<     
<    
<    
<    
<      
<      
<      
<         
<         
<         
<         
<         
<         
<      
<      
<      
<      
<      
<        
<        
<        
<        
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<        
< 
<       
<           
< 
<       
<            
<           
<            
<       
< 
<       
<          
<       Int32    
< 
<       
<           
<            
<           
<           
< 
<       
<           
<          
<           
<           ;
<           ;
<       Int32    ;
<       Int32    ;
< 
<       
<       UInt32   tt;
< 
<       
<        short   ll16;
<        char    ll4
< 
<       
<          
<          
<          
<          
< 
<       
<           ;
<       Bool     ;
<       Bool     ;
<        char    ;
< 
<       
<        char       ;
<       Int32    mtfbase[  MTFL_SIZE]
<               [BZ_MAX_SELECTORS]
<            [BZ_MAX_SELECTORS]
<              [BZ_MAX_ALPHA_SIZE]
< 
<             
<              
<              
<           
< 
<       
<           
<           
<           
<           
<           
<           
<           
<           
<           
<           
<           
<           
<           
<           
<           
<           
<            
<           
<           
<           
<           
<          
<          
<          ;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define c                     \
<                        \
<                    \
<       
< 
< #define                    \
<                           \
<       c_tPos              
<     c_tPos  
< 
< #define in                                          
<    
< 
< #define GET_LL4i                             \
<              
< 
< #define in                          
<    
< 
< #define GET_LLi \
<        
< 
< #define                             \
<            scftab     \
<         
< 
< 
< 
< 
< 
< 
< void  
< BZ2_decompress (  );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define  zz2 
<    
< 
< #define   zzn       
< 
< 
< 
< #define ab       
< 
< #define hz 
< 
< #define hz 
< 
<   
<     
< 
< 
< 
< 
< # 
<  
<  
<  
<  
<  
<  
< 
< 
< 
< 
< 
< #define         zz        
< #define       zz        
< #define       zz        
< #define        zz  
< #define   zz  
< 
< 
< 
<        
<      
<      
<       
<  
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define  zz2 
<    
< 
< #define   zzn       
< 
< 
< 
< 
< #define ab       
< 
< #define dz 
< 
< #define dz 
< 
< 
< #define  nextLoaz
< 
< #define bz                                        
<    
< 
< 
<   
< #define    BZ_N_QSORT
<   
< 
< 
< 
< # 
<  
<  
<  
<  
<  
<  
<  
<  
<  
< 
< 
< 
< 
< 
< #define BIGFREQb       
< #define SETMASK   
< #define  SETMASK
< 
< 
< 
<  
<  
<  
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define   zz0  
< #define    zz1  
< #define        zz3
< 
< #define                            \
<    zw2                     \
<      
< 
< #define z                                     
< 
< 
< #define z                                   
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define nz                           
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< EState * makeMaps_e_s;
< 
<  makeMaps_e (  )
< {
<    Int32 i
<      
<     = 0;
<    
<    for (;   ; )
<       
<          ;
<       
< }
< 
< 
< 
< EState  generateMTFValues_s;
< 
<  generateMTFValues (  )
< {
<     char   
<      ;
<     char yy_0;
<    Int32   i ;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB
< 
<    
<        = (generateMTFValues_s.ptr)
<     ;
<         
<      
<         (generateMTFValues_s);
<     short mtfv_0
< 
<    
<     = 
< 
<    i  ;
<    
<    for (;   ; ) generateMTFValues_s.mtfFreq[0]  
< 
<      
<      
<      ;
<    
<    for (;   ; )     
< 
<      0;
<    
<    for (;   ; ) 
< 
<      
<    
<        ; generateMTFValues_s.mtfFreq;
< 
<      0;
< }
< 
< 
< 
<    
<   
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define rrr                               
<    
< 
< #define                      \
<        lll                      \
<      
< 
< #define uuu                        \
<    
< 
< #define uuu                          \
<    
< 
< 
< #define lval           
< 
< 
< 
< 
<      s 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<     
< 
< 
< 
< 
<      
< ;
< 
< 
< 
<   default_bzalloc     
< ;
< 
< 
<  default_bzfree    
< 
< 
< 
< 
< 
<   (  )
< ;
< 
< 
< 
< 
<    void 
< 
< 
< 
<      
< ;
< 
< 
< 
<  BZ2_bzCompressInit 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
<    UInt32 s_8;
<     short s_10;
<     char s_9;
<    Int32 s_12;
<    Int32 s_28;
<    Int32 s_18;
<    Int32 s_30;
<    UInt32 s_27;
<    Int32 s_1;
<    Int32 s_2;
<    UInt32 s_6;
<    UInt32 s_5;
<    UInt32 s_4;
<    bz_stream *s_0;
< 
<    if (0)  
< 
<    if (    
<               
<              0)
<       
< 
<    if (  0)   
<    if (bzalloc  NULL)   default_bzalloc;
<    if (bzfree  NULL)   
< 
<      BZALLOC(  );
<    if (  NULL)  
<      
< 
<    arr1  NULL;
<    arr2  NULL;
<    ftab  NULL
< 
<             * 
<      BZALLOC(                     );
<      ( +  sizeof(UInt32) );
<      (                sizeof(UInt32) );
< 
<    if (          NULL) 
< 
<                
<                  
<                   
<            
<          
<                  9;
<    s_28         = verbosity;
<    s_12        = 0;
< 
<    s_9             = (unsigned char*)s_5;
<    s_10              = *(unsigned short*)s_4;
<    s->zbits             = NULL;
<    s_8               = *(UInt32*)s_4;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
<    ;
<    ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< void  handle_compress ( void )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    Int32 s_1;
<    bz_stream s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (&s_0 != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s_1) 
<    return BZ_OK; 
< }
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
< {
<    EState* s;
<    bz_stream s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (&s_0 != strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
<    Int32 s_12;
<    Int32 s_11;
<    Bool s_10;
<    UInt32 s_26;
<    UInt32 s_7;
<    Int32 s_8;
<    Int32 s_1;
<    bz_stream *s_0;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s_0                  = strm;
<    strm->state              = s;
<    s_1                 = BZ_X_MAGIC_1;
<    s_8                = 0;
<    s_7                = 0;
<    s_26 = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s_10       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s_11           = 0;
<    s_12             = verbosity;
< 
<    return BZ_OK;
< }
< 
< 
< 
< static
< void unRLE_obuf_to_output_FAST ( void )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( void )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s_0 != strm) return BZ_PARAM_ERROR;
< 
<    while (True) 
< 
<    AssertH ( 0, 1 );
< 
<    return 0;  
< }
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
<    DState* s;
<    bz_stream s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (&s_0 != strm) return BZ_PARAM_ERROR;
< 
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 0) ||
<        (verbosity < 0 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 0;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
<    char bzf_4_4;
<    unsigned int bzf_4_5;
<    char *bzf_4_0;
<    unsigned int bzf_4_1;
<    Bool bzf_3;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
<    if (!(bzf_3))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf_4_1 = len;
<    bzf_4_0  = buf;
< 
<    while (True) 
<       bzf_4_5 = BZ_MAX_UNUSED;
<       bzf_4_4 = *bzf->buf;
<       ret = 0;
<       if (0 != BZ_RUN_OK)
<          ;
< 
<       if (bzf_4_5 < BZ_MAX_UNUSED) 
< 
<       if (len == 0)
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = (bzFile*)b;
<    Bool bzf_3;
< 
<    if (bzf == NULL)
<       ;
<    if (!(bzf_3))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    char *bzf_4_0;
<    unsigned int bzf_4_1;
<    Bool bzf_3;
<    Int32 bzf_2;
<    Bool bzf_6;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       ;
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf_6 = False;
<    bzf->handle        = f;
<    bzf_2          = 0;
<    bzf_3       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) 
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf_4_1 = 0;
<    bzf_4_0  = bzf->buf;
< 
<    bzf_6 = True;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
<    Bool bzf_6;
<    Bool bzf_3;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       ;
< 
<    if (bzf_3)
<       ;
< 
<    if (bzf_6)
<       (void)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
<    char *bzf_4_4;
<    unsigned int bzf_4_5;
<    Bool bzf_3;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
< 
<    if (bzf_3)
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf_4_5 = len;
<    bzf_4_4 = buf;
< 
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
<    char bzf_4_0;
<    unsigned int bzf_4_1;
<    Int32 bzf_5;
<    if (bzf == NULL)
<       ;
<    if (bzf_5 != BZ_STREAM_END)
<       ;
<    if (unused == NULL || nUnused == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf_4_1;
<    *unused = &bzf_4_0;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    unsigned int strm_5;
<    unsigned int strm_1;
<    char strm_4;
<    char strm_0;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 0) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 0;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = 0;
<    if (0 != BZ_OK) return 0;
< 
<    strm_0 = *source;
<    strm_4 = *dest;
<    strm_1 = sourceLen;
<    strm_5 = *destLen;
< 
<    ret = 0;
<    if (0 == BZ_FINISH_OK) goto output_overflow;
<    if (0 != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm_5;   
<    0;
<    return BZ_OK;
< 
<    output_overflow:
<    0;
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    0;
<    return 0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    unsigned int strm_5;
<    unsigned int strm_1;
<    char strm_4;
<    char strm_0;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = 0;
<    if (0 != BZ_OK) return 0;
< 
<    strm_0 = *source;
<    strm_4 = *dest;
<    strm_1 = sourceLen;
<    strm_5 = *destLen;
< 
<    ret = 0;
<    if (0 == BZ_OK) goto output_overflow_or_eof;
<    if (0 != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm_5;
<    0;
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm_5 > 0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    0;
<    return 0; 
< }
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
< {
<    return BZ_VERSION;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int d,             
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) 
<       return 0;
<     else 
<       return -1;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK)
<       return len;
<    else
<       return -1;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< {
<    
<    return 0;
< }
< 
< 
< 
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing)
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK)
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       
<    else
<    if(fp!=stdin && fp!=stdout)
<       fclose(fp);
<    
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
< static char *bzerrorstrings_0 = "OK";
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(((bzFile *)b)->lastErr>0) err = 0;
<    *errnum = 0;
<    return "OK";
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
< #include <errno.h>
< 
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC(root, name) \
<       root=snocString((root), (name))
< 
< #   define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
< 
< #   define SET_BINARY_MODE(d) 
< 
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
< #define OM_UNZ           2
< #define OM_TEST          3
< 
< 
< 
< 
< #define FILE_NAME_LEN 4
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
<    UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< 
< #endif
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_N_SUFFIX_PAIRS 4
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ISFLAG(s) (strcmp(aa->name, (s))==0)
< 
< void  main ( void )
< ;
< 
< 
< 
< 
<  
\ No newline at end of file
---
> #define BZ_N_
\ No newline at end of file
1107,1108c1107,1108
<                  9;
<    s_28         = verbosity;
---
>                  9
>              ;
1108c1108
<    s_28         = verbosity;
---
>             = verbosity;
1108c1108
<    s_28         = verbosity;
---
>              verbosity;
(88.2 %, 24271 bytes)
1108,1109c1108,1109
<              ;
<    s_12        = 0;
---
>              
>             ;
1109c1109
<    s_12        = 0;
---
>            = 0;
1109c1109
<    s_12        = 0;
---
>             0;
(88.2 %, 24264 bytes)
1109c1109
<             ;
---
>             
1111c1111
<    s_9             = (unsigned char*)s_5;
---
>                  unsigned char*)s_5;
1111c1111
<    s_9             = (unsigned char*)s_5;
---
>                 = (unsigned char*)s_5;
1111c1111
<    s_9             = (unsigned char*)s_5;
---
>                  (unsigned char*)s_5;
1111c1111
<    s_9             = (unsigned char*)s_5;
---
>                 = unsigned char*)s_5;
1111c1111
<    s_9             = (unsigned char*)s_5;
---
>                  unsigned char*)s_5;
1111c1111
<    s_9             = (unsigned char*)s_5;
---
>                 = ( char*)s_5;
1111c1111
<    s_9             = (unsigned char*)s_5;
---
>                  ( char*)s_5;
1267,2190c1267
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s_0 != strm) return BZ_PARAM_ERROR;
< 
<    while (True) 
< 
<    AssertH ( 0, 1 );
< 
<    return 0;  
< }
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
<    DState* s;
<    bz_stream s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (&s_0 != strm) return BZ_PARAM_ERROR;
< 
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(e)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 0) ||
<        (verbosity < 0 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 0;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
<    char bzf_4_4;
<    unsigned int bzf_4_5;
<    char *bzf_4_0;
<    unsigned int bzf_4_1;
<    Bool bzf_3;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
<    if (!(bzf_3))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf_4_1 = len;
<    bzf_4_0  = buf;
< 
<    while (True) 
<       bzf_4_5 = BZ_MAX_UNUSED;
<       bzf_4_4 = *bzf->buf;
<       ret = 0;
<       if (0 != BZ_RUN_OK)
<          ;
< 
<       if (bzf_4_5 < BZ_MAX_UNUSED) 
< 
<       if (len == 0)
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = (bzFile*)b;
<    Bool bzf_3;
< 
<    if (bzf == NULL)
<       ;
<    if (!(bzf_3))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    char *bzf_4_0;
<    unsigned int bzf_4_1;
<    Bool bzf_3;
<    Int32 bzf_2;
<    Bool bzf_6;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       ;
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf_6 = False;
<    bzf->handle        = f;
<    bzf_2          = 0;
<    bzf_3       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) 
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf_4_1 = 0;
<    bzf_4_0  = bzf->buf;
< 
<    bzf_6 = True;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
<    Bool bzf_6;
<    Bool bzf_3;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       ;
< 
<    if (bzf_3)
<       ;
< 
<    if (bzf_6)
<       (void)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
<    char *bzf_4_4;
<    unsigned int bzf_4_5;
<    Bool bzf_3;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
< 
<    if (bzf_3)
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf_4_5 = len;
<    bzf_4_4 = buf;
< 
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
<    char bzf_4_0;
<    unsigned int bzf_4_1;
<    Int32 bzf_5;
<    if (bzf == NULL)
<       ;
<    if (bzf_5 != BZ_STREAM_END)
<       ;
<    if (unused == NULL || nUnused == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf_4_1;
<    *unused = &bzf_4_0;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    unsigned int strm_5;
<    unsigned int strm_1;
<    char strm_4;
<    char strm_0;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 0) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 0;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = 0;
<    if (0 != BZ_OK) return 0;
< 
<    strm_0 = *source;
<    strm_4 = *dest;
<    strm_1 = sourceLen;
<    strm_5 = *destLen;
< 
<    ret = 0;
<    if (0 == BZ_FINISH_OK) goto output_overflow;
<    if (0 != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm_5;   
<    0;
<    return BZ_OK;
< 
<    output_overflow:
<    0;
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    0;
<    return 0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    unsigned int strm_5;
<    unsigned int strm_1;
<    char strm_4;
<    char strm_0;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = 0;
<    if (0 != BZ_OK) return 0;
< 
<    strm_0 = *source;
<    strm_4 = *dest;
<    strm_1 = sourceLen;
<    strm_5 = *destLen;
< 
<    ret = 0;
<    if (0 == BZ_OK) goto output_overflow_or_eof;
<    if (0 != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm_5;
<    0;
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm_5 > 0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    0;
<    return 0; 
< }
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
< {
<    return BZ_VERSION;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int d,             
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) 
<       return 0;
<     else 
<       return -1;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK)
<       return len;
<    else
<       return -1;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< {
<    
<    return 0;
< }
< 
< 
< 
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing)
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK)
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       
<    else
<    if(fp!=stdin && fp!=stdout)
<       fclose(fp);
<    
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
< static char *bzerrorstrings_0 = "OK";
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(((bzFile *)b)->lastErr>0) err = 0;
<    *errnum = 0;
<    return "OK";
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
< #include <errno.h>
< 
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC(root, name) \
<       root=snocString((root), (name))
< 
< #   define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
< 
< #   define SET_BINARY_MODE(d) 
< 
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
< #define OM_UNZ           2
< #define OM_TEST          3
< 
< 
< 
< 
< #define FILE_NAME_LEN 4
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
<    UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< 
< #endif
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_N_SUFFIX_PAIRS 4
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ISFLAG(s) (strcmp(aa->name, (s))==0)
< 
< void  main ( void )
< ;
< 
< 
< 
< 
<  
\ No newline at end of file
---
>    s = strm->state;
\ No newline at end of file
Error in tempdir() using /tmp/creduce-XXXXXX: Could not create directory /tmp/creduce-dKAkXK: No space left on device at /usr/local/bin/creduce line 220.
Command exited with non-zero status 28
2964.15user 714.87system 45:47.50elapsed 133%CPU (0avgtext+0avgdata 59996maxresident)k
81304inputs+78278496outputs (509major+219159058minor)pagefaults 0swaps
