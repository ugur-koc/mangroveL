===< 31499 >===
running 2 interestingness tests in parallel
===< pass_includes :: 0 >===
113d112
< #include <stdio.h>
116d115
< #   include <windows.h>
329d328
< #include <stdlib.h>
332d331
< #include <stdio.h>
(0.0 %, 204912 bytes)
328d327
< #include <stdlib.h>
331d330
< #include <stdio.h>
332d331
< #include <ctype.h>
(0.0 %, 204893 bytes)
331d330
< #include <ctype.h>
332d331
< #include <string.h>
5053d5052
< #include <stdio.h>
(0.0 %, 204874 bytes)
331d330
< #include <string.h>
5052d5051
< #include <stdio.h>
(0.0 %, 204854 bytes)
5051d5050
< #include <stdio.h>
5052d5051
< #include <stdlib.h>
5053d5052
< #include <string.h>
(0.0 %, 204835 bytes)
5051d5050
< #include <stdlib.h>
5052d5051
< #include <string.h>
5053d5052
< #include <signal.h>
5054d5053
< #include <math.h>
(0.1 %, 204815 bytes)
5051d5050
< #include <string.h>
5052d5051
< #include <signal.h>
5053d5052
< #include <math.h>
(0.1 %, 204795 bytes)
5051d5050
< #include <signal.h>
5052d5051
< #include <math.h>
5053d5052
< #include <errno.h>
5054d5053
< #include <ctype.h>
(0.1 %, 204777 bytes)
5052d5051
< #include <errno.h>
5053d5052
< #include <ctype.h>
5066d5065
< #   include <fcntl.h>
5067d5066
< #   include <sys/types.h>
5068d5067
< #   include <utime.h>
5069d5068
< #   include <unistd.h>
(0.1 %, 204758 bytes)
5065d5064
< #   include <fcntl.h>
5066d5065
< #   include <sys/types.h>
5067d5066
< #   include <utime.h>
5068d5067
< #   include <unistd.h>
5069d5068
< #   include <sys/stat.h>
(0.1 %, 204732 bytes)
5066d5065
< #   include <utime.h>
5067d5066
< #   include <unistd.h>
5068d5067
< #   include <sys/stat.h>
(0.1 %, 204709 bytes)
5067d5066
< #   include <sys/stat.h>
5068d5067
< #   include <sys/times.h>
5091d5090
< #     include <io.h>
(0.1 %, 204684 bytes)
5067d5066
< #   include <sys/times.h>
5090d5089
< #     include <io.h>
5091d5090
< #     include <fcntl.h>
(0.1 %, 204658 bytes)
5089d5088
< #     include <io.h>
5090d5089
< #     include <fcntl.h>
(0.1 %, 204637 bytes)
5089d5088
< #     include <fcntl.h>
5104d5103
< #     include <io.h>
(0.2 %, 204613 bytes)
5103d5102
< #     include <io.h>
5104d5103
< #     include <fcntl.h>
(0.2 %, 204592 bytes)
5103d5102
< #     include <fcntl.h>
5117d5116
< #   include <io.h>
5118d5117
< #   include <fcntl.h>
(0.2 %, 204568 bytes)
5116d5115
< #   include <io.h>
5117d5116
< #   include <fcntl.h>
5118d5117
< #   include <sys\stat.h>
(0.2 %, 204549 bytes)
5116d5115
< #   include <fcntl.h>
5117d5116
< #   include <sys\stat.h>
(0.2 %, 204527 bytes)
5116d5115
< #   include <sys\stat.h>
(0.2 %, 204502 bytes)
===< pass_unifdef :: 0 >===
357d356
< #if BZ_DEBUG
364,366d362
< #else
< #define AssertD(cond,msg) /* */
< #endif
357,364d356
< #if BZ_DEBUG
< #define AssertD(cond,msg) \
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
< #else
366d357
< #endif
120d119
< #   ifdef BZ_EXPORT
123,127d121
< #   else
<    /* import windows dll dynamically */
< #   define BZ_API(func) (WINAPI * func)
< #   define BZ_EXTERN
< #   endif
(0.2 %, 204444 bytes)
120d119
< #   ifdef BZ_EXPORT
123,127d121
< #   else
<    /* import windows dll dynamically */
< #   define BZ_API(func) (WINAPI * func)
< #   define BZ_EXTERN
< #   endif
120,123d119
< #   ifdef BZ_EXPORT
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #   else
127d122
< #   endif
108,111d107
< #ifndef BZ_IMPORT
< #define BZ_EXPORT
< #endif
< 
(0.3 %, 204304 bytes)
108,111d107
< #ifndef BZ_IMPORT
< #define BZ_EXPORT
< #endif
< 
108d107
< #ifndef BZ_IMPORT
110d108
< #endif
5105,5106d5104
< #if BZ_LCCWIN32
< 
5126,5127d5123
< 
< #endif /* BZ_LCCWIN32 */
5105,5129d5104
< #if BZ_LCCWIN32
< 
< #   define NORETURN       /**/
< #   define PATH_SEP       '\\'
< #   define MY_LSTAT       _stat
< #   define MY_STAT        _stat
< #   define MY_S_ISREG(x)  ((x) & _S_IFREG)
< #   define MY_S_ISDIR(x)  ((x) & _S_IFDIR)
< 
< #   define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
< 
< #   define APPEND_FILESPEC(root, name)                \
<       root = snocString ((root), (name))
< 
< #   define SET_BINARY_MODE(fd)                        \
<       do {                                            \
<          int retVal = setmode ( fileno ( fd ),        \
<                                 O_BINARY );           \
<          ERROR_IF_MINUS_ONE ( retVal );               \
<       } while ( 0 )
< 
< #endif /* BZ_LCCWIN32 */
< 
< 
(0.3 %, 204260 bytes)
5101,5102d5100
< #if BZ_LCCWIN32
< 
5122,5123d5119
< 
< #endif /* BZ_LCCWIN32 */
5101,5125d5100
< #if BZ_LCCWIN32
< 
< #   define NORETURN       /**/
< #   define PATH_SEP       '\\'
< #   define MY_LSTAT       _stat
< #   define MY_STAT        _stat
< #   define MY_S_ISREG(x)  ((x) & _S_IFREG)
< #   define MY_S_ISDIR(x)  ((x) & _S_IFDIR)
< 
< #   define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
< 
< #   define APPEND_FILESPEC(root, name)                \
<       root = snocString ((root), (name))
< 
< #   define SET_BINARY_MODE(fd)                        \
<       do {                                            \
<          int retVal = setmode ( fileno ( fd ),        \
<                                 O_BINARY );           \
<          ERROR_IF_MINUS_ONE ( retVal );               \
<       } while ( 0 )
< 
< #endif /* BZ_LCCWIN32 */
< 
< 
160,226d159
< #ifndef BZ_NO_STDIO
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< #endif
< 
264,300d196
< #ifndef BZ_NO_STDIO
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< #endif
< 
320,322d215
< #ifndef BZ_NO_STDIO
< #endif
< 
343,365d235
< #ifndef BZ_NO_STDIO
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) BZ2_bz__AssertH__fail ( errcode ); }
< #define AssertD(cond,msg) \
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
< #define VPrintf1(zf,za1) \
<    fprintf(stderr,zf,za1)
< #define VPrintf2(zf,za1,za2) \
<    fprintf(stderr,zf,za1,za2)
< #define VPrintf3(zf,za1,za2,za3) \
<    fprintf(stderr,zf,za1,za2,za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
<    fprintf(stderr,zf,za1,za2,za3,za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
< #else
376d245
< #endif
771d639
< #ifdef BZ_NO_STDIO
775d642
< #endif
3448,3494d3314
< #ifndef BZ_NO_STDIO
< void BZ2_bz__AssertH__fail ( int errcode )
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
< #endif
4265,4625d4084
< #ifndef BZ_NO_STDIO
< /*---------------------------------------------------*/
< /*--- File I/O stuff                              ---*/
< /*---------------------------------------------------*/
< 
< #define BZ_SETERR(eee)                    \
< {                                         \
<    if (bzerror != NULL) *bzerror = eee;   \
<    if (bzf != NULL) bzf->lastErr = eee;   \
< }
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< /*---------------------------------------------*/
< static Bool myfeof ( FILE* f )
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
< 
< 
< /*---------------------------------------------------*/
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
< 
< 
< /*---------------------------------------------------*/
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return 0; };
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
< 
<    return 0; /*not reached*/
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (bzf->lastErr != BZ_STREAM_END)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (unused == NULL || nUnused == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
< 
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
< #endif
< 
< 
4755,4943d4213
< 
< 
< #ifndef BZ_NO_STDIO
< /*---------------------------------------------------*/
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   /* no use when bzdopen */
<                  int fd,             /* no use when bzdopen */
<                  const char *mode,
<                  int open_mode)      /* bzopen: 0, bzdopen:1 */
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   /* binary mode */
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
< #ifdef BZ_STRICT_ANSI
<       fp = NULL;
< #else
<       fp = fdopen(fd,mode2);
< #endif
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       /* Guard against total chaos and anarchy -- JRS */
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
< 
< 
< /*---------------------------------------------------*/
< /*--
<    open file for read or write.
<       ex) bzopen("file","w9")
<       case path="" or NULL => use stdin or stdout.
< --*/
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(path,-1,mode,/*bzopen*/0);
< }
< 
< 
< /*---------------------------------------------------*/
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,/*bzdopen*/1);
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< {
<    /* do nothing now... */
<    return 0;
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) {return;}
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< /*--
<    return last error code 
< --*/
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
< #endif
160d159
< #ifndef BZ_NO_STDIO
225d223
< #endif
264d261
< #ifndef BZ_NO_STDIO
299d295
< #endif
320,322d315
< #ifndef BZ_NO_STDIO
< #endif
< 
343d335
< #ifndef BZ_NO_STDIO
365,376d356
< #else
< extern void bz_internal_error ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) bz_internal_error ( errcode ); }
< #define AssertD(cond,msg) /* */
< #define VPrintf0(zf) /* */
< #define VPrintf1(zf,za1) /* */
< #define VPrintf2(zf,za1,za2) /* */
< #define VPrintf3(zf,za1,za2,za3) /* */
< #define VPrintf4(zf,za1,za2,za3,za4) /* */
< #define VPrintf5(zf,za1,za2,za3,za4,za5) /* */
< #endif
771,776d750
< #ifdef BZ_NO_STDIO
< #ifndef NULL
< #define NULL 0
< #endif
< #endif
< 
3448d3421
< #ifndef BZ_NO_STDIO
3494d3466
< #endif
4265d4236
< #ifndef BZ_NO_STDIO
4623d4593
< #endif
4757d4726
< #ifndef BZ_NO_STDIO
4943d4911
< #endif
(0.7 %, 203528 bytes)
160d159
< #ifndef BZ_NO_STDIO
225d223
< #endif
264d261
< #ifndef BZ_NO_STDIO
299d295
< #endif
320,322d315
< #ifndef BZ_NO_STDIO
< #endif
< 
343d335
< #ifndef BZ_NO_STDIO
365,376d356
< #else
< extern void bz_internal_error ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) bz_internal_error ( errcode ); }
< #define AssertD(cond,msg) /* */
< #define VPrintf0(zf) /* */
< #define VPrintf1(zf,za1) /* */
< #define VPrintf2(zf,za1,za2) /* */
< #define VPrintf3(zf,za1,za2,za3) /* */
< #define VPrintf4(zf,za1,za2,za3,za4) /* */
< #define VPrintf5(zf,za1,za2,za3,za4,za5) /* */
< #endif
771,776d750
< #ifdef BZ_NO_STDIO
< #ifndef NULL
< #define NULL 0
< #endif
< #endif
< 
3448d3421
< #ifndef BZ_NO_STDIO
3494d3466
< #endif
4265d4236
< #ifndef BZ_NO_STDIO
4623d4593
< #endif
4757d4726
< #ifndef BZ_NO_STDIO
4943d4911
< #endif
4805d4804
< #ifdef BZ_STRICT_ANSI
4807,4809d4805
< #else
<       fp = fdopen(fd,mode2);
< #endif
(1.0 %, 202886 bytes)
4774,4776d4773
< #ifdef BZ_STRICT_ANSI
<       fp = NULL;
< #else
4778d4774
< #endif
5018d5017
< #if BZ_UNIX
5065d5063
< #endif /* BZ_UNIX */
5844d5841
< #  if BZ_UNIX
5852,5854d5848
< #  else
<    return fopen(name, mode);
< #  endif
5914d5907
< #if BZ_UNIX
5917d5909
< #endif
5922d5913
< #  if BZ_UNIX
5927d5917
< #  endif
5934d5923
< #  if BZ_UNIX
5951d5939
< #  endif
5959d5946
< #  if BZ_UNIX
5964,5971d5950
< #  else /* ! BZ_UNIX */
<    /* On non-unix (Win* platforms), wildcard characters are not allowed in 
<     * filenames.
<     */
<    for (; *name != '\0'; name++)
<       if (*name == '?' || *name == '*') return True;
<    return False;
< #  endif /* BZ_UNIX */
6530d6508
< #     if BZ_UNIX
6532d6509
< #     endif
6682d6658
< #  if BZ_UNIX
6686d6661
< #  endif
6827d6801
< #     if BZ_UNIX
6829d6802
< #     endif
5018,5066d5017
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC(root, name) \
<       root=snocString((root), (name))
< 
< #   define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
< 
< #   define SET_BINARY_MODE(fd) /**/
< 
< #   ifdef __GNUC__
< #      define NORETURN __attribute__ ((noreturn))
< #   else
< #      define NORETURN /**/
< #   endif
< 
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< #endif /* BZ_UNIX */
< 
5844,5852d5794
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
5854d5795
< #  endif
5914,5917d5854
< #if BZ_UNIX
< static 
< struct MY_STAT fileMetaInfo;
< #endif
5922,5927d5858
< #  if BZ_UNIX
<    IntNative retVal;
<    /* Note use of stat here, not lstat. */
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
5934,5951d5864
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    /* chown() will in many cases return with EPERM, which can
<       be safely ignored.
<    */
< #  endif
5959,5964d5871
< #  if BZ_UNIX
<    /* On unix, files can contain any characters and the file expansion
<     * is performed by the shell.
<     */
<    return False;
< #  else /* ! BZ_UNIX */
5971d5877
< #  endif /* BZ_UNIX */
6530,6532d6435
< #     if BZ_UNIX
<       "\n"
< #     endif
6682,6686d6584
< #  if BZ_UNIX
< #  ifndef __DJGPP__
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< #  endif
6827,6829d6724
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
61,302d60
< #ifndef _BZLIB_H
< #define _BZLIB_H
< 
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< /* Need a definitition for FILE */
< #include <stdio.h>
< 
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< #endif
< 
< 
< /*-- Core (low-level) library functions --*/
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< /*-- High(er) level library functions --*/
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< /*-- Utility functions --*/
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< #ifdef __cplusplus
< }
< #endif
< 
< #endif
< 
(1.0 %, 202834 bytes)
5014,5062d5013
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC(root, name) \
<       root=snocString((root), (name))
< 
< #   define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
< 
< #   define SET_BINARY_MODE(fd) /**/
< 
< #   ifdef __GNUC__
< #      define NORETURN __attribute__ ((noreturn))
< #   else
< #      define NORETURN /**/
< #   endif
< 
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< #endif /* BZ_UNIX */
< 
5840,5848d5790
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
5850d5791
< #  endif
5910,5913d5850
< #if BZ_UNIX
< static 
< struct MY_STAT fileMetaInfo;
< #endif
5918,5923d5854
< #  if BZ_UNIX
<    IntNative retVal;
<    /* Note use of stat here, not lstat. */
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
5930,5947d5860
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    /* chown() will in many cases return with EPERM, which can
<       be safely ignored.
<    */
< #  endif
5955,5960d5867
< #  if BZ_UNIX
<    /* On unix, files can contain any characters and the file expansion
<     * is performed by the shell.
<     */
<    return False;
< #  else /* ! BZ_UNIX */
5967d5873
< #  endif /* BZ_UNIX */
6526,6528d6431
< #     if BZ_UNIX
<       "\n"
< #     endif
6678,6682d6580
< #  if BZ_UNIX
< #  ifndef __DJGPP__
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< #  endif
6823,6825d6720
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
61,302d60
< #ifndef _BZLIB_H
< #define _BZLIB_H
< 
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< /* Need a definitition for FILE */
< #include <stdio.h>
< 
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< #endif
< 
< 
< /*-- Core (low-level) library functions --*/
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< /*-- High(er) level library functions --*/
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< /*-- Utility functions --*/
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< #ifdef __cplusplus
< }
< #endif
< 
< #endif
< 
61d60
< #ifndef _BZLIB_H
299,300d297
< #endif
< 
311,747d310
< #ifndef _BZLIB_PRIVATE_H
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< /*-- General stuff. --*/
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #ifndef __GNUC__
< #define __inline__  /* */
< #endif 
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) BZ2_bz__AssertH__fail ( errcode ); }
< #define AssertD(cond,msg) \
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
< #define VPrintf1(zf,za1) \
<    fprintf(stderr,zf,za1)
< #define VPrintf2(zf,za1,za2) \
<    fprintf(stderr,zf,za1,za2)
< #define VPrintf3(zf,za1,za2,za3) \
<    fprintf(stderr,zf,za1,za2,za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
<    fprintf(stderr,zf,za1,za2,za3,za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
< 
< 
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
< 
< 
< /*-- Header bytes. --*/
< 
< #define BZ_HDR_B 0x42   /* 'B' */
< #define BZ_HDR_Z 0x5a   /* 'Z' */
< #define BZ_HDR_h 0x68   /* 'h' */
< #define BZ_HDR_0 0x30   /* '0' */
<   
< /*-- Constants for the back end. --*/
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< /*-- Stuff for randomising repetitive blocks. --*/
< 
< extern Int32 BZ2_rNums[512];
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
< 
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
< 
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
<    s->rNToGo--;
< 
< 
< 
< /*-- Stuff for doing CRCs. --*/
< 
< extern UInt32 BZ2_crc32Table[256];
< 
< #define BZ_INITIALISE_CRC(crcVar)              \
< {                                              \
<    crcVar = 0xffffffffL;                       \
< }
< 
< #define BZ_FINALISE_CRC(crcVar)                \
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
< 
< #define BZ_UPDATE_CRC(crcVar,cha)              \
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
< 
< 
< 
< /*-- States and modes for compression. --*/
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< /*-- Structure holding all the compression-side stuff. --*/
< 
< typedef
<    struct {
<       /* pointer back to the struct bz_stream */
<       bz_stream* strm;
< 
<       /* mode this stream is in, and whether inputting */
<       /* or outputting data */
<       Int32    mode;
<       Int32    state;
< 
<       /* remembers avail_in when flush/finish requested */
<       UInt32   avail_in_expect;
< 
<       /* for doing the block sorting */
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       /* aliases for arr1 and arr2 */
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       /* for deciding when to use the fallback sorting algorithm */
<       Int32    workFactor;
< 
<       /* run-length-encoding of the input */
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       /* input and output limits and current posns */
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       /* map of bytes used in block */
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       /* the buffer for bit stream creation */
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       /* block and combined CRCs */
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       /* misc administratium */
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       /* stuff for coding the MTF values */
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       /* second dimension: only 3 needed; 4 makes index calculations faster */
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< /*-- externs for compression. --*/
< 
< extern void 
< BZ2_blockSort ( EState* );
< 
< extern void 
< BZ2_compressBlock ( EState*, Bool );
< 
< extern void 
< BZ2_bsInitWrite ( EState* );
< 
< extern void 
< BZ2_hbAssignCodes ( Int32*, UChar*, Int32, Int32, Int32 );
< 
< extern void 
< BZ2_hbMakeCodeLengths ( UChar*, Int32*, Int32, Int32 );
< 
< 
< 
< /*-- states for decompression. --*/
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
< #define BZ_X_BLKHDR_2    15
< #define BZ_X_BLKHDR_3    16
< #define BZ_X_BLKHDR_4    17
< #define BZ_X_BLKHDR_5    18
< #define BZ_X_BLKHDR_6    19
< #define BZ_X_BCRC_1      20
< #define BZ_X_BCRC_2      21
< #define BZ_X_BCRC_3      22
< #define BZ_X_BCRC_4      23
< #define BZ_X_RANDBIT     24
< #define BZ_X_ORIGPTR_1   25
< #define BZ_X_ORIGPTR_2   26
< #define BZ_X_ORIGPTR_3   27
< #define BZ_X_MAPPING_1   28
< #define BZ_X_MAPPING_2   29
< #define BZ_X_SELECTOR_1  30
< #define BZ_X_SELECTOR_2  31
< #define BZ_X_SELECTOR_3  32
< #define BZ_X_CODING_1    33
< #define BZ_X_CODING_2    34
< #define BZ_X_CODING_3    35
< #define BZ_X_MTF_1       36
< #define BZ_X_MTF_2       37
< #define BZ_X_MTF_3       38
< #define BZ_X_MTF_4       39
< #define BZ_X_MTF_5       40
< #define BZ_X_MTF_6       41
< #define BZ_X_ENDHDR_2    42
< #define BZ_X_ENDHDR_3    43
< #define BZ_X_ENDHDR_4    44
< #define BZ_X_ENDHDR_5    45
< #define BZ_X_ENDHDR_6    46
< #define BZ_X_CCRC_1      47
< #define BZ_X_CCRC_2      48
< #define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< /*-- Constants for the fast MTF decoder. --*/
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< /*-- Structure holding all the decompression-side stuff. --*/
< 
< typedef
<    struct {
<       /* pointer back to the struct bz_stream */
<       bz_stream* strm;
< 
<       /* state indicator for this stream */
<       Int32    state;
< 
<       /* for doing the final run-length decoding */
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       /* the buffer for bit stream reading */
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       /* misc administratium */
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       /* for undoing the Burrows-Wheeler transform */
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       /* for undoing the Burrows-Wheeler transform (FAST) */
<       UInt32   *tt;
< 
<       /* for undoing the Burrows-Wheeler transform (SMALL) */
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       /* stored and calculated CRCs */
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       /* map of bytes used in block */
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       /* for decoding the MTF values */
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       /* save area for scalars in the main decompress code */
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< /*-- Macros for decompression. --*/
< 
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
<     cccc = (UChar)(s->tPos & 0xff);           \
<     s->tPos >>= 8;
< 
< #define BZ_GET_FAST_C(cccc)                   \
<     c_tPos = c_tt[c_tPos];                    \
<     cccc = (UChar)(c_tPos & 0xff);            \
<     c_tPos >>= 8;
< 
< #define SET_LL4(i,n)                                          \
<    { if (((i) & 0x1) == 0)                                    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
<    }
< 
< #define GET_LL4(i)                             \
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
< 
< #define SET_LL(i,n)                          \
<    { s->ll16[i] = (UInt16)(n & 0x0000ffff);  \
<      SET_LL4(i, n >> 16);                    \
<    }
< 
< #define GET_LL(i) \
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
< 
< #define BZ_GET_SMALL(cccc)                            \
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
<       s->tPos = GET_LL(s->tPos);
< 
< 
< /*-- externs for decompression. --*/
< 
< extern Int32 
< BZ2_indexIntoF ( Int32, Int32* );
< 
< extern Int32 
< BZ2_decompress ( DState* );
< 
< extern void 
< BZ2_hbCreateDecodeTables ( Int32*, Int32*, Int32*, UChar*,
<                            Int32,  Int32, Int32 );
< 
< 
< #endif
< 
311d310
< #ifndef _BZLIB_PRIVATE_H
744,746d742
< 
< 
< #endif
(1.0 %, 202809 bytes)
308d307
< #ifndef _BZLIB_PRIVATE_H
741,743d739
< 
< 
< #endif
110d109
< #ifdef _WIN32
117,120d115
< #else
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< #endif
110,117d109
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
120d111
< #endif
4984,4990d4974
< 
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
(1.1 %, 202775 bytes)
110,117d109
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
120d111
< #endif
4980,4986d4970
< 
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
4981,4987d4980
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
< 
5045d5037
< #   ifdef __CYGWIN__
5053d5044
< #   endif
5045,5053d5044
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
(1.2 %, 202468 bytes)
5029,5037d5028
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
5015d5014
< #   ifdef __DJGPP__
5027d5025
< #   endif
6656,6658d6653
< #  ifndef __DJGPP__
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
5015,5028d5014
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
6656d6641
< #  ifndef __DJGPP__
6658d6642
< #  endif
(1.4 %, 202097 bytes)
5015,5028d5014
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
6647d6632
< #  ifndef __DJGPP__
6649d6633
< #  endif
319,322d318
< #ifndef __GNUC__
< #define __inline__  /* */
< #endif 
< 
5009d5004
< #   ifdef __GNUC__
5011,5013d5005
< #   else
< #      define NORETURN /**/
< #   endif
(1.6 %, 201603 bytes)
319d318
< #ifndef __GNUC__
321d319
< #endif 
5009,5011d5006
< #   ifdef __GNUC__
< #      define NORETURN __attribute__ ((noreturn))
< #   else
5013d5007
< #   endif
63d62
< #ifdef __cplusplus
65d63
< #endif
287d284
< #ifdef __cplusplus
289d285
< #endif
63,66d62
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
286,289d281
< 
< #ifdef __cplusplus
< }
< #endif
(1.7 %, 201490 bytes)
63,66d62
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
286,289d281
< 
< #ifdef __cplusplus
< }
< #endif
(1.7 %, 201421 bytes)
===< pass_comments :: 0 >===
1,55c1,5
< /*-------------------------------------------------------------*/
< /*--- Public header file for the library.                   ---*/
< /*---                                               bzlib.h ---*/
< /*-------------------------------------------------------------*/
< 
< /*--
<   This file is a part of bzip2 and/or libbzip2, a program and
<   library for lossless, block-sorting data compression.
< 
<   Copyright (C) 1996-2002 Julian R Seward.  All rights reserved.
< 
<   Redistribution and use in source and binary forms, with or without
<   modification, are permitted provided that the following conditions
<   are met:
< 
<   1. Redistributions of source code must retain the above copyright
<      notice, this list of conditions and the following disclaimer.
< 
<   2. The origin of this software must not be misrepresented; you must 
<      not claim that you wrote the original software.  If you use this 
<      software in a product, an acknowledgment in the product 
<      documentation would be appreciated but is not required.
< 
<   3. Altered source versions must be plainly marked as such, and must
<      not be misrepresented as being the original software.
< 
<   4. The name of the author may not be used to endorse or promote 
<      products derived from this software without specific prior written 
<      permission.
< 
<   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
<   OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
<   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
<   ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
<   DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
<   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
<   GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
<   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
<   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
<   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
<   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
< 
<   Julian Seward, Cambridge, UK.
<   jseward@acm.org
<   bzip2/libbzip2 version 1.0 of 21 March 2000
< 
<   This program is based on (at least) the work of:
<      Mike Burrows
<      David Wheeler
<      Peter Fenwick
<      Alistair Moffat
<      Radford Neal
<      Ian H. Witten
<      Robert Sedgewick
<      Jon L. Bentley
---
>  
> 
> 
> 
> 
57,58d6
<   For more information on these sources, see the manual.
< --*/
103c51
< /* Need a definitition for FILE */
---
> 
110c58
< /*-- Core (low-level) library functions --*/
---
> 
144c92
< /*-- High(er) level library functions --*/
---
> 
212c160
< /*-- Utility functions --*/
---
> 
234,242c182
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
---
> 
283,289c223,229
< /*-------------------------------------------------------------*/
< /*--- end                                           bzlib.h ---*/
< /*-------------------------------------------------------------*/
< /*-------------------------------------------------------------*/
< /*--- Private header file for the library.                  ---*/
< /*---                                       bzlib_private.h ---*/
< /*-------------------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
296c236
< /*-- General stuff. --*/
---
> 
311c251
< #define __inline__  /* */
---
> #define __inline__  
340d279
< /*-- Header bytes. --*/
342,345c281,285
< #define BZ_HDR_B 0x42   /* 'B' */
< #define BZ_HDR_Z 0x5a   /* 'Z' */
< #define BZ_HDR_h 0x68   /* 'h' */
< #define BZ_HDR_0 0x30   /* '0' */
---
> 
> #define BZ_HDR_B 0x42   
> #define BZ_HDR_Z 0x5a   
> #define BZ_HDR_h 0x68   
> #define BZ_HDR_0 0x30   
347c287
< /*-- Constants for the back end. --*/
---
> 
363c303
< /*-- Stuff for randomising repetitive blocks. --*/
---
> 
387c327
< /*-- Stuff for doing CRCs. --*/
---
> 
410c350
< /*-- States and modes for compression. --*/
---
> 
428c368
< /*-- Structure holding all the compression-side stuff. --*/
---
> 
432c372
<       /* pointer back to the struct bz_stream */
---
>       
435,436c375,376
<       /* mode this stream is in, and whether inputting */
<       /* or outputting data */
---
>       
>       
440c380
<       /* remembers avail_in when flush/finish requested */
---
>       
443c383
<       /* for doing the block sorting */
---
>       
449c389
<       /* aliases for arr1 and arr2 */
---
>       
455c395
<       /* for deciding when to use the fallback sorting algorithm */
---
>       
458c398
<       /* run-length-encoding of the input */
---
>       
463c403
<       /* input and output limits and current posns */
---
>       
469c409
<       /* map of bytes used in block */
---
>       
474c414
<       /* the buffer for bit stream creation */
---
>       
478c418
<       /* block and combined CRCs */
---
>       
482c422
<       /* misc administratium */
---
>       
487c427
<       /* stuff for coding the MTF values */
---
>       
496c436
<       /* second dimension: only 3 needed; 4 makes index calculations faster */
---
>       
504c444
< /*-- externs for compression. --*/
---
> 
523c463
< /*-- states for decompression. --*/
---
> 
572c512
< /*-- Constants for the fast MTF decoder. --*/
---
> 
579c519
< /*-- Structure holding all the decompression-side stuff. --*/
---
> 
583c523
<       /* pointer back to the struct bz_stream */
---
>       
586c526
<       /* state indicator for this stream */
---
>       
589c529
<       /* for doing the final run-length decoding */
---
>       
595c535
<       /* the buffer for bit stream reading */
---
>       
599c539
<       /* misc administratium */
---
>       
605c545
<       /* for undoing the Burrows-Wheeler transform */
---
>       
614c554
<       /* for undoing the Burrows-Wheeler transform (FAST) */
---
>       
617c557
<       /* for undoing the Burrows-Wheeler transform (SMALL) */
---
>       
621c561
<       /* stored and calculated CRCs */
---
>       
627c567
<       /* map of bytes used in block */
---
>       
633c573
<       /* for decoding the MTF values */
---
>       
645c585
<       /* save area for scalars in the main decompress code */
---
>       
676c616
< /*-- Macros for decompression. --*/
---
> 
710c650
< /*-- externs for decompression. --*/
---
> 
723d662
< /*-- BZ_NO_STDIO seems to make NULL disappear on some platforms. --*/
726,728d664
< /*-------------------------------------------------------------*/
< /*--- end                                   bzlib_private.h ---*/
< /*-------------------------------------------------------------*/
732,735d667
< /*-------------------------------------------------------------*/
< /*--- Block sorting machinery                               ---*/
< /*---                                           blocksort.c ---*/
< /*-------------------------------------------------------------*/
737,740d668
< /*---------------------------------------------*/
< /*--- Fallback O(N log(N)^2) sorting        ---*/
< /*--- algorithm, for repetitive blocks      ---*/
< /*---------------------------------------------*/
742c670,682
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
775c715
< /*---------------------------------------------*/
---
> 
832,838c772
<       /* Random partitioning.  Median of 3 sometimes fails to
<          avoid bad cases.  Median of 9 seems to help but 
<          looks rather expensive.  This too seems to work but
<          is cheaper.  Guidance for the magic constants 
<          7621 and 32768 is taken from Sedgewick's algorithms
<          book, chapter 35.
<       */
---
>       
904,916c838,839
< /*---------------------------------------------*/
< /* Pre:
<       nblock > 0
<       eclass exists for [0 .. nblock-1]
<       ((UChar*)eclass) [0 .. nblock-1] holds block
<       ptr exists for [0 .. nblock-1]
< 
<    Post:
<       ((UChar*)eclass) [0 .. nblock-1] holds block
<       All other areas of eclass destroyed
<       fmap [0 .. nblock-1] holds sorted order
<       bhtab [ 0 .. 2+(nblock/32) ] destroyed
< */
---
> 
> 
938,941c861
<    /*--
<       Initial 1-char radix sort to generate
<       initial fmap and initial BH bits.
<    --*/
---
>    
960,964c880
<    /*--
<       Inductively refine the buckets.  Kind-of an
<       "exponential radix sort" (!), inspired by the
<       Manber-Myers suffix array construction algorithm.
<    --*/
---
>    
966c882
<    /*-- set sentinel bits for block-end detection --*/
---
>    
972c888
<    /*-- the log(N) loop --*/
---
>    
990c906
< 	 /*-- find the next non-singleton bucket --*/
---
> 	 
1007c923
<          /*-- now [l, r] bracket current bucket --*/
---
>          
1012c928
<             /*-- scan bucket and generate header bits-- */
---
>             
1028,1032c944
<    /*-- 
<       Reconstruct the original block in
<       eclass8 [0 .. nblock-1], since the
<       previous phase destroyed it.
<    --*/
---
>    
1051,1055d962
< /*---------------------------------------------*/
< /*--- The main, O(N^2 log(N)) sorting       ---*/
< /*--- algorithm.  Faster for "normal"       ---*/
< /*--- non-repetitive blocks.                ---*/
< /*---------------------------------------------*/
1057c964,969
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
1072c984
<    /* 1 */
---
>    
1076c988
<    /* 2 */
---
>    
1080c992
<    /* 3 */
---
>    
1084c996
<    /* 4 */
---
>    
1088c1000
<    /* 5 */
---
>    
1092c1004
<    /* 6 */
---
>    
1096c1008
<    /* 7 */
---
>    
1100c1012
<    /* 8 */
---
>    
1104c1016
<    /* 9 */
---
>    
1108c1020
<    /* 10 */
---
>    
1112c1024
<    /* 11 */
---
>    
1116c1028
<    /* 12 */
---
>    
1124c1036
<       /* 1 */
---
>       
1130c1042
<       /* 2 */
---
>       
1136c1048
<       /* 3 */
---
>       
1142c1054
<       /* 4 */
---
>       
1148c1060
<       /* 5 */
---
>       
1154c1066
<       /* 6 */
---
>       
1160c1072
<       /* 7 */
---
>       
1166c1078
<       /* 8 */
---
>       
1185,1191c1097,1098
< /*---------------------------------------------*/
< /*--
<    Knuth's increments seem to work better
<    than Incerpi-Sedgewick here.  Possibly
<    because the number of elems to sort is
<    usually small, typically <= 20.
< --*/
---
> 
> 
1223c1130
<          /*-- copy 1 --*/
---
>          
1237c1144
<          /*-- copy 2 --*/
---
>          
1251c1158
<          /*-- copy 3 --*/
---
>          
1271,1278c1178,1179
< /*---------------------------------------------*/
< /*--
<    The following is an implementation of
<    an elegant 3-way quicksort for strings,
<    described in a paper "Fast Algorithms for
<    Sorting and Searching Strings", by Robert
<    Sedgewick and Jon L. Bentley.
< --*/
---
> 
> 
1444,1457c1345,1346
< /*---------------------------------------------*/
< /* Pre:
<       nblock > N_OVERSHOOT
<       block32 exists for [0 .. nblock-1 +N_OVERSHOOT]
<       ((UChar*)block32) [0 .. nblock-1] holds block
<       ptr exists for [0 .. nblock-1]
< 
<    Post:
<       ((UChar*)block32) [0 .. nblock-1] holds block
<       All other areas of block32 destroyed
<       ftab [0 .. 65536 ] destroyed
<       ptr [0 .. nblock-1] holds sorted order
<       if (*budget < 0), sorting was abandoned
< */
---
> 
> 
1482c1371
<    /*-- set up the 2-byte frequency table --*/
---
>    
1507c1396
<    /*-- (emphasises close relationship of block & quadrant) --*/
---
>    
1515c1404
<    /*-- Complete the initial radix sort --*/
---
>    
1545,1549c1434
<    /*--
<       Now ftab contains the first loc of every small bucket.
<       Calculate the running order, from smallest to largest
<       big bucket.
<    --*/
---
>    
1575,1577c1460
<    /*--
<       The main sorting loop.
<    --*/
---
>    
1583,1588c1466
<       /*--
<          Process big buckets, starting with the least full.
<          Basically this is a 3-step process in which we call
<          mainQSort3 to sort the small buckets [ss, j], but
<          also make a big effort to avoid the calls if we can.
<       --*/
---
>       
1591,1598c1469
<       /*--
<          Step 1:
<          Complete the big bucket [ss] by quicksorting
<          any unsorted small buckets [ss, j], for j != ss.  
<          Hopefully previous pointer-scanning phases have already
<          completed many of the small buckets [ss, j], so
<          we don't have to sort them at all.
<       --*/
---
>       
1624,1630c1495
<       /*--
<          Step 2:
<          Now scan this big bucket [ss] so as to synthesise the
<          sorted order for small buckets [t, ss] for all t,
<          including, magically, the bucket [ss,ss] too.
<          This will avoid doing Real Work in subsequent Step 1's.
<       --*/
---
>       
1652,1655c1517
<                 /* Extremely rare case missing in bzip2-1.0.0 and 1.0.1.
<                    Necessity for this case is demonstrated by compressing 
<                    a sequence of approximately 48.5 million of character 
<                    251; 1.0.0/1.0.1 will then die here. */
---
>                 
1661,1699c1523
<       /*--
<          Step 3:
<          The [ss] big bucket is now done.  Record this fact,
<          and update the quadrant descriptors.  Remember to
<          update quadrants in the overshoot area too, if
<          necessary.  The "if (i < 255)" test merely skips
<          this updating for the last bucket processed, since
<          updating for the last bucket is pointless.
< 
<          The quadrant array provides a way to incrementally
<          cache sort orderings, as they appear, so as to 
<          make subsequent comparisons in fullGtU() complete
<          faster.  For repetitive blocks this makes a big
<          difference (but not big enough to be able to avoid
<          the fallback sorting mechanism, exponential radix sort).
< 
<          The precise meaning is: at all times:
< 
<             for 0 <= i < nblock and 0 <= j <= nblock
< 
<             if block[i] != block[j], 
< 
<                then the relative values of quadrant[i] and 
<                     quadrant[j] are meaningless.
< 
<                else {
<                   if quadrant[i] < quadrant[j]
<                      then the string starting at i lexicographically
<                      precedes the string starting at j
< 
<                   else if quadrant[i] > quadrant[j]
<                      then the string starting at j lexicographically
<                      precedes the string starting at i
< 
<                   else
<                      the relative ordering of the strings starting
<                      at i and j has not yet been determined.
<                }
<       --*/
---
>       
1731,1743c1555,1556
< /*---------------------------------------------*/
< /* Pre:
<       nblock > 0
<       arr2 exists for [0 .. nblock-1 +N_OVERSHOOT]
<       ((UChar*)arr2)  [0 .. nblock-1] holds block
<       arr1 exists for [0 .. nblock-1]
< 
<    Post:
<       ((UChar*)arr2) [0 .. nblock-1] holds block
<       All other areas of block destroyed
<       ftab [ 0 .. 65536 ] destroyed
<       arr1 [0 .. nblock-1] holds sorted order
< */
---
> 
> 
1760,1764c1573
<       /* Calculate the location for quadrant, remembering to get
<          the alignment right.  Assumes that &(block[0]) is at least
<          2-byte aligned -- this should be ok since block is really
<          the first section of arr2.
<       */
---
>       
1769,1775c1578
<       /* (wfact-1) / 3 puts the default-factor-30
<          transition point at very roughly the same place as 
<          with v0.1 and v0.9.0.  
<          Not that it particularly matters any more, since the
<          resulting compressed stream is now the same regardless
<          of whether or not we use the main sort or fallback sort.
<       */
---
>       
1805,1807d1607
< /*-------------------------------------------------------------*/
< /*--- end                                       blocksort.c ---*/
< /*-------------------------------------------------------------*/
1809,1812d1608
< /*-------------------------------------------------------------*/
< /*--- Huffman coding low-level stuff                        ---*/
< /*---                                             huffman.c ---*/
< /*-------------------------------------------------------------*/
1815c1611,1618
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
1853c1656
< /*---------------------------------------------------*/
---
> 
1859,1862c1662
<    /*--
<       Nodes and heap entries run from 1.  Entry 0
<       for both the heap and nodes is a sentinel.
<    --*/
---
>    
1925c1725
< /*---------------------------------------------------*/
---
> 
1943c1743
< /*---------------------------------------------------*/
---
> 
1977,1992c1777,1787
< /*-------------------------------------------------------------*/
< /*--- end                                         huffman.c ---*/
< /*-------------------------------------------------------------*/
< 
< /*-------------------------------------------------------------*/
< /*--- Table for doing CRCs                                  ---*/
< /*---                                            crctable.c ---*/
< /*-------------------------------------------------------------*/
< 
< 
< /*--
<   I think this is an implementation of the AUTODIN-II,
<   Ethernet & FDDI 32-bit CRC standard.  Vaguely derived
<   from code by Rob Warnock, in Section 51 of the
<   comp.compression FAQ.
< --*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
1996c1791
<    /*-- Ugly, innit? --*/
---
>    
2065,2067d1859
< /*-------------------------------------------------------------*/
< /*--- end                                        crctable.c ---*/
< /*-------------------------------------------------------------*/
2069,2072d1860
< /*-------------------------------------------------------------*/
< /*--- Table for randomising repetitive blocks               ---*/
< /*---                                           randtable.c ---*/
< /*-------------------------------------------------------------*/
2075c1863,1870
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
2132,2134d1926
< /*-------------------------------------------------------------*/
< /*--- end                                       randtable.c ---*/
< /*-------------------------------------------------------------*/
2136,2139d1927
< /*-------------------------------------------------------------*/
< /*--- Compression machinery (not incl block sorting)        ---*/
< /*---                                            compress.c ---*/
< /*-------------------------------------------------------------*/
2142,2144d1929
< /*---------------------------------------------------*/
< /*--- Bit stream I/O                              ---*/
< /*---------------------------------------------------*/
2146c1931,1941
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
2154c1949
< /*---------------------------------------------------*/
---
> 
2167c1962
< /*---------------------------------------------------*/
---
> 
2180c1975
< /*---------------------------------------------------*/
---
> 
2191c1986
< /*---------------------------------------------------*/
---
> 
2202c1997
< /*---------------------------------------------------*/
---
> 
2210,2212d2004
< /*---------------------------------------------------*/
< /*--- The back end proper                         ---*/
< /*---------------------------------------------------*/
2214c2006,2009
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
2228c2023
< /*---------------------------------------------------*/
---
> 
2238,2259c2033
<    /* 
<       After sorting (eg, here),
<          s->arr1 [ 0 .. s->nblock-1 ] holds sorted order,
<          and
<          ((UChar*)s->arr2) [ 0 .. s->nblock-1 ] 
<          holds the original block data.
< 
<       The first thing to do is generate the MTF values,
<       and put them in
<          ((UInt16*)s->arr1) [ 0 .. s->nblock-1 ].
<       Because there are strictly fewer or equal MTF values
<       than block values, ptr values in this area are overwritten
<       with MTF values only when they are no longer needed.
< 
<       The final compressed bitstream is generated into the
<       area starting at
<          (UChar*) (&((UChar*)s->arr2)[s->nblock])
< 
<       These storage aliases are set up in bzCompressInit(),
<       except for the last one, which is arranged in 
<       compressBlock().
<    */
---
>    
2344c2118
< /*---------------------------------------------------*/
---
> 
2355,2363c2129
<    /*--
<    UChar  len [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<    is a global since the decoder also needs it.
< 
<    Int32  code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<    Int32  rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<    are also globals only used in this proc.
<    Made global to keep stack frame size small.
<    --*/
---
>    
2381c2147
<    /*--- Decide how many coding tables to use ---*/
---
>    
2389c2155
<    /*--- Generate an initial set of coding tables ---*/
---
>    
2429,2431c2195
<    /*--- 
<       Iterate up to BZ_N_ITERS times to improve the tables.
<    ---*/
---
>    
2440,2443c2204
<       /*---
<         Set up an auxiliary length table which is used to fast-track
< 	the common case (nGroups == 6). 
<       ---*/
---
>       
2457c2218
<          /*--- Set group start & end marks. --*/
---
>          
2462,2465c2223
<          /*-- 
<             Calculate the cost of this group as coded
<             by each of the coding tables.
<          --*/
---
>          
2469c2227
<             /*--- fast track the common case ---*/
---
>             
2498c2256
< 	    /*--- slow version which correctly handles all situations ---*/
---
> 	    
2505,2508c2263
<          /*-- 
<             Find the coding table which is best for this group,
<             and record its identity in the selector table.
<          --*/
---
>          
2517,2519c2272
<          /*-- 
<             Increment the symbol frequencies for the selected table.
<           --*/
---
>          
2521c2274
<             /*--- fast track the common case ---*/
---
>             
2539c2292
< 	    /*--- slow version which correctly handles all situations ---*/
---
> 	    
2554,2556c2307
<       /*--
<         Recompute the tables based on the accumulated frequencies.
<       --*/
---
>       
2569c2320
<    /*--- Compute MTF values for the selectors. ---*/
---
>    
2588c2339
<    /*--- Assign actual codes for the tables. --*/
---
>    
2602c2353
<    /*--- Transmit the mapping table. ---*/
---
>    
2625c2376
<    /*--- Now the selectors. ---*/
---
>    
2636c2387
<    /*--- Now the coding tables. ---*/
---
>    
2643,2644c2394,2395
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++; /* 10 */ };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--; /* 11 */ };
---
>          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
>          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
2652c2403
<    /*--- And finally, the block data proper ---*/
---
>    
2663c2414
<             /*--- fast track the common case ---*/
---
>             
2690c2441
< 	 /*--- slow version which correctly handles all situations ---*/
---
> 	 
2709c2460
< /*---------------------------------------------------*/
---
> 
2729c2480
<    /*-- If this is the first block, create the stream header. --*/
---
>    
2744c2495
<       /*-- Now the block's CRC, so it is in a known place. --*/
---
>       
2747,2755c2498
<       /*-- 
<          Now a single bit indicating (non-)randomisation. 
<          As of version 0.9.5, we use a better sorting algorithm
<          which makes randomisation unnecessary.  So always set
<          the randomised bit to 'no'.  Of course, the decoder
<          still needs to be able to handle randomised blocks
<          so as to maintain backwards compatibility with
<          older versions of bzip2.
<       --*/
---
>       
2764c2507
<    /*-- If this is the last block, add the stream trailer. --*/
---
>    
2778,2780d2520
< /*-------------------------------------------------------------*/
< /*--- end                                        compress.c ---*/
< /*-------------------------------------------------------------*/
2782,2785d2521
< /*-------------------------------------------------------------*/
< /*--- Decompression machinery                               ---*/
< /*---                                          decompress.c ---*/
< /*-------------------------------------------------------------*/
2788c2524,2531
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
2802c2545
< /*---------------------------------------------------*/
---
> 
2836c2579
< /*---------------------------------------------------*/
---
> 
2854c2597
<       if (zn > 20 /* the longest code */)         \
---
>       if (zn > 20 )         \
2868c2611
< /*---------------------------------------------------*/
---
> 
2876c2619
<    /* stuff that needs to be saved/restored */
---
>    
2903c2646
<       /*initialise the save area*/
---
>       
2930c2673
<    /*restore from the save area*/
---
>    
3029c2772
<       /*--- Receive the mapping table ---*/
---
>       
3049c2792
<       /*--- Now the selectors ---*/
---
>       
3065c2808
<       /*--- Undo the MTF values for the selectors. ---*/
---
>       
3079c2822
<       /*--- Now the coding tables ---*/
---
>       
3094c2837
<       /*--- Create the Huffman decoding tables ---*/
---
>       
3112c2855
<       /*--- Now the MTF values ---*/
---
>       
3121c2864
<       /*-- MTF init --*/
---
>       
3133c2876
<       /*-- end MTF init --*/
---
>       
3179c2922
<             /*-- uc = MTF ( nextSym-1 ) --*/
---
>             
3186c2929
<                   /* avoid general-case expense */
---
>                   
3202c2945
<                   /* general case */
---
>                   
3231c2974
<             /*-- end uc = MTF ( nextSym-1 ) --*/
---
>             
3244,3246c2987
<       /* Now we know what nblock is, we can do a better sanity
<          check on s->origPtr.
<       */
---
>       
3256c2997
<       /*-- Set up cftab to facilitate generation of T^(-1) --*/
---
>       
3263c3004
<          /*-- Make a copy of cftab, used in generation of T --*/
---
>          
3266c3007
<          /*-- compute the T vector --*/
---
>          
3273c3014
<          /*-- Compute T^(-1) by pointer reversal on T --*/
---
>          
3296c3037
<          /*-- compute the T^(-1) vector --*/
---
>          
3381,3383d3121
< /*-------------------------------------------------------------*/
< /*--- end                                      decompress.c ---*/
< /*-------------------------------------------------------------*/
3385,3388d3122
< /*-------------------------------------------------------------*/
< /*--- Library top-level functions.                          ---*/
< /*---                                               bzlib.c ---*/
< /*-------------------------------------------------------------*/
3390,3392d3123
< /*---------------------------------------------------*/
< /*--- Compression stuff                           ---*/
< /*---------------------------------------------------*/
3395c3126,3136
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
3443c3184
< /*---------------------------------------------------*/
---
> 
3454c3195
< /*---------------------------------------------------*/
---
> 
3469c3210
< /*---------------------------------------------------*/
---
> 
3483c3224
< /*---------------------------------------------------*/
---
> 
3501c3242
< /*---------------------------------------------------*/
---
> 
3568c3309
< /*---------------------------------------------------*/
---
> 
3604c3345
< /*---------------------------------------------------*/
---
> 
3613c3354
< /*---------------------------------------------------*/
---
> 
3617c3358
<    /*-- fast track the common case --*/           \
---
>               \
3628c3369
<    /*-- general, uncommon cases --*/              \
---
>                  \
3641c3382
< /*---------------------------------------------------*/
---
> 
3649c3390
<       /*-- fast track the common case --*/
---
>       
3651c3392
<          /*-- block full? --*/
---
>          
3653c3394
<          /*-- no input? --*/
---
>          
3665c3406
<       /*-- general, uncommon case --*/
---
>       
3667c3408
<          /*-- block full? --*/
---
>          
3669c3410
<          /*-- no input? --*/
---
>          
3671c3412
<          /*-- flush/finish end? --*/
---
>          
3686c3427
< /*---------------------------------------------------*/
---
> 
3694c3435
<       /*-- no output space? --*/
---
>       
3697c3438
<       /*-- block done? --*/
---
>       
3713c3454
< /*---------------------------------------------------*/
---
> 
3760c3501
< /*---------------------------------------------------*/
---
> 
3817c3558
<    return BZ_OK; /*--not reached--*/
---
>    return BZ_OK; 
3821c3562
< /*---------------------------------------------------*/
---
> 
3841,3843d3581
< /*---------------------------------------------------*/
< /*--- Decompression stuff                         ---*/
< /*---------------------------------------------------*/
3845c3583,3586
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
3885c3626
< /*---------------------------------------------------*/
---
> 
3894c3635
<          /* try to finish existing run */
---
>          
3907c3648
<          /* can a new run be started? */
---
>          
3939c3680
<       /* restore */
---
>       
3949c3690
<       /* end restore */
---
>       
3957c3698
<          /* try to finish existing run */
---
>          
3979c3720
<          /* can a new run be started? */
---
>          
4012c3753
<       /* save */
---
>       
4022c3763
<       /* end save */
---
>       
4028c3769
< /*---------------------------------------------------*/
---
> 
4043c3784
< /*---------------------------------------------------*/
---
> 
4052c3793
<          /* try to finish existing run */
---
>          
4065c3806
<          /* can a new run be started? */
---
>          
4098c3839
<          /* try to finish existing run */
---
>          
4111c3852
<          /* can a new run be started? */
---
>          
4139c3880
< /*---------------------------------------------------*/
---
> 
4187c3928
<    return 0;  /*NOTREACHED*/
---
>    return 0;  
4191c3932
< /*---------------------------------------------------*/
---
> 
4211,4213c3952,3954
< /*---------------------------------------------------*/
< /*--- File I/O stuff                              ---*/
< /*---------------------------------------------------*/
---
> 
> 
> 
4234c3975
< /*---------------------------------------------*/
---
> 
4244c3985
< /*---------------------------------------------------*/
---
> 
4292c4033
< /*---------------------------------------------------*/
---
> 
4337c4078
< /*---------------------------------------------------*/
---
> 
4415c4156
< /*---------------------------------------------------*/
---
> 
4471c4212
< /*---------------------------------------------------*/
---
> 
4489c4230
< /*---------------------------------------------------*/
---
> 
4545c4286
<    return 0; /*not reached*/
---
>    return 0; 
4549c4290
< /*---------------------------------------------------*/
---
> 
4570,4572d4310
< /*---------------------------------------------------*/
< /*--- Misc convenience stuff                      ---*/
< /*---------------------------------------------------*/
4574c4312,4315
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
4611c4352
<    /* normal termination */
---
>    
4626c4367
< /*---------------------------------------------------*/
---
> 
4659c4400
<    /* normal termination */
---
>    
4679,4694c4420,4425
< /*---------------------------------------------------*/
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
< /*---------------------------------------------------*/
< 
< /*---------------------------------------------------*/
< /*--
<    return version like "0.9.0c".
< --*/
---
> 
> 
> 
> 
> 
> 
4701c4432
< /*---------------------------------------------------*/
---
> 
4705,4706c4436,4437
<                ( const char *path,   /* no use when bzdopen */
<                  int fd,             /* no use when bzdopen */
---
>                ( const char *path,   
>                  int fd,             
4708c4439
<                  int open_mode)      /* bzopen: 0, bzdopen:1 */
---
>                  int open_mode)      
4739c4470
<    strcat(mode2,"b");   /* binary mode */
---
>    strcat(mode2,"b");   
4753c4484
<       /* Guard against total chaos and anarchy -- JRS */
---
>       
4770,4775c4501,4502
< /*---------------------------------------------------*/
< /*--
<    open file for read or write.
<       ex) bzopen("file","w9")
<       case path="" or NULL => use stdin or stdout.
< --*/
---
> 
> 
4780c4507
<    return bzopen_or_bzdopen(path,-1,mode,/*bzopen*/0);
---
>    return bzopen_or_bzdopen(path,-1,mode,0);
4784c4511
< /*---------------------------------------------------*/
---
> 
4789c4516
<    return bzopen_or_bzdopen(NULL,fd,mode,/*bzdopen*/1);
---
>    return bzopen_or_bzdopen(NULL,fd,mode,1);
4793c4520
< /*---------------------------------------------------*/
---
> 
4807c4534
< /*---------------------------------------------------*/
---
> 
4821c4548
< /*---------------------------------------------------*/
---
> 
4824c4551
<    /* do nothing now... */
---
>    
4829c4556
< /*---------------------------------------------------*/
---
> 
4850,4853c4577,4578
< /*---------------------------------------------------*/
< /*--
<    return last error code 
< --*/
---
> 
> 
4865,4870c4590,4595
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
---
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
4884,4950c4609,4634
< /*-------------------------------------------------------------*/
< /*--- end                                           bzlib.c ---*/
< /*-------------------------------------------------------------*/
< 
< /*-----------------------------------------------------------*/
< /*--- A block-sorting, lossless compressor        bzip2.c ---*/
< /*-----------------------------------------------------------*/
< 
< 
< 
< /*----------------------------------------------------*/
< /*--- IMPORTANT                                    ---*/
< /*----------------------------------------------------*/
< 
< /*--
<    WARNING:
<       This program and library (attempts to) compress data by 
<       performing several non-trivial transformations on it.  
<       Unless you are 100% familiar with *all* the algorithms 
<       contained herein, and with the consequences of modifying them, 
<       you should NOT meddle with the compression or decompression 
<       machinery.  Incorrect changes can and very likely *will* 
<       lead to disasterous loss of data.
< 
<    DISCLAIMER:
<       I TAKE NO RESPONSIBILITY FOR ANY LOSS OF DATA ARISING FROM THE
<       USE OF THIS PROGRAM, HOWSOEVER CAUSED.
< 
<       Every compression of a file implies an assumption that the
<       compressed file can be decompressed to reproduce the original.
<       Great efforts in design, coding and testing have been made to
<       ensure that this program works correctly.  However, the
<       complexity of the algorithms, and, in particular, the presence
<       of various special cases in the code which occur with very low
<       but non-zero probability make it impossible to rule out the
<       possibility of bugs remaining in the program.  DO NOT COMPRESS
<       ANY DATA WITH THIS PROGRAM AND/OR LIBRARY UNLESS YOU ARE PREPARED 
<       TO ACCEPT THE POSSIBILITY, HOWEVER SMALL, THAT THE DATA WILL 
<       NOT BE RECOVERABLE.
< 
<       That is not to say this program is inherently unreliable.
<       Indeed, I very much hope the opposite is true.  bzip2/libbzip2
<       has been carefully constructed and extensively tested.
< 
<    PATENTS:
<       To the best of my knowledge, bzip2/libbzip2 does not use any 
<       patented algorithms.  However, I do not have the resources 
<       available to carry out a full patent search.  Therefore I cannot 
<       give any guarantee of the above statement.
< --*/
< 
< 
< 
< /*----------------------------------------------------*/
< /*--- and now for something much more pleasant :-) ---*/
< /*----------------------------------------------------*/
< 
< /*---------------------------------------------*/
< /*--
<   Place a 1 beside your platform, and 0 elsewhere.
< --*/
< 
< /*--
<   Generic 32-bit Unix.
<   Also works on 64-bit Unix boxes.
<   This is the default.
< --*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
4953,4959c4637
< /*--
<   Win32, as seen by Jacob Navia's excellent
<   port of (Chris Fraser & David Hanson)'s excellent
<   lcc compiler.  Or with MS Visual C.
<   This is selected automatically if compiled by a compiler which
<   defines _WIN32, not including the Cygwin GCC.
< --*/
---
> 
4963,4966c4641,4642
< /*---------------------------------------------*/
< /*--
<   Some stuff for all platforms.
< --*/
---
> 
> 
4976,4979c4652,4653
< /*---------------------------------------------*/
< /*--
<    Platform-specific stuff.
< --*/
---
> 
> 
4997c4671,4675
< #   define SET_BINARY_MODE(fd) /**/
---
> #   define SET_BINARY_MODE(fd) 
> 
> #      define NORETURN 
> 
> #endif 
4999d4676
< #      define NORETURN /**/
5001d4677
< #endif /* BZ_UNIX */
5005,5008d4680
< /*---------------------------------------------*/
< /*--
<   Some more stuff for all platforms :-)
< --*/
5013,5016c4685
< /*--
<   IntNative is your platform's `native' int size.
<   Only here to avoid probs with 64-bit platforms.
< --*/
---
> 
5020,5022c4689,4691
< /*---------------------------------------------------*/
< /*--- Misc (file handling) data decls             ---*/
< /*---------------------------------------------------*/
---
> 
> 
> 
5030c4699
< /*-- source modes; F==file, I==stdin, O==stdout --*/
---
> 
5035c4704
< /*-- operation modes --*/
---
> 
5067,5070c4736,4739
< /*---------------------------------------------------*/
< /*--- An implementation of 64-bit ints.  Sigh.    ---*/
< /*--- Roll on widespread deployment of ANSI C9X ! ---*/
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
5115c4784
< /* Divide *n by 10, and return the remainder.  */
---
> 
5131,5133c4800
< /* ... and the Whole Entire Point of all this UInt64 stuff is
<    so that we can supply the following function.
< */
---
> 
5152,5154d4818
< /*---------------------------------------------------*/
< /*--- Processing of complete files and streams    ---*/
< /*---------------------------------------------------*/
5156d4819
< /*---------------------------------------------*/
5158c4821,4825
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
5254c4921
<    /*notreached*/
---
>    
5259c4926
< /*---------------------------------------------*/
---
> 
5369c5036
<    return True; /*notreached*/
---
>    return True; 
5373c5040
< /*---------------------------------------------*/
---
> 
5460c5127
<    return True; /*notreached*/
---
>    return True; 
5464,5466d5130
< /*---------------------------------------------------*/
< /*--- Error [non-] handling grunge                ---*/
< /*---------------------------------------------------*/
5468c5132,5135
< /*---------------------------------------------*/
---
> 
> 
> 
> 
5476c5143
< /*---------------------------------------------*/
---
> 
5491c5158
< /*---------------------------------------------*/
---
> 
5504c5171
< /*---------------------------------------------*/
---
> 
5515,5519c5182
<       /* Check whether input file still exists.  Delete output file
<          only if input exists to avoid loss of data.  Joerg Prante, 5
<          January 2002.  (JRS 06-Jan-2002: other changes in 1.0.2 mean
<          this is less likely to happen.  But to be ultra-paranoid, we
<          do the check anyway.)  */
---
>       
5563c5226
< /*---------------------------------------------*/
---
> 
5578c5241
< /*---------------------------------------------*/
---
> 
5591c5254
< /*---------------------------------------------*/
---
> 
5608c5271
< /*---------------------------------------------*/
---
> 
5622c5285
< /*---------------------------------------------*/
---
> 
5633c5296
< /*---------------------------------------------*/
---
> 
5689c5352
< /*---------------------------------------------*/
---
> 
5701c5364
< /*---------------------------------------------*/
---
> 
5716,5723d5378
< /*---------------------------------------------------*/
< /*--- The main driver machinery                   ---*/
< /*---------------------------------------------------*/
< 
< /* All rather crufty.  The main problem is that input files
<    are stat()d multiple times before use.  This should be
<    cleaned up. 
< */
5725c5380,5385
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
5736c5396
< /*---------------------------------------------*/
---
> 
5757c5417
< /*---------------------------------------------*/
---
> 
5768,5777c5428,5429
< /*---------------------------------------------*/
< /* Open an output file safely with O_EXCL and good permissions.
<    This avoids a race condition in versions < 1.0.2, in which
<    the file was first opened and then had its interim permissions
<    set safely.  We instead use open() to create the file with
<    the interim permissions required. (--- --- rw-).
< 
<    For non-Unix platforms, if we are not worrying about
<    security issues, simple this simply behaves like fopen.
< */
---
> 
> 
5794,5797c5446,5447
< /*---------------------------------------------*/
< /*--
<   if in doubt, return True
< --*/
---
> 
> 
5811,5814c5461,5462
< /*---------------------------------------------*/
< /*--
<   rac 11/21/98 see if file has hard links to it
< --*/
---
> 
> 
5827,5849c5475,5476
< /*---------------------------------------------*/
< /* Copy modification date, access date, permissions and owner from the
<    source to destination file.  We have to copy this meta-info off
<    into fileMetaInfo before starting to compress / decompress it,
<    because doing it afterwards means we get the wrong access time.
< 
<    To complicate matters, in compress() and decompress() below, the
<    sequence of tests preceding the call to saveInputFileMetaInfo()
<    involves calling fileExists(), which in turn establishes its result
<    by attempting to fopen() the file, and if successful, immediately
<    fclose()ing it again.  So we have to assume that the fopen() call
<    does not cause the access time field to be updated.
< 
<    Reading of the man page for stat() (man 2 stat) on RedHat 7.2 seems
<    to imply that merely doing open() will not affect the access time.
<    Therefore we merely need to hope that the C library only does
<    open() as a result of fopen(), and not any kind of read()-ahead
<    cleverness.
< 
<    It sounds pretty fragile to me.  Whether this carries across
<    robustly to arbitrary Unix-like platforms (or even works robustly
<    on this one, RedHat 7.2) is unknown to me.  Nevertheless ...  
< */
---
> 
> 
5860c5487
<    /* Note use of stat here, not lstat. */
---
>    
5884,5886c5511
<    /* chown() will in many cases return with EPERM, which can
<       be safely ignored.
<    */
---
>    
5891c5516
< /*---------------------------------------------*/
---
> 
5896,5898c5521
<    /* On unix, files can contain any characters and the file expansion
<     * is performed by the shell.
<     */
---
>    
5900,5903c5523,5524
< #  else /* ! BZ_UNIX */
<    /* On non-unix (Win* platforms), wildcard characters are not allowed in 
<     * filenames.
<     */
---
> #  else 
>    
5907c5528
< #  endif /* BZ_UNIX */
---
> #  endif 
5911c5532
< /*---------------------------------------------*/
---
> 
5940c5561
< /*---------------------------------------------*/
---
> 
6029,6030c5650
<       /* Save the file's meta-info before we open it.  Doing it later
<          means we mess up the access times. */
---
>       
6101c5721
<    /*--- Now the input and output handles are sane.  Do the Biz. ---*/
---
>    
6107c5727
<    /*--- If there was an I/O error, we won't get here. ---*/
---
>    
6121c5741
< /*---------------------------------------------*/
---
> 
6189c5809
<    if ( /* srcMode == SM_F2F implied && */ cantGuess ) {
---
>    if (  cantGuess ) {
6194c5814
<       /* just a warning, no return */
---
>       
6215,6216c5835
<       /* Save the file's meta-info before we open it.  Doing it later
<          means we mess up the access times. */
---
>       
6278c5897
<    /*--- Now the input and output handles are sane.  Do the Biz. ---*/
---
>    
6284c5903
<    /*--- If there was an I/O error, we won't get here. ---*/
---
>    
6319c5938
< /*---------------------------------------------*/
---
> 
6399c6018
<    /*--- Now the input handle is sane.  Do the Biz. ---*/
---
>    
6408c6027
< /*---------------------------------------------*/
---
> 
6433c6052
< /*---------------------------------------------*/
---
> 
6477c6096
< /*---------------------------------------------*/
---
> 
6488,6501c6107,6108
< /*---------------------------------------------*/
< /*--
<   All the garbage from here to main() is purely to
<   implement a linked list of command-line arguments,
<   into which main() copies argv[1 .. argc-1].
< 
<   The purpose of this exercise is to facilitate 
<   the expansion of wildcard characters * and ? in 
<   filenames for OSs which don't know how to do it
<   themselves, like MSDOS, Windows 95 and NT.
< 
<   The actual Dirty Work is done by the platform-
<   specific macro APPEND_FILESPEC.
< --*/
---
> 
> 
6511c6118
< /*---------------------------------------------*/
---
> 
6523c6130
< /*---------------------------------------------*/
---
> 
6536c6143
< /*---------------------------------------------*/
---
> 
6554c6161
< /*---------------------------------------------*/
---
> 
6582c6189
< /*---------------------------------------------*/
---
> 
6593c6200
<    /*-- Be really really really paranoid :-) --*/
---
>    
6599c6206
<    /*-- Initialise --*/
---
>    
6614c6221
<    i = j = 0; /* avoid bogus warning from egcs-1.1.X */
---
>    i = j = 0; 
6616c6223
<    /*-- Set up signal handlers for mem access errors --*/
---
>    
6631,6633c6238
<    /*-- Copy flags from env var BZIP2, and 
<         expand filename wildcards in arg list.
<    --*/
---
>    
6641c6246
<    /*-- Find the length of the longest filename --*/
---
>    
6654c6259
<    /*-- Determine source modes; flag handling may change this too. --*/
---
>    
6659,6660c6264,6265
<    /*-- Determine what to do (compress/uncompress/test/cat). --*/
<    /*-- Note that subsequent flag handling may change this. --*/
---
>    
>    
6676c6281
<    /*-- Look at the flags. --*/
---
>    
6715c6320
<    /*-- And again ... --*/
---
>    
6824,6826c6429
<    /* Free the argument list memory to mollify leak detectors 
<       (eg) Purify, Checker.  Serves no other useful purpose.
<    */
---
>    
6839,6841c6442,6444
< /*-----------------------------------------------------------*/
< /*--- end                                         bzip2.c ---*/
< /*-----------------------------------------------------------*/
\ No newline at end of file
---
> 
> 
>  
\ No newline at end of file
(19.2 %, 165542 bytes)
===< pass_blank :: 0 >===
1,8d0
<  
< 
< 
< 
< 
< 
< 
< 
10d1
< 
14d4
< 
29d18
< 
36d24
< 
41d28
< 
43d29
< 
49,51d34
< 
< 
< 
53d35
< 
56,59d37
< 
< 
< 
< 
66d43
< 
71d47
< 
75d50
< 
81d55
< 
85d58
< 
89,93d61
< 
< 
< 
< 
< 
95d62
< 
97d63
< 
106d71
< 
111d75
< 
118d81
< 
125d87
< 
133d94
< 
140d100
< 
148d107
< 
158,161d116
< 
< 
< 
< 
171d125
< 
180,183d133
< 
< 
< 
< 
187d136
< 
192d140
< 
197d144
<          
203d149
< 
209d154
< 
213d157
< 
217d160
< 
222,230d164
< 
< 
< 
< 
< 
< 
< 
< 
< 
232d165
< 
234,237d166
< 
< 
< 
< 
239d167
< 
247d174
< 
250d176
< 
252d177
< 
274,275d198
< 
< 
278,281d200
< 
< 
< 
< 
286,288d204
<   
< 
< 
291d206
< 
294d208
< 
298d211
< 
300,304d212
< 
< 
< 
< 
< 
306d213
< 
310d216
< 
314d219
< 
316d220
< 
324,328d227
< 
< 
< 
< 
< 
330d228
< 
335d232
< 
340d236
< 
347,351d242
< 
< 
< 
< 
< 
356d246
< 
359d248
< 
364,369d252
< 
< 
< 
< 
< 
< 
372d254
<       
374,376d255
< 
<       
<       
379,380d257
< 
<       
382,383d258
< 
<       
388,389d262
< 
<       
394,395d266
< 
<       
397,398d267
< 
<       
402,403d270
< 
<       
408,409d274
< 
<       
413,414d277
< 
<       
417,418d279
< 
<       
421,422d281
< 
<       
426,427d284
< 
<       
432d288
< 
436d291
<       
438d292
< 
441,445d294
< 
< 
< 
< 
< 
448d296
< 
451d298
< 
454d300
< 
457d302
< 
460,464d304
< 
< 
< 
< 
< 
467d306
< 
509,513d347
< 
< 
< 
< 
< 
516,520d349
< 
< 
< 
< 
< 
523d351
<       
525,526d352
< 
<       
528,529d353
< 
<       
534,535d357
< 
<       
538,539d359
< 
<       
544,545d363
< 
<       
553,554d370
< 
<       
556,557d371
< 
<       
560,561d373
< 
<       
566,567d377
< 
<       
572,573d381
< 
<       
579d386
< 
584,585d390
< 
<       
610d414
< 
613,617d416
< 
< 
< 
< 
< 
622d420
< 
627d424
< 
633d429
< 
636d431
< 
641d435
< 
644d437
< 
648,651d440
< 
< 
< 
< 
654d442
< 
657d444
< 
661,682d447
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
692d456
< 
694d457
< 
704d466
< 
713,715d474
< 
< 
< 
718d476
< 
729,730d486
< 
< 
732d487
< 
736d490
< 
740d493
< 
743,744d495
< 
< 
756d506
< 
758d507
< 
761d509
< 
763d510
< 
765d511
< 
771,772d516
< 
<       
778d521
< 
781d523
< 
808d549
< 
810d550
< 
812d551
< 
815d553
< 
818d555
< 
828d564
< 
836,840d571
< 
< 
< 
< 
< 
846d576
< 
860,861d589
< 
<    
868d595
< 
875d601
< 
879,882d604
< 
<    
< 
<    
887,888d608
< 
<    
891d610
< 
894d612
< 
901d618
< 
905,906d621
< 
< 	 
922,923d636
< 
<          
927,928d639
< 
<             
936d646
< 
939d648
< 
943,944d651
< 
<    
955d661
< 
961,969d666
< 
< 
< 
< 
< 
< 
< 
< 
< 
982d678
< 
984d679
<    
988d682
<    
992d685
<    
996d688
<    
1000d691
<    
1004d694
<    
1008d697
<    
1012d700
<    
1016d703
<    
1020d706
<    
1024d709
<    
1028d712
<    
1032d715
< 
1034d716
< 
1036d717
<       
1042d722
<       
1048d727
<       
1054d732
<       
1060d737
<       
1066d742
<       
1072d747
<       
1078d752
<       
1084d757
< 
1087d759
< 
1092d763
< 
1095,1098d765
< 
< 
< 
< 
1103d769
< 
1116d781
< 
1119d783
< 
1123d786
< 
1126d788
< 
1129,1130d790
< 
<          
1143,1144d802
< 
<          
1157,1158d814
< 
<          
1171d826
< 
1176,1180d830
< 
< 
< 
< 
< 
1183d832
< 
1194d842
< 
1207d854
< 
1209d855
< 
1214d859
< 
1219,1220d863
< 
< 
1222d864
< 
1228,1229d869
< 
< 
1233d872
< 
1246d884
< 
1250d887
< 
1254d890
< 
1257d892
< 
1259d893
< 
1261d894
< 
1269d901
< 
1274d905
< 
1277d907
< 
1302d931
< 
1304d932
< 
1309d936
< 
1312d938
< 
1315d940
< 
1319d943
< 
1323d946
< 
1326d948
< 
1332d953
< 
1343,1347d963
< 
< 
< 
< 
< 
1351d966
< 
1370,1371d984
< 
<    
1373d985
< 
1395,1396d1006
< 
<    
1401d1010
< 
1403,1404d1011
< 
<    
1406d1012
< 
1433,1434d1038
< 
<    
1439d1042
< 
1459,1461d1061
< 
<    
< 
1463d1062
< 
1465,1466d1063
< 
<       
1468,1469d1064
< 
<       
1492d1086
< 
1494,1495d1087
< 
<       
1514d1105
< 
1517d1107
<                 
1520d1109
< 
1522,1523d1110
< 
<       
1525d1111
< 
1530d1115
< 
1532d1116
< 
1542d1125
< 
1544d1126
< 
1549d1130
< 
1553,1556d1133
< 
< 
< 
< 
1569d1145
< 
1573d1148
<       
1577,1578d1151
< 
<       
1583d1155
< 
1598d1169
< 
1603d1173
< 
1606,1618d1175
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1622d1178
< 
1626d1181
< 
1637d1191
< 
1654,1656d1207
< 
< 
< 
1662d1212
<    
1665d1214
< 
1669d1217
< 
1672d1219
< 
1674d1220
< 
1677d1222
< 
1681d1225
< 
1688d1231
< 
1690d1232
<    
1702d1243
< 
1704d1244
< 
1713d1252
<       
1715d1253
< 
1723,1725d1260
< 
< 
< 
1733d1267
< 
1741,1743d1274
< 
< 
< 
1753d1283
< 
1758d1287
< 
1761d1289
< 
1763d1290
< 
1766d1292
< 
1775,1788d1300
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1790,1792d1301
< 
<    
< 
1858,1870d1366
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1925,1941d1420
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1947,1949d1425
< 
< 
< 
1960,1962d1435
< 
< 
< 
1973,1975d1445
< 
< 
< 
1984,1986d1453
< 
< 
< 
1995,1997d1461
< 
< 
< 
2003,2009d1466
< 
< 
< 
< 
< 
< 
< 
2021,2023d1477
< 
< 
< 
2032,2033d1485
< 
<    
2037d1488
< 
2040d1490
< 
2042d1491
< 
2046d1494
< 
2053d1500
< 
2057d1503
< 
2092d1537
< 
2095d1539
< 
2111d1554
< 
2113d1555
< 
2116,2118d1557
< 
< 
< 
2121d1559
< 
2128,2131d1565
< 
<    
< 
< 
2134d1567
< 
2136d1568
< 
2141d1572
< 
2146,2147d1576
< 
<    
2154,2155d1582
< 
<    
2158d1584
< 
2170d1595
< 
2177d1601
< 
2183d1606
<  
2188d1610
<  
2194,2195d1615
< 
<    
2197d1616
< 
2199d1617
< 
2203,2204d1620
< 
<       
2212d1627
< 
2217,2218d1631
< 
<          
2222,2223d1634
< 
<          
2225d1635
< 
2227d1636
<             
2231d1639
< 
2237d1644
< 
2248d1654
< 
2250d1655
< 
2254d1658
< 
2256d1659
< 	    
2262,2263d1664
<  
<          
2271,2272d1671
< 
<          
2274,2275d1672
<             
< 
2277d1673
< 
2288d1683
< 
2290d1684
< 
2292d1685
< 	    
2296d1688
< 
2306,2307d1697
< 
<       
2312,2313d1701
< 
< 
2318,2320d1705
< 
< 
<    
2338,2339d1722
< 
<    
2352,2353d1734
< 
<    
2361d1741
<      
2365d1744
< 
2371d1749
< 
2375,2376d1752
< 
<    
2386,2387d1761
< 
<    
2389d1762
< 
2399d1771
< 
2402,2403d1773
< 
<    
2412d1781
< 
2414d1782
<             
2420d1787
< 
2426d1792
< 
2437d1802
< 
2439d1803
< 
2441d1804
< 	 
2448,2449d1810
< 
< 
2454d1814
< 
2458,2460d1817
< 
< 
< 
2464d1820
< 
2469d1824
< 
2474d1828
< 
2477d1830
< 
2479,2480d1831
< 
<    
2488d1838
< 
2490d1839
< 
2494,2495d1842
< 
<       
2497,2498d1843
< 
<       
2500d1844
< 
2505,2507d1848
< 
< 
<    
2509d1849
< 
2519,2531d1858
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
2543,2545d1869
< 
< 
< 
2548d1871
< 
2572d1894
< 
2575d1896
< 
2578,2579d1898
< 
< 
2609,2611d1927
< 
< 
< 
2618,2619d1933
< 
<    
2644d1957
< 
2646d1958
<       
2672,2673d1983
< 
<    
2698d2007
< 
2700d2008
< 
2702d2009
< 
2705d2011
< 
2708d2013
< 
2711d2015
< 
2716d2019
< 
2727d2029
< 
2729d2030
< 
2742d2042
< 
2746d2045
<  
2756d2054
< 
2758d2055
< 
2766d2062
< 
2771,2772d2066
< 
<       
2779d2072
< 
2781d2073
< 
2791,2792d2082
< 
<       
2807,2808d2096
< 
<       
2812d2099
<    
2821,2822d2107
< 
<       
2836,2837d2120
< 
<       
2854,2856d2136
< 
<       
< 
2861d2140
< 
2863,2864d2141
< 
<       
2876,2877d2152
<       
< 
2880d2154
< 
2882d2155
< 
2884d2156
< 
2886d2157
< 
2896d2166
< 
2900d2169
< 
2915d2183
< 
2917d2184
< 
2919d2185
< 
2921,2922d2186
< 
<             
2927d2190
< 
2929d2191
<                   
2945d2206
<                   
2974,2975d2234
<             
< 
2981d2239
< 
2986,2987d2243
< 
<       
2990d2245
< 
2996,2997d2250
< 
<       
3001d2253
< 
3003,3004d2254
< 
<          
3006,3007d2255
< 
<          
3013,3014d2260
< 
<          
3024d2269
< 
3034d2278
< 
3036,3037d2279
< 
<          
3043d2284
< 
3053d2293
< 
3055d2294
< 
3057,3059d2295
< 
< 
< 
3061d2296
< 
3072d2306
< 
3082d2315
< 
3085d2317
< 
3088d2319
< 
3090d2320
< 
3092d2321
< 
3117d2345
< 
3120,3136d2347
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
3151d2361
< 
3179d2388
< 
3182,3184d2390
< 
< 
< 
3193,3195d2398
< 
< 
< 
3202d2404
< 
3208,3210d2409
< 
< 
< 
3222,3224d2420
< 
< 
< 
3231,3232d2426
< 
< 
3240,3242d2433
< 
< 
< 
3251d2441
< 
3253d2442
< 
3258d2446
< 
3262d2449
< 
3266d2452
< 
3270d2455
< 
3275d2459
< 
3283d2466
< 
3292d2474
< 
3297d2478
< 
3307,3309d2487
< 
< 
< 
3343,3345d2520
< 
< 
< 
3352,3354d2526
< 
< 
< 
3380,3382d2551
< 
< 
< 
3387d2555
< 
3389,3390d2556
< 
<       
3392d2557
<          
3394d2558
<          
3403d2566
< 
3405,3406d2567
< 
<       
3408d2568
<          
3410d2569
<          
3412d2570
<          
3425,3427d2582
< 
< 
< 
3432d2586
< 
3434,3435d2587
< 
<       
3437,3438d2588
< 
<       
3440d2589
< 
3449d2597
< 
3452,3454d2599
< 
< 
< 
3461d2605
<    
3463d2606
< 
3476d2618
< 
3494d2635
< 
3496d2636
< 
3499,3501d2638
< 
< 
< 
3510d2646
< 
3513d2648
< 
3516d2650
< 
3536d2669
< 
3546d2678
< 
3560,3562d2691
< 
< 
< 
3570d2698
< 
3575d2702
< 
3577d2703
< 
3580,3586d2705
< 
< 
< 
< 
< 
< 
< 
3593d2711
< 
3595d2712
< 
3599d2715
< 
3602d2717
< 
3621d2735
< 
3624,3626d2737
< 
< 
< 
3631d2741
< 
3633d2742
< 
3635d2743
<          
3647,3648d2754
<    
<          
3650,3651d2755
<                
<    
3658d2761
<    
3664d2766
<    
3670d2771
<    
3677d2777
< 
3679,3680d2778
< 
<       
3690,3691d2787
<       
< 
3695d2790
< 
3697,3698d2791
< 
<          
3720d2812
<          
3731d2822
<    
3736d2826
<    
3741d2830
<    
3746d2834
< 
3752,3753d2839
< 
<       
3763d2848
<       
3766,3769d2850
< 
< 
< 
< 
3782,3784d2862
< 
< 
< 
3789d2866
< 
3791d2867
< 
3793d2868
<          
3805,3806d2879
<    
<          
3808,3809d2880
<                
<    
3816d2886
<    
3822d2891
<    
3828d2896
<    
3835d2902
< 
3837d2903
< 
3839d2904
<          
3851,3852d2915
<    
<          
3854d2916
<    
3860d2921
<    
3865d2925
<    
3870d2929
<    
3875d2933
< 
3878,3880d2935
< 
< 
< 
3888d2942
< 
3925d2978
< 
3927d2979
< 
3930,3932d2981
< 
< 
< 
3940d2988
< 
3944d2991
< 
3947d2993
< 
3950,3955d2995
< 
< 
< 
< 
< 
< 
3961d3000
< 
3973,3975d3011
< 
< 
< 
3983,3985d3018
< 
< 
< 
3995d3027
< 
3997d3028
< 
4003d3033
< 
4006d3035
< 
4010d3038
< 
4019d3046
< 
4025d3051
< 
4030,4033d3055
< 
< 
< 
< 
4042d3063
< 
4050d3070
< 
4053d3072
< 
4056d3074
< 
4063d3080
< 
4071d3087
< 
4076,4078d3091
< 
< 
< 
4089,4090d3101
< 
< 
4102d3112
< 
4109d3118
< 
4114d3122
< 
4122d3129
< 
4130d3136
< 
4134d3139
< 
4140d3144
< 
4149d3152
< 
4154,4156d3156
< 
< 
< 
4167d3166
< 
4169d3167
< 
4176d3173
< 
4179d3175
< 
4183d3178
< 
4185d3179
< 
4193d3186
<    
4199d3191
< 
4203d3194
< 
4206d3196
< 
4210,4212d3199
< 
< 
< 
4216d3202
< 
4220d3205
< 
4223d3207
< 
4228,4230d3211
< 
< 
< 
4239d3219
< 
4241d3220
< 
4244d3222
< 
4247d3224
< 
4250d3226
< 
4253d3228
< 
4255d3229
< 
4258d3231
< 
4268d3240
< 
4270d3241
< 
4273d3243
< 
4277d3246
< 
4283d3251
<       
4285d3252
< 
4288,4290d3254
< 
< 
< 
4304d3267
< 
4309,4315d3271
< 
< 
< 
< 
< 
< 
< 
4327d3282
< 
4334d3288
< 
4342d3295
< 
4347d3299
< 
4351,4352d3302
< 
<    
4356d3305
< 
4360d3308
< 
4365,4367d3312
< 
< 
< 
4378d3322
< 
4384d3327
< 
4390d3332
< 
4395d3336
< 
4399,4400d3339
< 
<    
4404d3342
< 
4413d3350
< 
4418,4425d3354
< 
< 
< 
< 
< 
< 
< 
< 
4430,4433d3358
< 
< 
< 
< 
4452d3376
< 
4471d3394
< 
4482d3404
< 
4484d3405
<       
4499,4502d3419
< 
< 
< 
< 
4509,4511d3425
< 
< 
< 
4518,4520d3431
< 
< 
< 
4532,4534d3442
< 
< 
< 
4538d3445
< 
4546,4548d3452
< 
< 
< 
4551d3454
<    
4554,4556d3456
< 
< 
< 
4561d3460
<    
4575,4578d3473
< 
< 
< 
< 
4597,4598d3491
< 
< 
4602d3494
< 
4607,4634d3498
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
4636,4637d3499
< 
< 
4639,4643d3500
< 
< 
< 
< 
< 
4646d3502
< 
4650,4654d3505
< 
< 
< 
< 
< 
4658d3508
< 
4664d3513
< 
4667d3515
< 
4670d3517
< 
4672d3518
< 
4674d3519
< 
4676,4681d3520
< 
< 
< 
< 
< 
<                                        
4684,4685d3522
< 
< 
4687,4692d3523
< 
< 
< 
< 
< 
< 
4698,4699d3528
< 
< 
4703,4704d3531
< 
< 
4708d3534
< 
4711d3536
< 
4713d3537
< 
4722d3545
< 
4730d3552
< 
4733,4740d3554
< 
< 
< 
< 
< 
< 
< 
< 
4744,4745d3557
< 
< 
4758,4759d3569
< 
< 
4772,4773d3581
< 
< 
4782,4784d3589
< 
< 
< 
4798,4800d3602
< 
< 
< 
4817,4825d3618
< 
< 
< 
< 
< 
< 
< 
< 
< 
4835d3627
< 
4838d3629
< 
4841d3631
< 
4845d3634
< 
4847d3635
< 
4849d3636
< 
4855d3641
< 
4857d3642
< 
4862d3646
< 
4875d3658
< 
4901d3683
< 
4903d3684
< 
4919d3699
< 
4921d3700
<    
4923,4926d3701
< 
< 
< 
< 
4936d3710
< 
4939d3712
< 
4942d3714
< 
4945d3716
< 
4947d3717
< 
4954d3723
< 
4963d3731
< 
4966d3733
< 
4968d3734
< 
4971d3736
< 
4974d3738
< 
4979d3742
< 
4991d3753
< 
5004d3765
<   
5034d3794
< 
5038,5040d3797
< 
< 
< 
5050d3806
< 
5053d3808
< 
5056d3810
< 
5058d3811
< 
5065d3817
< 
5071d3822
< 
5074d3824
< 
5076d3825
< 
5080d3828
< 
5082d3829
< 
5086d3832
< 
5089d3834
< 
5125d3869
< 
5129,5135d3872
< 
< 
< 
< 
< 
< 
< 
5141,5143d3877
< 
< 
< 
5156,5158d3889
< 
< 
< 
5169,5171d3899
< 
< 
< 
5177d3904
< 
5181,5182d3907
< 
<       
5213d3937
< 
5224,5226d3947
< 
< 
< 
5239,5241d3959
< 
< 
< 
5252,5254d3969
< 
< 
< 
5269,5271d3983
< 
< 
< 
5283,5285d3994
< 
< 
< 
5294,5296d4002
< 
< 
< 
5344d4049
< 
5350,5352d4054
< 
< 
< 
5362,5364d4063
< 
< 
< 
5377,5385d4075
< 
< 
< 
< 
< 
< 
< 
< 
< 
5394,5396d4083
< 
< 
< 
5411d4097
< 
5415,5417d4100
< 
< 
< 
5426,5429d4108
< 
< 
< 
< 
5444,5447d4122
< 
< 
< 
< 
5453d4127
< 
5459,5462d4132
< 
< 
< 
< 
5468d4137
< 
5473,5476d4141
< 
< 
< 
< 
5481d4145
< 
5487d4150
<    
5492,5493d4154
< 
< 
5500d4160
< 
5503d4162
< 
5506d4164
< 
5509d4166
< 
5511d4167
<    
5514,5516d4169
< 
< 
< 
5521d4173
<    
5524d4175
<    
5530,5532d4180
< 
< 
< 
5534d4181
< 
5539d4185
< 
5549d4194
< 
5559,5561d4203
< 
< 
< 
5569d4210
< 
5571d4211
< 
5574d4213
< 
5590d4228
< 
5648d4285
< 
5650d4286
<       
5653d4288
< 
5655d4289
< 
5669d4302
< 
5690d4322
< 
5709d4340
< 
5714d4344
< 
5720,5721d4349
< 
<    
5726,5727d4353
< 
<    
5736d4361
< 
5739,5741d4363
< 
< 
< 
5751d4372
< 
5753d4373
< 
5756d4375
< 
5777d4395
< 
5814d4431
<       
5833d4449
< 
5835d4450
<       
5838d4452
< 
5840d4453
< 
5854d4466
< 
5866d4477
< 
5885d4495
< 
5890d4499
< 
5896,5897d4504
< 
<    
5902,5903d4508
< 
<    
5922d4526
< 
5934d4537
< 
5936,5938d4538
< 
< 
< 
5945d4544
< 
5947d4545
< 
5950d4547
< 
5957d4553
< 
5981d4576
< 
5983d4577
< 
5996d4589
< 
6006d4598
< 
6011d4602
< 
6017,6018d4607
< 
<    
6021d4609
< 
6025,6027d4612
< 
< 
< 
6032d4616
< 
6050,6052d4633
< 
< 
< 
6089d4669
< 
6094,6096d4673
< 
< 
< 
6105,6109d4681
< 
< 
< 
< 
< 
6116,6118d4687
< 
< 
< 
6123d4691
< 
6128,6130d4695
< 
< 
< 
6135d4699
< 
6141,6143d4704
< 
< 
< 
6159,6161d4719
< 
< 
< 
6167d4724
< 
6187,6189d4743
< 
< 
< 
6191d4744
< 
6199,6200d4751
< 
<    
6205,6206d4755
< 
<    
6222,6223d4770
< 
<    
6228d4774
< 
6231d4776
< 
6236,6238d4780
< 
< 
<    
6244,6246d4785
< 
< 
<    
6257,6259d4795
< 
< 
<    
6262,6265d4797
< 
< 
<    
<    
6267d4798
< 
6271d4801
< 
6279,6281d4808
< 
< 
<    
6319,6320d4845
<    
<    
6347d4871
< 
6351d4874
< 
6357d4879
< 
6360d4881
< 
6362d4882
< 
6370d4889
< 
6385d4903
< 
6404d4921
< 
6428,6429d4944
< 
<    
6437d4951
< 
6440,6444d4953
< 
< 
< 
< 
<  
\ No newline at end of file
===< pass_clang_binsrch :: replace-function-def-with-decl >===
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2127c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
---
> ;
2129d1204
<    
2132,2518c1207,1208
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
< 
< 
< 
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> void BZ2_compressBlock ( EState* s, Bool is_last_block )
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
2613,3119c1295
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
3138,3181c1314
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
3187,3192c1320
< {
<    if (sizeof(int)   != 4) return 0;
<    if (sizeof(short) != 2) return 0;
<    if (sizeof(char)  != 1) return 0;
<    return 1;
< }
---
> ;
3198,3201c1326
< {
<    void* v = malloc ( items * size );
<    return v;
< }
---
> ;
3205,3207c1330
< {
<    if (addr != NULL) free ( addr );
< }
---
> ;
3213,3221c1336
< {
<    Int32 i;
<    s->nblock = 0;
<    s->numZ = 0;
<    s->state_out_pos = 0;
<    BZ_INITIALISE_CRC ( s->blockCRC );
<    for (i = 0; i < 256; i++) s->inUse[i] = False;
<    s->blockNo++;
< }
---
> ;
3227,3230c1342
< {
<    s->state_in_ch  = 256;
<    s->state_in_len = 0;
< }
---
> ;
3235,3239c1347
< {
<    if (s->state_in_ch < 256 && s->state_in_len > 0)
<       return False; else
<       return True;
< }
---
> ;
3312,3342c1420
< {
<    Int32 i;
<    UChar ch = (UChar)(s->state_in_ch);
<    for (i = 0; i < s->state_in_len; i++) {
<       BZ_UPDATE_CRC( s->blockCRC, ch );
<    }
<    s->inUse[s->state_in_ch] = True;
<    switch (s->state_in_len) {
<       case 1:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 2:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 3:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       default:
<          s->inUse[s->state_in_len-4] = True;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = ((UChar)(s->state_in_len-4));
<          s->nblock++;
<          break;
<    }
< }
---
> ;
3348,3351c1426
< {
<    if (s->state_in_ch < 256) add_pair_to_block ( s );
<    init_RL ( s );
< }
---
> ;
3385,3424c1460
< {
<    Bool progress_in = False;
< 
<    if (s->mode == BZ_M_RUNNING) {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<       }
< 
<    } else {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          
<          if (s->avail_in_expect == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<          s->avail_in_expect--;
<       }
<    }
<    return progress_in;
< }
---
> ;
3430,3451c1466
< {
<    Bool progress_out = False;
< 
<    while (True) {
< 
<       
<       if (s->strm->avail_out == 0) break;
< 
<       
<       if (s->state_out_pos >= s->numZ) break;
< 
<       progress_out = True;
<       *(s->strm->next_out) = s->zbits[s->state_out_pos];
<       s->state_out_pos++;
<       s->strm->avail_out--;
<       s->strm->next_out++;
<       s->strm->total_out_lo32++;
<       if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<    }
< 
<    return progress_out;
< }
---
> ;
3457,3498c1472
< {
<    Bool progress_in  = False;
<    Bool progress_out = False;
<    EState* s = strm->state;
<    
<    while (True) {
< 
<       if (s->state == BZ_S_OUTPUT) {
<          progress_out |= copy_output_until_stop ( s );
<          if (s->state_out_pos < s->numZ) break;
<          if (s->mode == BZ_M_FINISHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<          prepare_new_block ( s );
<          s->state = BZ_S_INPUT;
<          if (s->mode == BZ_M_FLUSHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<       }
< 
<       if (s->state == BZ_S_INPUT) {
<          progress_in |= copy_input_until_stop ( s );
<          if (s->mode != BZ_M_RUNNING && s->avail_in_expect == 0) {
<             flush_RL ( s );
<             BZ2_compressBlock ( s, (Bool)(s->mode == BZ_M_FINISHING) );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->nblock >= s->nblockMAX) {
<             BZ2_compressBlock ( s, False );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->strm->avail_in == 0) {
<             break;
<          }
<       }
< 
<    }
< 
<    return progress_in || progress_out;
< }
---
> ;
3629,3630c1603
< {
<    UChar k1;
---
> ;
3632d1604
<    if (s->blockRandomised) {
3634,3676d1605
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
3678d1606
<    } else {
3680,3781c1608,1609
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
< 
< 
< 
< 
< Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
> ;
3787,3877c1615
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3977,3982c1715
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> ;
4440,4498c2173
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
4748,4757c2423
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
---
> ;
4762,4771c2428
< {
<    Int32  i;
<    double base = 1.0;
<    double sum  = 0.0;
<    for (i = 0; i < 8; i++) {
<       sum  += base * (double)(n->b[i]);
<       base *= 256.0;
<    }
<    return sum;
< }
---
> ;
4776,4781c2433
< {
<    Int32 i;
<    for (i = 0; i < 8; i++)
<       if (n->b[i] != 0) return 0;
<    return 1;
< }
---
> ;
4787,4797c2439
< {
<    UInt32 rem, tmp;
<    Int32  i;
<    rem = 0;
<    for (i = 7; i >= 0; i--) {
<       tmp = rem * 256 + n->b[i];
<       n->b[i] = tmp / 10;
<       rem = tmp % 10;
<    }
<    return rem;
< }
---
> ;
4803,4816c2445
< {
<    Int32  i, q;
<    UChar  buf[32];
<    Int32  nBuf   = 0;
<    UInt64 n_copy = *n;
<    do {
<       q = uInt64_qrm10 ( &n_copy );
<       buf[nBuf] = q + '0';
<       nBuf++;
<    } while (!uInt64_isZero(&n_copy));
<    outbuf[nBuf] = 0;
<    for (i = 0; i < nBuf; i++) 
<       outbuf[i] = buf[nBuf-i-1];
< }
---
> ;
4828,4922c2457
< {
<    BZFILE* bzf = NULL;
<    UChar   ibuf[5000];
<    Int32   nIbuf;
<    UInt32  nbytes_in_lo32, nbytes_in_hi32;
<    UInt32  nbytes_out_lo32, nbytes_out_hi32;
<    Int32   bzerr, bzerr_dummy, ret;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    bzf = BZ2_bzWriteOpen ( &bzerr, zStream, 
<                            blockSize100k, verbosity, workFactor );   
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n" );
< 
<    while (True) {
< 
<       if (myfeof(stream)) break;
<       nIbuf = fread ( ibuf, sizeof(UChar), 5000, stream );
<       if (ferror(stream)) goto errhandler_io;
<       if (nIbuf > 0) BZ2_bzWrite ( &bzerr, bzf, (void*)ibuf, nIbuf );
<       if (bzerr != BZ_OK) goto errhandler;
< 
<    }
< 
<    BZ2_bzWriteClose64 ( &bzerr, bzf, 0, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fflush ( zStream );
<    if (ret == EOF) goto errhandler_io;
<    if (zStream != stdout) {
<       ret = fclose ( zStream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (ferror(stream)) goto errhandler_io;
<    ret = fclose ( stream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 1) {
<       if (nbytes_in_lo32 == 0 && nbytes_in_hi32 == 0) {
< 	 fprintf ( stderr, " no data compressed.\n");
<       } else {
< 	 Char   buf_nin[32], buf_nout[32];
< 	 UInt64 nbytes_in,   nbytes_out;
< 	 double nbytes_in_d, nbytes_out_d;
< 	 uInt64_from_UInt32s ( &nbytes_in, 
< 			       nbytes_in_lo32, nbytes_in_hi32 );
< 	 uInt64_from_UInt32s ( &nbytes_out, 
< 			       nbytes_out_lo32, nbytes_out_hi32 );
< 	 nbytes_in_d  = uInt64_to_double ( &nbytes_in );
< 	 nbytes_out_d = uInt64_to_double ( &nbytes_out );
< 	 uInt64_toAscii ( buf_nin, &nbytes_in );
< 	 uInt64_toAscii ( buf_nout, &nbytes_out );
< 	 fprintf ( stderr, "%6.3f:1, %6.3f bits/byte, "
< 		   "%5.2f%% saved, %s in, %s out.\n",
< 		   nbytes_in_d / nbytes_out_d,
< 		   (8.0 * nbytes_out_d) / nbytes_in_d,
< 		   100.0 * (1.0 - nbytes_out_d / nbytes_in_d),
< 		   buf_nin,
< 		   buf_nout
< 		 );
<       }
<    }
< 
<    return;
< 
<    errhandler:
<    BZ2_bzWriteClose64 ( &bzerr_dummy, bzf, 1, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_MEM_ERROR:
<          outOfMemory (); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       default:
<          panic ( "compress:unexpected error" );
<    }
< 
<    panic ( "compress:end" );
<    
< }
---
> ;
4929,5037c2464
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto trycat;
<          if ((bzerr == BZ_OK || bzerr == BZ_STREAM_END) && nread > 0)
<             fwrite ( obuf, sizeof(UChar), nread, stream );
<          if (ferror(stream)) goto errhandler_io;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       if (nUnused == 0 && myfeof(zStream)) break;
<    }
< 
<    closeok:
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (ferror(stream)) goto errhandler_io;
<    ret = fflush ( stream );
<    if (ret != 0) goto errhandler_io;
<    if (stream != stdout) {
<       ret = fclose ( stream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    trycat: 
<    if (forceOverwrite) {
<       rewind(zStream);
<       while (True) {
<       	 if (myfeof(zStream)) break;
<       	 nread = fread ( obuf, sizeof(UChar), 5000, zStream );
<       	 if (ferror(zStream)) goto errhandler_io;
<       	 if (nread > 0) fwrite ( obuf, sizeof(UChar), nread, stream );
<       	 if (ferror(stream)) goto errhandler_io;
<       }
<       goto closeok;
<    }
<   
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          crcError();
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          compressedStreamEOF();
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (stream != stdout) fclose(stream);
<          if (streamNo == 1) {
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "\n%s: %s: trailing garbage after EOF ignored\n",
<                       progName, inName );
<             return True;       
<          }
<       default:
<          panic ( "decompress:unexpected error" );
<    }
< 
<    panic ( "decompress:end" );
<    return True; 
< }
---
> ;
5043,5128c2470
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(zStream);
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto errhandler;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
<       if (nUnused == 0 && myfeof(zStream)) break;
< 
<    }
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    if (verbosity == 0) 
<       fprintf ( stderr, "%s: %s: ", progName, inName );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          fprintf ( stderr,
<                    "data integrity (CRC) error in data\n" );
<          return False;
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          fprintf ( stderr,
<                    "file ends unexpectedly\n" );
<          return False;
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (streamNo == 1) {
<           fprintf ( stderr, 
<                     "bad magic number (file not created by bzip2)\n" );
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "trailing garbage after EOF ignored\n" );
<             return True;       
<          }
<       default:
<          panic ( "test:unexpected error" );
<    }
< 
<    panic ( "test:end" );
<    return True; 
< }
---
> ;
5138,5140c2480
< {
<    if (v > exitValue) exitValue = v;
< }
---
> ;
5146,5155c2486
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\nIt is possible that the compressed file(s) have become corrupted.\n"
<         "You can use the -tvv option to test integrity of such files.\n\n"
<         "You can use the `bzip2recover' program to attempt to recover\n"
<         "data from undamaged sections of corrupted files.\n\n"
<     );
< }
---
> ;
5161,5168c2492
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\tInput file = %s, output file = %s\n",
<       inName, outName 
<    );
< }
---
> ;
5174,5223c2498
< {
<    IntNative      retVal;
<    struct MY_STAT statBuf;
< 
<    if ( srcMode == SM_F2F 
<         && opMode != OM_TEST
<         && deleteOutputOnInterrupt ) {
< 
<       
<       retVal = MY_STAT ( inName, &statBuf );
<       if (retVal == 0) {
<          if (noisy)
<             fprintf ( stderr, 
<                       "%s: Deleting output file %s, if it exists.\n",
<                       progName, outName );
<          if (outputHandleJustInCase != NULL)
<             fclose ( outputHandleJustInCase );
<          retVal = remove ( outName );
<          if (retVal != 0)
<             fprintf ( stderr,
<                       "%s: WARNING: deletion of output file "
<                       "(apparently) failed.\n",
<                       progName );
<       } else {
<          fprintf ( stderr,
<                    "%s: WARNING: deletion of output file suppressed\n",
<                     progName );
<          fprintf ( stderr,
<                    "%s:    since input file no longer exists.  Output file\n",
<                    progName );
<          fprintf ( stderr,
<                    "%s:    `%s' may be incomplete.\n",
<                    progName, outName );
<          fprintf ( stderr, 
<                    "%s:    I suggest doing an integrity test (bzip2 -tv)"
<                    " of it.\n",
<                    progName );
<       }
<    }
< 
<    if (noisy && numFileNames > 0 && numFilesProcessed < numFileNames) {
<       fprintf ( stderr, 
<                 "%s: WARNING: some files have not been processed:\n"
<                 "%s:    %d specified on command line, %d not processed yet.\n\n",
<                 progName, progName,
<                 numFileNames, numFileNames - numFilesProcessed );
<    }
<    setExit(ec);
<    exit(exitValue);
< }
---
> ;
5229,5238c2504
< {
<    fprintf ( stderr,
<              "\n%s: PANIC -- internal consistency error:\n"
<              "\t%s\n"
<              "\tThis is a BUG.  Please report it to me at:\n"
<              "\tjseward@acm.org\n",
<              progName, s );
<    showFileNames();
<    cleanUpAndFail( 3 );
< }
---
> ;
5244,5251c2510
< {
<    fprintf ( stderr,
<              "\n%s: Data integrity error when decompressing.\n",
<              progName );
<    showFileNames();
<    cadvise();
<    cleanUpAndFail( 2 );
< }
---
> ;
5257,5268c2516
< {
<   if (noisy) {
<     fprintf ( stderr,
< 	      "\n%s: Compressed file ends unexpectedly;\n\t"
< 	      "perhaps it is corrupted?  *Possible* reason follows.\n",
< 	      progName );
<     perror ( progName );
<     showFileNames();
<     cadvise();
<   }
<   cleanUpAndFail( 2 );
< }
---
> ;
5274,5282c2522
< {
<    fprintf ( stderr,
<              "\n%s: I/O or other error, bailing out.  "
<              "Possible reason follows.\n",
<              progName );
<    perror ( progName );
<    showFileNames();
<    cleanUpAndFail( 1 );
< }
---
> ;
5288,5293c2528
< {
<    fprintf ( stderr,
<              "\n%s: Control-C or similar caught, quitting.\n",
<              progName );
<    cleanUpAndFail(1);
< }
---
> ;
5299,5349c2534
< {
<    if (opMode == OM_Z)
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst compressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (2) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (3) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (1) and (2).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (1)\n"
<       "   or (2), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
<       else
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst decompressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) The compressed data is corrupted, and bzip2's usual checks\n"
<       "       failed to detect this.  Try bzip2 -tvv my_file.bz2.\n"
<       "   (2) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (3) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (4) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (2) and (3).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (2)\n"
<       "   or (3), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
< 
<    showFileNames();
<    if (opMode == OM_Z)
<       cleanUpAndFail( 3 ); else
<       { cadvise(); cleanUpAndFail( 2 ); }
< }
---
> ;
5355,5361c2540
< {
<    fprintf ( stderr,
<              "\n%s: couldn't allocate enough memory\n",
<              progName );
<    showFileNames();
<    cleanUpAndFail(1);
< }
---
> ;
5367,5376c2546
< {
<    fprintf ( stderr,
<              "bzip2: I'm not configured correctly for this platform!\n"
<              "\tI require Int32, Int16 and Char to have sizes\n"
<              "\tof 4, 2 and 1 bytes to run properly, and they don't.\n"
<              "\tProbably you can fix this by defining them correctly,\n"
<              "\tand recompiling.  Bye!\n" );
<    setExit(3);
<    exit(exitValue);
< }
---
> ;
5388,5393c2558
< {
<    Int32 i;
<    if ( (Int32)strlen(s) >= longestFileName ) return;
<    for (i = 1; i <= longestFileName - (Int32)strlen(s); i++)
<       fprintf ( stderr, " " );
< }
---
> ;
5399,5414c2564
< {
<    if ( strlen(from) > FILE_NAME_LEN-10 )  {
<       fprintf (
<          stderr,
<          "bzip2: file name\n`%s'\n"
<          "is suspiciously (more than %d chars) long.\n"
<          "Try using a reasonable file name instead.  Sorry! :-)\n",
<          from, FILE_NAME_LEN-10
<       );
<       setExit(1);
<       exit(exitValue);
<    }
< 
<   strncpy(to,from,FILE_NAME_LEN-10);
<   to[FILE_NAME_LEN-10]='\0';
< }
---
> ;
5420,5425c2570
< {
<    FILE *tmp   = fopen ( name, "rb" );
<    Bool exists = (tmp != NULL);
<    if (tmp != NULL) fclose ( tmp );
<    return exists;
< }
---
> ;
5431,5443c2576
< {
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
<    return fopen(name, mode);
< #  endif
< }
---
> ;
5450,5458c2583
< {
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return True;
<    if (MY_S_ISREG(statBuf.st_mode)) return False;
<    return True;
< }
---
> ;
5465,5472c2590
< {  
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return 0;
<    return (statBuf.st_nlink - 1);
< }
---
> ;
5484,5491c2602
< {
< #  if BZ_UNIX
<    IntNative retVal;
<    
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
< }
---
> ;
5496,5513c2607
< {
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    
< #  endif
< }
---
> ;
5519,5529c2613
< {
< #  if BZ_UNIX
<    
<    return False;
< #  else 
<    
<    for (; *name != '\0'; name++)
<       if (*name == '?' || *name == '*') return True;
<    return False;
< #  endif 
< }
---
> ;
5542,5548c2626
< {
<    Int32 ns = strlen(s);
<    Int32 nx = strlen(suffix);
<    if (ns < nx) return False;
<    if (strcmp(s + ns - nx, suffix) == 0) return True;
<    return False;
< }
---
> ;
5553,5558c2631
< {
<    if (!hasSuffix(name,oldSuffix)) return False;
<    name[strlen(name)-strlen(oldSuffix)] = 0;
<    strcat ( name, newSuffix );
<    return True;
< }
---
> ;
5564,5738c2637
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "compress: bad modes\n" );
< 
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          strcat ( outName, ".bz2" ); 
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++) {
<       if (hasSuffix(inName, zSuffix[i])) {
<          if (noisy)
<          fprintf ( stderr, 
<                    "%s: Input file %s already has %s suffix.\n",
<                    progName, inName, zSuffix[i] );
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	 remove(outName);
<       } else {
< 	 fprintf ( stderr, "%s: Output file %s already exists.\n",
< 		   progName, outName );
< 	 setExit(1);
< 	 return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName )) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "compress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr,  "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    compressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( srcMode == SM_F2F ) {
<       applySavedMetaInfoToOutputFile ( outName );
<       deleteOutputOnInterrupt = False;
<       if ( !keepInputFiles ) {
<          IntNative retVal = remove ( inName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
< 
<    deleteOutputOnInterrupt = False;
< }
---
> ;
5744,5935c2643
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    Bool  magicNumberOK;
<    Bool  cantGuess;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "uncompress: bad modes\n" );
< 
<    cantGuess = False;
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++)
<             if (mapSuffix(outName,zSuffix[i],unzSuffix[i]))
<                goto zzz; 
<          cantGuess = True;
<          strcat ( outName, ".out" );
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    zzz:
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if (  cantGuess ) {
<       if (noisy)
<       fprintf ( stderr, 
<                 "%s: Can't guess original name for %s -- using %s\n",
<                 progName, inName, outName );
<       
<    }   
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	remove(outName);
<       } else {
<         fprintf ( stderr, "%s: Output file %s already exists.\n",
<                   progName, outName );
<         setExit(1);
<         return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName ) ) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "uncompress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    magicNumberOK = uncompressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( magicNumberOK ) {
<       if ( srcMode == SM_F2F ) {
<          applySavedMetaInfoToOutputFile ( outName );
<          deleteOutputOnInterrupt = False;
<          if ( !keepInputFiles ) {
<             IntNative retVal = remove ( inName );
<             ERROR_IF_NOT_ZERO ( retVal );
<          }
<       }
<    } else {
<       unzFailsExist = True;
<       deleteOutputOnInterrupt = False;
<       if ( srcMode == SM_F2F ) {
<          IntNative retVal = remove ( outName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
<    deleteOutputOnInterrupt = False;
< 
<    if ( magicNumberOK ) {
<       if (verbosity >= 1)
<          fprintf ( stderr, "done\n" );
<    } else {
<       setExit(2);
<       if (verbosity >= 1)
<          fprintf ( stderr, "not a bzip2 file.\n" ); else
<          fprintf ( stderr,
<                    "%s: %s is not a bzip2 file.\n",
<                    progName, inName );
<    }
< 
< }
---
> ;
5941,6024c2649
< {
<    FILE *inStr;
<    Bool allOK;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "testf: bad modes\n" );
< 
<    copyFileName ( outName, "(none)" );
<    switch (srcMode) {
<       case SM_I2O: copyFileName ( inName, "(stdin)" ); break;
<       case SM_F2F: copyFileName ( inName, name ); break;
<       case SM_F2O: copyFileName ( inName, name ); break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          inStr = stdin;
<          break;
< 
<       case SM_F2O: case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "testf: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = NULL;
<    allOK = testStream ( inStr );
< 
<    if (allOK && verbosity >= 1) fprintf ( stderr, "ok\n" );
<    if (!allOK) testFailsExist = True;
< }
---
> ;
6030,6049c2655
< {
<    fprintf ( stderr,
< 
<     "bzip2, a block-sorting file compressor.  "
<     "Version %s.\n"
<     "   \n"
<     "   Copyright (C) 1996-2002 by Julian Seward.\n"
<     "   \n"
<     "   This program is free software; you can redistribute it and/or modify\n"
<     "   it under the terms set out in the LICENSE file, which is included\n"
<     "   in the bzip2-1.0 source distribution.\n"
<     "   \n"
<     "   This program is distributed in the hope that it will be useful,\n"
<     "   but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
<     "   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
<     "   LICENSE file for more details.\n"
<     "   \n",
<     BZ2_bzlibVersion()
<    );
< }
---
> ;
6055,6093c2661
< {
<    fprintf (
<       stderr,
<       "bzip2, a block-sorting file compressor.  "
<       "Version %s.\n"
<       "\n   usage: %s [flags and input files in any order]\n"
<       "\n"
<       "   -h --help           print this message\n"
<       "   -d --decompress     force decompression\n"
<       "   -z --compress       force compression\n"
<       "   -k --keep           keep (don't delete) input files\n"
<       "   -f --force          overwrite existing output files\n"
<       "   -t --test           test compressed file integrity\n"
<       "   -c --stdout         output to standard out\n"
<       "   -q --quiet          suppress noncritical error messages\n"
<       "   -v --verbose        be verbose (a 2nd -v gives more)\n"
<       "   -L --license        display software version & license\n"
<       "   -V --version        display software version & license\n"
<       "   -s --small          use less memory (at most 2500k)\n"
<       "   -1 .. -9            set block size to 100k .. 900k\n"
<       "   --fast              alias for -1\n"
<       "   --best              alias for -9\n"
<       "\n"
<       "   If invoked as `bzip2', default action is to compress.\n"
<       "              as `bunzip2',  default action is to decompress.\n"
<       "              as `bzcat', default action is to decompress to stdout.\n"
<       "\n"
<       "   If no file names are given, bzip2 compresses or decompresses\n"
<       "   from standard input to standard output.  You can combine\n"
<       "   short flags, so `-v -4' means the same as -v4 or -4v, &c.\n"
< #     if BZ_UNIX
<       "\n"
< #     endif
<       ,
< 
<       BZ2_bzlibVersion(),
<       fullProgName
<    );
< }
---
> ;
6099,6104c2667
< {
<    fprintf ( 
<       stderr, 
<       "%s: %s is redundant in versions 0.9.5 and above\n",
<       progName, flag );
< }
---
> ;
6121,6127c2684
< {
<    void* p;
< 
<    p = malloc ( (size_t)n );
<    if (p == NULL) outOfMemory ();
<    return p;
< }
---
> ;
6133,6140c2690
< {
<    Cell *c;
< 
<    c = (Cell*) myMalloc ( sizeof ( Cell ) );
<    c->name = NULL;
<    c->link = NULL;
<    return c;
< }
---
> ;
6146,6158c2696
< {
<    if (root == NULL) {
<       Cell *tmp = mkCell();
<       tmp->name = (Char*) myMalloc ( 5 + strlen(name) );
<       strcpy ( tmp->name, name );
<       return tmp;
<    } else {
<       Cell *tmp = root;
<       while (tmp->link != NULL) tmp = tmp->link;
<       tmp->link = snocString ( tmp->link, name );
<       return root;
<    }
< }
---
> ;
6164,6186c2702
< {
<    Int32 i, j, k;
<    Char *envbase, *p;
< 
<    envbase = getenv(varName);
<    if (envbase != NULL) {
<       p = envbase;
<       i = 0;
<       while (True) {
<          if (p[i] == 0) break;
<          p += i;
<          i = 0;
<          while (isspace((Int32)(p[0]))) p++;
<          while (p[i] != 0 && !isspace((Int32)(p[i]))) i++;
<          if (i > 0) {
<             k = i; if (k > FILE_NAME_LEN-10) k = FILE_NAME_LEN-10;
<             for (j = 0; j < k; j++) tmpName[j] = p[j];
<             tmpName[k] = 0;
<             APPEND_FLAG(*argList, tmpName);
<          }
<       }
<    }
< }
---
> ;
6193,6439c2709
< {
<    Int32  i, j;
<    Char   *tmp;
<    Cell   *argList;
<    Cell   *aa;
<    Bool   decode;
< 
<    
<    if (sizeof(Int32) != 4 || sizeof(UInt32) != 4  ||
<        sizeof(Int16) != 2 || sizeof(UInt16) != 2  ||
<        sizeof(Char)  != 1 || sizeof(UChar)  != 1)
<       configError();
< 
<    
<    outputHandleJustInCase  = NULL;
<    smallMode               = False;
<    keepInputFiles          = False;
<    forceOverwrite          = False;
<    noisy                   = True;
<    verbosity               = 0;
<    blockSize100k           = 9;
<    testFailsExist          = False;
<    unzFailsExist           = False;
<    numFileNames            = 0;
<    numFilesProcessed       = 0;
<    workFactor              = 30;
<    deleteOutputOnInterrupt = False;
<    exitValue               = 0;
<    i = j = 0; 
< 
<    
<    signal (SIGSEGV, mySIGSEGVorSIGBUScatcher);
< #  if BZ_UNIX
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< 
<    copyFileName ( inName,  "(none)" );
<    copyFileName ( outName, "(none)" );
< 
<    copyFileName ( progNameReally, argv[0] );
<    progName = &progNameReally[0];
<    for (tmp = &progNameReally[0]; *tmp != '\0'; tmp++)
<       if (*tmp == PATH_SEP) progName = tmp + 1;
< 
< 
<    
<    argList = NULL;
<    addFlagsFromEnvVar ( &argList,  "BZIP2" );
<    addFlagsFromEnvVar ( &argList,  "BZIP" );
<    for (i = 1; i <= argc-1; i++)
<       APPEND_FILESPEC(argList, argv[i]);
< 
< 
<    
<    longestFileName = 7;
<    numFileNames    = 0;
<    decode          = True;
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) { decode = False; continue; }
<       if (aa->name[0] == '-' && decode) continue;
<       numFileNames++;
<       if (longestFileName < (Int32)strlen(aa->name) )
<          longestFileName = (Int32)strlen(aa->name);
<    }
< 
< 
<    
<    if (numFileNames == 0)
<       srcMode = SM_I2O; else srcMode = SM_F2F;
< 
< 
<    
<    
<    opMode = OM_Z;
< 
<    if ( (strstr ( progName, "unzip" ) != 0) ||
<         (strstr ( progName, "UNZIP" ) != 0) )
<       opMode = OM_UNZ;
< 
<    if ( (strstr ( progName, "z2cat" ) != 0) ||
<         (strstr ( progName, "Z2CAT" ) != 0) ||
<         (strstr ( progName, "zcat" ) != 0)  ||
<         (strstr ( progName, "ZCAT" ) != 0) )  {
<       opMode = OM_UNZ;
<       srcMode = (numFileNames == 0) ? SM_I2O : SM_F2O;
<    }
< 
< 
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (aa->name[0] == '-' && aa->name[1] != '-') {
<          for (j = 1; aa->name[j] != '\0'; j++) {
<             switch (aa->name[j]) {
<                case 'c': srcMode          = SM_F2O; break;
<                case 'd': opMode           = OM_UNZ; break;
<                case 'z': opMode           = OM_Z; break;
<                case 'f': forceOverwrite   = True; break;
<                case 't': opMode           = OM_TEST; break;
<                case 'k': keepInputFiles   = True; break;
<                case 's': smallMode        = True; break;
<                case 'q': noisy            = False; break;
<                case '1': blockSize100k    = 1; break;
<                case '2': blockSize100k    = 2; break;
<                case '3': blockSize100k    = 3; break;
<                case '4': blockSize100k    = 4; break;
<                case '5': blockSize100k    = 5; break;
<                case '6': blockSize100k    = 6; break;
<                case '7': blockSize100k    = 7; break;
<                case '8': blockSize100k    = 8; break;
<                case '9': blockSize100k    = 9; break;
<                case 'V':
<                case 'L': license();            break;
<                case 'v': verbosity++; break;
<                case 'h': usage ( progName );
<                          exit ( 0 );
<                          break;
<                default:  fprintf ( stderr, "%s: Bad flag `%s'\n",
<                                    progName, aa->name );
<                          usage ( progName );
<                          exit ( 1 );
<                          break;
<             }
<          }
<       }
<    }
<    
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (ISFLAG("--stdout"))            srcMode          = SM_F2O;  else
<       if (ISFLAG("--decompress"))        opMode           = OM_UNZ;  else
<       if (ISFLAG("--compress"))          opMode           = OM_Z;    else
<       if (ISFLAG("--force"))             forceOverwrite   = True;    else
<       if (ISFLAG("--test"))              opMode           = OM_TEST; else
<       if (ISFLAG("--keep"))              keepInputFiles   = True;    else
<       if (ISFLAG("--small"))             smallMode        = True;    else
<       if (ISFLAG("--quiet"))             noisy            = False;   else
<       if (ISFLAG("--version"))           license();                  else
<       if (ISFLAG("--license"))           license();                  else
<       if (ISFLAG("--exponential"))       workFactor = 1;             else 
<       if (ISFLAG("--repetitive-best"))   redundant(aa->name);        else
<       if (ISFLAG("--repetitive-fast"))   redundant(aa->name);        else
<       if (ISFLAG("--fast"))              blockSize100k = 1;          else
<       if (ISFLAG("--best"))              blockSize100k = 9;          else
<       if (ISFLAG("--verbose"))           verbosity++;                else
<       if (ISFLAG("--help"))              { usage ( progName ); exit ( 0 ); }
<          else
<          if (strncmp ( aa->name, "--", 2) == 0) {
<             fprintf ( stderr, "%s: Bad flag `%s'\n", progName, aa->name );
<             usage ( progName );
<             exit ( 1 );
<          }
<    }
< 
<    if (verbosity > 4) verbosity = 4;
<    if (opMode == OM_Z && smallMode && blockSize100k > 2) 
<       blockSize100k = 2;
< 
<    if (opMode == OM_TEST && srcMode == SM_F2O) {
<       fprintf ( stderr, "%s: -c and -t cannot be used together.\n",
<                 progName );
<       exit ( 1 );
<    }
< 
<    if (srcMode == SM_F2O && numFileNames == 0)
<       srcMode = SM_I2O;
< 
<    if (opMode != OM_Z) blockSize100k = 0;
< 
<    if (srcMode == SM_F2F) {
<       signal (SIGINT,  mySignalCatcher);
<       signal (SIGTERM, mySignalCatcher);
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
<    }
< 
<    if (opMode == OM_Z) {
<      if (srcMode == SM_I2O) {
<         compress ( NULL );
<      } else {
<         decode = True;
<         for (aa = argList; aa != NULL; aa = aa->link) {
<            if (ISFLAG("--")) { decode = False; continue; }
<            if (aa->name[0] == '-' && decode) continue;
<            numFilesProcessed++;
<            compress ( aa->name );
<         }
<      }
<    } 
<    else
< 
<    if (opMode == OM_UNZ) {
<       unzFailsExist = False;
<       if (srcMode == SM_I2O) {
<          uncompress ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
<             if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             uncompress ( aa->name );
<          }      
<       }
<       if (unzFailsExist) { 
<          setExit(2); 
<          exit(exitValue);
<       }
<    } 
< 
<    else {
<       testFailsExist = False;
<       if (srcMode == SM_I2O) {
<          testf ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
< 	    if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             testf ( aa->name );
< 	 }
<       }
<       if (testFailsExist && noisy) {
<          fprintf ( stderr,
<            "\n"
<            "You can use the `bzip2recover' program to attempt to recover\n"
<            "data from undamaged sections of corrupted files.\n\n"
<          );
<          setExit(2);
<          exit(exitValue);
<       }
<    }
< 
<    
<    aa = argList;
<    while (aa != NULL) {
<       Cell* aa2 = aa->link;
<       if (aa->name != NULL) free(aa->name);
<       free(aa);
<       aa = aa2;
<    }
< 
<    return exitValue;
< }
---
> ;
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2448c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
< 
< static
< void sendMTFValues ( EState* s )
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
---
> ;
2450,2453d1179
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
2455,2457d1180
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
2461,2463d1183
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
2465,2473d1184
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
2475,2476c1186,1188
<       BZ2_blockSort ( s );
<    }
---
> static
> void makeMaps_e ( EState* s )
> ;
2478d1189
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
2480,2487d1190
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
2489c1192,1194
<    if (s->nblock > 0) {
---
> static
> void generateMTFValues ( EState* s )
> ;
2491,2493d1195
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
2495,2496d1196
<       
<       bsPutUInt32 ( s, s->blockCRC );
2498,2499c1198,1199
<       
<       bsW(s,1,0);
---
> #define BZ_LESSER_ICOST  0
> #define BZ_GREATER_ICOST 15
2501,2504c1201,1203
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
---
> static
> void sendMTFValues ( EState* s )
> ;
2507,2508d1205
<    
<    if (is_last_block) {
2510,2518c1207,1208
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> void BZ2_compressBlock ( EState* s, Bool is_last_block )
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
2613,3119c1295
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
3138,3181c1314
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
3187,3192c1320
< {
<    if (sizeof(int)   != 4) return 0;
<    if (sizeof(short) != 2) return 0;
<    if (sizeof(char)  != 1) return 0;
<    return 1;
< }
---
> ;
3198,3201c1326
< {
<    void* v = malloc ( items * size );
<    return v;
< }
---
> ;
3205,3207c1330
< {
<    if (addr != NULL) free ( addr );
< }
---
> ;
3213,3221c1336
< {
<    Int32 i;
<    s->nblock = 0;
<    s->numZ = 0;
<    s->state_out_pos = 0;
<    BZ_INITIALISE_CRC ( s->blockCRC );
<    for (i = 0; i < 256; i++) s->inUse[i] = False;
<    s->blockNo++;
< }
---
> ;
3227,3230c1342
< {
<    s->state_in_ch  = 256;
<    s->state_in_len = 0;
< }
---
> ;
3235,3239c1347
< {
<    if (s->state_in_ch < 256 && s->state_in_len > 0)
<       return False; else
<       return True;
< }
---
> ;
3312,3342c1420
< {
<    Int32 i;
<    UChar ch = (UChar)(s->state_in_ch);
<    for (i = 0; i < s->state_in_len; i++) {
<       BZ_UPDATE_CRC( s->blockCRC, ch );
<    }
<    s->inUse[s->state_in_ch] = True;
<    switch (s->state_in_len) {
<       case 1:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 2:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 3:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       default:
<          s->inUse[s->state_in_len-4] = True;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = ((UChar)(s->state_in_len-4));
<          s->nblock++;
<          break;
<    }
< }
---
> ;
3348,3351c1426
< {
<    if (s->state_in_ch < 256) add_pair_to_block ( s );
<    init_RL ( s );
< }
---
> ;
3385,3424c1460
< {
<    Bool progress_in = False;
< 
<    if (s->mode == BZ_M_RUNNING) {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<       }
< 
<    } else {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          
<          if (s->avail_in_expect == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<          s->avail_in_expect--;
<       }
<    }
<    return progress_in;
< }
---
> ;
3430,3451c1466
< {
<    Bool progress_out = False;
< 
<    while (True) {
< 
<       
<       if (s->strm->avail_out == 0) break;
< 
<       
<       if (s->state_out_pos >= s->numZ) break;
< 
<       progress_out = True;
<       *(s->strm->next_out) = s->zbits[s->state_out_pos];
<       s->state_out_pos++;
<       s->strm->avail_out--;
<       s->strm->next_out++;
<       s->strm->total_out_lo32++;
<       if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<    }
< 
<    return progress_out;
< }
---
> ;
3457,3498c1472
< {
<    Bool progress_in  = False;
<    Bool progress_out = False;
<    EState* s = strm->state;
<    
<    while (True) {
< 
<       if (s->state == BZ_S_OUTPUT) {
<          progress_out |= copy_output_until_stop ( s );
<          if (s->state_out_pos < s->numZ) break;
<          if (s->mode == BZ_M_FINISHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<          prepare_new_block ( s );
<          s->state = BZ_S_INPUT;
<          if (s->mode == BZ_M_FLUSHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<       }
< 
<       if (s->state == BZ_S_INPUT) {
<          progress_in |= copy_input_until_stop ( s );
<          if (s->mode != BZ_M_RUNNING && s->avail_in_expect == 0) {
<             flush_RL ( s );
<             BZ2_compressBlock ( s, (Bool)(s->mode == BZ_M_FINISHING) );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->nblock >= s->nblockMAX) {
<             BZ2_compressBlock ( s, False );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->strm->avail_in == 0) {
<             break;
<          }
<       }
< 
<    }
< 
<    return progress_in || progress_out;
< }
---
> ;
3629,3765c1603
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
3771,3781c1609
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
3787,3877c1615
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3977,3982c1715
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> ;
4440,4498c2173
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
4748,4757c2423
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
---
> ;
4762,4771c2428
< {
<    Int32  i;
<    double base = 1.0;
<    double sum  = 0.0;
<    for (i = 0; i < 8; i++) {
<       sum  += base * (double)(n->b[i]);
<       base *= 256.0;
<    }
<    return sum;
< }
---
> ;
4762,4771c4762
< {
<    Int32  i;
<    double base = 1.0;
<    double sum  = 0.0;
<    for (i = 0; i < 8; i++) {
<       sum  += base * (double)(n->b[i]);
<       base *= 256.0;
<    }
<    return sum;
< }
---
> ;
4776,4781c4767
< {
<    Int32 i;
<    for (i = 0; i < 8; i++)
<       if (n->b[i] != 0) return 0;
<    return 1;
< }
---
> ;
4787,4797c4773
< {
<    UInt32 rem, tmp;
<    Int32  i;
<    rem = 0;
<    for (i = 7; i >= 0; i--) {
<       tmp = rem * 256 + n->b[i];
<       n->b[i] = tmp / 10;
<       rem = tmp % 10;
<    }
<    return rem;
< }
---
> ;
4803,4816c4779
< {
<    Int32  i, q;
<    UChar  buf[32];
<    Int32  nBuf   = 0;
<    UInt64 n_copy = *n;
<    do {
<       q = uInt64_qrm10 ( &n_copy );
<       buf[nBuf] = q + '0';
<       nBuf++;
<    } while (!uInt64_isZero(&n_copy));
<    outbuf[nBuf] = 0;
<    for (i = 0; i < nBuf; i++) 
<       outbuf[i] = buf[nBuf-i-1];
< }
---
> ;
4828,4922c4791
< {
<    BZFILE* bzf = NULL;
<    UChar   ibuf[5000];
<    Int32   nIbuf;
<    UInt32  nbytes_in_lo32, nbytes_in_hi32;
<    UInt32  nbytes_out_lo32, nbytes_out_hi32;
<    Int32   bzerr, bzerr_dummy, ret;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    bzf = BZ2_bzWriteOpen ( &bzerr, zStream, 
<                            blockSize100k, verbosity, workFactor );   
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n" );
< 
<    while (True) {
< 
<       if (myfeof(stream)) break;
<       nIbuf = fread ( ibuf, sizeof(UChar), 5000, stream );
<       if (ferror(stream)) goto errhandler_io;
<       if (nIbuf > 0) BZ2_bzWrite ( &bzerr, bzf, (void*)ibuf, nIbuf );
<       if (bzerr != BZ_OK) goto errhandler;
< 
<    }
< 
<    BZ2_bzWriteClose64 ( &bzerr, bzf, 0, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fflush ( zStream );
<    if (ret == EOF) goto errhandler_io;
<    if (zStream != stdout) {
<       ret = fclose ( zStream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (ferror(stream)) goto errhandler_io;
<    ret = fclose ( stream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 1) {
<       if (nbytes_in_lo32 == 0 && nbytes_in_hi32 == 0) {
< 	 fprintf ( stderr, " no data compressed.\n");
<       } else {
< 	 Char   buf_nin[32], buf_nout[32];
< 	 UInt64 nbytes_in,   nbytes_out;
< 	 double nbytes_in_d, nbytes_out_d;
< 	 uInt64_from_UInt32s ( &nbytes_in, 
< 			       nbytes_in_lo32, nbytes_in_hi32 );
< 	 uInt64_from_UInt32s ( &nbytes_out, 
< 			       nbytes_out_lo32, nbytes_out_hi32 );
< 	 nbytes_in_d  = uInt64_to_double ( &nbytes_in );
< 	 nbytes_out_d = uInt64_to_double ( &nbytes_out );
< 	 uInt64_toAscii ( buf_nin, &nbytes_in );
< 	 uInt64_toAscii ( buf_nout, &nbytes_out );
< 	 fprintf ( stderr, "%6.3f:1, %6.3f bits/byte, "
< 		   "%5.2f%% saved, %s in, %s out.\n",
< 		   nbytes_in_d / nbytes_out_d,
< 		   (8.0 * nbytes_out_d) / nbytes_in_d,
< 		   100.0 * (1.0 - nbytes_out_d / nbytes_in_d),
< 		   buf_nin,
< 		   buf_nout
< 		 );
<       }
<    }
< 
<    return;
< 
<    errhandler:
<    BZ2_bzWriteClose64 ( &bzerr_dummy, bzf, 1, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_MEM_ERROR:
<          outOfMemory (); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       default:
<          panic ( "compress:unexpected error" );
<    }
< 
<    panic ( "compress:end" );
<    
< }
---
> ;
4929,5037c4798
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto trycat;
<          if ((bzerr == BZ_OK || bzerr == BZ_STREAM_END) && nread > 0)
<             fwrite ( obuf, sizeof(UChar), nread, stream );
<          if (ferror(stream)) goto errhandler_io;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       if (nUnused == 0 && myfeof(zStream)) break;
<    }
< 
<    closeok:
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (ferror(stream)) goto errhandler_io;
<    ret = fflush ( stream );
<    if (ret != 0) goto errhandler_io;
<    if (stream != stdout) {
<       ret = fclose ( stream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    trycat: 
<    if (forceOverwrite) {
<       rewind(zStream);
<       while (True) {
<       	 if (myfeof(zStream)) break;
<       	 nread = fread ( obuf, sizeof(UChar), 5000, zStream );
<       	 if (ferror(zStream)) goto errhandler_io;
<       	 if (nread > 0) fwrite ( obuf, sizeof(UChar), nread, stream );
<       	 if (ferror(stream)) goto errhandler_io;
<       }
<       goto closeok;
<    }
<   
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          crcError();
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          compressedStreamEOF();
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (stream != stdout) fclose(stream);
<          if (streamNo == 1) {
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "\n%s: %s: trailing garbage after EOF ignored\n",
<                       progName, inName );
<             return True;       
<          }
<       default:
<          panic ( "decompress:unexpected error" );
<    }
< 
<    panic ( "decompress:end" );
<    return True; 
< }
---
> ;
5043,5128c4804
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(zStream);
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto errhandler;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
<       if (nUnused == 0 && myfeof(zStream)) break;
< 
<    }
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    if (verbosity == 0) 
<       fprintf ( stderr, "%s: %s: ", progName, inName );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          fprintf ( stderr,
<                    "data integrity (CRC) error in data\n" );
<          return False;
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          fprintf ( stderr,
<                    "file ends unexpectedly\n" );
<          return False;
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (streamNo == 1) {
<           fprintf ( stderr, 
<                     "bad magic number (file not created by bzip2)\n" );
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "trailing garbage after EOF ignored\n" );
<             return True;       
<          }
<       default:
<          panic ( "test:unexpected error" );
<    }
< 
<    panic ( "test:end" );
<    return True; 
< }
---
> ;
5138,5140c4814
< {
<    if (v > exitValue) exitValue = v;
< }
---
> ;
5146,5155c4820
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\nIt is possible that the compressed file(s) have become corrupted.\n"
<         "You can use the -tvv option to test integrity of such files.\n\n"
<         "You can use the `bzip2recover' program to attempt to recover\n"
<         "data from undamaged sections of corrupted files.\n\n"
<     );
< }
---
> ;
5161,5168c4826
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\tInput file = %s, output file = %s\n",
<       inName, outName 
<    );
< }
---
> ;
5174,5223c4832
< {
<    IntNative      retVal;
<    struct MY_STAT statBuf;
< 
<    if ( srcMode == SM_F2F 
<         && opMode != OM_TEST
<         && deleteOutputOnInterrupt ) {
< 
<       
<       retVal = MY_STAT ( inName, &statBuf );
<       if (retVal == 0) {
<          if (noisy)
<             fprintf ( stderr, 
<                       "%s: Deleting output file %s, if it exists.\n",
<                       progName, outName );
<          if (outputHandleJustInCase != NULL)
<             fclose ( outputHandleJustInCase );
<          retVal = remove ( outName );
<          if (retVal != 0)
<             fprintf ( stderr,
<                       "%s: WARNING: deletion of output file "
<                       "(apparently) failed.\n",
<                       progName );
<       } else {
<          fprintf ( stderr,
<                    "%s: WARNING: deletion of output file suppressed\n",
<                     progName );
<          fprintf ( stderr,
<                    "%s:    since input file no longer exists.  Output file\n",
<                    progName );
<          fprintf ( stderr,
<                    "%s:    `%s' may be incomplete.\n",
<                    progName, outName );
<          fprintf ( stderr, 
<                    "%s:    I suggest doing an integrity test (bzip2 -tv)"
<                    " of it.\n",
<                    progName );
<       }
<    }
< 
<    if (noisy && numFileNames > 0 && numFilesProcessed < numFileNames) {
<       fprintf ( stderr, 
<                 "%s: WARNING: some files have not been processed:\n"
<                 "%s:    %d specified on command line, %d not processed yet.\n\n",
<                 progName, progName,
<                 numFileNames, numFileNames - numFilesProcessed );
<    }
<    setExit(ec);
<    exit(exitValue);
< }
---
> ;
5229,5238c4838
< {
<    fprintf ( stderr,
<              "\n%s: PANIC -- internal consistency error:\n"
<              "\t%s\n"
<              "\tThis is a BUG.  Please report it to me at:\n"
<              "\tjseward@acm.org\n",
<              progName, s );
<    showFileNames();
<    cleanUpAndFail( 3 );
< }
---
> ;
5244,5251c4844
< {
<    fprintf ( stderr,
<              "\n%s: Data integrity error when decompressing.\n",
<              progName );
<    showFileNames();
<    cadvise();
<    cleanUpAndFail( 2 );
< }
---
> ;
5257,5268c4850
< {
<   if (noisy) {
<     fprintf ( stderr,
< 	      "\n%s: Compressed file ends unexpectedly;\n\t"
< 	      "perhaps it is corrupted?  *Possible* reason follows.\n",
< 	      progName );
<     perror ( progName );
<     showFileNames();
<     cadvise();
<   }
<   cleanUpAndFail( 2 );
< }
---
> ;
5274,5282c4856
< {
<    fprintf ( stderr,
<              "\n%s: I/O or other error, bailing out.  "
<              "Possible reason follows.\n",
<              progName );
<    perror ( progName );
<    showFileNames();
<    cleanUpAndFail( 1 );
< }
---
> ;
5288,5293c4862
< {
<    fprintf ( stderr,
<              "\n%s: Control-C or similar caught, quitting.\n",
<              progName );
<    cleanUpAndFail(1);
< }
---
> ;
5299,5349c4868
< {
<    if (opMode == OM_Z)
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst compressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (2) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (3) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (1) and (2).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (1)\n"
<       "   or (2), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
<       else
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst decompressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) The compressed data is corrupted, and bzip2's usual checks\n"
<       "       failed to detect this.  Try bzip2 -tvv my_file.bz2.\n"
<       "   (2) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (3) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (4) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (2) and (3).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (2)\n"
<       "   or (3), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
< 
<    showFileNames();
<    if (opMode == OM_Z)
<       cleanUpAndFail( 3 ); else
<       { cadvise(); cleanUpAndFail( 2 ); }
< }
---
> ;
5355,5361c4874
< {
<    fprintf ( stderr,
<              "\n%s: couldn't allocate enough memory\n",
<              progName );
<    showFileNames();
<    cleanUpAndFail(1);
< }
---
> ;
5367,5376c4880
< {
<    fprintf ( stderr,
<              "bzip2: I'm not configured correctly for this platform!\n"
<              "\tI require Int32, Int16 and Char to have sizes\n"
<              "\tof 4, 2 and 1 bytes to run properly, and they don't.\n"
<              "\tProbably you can fix this by defining them correctly,\n"
<              "\tand recompiling.  Bye!\n" );
<    setExit(3);
<    exit(exitValue);
< }
---
> ;
5388,5393c4892
< {
<    Int32 i;
<    if ( (Int32)strlen(s) >= longestFileName ) return;
<    for (i = 1; i <= longestFileName - (Int32)strlen(s); i++)
<       fprintf ( stderr, " " );
< }
---
> ;
5399,5414c4898
< {
<    if ( strlen(from) > FILE_NAME_LEN-10 )  {
<       fprintf (
<          stderr,
<          "bzip2: file name\n`%s'\n"
<          "is suspiciously (more than %d chars) long.\n"
<          "Try using a reasonable file name instead.  Sorry! :-)\n",
<          from, FILE_NAME_LEN-10
<       );
<       setExit(1);
<       exit(exitValue);
<    }
< 
<   strncpy(to,from,FILE_NAME_LEN-10);
<   to[FILE_NAME_LEN-10]='\0';
< }
---
> ;
5420,5425c4904
< {
<    FILE *tmp   = fopen ( name, "rb" );
<    Bool exists = (tmp != NULL);
<    if (tmp != NULL) fclose ( tmp );
<    return exists;
< }
---
> ;
5431,5443c4910
< {
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
<    return fopen(name, mode);
< #  endif
< }
---
> ;
5450,5458c4917
< {
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return True;
<    if (MY_S_ISREG(statBuf.st_mode)) return False;
<    return True;
< }
---
> ;
5465,5472c4924
< {  
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return 0;
<    return (statBuf.st_nlink - 1);
< }
---
> ;
5484,5491c4936
< {
< #  if BZ_UNIX
<    IntNative retVal;
<    
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
< }
---
> ;
5496,5513c4941
< {
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    
< #  endif
< }
---
> ;
5519,5529c4947
< {
< #  if BZ_UNIX
<    
<    return False;
< #  else 
<    
<    for (; *name != '\0'; name++)
<       if (*name == '?' || *name == '*') return True;
<    return False;
< #  endif 
< }
---
> ;
5542,5548c4960
< {
<    Int32 ns = strlen(s);
<    Int32 nx = strlen(suffix);
<    if (ns < nx) return False;
<    if (strcmp(s + ns - nx, suffix) == 0) return True;
<    return False;
< }
---
> ;
5553,5558c4965
< {
<    if (!hasSuffix(name,oldSuffix)) return False;
<    name[strlen(name)-strlen(oldSuffix)] = 0;
<    strcat ( name, newSuffix );
<    return True;
< }
---
> ;
5564,5738c4971
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "compress: bad modes\n" );
< 
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          strcat ( outName, ".bz2" ); 
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++) {
<       if (hasSuffix(inName, zSuffix[i])) {
<          if (noisy)
<          fprintf ( stderr, 
<                    "%s: Input file %s already has %s suffix.\n",
<                    progName, inName, zSuffix[i] );
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	 remove(outName);
<       } else {
< 	 fprintf ( stderr, "%s: Output file %s already exists.\n",
< 		   progName, outName );
< 	 setExit(1);
< 	 return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName )) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "compress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr,  "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    compressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( srcMode == SM_F2F ) {
<       applySavedMetaInfoToOutputFile ( outName );
<       deleteOutputOnInterrupt = False;
<       if ( !keepInputFiles ) {
<          IntNative retVal = remove ( inName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
< 
<    deleteOutputOnInterrupt = False;
< }
---
> ;
5744,5935c4977
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    Bool  magicNumberOK;
<    Bool  cantGuess;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "uncompress: bad modes\n" );
< 
<    cantGuess = False;
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++)
<             if (mapSuffix(outName,zSuffix[i],unzSuffix[i]))
<                goto zzz; 
<          cantGuess = True;
<          strcat ( outName, ".out" );
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    zzz:
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if (  cantGuess ) {
<       if (noisy)
<       fprintf ( stderr, 
<                 "%s: Can't guess original name for %s -- using %s\n",
<                 progName, inName, outName );
<       
<    }   
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	remove(outName);
<       } else {
<         fprintf ( stderr, "%s: Output file %s already exists.\n",
<                   progName, outName );
<         setExit(1);
<         return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName ) ) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "uncompress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    magicNumberOK = uncompressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( magicNumberOK ) {
<       if ( srcMode == SM_F2F ) {
<          applySavedMetaInfoToOutputFile ( outName );
<          deleteOutputOnInterrupt = False;
<          if ( !keepInputFiles ) {
<             IntNative retVal = remove ( inName );
<             ERROR_IF_NOT_ZERO ( retVal );
<          }
<       }
<    } else {
<       unzFailsExist = True;
<       deleteOutputOnInterrupt = False;
<       if ( srcMode == SM_F2F ) {
<          IntNative retVal = remove ( outName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
<    deleteOutputOnInterrupt = False;
< 
<    if ( magicNumberOK ) {
<       if (verbosity >= 1)
<          fprintf ( stderr, "done\n" );
<    } else {
<       setExit(2);
<       if (verbosity >= 1)
<          fprintf ( stderr, "not a bzip2 file.\n" ); else
<          fprintf ( stderr,
<                    "%s: %s is not a bzip2 file.\n",
<                    progName, inName );
<    }
< 
< }
---
> ;
5941,6024c4983
< {
<    FILE *inStr;
<    Bool allOK;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "testf: bad modes\n" );
< 
<    copyFileName ( outName, "(none)" );
<    switch (srcMode) {
<       case SM_I2O: copyFileName ( inName, "(stdin)" ); break;
<       case SM_F2F: copyFileName ( inName, name ); break;
<       case SM_F2O: copyFileName ( inName, name ); break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          inStr = stdin;
<          break;
< 
<       case SM_F2O: case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "testf: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = NULL;
<    allOK = testStream ( inStr );
< 
<    if (allOK && verbosity >= 1) fprintf ( stderr, "ok\n" );
<    if (!allOK) testFailsExist = True;
< }
---
> ;
6030,6049c4989
< {
<    fprintf ( stderr,
< 
<     "bzip2, a block-sorting file compressor.  "
<     "Version %s.\n"
<     "   \n"
<     "   Copyright (C) 1996-2002 by Julian Seward.\n"
<     "   \n"
<     "   This program is free software; you can redistribute it and/or modify\n"
<     "   it under the terms set out in the LICENSE file, which is included\n"
<     "   in the bzip2-1.0 source distribution.\n"
<     "   \n"
<     "   This program is distributed in the hope that it will be useful,\n"
<     "   but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
<     "   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
<     "   LICENSE file for more details.\n"
<     "   \n",
<     BZ2_bzlibVersion()
<    );
< }
---
> ;
6055,6093c4995
< {
<    fprintf (
<       stderr,
<       "bzip2, a block-sorting file compressor.  "
<       "Version %s.\n"
<       "\n   usage: %s [flags and input files in any order]\n"
<       "\n"
<       "   -h --help           print this message\n"
<       "   -d --decompress     force decompression\n"
<       "   -z --compress       force compression\n"
<       "   -k --keep           keep (don't delete) input files\n"
<       "   -f --force          overwrite existing output files\n"
<       "   -t --test           test compressed file integrity\n"
<       "   -c --stdout         output to standard out\n"
<       "   -q --quiet          suppress noncritical error messages\n"
<       "   -v --verbose        be verbose (a 2nd -v gives more)\n"
<       "   -L --license        display software version & license\n"
<       "   -V --version        display software version & license\n"
<       "   -s --small          use less memory (at most 2500k)\n"
<       "   -1 .. -9            set block size to 100k .. 900k\n"
<       "   --fast              alias for -1\n"
<       "   --best              alias for -9\n"
<       "\n"
<       "   If invoked as `bzip2', default action is to compress.\n"
<       "              as `bunzip2',  default action is to decompress.\n"
<       "              as `bzcat', default action is to decompress to stdout.\n"
<       "\n"
<       "   If no file names are given, bzip2 compresses or decompresses\n"
<       "   from standard input to standard output.  You can combine\n"
<       "   short flags, so `-v -4' means the same as -v4 or -4v, &c.\n"
< #     if BZ_UNIX
<       "\n"
< #     endif
<       ,
< 
<       BZ2_bzlibVersion(),
<       fullProgName
<    );
< }
---
> ;
6099,6104c5001
< {
<    fprintf ( 
<       stderr, 
<       "%s: %s is redundant in versions 0.9.5 and above\n",
<       progName, flag );
< }
---
> ;
6121,6127c5018
< {
<    void* p;
< 
<    p = malloc ( (size_t)n );
<    if (p == NULL) outOfMemory ();
<    return p;
< }
---
> ;
6133,6140c5024
< {
<    Cell *c;
< 
<    c = (Cell*) myMalloc ( sizeof ( Cell ) );
<    c->name = NULL;
<    c->link = NULL;
<    return c;
< }
---
> ;
6146,6158c5030
< {
<    if (root == NULL) {
<       Cell *tmp = mkCell();
<       tmp->name = (Char*) myMalloc ( 5 + strlen(name) );
<       strcpy ( tmp->name, name );
<       return tmp;
<    } else {
<       Cell *tmp = root;
<       while (tmp->link != NULL) tmp = tmp->link;
<       tmp->link = snocString ( tmp->link, name );
<       return root;
<    }
< }
---
> ;
6164,6186c5036
< {
<    Int32 i, j, k;
<    Char *envbase, *p;
< 
<    envbase = getenv(varName);
<    if (envbase != NULL) {
<       p = envbase;
<       i = 0;
<       while (True) {
<          if (p[i] == 0) break;
<          p += i;
<          i = 0;
<          while (isspace((Int32)(p[0]))) p++;
<          while (p[i] != 0 && !isspace((Int32)(p[i]))) i++;
<          if (i > 0) {
<             k = i; if (k > FILE_NAME_LEN-10) k = FILE_NAME_LEN-10;
<             for (j = 0; j < k; j++) tmpName[j] = p[j];
<             tmpName[k] = 0;
<             APPEND_FLAG(*argList, tmpName);
<          }
<       }
<    }
< }
---
> ;
6193,6439c5043
< {
<    Int32  i, j;
<    Char   *tmp;
<    Cell   *argList;
<    Cell   *aa;
<    Bool   decode;
< 
<    
<    if (sizeof(Int32) != 4 || sizeof(UInt32) != 4  ||
<        sizeof(Int16) != 2 || sizeof(UInt16) != 2  ||
<        sizeof(Char)  != 1 || sizeof(UChar)  != 1)
<       configError();
< 
<    
<    outputHandleJustInCase  = NULL;
<    smallMode               = False;
<    keepInputFiles          = False;
<    forceOverwrite          = False;
<    noisy                   = True;
<    verbosity               = 0;
<    blockSize100k           = 9;
<    testFailsExist          = False;
<    unzFailsExist           = False;
<    numFileNames            = 0;
<    numFilesProcessed       = 0;
<    workFactor              = 30;
<    deleteOutputOnInterrupt = False;
<    exitValue               = 0;
<    i = j = 0; 
< 
<    
<    signal (SIGSEGV, mySIGSEGVorSIGBUScatcher);
< #  if BZ_UNIX
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< 
<    copyFileName ( inName,  "(none)" );
<    copyFileName ( outName, "(none)" );
< 
<    copyFileName ( progNameReally, argv[0] );
<    progName = &progNameReally[0];
<    for (tmp = &progNameReally[0]; *tmp != '\0'; tmp++)
<       if (*tmp == PATH_SEP) progName = tmp + 1;
< 
< 
<    
<    argList = NULL;
<    addFlagsFromEnvVar ( &argList,  "BZIP2" );
<    addFlagsFromEnvVar ( &argList,  "BZIP" );
<    for (i = 1; i <= argc-1; i++)
<       APPEND_FILESPEC(argList, argv[i]);
< 
< 
<    
<    longestFileName = 7;
<    numFileNames    = 0;
<    decode          = True;
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) { decode = False; continue; }
<       if (aa->name[0] == '-' && decode) continue;
<       numFileNames++;
<       if (longestFileName < (Int32)strlen(aa->name) )
<          longestFileName = (Int32)strlen(aa->name);
<    }
< 
< 
<    
<    if (numFileNames == 0)
<       srcMode = SM_I2O; else srcMode = SM_F2F;
< 
< 
<    
<    
<    opMode = OM_Z;
< 
<    if ( (strstr ( progName, "unzip" ) != 0) ||
<         (strstr ( progName, "UNZIP" ) != 0) )
<       opMode = OM_UNZ;
< 
<    if ( (strstr ( progName, "z2cat" ) != 0) ||
<         (strstr ( progName, "Z2CAT" ) != 0) ||
<         (strstr ( progName, "zcat" ) != 0)  ||
<         (strstr ( progName, "ZCAT" ) != 0) )  {
<       opMode = OM_UNZ;
<       srcMode = (numFileNames == 0) ? SM_I2O : SM_F2O;
<    }
< 
< 
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (aa->name[0] == '-' && aa->name[1] != '-') {
<          for (j = 1; aa->name[j] != '\0'; j++) {
<             switch (aa->name[j]) {
<                case 'c': srcMode          = SM_F2O; break;
<                case 'd': opMode           = OM_UNZ; break;
<                case 'z': opMode           = OM_Z; break;
<                case 'f': forceOverwrite   = True; break;
<                case 't': opMode           = OM_TEST; break;
<                case 'k': keepInputFiles   = True; break;
<                case 's': smallMode        = True; break;
<                case 'q': noisy            = False; break;
<                case '1': blockSize100k    = 1; break;
<                case '2': blockSize100k    = 2; break;
<                case '3': blockSize100k    = 3; break;
<                case '4': blockSize100k    = 4; break;
<                case '5': blockSize100k    = 5; break;
<                case '6': blockSize100k    = 6; break;
<                case '7': blockSize100k    = 7; break;
<                case '8': blockSize100k    = 8; break;
<                case '9': blockSize100k    = 9; break;
<                case 'V':
<                case 'L': license();            break;
<                case 'v': verbosity++; break;
<                case 'h': usage ( progName );
<                          exit ( 0 );
<                          break;
<                default:  fprintf ( stderr, "%s: Bad flag `%s'\n",
<                                    progName, aa->name );
<                          usage ( progName );
<                          exit ( 1 );
<                          break;
<             }
<          }
<       }
<    }
<    
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (ISFLAG("--stdout"))            srcMode          = SM_F2O;  else
<       if (ISFLAG("--decompress"))        opMode           = OM_UNZ;  else
<       if (ISFLAG("--compress"))          opMode           = OM_Z;    else
<       if (ISFLAG("--force"))             forceOverwrite   = True;    else
<       if (ISFLAG("--test"))              opMode           = OM_TEST; else
<       if (ISFLAG("--keep"))              keepInputFiles   = True;    else
<       if (ISFLAG("--small"))             smallMode        = True;    else
<       if (ISFLAG("--quiet"))             noisy            = False;   else
<       if (ISFLAG("--version"))           license();                  else
<       if (ISFLAG("--license"))           license();                  else
<       if (ISFLAG("--exponential"))       workFactor = 1;             else 
<       if (ISFLAG("--repetitive-best"))   redundant(aa->name);        else
<       if (ISFLAG("--repetitive-fast"))   redundant(aa->name);        else
<       if (ISFLAG("--fast"))              blockSize100k = 1;          else
<       if (ISFLAG("--best"))              blockSize100k = 9;          else
<       if (ISFLAG("--verbose"))           verbosity++;                else
<       if (ISFLAG("--help"))              { usage ( progName ); exit ( 0 ); }
<          else
<          if (strncmp ( aa->name, "--", 2) == 0) {
<             fprintf ( stderr, "%s: Bad flag `%s'\n", progName, aa->name );
<             usage ( progName );
<             exit ( 1 );
<          }
<    }
< 
<    if (verbosity > 4) verbosity = 4;
<    if (opMode == OM_Z && smallMode && blockSize100k > 2) 
<       blockSize100k = 2;
< 
<    if (opMode == OM_TEST && srcMode == SM_F2O) {
<       fprintf ( stderr, "%s: -c and -t cannot be used together.\n",
<                 progName );
<       exit ( 1 );
<    }
< 
<    if (srcMode == SM_F2O && numFileNames == 0)
<       srcMode = SM_I2O;
< 
<    if (opMode != OM_Z) blockSize100k = 0;
< 
<    if (srcMode == SM_F2F) {
<       signal (SIGINT,  mySignalCatcher);
<       signal (SIGTERM, mySignalCatcher);
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
<    }
< 
<    if (opMode == OM_Z) {
<      if (srcMode == SM_I2O) {
<         compress ( NULL );
<      } else {
<         decode = True;
<         for (aa = argList; aa != NULL; aa = aa->link) {
<            if (ISFLAG("--")) { decode = False; continue; }
<            if (aa->name[0] == '-' && decode) continue;
<            numFilesProcessed++;
<            compress ( aa->name );
<         }
<      }
<    } 
<    else
< 
<    if (opMode == OM_UNZ) {
<       unzFailsExist = False;
<       if (srcMode == SM_I2O) {
<          uncompress ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
<             if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             uncompress ( aa->name );
<          }      
<       }
<       if (unzFailsExist) { 
<          setExit(2); 
<          exit(exitValue);
<       }
<    } 
< 
<    else {
<       testFailsExist = False;
<       if (srcMode == SM_I2O) {
<          testf ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
< 	    if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             testf ( aa->name );
< 	 }
<       }
<       if (testFailsExist && noisy) {
<          fprintf ( stderr,
<            "\n"
<            "You can use the `bzip2recover' program to attempt to recover\n"
<            "data from undamaged sections of corrupted files.\n\n"
<          );
<          setExit(2);
<          exit(exitValue);
<       }
<    }
< 
<    
<    aa = argList;
<    while (aa != NULL) {
<       Cell* aa2 = aa->link;
<       if (aa->name != NULL) free(aa->name);
<       free(aa);
<       aa = aa2;
<    }
< 
<    return exitValue;
< }
---
> ;
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2457c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
2462,2518c1208
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
(39.5 %, 124010 bytes)
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2457c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
2462,2518c1208
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1751,1774c1751
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1920
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1926
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1946
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1952
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1958
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1968
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1974
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2457c1983
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
2462,2518c1988
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
2534,2542c2004
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
2613,3119c2075
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
(49.3 %, 103928 bytes)
1140,1143c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1149,1156c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1176,1180c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1186,1191c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1197,1199c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1209,1217c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1223,1312c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1321,1654c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1659,1715c1208
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
1731,1739c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1810,2316c1295
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2335,2378c1314
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
2335,2378c2335
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
2384,2389c2341
< {
<    if (sizeof(int)   != 4) return 0;
<    if (sizeof(short) != 2) return 0;
<    if (sizeof(char)  != 1) return 0;
<    return 1;
< }
---
> ;
2395,2398c2347
< {
<    void* v = malloc ( items * size );
<    return v;
< }
---
> ;
2402,2404c2351
< {
<    if (addr != NULL) free ( addr );
< }
---
> ;
2410,2418c2357
< {
<    Int32 i;
<    s->nblock = 0;
<    s->numZ = 0;
<    s->state_out_pos = 0;
<    BZ_INITIALISE_CRC ( s->blockCRC );
<    for (i = 0; i < 256; i++) s->inUse[i] = False;
<    s->blockNo++;
< }
---
> ;
2424,2427c2363
< {
<    s->state_in_ch  = 256;
<    s->state_in_len = 0;
< }
---
> ;
2432,2436c2368
< {
<    if (s->state_in_ch < 256 && s->state_in_len > 0)
<       return False; else
<       return True;
< }
---
> ;
2509,2539c2441
< {
<    Int32 i;
<    UChar ch = (UChar)(s->state_in_ch);
<    for (i = 0; i < s->state_in_len; i++) {
<       BZ_UPDATE_CRC( s->blockCRC, ch );
<    }
<    s->inUse[s->state_in_ch] = True;
<    switch (s->state_in_len) {
<       case 1:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 2:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 3:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       default:
<          s->inUse[s->state_in_len-4] = True;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = ((UChar)(s->state_in_len-4));
<          s->nblock++;
<          break;
<    }
< }
---
> ;
2545,2548c2447
< {
<    if (s->state_in_ch < 256) add_pair_to_block ( s );
<    init_RL ( s );
< }
---
> ;
2582,2621c2481
< {
<    Bool progress_in = False;
< 
<    if (s->mode == BZ_M_RUNNING) {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<       }
< 
<    } else {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          
<          if (s->avail_in_expect == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<          s->avail_in_expect--;
<       }
<    }
<    return progress_in;
< }
---
> ;
2627,2648c2487
< {
<    Bool progress_out = False;
< 
<    while (True) {
< 
<       
<       if (s->strm->avail_out == 0) break;
< 
<       
<       if (s->state_out_pos >= s->numZ) break;
< 
<       progress_out = True;
<       *(s->strm->next_out) = s->zbits[s->state_out_pos];
<       s->state_out_pos++;
<       s->strm->avail_out--;
<       s->strm->next_out++;
<       s->strm->total_out_lo32++;
<       if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<    }
< 
<    return progress_out;
< }
---
> ;
2654,2695c2493
< {
<    Bool progress_in  = False;
<    Bool progress_out = False;
<    EState* s = strm->state;
<    
<    while (True) {
< 
<       if (s->state == BZ_S_OUTPUT) {
<          progress_out |= copy_output_until_stop ( s );
<          if (s->state_out_pos < s->numZ) break;
<          if (s->mode == BZ_M_FINISHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<          prepare_new_block ( s );
<          s->state = BZ_S_INPUT;
<          if (s->mode == BZ_M_FLUSHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<       }
< 
<       if (s->state == BZ_S_INPUT) {
<          progress_in |= copy_input_until_stop ( s );
<          if (s->mode != BZ_M_RUNNING && s->avail_in_expect == 0) {
<             flush_RL ( s );
<             BZ2_compressBlock ( s, (Bool)(s->mode == BZ_M_FINISHING) );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->nblock >= s->nblockMAX) {
<             BZ2_compressBlock ( s, False );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->strm->avail_in == 0) {
<             break;
<          }
<       }
< 
<    }
< 
<    return progress_in || progress_out;
< }
---
> ;
1140,1143c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1149,1156c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1176,1180c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1186,1191c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1197,1199c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1209,1217c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1223,1312c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
(52.3 %, 97724 bytes)
1140,1143c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1149,1156c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1176,1180c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1186,1191c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1197,1199c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1209,1217c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1223,1312c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1223,1312c1223
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1321,1654c1232
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1659,1715c1237
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
1731,1739c1253
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1810,2316c1324
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2624,2760c1632
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
2766,2776c1638
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
===< pass_clang_binsrch :: remove-unused-function >===
449,450c449
< extern void 
< BZ2_compressBlock ( EState*, Bool );
---
> ;
683,689c682
< static 
< __inline__
< void fallbackSimpleSort ( UInt32* fmap, 
<                           UInt32* eclass, 
<                           Int32   lo, 
<                           Int32   hi )
< ;
---
> 
722,727c715
< static
< void fallbackQSort3 ( UInt32* fmap, 
<                       UInt32* eclass,
<                       Int32   loSt, 
<                       Int32   hiSt )
< ;
---
> 
747,753c735
< static
< void fallbackSort ( UInt32* fmap, 
<                     UInt32* eclass, 
<                     UInt32* bhtab,
<                     Int32   nblock,
<                     Int32   verb )
< ;
---
> 
769,777c751
< static
< __inline__
< Bool mainGtU ( UInt32  i1, 
<                UInt32  i2,
<                UChar*  block, 
<                UInt16* quadrant,
<                UInt32  nblock,
<                Int32*  budget )
< ;
---
> 
787,796c761
< static
< void mainSimpleSort ( UInt32* ptr,
<                       UChar*  block,
<                       UInt16* quadrant,
<                       Int32   nblock,
<                       Int32   lo, 
<                       Int32   hi, 
<                       Int32   d,
<                       Int32*  budget )
< ;
---
> 
816,819c781
< static 
< __inline__
< UChar mmed3 ( UChar a, UChar b, UChar c )
< ;
---
> 
847,856c809
< static
< void mainQSort3 ( UInt32* ptr,
<                   UChar*  block,
<                   UInt16* quadrant,
<                   Int32   nblock,
<                   Int32   loSt, 
<                   Int32   hiSt, 
<                   Int32   dSt,
<                   Int32*  budget )
< ;
---
> 
877,885c830
< static
< void mainSort ( UInt32* ptr, 
<                 UChar*  block,
<                 UInt16* quadrant, 
<                 UInt32* ftab,
<                 Int32   nblock,
<                 Int32   verb,
<                 Int32*  budget )
< ;
---
> 
1658,1660d1602
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
1662,1715d1603
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
2439,2441d2326
< static
< void add_pair_to_block ( EState* s )
< ;
2445,2447c2330,2331
< static
< void flush_RL ( EState* s )
< ;
---
> 
> 
2479,2481d2362
< static
< Bool copy_input_until_stop ( EState* s )
< ;
2485,2487c2366,2367
< static
< Bool copy_output_until_stop ( EState* s )
< ;
---
> 
> 
2971,2977c2851
< static Bool myfeof ( FILE* f )
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> 
3718,3724d3591
< static void    panic                 ( Char* )   NORETURN;
< static void    ioError               ( void )    NORETURN;
< static void    outOfMemory           ( void )    NORETURN;
< static void    configError           ( void )    NORETURN;
< static void    crcError              ( void )    NORETURN;
< static void    cleanUpAndFail        ( Int32 )   NORETURN;
< static void    compressedStreamEOF   ( void )    NORETURN;
3726,3727c3593,3601
< static void    copyFileName ( Char*, Char* );
< static void*   myMalloc     ( Int32 );
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
3741,3752d3614
< static
< void uInt64_from_UInt32s ( UInt64* n, UInt32 lo32, UInt32 hi32 )
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
3755,3757d3616
< static
< double uInt64_to_double ( UInt64* n )
< ;
3760,3762d3618
< static
< Bool uInt64_isZero ( UInt64* n )
< ;
3766,3768d3621
< static 
< Int32 uInt64_qrm10 ( UInt64* n )
< ;
3772,3774d3624
< static
< void uInt64_toAscii ( char* outbuf, UInt64* n )
< ;
3784,3786d3633
< static 
< void compressStream ( FILE *stream, FILE *zStream )
< ;
3791,3793d3637
< static 
< Bool uncompressStream ( FILE *zStream, FILE *stream )
< ;
3797,3799d3640
< static 
< Bool testStream ( FILE *zStream )
< ;
3807,3809d3647
< static
< void setExit ( Int32 v )
< ;
3813,3815d3650
< static 
< void cadvise ( void )
< ;
3819,3821d3653
< static 
< void showFileNames ( void )
< ;
3825,3827d3656
< static 
< void cleanUpAndFail ( Int32 ec )
< ;
3831,3833d3659
< static 
< void panic ( Char* s )
< ;
3837,3839d3662
< static 
< void crcError ( void )
< ;
3843,3845d3665
< static 
< void compressedStreamEOF ( void )
< ;
3849,3851d3668
< static 
< void ioError ( void )
< ;
3855,3857d3671
< static 
< void mySignalCatcher ( IntNative n )
< ;
3861,3863d3674
< static 
< void mySIGSEGVorSIGBUScatcher ( IntNative n )
< ;
3867,3869d3677
< static 
< void outOfMemory ( void )
< ;
3873,3875d3680
< static 
< void configError ( void )
< ;
3885,3887d3689
< static 
< void pad ( Char *s )
< ;
3891,3893d3692
< static 
< void copyFileName ( Char* to, Char* from ) 
< ;
3897,3899d3695
< static 
< Bool fileExists ( Char* name )
< ;
3904,3905d3699
< FILE* fopen_output_safely ( Char* name, const char* mode )
< ;
3910,3912d3703
< static 
< Bool notAStandardFile ( Char* name )
< ;
3917,3919c3708,3733
< static 
< Int32 countHardLinks ( Char* name )
< ;
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
3929,3931d3742
< static 
< void saveInputFileMetaInfo ( Char *srcName )
< ;
3934,3936d3744
< static 
< void applySavedMetaInfoToOutputFile ( Char *dstName )
< ;
3940,3942c3748,3750
< static 
< Bool containsDubiousChars ( Char* name )
< ;
---
> 
> 
> 
3953,3955d3760
< static 
< Bool hasSuffix ( Char* s, Char* suffix )
< ;
3957,3960d3761
< static 
< Bool mapSuffix ( Char* name, 
<                  Char* oldSuffix, Char* newSuffix )
< ;
3964,3966d3764
< static 
< void compress ( Char *name )
< ;
3970,3972d3767
< static 
< void uncompress ( Char *name )
< ;
3976,3978d3770
< static 
< void testf ( Char *name )
< ;
3982,3984d3773
< static 
< void license ( void )
< ;
3988,3990d3776
< static 
< void usage ( Char *fullProgName )
< ;
3994,3996c3780,3787
< static 
< void redundant ( Char* flag )
< ;
---
> 
> 
> 
> 
> 
> 
> 
> 
4011,4013d3801
< static 
< void *myMalloc ( Int32 n )
< ;
4017,4019d3804
< static 
< Cell *mkCell ( void )
< ;
4023,4025d3807
< static 
< Cell *snocString ( Cell *root, Char *name )
< ;
4029,4031c3811,3814
< static 
< void addFlagsFromEnvVar ( Cell** argList, Char* varName ) 
< ;
---
> 
> 
> 
> 
449,450c449
< extern void 
< BZ2_compressBlock ( EState*, Bool );
---
> ;
683,689c682
< static 
< __inline__
< void fallbackSimpleSort ( UInt32* fmap, 
<                           UInt32* eclass, 
<                           Int32   lo, 
<                           Int32   hi )
< ;
---
> 
722,727c715
< static
< void fallbackQSort3 ( UInt32* fmap, 
<                       UInt32* eclass,
<                       Int32   loSt, 
<                       Int32   hiSt )
< ;
---
> 
747,753c735
< static
< void fallbackSort ( UInt32* fmap, 
<                     UInt32* eclass, 
<                     UInt32* bhtab,
<                     Int32   nblock,
<                     Int32   verb )
< ;
---
> 
769,777c751
< static
< __inline__
< Bool mainGtU ( UInt32  i1, 
<                UInt32  i2,
<                UChar*  block, 
<                UInt16* quadrant,
<                UInt32  nblock,
<                Int32*  budget )
< ;
---
> 
787,796c761
< static
< void mainSimpleSort ( UInt32* ptr,
<                       UChar*  block,
<                       UInt16* quadrant,
<                       Int32   nblock,
<                       Int32   lo, 
<                       Int32   hi, 
<                       Int32   d,
<                       Int32*  budget )
< ;
---
> 
816,819c781
< static 
< __inline__
< UChar mmed3 ( UChar a, UChar b, UChar c )
< ;
---
> 
847,856c809
< static
< void mainQSort3 ( UInt32* ptr,
<                   UChar*  block,
<                   UInt16* quadrant,
<                   Int32   nblock,
<                   Int32   loSt, 
<                   Int32   hiSt, 
<                   Int32   dSt,
<                   Int32*  budget )
< ;
---
> 
877,885c830
< static
< void mainSort ( UInt32* ptr, 
<                 UChar*  block,
<                 UInt16* quadrant, 
<                 UInt32* ftab,
<                 Int32   nblock,
<                 Int32   verb,
<                 Int32*  budget )
< ;
---
> 
1658,1684d1602
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
1686,1715d1603
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
2439,2441d2326
< static
< void add_pair_to_block ( EState* s )
< ;
2445,2447c2330,2331
< static
< void flush_RL ( EState* s )
< ;
---
> 
> 
2479,2481d2362
< static
< Bool copy_input_until_stop ( EState* s )
< ;
2485,2487c2366,2367
< static
< Bool copy_output_until_stop ( EState* s )
< ;
---
> 
> 
2971,2977c2851
< static Bool myfeof ( FILE* f )
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> 
3718,3724d3591
< static void    panic                 ( Char* )   NORETURN;
< static void    ioError               ( void )    NORETURN;
< static void    outOfMemory           ( void )    NORETURN;
< static void    configError           ( void )    NORETURN;
< static void    crcError              ( void )    NORETURN;
< static void    cleanUpAndFail        ( Int32 )   NORETURN;
< static void    compressedStreamEOF   ( void )    NORETURN;
3726,3727c3593,3601
< static void    copyFileName ( Char*, Char* );
< static void*   myMalloc     ( Int32 );
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
3741,3752d3614
< static
< void uInt64_from_UInt32s ( UInt64* n, UInt32 lo32, UInt32 hi32 )
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
3755,3757d3616
< static
< double uInt64_to_double ( UInt64* n )
< ;
3760,3762d3618
< static
< Bool uInt64_isZero ( UInt64* n )
< ;
3766,3768d3621
< static 
< Int32 uInt64_qrm10 ( UInt64* n )
< ;
3772,3774d3624
< static
< void uInt64_toAscii ( char* outbuf, UInt64* n )
< ;
3784,3786c3634,3639
< static 
< void compressStream ( FILE *stream, FILE *zStream )
< ;
---
> 
> 
> 
> 
> 
> 
3825,3827d3677
< static 
< void cleanUpAndFail ( Int32 ec )
< ;
3831,3833d3680
< static 
< void panic ( Char* s )
< ;
3837,3839d3683
< static 
< void crcError ( void )
< ;
3843,3845d3686
< static 
< void compressedStreamEOF ( void )
< ;
3849,3851c3690,3694
< static 
< void ioError ( void )
< ;
---
> 
> 
> 
> 
> 
3867,3869d3709
< static 
< void outOfMemory ( void )
< ;
3873,3875c3713,3714
< static 
< void configError ( void )
< ;
---
> 
> 
3891,3893c3730
< static 
< void copyFileName ( Char* to, Char* from ) 
< ;
---
> 
4011,4013c3848
< static 
< void *myMalloc ( Int32 n )
< ;
---
> 
(55.3 %, 91545 bytes)
===< pass_clang_binsrch :: replace-function-def-with-decl >===
1085,1088c1085
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1094,1101c1091
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1121,1125c1111
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1131,1136c1117
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1142,1144c1123
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1154,1162c1133
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1168,1257c1139
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1266,1599c1148
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1619,1627c1168
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1698,2204c1239
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2504,2640c1539
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
2646,2656c1545
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
2662,2752c1551
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3309,3367c2108
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
1085,1088c1085
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1094,1101c1091
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1121,1125c1111
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1131,1136c1117
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1142,1144c1123
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1154,1162c1133
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1168,1257c1139
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1266,1599c1148
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1266,1599c1266
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1619,1627c1286
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1698,2204c1357
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2504,2640c1657
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
2646,2656c1663
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
2662,2752c1669
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3309,3367c2226
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
(72.1 %, 57228 bytes)
===< pass_clang_binsrch :: remove-unused-function >===
446,447c446,448
< extern void 
< BZ2_blockSort ( EState* );
---
> 
> 
> ;
451,452d451
< extern void 
< BZ2_bsInitWrite ( EState* );
454,455d452
< extern void 
< BZ2_hbAssignCodes ( Int32*, UChar*, Int32, Int32, Int32 );
457,458c454
< extern void 
< BZ2_hbMakeCodeLengths ( UChar*, Int32*, Int32, Int32 );
---
> 
651,652c647
< extern Int32 
< BZ2_indexIntoF ( Int32, Int32* );
---
> 
657,659c652
< extern void 
< BZ2_hbCreateDecodeTables ( Int32*, Int32*, Int32*, UChar*,
<                            Int32,  Int32, Int32 );
---
> 
839,840c832
< void BZ2_blockSort ( EState* s )
< ;
---
> 
892,896d883
< void BZ2_hbMakeCodeLengths ( UChar *len, 
<                              Int32 *freq,
<                              Int32 alphaSize,
<                              Int32 maxLen )
< ;
900,905d886
< void BZ2_hbAssignCodes ( Int32 *code,
<                          UChar *length,
<                          Int32 minLen,
<                          Int32 maxLen,
<                          Int32 alphaSize )
< ;
909,916c890,892
< void BZ2_hbCreateDecodeTables ( Int32 *limit,
<                                 Int32 *base,
<                                 Int32 *perm,
<                                 UChar *length,
<                                 Int32 minLen,
<                                 Int32 maxLen,
<                                 Int32 alphaSize )
< ;
---
> 
> 
> 
1084,1088d1059
< void BZ2_bsInitWrite ( EState* s )
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
1092,1101c1063,1064
< static
< void bsFinishWrite ( EState* s )
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> 
> 
1129,1136d1091
< static
< void bsPutUInt32 ( EState* s, UInt32 u )
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
1140,1144c1095,1096
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
> 
1166,1254d1117
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
1256,1257d1118
<    s->nMTF = wr;
< }
1264,1266d1124
< static
< void sendMTFValues ( EState* s )
< ;
1284,1286c1142,1143
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
> 
1662,1663c1519
< Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
< ;
---
> 
446,447c446,448
< extern void 
< BZ2_blockSort ( EState* );
---
> 
> 
> ;
451,452d451
< extern void 
< BZ2_bsInitWrite ( EState* );
454,455d452
< extern void 
< BZ2_hbAssignCodes ( Int32*, UChar*, Int32, Int32, Int32 );
457,458c454
< extern void 
< BZ2_hbMakeCodeLengths ( UChar*, Int32*, Int32, Int32 );
---
> 
651,652c647
< extern Int32 
< BZ2_indexIntoF ( Int32, Int32* );
---
> 
657,659c652
< extern void 
< BZ2_hbCreateDecodeTables ( Int32*, Int32*, Int32*, UChar*,
<                            Int32,  Int32, Int32 );
---
> 
839,840c832
< void BZ2_blockSort ( EState* s )
< ;
---
> 
892,896d883
< void BZ2_hbMakeCodeLengths ( UChar *len, 
<                              Int32 *freq,
<                              Int32 alphaSize,
<                              Int32 maxLen )
< ;
900,905d886
< void BZ2_hbAssignCodes ( Int32 *code,
<                          UChar *length,
<                          Int32 minLen,
<                          Int32 maxLen,
<                          Int32 alphaSize )
< ;
909,916c890,892
< void BZ2_hbCreateDecodeTables ( Int32 *limit,
<                                 Int32 *base,
<                                 Int32 *perm,
<                                 UChar *length,
<                                 Int32 minLen,
<                                 Int32 maxLen,
<                                 Int32 alphaSize )
< ;
---
> 
> 
> 
1084,1088d1059
< void BZ2_bsInitWrite ( EState* s )
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
1092,1101c1063,1064
< static
< void bsFinishWrite ( EState* s )
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> 
> 
1662,1663c1625
< Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
< ;
---
> 
1092,1101c1092
< static
< void bsFinishWrite ( EState* s )
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> 
1129,1136d1119
< static
< void bsPutUInt32 ( EState* s, UInt32 u )
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
1140,1144c1123,1124
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
> 
1166,1252d1145
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
1254,1257d1146
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1264,1266d1152
< static
< void sendMTFValues ( EState* s )
< ;
1284,1286c1170,1171
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
> 
(72.8 %, 55792 bytes)
===< pass_clang :: remove-unused-function >===
1092,1099c1092
< static
< void bsPutUInt32 ( EState* s, UInt32 u )
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> 
1103,1107c1103
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
(72.9 %, 55597 bytes)
1096,1100c1096
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
1122,1129d1121
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1131,1213d1122
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
(72.9 %, 55521 bytes)
1081,1088c1081
< static
< __inline__
< void bsW ( EState* s, Int32 n, UInt32 v )
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> 
1118,1125d1117
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1127,1209d1118
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
(73.0 %, 55376 bytes)
1111,1118d1110
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1120,1202d1111
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1209,1211c1209
< static
< void sendMTFValues ( EState* s )
< ;
---
> 
1229,1231c1229
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
(73.0 %, 55335 bytes)
1227,1229c1227
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
(73.0 %, 55297 bytes)
===< pass_balanced :: curly >===
31,47c31
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
---
>    struct  
255c255
<    { if (!(cond)) BZ2_bz__AssertH__fail ( errcode ); }
---
>    
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    { if (!(cond)) }
318,322c318
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
---
>    if (s->rNToGo == 0)                                            \
(73.0 %, 55246 bytes)
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    { if (!(cond)) }
318,322c318
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
---
>    if (s->rNToGo == 0)                                            \
(73.1 %, 55102 bytes)
314,318c314
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
---
>    if (s->rNToGo == 0)                                            \
328,330c328
< {                                              \
<    crcVar = 0xffffffffL;                       \
< }
---
> 
(73.2 %, 54925 bytes)
324,326c324
< {                                              \
<    crcVar = 0xffffffffL;                       \
< }
---
> 
329,331c329
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
---
> 
(73.2 %, 54826 bytes)
327,329c327
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
---
> 
332,336c332
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
---
> 
361,429c361
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>    struct 
(73.3 %, 54727 bytes)
330,334c330
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
---
> 
359,427c359
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>    struct 
505,594c505
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
---
>    struct 
612,615c612
<    { if (((i) & 0x1) == 0)                                    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
<    }
---
>    
(73.4 %, 54530 bytes)
355,423c355
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>    struct 
501,590c501
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
---
>    struct 
608,611c608
<    { if (((i) & 0x1) == 0)                                    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
<    }
---
>    
617,619c617
<    { s->ll16[i] = (UInt16)(n & 0x0000ffff);  \
<      SET_LL4(i, n >> 16);                    \
<    }
---
>    
664c664
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
(73.5 %, 54325 bytes)
614,616c614
<    { s->ll16[i] = (UInt16)(n & 0x0000ffff);  \
<      SET_LL4(i, n >> 16);                    \
<    }
---
>    
661c661
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
(73.5 %, 54230 bytes)
659c659
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
662,670c662
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
666,669c666
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
---
>    while (yyn > 0)                                   \
(73.6 %, 54184 bytes)
662,670c662
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
666,669c666
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
---
>    while (yyn > 0)                                   \
(73.7 %, 53863 bytes)
667,669c667
< #define fpush(lz,hz) { stackLo[sp] = lz; \
<                        stackHi[sp] = hz; \
<                        sp++; }
---
> #define fpush(lz,hz) 
671,673c671
< #define fpop(lz,hz) { sp--;              \
<                       lz = stackLo[sp];  \
<                       hz = stackHi[sp]; }
---
> #define fpop(lz,hz) 
(73.8 %, 53768 bytes)
669,671c669
< #define fpop(lz,hz) { sp--;              \
<                       lz = stackLo[sp];  \
<                       hz = stackHi[sp]; }
---
> #define fpop(lz,hz) 
719,721c719
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] = ;
730c730
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
(73.8 %, 53661 bytes)
717,719c717
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] = ;
728c728
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
731,739c731
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
(73.8 %, 53615 bytes)
731,739c731
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
735,738c735
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
---
>    while (yyn > 0)                                   \
(74.0 %, 53294 bytes)
737,740c737
< #define mpush(lz,hz,dz) { stackLo[sp] = lz; \
<                           stackHi[sp] = hz; \
<                           stackD [sp] = dz; \
<                           sp++; }
---
> #define mpush(lz,hz,dz) 
742,745c742
< #define mpop(lz,hz,dz) { sp--;             \
<                          lz = stackLo[sp]; \
<                          hz = stackHi[sp]; \
<                          dz = stackD [sp]; }
---
> #define mpop(lz,hz,dz) 
751,754c751
<    { Int32 tz;                                                  \
<      tz = nextLo[az]; nextLo[az] = nextLo[bz]; nextLo[bz] = tz; \
<      tz = nextHi[az]; nextHi[az] = nextHi[bz]; nextHi[bz] = tz; \
<      tz = nextD [az]; nextD [az] = nextD [bz]; nextD [bz] = tz; }
---
>    
(74.1 %, 53147 bytes)
739,742c739
< #define mpop(lz,hz,dz) { sp--;             \
<                          lz = stackLo[sp]; \
<                          hz = stackHi[sp]; \
<                          dz = stackD [sp]; }
---
> #define mpop(lz,hz,dz) 
748,751c748
<    { Int32 tz;                                                  \
<      tz = nextLo[az]; nextLo[az] = nextLo[bz]; nextLo[bz] = tz; \
<      tz = nextHi[az]; nextHi[az] = nextHi[bz]; nextHi[bz] = tz; \
<      tz = nextD [az]; nextD [az] = nextD [bz]; nextD [bz] = tz; }
---
>    
(74.1 %, 52991 bytes)
745,748c745
<    { Int32 tz;                                                  \
<      tz = nextLo[az]; nextLo[az] = nextLo[bz]; nextLo[bz] = tz; \
<      tz = nextHi[az]; nextHi[az] = nextHi[bz]; nextHi[bz] = tz; \
<      tz = nextD [az]; nextD [az] = nextD [bz]; nextD [bz] = tz; }
---
>    
808,816c808
< {                                                     \
<    Int32 zz, tmp;                                     \
<    zz = z; tmp = heap[zz];                            \
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
(74.3 %, 52731 bytes)
805,813c805
< {                                                     \
<    Int32 zz, tmp;                                     \
<    zz = z; tmp = heap[zz];                            \
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
808,811c808
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
---
>    while (weight[tmp] < weight[heap[zz >> 1]])                                                   \
816,830c816
< {                                                     \
<    Int32 zz, yy, tmp;                                 \
<    zz = z; tmp = heap[zz];                            \
<    while (True) {                                     \
<       yy = zz << 1;                                   \
<       if (yy > nHeap) break;                          \
<       if (yy < nHeap &&                               \
<           weight[heap[yy+1]] < weight[heap[yy]])      \
<          yy++;                                        \
<       if (weight[tmp] < weight[heap[yy]]) break;      \
<       heap[zz] = heap[yy];                            \
<       zz = yy;                                        \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
(74.5 %, 52282 bytes)
808,822c808
< {                                                     \
<    Int32 zz, yy, tmp;                                 \
<    zz = z; tmp = heap[zz];                            \
<    while (True) {                                     \
<       yy = zz << 1;                                   \
<       if (yy > nHeap) break;                          \
<       if (yy < nHeap &&                               \
<           weight[heap[yy+1]] < weight[heap[yy]])      \
<          yy++;                                        \
<       if (weight[tmp] < weight[heap[yy]]) break;      \
<       heap[zz] = heap[yy];                            \
<       zz = yy;                                        \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
811,820c811
<    while (True) {                                     \
<       yy = zz << 1;                                   \
<       if (yy > nHeap) break;                          \
<       if (yy < nHeap &&                               \
<           weight[heap[yy+1]] < weight[heap[yy]])      \
<          yy++;                                        \
<       if (weight[tmp] < weight[heap[yy]]) break;      \
<       heap[zz] = heap[yy];                            \
<       zz = yy;                                        \
<    }                                                  \
---
>    while (True)                                                   \
849,917c849
< UInt32 BZ2_crc32Table[256] = {
< 
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
---
> UInt32 BZ2_crc32Table[256] = ;
(74.9 %, 51497 bytes)
835,903c835
< UInt32 BZ2_crc32Table[256] = {
< 
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
---
> UInt32 BZ2_crc32Table[256] = ;
917,970c917
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> Int32 BZ2_rNums[512] = ;
997,1005c997
< {                                             \
<    while (s->bsLive >= 8) {                   \
<       s->zbits[s->numZ]                       \
<          = (UChar)(s->bsBuff >> 24);          \
<       s->numZ++;                              \
<       s->bsBuff <<= 8;                        \
<       s->bsLive -= 8;                         \
<    }                                          \
< }
---
> 
998,1004c998
<    while (s->bsLive >= 8) {                   \
<       s->zbits[s->numZ]                       \
<          = (UChar)(s->bsBuff >> 24);          \
<       s->numZ++;                              \
<       s->bsBuff <<= 8;                        \
<       s->bsLive -= 8;                         \
<    }                                          \
---
>    while (s->bsLive >= 8)                                           \
1027,1035c1027
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> 
1031,1034c1031
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
---
>       if (s->inUse[i]) 
1041,1046d1040
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1048,1130d1041
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1062,1109c1062
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
---
>    for (i = 0; i < s->nblock; i++) 
(75.1 %, 51112 bytes)
1019,1027c1019
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> 
1023,1026c1023
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
---
>       if (s->inUse[i]) 
1033,1038d1032
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1040,1122d1033
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1054,1101c1054
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
---
>    for (i = 0; i < s->nblock; i++) 
1061,1063c1061
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
---
>       if (yy[0] == ll_i)  else {
1063,1100c1063
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
---
>       } else 
1065,1079c1065
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
---
>          if (zPend > 0) 
1067,1077c1067
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
---
>             while (True) ;
(75.3 %, 50690 bytes)
1066,1084c1066
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
---
>          
1074,1080c1074
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
---
>             while ( rll_i != rtmp ) ;
1089,1103c1089
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
---
>    if (zPend > 0) 
(75.3 %, 50521 bytes)
1083,1097c1083
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
---
>    if (zPend > 0) 
1085,1095c1085
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
---
>       while (True) ;
(75.5 %, 50183 bytes)
1118c1118
<    { retVal = rrr; goto save_state_and_return; };
---
>    ;
1122,1142c1122
<    while (True) {                                 \
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
<       if (s->strm->avail_in == 0) RETURN(BZ_OK);  \
<       s->bsBuff                                   \
<          = (s->bsBuff << 8) |                     \
<            ((UInt32)                              \
<               (*((UChar*)(s->strm->next_in))));   \
<       s->bsLive += 8;                             \
<       s->strm->next_in++;                         \
<       s->strm->avail_in--;                        \
<       s->strm->total_in_lo32++;                   \
<       if (s->strm->total_in_lo32 == 0)            \
<          s->strm->total_in_hi32++;                \
<    }
---
>    while (True) 
1123,1130c1123
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
---
>       if (s->bsLive >= nnn)                                            \
(75.5 %, 50138 bytes)
1122,1142c1122
<    while (True) {                                 \
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
<       if (s->strm->avail_in == 0) RETURN(BZ_OK);  \
<       s->bsBuff                                   \
<          = (s->bsBuff << 8) |                     \
<            ((UInt32)                              \
<               (*((UChar*)(s->strm->next_in))));   \
<       s->bsLive += 8;                             \
<       s->strm->next_in++;                         \
<       s->strm->avail_in--;                        \
<       s->strm->total_in_lo32++;                   \
<       if (s->strm->total_in_lo32 == 0)            \
<          s->strm->total_in_hi32++;                \
<    }
---
>    while (True) 
1123,1130c1123
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
---
>       if (s->bsLive >= nnn)                                            \
(76.0 %, 49110 bytes)
1132,1159c1132
< {                                                 \
<    if (groupPos == 0) {                           \
<       groupNo++;                                  \
<       if (groupNo >= nSelectors)                  \
<          RETURN(BZ_DATA_ERROR);                   \
<       groupPos = BZ_G_SIZE;                       \
<       gSel = s->selector[groupNo];                \
<       gMinlen = s->minLens[gSel];                 \
<       gLimit = &(s->limit[gSel][0]);              \
<       gPerm = &(s->perm[gSel][0]);                \
<       gBase = &(s->base[gSel][0]);                \
<    }                                              \
<    groupPos--;                                    \
<    zn = gMinlen;                                  \
<    GET_BITS(label1, zvec, zn);                    \
<    while (1) {                                    \
<       if (zn > 20 )         \
<          RETURN(BZ_DATA_ERROR);                   \
<       if (zvec <= gLimit[zn]) break;              \
<       zn++;                                       \
<       GET_BIT(label2, zj);                        \
<       zvec = (zvec << 1) | zj;                    \
<    };                                             \
<    if (zvec - gBase[zn] < 0                       \
<        || zvec - gBase[zn] >= BZ_MAX_ALPHA_SIZE)  \
<       RETURN(BZ_DATA_ERROR);                      \
<    lval = gPerm[zvec - gBase[zn]];                \
< }
---
> 
1133,1143c1133
<    if (groupPos == 0) {                           \
<       groupNo++;                                  \
<       if (groupNo >= nSelectors)                  \
<          RETURN(BZ_DATA_ERROR);                   \
<       groupPos = BZ_G_SIZE;                       \
<       gSel = s->selector[groupNo];                \
<       gMinlen = s->minLens[gSel];                 \
<       gLimit = &(s->limit[gSel][0]);              \
<       gPerm = &(s->perm[gSel][0]);                \
<       gBase = &(s->base[gSel][0]);                \
<    }                                              \
---
>    if (groupPos == 0)                                               \
1147,1154c1147
<    while (1) {                                    \
<       if (zn > 20 )         \
<          RETURN(BZ_DATA_ERROR);                   \
<       if (zvec <= gLimit[zn]) break;              \
<       zn++;                                       \
<       GET_BIT(label2, zj);                        \
<       zvec = (zvec << 1) | zj;                    \
<    };                                             \
---
>    while (1) ;                                             \
(76.7 %, 47727 bytes)
1198,1200d1197
< {
<    Int32   n;
<    EState* s;
1202,1256d1198
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 250)
<      return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm = strm;
< 
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) {
<       if (s->arr1 != NULL) BZFREE(s->arr1);
<       if (s->arr2 != NULL) BZFREE(s->arr2);
<       if (s->ftab != NULL) BZFREE(s->ftab);
<       if (s       != NULL) BZFREE(s);
<       return BZ_MEM_ERROR;
<    }
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
<    init_RL ( s );
<    prepare_new_block ( s );
<    return BZ_OK;
< }
1226,1232c1226
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) {
<       if (s->arr1 != NULL) BZFREE(s->arr1);
<       if (s->arr2 != NULL) BZFREE(s->arr2);
<       if (s->ftab != NULL) BZFREE(s->ftab);
<       if (s       != NULL) BZFREE(s);
<       return BZ_MEM_ERROR;
<    }
---
>    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1269,1292c1269
< {                                                 \
<    UInt32 zchh = (UInt32)(zchh0);                 \
<               \
<    if (zchh != zs->state_in_ch &&                 \
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
<    else                                           \
<                  \
<    if (zchh != zs->state_in_ch ||                 \
<       zs->state_in_len == 255) {                  \
<       if (zs->state_in_ch < 256)                  \
<          add_pair_to_block ( zs );                \
<       zs->state_in_ch = zchh;                     \
<       zs->state_in_len = 1;                       \
<    } else {                                       \
<       zs->state_in_len++;                         \
<    }                                              \
< }
---
> 
(76.8 %, 47524 bytes)
1263,1286c1263
< {                                                 \
<    UInt32 zchh = (UInt32)(zchh0);                 \
<               \
<    if (zchh != zs->state_in_ch &&                 \
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
<    else                                           \
<                  \
<    if (zchh != zs->state_in_ch ||                 \
<       zs->state_in_len == 255) {                  \
<       if (zs->state_in_ch < 256)                  \
<          add_pair_to_block ( zs );                \
<       zs->state_in_ch = zchh;                     \
<       zs->state_in_len = 1;                       \
<    } else {                                       \
<       zs->state_in_len++;                         \
<    }                                              \
< }
---
> 
1267,1274c1267
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
---
>        zs->state_in_len == 1)                                               \
1278,1283c1278
<       zs->state_in_len == 255) {                  \
<       if (zs->state_in_ch < 256)                  \
<          add_pair_to_block ( zs );                \
<       zs->state_in_ch = zchh;                     \
<       zs->state_in_len = 1;                       \
<    } else {                                       \
---
>       zs->state_in_len == 255)  else {                                       \
(77.4 %, 46396 bytes)
1282,1288d1281
< {
<    Bool progress;
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1290,1338d1282
<    preswitch:
<    switch (s->mode) {
< 
<       case BZ_M_IDLE:
<          return BZ_SEQUENCE_ERROR;
< 
<       case BZ_M_RUNNING:
<          if (action == BZ_RUN) {
<             progress = handle_compress ( strm );
<             return progress ? BZ_RUN_OK : BZ_PARAM_ERROR;
<          } 
<          else
< 	 if (action == BZ_FLUSH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FLUSHING;
<             goto preswitch;
<          }
<          else
<          if (action == BZ_FINISH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FINISHING;
<             goto preswitch;
<          }
<          else 
<             return BZ_PARAM_ERROR;
< 
<       case BZ_M_FLUSHING:
<          if (action != BZ_FLUSH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FLUSH_OK;
<          s->mode = BZ_M_RUNNING;
<          return BZ_RUN_OK;
< 
<       case BZ_M_FINISHING:
<          if (action != BZ_FINISH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (!progress) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FINISH_OK;
<          s->mode = BZ_M_IDLE;
<          return BZ_STREAM_END;
<    }
<    return BZ_OK; 
< }
1291,1336c1291
<    switch (s->mode) {
< 
<       case BZ_M_IDLE:
<          return BZ_SEQUENCE_ERROR;
< 
<       case BZ_M_RUNNING:
<          if (action == BZ_RUN) {
<             progress = handle_compress ( strm );
<             return progress ? BZ_RUN_OK : BZ_PARAM_ERROR;
<          } 
<          else
< 	 if (action == BZ_FLUSH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FLUSHING;
<             goto preswitch;
<          }
<          else
<          if (action == BZ_FINISH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FINISHING;
<             goto preswitch;
<          }
<          else 
<             return BZ_PARAM_ERROR;
< 
<       case BZ_M_FLUSHING:
<          if (action != BZ_FLUSH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FLUSH_OK;
<          s->mode = BZ_M_RUNNING;
<          return BZ_RUN_OK;
< 
<       case BZ_M_FINISHING:
<          if (action != BZ_FINISH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (!progress) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FINISH_OK;
<          s->mode = BZ_M_IDLE;
<          return BZ_STREAM_END;
<    }
---
>    switch (s->mode) 
1297,1300c1297
<          if (action == BZ_RUN) {
<             progress = handle_compress ( strm );
<             return progress ? BZ_RUN_OK : BZ_PARAM_ERROR;
<          } 
---
>          if (action == BZ_RUN)  
1302,1306c1302
< 	 if (action == BZ_FLUSH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FLUSHING;
<             goto preswitch;
<          }
---
> 	 if (action == BZ_FLUSH) 
1308,1312c1308
<          if (action == BZ_FINISH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FINISHING;
<             goto preswitch;
<          }
---
>          if (action == BZ_FINISH) 
1343,1348d1342
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1350,1358d1343
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
1370,1371d1369
< {
<    DState* s;
1373,1402d1370
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
1424,1429d1423
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1431,1471d1424
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
1431,1466c1431
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
---
>    while (True) 
(78.1 %, 44901 bytes)
1298,1303d1297
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1305,1313d1298
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
1325,1326d1324
< {
<    DState* s;
1328,1357d1325
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
1379,1384d1378
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1386,1426d1379
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
1386,1421c1386
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
---
>    while (True) 
1388,1408c1388
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
---
>       if (s->state == BZ_X_OUTPUT) 
(78.8 %, 43431 bytes)
1396,1401d1395
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1403,1411d1396
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
1419,1422c1419
< {                                         \
<    if (bzerror != NULL) *bzerror = eee;   \
<    if (bzf != NULL) bzf->lastErr = eee;   \
< }
---
> 
1425,1433c1425
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct 
1448,1450d1447
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
1452,1485d1448
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1458c1458
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
---
>       ;
(78.9 %, 43298 bytes)
1422,1430c1422
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct 
1445,1447d1444
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
1449,1482d1445
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1455c1455
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
---
>       ;
1458c1458
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1462c1462
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(78.9 %, 43255 bytes)
1458c1458
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1462c1462
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(78.9 %, 43215 bytes)
1462c1462
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
1477c1477
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
(78.9 %, 43174 bytes)
1477c1477
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
1492,1494d1491
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1496,1528d1492
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
1498c1498
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
(79.0 %, 43131 bytes)
1492,1494d1491
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1496,1528d1492
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
1498c1498
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1500c1500
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1502c1502
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
(79.0 %, 43093 bytes)
1500c1500
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1502c1502
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
(79.0 %, 43052 bytes)
1502c1502
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
1505c1505
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1510,1527c1510
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
---
>    while (True) 
(79.0 %, 43017 bytes)
1505c1505
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1510,1527c1510
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
---
>    while (True) 
1515c1515
<          { BZ_SETERR(ret); return; };
---
>          ;
(79.0 %, 42988 bytes)
1510,1527c1510
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
---
>    while (True) 
1515c1515
<          { BZ_SETERR(ret); return; };
---
>          ;
1517,1523c1517
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
---
>       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
(79.0 %, 42961 bytes)
1517,1523c1517
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
---
>       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
1522c1522
<             { BZ_SETERR(BZ_IO_ERROR); return; };
---
>             ;
(79.2 %, 42709 bytes)
1520c1520
<          { BZ_SETERR(BZ_OK); return; };
---
>          ;
1532,1535c1532
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
> 
1546,1548d1545
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1550,1600d1546
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1551c1551
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
(79.2 %, 42680 bytes)
1532,1535c1532
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
> 
1546,1548d1545
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1550,1600d1546
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1551c1551
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1553c1553
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(79.2 %, 42651 bytes)
1553c1553
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1555c1555
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
1562,1580c1562
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
---
>    if ((!abandon) && bzf->lastErr == BZ_OK) 
(79.2 %, 42610 bytes)
1555c1555
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
1562,1580c1562
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
---
>    if ((!abandon) && bzf->lastErr == BZ_OK) 
(79.2 %, 42575 bytes)
1562,1580c1562
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
---
>    if ((!abandon) && bzf->lastErr == BZ_OK) 
1563,1579c1563
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
---
>       while (True) 
1568c1568
<             { BZ_SETERR(ret); return; };
---
>             ;
(79.5 %, 41931 bytes)
1564,1568c1564
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
---
>    if ( !abandon && !ferror ( bzf->handle ) ) 
1567c1567
<          { BZ_SETERR(BZ_IO_ERROR); return; };
---
>          ;
1593,1595d1592
< {
<    bzFile* bzf = NULL;
<    int     ret;
1597,1638d1593
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1604c1604
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
---
>       ;
(79.6 %, 41818 bytes)
1589,1591d1588
< {
<    bzFile* bzf = NULL;
<    int     ret;
1593,1634d1589
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1600c1600
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
---
>       ;
1603c1603
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1607c1607
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(79.6 %, 41775 bytes)
1603c1603
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1607c1607
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(79.6 %, 41735 bytes)
1607c1607
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
1619,1623c1619
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
---
>    while (nUnused > 0) 
(79.7 %, 41694 bytes)
1619,1623c1619
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
---
>    while (nUnused > 0) 
1627c1627
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
(79.7 %, 41556 bytes)
1623c1623
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
1635,1636d1634
< {
<    bzFile* bzf = (bzFile*)b;
1638,1648d1635
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1640c1640
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
(79.7 %, 41513 bytes)
1635,1636d1634
< {
<    bzFile* bzf = (bzFile*)b;
1638,1648d1635
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1640c1640
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1643c1643
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(79.8 %, 41484 bytes)
1643c1643
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1657,1659d1656
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
1661,1708d1657
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return 0; };
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
< 
<    return 0; 
< }
1664c1664
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
---
>       ;
(79.8 %, 41443 bytes)
1657,1659d1656
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
1661,1708d1657
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return 0; };
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
< 
<    return 0; 
< }
1664c1664
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
---
>       ;
1667c1667
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
---
>       ;
(79.8 %, 41403 bytes)
1667c1667
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
---
>       ;
1670c1670
<       { BZ_SETERR(BZ_OK); return 0; };
---
>       ;
1675,1705c1675
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
---
>    while (True) 
(79.8 %, 41360 bytes)
1670c1670
<       { BZ_SETERR(BZ_OK); return 0; };
---
>       ;
1675,1705c1675
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
---
>    while (True) 
(79.8 %, 41329 bytes)
1675,1705c1675
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
---
>    while (True) 
1678c1678
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
---
>          ;
1680,1688c1680
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
---
>       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) 
(80.3 %, 40376 bytes)
1687,1694d1686
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (bzf->lastErr != BZ_STREAM_END)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (unused == NULL || nUnused == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
1696,1699d1687
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
1690c1690
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1692c1692
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(80.3 %, 40338 bytes)
1692c1692
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1694c1694
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1715,1717d1714
< {
<    bz_stream strm;
<    int ret;
1719,1755d1715
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow:
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    BZ2_bzCompressEnd ( &strm );
<    return ret;
< }
1766,1768d1765
< {
<    bz_stream strm;
<    int ret;
1770,1808d1766
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzDecompress ( &strm );
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    BZ2_bzDecompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
< 
<    errhandler:
<    BZ2_bzDecompressEnd ( &strm );
<    return ret; 
< }
(80.3 %, 40297 bytes)
1694c1694
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1715,1717d1714
< {
<    bz_stream strm;
<    int ret;
1719,1755d1715
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow:
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    BZ2_bzCompressEnd ( &strm );
<    return ret;
< }
1766,1768d1765
< {
<    bz_stream strm;
<    int ret;
1770,1808d1766
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzDecompress ( &strm );
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    BZ2_bzDecompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
< 
<    errhandler:
<    BZ2_bzDecompressEnd ( &strm );
<    return ret; 
< }
1797,1800c1797
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
---
>    if (strm.avail_out > 0)  else {
1800,1803c1800
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
---
>    } else ;      
(80.4 %, 40259 bytes)
1715,1717d1714
< {
<    bz_stream strm;
<    int ret;
1719,1755d1715
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow:
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    BZ2_bzCompressEnd ( &strm );
<    return ret;
< }
1766,1768d1765
< {
<    bz_stream strm;
<    int ret;
1770,1808d1766
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzDecompress ( &strm );
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    BZ2_bzDecompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
< 
<    errhandler:
<    BZ2_bzDecompressEnd ( &strm );
<    return ret; 
< }
1797,1800c1797
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
---
>    if (strm.avail_out > 0)  else {
1800,1803c1800
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
---
>    } else ;      
1818,1820c1818
< {
<    return BZ_VERSION;
< }
---
> 
1839,1841c1839
< {
<    return bzopen_or_bzdopen(path,-1,mode,0);
< }
---
> 
1848,1850c1848
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
> 
1855,1864c1855
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
> 
1859,1861c1859
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)  else {
1861,1863c1861
<    } else {
<       return -1;
<    }
---
>    } else 
1869,1870d1868
< {
<    int bzerr;
1872,1878d1869
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
1873,1875c1873
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
---
>    if(bzerr == BZ_OK)else{
1875,1877c1875
<    }else{
<       return -1;
<    }
---
>    }else
1883,1886c1883
< {
<    
<    return 0;
< }
---
> 
1891,1907c1891
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) {return;}
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
---
> 
1895c1895
<    if (b==NULL) {return;}
---
>    if (b==NULL) 
(80.4 %, 40186 bytes)
1815,1817c1815
< {
<    return BZ_VERSION;
< }
---
> 
1836,1838c1836
< {
<    return bzopen_or_bzdopen(path,-1,mode,0);
< }
---
> 
1845,1847c1845
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
> 
1852,1861c1852
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
> 
1856,1858c1856
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)  else {
1858,1860c1858
<    } else {
<       return -1;
<    }
---
>    } else 
1866,1867d1865
< {
<    int bzerr;
1869,1875d1866
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
1870,1872c1870
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
---
>    if(bzerr == BZ_OK)else{
1872,1874c1872
<    }else{
<       return -1;
<    }
---
>    }else
1880,1883c1880
< {
<    
<    return 0;
< }
---
> 
1888,1904c1888
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) {return;}
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
---
> 
1892c1892
<    if (b==NULL) {return;}
---
>    if (b==NULL) 
1893,1898c1893
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
---
>    if(((bzFile*)b)->writing)else{
1895,1897c1895
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
---
>       if(bzerr != BZ_OK)
1898,1900c1898
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
---
>    }else
1901,1903c1901
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
---
>    if(fp!=stdin && fp!=stdout)
1909,1926c1909
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = ;
(80.4 %, 40177 bytes)
1893,1898c1893
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
---
>    if(((bzFile*)b)->writing)else{
1895,1897c1895
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
---
>       if(bzerr != BZ_OK)
1898,1900c1898
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
---
>    }else
1901,1903c1901
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
---
>    if(fp!=stdin && fp!=stdout)
1909,1926c1909
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = ;
1930,1931d1929
< {
<    int err = ((bzFile *)b)->lastErr;
1933,1936d1930
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
1977c1977
< #define ERROR_IF_EOF(i)       { if ((i) == EOF)  ioError(); }
---
> #define ERROR_IF_EOF(i)       
(80.4 %, 40138 bytes)
1899,1901c1899
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
---
>    if(fp!=stdin && fp!=stdout)
1907,1924c1907
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = ;
1928,1929d1927
< {
<    int err = ((bzFile *)b)->lastErr;
1931,1934d1928
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
1975c1975
< #define ERROR_IF_EOF(i)       { if ((i) == EOF)  ioError(); }
---
> #define ERROR_IF_EOF(i)       
1976c1976
< #define ERROR_IF_NOT_ZERO(i)  { if ((i) != 0)    ioError(); }
---
> #define ERROR_IF_NOT_ZERO(i)  
(80.4 %, 40107 bytes)
1976c1976
< #define ERROR_IF_NOT_ZERO(i)  { if ((i) != 0)    ioError(); }
---
> #define ERROR_IF_NOT_ZERO(i)  
1977c1977
< #define ERROR_IF_MINUS_ONE(i) { if ((i) == (-1)) ioError(); }
---
> #define ERROR_IF_MINUS_ONE(i) 
2070c2070
<    struct { UChar b[8]; } 
---
>    struct  
(80.4 %, 40076 bytes)
1977c1977
< #define ERROR_IF_MINUS_ONE(i) { if ((i) == (-1)) ioError(); }
---
> #define ERROR_IF_MINUS_ONE(i) 
2070c2070
<    struct { UChar b[8]; } 
---
>    struct  
(80.5 %, 40045 bytes)
2070c2070
<    struct { UChar b[8]; } 
---
>    struct  
2216c2216
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    = ;
2218c2218
<    = { "", "", ".tar", ".tar" };
---
>    = ;
2253,2256c2253
<    struct zzzz {
<       Char        *name;
<       struct zzzz *link;
<    }
---
>    struct zzzz 
(80.5 %, 40030 bytes)
2216c2216
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    = ;
2218c2218
<    = { "", "", ".tar", ".tar" };
---
>    = ;
2253,2256c2253
<    struct zzzz {
<       Char        *name;
<       struct zzzz *link;
<    }
---
>    struct zzzz 
(80.5 %, 39974 bytes)
===< pass_balanced :: curly2 >===
31,47c31
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
---
>    struct ; 
355,423c355
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>    struct ;
501,590c501
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
---
>    struct ;
717,719c717
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] = ;;
835,903c835
< UInt32 BZ2_crc32Table[256] = {
< 
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
---
> UInt32 BZ2_crc32Table[256] = ;;
917,970c917
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> Int32 BZ2_rNums[512] = ;;
1019,1027c1019
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1023,1026c1023
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
---
>       if (s->inUse[i]) ;
(80.6 %, 39819 bytes)
1025,1080c1025
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) 
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) ;
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) 
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1046,1073c1046
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) 
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) ;
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
---
>    for (i = 0; i < s->nblock; i++) ;
(81.1 %, 38643 bytes)
1135,1187c1135
< {
<    Int32   n;
<    EState* s;
< 
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 250)
<      return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm = strm;
< 
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
<    init_RL ( s );
<    prepare_new_block ( s );
<    return BZ_OK;
< }
---
> ;
1219,1230c1219
< {
<    Bool progress;
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
<    return BZ_OK; 
< }
---
> ;
(81.9 %, 37137 bytes)
1167,1178c1167
< {
<    Bool progress;
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
<    return BZ_OK; 
< }
---
> ;
1183,1198c1183
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
---
> ;
(82.0 %, 36897 bytes)
1172,1187c1172
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
---
> ;
1199,1231c1199
< {
<    DState* s;
< 
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
---
> ;
(82.2 %, 36536 bytes)
1184,1216c1184
< {
<    DState* s;
< 
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
---
> ;
1238,1250c1238
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    while (True) 
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
---
> ;
(82.7 %, 35523 bytes)
1206,1218c1206
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    while (True) 
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
---
> ;
1223,1238c1223
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
---
> ;
1249,1257c1249
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct ;
(82.8 %, 35296 bytes)
1211,1226c1211
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
---
> ;
1237,1245c1237
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct ;
1260,1297c1260
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
---
> ;
(83.0 %, 34941 bytes)
1222,1230c1222
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct ;
1245,1282c1245
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
---
> ;
1292,1322c1292
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          ;
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
<          ;
<    }
< }
---
> ;
(83.3 %, 34129 bytes)
1255,1285c1255
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          ;
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
<          ;
<    }
< }
---
> ;
1273,1284c1273
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          ;
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
<          ;
<    }
---
>    while (True) ;
(83.6 %, 33556 bytes)
1265,1268c1265
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
> ;
1279,1311c1279
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
---
> ;
1322,1363c1322
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       ;
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) 
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
---
> ;
(83.7 %, 33447 bytes)
1276,1308c1276
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
---
> ;
1319,1360c1319
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       ;
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) 
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
---
> ;
(84.1 %, 32584 bytes)
1287,1328c1287
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       ;
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) 
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
---
> ;
1333,1346c1333
< {
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
---
> ;
(84.5 %, 31734 bytes)
1292,1305c1292
< {
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
---
> ;
1314,1335c1314
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) 
< 
<    return 0; 
< }
---
> ;
1344,1356c1344
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
<       ;
<    if (unused == NULL || nUnused == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
---
> ;
(84.6 %, 31528 bytes)
1301,1322c1301
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) 
< 
<    return 0; 
< }
---
> ;
1331,1343c1331
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
<       ;
<    if (unused == NULL || nUnused == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
---
> ;
1359,1399c1359
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow:
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    BZ2_bzCompressEnd ( &strm );
<    return ret;
< }
---
> ;
(84.7 %, 31285 bytes)
1347,1387c1347
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow:
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    BZ2_bzCompressEnd ( &strm );
<    return ret;
< }
---
> ;
1398,1437c1398
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzDecompress ( &strm );
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    BZ2_bzDecompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    BZ2_bzDecompressEnd ( &strm );
<    return ret; 
< }
---
> ;
(85.2 %, 30281 bytes)
1358,1397c1358
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzDecompress ( &strm );
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    BZ2_bzDecompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    BZ2_bzDecompressEnd ( &strm );
<    return ret; 
< }
---
> ;
1389,1392c1389
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
---
>    if (strm.avail_out > 0) ; else ;      
(85.7 %, 29363 bytes)
1368,1370c1368
< {
<    return BZ_VERSION;
< }
---
> ;
1389,1391c1389
< {
<    return bzopen_or_bzdopen(path,-1,mode,0);
< }
---
> ;
(85.7 %, 29339 bytes)
1387,1389c1387
< {
<    return bzopen_or_bzdopen(path,-1,mode,0);
< }
---
> ;
1396,1398c1396
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
> ;
(85.7 %, 29292 bytes)
1394,1396c1394
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
> ;
1401,1410c1401
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
> ;
(85.7 %, 29245 bytes)
1399,1408c1399
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
> ;
1403,1405c1403
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else {
1405,1407c1405
<    } else {
<       return -1;
<    }
---
>    } else ;
(85.7 %, 29220 bytes)
1403,1405c1403
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else {
<       return -1;
<    }
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
1411,1420c1411
< {
<    int bzerr;
< 
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
---
> ;
(85.8 %, 29198 bytes)
1409,1418c1409
< {
<    int bzerr;
< 
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
---
> ;
1413,1415c1413
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
---
>    if(bzerr == BZ_OK);else{
(85.8 %, 29074 bytes)
1414,1417c1414
< {
<    
<    return 0;
< }
---
> ;
1422,1436c1422
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
---
> ;
1427,1432c1427
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
---
>    if(((bzFile*)b)->writing);else
(85.8 %, 29055 bytes)
1419,1433c1419
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
---
> ;
1424,1429c1424
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
---
>    if(((bzFile*)b)->writing);else
1426,1428c1426
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
---
>       if(bzerr != BZ_OK);
(86.0 %, 28760 bytes)
1424,1441c1424
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = ;;
1445,1451c1445
< {
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
---
> ;
1733c1733
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    = ;;
1735c1735
<    = { "", "", ".tar", ".tar" };
---
>    = ;;
(86.0 %, 28646 bytes)
1727c1727
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    = ;;
1729c1729
<    = { "", "", ".tar", ".tar" };
---
>    = ;;
===< pass_balanced :: curly3 >===
717,719c717
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] ;
835,903c835
< UInt32 BZ2_crc32Table[256] = {
< 
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
---
> UInt32 BZ2_crc32Table[256] ;
(86.1 %, 28523 bytes)
833,901c833
< UInt32 BZ2_crc32Table[256] = {
< 
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
---
> UInt32 BZ2_crc32Table[256] ;
915,968c915
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> Int32 BZ2_rNums[512] ;
(87.8 %, 24993 bytes)
847,900c847
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> Int32 BZ2_rNums[512] ;
1354,1371c1354
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] ;
(89.1 %, 22249 bytes)
1301,1318c1301
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] ;
1604c1604
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    ;
(89.3 %, 21940 bytes)
1587c1587
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    ;
1589c1589
<    = { "", "", ".tar", ".tar" };
---
>    ;
(89.3 %, 21904 bytes)
1589c1589
<    = { "", "", ".tar", ".tar" };
---
>    ;
(89.3 %, 21876 bytes)
===< pass_clang :: callexpr-to-value >===
1279c1279
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
---
>    nread = 0;
(89.3 %, 21849 bytes)
===< pass_clang :: replace-callexpr >===
===< pass_clang :: simplify-callexpr >===
===< pass_clang :: remove-unused-enum-member >===
===< pass_clang :: remove-enum-member-value >===
===< pass_clang :: remove-unused-var >===
301c301
< extern Int32 BZ2_rNums[512];
---
> 
321c321
< extern UInt32 BZ2_crc32Table[256];
---
> 
(89.4 %, 21821 bytes)
321c321
< extern UInt32 BZ2_crc32Table[256];
---
> 
716,717c716
< static
< Int32 incs[14] ;
---
> 
(89.4 %, 21787 bytes)
716,717c716
< static
< Int32 incs[14] ;
---
> 
833c833
< UInt32 BZ2_crc32Table[256] ;
---
> 
(89.4 %, 21764 bytes)
832c832
< UInt32 BZ2_crc32Table[256] ;
---
> 
846c846
< Int32 BZ2_rNums[512] ;
---
> 
(89.4 %, 21736 bytes)
846c846
< Int32 BZ2_rNums[512] ;
---
> 
1178c1178
<    Int32   n, ret;
---
>    Int32    ret;
(89.4 %, 21714 bytes)
1178c1178
<    Int32   n, ret;
---
>    Int32    ret;
1178c1178
<    Int32   n, ret;
---
>    Int32   n;
(89.4 %, 21712 bytes)
1178c1178
<    Int32    ret;
---
>    
1300c1300
< static char *bzerrorstrings[] ;
---
> 
(89.4 %, 21699 bytes)
1300c1300
< static char *bzerrorstrings[] ;
---
> 
1391c1391
< Int32   verbosity;
---
> 
(89.4 %, 21668 bytes)
1391c1391
< Int32   verbosity;
---
> 
1392c1392
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool     smallMode, deleteOutputOnInterrupt;
(89.4 %, 21650 bytes)
1392c1392
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool     smallMode, deleteOutputOnInterrupt;
1392c1392
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool    keepInputFiles, deleteOutputOnInterrupt;
(89.4 %, 21635 bytes)
1392c1392
< Bool     smallMode, deleteOutputOnInterrupt;
---
> Bool      deleteOutputOnInterrupt;
1392c1392
< Bool     smallMode, deleteOutputOnInterrupt;
---
> Bool     smallMode;
1393c1393
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool     testFailsExist, unzFailsExist, noisy;
(89.4 %, 21625 bytes)
1392c1392
< Bool      deleteOutputOnInterrupt;
---
> 
1393c1393
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool     testFailsExist, unzFailsExist, noisy;
(89.5 %, 21591 bytes)
1393c1393
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool     testFailsExist, unzFailsExist, noisy;
1393c1393
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool    forceOverwrite, unzFailsExist, noisy;
(89.5 %, 21576 bytes)
1393c1393
< Bool     testFailsExist, unzFailsExist, noisy;
---
> Bool      unzFailsExist, noisy;
1393c1393
< Bool     testFailsExist, unzFailsExist, noisy;
---
> Bool     testFailsExist, noisy;
(89.5 %, 21561 bytes)
1393c1393
< Bool      unzFailsExist, noisy;
---
> Bool       noisy;
1393c1393
< Bool      unzFailsExist, noisy;
---
> Bool      unzFailsExist;
(89.5 %, 21547 bytes)
1393c1393
< Bool       noisy;
---
> 
1394c1394
< Int32   numFileNames, numFilesProcessed, blockSize100k;
---
> Int32    numFilesProcessed, blockSize100k;
(89.5 %, 21530 bytes)
1394c1394
< Int32   numFileNames, numFilesProcessed, blockSize100k;
---
> Int32    numFilesProcessed, blockSize100k;
1394c1394
< Int32   numFileNames, numFilesProcessed, blockSize100k;
---
> Int32   numFileNames, blockSize100k;
(89.5 %, 21517 bytes)
1394c1394
< Int32    numFilesProcessed, blockSize100k;
---
> Int32     blockSize100k;
1394c1394
< Int32    numFilesProcessed, blockSize100k;
---
> Int32    numFilesProcessed;
(89.5 %, 21499 bytes)
1394c1394
< Int32     blockSize100k;
---
> 
1395c1395
< Int32   exitValue;
---
> 
(89.5 %, 21475 bytes)
1395c1395
< Int32   exitValue;
---
> 
1407c1407
< Int32   opMode;
---
> 
(89.5 %, 21457 bytes)
1407c1407
< Int32   opMode;
---
> 
1408c1408
< Int32   srcMode;
---
> 
(89.5 %, 21442 bytes)
1408c1408
< Int32   srcMode;
---
> 
1412c1412
< Int32   longestFileName;
---
> 
(89.5 %, 21426 bytes)
1412c1412
< Int32   longestFileName;
---
> 
1413c1413
< Char    inName [FILE_NAME_LEN];
---
> 
(89.6 %, 21402 bytes)
1413c1413
< Char    inName [FILE_NAME_LEN];
---
> 
1414c1414
< Char    outName[FILE_NAME_LEN];
---
> 
1415c1415
< Char    tmpName[FILE_NAME_LEN];
---
> 
(89.6 %, 21371 bytes)
1414c1414
< Char    outName[FILE_NAME_LEN];
---
> 
1415c1415
< Char    tmpName[FILE_NAME_LEN];
---
> 
1416c1416
< Char    *progName;
---
> 
(89.6 %, 21340 bytes)
1415c1415
< Char    tmpName[FILE_NAME_LEN];
---
> 
1416c1416
< Char    *progName;
---
> 
(89.6 %, 21309 bytes)
1416c1416
< Char    *progName;
---
> 
1417c1417
< Char    progNameReally[FILE_NAME_LEN];
---
> 
(89.6 %, 21291 bytes)
1417c1417
< Char    progNameReally[FILE_NAME_LEN];
---
> 
1418c1418
< FILE    *outputHandleJustInCase;
---
> 
(89.6 %, 21253 bytes)
1418c1418
< FILE    *outputHandleJustInCase;
---
> 
1419c1419
< Int32   workFactor;
---
> 
(89.6 %, 21221 bytes)
1419c1419
< Int32   workFactor;
---
> 
1568,1569c1568
< static 
< struct MY_STAT fileMetaInfo;
---
> 
(89.7 %, 21202 bytes)
1568,1569c1568
< static 
< struct MY_STAT fileMetaInfo;
---
> 
1585,1586c1585
< Char* zSuffix[BZ_N_SUFFIX_PAIRS] 
<    ;
---
> 
(89.7 %, 21166 bytes)
1584,1585c1584
< Char* zSuffix[BZ_N_SUFFIX_PAIRS] 
<    ;
---
> 
1586,1587c1586
< Char* unzSuffix[BZ_N_SUFFIX_PAIRS] 
<    ;
---
> 
(89.7 %, 21128 bytes)
1585,1586c1585
< Char* unzSuffix[BZ_N_SUFFIX_PAIRS] 
<    ;
---
> 
(89.7 %, 21088 bytes)
===< pass_special :: a >===
===< pass_special :: b >===
===< pass_special :: c >===
===< pass_ternary :: b >===
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> #define BZ_RAND_MASK (1)
(89.7 %, 21065 bytes)
===< pass_balanced :: curly2 >===
31,47c31
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
---
>    struct ; 
355,423c355
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>    struct ;
501,590c501
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
---
>    struct ;
1098,1106c1098
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct ;
1177,1198c1177
< {
<    
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) 
< 
<    return 0; 
< }
---
> ;
1275,1280c1275
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
---
> ;
(89.8 %, 20804 bytes)
1254,1259c1254
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
---
> ;
===< pass_balanced :: parens-only >===
20c20
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define BZ_SEQUENCE_ERROR    -1
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> #define BZ_PARAM_ERROR       -2
(89.8 %, 20802 bytes)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> #define BZ_PARAM_ERROR       -2
22c22
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_MEM_ERROR         -3
(89.9 %, 20800 bytes)
22c22
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_MEM_ERROR         -3
23c23
< #define BZ_DATA_ERROR        (-4)
---
> #define BZ_DATA_ERROR        -4
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_DATA_ERROR_MAGIC  -5
(89.9 %, 20798 bytes)
23c23
< #define BZ_DATA_ERROR        (-4)
---
> #define BZ_DATA_ERROR        -4
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_DATA_ERROR_MAGIC  -5
(89.9 %, 20796 bytes)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_DATA_ERROR_MAGIC  -5
25c25
< #define BZ_IO_ERROR          (-6)
---
> #define BZ_IO_ERROR          -6
(89.9 %, 20794 bytes)
25c25
< #define BZ_IO_ERROR          (-6)
---
> #define BZ_IO_ERROR          -6
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_UNEXPECTED_EOF    -7
(89.9 %, 20792 bytes)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_UNEXPECTED_EOF    -7
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_OUTBUFF_FULL      -8
(89.9 %, 20790 bytes)
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_OUTBUFF_FULL      -8
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_CONFIG_ERROR      -9
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void **bzalloc(void *,int,int);
(89.9 %, 20788 bytes)
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_CONFIG_ERROR      -9
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void **bzalloc(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)void *,int,int;
45c45
<       void (*bzfree)(void *,void *);
---
>       void *bzfree(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)void *,void *;
54c54
< #   define BZ_API(func) func
---
> #   define BZ_APIfunc func
60c60
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
(89.9 %, 20786 bytes)
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void **bzalloc(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)void *,int,int;
45c45
<       void (*bzfree)(void *,void *);
---
>       void *bzfree(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)void *,void *;
54c54
< #   define BZ_API(func) func
---
> #   define BZ_APIfunc func
60c60
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
60c60
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit)  
65c65
<    );
---
>    ;
67c67
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
(89.9 %, 20784 bytes)
60c60
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressInit  
65c65
<    );
---
>    ;
67c67
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
67c67
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzCompress)  
70c70
<    );
---
>    ;
72c72
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
(89.9 %, 20782 bytes)
67c67
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompress  
70c70
<    );
---
>    ;
72c72
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
72c72
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressEnd)  
74c74
<    );
---
>    ;
76c76
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressInit ( 
(89.9 %, 20780 bytes)
72c72
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressEnd  
74c74
<    );
---
>    ;
76c76
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressInit ( 
76c76
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompressInit)  
80c80
<    );
---
>    ;
82c82
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
(89.9 %, 20778 bytes)
76c76
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressInit  
80c80
<    );
---
>    ;
82c82
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
82c82
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompress)  
84c84
<    );
---
>    ;
86c86
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
(89.9 %, 20776 bytes)
82c82
< BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompress  
84c84
<    );
---
>    ;
86c86
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
86c86
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd)  
88c88
<    );
---
>    ;
98c98
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
(89.9 %, 20774 bytes)
86c86
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd  
88c88
<    );
---
>    ;
98c98
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
98c98
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen)  
105c105
<    );
---
>    ;
107c107
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
(89.9 %, 20772 bytes)
98c98
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
> BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen  
105c105
<    );
---
>    ;
107c107
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
107c107
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadClose)  
110c110
<    );
---
>    ;
112c112
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
(89.9 %, 20770 bytes)
107c107
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzReadClose  
110c110
<    );
---
>    ;
112c112
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
112c112
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)  
117c117
<    );
---
>    ;
119c119
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzRead ( 
(89.9 %, 20768 bytes)
112c112
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused  
117c117
<    );
---
>    ;
119c119
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzRead ( 
119c119
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzRead)  
124c124
<    );
---
>    ;
126c126
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
(89.9 %, 20766 bytes)
119c119
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzRead  
124c124
<    );
---
>    ;
126c126
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
126c126
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen)  
132c132
<    );
---
>    ;
134c134
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
(89.9 %, 20764 bytes)
126c126
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
> BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen  
132c132
<    );
---
>    ;
134c134
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
134c134
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)  
139c139
<    );
---
>    ;
141c141
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
(89.9 %, 20762 bytes)
134c134
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite  
139c139
<    );
---
>    ;
141c141
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
141c141
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)  
147c147
<    );
---
>    ;
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
(89.9 %, 20760 bytes)
141c141
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose  
147c147
<    );
---
>    ;
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)  
157c157
<    );
---
>    ;
162c162
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
(89.9 %, 20758 bytes)
149c149
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64  
157c157
<    );
---
>    ;
162c162
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
162c162
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)  
170c170
<    );
---
>    ;
172c172
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
172c172
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)  
179c179
<    );
---
>    ;
(89.9 %, 20756 bytes)
162c162
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress  
170c170
<    );
---
>    ;
172c172
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
172c172
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)  
179c179
<    );
---
>    ;
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
> BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
(89.9 %, 20754 bytes)
172c172
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress  
179c179
<    );
---
>    ;
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
> BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
> BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) 
186c186
<    );
---
>    ;
188c188
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
(89.9 %, 20752 bytes)
184c184
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
---
> BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion 
186c186
<    );
---
>    ;
188c188
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
188c188
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) 
191c191
<    );
---
>    ;
193c193
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN BZFILE * BZ_APIBZ2_bzdopen (
(89.9 %, 20750 bytes)
188c188
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
---
> BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen 
191c191
<    );
---
>    ;
193c193
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN BZFILE * BZ_APIBZ2_bzdopen (
193c193
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) 
196c196
<    );
---
>    ;
198c198
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN int BZ_APIBZ2_bzread (
(89.9 %, 20748 bytes)
193c193
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzdopen (
---
> BZ_EXTERN BZFILE * BZ_APIBZ2_bzdopen 
196c196
<    );
---
>    ;
198c198
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN int BZ_APIBZ2_bzread (
198c198
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN int BZ_API(BZ2_bzread) 
202c202
<    );
---
>    ;
204c204
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite (
(89.9 %, 20746 bytes)
198c198
< BZ_EXTERN int BZ_APIBZ2_bzread (
---
> BZ_EXTERN int BZ_APIBZ2_bzread 
202c202
<    );
---
>    ;
204c204
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite (
204c204
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
> BZ_EXTERN int BZ_API(BZ2_bzwrite) 
208c208
<    );
---
>    ;
210c210
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> BZ_EXTERN int BZ_APIBZ2_bzflush (
(89.9 %, 20744 bytes)
204c204
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite 
208c208
<    );
---
>    ;
210c210
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> BZ_EXTERN int BZ_APIBZ2_bzflush (
210c210
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> BZ_EXTERN int BZ_API(BZ2_bzflush) 
212c212
<    );
---
>    ;
214c214
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN void BZ_APIBZ2_bzclose (
(89.9 %, 20742 bytes)
210c210
< BZ_EXTERN int BZ_APIBZ2_bzflush (
---
> BZ_EXTERN int BZ_APIBZ2_bzflush 
212c212
<    );
---
>    ;
214c214
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN void BZ_APIBZ2_bzclose (
214c214
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN void BZ_API(BZ2_bzclose) 
216c216
<    );
---
>    ;
218c218
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> BZ_EXTERN const char * BZ_APIBZ2_bzerror (
(89.9 %, 20740 bytes)
214c214
< BZ_EXTERN void BZ_APIBZ2_bzclose (
---
> BZ_EXTERN void BZ_APIBZ2_bzclose 
216c216
<    );
---
>    ;
218c218
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> BZ_EXTERN const char * BZ_APIBZ2_bzerror (
218c218
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> BZ_EXTERN const char * BZ_API(BZ2_bzerror) 
221c221
<    );
---
>    ;
248c248
< #define True  ((Bool)1)
---
> #define True  (Bool)1
(89.9 %, 20738 bytes)
218c218
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
> BZ_EXTERN const char * BZ_APIBZ2_bzerror 
221c221
<    );
---
>    ;
248c248
< #define True  ((Bool)1)
---
> #define True  (Bool)1
248c248
< #define True  ((Bool)1)
---
> #define True  (Bool1)
249c249
< #define False ((Bool)0)
---
> #define False (Bool)0
(89.9 %, 20736 bytes)
248c248
< #define True  (Bool)1
---
> #define True  Bool1
249c249
< #define False ((Bool)0)
---
> #define False (Bool)0
(89.9 %, 20734 bytes)
249c249
< #define False ((Bool)0)
---
> #define False (Bool)0
249c249
< #define False ((Bool)0)
---
> #define False (Bool0)
(89.9 %, 20732 bytes)
249c249
< #define False (Bool)0
---
> #define False Bool0
253c253
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> extern void BZ2_bz__AssertH__fail  int errcode ;
254c254
< #define AssertH(cond,errcode) \
---
> #define AssertHcond,errcode \
(89.9 %, 20730 bytes)
253c253
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> extern void BZ2_bz__AssertH__fail  int errcode ;
254c254
< #define AssertH(cond,errcode) \
---
> #define AssertHcond,errcode \
256c256
< #define AssertD(cond,msg) \
---
> #define AssertDcond,msg \
(89.9 %, 20728 bytes)
256c256
< #define AssertD(cond,msg) \
---
> #define AssertDcond,msg \
258c258
< #define VPrintf0(zf) \
---
> #define VPrintf0zf \
(89.9 %, 20726 bytes)
258c258
< #define VPrintf0(zf) \
---
> #define VPrintf0zf \
259c259
<    fprintf(stderr,zf)
---
>    fprintfstderr,zf
(89.9 %, 20724 bytes)
259c259
<    fprintf(stderr,zf)
---
>    fprintfstderr,zf
260c260
< #define VPrintf1(zf,za1) \
---
> #define VPrintf1zf,za1 \
261c261
<    fprintf(stderr,zf,za1)
---
>    fprintfstderr,zf,za1
(89.9 %, 20722 bytes)
260c260
< #define VPrintf1(zf,za1) \
---
> #define VPrintf1zf,za1 \
261c261
<    fprintf(stderr,zf,za1)
---
>    fprintfstderr,zf,za1
262c262
< #define VPrintf2(zf,za1,za2) \
---
> #define VPrintf2zf,za1,za2 \
(89.9 %, 20720 bytes)
261c261
<    fprintf(stderr,zf,za1)
---
>    fprintfstderr,zf,za1
262c262
< #define VPrintf2(zf,za1,za2) \
---
> #define VPrintf2zf,za1,za2 \
(89.9 %, 20718 bytes)
262c262
< #define VPrintf2(zf,za1,za2) \
---
> #define VPrintf2zf,za1,za2 \
263c263
<    fprintf(stderr,zf,za1,za2)
---
>    fprintfstderr,zf,za1,za2
(89.9 %, 20716 bytes)
263c263
<    fprintf(stderr,zf,za1,za2)
---
>    fprintfstderr,zf,za1,za2
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
> #define VPrintf3zf,za1,za2,za3 \
265c265
<    fprintf(stderr,zf,za1,za2,za3)
---
>    fprintfstderr,zf,za1,za2,za3
(89.9 %, 20714 bytes)
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
> #define VPrintf3zf,za1,za2,za3 \
265c265
<    fprintf(stderr,zf,za1,za2,za3)
---
>    fprintfstderr,zf,za1,za2,za3
(89.9 %, 20712 bytes)
265c265
<    fprintf(stderr,zf,za1,za2,za3)
---
>    fprintfstderr,zf,za1,za2,za3
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> #define VPrintf4zf,za1,za2,za3,za4 \
267c267
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
>    fprintfstderr,zf,za1,za2,za3,za4
(89.9 %, 20710 bytes)
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> #define VPrintf4zf,za1,za2,za3,za4 \
267c267
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
>    fprintfstderr,zf,za1,za2,za3,za4
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> #define VPrintf5zf,za1,za2,za3,za4,za5 \
(89.9 %, 20708 bytes)
267c267
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
>    fprintfstderr,zf,za1,za2,za3,za4
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> #define VPrintf5zf,za1,za2,za3,za4,za5 \
269c269
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
>    fprintfstderr,zf,za1,za2,za3,za4,za5
(89.9 %, 20706 bytes)
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> #define VPrintf5zf,za1,za2,za3,za4,za5 \
269c269
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
>    fprintfstderr,zf,za1,za2,za3,za4,za5
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOCnnn (strm->bzalloc)(strm->opaque,(nnn),1)
(89.9 %, 20704 bytes)
269c269
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
>    fprintfstderr,zf,za1,za2,za3,za4,za5
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOCnnn (strm->bzalloc)(strm->opaque,(nnn),1)
(89.9 %, 20702 bytes)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOCnnn (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOC(nnn) strm->bzalloc(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOC(nnn) (strm->bzalloc)strm->opaque,(nnn),1
(89.9 %, 20700 bytes)
272c272
< #define BZALLOCnnn (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOCnnn strm->bzalloc(strm->opaque,(nnn),1)
272c272
< #define BZALLOCnnn (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOCnnn (strm->bzalloc)strm->opaque,(nnn),1
272c272
< #define BZALLOCnnn (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOCnnn (strm->bzalloc)(strm->opaque,nnn,1)
(89.9 %, 20698 bytes)
272c272
< #define BZALLOCnnn strm->bzalloc(strm->opaque,(nnn),1)
---
> #define BZALLOCnnn strm->bzallocstrm->opaque,(nnn),1
272c272
< #define BZALLOCnnn strm->bzalloc(strm->opaque,(nnn),1)
---
> #define BZALLOCnnn strm->bzalloc(strm->opaque,nnn,1)
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREEppp  (strm->bzfree)(strm->opaque,(ppp))
(89.9 %, 20696 bytes)
272c272
< #define BZALLOCnnn strm->bzallocstrm->opaque,(nnn),1
---
> #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREEppp  (strm->bzfree)(strm->opaque,(ppp))
(89.9 %, 20694 bytes)
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREEppp  (strm->bzfree)(strm->opaque,(ppp))
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREE(ppp)  strm->bzfree(strm->opaque,(ppp))
(89.9 %, 20692 bytes)
273c273
< #define BZFREEppp  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREEppp  strm->bzfree(strm->opaque,(ppp))
273c273
< #define BZFREEppp  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREEppp  (strm->bzfree)strm->opaque,(ppp)
273c273
< #define BZFREEppp  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREEppp  (strm->bzfree)(strm->opaque,ppp)
(89.9 %, 20690 bytes)
273c273
< #define BZFREEppp  strm->bzfree(strm->opaque,(ppp))
---
> #define BZFREEppp  strm->bzfreestrm->opaque,(ppp)
273c273
< #define BZFREEppp  strm->bzfree(strm->opaque,(ppp))
---
> #define BZFREEppp  strm->bzfree(strm->opaque,ppp)
295c295
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS 2 + (900000 / BZ_G_SIZE)
(89.9 %, 20688 bytes)
273c273
< #define BZFREEppp  strm->bzfreestrm->opaque,(ppp)
---
> #define BZFREEppp  strm->bzfreestrm->opaque,ppp
295c295
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS 2 + (900000 / BZ_G_SIZE)
(89.9 %, 20686 bytes)
295c295
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS 2 + (900000 / BZ_G_SIZE)
295c295
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + 900000 / BZ_G_SIZE)
311c311
< #define BZ_RAND_MASK (1)
---
> #define BZ_RAND_MASK 1
(89.9 %, 20684 bytes)
295c295
< #define BZ_MAX_SELECTORS 2 + (900000 / BZ_G_SIZE)
---
> #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
311c311
< #define BZ_RAND_MASK (1)
---
> #define BZ_RAND_MASK 1
314c314
<    if (s->rNToGo == 0)                                            \
---
>    if s->rNToGo == 0                                            \
(89.9 %, 20682 bytes)
311c311
< #define BZ_RAND_MASK (1)
---
> #define BZ_RAND_MASK 1
314c314
<    if (s->rNToGo == 0)                                            \
---
>    if s->rNToGo == 0                                            \
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> #define BZ_INITIALISE_CRCcrcVar              \
(89.9 %, 20680 bytes)
314c314
<    if (s->rNToGo == 0)                                            \
---
>    if s->rNToGo == 0                                            \
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> #define BZ_INITIALISE_CRCcrcVar              \
(89.9 %, 20678 bytes)
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> #define BZ_INITIALISE_CRCcrcVar              \
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> #define BZ_FINALISE_CRCcrcVar                \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #define BZ_UPDATE_CRCcrcVar,cha              \
(89.9 %, 20676 bytes)
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> #define BZ_FINALISE_CRCcrcVar                \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #define BZ_UPDATE_CRCcrcVar,cha              \
(89.9 %, 20674 bytes)
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #define BZ_UPDATE_CRCcrcVar,cha              \
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
597c597
< #define BZ_GET_FAST(cccc)                     \
---
> #define BZ_GET_FASTcccc                     \
(89.9 %, 20672 bytes)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
597c597
< #define BZ_GET_FAST(cccc)                     \
---
> #define BZ_GET_FASTcccc                     \
(89.9 %, 20670 bytes)
597c597
< #define BZ_GET_FAST(cccc)                     \
---
> #define BZ_GET_FASTcccc                     \
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     cccc = UChar(s->tPos & 0xff);           \
(89.9 %, 20668 bytes)
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     cccc = UChar(s->tPos & 0xff);           \
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     cccc = (UChar)s->tPos & 0xff;           \
(89.9 %, 20666 bytes)
599c599
<     cccc = UChar(s->tPos & 0xff);           \
---
>     cccc = UChars->tPos & 0xff;           \
602c602
< #define BZ_GET_FAST_C(cccc)                   \
---
> #define BZ_GET_FAST_Ccccc                   \
(89.9 %, 20664 bytes)
602c602
< #define BZ_GET_FAST_C(cccc)                   \
---
> #define BZ_GET_FAST_Ccccc                   \
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     cccc = UChar(c_tPos & 0xff);            \
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     cccc = (UChar)c_tPos & 0xff;            \
(89.9 %, 20662 bytes)
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     cccc = UChar(c_tPos & 0xff);            \
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     cccc = (UChar)c_tPos & 0xff;            \
607c607
< #define SET_LL4(i,n)                                          \
---
> #define SET_LL4i,n                                          \
(89.9 %, 20660 bytes)
604c604
<     cccc = UChar(c_tPos & 0xff);            \
---
>     cccc = UCharc_tPos & 0xff;            \
607c607
< #define SET_LL4(i,n)                                          \
---
> #define SET_LL4i,n                                          \
(89.9 %, 20658 bytes)
607c607
< #define SET_LL4(i,n)                                          \
---
> #define SET_LL4i,n                                          \
610c610
< #define GET_LL4(i)                             \
---
> #define GET_LL4i                             \
(89.9 %, 20656 bytes)
610c610
< #define GET_LL4(i)                             \
---
> #define GET_LL4i                             \
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    (((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    (((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4) & 0xF)
(89.9 %, 20654 bytes)
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    (((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    (((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4) & 0xF)
(89.9 %, 20652 bytes)
611c611
<    (((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF
---
>    ((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4) & 0xF
611c611
<    (((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF
---
>    ((UInt32)(s->ll4[(i) >> 1]) >> (((i) << 2) & 0x4)) & 0xF
(89.9 %, 20650 bytes)
611c611
<    ((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4) & 0xF
---
>    (UInt32)(s->ll4[(i) >> 1]) >> (((i) << 2) & 0x4) & 0xF
611c611
<    ((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4) & 0xF
---
>    (UInt32(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4) & 0xF
(89.9 %, 20648 bytes)
611c611
<    (UInt32)(s->ll4[(i) >> 1]) >> (((i) << 2) & 0x4) & 0xF
---
>    UInt32(s->ll4[(i) >> 1]) >> (((i) << 2) & 0x4) & 0xF
611c611
<    (UInt32)(s->ll4[(i) >> 1]) >> (((i) << 2) & 0x4) & 0xF
---
>    (UInt32)s->ll4[(i) >> 1] >> (((i) << 2) & 0x4) & 0xF
611c611
<    (UInt32)(s->ll4[(i) >> 1]) >> (((i) << 2) & 0x4) & 0xF
---
>    (UInt32)(s->ll4[i >> 1]) >> (((i) << 2) & 0x4) & 0xF
(89.9 %, 20646 bytes)
611c611
<    UInt32(s->ll4[(i) >> 1]) >> (((i) << 2) & 0x4) & 0xF
---
>    UInt32s->ll4[(i) >> 1] >> (((i) << 2) & 0x4) & 0xF
611c611
<    UInt32(s->ll4[(i) >> 1]) >> (((i) << 2) & 0x4) & 0xF
---
>    UInt32(s->ll4[i >> 1]) >> (((i) << 2) & 0x4) & 0xF
(89.9 %, 20644 bytes)
611c611
<    UInt32s->ll4[(i) >> 1] >> (((i) << 2) & 0x4) & 0xF
---
>    UInt32s->ll4[i >> 1] >> (((i) << 2) & 0x4) & 0xF
611c611
<    UInt32s->ll4[(i) >> 1] >> (((i) << 2) & 0x4) & 0xF
---
>    UInt32s->ll4[(i) >> 1] >> ((i) << 2) & 0x4 & 0xF
(89.9 %, 20642 bytes)
611c611
<    UInt32s->ll4[i >> 1] >> (((i) << 2) & 0x4) & 0xF
---
>    UInt32s->ll4[i >> 1] >> ((i) << 2) & 0x4 & 0xF
611c611
<    UInt32s->ll4[i >> 1] >> (((i) << 2) & 0x4) & 0xF
---
>    UInt32s->ll4[i >> 1] >> ((i) << 2 & 0x4) & 0xF
611c611
<    UInt32s->ll4[i >> 1] >> (((i) << 2) & 0x4) & 0xF
---
>    UInt32s->ll4[i >> 1] >> ((i << 2) & 0x4) & 0xF
(89.9 %, 20640 bytes)
611c611
<    UInt32s->ll4[i >> 1] >> ((i) << 2) & 0x4 & 0xF
---
>    UInt32s->ll4[i >> 1] >> (i) << 2 & 0x4 & 0xF
611c611
<    UInt32s->ll4[i >> 1] >> ((i) << 2) & 0x4 & 0xF
---
>    UInt32s->ll4[i >> 1] >> (i << 2) & 0x4 & 0xF
(89.9 %, 20638 bytes)
611c611
<    UInt32s->ll4[i >> 1] >> (i) << 2 & 0x4 & 0xF
---
>    UInt32s->ll4[i >> 1] >> i << 2 & 0x4 & 0xF
613c613
< #define SET_LL(i,n)                          \
---
> #define SET_LLi,n                          \
(89.9 %, 20636 bytes)
613c613
< #define SET_LL(i,n)                          \
---
> #define SET_LLi,n                          \
616c616
< #define GET_LL(i) \
---
> #define GET_LLi \
(89.9 %, 20634 bytes)
616c616
< #define GET_LL(i) \
---
> #define GET_LLi \
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
>    ((UInt32)s->ll16[i]) | (GET_LL4(i) << 16)
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
>    ((UInt32)s->ll16[i] | (GET_LL4(i) << 16))
(89.9 %, 20632 bytes)
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
>    ((UInt32)s->ll16[i]) | (GET_LL4(i) << 16)
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
>    ((UInt32)s->ll16[i] | (GET_LL4(i) << 16))
(89.9 %, 20630 bytes)
617c617
<    ((UInt32)s->ll16[i]) | (GET_LL4(i) << 16)
---
>    (UInt32)s->ll16[i] | (GET_LL4(i) << 16)
617c617
<    ((UInt32)s->ll16[i]) | (GET_LL4(i) << 16)
---
>    (UInt32s->ll16[i]) | (GET_LL4(i) << 16)
(89.9 %, 20628 bytes)
617c617
<    (UInt32)s->ll16[i] | (GET_LL4(i) << 16)
---
>    UInt32s->ll16[i] | (GET_LL4(i) << 16)
617c617
<    (UInt32)s->ll16[i] | (GET_LL4(i) << 16)
---
>    (UInt32)s->ll16[i] | GET_LL4(i) << 16
(89.9 %, 20626 bytes)
617c617
<    UInt32s->ll16[i] | (GET_LL4(i) << 16)
---
>    UInt32s->ll16[i] | GET_LL4(i) << 16
617c617
<    UInt32s->ll16[i] | (GET_LL4(i) << 16)
---
>    UInt32s->ll16[i] | (GET_LL4i << 16)
(89.9 %, 20624 bytes)
617c617
<    UInt32s->ll16[i] | GET_LL4(i) << 16
---
>    UInt32s->ll16[i] | GET_LL4i << 16
619c619
< #define BZ_GET_SMALL(cccc)                            \
---
> #define BZ_GET_SMALLcccc                            \
(89.9 %, 20622 bytes)
619c619
< #define BZ_GET_SMALL(cccc)                            \
---
> #define BZ_GET_SMALLcccc                            \
620c620
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>       cccc = BZ2_indexIntoF  s->tPos, s->cftab ;    \
(89.9 %, 20620 bytes)
620c620
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>       cccc = BZ2_indexIntoF  s->tPos, s->cftab ;    \
621c621
<       s->tPos = GET_LL(s->tPos);
---
>       s->tPos = GET_LLs->tPos;
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress  DState* ;
658c658
< #define fswap(zz1, zz2) \
---
> #define fswapzz1, zz2 \
(89.9 %, 20618 bytes)
621c621
<       s->tPos = GET_LL(s->tPos);
---
>       s->tPos = GET_LLs->tPos;
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress  DState* ;
658c658
< #define fswap(zz1, zz2) \
---
> #define fswapzz1, zz2 \
(89.9 %, 20616 bytes)
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress  DState* ;
658c658
< #define fswap(zz1, zz2) \
---
> #define fswapzz1, zz2 \
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> #define fvswapzzp1, zzp2, zzn       \
(89.9 %, 20614 bytes)
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> #define fvswapzzp1, zzp2, zzn       \
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define fmina,b ((a) < (b)) ? (a) : (b)
(89.9 %, 20612 bytes)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define fmina,b ((a) < (b)) ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define fmin(a,b) (a) < (b) ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define fmin(a,b) (a < (b)) ? (a) : (b)
(89.9 %, 20610 bytes)
665c665
< #define fmina,b ((a) < (b)) ? (a) : (b)
---
> #define fmina,b (a) < (b) ? (a) : (b)
665c665
< #define fmina,b ((a) < (b)) ? (a) : (b)
---
> #define fmina,b (a < (b)) ? (a) : (b)
(89.9 %, 20608 bytes)
665c665
< #define fmina,b (a) < (b) ? (a) : (b)
---
> #define fmina,b a < (b) ? (a) : (b)
665c665
< #define fmina,b (a) < (b) ? (a) : (b)
---
> #define fmina,b (a) < b ? (a) : (b)
665c665
< #define fmina,b (a) < (b) ? (a) : (b)
---
> #define fmina,b (a) < (b) ? a : (b)
(89.9 %, 20606 bytes)
665c665
< #define fmina,b a < (b) ? (a) : (b)
---
> #define fmina,b a < b ? (a) : (b)
665c665
< #define fmina,b a < (b) ? (a) : (b)
---
> #define fmina,b a < (b) ? a : (b)
(89.9 %, 20604 bytes)
665c665
< #define fmina,b a < b ? (a) : (b)
---
> #define fmina,b a < b ? a : (b)
665c665
< #define fmina,b a < b ? (a) : (b)
---
> #define fmina,b a < b ? (a) : b
(89.9 %, 20602 bytes)
665c665
< #define fmina,b a < b ? a : (b)
---
> #define fmina,b a < b ? a : b
667c667
< #define fpush(lz,hz) 
---
> #define fpushlz,hz 
(89.9 %, 20600 bytes)
667c667
< #define fpush(lz,hz) 
---
> #define fpushlz,hz 
669c669
< #define fpop(lz,hz) 
---
> #define fpoplz,hz 
(89.9 %, 20598 bytes)
669c669
< #define fpop(lz,hz) 
---
> #define fpoplz,hz 
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BHzz  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
(90.0 %, 20596 bytes)
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BHzz  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH(zz)  bhtab[zz >> 5] |= (1 << ((zz) & 31))
(90.0 %, 20594 bytes)
689c689
< #define       SET_BHzz  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BHzz  bhtab[zz >> 5] |= (1 << ((zz) & 31))
689c689
< #define       SET_BHzz  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BHzz  bhtab[(zz) >> 5] |= 1 << ((zz) & 31)
(90.0 %, 20592 bytes)
689c689
< #define       SET_BHzz  bhtab[zz >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BHzz  bhtab[zz >> 5] |= 1 << ((zz) & 31)
689c689
< #define       SET_BHzz  bhtab[zz >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BHzz  bhtab[zz >> 5] |= (1 << (zz) & 31)
(90.0 %, 20590 bytes)
689c689
< #define       SET_BHzz  bhtab[zz >> 5] |= 1 << ((zz) & 31)
---
> #define       SET_BHzz  bhtab[zz >> 5] |= 1 << (zz) & 31
689c689
< #define       SET_BHzz  bhtab[zz >> 5] |= 1 << ((zz) & 31)
---
> #define       SET_BHzz  bhtab[zz >> 5] |= 1 << (zz & 31)
(90.0 %, 20588 bytes)
689c689
< #define       SET_BHzz  bhtab[zz >> 5] |= 1 << (zz) & 31
---
> #define       SET_BHzz  bhtab[zz >> 5] |= 1 << zz & 31
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BHzz  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
(90.0 %, 20586 bytes)
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BHzz  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BH(zz)  bhtab[zz >> 5] &= ~(1 << ((zz) & 31))
(90.0 %, 20584 bytes)
690c690
< #define     CLEAR_BHzz  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~(1 << ((zz) & 31))
690c690
< #define     CLEAR_BHzz  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BHzz  bhtab[(zz) >> 5] &= ~1 << ((zz) & 31)
(90.0 %, 20582 bytes)
690c690
< #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~1 << ((zz) & 31)
690c690
< #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~(1 << (zz) & 31)
(90.0 %, 20580 bytes)
690c690
< #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~1 << ((zz) & 31)
---
> #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~1 << (zz) & 31
690c690
< #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~1 << ((zz) & 31)
---
> #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~1 << (zz & 31)
(90.0 %, 20578 bytes)
690c690
< #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~1 << (zz) & 31
---
> #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~1 << zz & 31
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     ISSET_BHzz  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
(90.0 %, 20576 bytes)
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     ISSET_BHzz  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     ISSET_BH(zz)  bhtab[(zz) >> 5] & (1 << ((zz) & 31))
(90.0 %, 20574 bytes)
691c691
< #define     ISSET_BHzz  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     ISSET_BHzz  bhtab[(zz) >> 5] & (1 << ((zz) & 31))
691c691
< #define     ISSET_BHzz  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     ISSET_BHzz  (bhtab[zz >> 5] & (1 << ((zz) & 31)))
(90.0 %, 20572 bytes)
691c691
< #define     ISSET_BHzz  bhtab[(zz) >> 5] & (1 << ((zz) & 31))
---
> #define     ISSET_BHzz  bhtab[zz >> 5] & (1 << ((zz) & 31))
691c691
< #define     ISSET_BHzz  bhtab[(zz) >> 5] & (1 << ((zz) & 31))
---
> #define     ISSET_BHzz  bhtab[(zz) >> 5] & 1 << ((zz) & 31)
(90.0 %, 20570 bytes)
691c691
< #define     ISSET_BHzz  bhtab[zz >> 5] & (1 << ((zz) & 31))
---
> #define     ISSET_BHzz  bhtab[zz >> 5] & 1 << ((zz) & 31)
691c691
< #define     ISSET_BHzz  bhtab[zz >> 5] & (1 << ((zz) & 31))
---
> #define     ISSET_BHzz  bhtab[zz >> 5] & (1 << (zz) & 31)
(90.0 %, 20568 bytes)
691c691
< #define     ISSET_BHzz  bhtab[zz >> 5] & 1 << ((zz) & 31)
---
> #define     ISSET_BHzz  bhtab[zz >> 5] & 1 << (zz) & 31
691c691
< #define     ISSET_BHzz  bhtab[zz >> 5] & 1 << ((zz) & 31)
---
> #define     ISSET_BHzz  bhtab[zz >> 5] & 1 << (zz & 31)
(90.0 %, 20566 bytes)
691c691
< #define     ISSET_BHzz  bhtab[zz >> 5] & 1 << (zz) & 31
---
> #define     ISSET_BHzz  bhtab[zz >> 5] & 1 << zz & 31
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define      WORD_BHzz  bhtab[(zz) >> 5]
(90.0 %, 20564 bytes)
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define      WORD_BHzz  bhtab[(zz) >> 5]
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define      WORD_BH(zz)  bhtab[zz >> 5]
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0x01f)
---
> #define UNALIGNED_BHzz  ((zz) & 0x01f)
(90.0 %, 20562 bytes)
692c692
< #define      WORD_BHzz  bhtab[(zz) >> 5]
---
> #define      WORD_BHzz  bhtab[zz >> 5]
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0x01f)
---
> #define UNALIGNED_BHzz  ((zz) & 0x01f)
(90.0 %, 20560 bytes)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0x01f)
---
> #define UNALIGNED_BHzz  ((zz) & 0x01f)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0x01f)
---
> #define UNALIGNED_BH(zz)  (zz) & 0x01f
(90.0 %, 20558 bytes)
693c693
< #define UNALIGNED_BHzz  ((zz) & 0x01f)
---
> #define UNALIGNED_BHzz  (zz) & 0x01f
693c693
< #define UNALIGNED_BHzz  ((zz) & 0x01f)
---
> #define UNALIGNED_BHzz  (zz & 0x01f)
724c724
< #define mswap(zz1, zz2) \
---
> #define mswapzz1, zz2 \
(90.0 %, 20556 bytes)
693c693
< #define UNALIGNED_BHzz  (zz) & 0x01f
---
> #define UNALIGNED_BHzz  zz & 0x01f
724c724
< #define mswap(zz1, zz2) \
---
> #define mswapzz1, zz2 \
(90.0 %, 20554 bytes)
724c724
< #define mswap(zz1, zz2) \
---
> #define mswapzz1, zz2 \
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> #define mvswapzzp1, zzp2, zzn       \
(90.0 %, 20552 bytes)
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> #define mvswapzzp1, zzp2, zzn       \
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define mmina,b ((a) < (b)) ? (a) : (b)
(90.0 %, 20550 bytes)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define mmina,b ((a) < (b)) ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define mmin(a,b) (a) < (b) ? (a) : (b)
(90.0 %, 20548 bytes)
732c732
< #define mmina,b ((a) < (b)) ? (a) : (b)
---
> #define mmina,b (a) < (b) ? (a) : (b)
732c732
< #define mmina,b ((a) < (b)) ? (a) : (b)
---
> #define mmina,b (a < (b)) ? (a) : (b)
(90.0 %, 20546 bytes)
732c732
< #define mmina,b (a) < (b) ? (a) : (b)
---
> #define mmina,b a < (b) ? (a) : (b)
732c732
< #define mmina,b (a) < (b) ? (a) : (b)
---
> #define mmina,b (a) < b ? (a) : (b)
732c732
< #define mmina,b (a) < (b) ? (a) : (b)
---
> #define mmina,b (a) < (b) ? a : (b)
(90.0 %, 20544 bytes)
732c732
< #define mmina,b a < (b) ? (a) : (b)
---
> #define mmina,b a < b ? (a) : (b)
732c732
< #define mmina,b a < (b) ? (a) : (b)
---
> #define mmina,b a < (b) ? a : (b)
(90.0 %, 20542 bytes)
732c732
< #define mmina,b a < b ? (a) : (b)
---
> #define mmina,b a < b ? a : (b)
732c732
< #define mmina,b a < b ? (a) : (b)
---
> #define mmina,b a < b ? (a) : b
734c734
< #define mpush(lz,hz,dz) 
---
> #define mpushlz,hz,dz 
(90.0 %, 20540 bytes)
732c732
< #define mmina,b a < b ? a : (b)
---
> #define mmina,b a < b ? a : b
734c734
< #define mpush(lz,hz,dz) 
---
> #define mpushlz,hz,dz 
(90.0 %, 20538 bytes)
734c734
< #define mpush(lz,hz,dz) 
---
> #define mpushlz,hz,dz 
736c736
< #define mpop(lz,hz,dz) 
---
> #define mpoplz,hz,dz 
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define mnextsizeaz (nextHi[az]-nextLo[az])
(90.0 %, 20536 bytes)
736c736
< #define mpop(lz,hz,dz) 
---
> #define mpoplz,hz,dz 
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define mnextsizeaz (nextHi[az]-nextLo[az])
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define mnextsize(az) nextHi[az]-nextLo[az]
(90.0 %, 20534 bytes)
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define mnextsizeaz (nextHi[az]-nextLo[az])
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define mnextsize(az) nextHi[az]-nextLo[az]
(90.0 %, 20532 bytes)
739c739
< #define mnextsizeaz (nextHi[az]-nextLo[az])
---
> #define mnextsizeaz nextHi[az]-nextLo[az]
741c741
< #define mnextswap(az,bz)                                        \
---
> #define mnextswapaz,bz                                        \
(90.0 %, 20530 bytes)
741c741
< #define mnextswap(az,bz)                                        \
---
> #define mnextswapaz,bz                                        \
746c746
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
---
> #define MAIN_QSORT_DEPTH_THRESH BZ_N_RADIX + BZ_N_QSORT
(90.0 %, 20528 bytes)
746c746
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
---
> #define MAIN_QSORT_DEPTH_THRESH BZ_N_RADIX + BZ_N_QSORT
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb (ftab[((b)+1) << 8] - ftab[(b) << 8])
(90.0 %, 20526 bytes)
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb (ftab[((b)+1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ(b) ftab[((b)+1) << 8] - ftab[(b) << 8]
(90.0 %, 20524 bytes)
766c766
< #define BIGFREQb (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb ftab[((b)+1) << 8] - ftab[(b) << 8]
766c766
< #define BIGFREQb (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb (ftab[(b)+1 << 8] - ftab[(b) << 8])
(90.0 %, 20522 bytes)
766c766
< #define BIGFREQb ftab[((b)+1) << 8] - ftab[(b) << 8]
---
> #define BIGFREQb ftab[(b)+1 << 8] - ftab[(b) << 8]
766c766
< #define BIGFREQb ftab[((b)+1) << 8] - ftab[(b) << 8]
---
> #define BIGFREQb ftab[(b+1) << 8] - ftab[(b) << 8]
(90.0 %, 20520 bytes)
766c766
< #define BIGFREQb ftab[(b)+1 << 8] - ftab[(b) << 8]
---
> #define BIGFREQb ftab[b+1 << 8] - ftab[(b) << 8]
766c766
< #define BIGFREQb ftab[(b)+1 << 8] - ftab[(b) << 8]
---
> #define BIGFREQb ftab[(b)+1 << 8] - ftab[b << 8]
(90.0 %, 20518 bytes)
766c766
< #define BIGFREQb ftab[b+1 << 8] - ftab[(b) << 8]
---
> #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
767c767
< #define SETMASK (1 << 21)
---
> #define SETMASK 1 << 21
(90.0 %, 20516 bytes)
767c767
< #define SETMASK (1 << 21)
---
> #define SETMASK 1 << 21
768c768
< #define CLEARMASK (~(SETMASK))
---
> #define CLEARMASK ~(SETMASK)
(90.0 %, 20514 bytes)
768c768
< #define CLEARMASK (~(SETMASK))
---
> #define CLEARMASK ~(SETMASK)
768c768
< #define CLEARMASK (~(SETMASK))
---
> #define CLEARMASK (~SETMASK)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
---
> #define WEIGHTOFzz0  ((zz0) & 0xffffff00)
(90.0 %, 20512 bytes)
768c768
< #define CLEARMASK ~(SETMASK)
---
> #define CLEARMASK ~SETMASK
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
---
> #define WEIGHTOFzz0  ((zz0) & 0xffffff00)
(90.0 %, 20510 bytes)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
---
> #define WEIGHTOFzz0  ((zz0) & 0xffffff00)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
---
> #define WEIGHTOF(zz0)  (zz0) & 0xffffff00
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
---
> #define WEIGHTOF(zz0)  (zz0 & 0xffffff00)
(90.0 %, 20508 bytes)
793c793
< #define WEIGHTOFzz0  ((zz0) & 0xffffff00)
---
> #define WEIGHTOFzz0  (zz0) & 0xffffff00
793c793
< #define WEIGHTOFzz0  ((zz0) & 0xffffff00)
---
> #define WEIGHTOFzz0  (zz0 & 0xffffff00)
(90.0 %, 20506 bytes)
793c793
< #define WEIGHTOFzz0  (zz0) & 0xffffff00
---
> #define WEIGHTOFzz0  zz0 & 0xffffff00
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOFzz1   ((zz1) & 0x000000ff)
(90.0 %, 20504 bytes)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOFzz1   ((zz1) & 0x000000ff)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF(zz1)   (zz1) & 0x000000ff
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF(zz1)   (zz1 & 0x000000ff)
(90.0 %, 20502 bytes)
794c794
< #define DEPTHOFzz1   ((zz1) & 0x000000ff)
---
> #define DEPTHOFzz1   (zz1) & 0x000000ff
794c794
< #define DEPTHOFzz1   ((zz1) & 0x000000ff)
---
> #define DEPTHOFzz1   (zz1 & 0x000000ff)
(90.0 %, 20500 bytes)
794c794
< #define DEPTHOFzz1   (zz1) & 0x000000ff
---
> #define DEPTHOFzz1   zz1 & 0x000000ff
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define MYMAXzz2,zz3 ((zz2) > (zz3) ? (zz2) : (zz3))
(90.0 %, 20498 bytes)
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define MYMAXzz2,zz3 ((zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define MYMAX(zz2,zz3) (zz2) > (zz3) ? (zz2) : (zz3)
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define MYMAX(zz2,zz3) (zz2 > (zz3) ? (zz2) : (zz3))
(90.0 %, 20496 bytes)
795c795
< #define MYMAXzz2,zz3 ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define MYMAXzz2,zz3 (zz2) > (zz3) ? (zz2) : (zz3)
795c795
< #define MYMAXzz2,zz3 ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define MYMAXzz2,zz3 (zz2 > (zz3) ? (zz2) : (zz3))
(90.0 %, 20494 bytes)
795c795
< #define MYMAXzz2,zz3 (zz2) > (zz3) ? (zz2) : (zz3)
---
> #define MYMAXzz2,zz3 zz2 > (zz3) ? (zz2) : (zz3)
795c795
< #define MYMAXzz2,zz3 (zz2) > (zz3) ? (zz2) : (zz3)
---
> #define MYMAXzz2,zz3 (zz2) > zz3 ? (zz2) : (zz3)
(90.0 %, 20492 bytes)
795c795
< #define MYMAXzz2,zz3 zz2 > (zz3) ? (zz2) : (zz3)
---
> #define MYMAXzz2,zz3 zz2 > zz3 ? (zz2) : (zz3)
795c795
< #define MYMAXzz2,zz3 zz2 > (zz3) ? (zz2) : (zz3)
---
> #define MYMAXzz2,zz3 zz2 > (zz3) ? zz2 : (zz3)
795c795
< #define MYMAXzz2,zz3 zz2 > (zz3) ? (zz2) : (zz3)
---
> #define MYMAXzz2,zz3 zz2 > (zz3) ? (zz2) : zz3
(90.0 %, 20490 bytes)
795c795
< #define MYMAXzz2,zz3 zz2 > zz3 ? (zz2) : (zz3)
---
> #define MYMAXzz2,zz3 zz2 > zz3 ? zz2 : (zz3)
795c795
< #define MYMAXzz2,zz3 zz2 > zz3 ? (zz2) : (zz3)
---
> #define MYMAXzz2,zz3 zz2 > zz3 ? (zz2) : zz3
(90.0 %, 20488 bytes)
795c795
< #define MYMAXzz2,zz3 zz2 > zz3 ? zz2 : (zz3)
---
> #define MYMAXzz2,zz3 zz2 > zz3 ? zz2 : zz3
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> #define ADDWEIGHTSzw1,zw2                           \
(90.0 %, 20486 bytes)
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> #define ADDWEIGHTSzw1,zw2                           \
798c798
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
>    WEIGHTOF(zw1)+WEIGHTOF(zw2) |                    \
798c798
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
>    (WEIGHTOFzw1+WEIGHTOF(zw2)) |                    \
(90.0 %, 20484 bytes)
798c798
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
>    WEIGHTOF(zw1)+WEIGHTOF(zw2) |                    \
798c798
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
>    (WEIGHTOFzw1+WEIGHTOF(zw2)) |                    \
(90.0 %, 20482 bytes)
798c798
<    WEIGHTOF(zw1)+WEIGHTOF(zw2) |                    \
---
>    WEIGHTOFzw1+WEIGHTOF(zw2) |                    \
798c798
<    WEIGHTOF(zw1)+WEIGHTOF(zw2) |                    \
---
>    WEIGHTOF(zw1)+WEIGHTOFzw2 |                    \
(90.0 %, 20480 bytes)
798c798
<    WEIGHTOFzw1+WEIGHTOF(zw2) |                    \
---
>    WEIGHTOFzw1+WEIGHTOFzw2 |                    \
799c799
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>    1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2))
799c799
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>    (1 + MYMAXDEPTHOF(zw1),DEPTHOF(zw2))
(90.0 %, 20478 bytes)
799c799
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>    1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2))
799c799
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>    (1 + MYMAXDEPTHOF(zw1),DEPTHOF(zw2))
799c799
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>    (1 + MYMAX(DEPTHOFzw1,DEPTHOF(zw2)))
(90.0 %, 20476 bytes)
799c799
<    1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2))
---
>    1 + MYMAXDEPTHOF(zw1),DEPTHOF(zw2)
799c799
<    1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2))
---
>    1 + MYMAX(DEPTHOFzw1,DEPTHOF(zw2))
799c799
<    1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2))
---
>    1 + MYMAX(DEPTHOF(zw1),DEPTHOFzw2)
(90.0 %, 20474 bytes)
799c799
<    1 + MYMAXDEPTHOF(zw1),DEPTHOF(zw2)
---
>    1 + MYMAXDEPTHOFzw1,DEPTHOF(zw2)
799c799
<    1 + MYMAXDEPTHOF(zw1),DEPTHOF(zw2)
---
>    1 + MYMAXDEPTHOF(zw1),DEPTHOFzw2
(90.0 %, 20472 bytes)
799c799
<    1 + MYMAXDEPTHOFzw1,DEPTHOF(zw2)
---
>    1 + MYMAXDEPTHOFzw1,DEPTHOFzw2
801c801
< #define UPHEAP(z)                                     \
---
> #define UPHEAPz                                     \
804c804
< #define DOWNHEAP(z)                                   \
---
> #define DOWNHEAPz                                   \
(90.0 %, 20470 bytes)
801c801
< #define UPHEAP(z)                                     \
---
> #define UPHEAPz                                     \
804c804
< #define DOWNHEAP(z)                                   \
---
> #define DOWNHEAPz                                   \
(90.0 %, 20468 bytes)
804c804
< #define DOWNHEAP(z)                                   \
---
> #define DOWNHEAPz                                   \
872c872
< #define bsNEEDW(nz)                           \
---
> #define bsNEEDWnz                           \
(90.0 %, 20466 bytes)
872c872
< #define bsNEEDW(nz)                           \
---
> #define bsNEEDWnz                           \
894c894
< void makeMaps_e ( EState* s )
---
> void makeMaps_e  EState* s 
900c900
< void generateMTFValues ( EState* s )
---
> void generateMTFValues  EState* s 
930c930
< #define RETURN(rrr)                               \
---
> #define RETURNrrr                               \
(90.0 %, 20464 bytes)
894c894
< void makeMaps_e ( EState* s )
---
> void makeMaps_e  EState* s 
900c900
< void generateMTFValues ( EState* s )
---
> void generateMTFValues  EState* s 
930c930
< #define RETURN(rrr)                               \
---
> #define RETURNrrr                               \
933c933
< #define GET_BITS(lll,vvv,nnn)                     \
---
> #define GET_BITSlll,vvv,nnn                     \
(90.0 %, 20462 bytes)
933c933
< #define GET_BITS(lll,vvv,nnn)                     \
---
> #define GET_BITSlll,vvv,nnn                     \
935c935
<    while (True) 
---
>    while True 
937c937
< #define GET_UCHAR(lll,uuu)                        \
---
> #define GET_UCHARlll,uuu                        \
(90.0 %, 20460 bytes)
935c935
<    while (True) 
---
>    while True 
937c937
< #define GET_UCHAR(lll,uuu)                        \
---
> #define GET_UCHARlll,uuu                        \
938c938
<    GET_BITS(lll,uuu,8)
---
>    GET_BITSlll,uuu,8
(90.0 %, 20458 bytes)
937c937
< #define GET_UCHAR(lll,uuu)                        \
---
> #define GET_UCHARlll,uuu                        \
938c938
<    GET_BITS(lll,uuu,8)
---
>    GET_BITSlll,uuu,8
(90.0 %, 20456 bytes)
938c938
<    GET_BITS(lll,uuu,8)
---
>    GET_BITSlll,uuu,8
940c940
< #define GET_BIT(lll,uuu)                          \
---
> #define GET_BITlll,uuu                          \
(90.0 %, 20454 bytes)
940c940
< #define GET_BIT(lll,uuu)                          \
---
> #define GET_BITlll,uuu                          \
941c941
<    GET_BITS(lll,uuu,1)
---
>    GET_BITSlll,uuu,1
(90.0 %, 20452 bytes)
941c941
<    GET_BITS(lll,uuu,1)
---
>    GET_BITSlll,uuu,1
944c944
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> #define GET_MTF_VALlabel1,label2,lval           \
(90.0 %, 20450 bytes)
944c944
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> #define GET_MTF_VALlabel1,label2,lval           \
949c949
< Int32 BZ2_decompress ( DState* s )
---
> Int32 BZ2_decompress  DState* s 
968c968
< void BZ2_bz__AssertH__fail ( int errcode )
---
> void BZ2_bz__AssertH__fail  int errcode 
974c974
< int bz_config_ok ( void )
---
> int bz_config_ok  void 
980c980
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> void* default_bzalloc  void* opaque, Int32 items, Int32 size 
984c984
< void default_bzfree ( void* opaque, void* addr )
---
> void default_bzfree  void* opaque, void* addr 
990c990
< void prepare_new_block ( EState* s )
---
> void prepare_new_block  EState* s 
996c996
< void init_RL ( EState* s )
---
> void init_RL  EState* s 
(90.0 %, 20448 bytes)
949c949
< Int32 BZ2_decompress ( DState* s )
---
> Int32 BZ2_decompress  DState* s 
968c968
< void BZ2_bz__AssertH__fail ( int errcode )
---
> void BZ2_bz__AssertH__fail  int errcode 
974c974
< int bz_config_ok ( void )
---
> int bz_config_ok  void 
980c980
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> void* default_bzalloc  void* opaque, Int32 items, Int32 size 
984c984
< void default_bzfree ( void* opaque, void* addr )
---
> void default_bzfree  void* opaque, void* addr 
990c990
< void prepare_new_block ( EState* s )
---
> void prepare_new_block  EState* s 
996c996
< void init_RL ( EState* s )
---
> void init_RL  EState* s 
1001c1001
< Bool isempty_RL ( EState* s )
---
> Bool isempty_RL  EState* s 
1006c1006
< int BZ_API(BZ2_bzCompressInit) 
---
> int BZ_APIBZ2_bzCompressInit 
1007c1007
<                     ( bz_stream* strm, 
---
>                      bz_stream* strm, 
1010c1010
<                      int        workFactor )
---
>                      int        workFactor 
1023c1023
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
> #define ADD_CHAR_TO_BLOCKzs,zchh0               \
(90.0 %, 20446 bytes)
1007c1007
<                     ( bz_stream* strm, 
---
>                      bz_stream* strm, 
1010c1010
<                      int        workFactor )
---
>                      int        workFactor 
1023c1023
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
> #define ADD_CHAR_TO_BLOCKzs,zchh0               \
1037c1037
< Bool handle_compress ( bz_stream* strm )
---
> Bool handle_compress  bz_stream* strm 
1042c1042
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
(90.0 %, 20444 bytes)
1037c1037
< Bool handle_compress ( bz_stream* strm )
---
> Bool handle_compress  bz_stream* strm 
1042c1042
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
1042c1042
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int BZ_API(BZ2_bzCompress)  bz_stream *strm, int action 
1047c1047
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
(90.0 %, 20442 bytes)
1042c1042
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
> int BZ_APIBZ2_bzCompress  bz_stream *strm, int action 
1047c1047
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
1047c1047
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> int BZ_API(BZ2_bzCompressEnd)   bz_stream *strm 
1056c1056
< int BZ_API(BZ2_bzDecompressInit) 
---
> int BZ_APIBZ2_bzDecompressInit 
(90.0 %, 20440 bytes)
1047c1047
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
> int BZ_APIBZ2_bzCompressEnd   bz_stream *strm 
1056c1056
< int BZ_API(BZ2_bzDecompressInit) 
---
> int BZ_APIBZ2_bzDecompressInit 
1057c1057
<                      ( bz_stream* strm, 
---
>                       bz_stream* strm, 
1059c1059
<                        int        small )
---
>                        int        small 
1065c1065
< void unRLE_obuf_to_output_FAST ( DState* s )
---
> void unRLE_obuf_to_output_FAST  DState* s 
1076c1076
< void unRLE_obuf_to_output_SMALL ( DState* s )
---
> void unRLE_obuf_to_output_SMALL  DState* s 
1081c1081
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
(90.0 %, 20438 bytes)
1057c1057
<                      ( bz_stream* strm, 
---
>                       bz_stream* strm, 
1059c1059
<                        int        small )
---
>                        int        small 
1065c1065
< void unRLE_obuf_to_output_FAST ( DState* s )
---
> void unRLE_obuf_to_output_FAST  DState* s 
1076c1076
< void unRLE_obuf_to_output_SMALL ( DState* s )
---
> void unRLE_obuf_to_output_SMALL  DState* s 
1081c1081
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
1081c1081
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> int BZ_API(BZ2_bzDecompress)  bz_stream *strm 
1086c1086
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
(90.0 %, 20436 bytes)
1081c1081
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
> int BZ_APIBZ2_bzDecompress  bz_stream *strm 
1086c1086
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
1086c1086
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> int BZ_API(BZ2_bzDecompressEnd)   bz_stream *strm 
1094c1094
< #define BZ_SETERR(eee)                    \
---
> #define BZ_SETERReee                    \
(90.0 %, 20434 bytes)
1086c1086
< int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
> int BZ_APIBZ2_bzDecompressEnd   bz_stream *strm 
1094c1094
< #define BZ_SETERR(eee)                    \
---
> #define BZ_SETERReee                    \
1115c1115
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE* BZ_APIBZ2_bzWriteOpen 
(90.0 %, 20432 bytes)
1115c1115
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE* BZ_APIBZ2_bzWriteOpen 
1116c1116
<                     ( int*  bzerror,      
---
>                      int*  bzerror,      
1120c1120
<                       int   workFactor )
---
>                       int   workFactor 
1126c1126
< void BZ_API(BZ2_bzWrite)
---
> void BZ_APIBZ2_bzWrite
(90.0 %, 20430 bytes)
1116c1116
<                     ( int*  bzerror,      
---
>                      int*  bzerror,      
1120c1120
<                       int   workFactor )
---
>                       int   workFactor 
1126c1126
< void BZ_API(BZ2_bzWrite)
---
> void BZ_APIBZ2_bzWrite
1127c1127
<              ( int*    bzerror, 
---
>               int*    bzerror, 
1130c1130
<                int     len )
---
>                int     len 
1135c1135
< void BZ_API(BZ2_bzWriteClose)
---
> void BZ_APIBZ2_bzWriteClose
(90.0 %, 20428 bytes)
1127c1127
<              ( int*    bzerror, 
---
>               int*    bzerror, 
1130c1130
<                int     len )
---
>                int     len 
1135c1135
< void BZ_API(BZ2_bzWriteClose)
---
> void BZ_APIBZ2_bzWriteClose
1136c1136
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
1140c1140
<                     unsigned int* nbytes_out )
---
>                     unsigned int* nbytes_out 
1144c1144
< void BZ_API(BZ2_bzWriteClose64)
---
> void BZ_APIBZ2_bzWriteClose64
(90.0 %, 20426 bytes)
1136c1136
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
1140c1140
<                     unsigned int* nbytes_out )
---
>                     unsigned int* nbytes_out 
1144c1144
< void BZ_API(BZ2_bzWriteClose64)
---
> void BZ_APIBZ2_bzWriteClose64
1145c1145
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
1151c1151
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_out_hi32 
1156c1156
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> BZFILE* BZ_APIBZ2_bzReadOpen 
(90.0 %, 20424 bytes)
1145c1145
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
1151c1151
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_out_hi32 
1156c1156
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> BZFILE* BZ_APIBZ2_bzReadOpen 
1157c1157
<                    ( int*  bzerror, 
---
>                     int*  bzerror, 
1162c1162
<                      int   nUnused )
---
>                      int   nUnused 
1167c1167
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
(90.0 %, 20422 bytes)
1157c1157
<                    ( int*  bzerror, 
---
>                     int*  bzerror, 
1162c1162
<                      int   nUnused )
---
>                      int   nUnused 
1167c1167
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
1167c1167
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API(BZ2_bzReadClose)  int *bzerror, BZFILE *b 
1172c1172
< int BZ_API(BZ2_bzRead) 
---
> int BZ_APIBZ2_bzRead 
(90.0 %, 20420 bytes)
1167c1167
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose  int *bzerror, BZFILE *b 
1172c1172
< int BZ_API(BZ2_bzRead) 
---
> int BZ_APIBZ2_bzRead 
1173c1173
<            ( int*    bzerror, 
---
>             int*    bzerror, 
1176c1176
<              int     len )
---
>              int     len 
1181c1181
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void BZ_APIBZ2_bzReadGetUnused 
(90.0 %, 20418 bytes)
1173c1173
<            ( int*    bzerror, 
---
>             int*    bzerror, 
1176c1176
<              int     len )
---
>              int     len 
1181c1181
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void BZ_APIBZ2_bzReadGetUnused 
1182c1182
<                      ( int*    bzerror, 
---
>                       int*    bzerror, 
1185c1185
<                        int*    nUnused )
---
>                        int*    nUnused 
1194c1194
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
> int BZ_APIBZ2_bzBuffToBuffCompress 
(90.0 %, 20416 bytes)
1182c1182
<                      ( int*    bzerror, 
---
>                       int*    bzerror, 
1185c1185
<                        int*    nUnused )
---
>                        int*    nUnused 
1194c1194
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
> int BZ_APIBZ2_bzBuffToBuffCompress 
1195c1195
<                          ( char*         dest, 
---
>                           char*         dest, 
1201c1201
<                            int           workFactor )
---
>                            int           workFactor 
1206c1206
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> int BZ_APIBZ2_bzBuffToBuffDecompress 
(90.0 %, 20414 bytes)
1195c1195
<                          ( char*         dest, 
---
>                           char*         dest, 
1201c1201
<                            int           workFactor )
---
>                            int           workFactor 
1206c1206
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> int BZ_APIBZ2_bzBuffToBuffDecompress 
1207c1207
<                            ( char*         dest, 
---
>                             char*         dest, 
1212c1212
<                              int           verbosity )
---
>                              int           verbosity 
1222c1222
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
> const char * BZ_APIBZ2_bzlibVersion(void)
(90.0 %, 20412 bytes)
1207c1207
<                            ( char*         dest, 
---
>                             char*         dest, 
1212c1212
<                              int           verbosity )
---
>                              int           verbosity 
1222c1222
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
> const char * BZ_APIBZ2_bzlibVersion(void)
1222c1222
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
> const char * BZ_API(BZ2_bzlibVersion)void
1230c1230
<                ( const char *path,   
---
>                 const char *path,   
1233c1233
<                  int open_mode)      
---
>                  int open_mode      
1239c1239
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZFILE * BZ_APIBZ2_bzopen
(90.0 %, 20410 bytes)
1222c1222
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> const char * BZ_APIBZ2_bzlibVersionvoid
1230c1230
<                ( const char *path,   
---
>                 const char *path,   
1233c1233
<                  int open_mode)      
---
>                  int open_mode      
1239c1239
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZFILE * BZ_APIBZ2_bzopen
(90.0 %, 20408 bytes)
1230c1230
<                ( const char *path,   
---
>                 const char *path,   
1233c1233
<                  int open_mode)      
---
>                  int open_mode      
1239c1239
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZFILE * BZ_APIBZ2_bzopen
1240,1241c1240,1241
<                ( const char *path,
<                  const char *mode )
---
>                 const char *path,
>                  const char *mode 
1246c1246
< BZFILE * BZ_API(BZ2_bzdopen)
---
> BZFILE * BZ_APIBZ2_bzdopen
(90.0 %, 20406 bytes)
1240,1241c1240,1241
<                ( const char *path,
<                  const char *mode )
---
>                 const char *path,
>                  const char *mode 
1246c1246
< BZFILE * BZ_API(BZ2_bzdopen)
---
> BZFILE * BZ_APIBZ2_bzdopen
1247,1248c1247,1248
<                ( int fd,
<                  const char *mode )
---
>                 int fd,
>                  const char *mode 
1253c1253
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
(90.0 %, 20404 bytes)
1247,1248c1247,1248
<                ( int fd,
<                  const char *mode )
---
>                 int fd,
>                  const char *mode 
1253c1253
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
1253c1253
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) BZFILE* b, void* buf, int len 
1256c1256
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((bzFile*)b)->lastErr == BZ_STREAM_END return 0;
1256c1256
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((bzFile*)b->lastErr == BZ_STREAM_END) return 0;
1256c1256
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((bzFile*b)->lastErr == BZ_STREAM_END) return 0;
1258c1258
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if bzerr == BZ_OK || bzerr == BZ_STREAM_END ; else ;
1263c1263
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
(90.0 %, 20402 bytes)
1253c1253
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> int BZ_APIBZ2_bzread BZFILE* b, void* buf, int len 
1256c1256
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((bzFile*)b)->lastErr == BZ_STREAM_END return 0;
1256c1256
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((bzFile*)b->lastErr == BZ_STREAM_END) return 0;
1256c1256
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((bzFile*b)->lastErr == BZ_STREAM_END) return 0;
1258c1258
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if bzerr == BZ_OK || bzerr == BZ_STREAM_END ; else ;
1263c1263
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
1263c1263
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) BZFILE* b, void* buf, int len 
1268c1268
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_APIBZ2_bzflush (BZFILE *b)
(90.0 %, 20400 bytes)
1263c1263
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
> int BZ_APIBZ2_bzwrite BZFILE* b, void* buf, int len 
1268c1268
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_APIBZ2_bzflush (BZFILE *b)
1268c1268
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_API(BZ2_bzflush) BZFILE *b
1273c1273
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> void BZ_APIBZ2_bzclose (BZFILE* b)
(90.0 %, 20398 bytes)
1268c1268
< int BZ_APIBZ2_bzflush (BZFILE *b)
---
> int BZ_APIBZ2_bzflush BZFILE *b
1273c1273
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> void BZ_APIBZ2_bzclose (BZFILE* b)
1273c1273
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> void BZ_API(BZ2_bzclose) BZFILE* b
1282c1282
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
(90.0 %, 20396 bytes)
1273c1273
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
> void BZ_APIBZ2_bzclose BZFILE* b
1282c1282
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
1282c1282
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_API(BZ2_bzerror) BZFILE *b, int *errnum
1324c1324
< #define ERROR_IF_EOF(i)       
---
> #define ERROR_IF_EOFi       
(90.0 %, 20394 bytes)
1282c1282
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror BZFILE *b, int *errnum
1324c1324
< #define ERROR_IF_EOF(i)       
---
> #define ERROR_IF_EOFi       
1325c1325
< #define ERROR_IF_NOT_ZERO(i)  
---
> #define ERROR_IF_NOT_ZEROi  
(90.0 %, 20392 bytes)
1325c1325
< #define ERROR_IF_NOT_ZERO(i)  
---
> #define ERROR_IF_NOT_ZEROi  
1326c1326
< #define ERROR_IF_MINUS_ONE(i) 
---
> #define ERROR_IF_MINUS_ONEi 
1342c1342
< #   define APPEND_FILESPEC(root, name) \
---
> #   define APPEND_FILESPECroot, name \
(90.1 %, 20390 bytes)
1326c1326
< #define ERROR_IF_MINUS_ONE(i) 
---
> #define ERROR_IF_MINUS_ONEi 
1342c1342
< #   define APPEND_FILESPEC(root, name) \
---
> #   define APPEND_FILESPECroot, name \
(90.1 %, 20388 bytes)
1342c1342
< #   define APPEND_FILESPEC(root, name) \
---
> #   define APPEND_FILESPECroot, name \
1343c1343
<       root=snocString((root), (name))
---
>       root=snocString(root), (name)
(90.1 %, 20386 bytes)
1343c1343
<       root=snocString((root), (name))
---
>       root=snocString(root), (name)
1343c1343
<       root=snocString((root), (name))
---
>       root=snocString(root, (name))
1343c1343
<       root=snocString((root), (name))
---
>       root=snocString((root), name)
(90.1 %, 20384 bytes)
1343c1343
<       root=snocString(root), (name)
---
>       root=snocStringroot, (name)
1343c1343
<       root=snocString(root), (name)
---
>       root=snocString(root), name
1345c1345
< #   define APPEND_FLAG(root, name) \
---
> #   define APPEND_FLAGroot, name \
(90.1 %, 20382 bytes)
1343c1343
<       root=snocStringroot, (name)
---
>       root=snocStringroot, name
1345c1345
< #   define APPEND_FLAG(root, name) \
---
> #   define APPEND_FLAGroot, name \
(90.1 %, 20380 bytes)
1345c1345
< #   define APPEND_FLAG(root, name) \
---
> #   define APPEND_FLAGroot, name \
1346c1346
<       root=snocString((root), (name))
---
>       root=snocString(root), (name)
1346c1346
<       root=snocString((root), (name))
---
>       root=snocString(root, (name))
(90.1 %, 20378 bytes)
1346c1346
<       root=snocString((root), (name))
---
>       root=snocString(root), (name)
1346c1346
<       root=snocString((root), (name))
---
>       root=snocString(root, (name))
1346c1346
<       root=snocString((root), (name))
---
>       root=snocString((root), name)
(90.1 %, 20376 bytes)
1346c1346
<       root=snocString(root), (name)
---
>       root=snocStringroot, (name)
1346c1346
<       root=snocString(root), (name)
---
>       root=snocString(root), name
(90.1 %, 20374 bytes)
1346c1346
<       root=snocStringroot, (name)
---
>       root=snocStringroot, name
1348c1348
< #   define SET_BINARY_MODE(fd) 
---
> #   define SET_BINARY_MODEfd 
(90.1 %, 20372 bytes)
1348c1348
< #   define SET_BINARY_MODE(fd) 
---
> #   define SET_BINARY_MODEfd 
1359c1359
< #define True  ((Bool)1)
---
> #define True  (Bool)1
1359c1359
< #define True  ((Bool)1)
---
> #define True  (Bool1)
(90.1 %, 20370 bytes)
1359c1359
< #define True  ((Bool)1)
---
> #define True  (Bool)1
1359c1359
< #define True  ((Bool)1)
---
> #define True  (Bool1)
1360c1360
< #define False ((Bool)0)
---
> #define False (Bool)0
(90.1 %, 20368 bytes)
1359c1359
< #define True  (Bool)1
---
> #define True  Bool1
1360c1360
< #define False ((Bool)0)
---
> #define False (Bool)0
(90.1 %, 20366 bytes)
1360c1360
< #define False ((Bool)0)
---
> #define False (Bool)0
1360c1360
< #define False ((Bool)0)
---
> #define False (Bool0)
(90.1 %, 20364 bytes)
1360c1360
< #define False (Bool)0
---
> #define False Bool0
1620c1620
< #define ISFLAG(s) (strcmp(aa->name, (s))==0)
---
> #define ISFLAGs (strcmp(aa->name, (s))==0)
(90.1 %, 20362 bytes)
1620c1620
< #define ISFLAG(s) (strcmp(aa->name, (s))==0)
---
> #define ISFLAGs (strcmp(aa->name, (s))==0)
1620c1620
< #define ISFLAG(s) (strcmp(aa->name, (s))==0)
---
> #define ISFLAG(s) strcmp(aa->name, (s))==0
1620c1620
< #define ISFLAG(s) (strcmp(aa->name, (s))==0)
---
> #define ISFLAG(s) (strcmpaa->name, (s)==0)
(90.1 %, 20360 bytes)
1620c1620
< #define ISFLAGs (strcmp(aa->name, (s))==0)
---
> #define ISFLAGs strcmp(aa->name, (s))==0
1620c1620
< #define ISFLAGs (strcmp(aa->name, (s))==0)
---
> #define ISFLAGs (strcmpaa->name, (s)==0)
1620c1620
< #define ISFLAGs (strcmp(aa->name, (s))==0)
---
> #define ISFLAGs (strcmp(aa->name, s)==0)
(90.1 %, 20358 bytes)
1620c1620
< #define ISFLAGs strcmp(aa->name, (s))==0
---
> #define ISFLAGs strcmpaa->name, (s)==0
1620c1620
< #define ISFLAGs strcmp(aa->name, (s))==0
---
> #define ISFLAGs strcmp(aa->name, s)==0
(90.1 %, 20356 bytes)
1620c1620
< #define ISFLAGs strcmpaa->name, (s)==0
---
> #define ISFLAGs strcmpaa->name, s==0
1622c1622
< IntNative main ( IntNative argc, Char *argv[] )
---
> IntNative main  IntNative argc, Char *argv[] 
(90.1 %, 20354 bytes)
1622c1622
< IntNative main ( IntNative argc, Char *argv[] )
---
> IntNative main  IntNative argc, Char *argv[] 
===< pass_clang :: local-to-global >===
1252a1253
> int BZ_APIBZ2_bzread_bzerr;
1255c1256
<    int bzerr, nread;
---
>    int nread;
1258c1259
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (BZ_APIBZ2_bzread_bzerr == BZ_OK || BZ_APIBZ2_bzread_bzerr == BZ_STREAM_END) ; else ;
1252a1253
> int BZ_APIBZ2_bzread_nread;
1255c1256
<    int bzerr, nread;
---
>    int bzerr;
1257c1258
<    nread = 0;
---
>    BZ_APIBZ2_bzread_nread = 0;
(90.0 %, 20392 bytes)
===< pass_clang :: replace-callexpr >===
===< pass_clang :: instantiate-template-param >===
===< pass_clang :: class-template-to-class >===
===< pass_clang :: remove-ctor-initializer >===
===< pass_clang :: remove-unused-outer-class >===
===< pass_clang :: remove-array >===
===< pass_clang :: remove-addr-taken >===
===< pass_clang :: simplify-recursive-template-instantiation >===
===< pass_special :: b >===
===< pass_ints :: b >===
===< pass_clex :: rm-toks-15 >===
9,14d8
< #define _BZLIB_H
< 
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
9,14d8
< #define _BZLIB_H
< 
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
9,14d8
< #define _BZLIB_H
< 
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
(90.1 %, 20280 bytes)
9,12c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> 3
9,13c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> ##define BZ_STREAM_END        4
9,13c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define define BZ_STREAM_END        4
9,13c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define BZ_OK                BZ_STREAM_END        4
10,13c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> 4
10,14c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
---
> ##define BZ_SEQUENCE_ERROR    -1
10,14c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
---
> #define define BZ_SEQUENCE_ERROR    -1
10,14c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
---
> #define BZ_RUN_OK            BZ_SEQUENCE_ERROR    -1
11,14c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
---
> -1
11,14c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
---
> #1
11,15c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
< #define BZ_PARAM_ERROR       -2
---
> #define #define BZ_PARAM_ERROR       -2
11,15c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
< #define BZ_PARAM_ERROR       -2
---
> #define BZ_FLUSH_OK          define BZ_PARAM_ERROR       -2
12,15c12
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
< #define BZ_PARAM_ERROR       -2
---
> BZ_PARAM_ERROR       -2
12,15c12
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
< #define BZ_PARAM_ERROR       -2
---
> #-2
12,15c12
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
< #define BZ_PARAM_ERROR       -2
---
> #define 2
12,16c12
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
< #define BZ_PARAM_ERROR       -2
< #define BZ_MEM_ERROR         -3
---
> #define BZ_FINISH_OK         #define BZ_MEM_ERROR         -3
13,16c13
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
< #define BZ_PARAM_ERROR       -2
< #define BZ_MEM_ERROR         -3
---
> define BZ_MEM_ERROR         -3
13,16c13
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
< #define BZ_PARAM_ERROR       -2
< #define BZ_MEM_ERROR         -3
---
> #BZ_MEM_ERROR         -3
13,16c13
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
< #define BZ_PARAM_ERROR       -2
< #define BZ_MEM_ERROR         -3
---
> #define -3
13,16c13
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
< #define BZ_PARAM_ERROR       -2
< #define BZ_MEM_ERROR         -3
---
> #define BZ_STREAM_END        3
14,16d13
< #define BZ_SEQUENCE_ERROR    -1
< #define BZ_PARAM_ERROR       -2
< #define BZ_MEM_ERROR         -3
(90.2 %, 20184 bytes)
13,16c13
< #define BZ_STREAM_END        3
< #define BZ_DATA_ERROR        -4
< #define BZ_DATA_ERROR_MAGIC  -5
< #define BZ_IO_ERROR          -6
---
> #define BZ_STREAM_END        6
14,16d13
< #define BZ_DATA_ERROR        -4
< #define BZ_DATA_ERROR_MAGIC  -5
< #define BZ_IO_ERROR          -6
(90.2 %, 20088 bytes)
13,16c13
< #define BZ_STREAM_END        6
< #define BZ_UNEXPECTED_EOF    -7
< #define BZ_OUTBUFF_FULL      -8
< #define BZ_CONFIG_ERROR      -9
---
> #define BZ_STREAM_END        9
14,17d13
< #define BZ_UNEXPECTED_EOF    -7
< #define BZ_OUTBUFF_FULL      -8
< #define BZ_CONFIG_ERROR      -9
< 
(90.2 %, 19992 bytes)
13,19c13
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
> #define BZ_STREAM_END        ;
15,20c15
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
> unsigned int total_in_hi32;
16,20c16
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>    int total_in_hi32;
16,20c16
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>    struct total_in_hi32;
17,20c17
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>       ;
17,22c17
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>       char char *next_out;
17,22c17
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>       char **next_out;
(90.3 %, 19882 bytes)
17,22c17
<       ;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       total_out_hi32;
19,22c19
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       ;
19,24c19
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       char void *state;
19,24c19
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       char **state;
(90.4 %, 19768 bytes)
19,23c19
<       ;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       int,int);
21,23c21
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       ,int);
21,23c21
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       void int);
21,23c21
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       void *);
22,23d21
< 
<       void *(*bzalloc)(void *,int,int);
23d22
<       void *(*bzalloc)(void *,int,int);
(90.4 %, 19727 bytes)
21,23c21
<       void *state;
<       void (*bzfree)(void *,void *);
<       void *opaque;
---
>       void *state*opaque;
22,23c22
<       void (*bzfree)(void *,void *);
<       void *opaque;
---
>       opaque;
22,23c22
<       void (*bzfree)(void *,void *);
<       void *opaque;
---
>       void ;
22,24c22
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
---
>       void (} 
22,25c22
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
---
>       void (*bz_stream;
22,25c22
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
---
>       void (*bzfree;
22,29c22
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)#include <stdio.h>
22,29c22
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(include <stdio.h>
22,29c22
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(void <stdio.h>
22,29c22
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(void *stdio.h>
22,29c22
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(void *,.h>
(90.4 %, 19683 bytes)
22,30c22
<       void ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>       void func) func
23,30c23
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    ) func
24,30c24
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    func
24,31c24
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
>    bz_stream#   define BZ_EXTERN extern
28,31c28
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> define BZ_EXTERN extern
28,31c28
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #BZ_EXTERN extern
28,31c28
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include extern
28,36c28
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
---
> #include <BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
28,36c28
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
---
> #include <stdioint BZ_APIBZ2_bzCompressInit ( 
28,36c28
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
---
> #include <stdio.BZ_APIBZ2_bzCompressInit ( 
28,36c28
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
---
> #include <stdio.h( 
30,37c30
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
> bz_stream* strm, 
30,37c30
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
> #   * strm, 
30,37c30
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
> #   define strm, 
30,37c30
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
> #   define BZ_API, 
30,38c30
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
---
> #   define BZ_API(int        blockSize100k, 
30,38c30
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
---
> #   define BZ_API(funcblockSize100k, 
30,38c30
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
---
> #   define BZ_API(func) , 
31,39c31
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
---
> int        verbosity, 
31,39c31
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
---
> #   verbosity, 
31,39c31
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
---
> #   define , 
31,40c31
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
---
> #   define BZ_EXTERN int        workFactor 
36,40c36
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
---
> workFactor 
36,41c36
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
---
> BZ_EXTERN );
36,41c36
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
---
> BZ_EXTERN int ;
36,43c36
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressInit BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
37,43c37
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
---
>       int BZ_APIBZ2_bzCompress ( 
37,43c37
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
---
>       bz_streamBZ_APIBZ2_bzCompress ( 
37,43c37
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
---
>       bz_stream* ( 
37,44c37
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
<       bz_stream* strm, 
---
>       bz_stream* strmbz_stream* strm, 
38,44c38
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
<       bz_stream* strm, 
---
>       * strm, 
(90.5 %, 19536 bytes)
36,42d35
< BZ_EXTERN int ;
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
38,43c38
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
---
> ( 
38,44c38
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
<       bz_stream* strm 
---
> BZ_EXTERN bz_stream* strm 
38,44c38
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
<       bz_stream* strm 
---
> BZ_EXTERN int * strm 
38,44c38
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
<       bz_stream* strm 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompress strm 
39,45c39
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
<       bz_stream* strm 
<    );
---
>       );
(90.5 %, 19432 bytes)
36,42c36
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit ( 
<       bz_stream *strm, 
<       int       verbosity, 
---
> BZ_EXTERN int int       verbosity, 
36,42c36
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit ( 
<       bz_stream *strm, 
<       int       verbosity, 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressEnd verbosity, 
37,42c37
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit ( 
<       bz_stream *strm, 
<       int       verbosity, 
---
>       , 
37,43c37
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
---
>       bz_streamint       small
37,43c37
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
---
>       bz_stream* small
40,45d39
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
(90.6 %, 19307 bytes)
37,44c37
<       bz_stream* small
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
---
>       bz_stream* ( 
38,45c38
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
<       bz_stream *strm 
---
>    bz_stream *strm 
38,45c38
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
<       bz_stream *strm 
---
>    )*strm 
40,45c40
< BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
<       bz_stream *strm 
---
> strm 
40,46c40
< BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
<       bz_stream *strm 
<    );
---
> BZ_EXTERN );
40,46c40
< BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
<       bz_stream *strm 
<    );
---
> BZ_EXTERN int ;
40,52c40
< BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompress #define BZ_MAX_UNUSED 5000
41,52c41
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
>       define BZ_MAX_UNUSED 5000
41,52c41
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
>       bz_streamBZ_MAX_UNUSED 5000
41,52c41
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
>       bz_stream* 5000
42,54c42
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
>    typedef void BZFILE;
42,54c42
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
>    )void BZFILE;
(90.6 %, 19181 bytes)
40,51c40
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
> BZ_EXTERN int *  bzerror,   
46,51c46
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
> bzerror,   
46,51c46
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
> #,   
46,52c46
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
---
> #define FILE* f, 
46,52c46
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
---
> #define BZ_MAX_UNUSED * f, 
48,52c48
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
---
> f, 
48,52c48
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
---
> typedef , 
48,53c48
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> typedef void int   verbosity, 
48,53c48
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> typedef void BZFILEverbosity, 
50,53c50
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> , 
50,54c50
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
> BZ_EXTERN int   small,
50,54c50
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
> BZ_EXTERN BZFILEsmall,
50,54c50
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
> BZ_EXTERN BZFILE* ,
50,55c50
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
> BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen void* unused,    
51,55c51
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       * unused,    
51,55c51
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       intunused,    
51,55c51
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       int*  ,    
51,56c51
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       int*  bzerrorint   nUnused 
52,56c52
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       nUnused 
52,57c52
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       FILE);
52,57c52
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       FILE* ;
52,59c52
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
>       FILE* fBZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
53,59c53
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
>       void BZ_APIBZ2_bzReadClose ( 
53,59c53
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
>       int   BZ_APIBZ2_bzReadClose ( 
53,59c53
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
>       int   verbosity( 
54,59d53
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
54,60c54
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
---
>       int   *    bzerror, 
54,60c54
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
---
>       int   smallbzerror, 
55,60c55
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
---
>       , 
55,61c55
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
<       BZFILE* b 
---
>       voidBZFILE* b 
55,61c55
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
<       BZFILE* b 
---
>       void* * b 
55,61c55
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
<       BZFILE* b 
---
>       void* unusedb 
56,62c56
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
---
>       );
56,62c56
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
---
>       int   ;
57,64c57
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>    BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
57,64c57
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>    )void BZ_APIBZ2_bzReadGetUnused ( 
59,64c59
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
> BZ_APIBZ2_bzReadGetUnused ( 
59,64c59
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
> BZ_EXTERN ( 
59,65c59
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
> BZ_EXTERN void int*    bzerror, 
59,65c59
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
> BZ_EXTERN void BZ_APIBZ2_bzReadClose *    bzerror, 
60,65c60
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>       bzerror, 
60,65c60
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>       int, 
60,66c60
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    BZFILE* b, 
60,66c60
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerror* b, 
61,66c61
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>       b, 
61,66c61
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>       BZFILE, 
61,67c61
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE* void**  unused,  
62,67c62
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>    **  unused,  
62,67c62
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>    )*  unused,  
64,67c64
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> unused,  
64,67c64
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN ,  
64,68c64
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
> BZ_EXTERN void int*    nUnused 
64,68c64
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused *    nUnused 
65,68c65
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       nUnused 
65,69c65
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       int);
65,69c65
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       int*    ;
65,71c65
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>       int*    bzerrorBZ_EXTERN int BZ_APIBZ2_bzRead ( 
66,71c66
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>       int BZ_APIBZ2_bzRead ( 
66,71c66
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>       BZFILEBZ_APIBZ2_bzRead ( 
66,71c66
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>       BZFILE* ( 
66,72c66
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>       BZFILE* bint*    bzerror, 
67,72c67
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>       *    bzerror, 
67,72c67
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>       voidbzerror, 
67,72c67
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>       void*, 
67,73c67
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>       void**  BZFILE* b, 
67,73c67
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>       void**  unused* b, 
68,73c68
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>       b, 
68,73c68
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int, 
68,74c68
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int*    void*   buf, 
69,74c69
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>    *   buf, 
69,74c69
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>    )buf, 
71,74c71
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> , 
71,75c71
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
> BZ_EXTERN int     len 
71,75c71
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
> BZ_EXTERN int len 
71,76c71
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
> BZ_EXTERN int BZ_APIBZ2_bzRead );
72,76c72
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       ;
72,78c72
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>       intBZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
72,78c72
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>       int*    BZFILE* BZ_APIBZ2_bzWriteOpen ( 
72,78c72
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>       int*    bzerror* BZ_APIBZ2_bzWriteOpen ( 
73,78c73
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>       BZ_APIBZ2_bzWriteOpen ( 
73,78c73
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>       BZFILE( 
73,79c73
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>       BZFILE* int*  bzerror,      
73,79c73
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>       BZFILE* b*  bzerror,      
74,79c74
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>       bzerror,      
74,79c74
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>       void,      
74,80c74
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
---
>       void*   FILE* f, 
74,80c74
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
---
>       void*   buf* f, 
75,80c75
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
---
>       f, 
75,80c75
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
---
>       int     , 
76,81c76
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
>    int   blockSize100k, 
76,81c76
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
>    )blockSize100k, 
78,81c78
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> , 
78,82c78
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
> BZ_EXTERN int   verbosity, 
78,82c78
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILEverbosity, 
78,82c78
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* , 
78,83c78
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
> BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen int   workFactor 
79,83c79
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       workFactor 
79,84c79
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       int);
79,84c79
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       int*  ;
79,86c79
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>       int*  bzerrorBZ_EXTERN void BZ_APIBZ2_bzWrite ( 
80,86c80
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>       void BZ_APIBZ2_bzWrite ( 
80,86c80
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>       FILEBZ_APIBZ2_bzWrite ( 
80,86c80
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>       FILE* ( 
80,87c80
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>       FILE* fint*    bzerror, 
81,87c81
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>       *    bzerror, 
81,87c81
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>       int   bzerror, 
82,87d81
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
82,87d81
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
82,88c82
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int   * b, 
82,88c82
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int   verbosityb, 
83,88c83
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>       , 
83,89c83
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int   void*   buf, 
84,89c84
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>    *   buf, 
84,89c84
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>    )buf, 
86,89c86
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> , 
86,90c86
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
> BZ_EXTERN int     len 
86,90c86
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
> BZ_EXTERN void len 
86,91c86
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite );
87,91c87
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       ;
87,93c87
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>       intBZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
87,93c87
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>       int*    void BZ_APIBZ2_bzWriteClose ( 
87,93c87
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>       int*    bzerrorBZ_APIBZ2_bzWriteClose ( 
88,93c88
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>       ( 
88,94c88
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>       BZFILEint*          bzerror, 
88,94c88
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>       BZFILE* *          bzerror, 
88,94c88
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>       BZFILE* bbzerror, 
89,94c89
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>       , 
89,95c89
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       voidBZFILE*       b, 
89,95c89
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       void*   *       b, 
89,95c89
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       void*   bufb, 
90,95c90
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       , 
90,96c90
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       int     int           abandon, 
91,96c91
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>    abandon, 
91,96c91
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>    ), 
93,97c93
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
> unsigned int* nbytes_in, 
93,97c93
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
> BZ_EXTERN int* nbytes_in, 
93,97c93
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
> BZ_EXTERN void * nbytes_in, 
93,97c93
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose nbytes_in, 
94,97c94
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       , 
94,98c94
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       intunsigned int* nbytes_out 
94,98c94
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int*          int* nbytes_out 
94,98c94
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int*          bzerror* nbytes_out 
95,98c95
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       nbytes_out 
95,99c95
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       BZFILE);
95,99c95
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       BZFILE*       ;
95,101c95
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>       BZFILE*       bBZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
96,101c96
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>       void BZ_APIBZ2_bzWriteClose64 ( 
96,101c96
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>       int           BZ_APIBZ2_bzWriteClose64 ( 
96,101c96
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>       int           abandon( 
97,101d96
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
97,102c97
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>       unsigned *          bzerror, 
97,102c97
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>       unsigned intbzerror, 
97,102c97
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>       unsigned int* , 
97,103c97
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       unsigned int* nbytes_inBZFILE*       b, 
98,103c98
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       *       b, 
98,103c98
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       unsigned b, 
98,103c98
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       unsigned int, 
98,104c98
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       unsigned int* int           abandon, 
99,104c99
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>    abandon, 
99,104c99
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>    ), 
101,105c101
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
> unsigned int* nbytes_in_lo32, 
101,105c101
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
> BZ_EXTERN int* nbytes_in_lo32, 
101,105c101
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
> BZ_EXTERN void * nbytes_in_lo32, 
101,105c101
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 nbytes_in_lo32, 
102,105c102
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       , 
102,106c102
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       intunsigned int* nbytes_in_hi32, 
102,106c102
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int*          int* nbytes_in_hi32, 
102,106c102
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int*          bzerror* nbytes_in_hi32, 
103,106c103
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       nbytes_in_hi32, 
103,106c103
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       BZFILE, 
103,107c103
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       BZFILE*       unsigned int* nbytes_out_lo32, 
103,107c103
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       BZFILE*       bint* nbytes_out_lo32, 
104,107c104
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       * nbytes_out_lo32, 
104,107c104
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       int           nbytes_out_lo32, 
105,107d104
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
105,107d104
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
105,107d104
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
105,107d104
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
105,107d104
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
105,109c105
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned int* nbytes_in_lo32);
106,109c106
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       ;
106,114c106
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>       unsigned BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
106,114c106
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>       unsigned intint BZ_APIBZ2_bzBuffToBuffCompress ( 
106,114c106
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>       unsigned int* BZ_APIBZ2_bzBuffToBuffCompress ( 
106,114c106
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>       unsigned int* nbytes_in_hi32( 
107,114d106
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
107,115c107
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>       unsigned *         dest, 
107,115c107
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>       unsigned intdest, 
107,115c107
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>       unsigned int* , 
107,116c107
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>       unsigned int* nbytes_out_lo32unsigned int* destLen,
108,116c108
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>       int* destLen,
108,116c108
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>       unsigned * destLen,
108,116c108
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>       unsigned intdestLen,
108,116c108
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>       unsigned int* ,
109,117c109
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>    char*         source, 
109,117c109
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>    )*         source, 
114,117c114
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> source, 
114,117c114
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN , 
114,118c114
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
> BZ_EXTERN int unsigned int  sourceLen,
114,118c114
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress int  sourceLen,
115,118c115
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       sourceLen,
115,118c115
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char,
115,119c115
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       char*         int           blockSize100k, 
115,119c115
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       char*         destblockSize100k, 
116,119c116
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       , 
116,120c116
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned int           verbosity, 
116,120c116
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned intverbosity, 
116,120c116
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned int* , 
116,121c116
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       unsigned int* destLenint           workFactor 
117,121c117
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       workFactor 
117,122c117
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       char);
117,122c117
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       char*         ;
117,124c117
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>       char*         sourceBZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
118,124c118
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>       int BZ_APIBZ2_bzBuffToBuffDecompress ( 
118,124c118
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>       unsigned BZ_APIBZ2_bzBuffToBuffDecompress ( 
118,124c118
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>       unsigned int  ( 
118,125c118
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>       unsigned int  sourceLenchar*         dest, 
119,125c119
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>       *         dest, 
119,125c119
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>       int           dest, 
120,125d119
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
120,125d119
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
120,126c120
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>       int           int* destLen,
120,126c120
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>       int           verbosity* destLen,
121,126c121
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>       destLen,
121,126c121
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>       int           ,
122,127c122
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>    char*         source, 
122,127c122
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>    )*         source, 
124,127c124
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> source, 
124,127c124
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN , 
124,128c124
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
> BZ_EXTERN int unsigned int  sourceLen,
124,128c124
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress int  sourceLen,
125,128c125
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       sourceLen,
125,128c125
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char,
125,129c125
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       char*         int           small, 
125,129c125
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       char*         destsmall, 
126,129c126
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       , 
126,130c126
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
---
>       unsigned int           verbosity 
126,130c126
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
---
>       unsigned intverbosity 
126,131c126
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
---
>       unsigned int* );
126,131c126
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
---
>       unsigned int* destLen;
127,136c127
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
---
>       BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
127,136c127
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
---
>       charconst char * BZ_APIBZ2_bzlibVersion (
127,136c127
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
---
>       char*         char * BZ_APIBZ2_bzlibVersion (
127,136c127
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
---
>       char*         source* BZ_APIBZ2_bzlibVersion (
128,136c128
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
---
>       BZ_APIBZ2_bzlibVersion (
128,136c128
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
---
>       unsigned (
128,137c128
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
<       void
---
>       unsigned int  void
128,138c128
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
<       void
<    );
---
>       unsigned int  sourceLen);
129,138c129
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
<       void
<    );
---
>       ;
129,140c129
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
---
>       int           BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
129,140c129
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
---
>       int           smallBZFILE * BZ_APIBZ2_bzopen (
130,140c130
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
---
>       * BZ_APIBZ2_bzopen (
130,140c130
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
---
>       int           BZ_APIBZ2_bzopen (
131,140c131
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
---
>    (
131,141c131
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
<       const char *path,
---
>    )const char *path,
136,141c136
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
<       const char *path,
---
> char *path,
136,141c136
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
<       const char *path,
---
> BZ_EXTERN *path,
136,141c136
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
<       const char *path,
---
> BZ_EXTERN const path,
136,141c136
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
<       const char *path,
---
> BZ_EXTERN const char ,
136,142c136
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN const char * const char *mode
136,142c136
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion char *mode
137,142c137
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
<       const char *path,
<       const char *mode
---
>       *mode
138,142c138
<    );
< 
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
<       const char *path,
<       const char *mode
---
>    mode
138,143c138
<    );
< 
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
<       const char *path,
<       const char *mode
<    );
---
>    ));
140,143c140
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
<       const char *path,
<       const char *mode
<    );
---
> ;
140,145c140
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzdopen (
---
> BZ_EXTERN BZ_EXTERN BZFILE * BZ_APIBZ2_bzdopen (
140,145c140
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzdopen (
---
> BZ_EXTERN BZFILE BZFILE * BZ_APIBZ2_bzdopen (
(90.7 %, 19092 bytes)
140,146d139
< ;
< 
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzdopen (
<       int        fd,
<       const char *mode
<    );
<          
142,147c142
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzdopen (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_APIBZ2_bzread (
---
> int BZ_APIBZ2_bzread (
(90.7 %, 18990 bytes)
140,144c140
< BZ_EXTERN int BZ_APIBZ2_bzread (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
---
> ;
140,146c140
< BZ_EXTERN int BZ_APIBZ2_bzread (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
---
> BZ_EXTERN BZ_EXTERN int BZ_APIBZ2_bzwrite (
140,146c140
< BZ_EXTERN int BZ_APIBZ2_bzread (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
---
> BZ_EXTERN int int BZ_APIBZ2_bzwrite (
140,146c140
< BZ_EXTERN int BZ_APIBZ2_bzread (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
---
> BZ_EXTERN int BZ_APIBZ2_bzread BZ_APIBZ2_bzwrite (
141,146c141
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
---
>       (
141,147c141
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
<       BZFILE* b, 
---
>       BZFILEBZFILE* b, 
141,147c141
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
<       BZFILE* b, 
---
>       BZFILE* * b, 
(90.8 %, 18902 bytes)
140,146c140
< ;
< 
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
> );
142,146c142
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
> ;
142,148c142
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzflush (
---
> BZ_EXTERN BZ_EXTERN int BZ_APIBZ2_bzflush (
142,148c142
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzflush (
---
> BZ_EXTERN int int BZ_APIBZ2_bzflush (
142,148c142
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzflush (
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite BZ_APIBZ2_bzflush (
143,148c143
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzflush (
---
>       (
143,149c143
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzflush (
<       BZFILE* b
---
>       BZFILEBZFILE* b
143,149c143
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzflush (
<       BZFILE* b
---
>       BZFILE* * b
(90.8 %, 18807 bytes)
142,149c142
< ;
< 
< BZ_EXTERN int BZ_APIBZ2_bzflush (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzclose (
<       BZFILE* b
---
> * b
144,149c144
< BZ_EXTERN int BZ_APIBZ2_bzflush (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzclose (
<       BZFILE* b
---
> b
144,150c144
< BZ_EXTERN int BZ_APIBZ2_bzflush (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzclose (
<       BZFILE* b
<    );
---
> BZ_EXTERN );
144,150c144
< BZ_EXTERN int BZ_APIBZ2_bzflush (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzclose (
<       BZFILE* b
<    );
---
> BZ_EXTERN int ;
144,152c144
< BZ_EXTERN int BZ_APIBZ2_bzflush (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzclose (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
> BZ_EXTERN int BZ_APIBZ2_bzflush BZ_EXTERN const char * BZ_APIBZ2_bzerror (
145,152c145
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzclose (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
>       const char * BZ_APIBZ2_bzerror (
145,152c145
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzclose (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
>       BZFILEchar * BZ_APIBZ2_bzerror (
145,152c145
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzclose (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
>       BZFILE* * BZ_APIBZ2_bzerror (
146,152c146
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzclose (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
>    BZ_APIBZ2_bzerror (
146,152c146
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzclose (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
>    )(
(90.9 %, 18709 bytes)
146,150d145
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
146,158d145
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
(90.9 %, 18620 bytes)
144,163c144
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> BZ_EXTERN int typedef char            Char;
154,163c154
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> char            Char;
154,163c154
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> #Char;
154,163c154
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> #define ;
156,163d155
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
156,164c156
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #unsigned char   Bool;
156,164c156
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #include char   Bool;
156,164c156
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #include <Bool;
156,164c156
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #include <stdlib;
156,165c156
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> #include <stdlib.typedef unsigned char   UChar;
156,165c156
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> #include <stdlib.hunsigned char   UChar;
161,165c161
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> char   UChar;
161,165c161
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> #UChar;
161,165c161
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> #define ;
161,166c161
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> #define BZ_VERSION  typedef int             Int32;
163,166c163
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> int             Int32;
163,166c163
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef Int32;
163,166c163
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef char            ;
163,167c163
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef char            Chartypedef unsigned int    UInt32;
164,167c164
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> unsigned int    UInt32;
164,167c164
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef int    UInt32;
164,167c164
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned UInt32;
164,167c164
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned char   ;
164,168c164
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef unsigned char   Booltypedef short           Int16;
165,168c165
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> short           Int16;
165,168c165
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef Int16;
165,168c165
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef unsigned ;
165,169c165
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef unsigned char   typedef unsigned short  UInt16;
165,169c165
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef unsigned char   UCharunsigned short  UInt16;
166,169c166
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> short  UInt16;
166,169c166
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef UInt16;
166,169c166
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef int             ;
166,171c166
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  Bool1
---
> typedef int             Int32#define True  Bool1
167,171c167
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  Bool1
---
> define True  Bool1
167,171c167
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  Bool1
---
> typedef True  Bool1
167,171c167
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  Bool1
---
> typedef unsigned Bool1
167,172c167
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  Bool1
< #define False Bool0
---
> typedef unsigned int    #define False Bool0
167,172c167
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  Bool1
< #define False Bool0
---
> typedef unsigned int    UInt32define False Bool0
168,172c168
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  Bool1
< #define False Bool0
---
> False Bool0
168,172c168
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  Bool1
< #define False Bool0
---
> typedef Bool0
168,174c168
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  Bool1
< #define False Bool0
< 
< #define __inline__  
---
> typedef short           #define __inline__  
168,174c168
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  Bool1
< #define False Bool0
< 
< #define __inline__  
---
> typedef short           Int16define __inline__  
169,174c169
< typedef unsigned short  UInt16;
< 
< #define True  Bool1
< #define False Bool0
< 
< #define __inline__  
---
> __inline__  
169,176c169
< typedef unsigned short  UInt16;
< 
< #define True  Bool1
< #define False Bool0
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> typedef extern void BZ2_bz__AssertH__fail ( int errcode );
169,176c169
< typedef unsigned short  UInt16;
< 
< #define True  Bool1
< #define False Bool0
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> typedef unsigned void BZ2_bz__AssertH__fail ( int errcode );
169,176c169
< typedef unsigned short  UInt16;
< 
< #define True  Bool1
< #define False Bool0
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> typedef unsigned short  BZ2_bz__AssertH__fail ( int errcode );
169,176c169
< typedef unsigned short  UInt16;
< 
< #define True  Bool1
< #define False Bool0
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> typedef unsigned short  UInt16( int errcode );
171,176c171
< #define True  Bool1
< #define False Bool0
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> int errcode );
171,176c171
< #define True  Bool1
< #define False Bool0
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> #errcode );
171,176c171
< #define True  Bool1
< #define False Bool0
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> #define );
171,176c171
< #define True  Bool1
< #define False Bool0
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> #define True  ;
(91.0 %, 18520 bytes)
169,172c169
< typedef unsigned short  UInt16( int errcode );
< #define AssertHcond,errcode \
<    
< #define AssertDcond,msg \
---
> typedef unsigned short  UInt16msg \
169,172c169
< typedef unsigned short  UInt16( int errcode );
< #define AssertHcond,errcode \
<    
< #define AssertDcond,msg \
---
> typedef unsigned short  UInt16( \
169,174c169
< typedef unsigned short  UInt16( int errcode );
< #define AssertHcond,errcode \
<    
< #define AssertDcond,msg \
<    
< #define VPrintf0zf \
---
> typedef unsigned short  UInt16( int #define VPrintf0zf \
169,174c169
< typedef unsigned short  UInt16( int errcode );
< #define AssertHcond,errcode \
<    
< #define AssertDcond,msg \
<    
< #define VPrintf0zf \
---
> typedef unsigned short  UInt16( int errcode define VPrintf0zf \
169,174c169
< typedef unsigned short  UInt16( int errcode );
< #define AssertHcond,errcode \
<    
< #define AssertDcond,msg \
<    
< #define VPrintf0zf \
---
> typedef unsigned short  UInt16( int errcode )VPrintf0zf \
170,174c170
< #define AssertHcond,errcode \
<    
< #define AssertDcond,msg \
<    
< #define VPrintf0zf \
---
> \
170,175c170
< #define AssertHcond,errcode \
<    
< #define AssertDcond,msg \
<    
< #define VPrintf0zf \
<    fprintfstderr,zf
---
> #fprintfstderr,zf
170,175c170
< #define AssertHcond,errcode \
<    
< #define AssertDcond,msg \
<    
< #define VPrintf0zf \
<    fprintfstderr,zf
---
> #define ,zf
170,175c170
< #define AssertHcond,errcode \
<    
< #define AssertDcond,msg \
<    
< #define VPrintf0zf \
<    fprintfstderr,zf
---
> #define AssertHcondzf
170,176c170
< #define AssertHcond,errcode \
<    
< #define AssertDcond,msg \
<    
< #define VPrintf0zf \
<    fprintfstderr,zf
< #define VPrintf1zf,za1 \
---
> #define AssertHcond,#define VPrintf1zf,za1 \
(91.0 %, 18437 bytes)
171,173c171
< #define VPrintf1zf,za1 \
<    fprintfstderr,zf,za1
< #define VPrintf2zf,za1,za2 \
---
> za1,za2 \
171,173c171
< #define VPrintf1zf,za1 \
<    fprintfstderr,zf,za1
< #define VPrintf2zf,za1,za2 \
---
> #,za2 \
171,173c171
< #define VPrintf1zf,za1 \
<    fprintfstderr,zf,za1
< #define VPrintf2zf,za1,za2 \
---
> #define za2 \
171,173c171
< #define VPrintf1zf,za1 \
<    fprintfstderr,zf,za1
< #define VPrintf2zf,za1,za2 \
---
> #define VPrintf1zf\
171,174c171
< #define VPrintf1zf,za1 \
<    fprintfstderr,zf,za1
< #define VPrintf2zf,za1,za2 \
<    fprintfstderr,zf,za1,za2
---
> #define VPrintf1zf,fprintfstderr,zf,za1,za2
(91.0 %, 18373 bytes)
171,173c171
< #define za2 \
<    fprintfstderr,zf,za1,za2
< #define VPrintf3zf,za1,za2,za3 \
---
> #define za2,za3 \
171,173c171
< #define za2 \
<    fprintfstderr,zf,za1,za2
< #define VPrintf3zf,za1,za2,za3 \
---
> #define za2 ,za3 \
(91.1 %, 18316 bytes)
171,172d170
< #define za2,za3 \
<    fprintfstderr,zf,za1,za2,za3
171,173c171
< #define za2,za3 \
<    fprintfstderr,zf,za1,za2,za3
< #define VPrintf4zf,za1,za2,za3,za4 \
---
> #define za2,za1,za2,za3,za4 \
171,173c171
< #define za2,za3 \
<    fprintfstderr,zf,za1,za2,za3
< #define VPrintf4zf,za1,za2,za3,za4 \
---
> #define za2,za1,za2,za3,za4 \
(91.1 %, 18266 bytes)
171,172c171
< #define VPrintf4zf,za1,za2,za3,za4 \
<    fprintfstderr,zf,za1,za2,za3,za4
---
> #define ,za2,za3,za4
171,172c171
< #define VPrintf4zf,za1,za2,za3,za4 \
<    fprintfstderr,zf,za1,za2,za3,za4
---
> #define VPrintf4zfza2,za3,za4
171,172c171
< #define VPrintf4zf,za1,za2,za3,za4 \
<    fprintfstderr,zf,za1,za2,za3,za4
---
> #define VPrintf4zf,,za3,za4
(91.1 %, 18223 bytes)
171,172c171
< #define VPrintf4zfza2,za3,za4
< #define VPrintf5zf,za1,za2,za3,za4,za5 \
---
> #define VPrintf4zfza2,za5 \
171,172c171
< #define VPrintf4zfza2,za3,za4
< #define VPrintf5zf,za1,za2,za3,za4,za5 \
---
> #define VPrintf4zfza2,za5 \
171,172c171
< #define VPrintf4zfza2,za3,za4
< #define VPrintf5zf,za1,za2,za3,za4,za5 \
---
> #define VPrintf4zfza2,za3\
(91.1 %, 18180 bytes)
171,172c171
< #define VPrintf4zfza2,za5 \
<    fprintfstderr,zf,za1,za2,za3,za4,za5
---
> #define VPrintf4zfza2za5
171,175c171
< #define VPrintf4zfza2,za5 \
<    fprintfstderr,zf,za1,za2,za3,za4,za5
< 
< 
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
---
> #define VPrintf4zfza2,#define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
171,175c171
< #define VPrintf4zfza2,za5 \
<    fprintfstderr,zf,za1,za2,za3,za4,za5
< 
< 
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
---
> #define VPrintf4zfza2,za5 define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
(91.1 %, 18137 bytes)
174,175c174
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
< #define BZFREEppp  strm->bzfreestrm->opaque,ppp
---
> strm->bzfreestrm->opaque,ppp
174,175c174
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
< #define BZFREEppp  strm->bzfreestrm->opaque,ppp
---
> #->bzfreestrm->opaque,ppp
174,175c174
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
< #define BZFREEppp  strm->bzfreestrm->opaque,ppp
---
> #define bzfreestrm->opaque,ppp
174,175c174
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
< #define BZFREEppp  strm->bzfreestrm->opaque,ppp
---
> #define BZALLOCnnn ->opaque,ppp
174,175c174
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
< #define BZFREEppp  strm->bzfreestrm->opaque,ppp
---
> #define BZALLOCnnn strmopaque,ppp
(91.2 %, 18069 bytes)
174,180d173
< #define bzfreestrm->opaque,ppp
< 
< 
< 
< 
< #define BZ_HDR_B 0x42   
< #define BZ_HDR_Z 0x5a   
174,181c174
< #define bzfreestrm->opaque,ppp
< 
< 
< 
< 
< #define BZ_HDR_B 0x42   
< #define BZ_HDR_Z 0x5a   
< #define BZ_HDR_h 0x68   
---
> #define bzfreestrm0x68   
(91.2 %, 17984 bytes)
174,182c174
< #define BZ_HDR_h 0x68   
< #define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
---
> #define define BZ_RUNA 0
174,182c174
< #define BZ_HDR_h 0x68   
< #define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
---
> #define BZ_HDR_h BZ_RUNA 0
175,182c175
< #define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
---
> 0
175,183c175
< #define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
---
> ##define BZ_RUNB 1
175,183c175
< #define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
---
> #define define BZ_RUNB 1
175,183c175
< #define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
---
> #define BZ_HDR_0 BZ_RUNB 1
179,183c179
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
---
> 1
179,185c179
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> ##define BZ_N_GROUPS 6
179,185c179
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> #define define BZ_N_GROUPS 6
179,185c179
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> #define BZ_MAX_ALPHA_SIZE BZ_N_GROUPS 6
180,185c180
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> 6
180,186c180
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> ##define BZ_G_SIZE   50
180,186c180
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define define BZ_G_SIZE   50
180,186c180
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define BZ_MAX_CODE_LEN    BZ_G_SIZE   50
182,186c182
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> 50
182,187c182
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> ##define BZ_N_ITERS  4
182,187c182
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define define BZ_N_ITERS  4
182,187c182
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define BZ_RUNA BZ_N_ITERS  4
183,187c183
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> 4
183,189c183
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
---
> ##define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
183,189c183
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
---
> #define define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
183,189c183
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
---
> #define BZ_RUNB BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
185,189c185
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
---
> 2 + 900000 / BZ_G_SIZE
185,189c185
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
---
> #+ 900000 / BZ_G_SIZE
185,189c185
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
---
> #define 900000 / BZ_G_SIZE
185,189c185
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
---
> #define BZ_N_GROUPS / BZ_G_SIZE
186,189c186
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
---
> BZ_G_SIZE
186,197c186
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> ##define BZ_RAND_DECLS                          \
186,197c186
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #define define BZ_RAND_DECLS                          \
186,197c186
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #define BZ_G_SIZE   BZ_RAND_DECLS                          \
187,197c187
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> \
187,198c187
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #Int32 rNToGo;                               \
187,198c187
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define rNToGo;                               \
187,198c187
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_N_ITERS  ;                               \
189,198c189
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> \
189,199c189
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #Int32 rTPos                                 \
189,199c189
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #define rTPos                                 \
189,199c189
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #define BZ_MAX_SELECTORS \
189,201c189
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
---
> #define BZ_MAX_SELECTORS 2 #define BZ_RAND_INIT_MASK                      \
189,201c189
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
---
> #define BZ_MAX_SELECTORS 2 + define BZ_RAND_INIT_MASK                      \
189,201c189
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
---
> #define BZ_MAX_SELECTORS 2 + 900000 BZ_RAND_INIT_MASK                      \
189,201c189
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
---
> #define BZ_MAX_SELECTORS 2 + 900000 / \
197,202c197
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> s->rNToGo = 0;                              \
197,202c197
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> #->rNToGo = 0;                              \
197,202c197
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> #define rNToGo = 0;                              \
197,202c197
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> #define BZ_RAND_DECLS                          = 0;                              \
198,202c198
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
>    0;                              \
198,202c198
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
>    Int32 ;                              \
198,202c198
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
>    Int32 rNToGo\
198,203c198
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
>    Int32 rNToGo;                               s->rTPos  = 0                               \
199,203c199
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
>    ->rTPos  = 0                               \
199,203c199
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
>    Int32 rTPos  = 0                               \
199,203c199
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
>    Int32 rTPos                                 = 0                               \
201,203c201
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
> 0                               \
201,203c201
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
> #\
201,205c201
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
< 
< #define BZ_RAND_MASK 1
---
> #define #define BZ_RAND_MASK 1
201,205c201
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
< 
< #define BZ_RAND_MASK 1
---
> #define BZ_RAND_INIT_MASK                      define BZ_RAND_MASK 1
(91.3 %, 17840 bytes)
202,206d201
< 
< #define BZ_RAND_MASK 1
< 
< #define BZ_RAND_UPD_MASK                       \
<    if s->rNToGo == 0                                            \
203,207c203
< #define BZ_RAND_MASK 1
< 
< #define BZ_RAND_UPD_MASK                       \
<    if s->rNToGo == 0                                            \
<    s->rNToGo--;
---
> s->rNToGo--;
203,207c203
< #define BZ_RAND_MASK 1
< 
< #define BZ_RAND_UPD_MASK                       \
<    if s->rNToGo == 0                                            \
<    s->rNToGo--;
---
> #->rNToGo--;
203,207c203
< #define BZ_RAND_MASK 1
< 
< #define BZ_RAND_UPD_MASK                       \
<    if s->rNToGo == 0                                            \
<    s->rNToGo--;
---
> #define rNToGo--;
203,207c203
< #define BZ_RAND_MASK 1
< 
< #define BZ_RAND_UPD_MASK                       \
<    if s->rNToGo == 0                                            \
<    s->rNToGo--;
---
> #define BZ_RAND_MASK --;
205,207c205
< #define BZ_RAND_UPD_MASK                       \
<    if s->rNToGo == 0                                            \
<    s->rNToGo--;
---
> ;
205,215c205
< #define BZ_RAND_UPD_MASK                       \
<    if s->rNToGo == 0                                            \
<    s->rNToGo--;
< 
< 
< 
< 
< 
< 
< 
< #define BZ_INITIALISE_CRCcrcVar              \
---
> ##define BZ_INITIALISE_CRCcrcVar              \
(91.4 %, 17710 bytes)
203,217c203
< #define BZ_RAND_MASK --;
< 
< 
< 
< 
< 
< 
< 
< #define BZ_INITIALISE_CRCcrcVar              \
< 
< 
< #define BZ_FINALISE_CRCcrcVar                \
< 
< 
< #define BZ_UPDATE_CRCcrcVar,cha              \
---
> #define BZ_RAND_MASK \
203,224c203
< #define BZ_RAND_MASK --;
< 
< 
< 
< 
< 
< 
< 
< #define BZ_INITIALISE_CRCcrcVar              \
< 
< 
< #define BZ_FINALISE_CRCcrcVar                \
< 
< 
< #define BZ_UPDATE_CRCcrcVar,cha              \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
---
> #define BZ_RAND_MASK --#define BZ_M_IDLE      1
(91.4 %, 17556 bytes)
203,213c203
< #define BZ_RAND_MASK \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
---
> #define BZ_RAND_MASK BZ_M_FINISHING 4
210,213c210
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
---
> 4
210,215c210
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
---
> ##define BZ_S_OUTPUT    1
210,215c210
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
---
> #define define BZ_S_OUTPUT    1
(91.5 %, 17465 bytes)
203,209c203
< #define BZ_RAND_MASK BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> #define BZ_RAND_MASK define BZ_N_QSORT 12
203,209c203
< #define BZ_RAND_MASK BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> #define BZ_RAND_MASK BZ_M_FINISHING BZ_N_QSORT 12
(91.5 %, 17374 bytes)
203,205c203
< #define BZ_RAND_MASK define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define BZ_RAND_MASK + 2
203,205c203
< #define BZ_RAND_MASK define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define BZ_RAND_MASK define 2
203,212c203
< #define BZ_RAND_MASK define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
< 
< 
< 
< 
< 
< 
< typedef
---
> #define BZ_RAND_MASK define BZ_N_QSORT typedef
(91.6 %, 17271 bytes)
203,221c203
< #define BZ_RAND_MASK + 2
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
---
> #define BZ_RAND_MASK UInt32   avail_in_expect;
203,221c203
< #define BZ_RAND_MASK + 2
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
---
> #define BZ_RAND_MASK + avail_in_expect;
210,221c210
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
---
> ;
211,224c211
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
---
>    UInt32*  arr1;
211,224c211
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
---
>    struct *  arr1;
213,224c213
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
---
>       arr1;
213,224c213
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
---
>       bz_stream;
213,225c213
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       bz_stream* UInt32*  arr2;
213,225c213
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       bz_stream* strm*  arr2;
217,225c217
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       arr2;
217,225c217
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       Int32    ;
(91.6 %, 17138 bytes)
214,219d213
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
214,219d213
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
214,220c214
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
---
>       UInt32*   block;
(91.7 %, 17044 bytes)
214,219d213
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
214,221d213
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
214,222c214
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
---
>       UCharstate_in_ch;
(91.7 %, 16944 bytes)
213,223c213
<       bz_stream;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
---
>       bz_streamInt32    numZ;
216,223c216
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
---
>       numZ;
216,223c216
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
---
>       UInt32   ;
216,224c216
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
---
>       UInt32   state_in_chInt32    state_out_pos;
217,224c217
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
---
>       state_out_pos;
217,224c217
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
---
>       Int32    ;
(91.8 %, 16805 bytes)
216,222c216
<       UInt32   ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
---
>       UInt32   [256];
217,222c217
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
---
>       256];
217,222c217
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
---
>       Int32    ];
220,224d219
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
220,224d219
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
(91.8 %, 16715 bytes)
218,228d217
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
220,228d219
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
(91.9 %, 16566 bytes)
218,223d217
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
218,223d217
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
218,224c218
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       Int32    selector   [BZ_MAX_SELECTORS];
(92.0 %, 16436 bytes)
217,221c217
<       Int32    state_out_pos;
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    state_out_pos[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
218,221c218
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
218,221c218
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    ][BZ_MAX_ALPHA_SIZE];
218,221c218
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    selector   [BZ_MAX_ALPHA_SIZE];
(92.0 %, 16318 bytes)
217,218c217
<       Int32    state_out_pos[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    state_out_pos;
217,219c217
<       Int32    state_out_pos[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    state_out_pos[Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
217,219c217
<       Int32    state_out_pos[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    state_out_pos[BZ_N_GROUPSrfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
217,219c217
<       Int32    state_out_pos[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    state_out_pos[BZ_N_GROUPS][BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(92.1 %, 16229 bytes)
217,220c217
<       Int32    state_out_pos;
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>       Int32    state_out_pos[4];
218,220c218
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>       4];
218,220c218
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>       Int32    ];
218,220c218
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>       Int32    rfreq   ;
(92.1 %, 16121 bytes)
217,241c217
<       Int32    state_out_pos[4];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
---
>       Int32    state_out_posBZ_X_OUTPUT      2
217,241c217
<       Int32    state_out_pos[4];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
---
>       Int32    state_out_pos[2
217,243c217
<       Int32    state_out_pos[4];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
---
>       Int32    state_out_pos[4#define BZ_X_MAGIC_1     10
217,243c217
<       Int32    state_out_pos[4];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
---
>       Int32    state_out_pos[4]define BZ_X_MAGIC_1     10
219,243c219
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
---
>    BZ_X_MAGIC_1     10
220,243c220
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
---
>    10
220,244c220
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
---
>    EState#define BZ_X_MAGIC_2     11
228,244c228
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
---
> define BZ_X_MAGIC_2     11
230,244c230
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
---
> BZ_X_MAGIC_2     11
240,244c240
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
---
> 11
240,245c240
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
---
> ##define BZ_X_MAGIC_3     12
240,245c240
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
---
> #define define BZ_X_MAGIC_3     12
240,245c240
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
---
> #define BZ_X_IDLE        BZ_X_MAGIC_3     12
(92.2 %, 16017 bytes)
240,244c240
< #define define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
< #define BZ_X_BLKHDR_2    15
< #define BZ_X_BLKHDR_3    16
---
> #define #define BZ_X_BLKHDR_3    16
240,244c240
< #define define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
< #define BZ_X_BLKHDR_2    15
< #define BZ_X_BLKHDR_3    16
---
> #define define define BZ_X_BLKHDR_3    16
240,244c240
< #define define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
< #define BZ_X_BLKHDR_2    15
< #define BZ_X_BLKHDR_3    16
---
> #define define BZ_X_MAGIC_3     BZ_X_BLKHDR_3    16
(92.2 %, 15912 bytes)
240,244c240
< #define define define BZ_X_BLKHDR_3    16
< #define BZ_X_BLKHDR_4    17
< #define BZ_X_BLKHDR_5    18
< #define BZ_X_BLKHDR_6    19
< #define BZ_X_BCRC_1      20
---
> #define define #define BZ_X_BCRC_1      20
240,244c240
< #define define define BZ_X_BLKHDR_3    16
< #define BZ_X_BLKHDR_4    17
< #define BZ_X_BLKHDR_5    18
< #define BZ_X_BLKHDR_6    19
< #define BZ_X_BCRC_1      20
---
> #define define define define BZ_X_BCRC_1      20
(92.3 %, 15801 bytes)
240,243c240
< #define define #define BZ_X_BCRC_1      20
< #define BZ_X_BCRC_2      21
< #define BZ_X_BCRC_3      22
< #define BZ_X_BCRC_4      23
---
> #define define 23
240,244c240
< #define define #define BZ_X_BCRC_1      20
< #define BZ_X_BCRC_2      21
< #define BZ_X_BCRC_3      22
< #define BZ_X_BCRC_4      23
< #define BZ_X_RANDBIT     24
---
> #define define ##define BZ_X_RANDBIT     24
240,244c240
< #define define #define BZ_X_BCRC_1      20
< #define BZ_X_BCRC_2      21
< #define BZ_X_BCRC_3      22
< #define BZ_X_BCRC_4      23
< #define BZ_X_RANDBIT     24
---
> #define define #define define BZ_X_RANDBIT     24
(92.3 %, 15692 bytes)
240,244c240
< #define define 23
< #define BZ_X_RANDBIT     24
< #define BZ_X_ORIGPTR_1   25
< #define BZ_X_ORIGPTR_2   26
< #define BZ_X_ORIGPTR_3   27
---
> #define define BZ_X_ORIGPTR_3   27
241,244c241
< #define BZ_X_RANDBIT     24
< #define BZ_X_ORIGPTR_1   25
< #define BZ_X_ORIGPTR_2   26
< #define BZ_X_ORIGPTR_3   27
---
> 27
241,245c241
< #define BZ_X_RANDBIT     24
< #define BZ_X_ORIGPTR_1   25
< #define BZ_X_ORIGPTR_2   26
< #define BZ_X_ORIGPTR_3   27
< #define BZ_X_MAPPING_1   28
---
> ##define BZ_X_MAPPING_1   28
241,245c241
< #define BZ_X_RANDBIT     24
< #define BZ_X_ORIGPTR_1   25
< #define BZ_X_ORIGPTR_2   26
< #define BZ_X_ORIGPTR_3   27
< #define BZ_X_MAPPING_1   28
---
> #define define BZ_X_MAPPING_1   28
(92.4 %, 15597 bytes)
240,244c240
< #define define BZ_X_ORIGPTR_3   27
< #define BZ_X_MAPPING_1   28
< #define BZ_X_MAPPING_2   29
< #define BZ_X_SELECTOR_1  30
< #define BZ_X_SELECTOR_2  31
---
> #define define define BZ_X_SELECTOR_2  31
240,244c240
< #define define BZ_X_ORIGPTR_3   27
< #define BZ_X_MAPPING_1   28
< #define BZ_X_MAPPING_2   29
< #define BZ_X_SELECTOR_1  30
< #define BZ_X_SELECTOR_2  31
---
> #define define BZ_X_ORIGPTR_3   BZ_X_SELECTOR_2  31
(92.4 %, 15492 bytes)
240,244c240
< #define define define BZ_X_SELECTOR_2  31
< #define BZ_X_SELECTOR_3  32
< #define BZ_X_CODING_1    33
< #define BZ_X_CODING_2    34
< #define BZ_X_CODING_3    35
---
> #define define #define BZ_X_CODING_3    35
240,244c240
< #define define define BZ_X_SELECTOR_2  31
< #define BZ_X_SELECTOR_3  32
< #define BZ_X_CODING_1    33
< #define BZ_X_CODING_2    34
< #define BZ_X_CODING_3    35
---
> #define define define define BZ_X_CODING_3    35
240,244c240
< #define define define BZ_X_SELECTOR_2  31
< #define BZ_X_SELECTOR_3  32
< #define BZ_X_CODING_1    33
< #define BZ_X_CODING_2    34
< #define BZ_X_CODING_3    35
---
> #define define define BZ_X_SELECTOR_2  BZ_X_CODING_3    35
(92.5 %, 15381 bytes)
240,243c240
< #define define #define BZ_X_CODING_3    35
< #define BZ_X_MTF_1       36
< #define BZ_X_MTF_2       37
< #define BZ_X_MTF_3       38
---
> #define define 38
240,244c240
< #define define #define BZ_X_CODING_3    35
< #define BZ_X_MTF_1       36
< #define BZ_X_MTF_2       37
< #define BZ_X_MTF_3       38
< #define BZ_X_MTF_4       39
---
> #define define ##define BZ_X_MTF_4       39
240,244c240
< #define define #define BZ_X_CODING_3    35
< #define BZ_X_MTF_1       36
< #define BZ_X_MTF_2       37
< #define BZ_X_MTF_3       38
< #define BZ_X_MTF_4       39
---
> #define define #define define BZ_X_MTF_4       39
(92.5 %, 15272 bytes)
240,244c240
< #define define 38
< #define BZ_X_MTF_4       39
< #define BZ_X_MTF_5       40
< #define BZ_X_MTF_6       41
< #define BZ_X_ENDHDR_2    42
---
> #define define BZ_X_ENDHDR_2    42
241,244c241
< #define BZ_X_MTF_4       39
< #define BZ_X_MTF_5       40
< #define BZ_X_MTF_6       41
< #define BZ_X_ENDHDR_2    42
---
> 42
241,245c241
< #define BZ_X_MTF_4       39
< #define BZ_X_MTF_5       40
< #define BZ_X_MTF_6       41
< #define BZ_X_ENDHDR_2    42
< #define BZ_X_ENDHDR_3    43
---
> ##define BZ_X_ENDHDR_3    43
241,245c241
< #define BZ_X_MTF_4       39
< #define BZ_X_MTF_5       40
< #define BZ_X_MTF_6       41
< #define BZ_X_ENDHDR_2    42
< #define BZ_X_ENDHDR_3    43
---
> #define define BZ_X_ENDHDR_3    43
(92.6 %, 15177 bytes)
240,244c240
< #define define BZ_X_ENDHDR_2    42
< #define BZ_X_ENDHDR_3    43
< #define BZ_X_ENDHDR_4    44
< #define BZ_X_ENDHDR_5    45
< #define BZ_X_ENDHDR_6    46
---
> #define define define BZ_X_ENDHDR_6    46
240,244c240
< #define define BZ_X_ENDHDR_2    42
< #define BZ_X_ENDHDR_3    43
< #define BZ_X_ENDHDR_4    44
< #define BZ_X_ENDHDR_5    45
< #define BZ_X_ENDHDR_6    46
---
> #define define BZ_X_ENDHDR_2    BZ_X_ENDHDR_6    46
(92.6 %, 15072 bytes)
240,244c240
< #define define define BZ_X_ENDHDR_6    46
< #define BZ_X_CCRC_1      47
< #define BZ_X_CCRC_2      48
< #define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
---
> #define define #define BZ_X_CCRC_4      50
240,244c240
< #define define define BZ_X_ENDHDR_6    46
< #define BZ_X_CCRC_1      47
< #define BZ_X_CCRC_2      48
< #define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
---
> #define define define define BZ_X_CCRC_4      50
(92.7 %, 14961 bytes)
240,256c240
< #define define #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define define bz_stream* strm;
240,256c240
< #define define #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define define #* strm;
240,256c240
< #define define #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define define #define strm;
240,256c240
< #define define #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define define #define BZ_X_CCRC_4      ;
246,259c246
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
---
> Int32    state;
246,259c246
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
---
> #state;
246,259c246
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
---
> #define ;
246,262c246
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
---
> #define MTFA_SIZE UChar    state_out_ch;
247,262c247
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
---
> state_out_ch;
247,262c247
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
---
> #;
247,263c247
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
---
> #define Int32    state_out_len;
247,263c247
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
---
> #define MTFL_SIZE state_out_len;
253,263c253
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
---
> ;
254,264c254
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
---
>    Bool     blockRandomised;
254,264c254
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
---
>    struct blockRandomised;
256,264c256
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
---
>       ;
256,265c256
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
---
>       bz_streamBZ_RAND_DECLS;
256,265c256
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
---
>       bz_stream* ;
256,268c256
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
---
>       bz_stream* strmUInt32   bsBuff;
259,268c259
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
---
>       bsBuff;
259,268c259
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
---
>       Int32    ;
(92.8 %, 14817 bytes)
256,265d255
<       ;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
257,266c257
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
---
>       currBlockNo;
258,266d257
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
(92.8 %, 14664 bytes)
256,262d255
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
256,262d255
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
256,263c256
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
---
>       Int32    currBlockNo[256];
(92.9 %, 14538 bytes)
256,258d255
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
256,258d255
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
256,259c256
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
---
>       Int32    unzftab[257];
(92.9 %, 14454 bytes)
256,263c256
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
---
>       *ll4;
256,263c256
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
---
>       Int32    ll4;
256,263c256
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
---
>       Int32    cftabCopy;
256,266c256
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
---
>       Int32    cftabCopy[UInt32   storedBlockCRC;
(93.0 %, 14364 bytes)
256,264d255
<       Int32    ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
257,265d256
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
259,265d258
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
(93.1 %, 14190 bytes)
256,259c256
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
---
>       Int32    seqToUnseq[256];
256,259c256
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
---
>       Int32    nInUse[256];
(93.1 %, 14112 bytes)
256,260c256
<       Int32    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       Int32    / MTFL_SIZE];
256,260c256
<       Int32    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       Int32    seqToUnseqMTFL_SIZE];
256,260c256
<       Int32    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       Int32    seqToUnseq[];
256,260c256
<       Int32    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       Int32    seqToUnseq[256;
256,261c256
<       Int32    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       Int32    seqToUnseq[256]UChar    selector   [BZ_MAX_SELECTORS];
259,261c259
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       selector   [BZ_MAX_SELECTORS];
259,261c259
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       UChar    [BZ_MAX_SELECTORS];
259,261c259
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       UChar    mtfa   BZ_MAX_SELECTORS];
259,261c259
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       UChar    mtfa   [];
259,261c259
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       UChar    mtfa   [MTFA_SIZE;
259,262c259
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       UChar    mtfa   [MTFA_SIZE]UChar    selectorMtf[BZ_MAX_SELECTORS];
260,262c260
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       selectorMtf[BZ_MAX_SELECTORS];
260,262c260
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       Int32    [BZ_MAX_SELECTORS];
260,262c260
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       Int32    mtfbaseBZ_MAX_SELECTORS];
260,262c260
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[];
260,262c260
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[256 ;
260,263c260
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfbase[256 / UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
260,263c260
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfbase[256 / MTFL_SIZElen  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
260,263c260
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfbase[256 / MTFL_SIZE][BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
261,263c261
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
261,263c261
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    ][BZ_MAX_ALPHA_SIZE];
261,263c261
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    selector   [BZ_MAX_ALPHA_SIZE];
(93.2 %, 13998 bytes)
260,262c260
<       Int32    mtfbase[256 / MTFL_SIZE][BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfbase[256 / MTFL_SIZE];
260,263c260
<       Int32    mtfbase[256 / MTFL_SIZE][BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfbase[256 / MTFL_SIZE][Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
260,263c260
<       Int32    mtfbase[256 / MTFL_SIZE][BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfbase[256 / MTFL_SIZE][BZ_N_GROUPSbase   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
260,263c260
<       Int32    mtfbase[256 / MTFL_SIZE][BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfbase[256 / MTFL_SIZE][BZ_N_GROUPS][BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(93.2 %, 13909 bytes)
260,262c260
<       Int32    mtfbase[256 / MTFL_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfbase[256 / MTFL_SIZE][BZ_MAX_ALPHA_SIZE];
261,262c261
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       BZ_MAX_ALPHA_SIZE];
261,262c261
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    ];
261,262c261
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    base   ;
(93.3 %, 13816 bytes)
260,265c260
<       Int32    mtfbase[256 / MTFL_SIZE][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
---
>       Int32    mtfbase[256 / MTFL_SIZE];
260,266c260
<       Int32    mtfbase[256 / MTFL_SIZE][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
---
>       Int32    mtfbase[256 / MTFL_SIZE][Int32    save_t;
260,266c260
<       Int32    mtfbase[256 / MTFL_SIZE][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
---
>       Int32    mtfbase[256 / MTFL_SIZE][BZ_MAX_ALPHA_SIZEsave_t;
261,266d260
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
(93.3 %, 13706 bytes)
261,265d260
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
261,265d260
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
(93.4 %, 13566 bytes)
261,265d260
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
261,265d260
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
(93.5 %, 13419 bytes)
260,265c260
<       Int32    mtfbase[256 / MTFL_SIZE];
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
---
>       Int32    mtfbase[256 / MTFL_SIZE]; 
261,265d260
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
(93.5 %, 13298 bytes)
260,265c260
<       Int32    mtfbase[256 / MTFL_SIZE]; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
---
>       Int32    mtfbase[256 / MTFL_SIZE]save_gLimit;
261,265c261
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
---
>       ;
261,266c261
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
---
>       Int32    Int32*   save_gBase;
261,266c261
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
---
>       Int32    save_zvec*   save_gBase;
262,266c262
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
---
>       save_gBase;
262,266c262
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
---
>       Int32    ;
(93.6 %, 13173 bytes)
261,272c261
<       ;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FASTcccc                     \
---
>       \
262,273c262
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FASTcccc                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>       s->tPos = s->tt[s->tPos];                 \
262,273c262
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FASTcccc                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>       Int32->tPos = s->tt[s->tPos];                 \
262,273c262
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FASTcccc                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>       Int32*   tPos = s->tt[s->tPos];                 \
262,273c262
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FASTcccc                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>       Int32*   save_gBase= s->tt[s->tPos];                 \
263,273c263
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FASTcccc                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>       s->tt[s->tPos];                 \
263,273c263
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FASTcccc                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>       Int32->tt[s->tPos];                 \
263,273c263
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FASTcccc                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>       Int32*   tt[s->tPos];                 \
263,273c263
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FASTcccc                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>       Int32*   save_gPerm[s->tPos];                 \
265,273c265
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FASTcccc                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>    s->tPos];                 \
266,273c266
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FASTcccc                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>    ->tPos];                 \
266,273c266
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FASTcccc                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>    DStatetPos];                 \
272,273c272
< #define BZ_GET_FASTcccc                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> ];                 \
272,273c272
< #define BZ_GET_FASTcccc                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #;                 \
272,273c272
< #define BZ_GET_FASTcccc                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #define \
272,274c272
< #define BZ_GET_FASTcccc                     \
<     s->tPos = s->tt[s->tPos];                 \
<     cccc = UChars->tPos & 0xff;           \
---
> #define BZ_GET_FASTcccc                     cccc = UChars->tPos & 0xff;           \
(93.6 %, 13089 bytes)
272,274c272
< #define \
<     cccc = UChars->tPos & 0xff;           \
<     s->tPos >>= 8;
---
> #define ;
273,276c273
<     cccc = UChars->tPos & 0xff;           \
<     s->tPos >>= 8;
< 
< #define BZ_GET_FAST_Ccccc                   \
---
>     #define BZ_GET_FAST_Ccccc                   \
273,276c273
<     cccc = UChars->tPos & 0xff;           \
<     s->tPos >>= 8;
< 
< #define BZ_GET_FAST_Ccccc                   \
---
>     cccc define BZ_GET_FAST_Ccccc                   \
273,276c273
<     cccc = UChars->tPos & 0xff;           \
<     s->tPos >>= 8;
< 
< #define BZ_GET_FAST_Ccccc                   \
---
>     cccc = BZ_GET_FAST_Ccccc                   \
273,276c273
<     cccc = UChars->tPos & 0xff;           \
<     s->tPos >>= 8;
< 
< #define BZ_GET_FAST_Ccccc                   \
---
>     cccc = UChars\
(93.6 %, 13033 bytes)
273,275c273
<     cccc define BZ_GET_FAST_Ccccc                   \
<     c_tPos = c_tt[c_tPos];                    \
<     cccc = UCharc_tPos & 0xff;            \
---
>     cccc 0xff;            \
273,275c273
<     cccc define BZ_GET_FAST_Ccccc                   \
<     c_tPos = c_tt[c_tPos];                    \
<     cccc = UCharc_tPos & 0xff;            \
---
>     cccc define ;            \
(93.7 %, 12915 bytes)
273,279c273
<     cccc 0xff;            \
<     c_tPos >>= 8;
< 
< #define SET_LL4i,n                                          \
<    
< 
< #define GET_LL4i                             \
---
>     cccc GET_LL4i                             \
273,279c273
<     cccc 0xff;            \
<     c_tPos >>= 8;
< 
< #define SET_LL4i,n                                          \
<    
< 
< #define GET_LL4i                             \
---
>     cccc 0xff\
(93.8 %, 12802 bytes)
273,274c273
<     cccc GET_LL4i                             \
<    UInt32s->ll4[i >> 1] >> i << 2 & 0x4 & 0xF
---
>     cccc 0x4 & 0xF
273,274c273
<     cccc GET_LL4i                             \
<    UInt32s->ll4[i >> 1] >> i << 2 & 0x4 & 0xF
---
>     cccc GET_LL4i                             & 0xF
(93.8 %, 12727 bytes)
273,279c273
<     cccc 0x4 & 0xF
< 
< #define SET_LLi,n                          \
<    
< 
< #define GET_LLi \
<    UInt32s->ll16[i] | GET_LL4i << 16
---
>     cccc ll16[i] | GET_LL4i << 16
273,279c273
<     cccc 0x4 & 0xF
< 
< #define SET_LLi,n                          \
<    
< 
< #define GET_LLi \
<    UInt32s->ll16[i] | GET_LL4i << 16
---
>     cccc 0x4 [i] | GET_LL4i << 16
273,279c273
<     cccc 0x4 & 0xF
< 
< #define SET_LLi,n                          \
<    
< 
< #define GET_LLi \
<    UInt32s->ll16[i] | GET_LL4i << 16
---
>     cccc 0x4 & i] | GET_LL4i << 16
(93.8 %, 12636 bytes)
273,276c273
<     cccc ll16[i] | GET_LL4i << 16
< 
< #define BZ_GET_SMALLcccc                            \
<       cccc = BZ2_indexIntoF  s->tPos, s->cftab ;    \
---
>     cccc s->tPos, s->cftab ;    \
273,276c273
<     cccc ll16[i] | GET_LL4i << 16
< 
< #define BZ_GET_SMALLcccc                            \
<       cccc = BZ2_indexIntoF  s->tPos, s->cftab ;    \
---
>     cccc ll16->tPos, s->cftab ;    \
273,276c273
<     cccc ll16[i] | GET_LL4i << 16
< 
< #define BZ_GET_SMALLcccc                            \
<       cccc = BZ2_indexIntoF  s->tPos, s->cftab ;    \
---
>     cccc ll16[tPos, s->cftab ;    \
(93.9 %, 12527 bytes)
273,274c273
<     cccc s->tPos, s->cftab ;    \
<       s->tPos = GET_LLs->tPos;
---
>     cccc tPos;
273,274c273
<     cccc s->tPos, s->cftab ;    \
<       s->tPos = GET_LLs->tPos;
---
>     cccc s;
273,281c273
<     cccc s->tPos, s->cftab ;    \
<       s->tPos = GET_LLs->tPos;
< 
< 
< 
< 
< 
< 
< extern Int32 
---
>     cccc s->extern Int32 
(93.9 %, 12477 bytes)
273,310c273
<     cccc tPos;
< 
< 
< 
< 
< 
< 
< extern Int32 
< BZ2_decompress ( DState* );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define fswapzz1, zz2 \
---
>     cccc \
273,313c273
<     cccc tPos;
< 
< 
< 
< 
< 
< 
< extern Int32 
< BZ2_decompress ( DState* );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define fswapzz1, zz2 \
<    
< 
< #define fvswapzzp1, zzp2, zzn       \
---
>     cccc tPos#define fvswapzzp1, zzp2, zzn       \
(94.0 %, 12373 bytes)
273,280c273
<     cccc \
<    
< 
< #define fvswapzzp1, zzp2, zzn       \
< 
< 
< 
< #define fmina,b a < b ? a : b
---
>     cccc < b ? a : b
276,280c276
< #define fvswapzzp1, zzp2, zzn       \
< 
< 
< 
< #define fmina,b a < b ? a : b
---
> b ? a : b
276,280c276
< #define fvswapzzp1, zzp2, zzn       \
< 
< 
< 
< #define fmina,b a < b ? a : b
---
> #? a : b
276,280c276
< #define fvswapzzp1, zzp2, zzn       \
< 
< 
< 
< #define fmina,b a < b ? a : b
---
> #define a : b
(94.0 %, 12307 bytes)
273,277c273
<     cccc < b ? a : b
< 
< #define fpushlz,hz 
< 
< #define fpoplz,hz 
---
>     cccc hz 
273,279c273
<     cccc < b ? a : b
< 
< #define fpushlz,hz 
< 
< #define fpoplz,hz 
< 
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
>     cccc < #define FALLBACK_QSORT_SMALL_THRESH 10
(94.0 %, 12258 bytes)
273,283c273
<     cccc hz 
< 
< #define FALLBACK_QSORT_SMALL_THRESH 10
< #define FALLBACK_QSORT_STACK_SIZE   100
< 
< 
< 
< 
< #undef fmin
< #undef fpush
< #undef fpop
---
>     cccc #undef fpop
275,283c275
< #define FALLBACK_QSORT_SMALL_THRESH 10
< #define FALLBACK_QSORT_STACK_SIZE   100
< 
< 
< 
< 
< #undef fmin
< #undef fpush
< #undef fpop
---
> undef fpop
275,283c275
< #define FALLBACK_QSORT_SMALL_THRESH 10
< #define FALLBACK_QSORT_STACK_SIZE   100
< 
< 
< 
< 
< #undef fmin
< #undef fpush
< #undef fpop
---
> #fpop
275,284c275
< #define FALLBACK_QSORT_SMALL_THRESH 10
< #define FALLBACK_QSORT_STACK_SIZE   100
< 
< 
< 
< 
< #undef fmin
< #undef fpush
< #undef fpop
< #undef fswap
---
> #define #undef fswap
275,284c275
< #define FALLBACK_QSORT_SMALL_THRESH 10
< #define FALLBACK_QSORT_STACK_SIZE   100
< 
< 
< 
< 
< #undef fmin
< #undef fpush
< #undef fpop
< #undef fswap
---
> #define FALLBACK_QSORT_SMALL_THRESH undef fswap
(94.1 %, 12145 bytes)
273,283c273
<     cccc #undef fpop
< #undef fswap
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define       SET_BHzz  bhtab[zz >> 5] |= 1 << zz & 31
---
>     cccc #define       SET_BHzz  bhtab[zz >> 5] |= 1 << zz & 31
273,283c273
<     cccc #undef fpop
< #undef fswap
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define       SET_BHzz  bhtab[zz >> 5] |= 1 << zz & 31
---
>     cccc #define       SET_BHzz  bhtab[zz >> 5] |= 1 << zz & 31
273,283c273
<     cccc #undef fpop
< #undef fswap
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define       SET_BHzz  bhtab[zz >> 5] |= 1 << zz & 31
---
>     cccc #undef SET_BHzz  bhtab[zz >> 5] |= 1 << zz & 31
(94.1 %, 12033 bytes)
273,274c273
<     cccc #define       SET_BHzz  bhtab[zz >> 5] |= 1 << zz & 31
< #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~1 << zz & 31
---
>     cccc #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~1 << zz & 31
273,274c273
<     cccc #define       SET_BHzz  bhtab[zz >> 5] |= 1 << zz & 31
< #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~1 << zz & 31
---
>     cccc #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~1 << zz & 31
(94.2 %, 11978 bytes)
273c273
<     cccc #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~1 << zz & 31
---
>     cccc 31
273,274c273
<     cccc #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~1 << zz & 31
< #define     ISSET_BHzz  bhtab[zz >> 5] & 1 << zz & 31
---
>     cccc ##define     ISSET_BHzz  bhtab[zz >> 5] & 1 << zz & 31
273,274c273
<     cccc #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~1 << zz & 31
< #define     ISSET_BHzz  bhtab[zz >> 5] & 1 << zz & 31
---
>     cccc #define     define     ISSET_BHzz  bhtab[zz >> 5] & 1 << zz & 31
(94.2 %, 11925 bytes)
274d273
< #define     ISSET_BHzz  bhtab[zz >> 5] & 1 << zz & 31
274d273
< #define     ISSET_BHzz  bhtab[zz >> 5] & 1 << zz & 31
274d273
< #define     ISSET_BHzz  bhtab[zz >> 5] & 1 << zz & 31
(94.2 %, 11871 bytes)
273,275c273
<     cccc 31
< #define      WORD_BHzz  bhtab[zz >> 5]
< #define UNALIGNED_BHzz  zz & 0x01f
---
>     cccc 0x01f
274,278d273
< #define      WORD_BHzz  bhtab[zz >> 5]
< #define UNALIGNED_BHzz  zz & 0x01f
< 
< 
< 
274,278d273
< #define      WORD_BHzz  bhtab[zz >> 5]
< #define UNALIGNED_BHzz  zz & 0x01f
< 
< 
< 
(94.2 %, 11800 bytes)
273,281c273
<     cccc 0x01f
< 
< 
< 
< #undef       SET_BH
< #undef     CLEAR_BH
< #undef     ISSET_BH
< #undef      WORD_BH
< #undef UNALIGNED_BH
---
>     cccc UNALIGNED_BH
277,303d276
< #undef       SET_BH
< #undef     CLEAR_BH
< #undef     ISSET_BH
< #undef      WORD_BH
< #undef UNALIGNED_BH
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
277,303d276
< #undef       SET_BH
< #undef     CLEAR_BH
< #undef     ISSET_BH
< #undef      WORD_BH
< #undef UNALIGNED_BH
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
(94.3 %, 11704 bytes)
273,304c273
<     cccc UNALIGNED_BH
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define mswapzz1, zz2 \
<    
< 
< #define mvswapzzp1, zzp2, zzn       \
< 
< 
< 
< 
< #define mmina,b a < b ? a : b
---
>     cccc #define mmina,b a < b ? a : b
296,304c296
< #define mswapzz1, zz2 \
<    
< 
< #define mvswapzzp1, zzp2, zzn       \
< 
< 
< 
< 
< #define mmina,b a < b ? a : b
---
> define mmina,b a < b ? a : b
296,304c296
< #define mswapzz1, zz2 \
<    
< 
< #define mvswapzzp1, zzp2, zzn       \
< 
< 
< 
< 
< #define mmina,b a < b ? a : b
---
> #mmina,b a < b ? a : b
296,304c296
< #define mswapzz1, zz2 \
<    
< 
< #define mvswapzzp1, zzp2, zzn       \
< 
< 
< 
< 
< #define mmina,b a < b ? a : b
---
> #define ,b a < b ? a : b
296,304c296
< #define mswapzz1, zz2 \
<    
< 
< #define mvswapzzp1, zzp2, zzn       \
< 
< 
< 
< 
< #define mmina,b a < b ? a : b
---
> #define mswapzz1b a < b ? a : b
(94.3 %, 11598 bytes)
273,275c273
<     cccc #define mmina,b a < b ? a : b
< 
< #define mpushlz,hz,dz 
---
>     cccc ,hz,dz 
273,275c273
<     cccc #define mmina,b a < b ? a : b
< 
< #define mpushlz,hz,dz 
---
>     cccc #hz,dz 
273,275c273
<     cccc #define mmina,b a < b ? a : b
< 
< #define mpushlz,hz,dz 
---
>     cccc #define ,dz 
(94.4 %, 11552 bytes)
273,278c273
<     cccc ,hz,dz 
< 
< #define mpoplz,hz,dz 
< 
< 
< #define mnextsizeaz nextHi[az]-nextLo[az]
---
>     cccc [az]-nextLo[az]
273,278c273
<     cccc ,hz,dz 
< 
< #define mpoplz,hz,dz 
< 
< 
< #define mnextsizeaz nextHi[az]-nextLo[az]
---
>     cccc ,az]-nextLo[az]
273,278c273
<     cccc ,hz,dz 
< 
< #define mpoplz,hz,dz 
< 
< 
< #define mnextsizeaz nextHi[az]-nextLo[az]
---
>     cccc ,hz]-nextLo[az]
(94.4 %, 11493 bytes)
273,279c273
<     cccc [az]-nextLo[az]
< 
< #define mnextswapaz,bz                                        \
<    
< 
< 
< #define MAIN_QSORT_SMALL_THRESH 20
---
>     cccc define MAIN_QSORT_SMALL_THRESH 20
273,279c273
<     cccc [az]-nextLo[az]
< 
< #define mnextswapaz,bz                                        \
<    
< 
< 
< #define MAIN_QSORT_SMALL_THRESH 20
---
>     cccc [MAIN_QSORT_SMALL_THRESH 20
273,279c273
<     cccc [az]-nextLo[az]
< 
< #define mnextswapaz,bz                                        \
<    
< 
< 
< #define MAIN_QSORT_SMALL_THRESH 20
---
>     cccc [az20
(94.4 %, 11405 bytes)
273,279c273
<     cccc define MAIN_QSORT_SMALL_THRESH 20
< #define MAIN_QSORT_DEPTH_THRESH BZ_N_RADIX + BZ_N_QSORT
< #define MAIN_QSORT_STACK_SIZE 100
< 
< 
< 
< #undef mswap
---
>     cccc mswap
273,280c273
<     cccc define MAIN_QSORT_SMALL_THRESH 20
< #define MAIN_QSORT_DEPTH_THRESH BZ_N_RADIX + BZ_N_QSORT
< #define MAIN_QSORT_STACK_SIZE 100
< 
< 
< 
< #undef mswap
< #undef mvswap
---
>     cccc define #undef mvswap
273,280c273
<     cccc define MAIN_QSORT_SMALL_THRESH 20
< #define MAIN_QSORT_DEPTH_THRESH BZ_N_RADIX + BZ_N_QSORT
< #define MAIN_QSORT_STACK_SIZE 100
< 
< 
< 
< #undef mswap
< #undef mvswap
---
>     cccc define MAIN_QSORT_SMALL_THRESH undef mvswap
(94.5 %, 11271 bytes)
273,278c273
<     cccc mswap
< #undef mvswap
< #undef mpush
< #undef mpop
< #undef mmin
< #undef mnextsize
---
>     cccc mnextsize
274,278d273
< #undef mvswap
< #undef mpush
< #undef mpop
< #undef mmin
< #undef mnextsize
274,278d273
< #undef mvswap
< #undef mpush
< #undef mpop
< #undef mmin
< #undef mnextsize
(94.5 %, 11207 bytes)
273,283c273
<     cccc mnextsize
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
>     cccc BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
274,283c274
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
> ftab[b+1 << 8] - ftab[b << 8]
274,283c274
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
> #[b+1 << 8] - ftab[b << 8]
274,283c274
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
> #undef b+1 << 8] - ftab[b << 8]
(94.6 %, 11076 bytes)
273c273
<     cccc BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
>     cccc ]
273,274c273
<     cccc BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
< #define SETMASK 1 << 21
---
>     cccc BIGFREQb #define SETMASK 1 << 21
(94.6 %, 11039 bytes)
273,280c273
<     cccc ]
< #define SETMASK 1 << 21
< #define CLEARMASK ~SETMASK
< 
< 
< 
< #undef BIGFREQ
< #undef SETMASK
---
>     cccc #undef SETMASK
274,280c274
< #define SETMASK 1 << 21
< #define CLEARMASK ~SETMASK
< 
< 
< 
< #undef BIGFREQ
< #undef SETMASK
---
> undef SETMASK
274,280c274
< #define SETMASK 1 << 21
< #define CLEARMASK ~SETMASK
< 
< 
< 
< #undef BIGFREQ
< #undef SETMASK
---
> #SETMASK
274,281c274
< #define SETMASK 1 << 21
< #define CLEARMASK ~SETMASK
< 
< 
< 
< #undef BIGFREQ
< #undef SETMASK
< #undef CLEARMASK
---
> #define #undef CLEARMASK
274,281c274
< #define SETMASK 1 << 21
< #define CLEARMASK ~SETMASK
< 
< 
< 
< #undef BIGFREQ
< #undef SETMASK
< #undef CLEARMASK
---
> #define SETMASK undef CLEARMASK
(94.6 %, 10968 bytes)
273,294c273
<     cccc #undef SETMASK
< #undef CLEARMASK
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define WEIGHTOFzz0  zz0 & 0xffffff00
< #define DEPTHOFzz1   zz1 & 0x000000ff
---
>     cccc zz1 & 0x000000ff
273,294c273
<     cccc #undef SETMASK
< #undef CLEARMASK
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define WEIGHTOFzz0  zz0 & 0xffffff00
< #define DEPTHOFzz1   zz1 & 0x000000ff
---
>     cccc #& 0x000000ff
(94.7 %, 10859 bytes)
273,276c273
<     cccc zz1 & 0x000000ff
< #define MYMAXzz2,zz3 zz2 > zz3 ? zz2 : zz3
< 
< #define ADDWEIGHTSzw1,zw2                           \
---
>     cccc #define ADDWEIGHTSzw1,zw2                           \
273,276c273
<     cccc zz1 & 0x000000ff
< #define MYMAXzz2,zz3 zz2 > zz3 ? zz2 : zz3
< 
< #define ADDWEIGHTSzw1,zw2                           \
---
>     cccc zz1 define ADDWEIGHTSzw1,zw2                           \
(94.7 %, 10798 bytes)
273,275c273
<     cccc #define ADDWEIGHTSzw1,zw2                           \
<    WEIGHTOFzw1+WEIGHTOFzw2 |                    \
<    1 + MYMAXDEPTHOFzw1,DEPTHOFzw2
---
>     cccc DEPTHOFzw2
273,277c273
<     cccc #define ADDWEIGHTSzw1,zw2                           \
<    WEIGHTOFzw1+WEIGHTOFzw2 |                    \
<    1 + MYMAXDEPTHOFzw1,DEPTHOFzw2
< 
< #define UPHEAPz                                     \
---
>     cccc ##define UPHEAPz                                     \
273,277c273
<     cccc #define ADDWEIGHTSzw1,zw2                           \
<    WEIGHTOFzw1+WEIGHTOFzw2 |                    \
<    1 + MYMAXDEPTHOFzw1,DEPTHOFzw2
< 
< #define UPHEAPz                                     \
---
>     cccc #define define UPHEAPz                                     \
(94.8 %, 10671 bytes)
273,368c273
<     cccc DEPTHOFzw2
< 
< #define UPHEAPz                                     \
< 
< 
< #define DOWNHEAPz                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDWnz                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
---
>     cccc makeMaps_e ( EState* s )
275,368c275
< #define UPHEAPz                                     \
< 
< 
< #define DOWNHEAPz                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDWnz                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
---
> ( EState* s )
275,368c275
< #define UPHEAPz                                     \
< 
< 
< #define DOWNHEAPz                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDWnz                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
---
> #EState* s )
275,368c275
< #define UPHEAPz                                     \
< 
< 
< #define DOWNHEAPz                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDWnz                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
---
> #define * s )
275,368c275
< #define UPHEAPz                                     \
< 
< 
< #define DOWNHEAPz                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDWnz                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
---
> #define UPHEAPz                                     s )
(94.9 %, 10404 bytes)
273,280c273
<     cccc makeMaps_e ( EState* s )
< ;
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
< ;
---
>     cccc ;
273,284c273
<     cccc makeMaps_e ( EState* s )
< ;
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
< ;
< 
< 
< 
< #define BZ_LESSER_ICOST  0
---
>     cccc makeMaps_e #define BZ_LESSER_ICOST  0
(95.0 %, 10330 bytes)
273,305c273
<     cccc ;
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define RETURNrrr                               \
<    ;
< 
< #define GET_BITSlll,vvv,nnn                     \
---
>     cccc define GET_BITSlll,vvv,nnn                     \
277,305c277
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define RETURNrrr                               \
<    ;
< 
< #define GET_BITSlll,vvv,nnn                     \
---
> GET_BITSlll,vvv,nnn                     \
277,305c277
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define RETURNrrr                               \
<    ;
< 
< #define GET_BITSlll,vvv,nnn                     \
---
> #,vvv,nnn                     \
277,305c277
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define RETURNrrr                               \
<    ;
< 
< #define GET_BITSlll,vvv,nnn                     \
---
> #define vvv,nnn                     \
(95.0 %, 10190 bytes)
273,274c273
<     cccc define GET_BITSlll,vvv,nnn                     \
<    case lll: s->state = lll;                      \
---
>     cccc ;                      \
273,274c273
<     cccc define GET_BITSlll,vvv,nnn                     \
<    case lll: s->state = lll;                      \
---
>     cccc define \
(95.1 %, 10114 bytes)
273,279c273
<     cccc ;                      \
<    while True 
< 
< #define GET_UCHARlll,uuu                        \
<    GET_BITSlll,uuu,8
< 
< #define GET_BITlll,uuu                          \
---
>     cccc #define GET_BITlll,uuu                          \
273,279c273
<     cccc ;                      \
<    while True 
< 
< #define GET_UCHARlll,uuu                        \
<    GET_BITSlll,uuu,8
< 
< #define GET_BITlll,uuu                          \
---
>     cccc ;                      define GET_BITlll,uuu                          \
(95.1 %, 10001 bytes)
273,277c273
<     cccc #define GET_BITlll,uuu                          \
<    GET_BITSlll,uuu,1
< 
< 
< #define GET_MTF_VALlabel1,label2,lval           \
---
>     cccc label2,lval           \
273,277c273
<     cccc #define GET_BITlll,uuu                          \
<    GET_BITSlll,uuu,1
< 
< 
< #define GET_MTF_VALlabel1,label2,lval           \
---
>     cccc #,lval           \
(95.2 %, 9902 bytes)
273,297c273
<     cccc label2,lval           \
< 
< 
< 
< 
< Int32 BZ2_decompress ( DState* s )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< void BZ2_bz__AssertH__fail ( int errcode )
---
>     cccc int errcode )
273,297c273
<     cccc label2,lval           \
< 
< 
< 
< 
< Int32 BZ2_decompress ( DState* s )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< void BZ2_bz__AssertH__fail ( int errcode )
---
>     cccc label2errcode )
(95.2 %, 9791 bytes)
273,285c273
<     cccc int errcode )
< ;
< 
< 
< 
< static
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>     cccc ( void* opaque, Int32 items, Int32 size )
273,285c273
<     cccc int errcode )
< ;
< 
< 
< 
< static
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>     cccc int void* opaque, Int32 items, Int32 size )
(95.3 %, 9705 bytes)
273,277c273
<     cccc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
>     cccc ( void* opaque, void* addr )
273,277c273
<     cccc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
>     cccc ( void* opaque, void* addr )
273,277c273
<     cccc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
>     cccc ( void* opaque, void* addr )
(95.3 %, 9633 bytes)
273,279c273
<     cccc ( void* opaque, void* addr )
< ;
< 
< 
< 
< static
< void prepare_new_block ( EState* s )
---
>     cccc * s )
273,279c273
<     cccc ( void* opaque, void* addr )
< ;
< 
< 
< 
< static
< void prepare_new_block ( EState* s )
---
>     cccc ( s )
273,279c273
<     cccc ( void* opaque, void* addr )
< ;
< 
< 
< 
< static
< void prepare_new_block ( EState* s )
---
>     cccc ( void)
(95.3 %, 9561 bytes)
273,284c273
<     cccc * s )
< ;
< 
< 
< 
< static
< void init_RL ( EState* s )
< ;
< 
< 
< static
< Bool isempty_RL ( EState* s )
---
>     cccc isempty_RL ( EState* s )
273,284c273
<     cccc * s )
< ;
< 
< 
< 
< static
< void init_RL ( EState* s )
< ;
< 
< 
< static
< Bool isempty_RL ( EState* s )
---
>     cccc * ( EState* s )
273,284c273
<     cccc * s )
< ;
< 
< 
< 
< static
< void init_RL ( EState* s )
< ;
< 
< 
< static
< Bool isempty_RL ( EState* s )
---
>     cccc * s EState* s )
(95.4 %, 9500 bytes)
273,280c273
<     cccc isempty_RL ( EState* s )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>     cccc blockSize100k,
273,280c273
<     cccc isempty_RL ( EState* s )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>     cccc isempty_RL ,
273,281c273
<     cccc isempty_RL ( EState* s )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
>     cccc isempty_RL ( int        verbosity,
273,281c273
<     cccc isempty_RL ( EState* s )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
>     cccc isempty_RL ( EStateverbosity,
273,281c273
<     cccc isempty_RL ( EState* s )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
>     cccc isempty_RL ( EState* ,
273,282c273
<     cccc isempty_RL ( EState* s )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
>     cccc isempty_RL ( EState* s int        workFactor )
274,282c274
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
> workFactor )
278,282c278
< int BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
> )
278,283c278
< int BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< ;
---
> int ;
(95.5 %, 9312 bytes)
273,300c273
<     cccc isempty_RL ( EState* s int        workFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
---
>     cccc isempty_RL ( EState* s * strm )
273,300c273
<     cccc isempty_RL ( EState* s int        workFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
---
>     cccc isempty_RL ( EState* s int        strm )
278,304d277
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
< ;
< 
< 
< 
(95.5 %, 9174 bytes)
sh: 0: getcwd() failed: No such file or directory
273,283c273
<     cccc isempty_RL ( EState* s * strm )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
273,283c273
<     cccc isempty_RL ( EState* s * strm )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>     cccc isempty_RL ( EState* s * BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
(95.6 %, 9098 bytes)
273,284c273
<     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>     cccc isempty_RL ( EState* s int        verbosity,
273,284c273
<     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>     cccc isempty_RL ( EState* s int verbosity,
273,284c273
<     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ,
273,285c273
<     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
>     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( int        small )
273,285c273
<     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
>     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( bz_stream small )
273,285c273
<     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
>     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( bz_stream *)
(95.6 %, 8930 bytes)
273,290c273
<     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( int        small )
< ;
< 
< 
< 
< static
< void unRLE_obuf_to_output_FAST ( DState* s )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( DState* s )
---
>     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( unRLE_obuf_to_output_SMALL ( DState* s )
273,290c273
<     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( int        small )
< ;
< 
< 
< 
< static
< void unRLE_obuf_to_output_FAST ( DState* s )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( DState* s )
---
>     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( int        ( DState* s )
273,290c273
<     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( int        small )
< ;
< 
< 
< 
< static
< void unRLE_obuf_to_output_FAST ( DState* s )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( DState* s )
---
>     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( int        small DState* s )
(95.7 %, 8832 bytes)
273,283c273
<     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( unRLE_obuf_to_output_SMALL ( DState* s )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
273,283c273
<     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( unRLE_obuf_to_output_SMALL ( DState* s )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( unRLE_obuf_to_output_SMALL BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
(95.7 %, 8734 bytes)
273,286c273
<     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERReee                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
>     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( FILE*     handle;
273,286c273
<     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERReee                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
>     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( int *     handle;
273,286c273
<     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERReee                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
>     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( int BZ_APIBZ2_bzDecompressEnd  handle;
273,286c273
<     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERReee                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
>     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( int BZ_APIBZ2_bzDecompressEnd  ( ;
273,287c273
<     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERReee                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
>     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( int BZ_APIBZ2_bzDecompressEnd  ( bz_stream Char      buf[BZ_MAX_UNUSED];
273,287c273
<     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERReee                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
>     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *buf[BZ_MAX_UNUSED];
273,287c273
<     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERReee                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
>     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm [BZ_MAX_UNUSED];
274,287c274
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERReee                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> BZ_MAX_UNUSED];
281,287c281
< #define BZ_SETERReee                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> ];
281,287c281
< #define BZ_SETERReee                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #;
281,288c281
< #define BZ_SETERReee                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
> #define Int32     bufN;
281,288c281
< #define BZ_SETERReee                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
> #define BZ_SETERReee                    bufN;
284,288c284
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
> ;
285,289c285
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
---
>    Bool      writing;
285,289c285
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
---
>    struct writing;
286,289c286
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
---
>       ;
286,290c286
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
---
>       FILEbz_stream strm;
286,290c286
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
---
>       FILE*     strm;
(95.8 %, 8635 bytes)
286,299c286
<       ;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
---
>       BZ_APIBZ2_bzWriteOpen 
287,300c287
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>       ( int*  bzerror,      
287,300c287
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>       bz_stream int*  bzerror,      
287,300c287
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>       bz_stream strm*  bzerror,      
288,300c288
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>       bzerror,      
288,300c288
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>       Int32     ,      
288,301c288
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>       Int32     lastErrFILE* f, 
289,301c289
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>       * f, 
289,301c289
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>       Bool      f, 
289,301c289
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>       Bool      initialisedOk, 
290,302c290
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>    int   blockSize100k, 
291,302c291
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>    blockSize100k, 
291,302c291
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>    bzFile, 
299,303c299
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
> int   verbosity,
299,303c299
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
> BZFILEverbosity,
299,303c299
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
> BZFILE* ,
300,304c300
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     int   workFactor )
300,304c300
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     ( workFactor )
300,304c300
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     ( int)
300,305c300
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
---
>                     ( int*  ;
300,310c300
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
---
>                     ( int*  bzerrorvoid BZ_APIBZ2_bzWrite
301,310c301
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
---
>                       BZ_APIBZ2_bzWrite
301,311c301
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>                       FILE( int*    bzerror, 
301,311c301
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>                       FILE* int*    bzerror, 
301,311c301
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>                       FILE* f*    bzerror, 
302,311c302
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>                       bzerror, 
302,311c302
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>                       int   , 
302,312c302
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>                       int   blockSize100kBZFILE* b, 
303,312c303
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>                       * b, 
303,312c303
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>                       int   b, 
303,312c303
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>                       int   verbosity, 
304,313c304
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>                       void*   buf, 
304,313c304
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>                       int   *   buf, 
304,313c304
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>                       int   workFactor buf, 
305,313c305
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> , 
310,314c310
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
> int     len )
310,314c310
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
> void len )
311,314c311
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              )
311,315c311
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
---
>              ( ;
311,319c311
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
---
>              ( intvoid BZ_APIBZ2_bzWriteClose
311,319c311
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
---
>              ( int*    BZ_APIBZ2_bzWriteClose
311,320c311
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>              ( int*    bzerror( int*          bzerror, 
312,320c312
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>                int*          bzerror, 
312,320c312
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>                BZFILE*          bzerror, 
312,320c312
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>                BZFILE* bzerror, 
313,320d312
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
313,321c313
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                BZFILE*       b, 
313,321c313
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                void*       b, 
313,321c313
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                void*   b, 
314,321d313
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
314,322c314
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                int           abandon,
314,322c314
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                int     abandon,
314,322c314
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                int     len ,
315,323c315
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
> unsigned int* nbytes_in,
319,323c319
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
> int* nbytes_in,
319,323c319
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
> void * nbytes_in,
320,323c320
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   nbytes_in,
320,323c320
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( ,
320,324c320
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                   ( intunsigned int* nbytes_out )
320,324c320
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                   ( int*          int* nbytes_out )
320,324c320
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                   ( int*          bzerror* nbytes_out )
321,324c321
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     nbytes_out )
321,324c321
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     BZFILE)
321,325c321
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
---
>                     BZFILE*       ;
321,328c321
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
---
>                     BZFILE*       bvoid BZ_APIBZ2_bzWriteClose64
322,328c322
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
---
>                     BZ_APIBZ2_bzWriteClose64
322,329c322
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     int           ( int*          bzerror, 
322,329c322
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     int           abandonint*          bzerror, 
323,329c323
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     *          bzerror, 
323,329c323
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     unsigned bzerror, 
323,329c323
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     unsigned int, 
323,330c323
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                     unsigned int* BZFILE*       b, 
323,330c323
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                     unsigned int* nbytes_in*       b, 
324,330c324
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                     b, 
324,330c324
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                     unsigned , 
324,331c324
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     unsigned intint           abandon,
324,331c324
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     unsigned int* abandon,
324,331c324
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     unsigned int* nbytes_out ,
325,332c325
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
> unsigned int* nbytes_in_lo32,
328,332c328
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
> int* nbytes_in_lo32,
328,332c328
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
> void * nbytes_in_lo32,
329,332c329
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   nbytes_in_lo32,
329,332c329
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( ,
329,333c329
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                   ( intunsigned int* nbytes_in_hi32,
329,333c329
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                   ( int*          int* nbytes_in_hi32,
329,333c329
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                   ( int*          bzerror* nbytes_in_hi32,
330,333c330
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     nbytes_in_hi32,
330,333c330
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     BZFILE,
330,334c330
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     BZFILE*       unsigned int* nbytes_out_lo32,
330,334c330
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     BZFILE*       bint* nbytes_out_lo32,
331,334c331
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     * nbytes_out_lo32,
331,334c331
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     int           nbytes_out_lo32,
332,334d331
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
332,334d331
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
332,334d331
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
332,334d331
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
332,334d331
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
332,335c332
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_in_lo32)
333,336c333
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
---
>                     ;
333,340c333
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
---
>                     unsigned BZFILE* BZ_APIBZ2_bzReadOpen 
333,340c333
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
---
>                     unsigned int* BZ_APIBZ2_bzReadOpen 
333,340c333
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
---
>                     unsigned int* BZ_APIBZ2_bzReadOpen 
333,341c333
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     unsigned int* nbytes_in_hi32( int*  bzerror, 
334,341c334
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     int*  bzerror, 
334,341c334
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     unsigned *  bzerror, 
334,341c334
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     unsigned intbzerror, 
334,341c334
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     unsigned int* , 
334,342c334
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                     unsigned int* nbytes_out_lo32FILE* f, 
335,342c335
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                     * f, 
335,342c335
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                     unsigned f, 
335,342c335
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                     unsigned int, 
335,343c335
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                     unsigned int* int   verbosity,
335,343c335
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                     unsigned int* nbytes_out_hi32 verbosity,
336,343c336
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
> ,
340,344c340
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
> int   small,
340,344c340
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
> BZFILEsmall,
340,344c340
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
> BZFILE* ,
341,345c341
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    void* unused,
341,345c341
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    ( * unused,
341,345c341
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    ( intunused,
341,345c341
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    ( int*  ,
341,346c341
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                    ( int*  bzerrorint   nUnused )
342,346c342
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      nUnused )
342,346c342
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      FILE)
342,347c342
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
---
>                      FILE* ;
342,351c342
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>                      FILE* fvoid BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
343,351c343
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>                      BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
343,351c343
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>                      int   ( int *bzerror, BZFILE *b )
343,351c343
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>                      int   verbosityint *bzerror, BZFILE *b )
344,351c344
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>                      *bzerror, BZFILE *b )
344,351c344
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>                      int   bzerror, BZFILE *b )
344,351c344
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>                      int   small, BZFILE *b )
345,351c345
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>                      BZFILE *b )
345,351c345
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>                      void*b )
345,351c345
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>                      void* b )
345,351c345
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>                      void* unused)
346,352c346
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
---
>                      ;
346,356c346
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
---
>                      int   int BZ_APIBZ2_bzRead 
346,356c346
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
---
>                      int   nUnused BZ_APIBZ2_bzRead 
347,357c347
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
> ( int*    bzerror, 
351,357c351
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
> int*    bzerror, 
351,357c351
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
> void *    bzerror, 
351,357c351
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
> void BZ_APIBZ2_bzReadClose bzerror, 
351,357c351
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
> void BZ_APIBZ2_bzReadClose ( , 
351,358c351
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> void BZ_APIBZ2_bzReadClose ( int BZFILE* b, 
351,358c351
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> void BZ_APIBZ2_bzReadClose ( int ** b, 
351,358c351
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> void BZ_APIBZ2_bzReadClose ( int *bzerrorb, 
351,358c351
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, , 
351,359c351
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE void*   buf, 
351,359c351
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE **   buf, 
351,359c351
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b buf, 
352,359c352
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> , 
356,360c356
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
> int     len )
356,360c356
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
> int len )
357,360c357
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            )
357,361c357
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< ;
---
>            ( ;
357,365c357
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
---
>            ( intvoid BZ_APIBZ2_bzReadGetUnused 
357,365c357
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
---
>            ( int*    BZ_APIBZ2_bzReadGetUnused 
357,366c357
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>            ( int*    bzerror( int*    bzerror, 
358,366c358
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>              int*    bzerror, 
358,366c358
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>              BZFILE*    bzerror, 
358,366c358
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>              BZFILE* bzerror, 
359,366d358
<              void*   buf, 
<              int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
359,367c359
<              void*   buf, 
<              int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>              BZFILE* b, 
359,367c359
<              void*   buf, 
<              int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>              void* b, 
359,367c359
<              void*   buf, 
<              int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>              void*   b, 
360,367d359
<              int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
360,368c360
<              int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>              void**  unused, 
360,368c360
<              int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>              int     **  unused, 
360,368c360
<              int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>              int     len *  unused, 
361,368c361
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> unused, 
365,368c365
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> , 
365,369c365
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
> void int*    nUnused )
366,369c366
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      *    nUnused )
366,369c366
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( nUnused )
366,369c366
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int)
366,370c366
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< ;
---
>                      ( int*    ;
366,378c366
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
---
>                      ( int*    bzerrorint BZ_APIBZ2_bzBuffToBuffCompress 
367,378c367
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
---
>                        BZ_APIBZ2_bzBuffToBuffCompress 
367,379c367
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>                        BZFILE( char*         dest, 
367,379c367
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>                        BZFILE* char*         dest, 
367,379c367
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>                        BZFILE* b*         dest, 
368,379c368
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>                        dest, 
368,379c368
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>                        void, 
368,380c368
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                        void*unsigned int* destLen,
368,380c368
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                        void**  int* destLen,
368,380c368
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                        void**  unused* destLen,
369,380c369
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                        destLen,
369,380c369
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                        int,
369,381c369
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                        int*    char*         source, 
369,381c369
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                        int*    nUnused *         source, 
370,381c370
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
> source, 
378,381c378
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
> , 
378,382c378
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
> int unsigned int  sourceLen,
379,382c379
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          int  sourceLen,
379,382c379
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( sourceLen,
379,382c379
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( char,
379,383c379
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                          ( char*         int           blockSize100k, 
379,383c379
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                          ( char*         destblockSize100k, 
380,383c380
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            , 
380,384c380
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned int           verbosity, 
380,384c380
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned intverbosity, 
380,384c380
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned int* , 
380,385c380
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            unsigned int* destLenint           workFactor )
381,385c381
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            workFactor )
381,385c381
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            char)
381,386c381
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
---
>                            char*         ;
381,390c381
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
---
>                            char*         sourceint BZ_APIBZ2_bzBuffToBuffDecompress 
382,390c382
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
---
>                            BZ_APIBZ2_bzBuffToBuffDecompress 
382,391c382
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            unsigned ( char*         dest, 
382,391c382
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            unsigned int  char*         dest, 
382,391c382
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            unsigned int  sourceLen*         dest, 
383,391c383
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            dest, 
383,391c383
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            int           , 
383,392c383
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            int           blockSize100kunsigned int* destLen,
384,392c384
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            int* destLen,
384,392c384
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            int           * destLen,
384,392c384
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            int           verbositydestLen,
385,392c385
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ,
385,393c385
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            int           char*         source, 
385,393c385
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            int           workFactor *         source, 
386,393c386
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> source, 
390,393c390
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> , 
390,394c390
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
> int unsigned int  sourceLen,
391,394c391
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            int  sourceLen,
391,394c391
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( sourceLen,
391,394c391
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( char,
391,395c391
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                            ( char*         int           small,
391,395c391
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                            ( char*         destsmall,
392,395c392
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              ,
392,396c392
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned int           verbosity )
392,396c392
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned intverbosity )
392,396c392
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned int* )
392,397c392
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
---
>                              unsigned int* destLen;
393,406c393
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_APIBZ2_bzlibVersionvoid
---
>                              const char * BZ_APIBZ2_bzlibVersionvoid
393,406c393
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_APIBZ2_bzlibVersionvoid
---
>                              charchar * BZ_APIBZ2_bzlibVersionvoid
393,406c393
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_APIBZ2_bzlibVersionvoid
---
>                              char*         * BZ_APIBZ2_bzlibVersionvoid
393,406c393
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_APIBZ2_bzlibVersionvoid
---
>                              char*         sourceBZ_APIBZ2_bzlibVersionvoid
394,407c394
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_APIBZ2_bzlibVersionvoid
< ;
---
>                              ;
394,412c394
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_APIBZ2_bzlibVersionvoid
< ;
< 
< 
< 
< 
< static
---
>                              unsigned static
394,413c394
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_APIBZ2_bzlibVersionvoid
< ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
>                              unsigned int  BZFILE * bzopen_or_bzdopen
394,413c394
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_APIBZ2_bzlibVersionvoid
< ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
>                              unsigned int  sourceLen* bzopen_or_bzdopen
395,413c395
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_APIBZ2_bzlibVersionvoid
< ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
>                              bzopen_or_bzdopen
395,414c395
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_APIBZ2_bzlibVersionvoid
< ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
---
>                              int           ( const char *path,   
395,414c395
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_APIBZ2_bzlibVersionvoid
< ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
---
>                              int           smallconst char *path,   
396,414c396
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_APIBZ2_bzlibVersionvoid
< ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
---
>                              char *path,   
396,414c396
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_APIBZ2_bzlibVersionvoid
< ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
---
>                              int           *path,   
396,414c396
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_APIBZ2_bzlibVersionvoid
< ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
---
>                              int           verbosity path,   
397,414c397
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_APIBZ2_bzlibVersionvoid
< ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
---
> ,   
406,415c406
< const char * BZ_APIBZ2_bzlibVersionvoid
< ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int fd,             
---
> int fd,             
406,415c406
< const char * BZ_APIBZ2_bzlibVersionvoid
< ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int fd,             
---
> const fd,             
406,415c406
< const char * BZ_APIBZ2_bzlibVersionvoid
< ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int fd,             
---
> const char ,             
406,416c406
< const char * BZ_APIBZ2_bzlibVersionvoid
< ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
---
> const char * const char *mode,
407,416c407
< ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
---
> char *mode,
412,416c412
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
---
> *mode,
413,416c413
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
---
> mode,
413,416c413
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
---
> BZFILE ,
413,417c413
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
<                  int open_mode)      
---
> BZFILE * int open_mode)      
414,417c414
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
<                  int open_mode)      
---
>                open_mode)      
414,417c414
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
<                  int open_mode)      
---
>                ( )      
414,418c414
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
<                  int open_mode)      
< ;
---
>                ( const ;
414,423c414
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzopen
---
>                ( const char BZFILE * BZ_APIBZ2_bzopen
414,423c414
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzopen
---
>                ( const char ** BZ_APIBZ2_bzopen
414,423c414
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzopen
---
>                ( const char *pathBZ_APIBZ2_bzopen
415,424c415
<                  int fd,             
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzopen
<                ( const char *path,
---
>                  ( const char *path,
415,424c415
<                  int fd,             
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzopen
<                ( const char *path,
---
>                  int const char *path,
(95.8 %, 8511 bytes)
414,422c414
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzopen
<                ( const char *path,
<                  const char *mode )
---
>                ( )
419,426d418
< 
< BZFILE * BZ_APIBZ2_bzopen
<                ( const char *path,
<                  const char *mode )
< ;
< 
< 
< 
420,426d419
< BZFILE * BZ_APIBZ2_bzopen
<                ( const char *path,
<                  const char *mode )
< ;
< 
< 
< 
(95.9 %, 8402 bytes)
414,426c414
<                ( )
< ;
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzdopen
<                ( int fd,
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
---
>                ( int BZ_APIBZ2_bzread_nread;
415,426c415
< ;
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzdopen
<                ( int fd,
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
---
> BZ_APIBZ2_bzread_nread;
419,421d418
< BZFILE * BZ_APIBZ2_bzdopen
<                ( int fd,
<                  const char *mode )
423,426d419
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
419,427c419
< BZFILE * BZ_APIBZ2_bzdopen
<                ( int fd,
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> BZFILE int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
419,427c419
< BZFILE * BZ_APIBZ2_bzdopen
<                ( int fd,
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> BZFILE * BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
420,427c420
<                ( int fd,
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>                (BZFILE* b, void* buf, int len )
420,427c420
<                ( int fd,
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>                ( BZFILE* b, void* buf, int len )
420,427c420
<                ( int fd,
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>                ( int * b, void* buf, int len )
420,427c420
<                ( int fd,
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>                ( int fdb, void* buf, int len )
421,427c421
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>                  , void* buf, int len )
421,427c421
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>                  const void* buf, int len )
421,427c421
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>                  const char * buf, int len )
421,427c421
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>                  const char *buf, int len )
421,427c421
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>                  const char *mode , int len )
422,427c422
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> int len )
426,427c426
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> len )
426,427c426
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> int )
426,428c426
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
---
> int BZ_APIBZ2_bzread_nread{
427,429c427
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
---
> int bzerr;
427,429c427
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
---
> int bzerr;
427,429c427
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
---
> int BZ_APIBZ2_bzread ;
427,430c427
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_APIBZ2_bzread (if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
427,430c427
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_APIBZ2_bzread (BZFILE(((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
427,430c427
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_APIBZ2_bzread (BZFILE* ((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
427,430c427
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_APIBZ2_bzread (BZFILE* b(bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
427,430c427
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_APIBZ2_bzread (BZFILE* b, bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
427,430c427
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_APIBZ2_bzread (BZFILE* b, void*)b)->lastErr == BZ_STREAM_END) return 0;
427,430c427
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_APIBZ2_bzread (BZFILE* b, void* )b)->lastErr == BZ_STREAM_END) return 0;
427,430c427
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_APIBZ2_bzread (BZFILE* b, void* bufb)->lastErr == BZ_STREAM_END) return 0;
427,430c427
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_APIBZ2_bzread (BZFILE* b, void* buf, )->lastErr == BZ_STREAM_END) return 0;
427,430c427
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int ->lastErr == BZ_STREAM_END) return 0;
427,430c427
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len lastErr == BZ_STREAM_END) return 0;
428,430c428
< {
<    int bzerr;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> == BZ_STREAM_END) return 0;
429,430c429
<    int bzerr;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    BZ_STREAM_END) return 0;
429,430c429
<    int bzerr;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int ) return 0;
429,430c429
<    int bzerr;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int bzerrreturn 0;
430c430
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    0;
430c430
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ;
430,431c430
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    BZ_APIBZ2_bzread_nread = 0;
---
>    if (BZ_APIBZ2_bzread_nread = 0;
430,431c430
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    BZ_APIBZ2_bzread_nread = 0;
---
>    if ((= 0;
430,431c430
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    BZ_APIBZ2_bzread_nread = 0;
---
>    if (((0;
430,431c430
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    BZ_APIBZ2_bzread_nread = 0;
---
>    if (((bzFile;
(95.9 %, 8351 bytes)
430,432c430
<    0;
<    BZ_APIBZ2_bzread_nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    ) ; else ;
430,432c430
<    0;
<    BZ_APIBZ2_bzread_nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    0; else ;
431,432c431
<    BZ_APIBZ2_bzread_nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    else ;
431,432c431
<    BZ_APIBZ2_bzread_nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    BZ_APIBZ2_bzread_nread ;
431,433c431
<    BZ_APIBZ2_bzread_nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
---
>    BZ_APIBZ2_bzread_nread = }
431,437c431
<    BZ_APIBZ2_bzread_nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>    BZ_APIBZ2_bzread_nread = 0int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
432,437c432
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>    BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
432,437c432
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>    if (BZFILE* b, void* buf, int len )
432,437c432
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>    if (BZFILE* b, void* buf, int len )
432,437c432
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>    if (bzerr * b, void* buf, int len )
432,437c432
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>    if (bzerr == b, void* buf, int len )
432,437c432
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>    if (bzerr == BZ_OK , void* buf, int len )
432,437c432
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>    if (bzerr == BZ_OK || void* buf, int len )
432,437c432
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>    if (bzerr == BZ_OK || bzerr * buf, int len )
432,437c432
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>    if (bzerr == BZ_OK || bzerr == buf, int len )
432,437c432
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END, int len )
432,437c432
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) int len )
432,437c432
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; len )
432,437c432
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else )
433,437d432
< }
< 
< 
< 
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
437,441d436
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
< ;
< 
< 
< 
437,441d436
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
< ;
< 
< 
< 
437,442c437
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzflush (BZFILE *b)
---
> int BZ_APIBZ2_bzwrite (BZFILE *b)
(96.0 %, 8291 bytes)
437,442d436
< int BZ_APIBZ2_bzflush (BZFILE *b)
< ;
< 
< 
< 
< void BZ_APIBZ2_bzclose (BZFILE* b)
437,451c437
< int BZ_APIBZ2_bzflush (BZFILE *b)
< ;
< 
< 
< 
< void BZ_APIBZ2_bzclose (BZFILE* b)
< ;
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> int const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
437,451c437
< int BZ_APIBZ2_bzflush (BZFILE *b)
< ;
< 
< 
< 
< void BZ_APIBZ2_bzclose (BZFILE* b)
< ;
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> int BZ_APIBZ2_bzflush char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
437,451c437
< int BZ_APIBZ2_bzflush (BZFILE *b)
< ;
< 
< 
< 
< void BZ_APIBZ2_bzclose (BZFILE* b)
< ;
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> int BZ_APIBZ2_bzflush (* BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
437,451c437
< int BZ_APIBZ2_bzflush (BZFILE *b)
< ;
< 
< 
< 
< void BZ_APIBZ2_bzclose (BZFILE* b)
< ;
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> int BZ_APIBZ2_bzflush (BZFILE BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
437,451c437
< int BZ_APIBZ2_bzflush (BZFILE *b)
< ;
< 
< 
< 
< void BZ_APIBZ2_bzclose (BZFILE* b)
< ;
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> int BZ_APIBZ2_bzflush (BZFILE *(BZFILE *b, int *errnum)
437,451c437
< int BZ_APIBZ2_bzflush (BZFILE *b)
< ;
< 
< 
< 
< void BZ_APIBZ2_bzclose (BZFILE* b)
< ;
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> int BZ_APIBZ2_bzflush (BZFILE *bBZFILE *b, int *errnum)
438,451c438
< ;
< 
< 
< 
< void BZ_APIBZ2_bzclose (BZFILE* b)
< ;
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> *b, int *errnum)
(96.0 %, 8217 bytes)
437,474d436
< ;
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
445,475c445
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
---
> define BZ_UNIX      1
445,475c445
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
---
> const BZ_UNIX      1
445,475c445
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
---
> const char 1
445,478c445
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
---
> const char * #define BZ_LCCWIN32  0
445,478c445
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
---
> const char * BZ_APIBZ2_bzerror define BZ_LCCWIN32  0
445,478c445
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
---
> const char * BZ_APIBZ2_bzerror (BZ_LCCWIN32  0
445,478c445
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
---
> const char * BZ_APIBZ2_bzerror (BZFILE 0
(96.0 %, 8122 bytes)
437,446d436
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
437,446d436
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
437,447c437
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
< #include <errno.h>
---
> #define <errno.h>
(96.1 %, 8049 bytes)
437,441c437
< #include <errno.h>
< 
< #define ERROR_IF_EOFi       
< #define ERROR_IF_NOT_ZEROi  
< #define ERROR_IF_MINUS_ONEi 
---
> ERROR_IF_MINUS_ONEi 
437,447c437
< #include <errno.h>
< 
< #define ERROR_IF_EOFi       
< #define ERROR_IF_NOT_ZEROi  
< #define ERROR_IF_MINUS_ONEi 
< 
< 
< 
< 
< 
< #if BZ_UNIX
---
> ##if BZ_UNIX
437,447c437
< #include <errno.h>
< 
< #define ERROR_IF_EOFi       
< #define ERROR_IF_NOT_ZEROi  
< #define ERROR_IF_MINUS_ONEi 
< 
< 
< 
< 
< 
< #if BZ_UNIX
---
> #include if BZ_UNIX
437,447c437
< #include <errno.h>
< 
< #define ERROR_IF_EOFi       
< #define ERROR_IF_NOT_ZEROi  
< #define ERROR_IF_MINUS_ONEi 
< 
< 
< 
< 
< 
< #if BZ_UNIX
---
> #include <BZ_UNIX
437,448c437
< #include <errno.h>
< 
< #define ERROR_IF_EOFi       
< #define ERROR_IF_NOT_ZEROi  
< #define ERROR_IF_MINUS_ONEi 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> #include <errno#   include <fcntl.h>
437,448c437
< #include <errno.h>
< 
< #define ERROR_IF_EOFi       
< #define ERROR_IF_NOT_ZEROi  
< #define ERROR_IF_MINUS_ONEi 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> #include <errno.include <fcntl.h>
437,448c437
< #include <errno.h>
< 
< #define ERROR_IF_EOFi       
< #define ERROR_IF_NOT_ZEROi  
< #define ERROR_IF_MINUS_ONEi 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> #include <errno.h<fcntl.h>
439,448c439
< #define ERROR_IF_EOFi       
< #define ERROR_IF_NOT_ZEROi  
< #define ERROR_IF_MINUS_ONEi 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> fcntl.h>
439,448c439
< #define ERROR_IF_EOFi       
< #define ERROR_IF_NOT_ZEROi  
< #define ERROR_IF_MINUS_ONEi 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> #.h>
439,448c439
< #define ERROR_IF_EOFi       
< #define ERROR_IF_NOT_ZEROi  
< #define ERROR_IF_MINUS_ONEi 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> #define h>
440,448c440
< #define ERROR_IF_NOT_ZEROi  
< #define ERROR_IF_MINUS_ONEi 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> >
440,449c440
< #define ERROR_IF_NOT_ZEROi  
< #define ERROR_IF_MINUS_ONEi 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
---
> ##   include <utime.h>
440,449c440
< #define ERROR_IF_NOT_ZEROi  
< #define ERROR_IF_MINUS_ONEi 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
---
> #define include <utime.h>
441,449c441
< #define ERROR_IF_MINUS_ONEi 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
---
> <utime.h>
441,449c441
< #define ERROR_IF_MINUS_ONEi 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
---
> #utime.h>
441,449c441
< #define ERROR_IF_MINUS_ONEi 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
---
> #define .h>
447,449c447
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
---
> h>
447,449c447
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
---
> #>
447,451c447
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
---
> #if #   define PATH_SEP    '/'
448,451c448
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
---
> define PATH_SEP    '/'
448,451c448
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
---
> #   PATH_SEP    '/'
(96.1 %, 8000 bytes)
448,451d447
< define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
448,452c448
< define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
---
> define define MY_S_ISDIR  S_ISDIR
448,452c448
< define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
---
> define PATH_SEP    MY_S_ISDIR  S_ISDIR
(96.2 %, 7889 bytes)
448,452d447
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPECroot, name \
<       root=snocStringroot, name
< 
448,452d447
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPECroot, name \
<       root=snocStringroot, name
< 
448,452d447
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPECroot, name \
<       root=snocStringroot, name
< 
(96.2 %, 7785 bytes)
448,453c448
< #   define APPEND_FLAGroot, name \
<       root=snocStringroot, name
< 
< #   define SET_BINARY_MODEfd 
< 
< #      define NORETURN 
---
> define NORETURN 
448,453c448
< #   define APPEND_FLAGroot, name \
<       root=snocStringroot, name
< 
< #   define SET_BINARY_MODEfd 
< 
< #      define NORETURN 
---
> #   NORETURN 
448,455c448
< #   define APPEND_FLAGroot, name \
<       root=snocStringroot, name
< 
< #   define SET_BINARY_MODEfd 
< 
< #      define NORETURN 
< 
< #endif 
---
> #   define #endif 
(96.3 %, 7679 bytes)
448,461c448
< define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  Bool1
< #define False Bool0
< 
< 
< typedef int IntNative;
---
> ;
448,475c448
< define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  Bool1
< #define False Bool0
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
---
> define #define SM_I2O           1
450,475c450
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  Bool1
< #define False Bool0
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
---
> define SM_I2O           1
450,475c450
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  Bool1
< #define False Bool0
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
---
> #SM_I2O           1
457,475c457
< #define True  Bool1
< #define False Bool0
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
---
> 1
457,476c457
< #define True  Bool1
< #define False Bool0
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
---
> ##define SM_F2O           2
457,476c457
< #define True  Bool1
< #define False Bool0
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
---
> #define define SM_F2O           2
457,476c457
< #define True  Bool1
< #define False Bool0
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
---
> #define True  SM_F2O           2
458,476c458
< #define False Bool0
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
---
> 2
458,477c458
< #define False Bool0
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
---
> ##define SM_F2F           3
458,477c458
< #define False Bool0
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
---
> #define define SM_F2F           3
458,477c458
< #define False Bool0
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
---
> #define False SM_F2F           3
461,477c461
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
---
> 3
461,480c461
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
---
> typedef #define OM_Z             1
461,480c461
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
---
> typedef int define OM_Z             1
461,480c461
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
---
> typedef int IntNativeOM_Z             1
475,480c475
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
---
> 1
475,481c475
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
< #define OM_UNZ           2
---
> ##define OM_UNZ           2
475,481c475
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
< #define OM_UNZ           2
---
> #define define OM_UNZ           2
475,481c475
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
< #define OM_UNZ           2
---
> #define SM_I2O           OM_UNZ           2
(96.3 %, 7576 bytes)
475,638c475
< #define define OM_UNZ           2
< #define OM_TEST          3
< 
< 
< 
< 
< #define FILE_NAME_LEN 1034
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
<    UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
---
> #define #if BZ_UNIX
475,638c475
< #define define OM_UNZ           2
< #define OM_TEST          3
< 
< 
< 
< 
< #define FILE_NAME_LEN 1034
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
<    UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
---
> #define define if BZ_UNIX
475,638c475
< #define define OM_UNZ           2
< #define OM_TEST          3
< 
< 
< 
< 
< #define FILE_NAME_LEN 1034
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
<    UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
---
> #define define OM_UNZ           BZ_UNIX
476,639d475
< #define OM_TEST          3
< 
< 
< 
< 
< #define FILE_NAME_LEN 1034
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
<    UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< 
476,639d475
< #define OM_TEST          3
< 
< 
< 
< 
< #define FILE_NAME_LEN 1034
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
<    UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< 
476,653c476
< #define OM_TEST          3
< 
< 
< 
< 
< #define FILE_NAME_LEN 1034
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
<    UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< 
< #endif
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_N_SUFFIX_PAIRS 4
---
> #define #define BZ_N_SUFFIX_PAIRS 4
476,653c476
< #define OM_TEST          3
< 
< 
< 
< 
< #define FILE_NAME_LEN 1034
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
<    UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< 
< #endif
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_N_SUFFIX_PAIRS 4
---
> #define OM_TEST          define BZ_N_SUFFIX_PAIRS 4
481,653c481
< #define FILE_NAME_LEN 1034
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
<    UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< 
< #endif
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_N_SUFFIX_PAIRS 4
---
> BZ_N_SUFFIX_PAIRS 4
481,653c481
< #define FILE_NAME_LEN 1034
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
<    UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< 
< #endif
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_N_SUFFIX_PAIRS 4
---
> #4
(96.4 %, 7326 bytes)
476,535c476
< #define OM_TEST          define BZ_N_SUFFIX_PAIRS 4
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct zzzz 
<    Cell;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ISFLAGs strcmpaa->name, s==0
---
> #define OM_TEST          s==0
476,535c476
< #define OM_TEST          define BZ_N_SUFFIX_PAIRS 4
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct zzzz 
<    Cell;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ISFLAGs strcmpaa->name, s==0
---
> #define OM_TEST          define ==0
476,535c476
< #define OM_TEST          define BZ_N_SUFFIX_PAIRS 4
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct zzzz 
<    Cell;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ISFLAGs strcmpaa->name, s==0
---
> #define OM_TEST          define BZ_N_SUFFIX_PAIRS 0
(96.5 %, 7179 bytes)
476,479c476
< #define OM_TEST          s==0
< 
< IntNative main ( IntNative argc, Char *argv[] )
< ;
---
> #define OM_TEST          ;
476,484c476
< #define OM_TEST          s==0
< 
< IntNative main ( IntNative argc, Char *argv[] )
< ;
< 
< 
< 
< 
<  
\ No newline at end of file
---
> #define OM_TEST          s
\ No newline at end of file
(96.5 %, 7125 bytes)
476,481c476
< #define OM_TEST          ;
< 
< 
< 
< 
<  
\ No newline at end of file
---
> #define OM_TEST          
\ No newline at end of file
(96.5 %, 7118 bytes)
===< pass_clex :: rm-toks-9 >===
9,11c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> define BZ_FLUSH_OK          2
9,11c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #BZ_FLUSH_OK          2
9,11c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #define 2
9,12c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> #define BZ_OK                #define BZ_FINISH_OK         3
10,12c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> define BZ_FINISH_OK         3
10,12c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> #BZ_FINISH_OK         3
10,12c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> #define 3
10,13c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
---
> #define BZ_RUN_OK            #define BZ_STREAM_END        9
11,13c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
---
> define BZ_STREAM_END        9
11,13c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
---
> #BZ_STREAM_END        9
11,13c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
---
> #define 9
11,15c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
< 
< typedef 
---
> #define BZ_FLUSH_OK          typedef 
12,16c12
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct {
---
> struct {
12,16c12
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct {
---
> #{
12,17c12
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct {
<       ;
---
> #define ;
12,19c12
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct {
<       ;
< 
<       ;
---
> #define BZ_FINISH_OK         ;
13,21c13
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct {
<       ;
< 
<       ;
< 
<       void *state;
---
> void *state;
13,21c13
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct {
<       ;
< 
<       ;
< 
<       void *state;
---
> #*state;
13,21c13
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct {
<       ;
< 
<       ;
< 
<       void *state;
---
> #define state;
13,21c13
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct {
<       ;
< 
<       ;
< 
<       void *state;
---
> #define BZ_STREAM_END        ;
15,22c15
< typedef 
<    struct {
<       ;
< 
<       ;
< 
<       void *state;
<       void ;
---
> void ;
16,22c16
<    struct {
<       ;
< 
<       ;
< 
<       void *state;
<       void ;
---
>    ;
16,23c16
<    struct {
<       ;
< 
<       ;
< 
<       void *state;
<       void ;
<    } 
---
>    struct } 
17,24c17
<       ;
< 
<       ;
< 
<       void *state;
<       void ;
<    } 
<    bz_stream;
---
>       bz_stream;
21,25d20
<       void *state;
<       void ;
<    } 
<    bz_stream;
< 
21,28c21
<       void *state;
<       void ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       #include <stdio.h>
21,28c21
<       void *state;
<       void ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void include <stdio.h>
21,28c21
<       void *state;
<       void ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *<stdio.h>
21,28c21
<       void *state;
<       void ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *statestdio.h>
22,28c22
<       void ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       .h>
22,28c22
<       void ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void h>
23,28c23
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    >
24,30c24
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    #   define BZ_API(func) func
24,30c24
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    bz_streamdefine BZ_API(func) func
28,30c28
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> BZ_API(func) func
28,30c28
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #(func) func
28,30c28
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include func) func
28,30c28
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <) func
28,30c28
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdiofunc
28,31c28
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <stdio.#   define BZ_EXTERN extern
28,31c28
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <stdio.hdefine BZ_EXTERN extern
30,31c30
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> BZ_EXTERN extern
30,31c30
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   extern
30,36c30
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
---
> #   define BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
30,36c30
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
---
> #   define BZ_APIint BZ_APIBZ2_bzCompressEnd ( 
30,36c30
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
---
> #   define BZ_API(BZ_APIBZ2_bzCompressEnd ( 
30,36c30
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
---
> #   define BZ_API(func( 
30,37c30
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
<       bz_stream* small
---
> #   define BZ_API(func) bz_stream* small
31,37c31
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
<       bz_stream* small
---
> * small
31,37c31
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
<       bz_stream* small
---
> #   small
31,38c31
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
<       bz_stream* small
<    );
---
> #   define );
31,38c31
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
<       bz_stream* small
<    );
---
> #   define BZ_EXTERN ;
36,39d35
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
<       bz_stream* small
<    );
< 
(96.6 %, 7039 bytes)
31,41c31
< #   define BZ_EXTERN ;
< 
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> #   define BZ_EXTERN void BZFILE;
33,41c33
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> BZFILE;
33,41c33
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> BZ_EXTERN ;
33,43c33
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
> BZ_EXTERN int BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
39,43c39
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
> BZFILE* BZ_APIBZ2_bzReadOpen ( 
39,43c39
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
> #* BZ_APIBZ2_bzReadOpen ( 
39,43c39
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
> #define BZ_APIBZ2_bzReadOpen ( 
39,43c39
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
> #define BZ_MAX_UNUSED ( 
41,44c41
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
> int*  bzerror,   
41,44c41
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
> typedef *  bzerror,   
41,44c41
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
> typedef void bzerror,   
41,44c41
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
> typedef void BZFILE,   
43,45c43
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
---
> FILE* f, 
43,45c43
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN * f, 
43,45c43
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILEf, 
43,45c43
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* , 
43,46c43
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen int   verbosity, 
44,46c44
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
>       verbosity, 
44,46c44
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
>       int, 
44,47c44
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       int*  int   small,
44,47c44
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       int*  bzerrorsmall,
45,47c45
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       ,
45,48c45
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       FILEvoid* unused,    
45,48c45
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       FILE* * unused,    
45,48c45
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       FILE* funused,    
46,48c46
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       ,    
46,49c46
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       int   int   nUnused 
46,49c46
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       int   verbositynUnused 
47,50c47
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       );
47,50c47
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       int   ;
47,52c47
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
>       int   smallBZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
48,52c48
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
>       void BZ_APIBZ2_bzReadClose ( 
48,52c48
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
>       voidBZ_APIBZ2_bzReadClose ( 
48,52c48
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
>       void* ( 
48,53c48
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
---
>       void* unusedint*    bzerror, 
49,53c49
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
---
>       *    bzerror, 
49,53c49
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
---
>       int   bzerror, 
50,53c50
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
---
>    , 
50,54c50
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
<       BZFILE* b 
---
>    )BZFILE* b 
52,54c52
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
<       BZFILE* b 
---
> * b 
52,54c52
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
<       BZFILE* b 
---
> BZ_EXTERN b 
52,55c52
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
---
> BZ_EXTERN void );
52,55c52
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
---
> BZ_EXTERN void BZ_APIBZ2_bzReadClose ;
53,57c53
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>       BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
53,57c53
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>       intvoid BZ_APIBZ2_bzReadGetUnused ( 
53,57c53
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>       int*    BZ_APIBZ2_bzReadGetUnused ( 
53,57c53
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>       int*    bzerror( 
54,57d53
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
54,58c54
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>       BZFILE*    bzerror, 
54,58c54
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>       BZFILE* bzerror, 
55,58c55
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>    , 
55,59c55
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>    )BZFILE* b, 
57,59c57
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> * b, 
57,59c57
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN b, 
57,59c57
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void , 
57,60c57
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused void**  unused,  
58,60c58
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       **  unused,  
58,60c58
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int*  unused,  
58,60c58
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int*    unused,  
58,60c58
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int*    bzerror,  
59,60d58
<       BZFILE* b, 
<       void**  unused,  
59,61c59
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       BZFILE*    nUnused 
59,61c59
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       BZFILE* nUnused 
59,62c59
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       BZFILE* b);
60,62c60
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       ;
60,64c60
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>       voidBZ_EXTERN int BZ_APIBZ2_bzRead ( 
60,64c60
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>       void*int BZ_APIBZ2_bzRead ( 
60,64c60
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>       void**  BZ_APIBZ2_bzRead ( 
60,64c60
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>       void**  unused( 
61,64d60
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
61,64d60
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
61,64d60
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
62,65c62
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>    , 
62,66c62
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>    )BZFILE* b, 
64,66c64
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> * b, 
64,66c64
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN b, 
64,66c64
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN int , 
64,67c64
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int BZ_APIBZ2_bzRead void*   buf, 
65,67c65
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       *   buf, 
65,67c65
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       intbuf, 
65,67c65
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int*    , 
65,68c65
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       int*    bzerrorint     len 
66,68c66
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       len 
66,69c66
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       BZFILE);
66,69c66
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       BZFILE* ;
66,71c66
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>       BZFILE* bBZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
67,71c67
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>       BZFILE* BZ_APIBZ2_bzWriteOpen ( 
67,71c67
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>       void* BZ_APIBZ2_bzWriteOpen ( 
67,71c67
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>       void*   BZ_APIBZ2_bzWriteOpen ( 
67,71c67
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>       void*   buf( 
68,71d67
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
68,72c68
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>       int     *  bzerror,      
69,72c69
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>    bzerror,      
69,72c69
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>    ),      
71,73c71
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
---
> FILE* f, 
71,73c71
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN * f, 
71,73c71
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILEf, 
71,73c71
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* , 
71,74c71
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen int   blockSize100k, 
72,74c72
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
>       blockSize100k, 
72,74c72
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
>       int, 
72,75c72
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int*  int   verbosity, 
72,75c72
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int*  bzerrorverbosity, 
73,75c73
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       , 
73,76c73
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       FILEint   workFactor 
73,76c73
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       FILE* workFactor 
73,77c73
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       FILE* f);
74,77c74
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       ;
74,79c74
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>       int   BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
74,79c74
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>       int   blockSize100kvoid BZ_APIBZ2_bzWrite ( 
75,79c75
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>       BZ_APIBZ2_bzWrite ( 
75,79c75
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>       int   ( 
75,80c75
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>       int   verbosityint*    bzerror, 
76,80c76
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>       *    bzerror, 
76,80c76
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>       int   bzerror, 
77,80c77
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>    , 
77,81c77
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>    )BZFILE* b, 
79,81c79
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> * b, 
79,81c79
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN b, 
79,81c79
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void , 
79,82c79
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite void*   buf, 
80,82c80
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       *   buf, 
80,82c80
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       intbuf, 
80,82c80
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int*    , 
80,83c80
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       int*    bzerrorint     len 
81,83c81
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       len 
81,84c81
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       BZFILE);
81,84c81
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       BZFILE* ;
81,86c81
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>       BZFILE* bBZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
82,86c82
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>       void BZ_APIBZ2_bzWriteClose ( 
82,86c82
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>       voidBZ_APIBZ2_bzWriteClose ( 
82,86c82
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>       void*   ( 
82,87c82
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>       void*   bufint*          bzerror, 
83,87c83
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>       *          bzerror, 
83,87c83
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>       int     bzerror, 
84,87c84
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>    , 
84,88c84
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    )BZFILE*       b, 
86,88c86
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> *       b, 
86,88c86
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN b, 
86,88c86
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void , 
86,89c86
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose int           abandon, 
87,89c87
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       abandon, 
87,89c87
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       int, 
87,90c87
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int*          unsigned int* nbytes_in, 
87,90c87
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int*          bzerrorint* nbytes_in, 
88,90c88
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       * nbytes_in, 
88,90c88
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       BZFILEnbytes_in, 
88,90c88
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       BZFILE*       , 
88,91c88
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       BZFILE*       bunsigned int* nbytes_out 
89,91c89
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int* nbytes_out 
89,91c89
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int           * nbytes_out 
89,91c89
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int           abandonnbytes_out 
90,92c90
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       );
90,92c90
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       unsigned ;
90,94c90
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>       unsigned intBZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
90,94c90
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>       unsigned int* void BZ_APIBZ2_bzWriteClose64 ( 
90,94c90
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>       unsigned int* nbytes_inBZ_APIBZ2_bzWriteClose64 ( 
91,94c91
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>       ( 
91,95c91
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>       unsigned int*          bzerror, 
91,95c91
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>       unsigned int*          bzerror, 
91,95c91
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>       unsigned int* bzerror, 
92,95c92
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>    , 
92,96c92
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    )BZFILE*       b, 
94,96c94
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> *       b, 
94,96c94
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN b, 
94,96c94
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void , 
94,97c94
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 int           abandon, 
95,97c95
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       abandon, 
95,97c95
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       int, 
95,98c95
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int*          unsigned int* nbytes_in_lo32, 
95,98c95
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int*          bzerrorint* nbytes_in_lo32, 
96,98c96
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       * nbytes_in_lo32, 
96,98c96
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       BZFILEnbytes_in_lo32, 
96,98c96
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       BZFILE*       , 
96,99c96
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       BZFILE*       bunsigned int* nbytes_in_hi32, 
97,99c97
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int* nbytes_in_hi32, 
97,99c97
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int           * nbytes_in_hi32, 
97,99c97
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int           abandonnbytes_in_hi32, 
98,99c98
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       , 
98,100c98
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned unsigned int* nbytes_out_lo32, 
98,100c98
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned intint* nbytes_out_lo32, 
98,100c98
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned int* * nbytes_out_lo32, 
98,100c98
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned int* nbytes_in_lo32nbytes_out_lo32, 
99,100c99
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       , 
99,101c99
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned unsigned int* nbytes_out_hi32
99,101c99
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned intint* nbytes_out_hi32
99,101c99
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned int* * nbytes_out_hi32
99,101c99
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned int* nbytes_in_hi32nbytes_out_hi32
100,102c100
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       );
100,102c100
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned ;
100,107c100
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>       unsigned intBZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
100,107c100
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>       unsigned int* int BZ_APIBZ2_bzBuffToBuffCompress ( 
100,107c100
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>       unsigned int* nbytes_out_lo32BZ_APIBZ2_bzBuffToBuffCompress ( 
101,107c101
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>       ( 
101,108c101
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>       unsigned char*         dest, 
101,108c101
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>       unsigned int*         dest, 
101,108c101
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>       unsigned int* dest, 
102,108c102
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>    , 
102,109c102
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    )unsigned int* destLen,
107,109c107
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> int* destLen,
107,109c107
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN * destLen,
107,109c107
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int destLen,
107,109c107
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ,
108,109d107
<       char*         dest, 
<       unsigned int* destLen,
108,109d107
<       char*         dest, 
<       unsigned int* destLen,
108,109d107
<       char*         dest, 
<       unsigned int* destLen,
109,110d108
<       unsigned int* destLen,
<       char*         source, 
109,110d108
<       unsigned int* destLen,
<       char*         source, 
109,110d108
<       unsigned int* destLen,
<       char*         source, 
109,111c109
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned intsourceLen,
109,111c109
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* ,
109,112c109
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       unsigned int* destLenint           blockSize100k, 
110,112c110
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       blockSize100k, 
110,112c110
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       char, 
110,113c110
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       char*         int           verbosity, 
110,113c110
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       char*         sourceverbosity, 
111,113c111
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       , 
111,114c111
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       unsigned int           workFactor 
111,114c111
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       unsigned int  workFactor 
111,115c111
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       unsigned int  sourceLen);
112,115c112
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       ;
112,117c112
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>       int           BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
112,117c112
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>       int           blockSize100kint BZ_APIBZ2_bzBuffToBuffDecompress ( 
113,117c113
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>       BZ_APIBZ2_bzBuffToBuffDecompress ( 
113,117c113
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>       int           ( 
113,118c113
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>       int           verbositychar*         dest, 
114,118c114
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>       *         dest, 
114,118c114
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>       int           dest, 
115,118c115
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>    , 
115,119c115
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    )unsigned int* destLen,
117,119c117
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> int* destLen,
117,119c117
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN * destLen,
117,119c117
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int destLen,
117,119c117
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ,
118,119d117
<       char*         dest, 
<       unsigned int* destLen,
118,119d117
<       char*         dest, 
<       unsigned int* destLen,
118,119d117
<       char*         dest, 
<       unsigned int* destLen,
119,120d118
<       unsigned int* destLen,
<       char*         source, 
119,120d118
<       unsigned int* destLen,
<       char*         source, 
119,120d118
<       unsigned int* destLen,
<       char*         source, 
119,121c119
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned intsourceLen,
119,121c119
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* ,
119,122c119
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       unsigned int* destLenint           small, 
120,122c120
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       small, 
120,122c120
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       char, 
120,123c120
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
---
>       char*         int           verbosity 
120,123c120
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
---
>       char*         sourceverbosity 
121,124c121
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
---
>       );
121,124c121
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
---
>       unsigned ;
121,129c121
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
---
>       unsigned int  BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
121,129c121
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
---
>       unsigned int  sourceLenconst char * BZ_APIBZ2_bzlibVersion (
122,129c122
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
---
>       char * BZ_APIBZ2_bzlibVersion (
122,129c122
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
---
>       int           * BZ_APIBZ2_bzlibVersion (
122,129c122
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
---
>       int           smallBZ_APIBZ2_bzlibVersion (
123,129c123
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
---
>       (
123,130c123
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
<       void
---
>       int           void
126,132d125
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
<       void
<    );
< 
126,132d125
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
<       void
<    );
< 
129,132d128
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
<       void
<    );
< 
(96.6 %, 6970 bytes)
124,140c124
<    );
< 
< ;
< 
< ;
< 
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
---
>    _BZLIB_PRIVATE_H
124,142c124
<    );
< 
< ;
< 
< ;
< 
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>    )#include <stdlib.h>
126,142c126
< ;
< 
< ;
< 
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> include <stdlib.h>
128,142c128
< ;
< 
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> <stdlib.h>
130,142c130
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> stdlib.h>
130,142c130
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> BZ_EXTERN .h>
130,142c130
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> BZ_EXTERN int h>
140,142c140
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> >
140,147c140
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> ##define BZ_VERSION  "1.0.2, 30-Dec-2001"
140,147c140
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define define BZ_VERSION  "1.0.2, 30-Dec-2001"
142,147c142
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> BZ_VERSION  "1.0.2, 30-Dec-2001"
142,147c142
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #"1.0.2, 30-Dec-2001"
142,149c142
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> #include typedef char            Char;
142,149c142
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> #include <char            Char;
142,149c142
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> #include <stdlibChar;
(96.6 %, 6927 bytes)
140,143c140
< #define define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #define char   Bool;
140,143c140
< #define define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #define define Bool;
140,143c140
< #define define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #define define BZ_VERSION  ;
142,143d141
< typedef char            Char;
< typedef unsigned char   Bool;
142,143d141
< typedef char            Char;
< typedef unsigned char   Bool;
142,144c142
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef char            char   UChar;
142,144c142
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef char            CharUChar;
143,144c143
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> ;
143,145c143
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef typedef int             Int32;
143,145c143
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef unsigned int             Int32;
143,145c143
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef unsigned char   Int32;
144,145d143
< typedef unsigned char   UChar;
< typedef int             Int32;
144,145d143
< typedef unsigned char   UChar;
< typedef int             Int32;
144,145d143
< typedef unsigned char   UChar;
< typedef int             Int32;
144,145d143
< typedef unsigned char   UChar;
< typedef int             Int32;
144,146c144
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned char   UInt32;
145,146d144
< typedef int             Int32;
< typedef unsigned int    UInt32;
145,146d144
< typedef int             Int32;
< typedef unsigned int    UInt32;
145,146d144
< typedef int             Int32;
< typedef unsigned int    UInt32;
145,147c145
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef int             Int16;
146,147d145
< typedef unsigned int    UInt32;
< typedef short           Int16;
146,147d145
< typedef unsigned int    UInt32;
< typedef short           Int16;
146,147d145
< typedef unsigned int    UInt32;
< typedef short           Int16;
146,147d145
< typedef unsigned int    UInt32;
< typedef short           Int16;
146,148c146
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16( int errcode );
---
> typedef unsigned int    UInt16( int errcode );
146,148c146
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16( int errcode );
---
> typedef unsigned int    UInt32( int errcode );
147,148c147
< typedef short           Int16;
< typedef unsigned short  UInt16( int errcode );
---
> int errcode );
147,148c147
< typedef short           Int16;
< typedef unsigned short  UInt16( int errcode );
---
> typedef errcode );
147,148c147
< typedef short           Int16;
< typedef unsigned short  UInt16( int errcode );
---
> typedef short           );
148d147
< typedef unsigned short  UInt16( int errcode );
(96.7 %, 6864 bytes)
146,148c146
< typedef unsigned int    UInt32( int errcode );
< #define AssertHcondzf
< #define VPrintf4zfza2za5
---
> typedef unsigned int    UInt32define VPrintf4zfza2za5
146,148c146
< typedef unsigned int    UInt32( int errcode );
< #define AssertHcondzf
< #define VPrintf4zfza2za5
---
> typedef unsigned int    UInt32( VPrintf4zfza2za5
146,151c146
< typedef unsigned int    UInt32( int errcode );
< #define AssertHcondzf
< #define VPrintf4zfza2za5
< 
< 
< #define BZ_HDR_h 0x68   
---
> typedef unsigned int    UInt32( int #define BZ_HDR_h 0x68   
146,151c146
< typedef unsigned int    UInt32( int errcode );
< #define AssertHcondzf
< #define VPrintf4zfza2za5
< 
< 
< #define BZ_HDR_h 0x68   
---
> typedef unsigned int    UInt32( int errcode define BZ_HDR_h 0x68   
146,151c146
< typedef unsigned int    UInt32( int errcode );
< #define AssertHcondzf
< #define VPrintf4zfza2za5
< 
< 
< #define BZ_HDR_h 0x68   
---
> typedef unsigned int    UInt32( int errcode )BZ_HDR_h 0x68   
147,151c147
< #define AssertHcondzf
< #define VPrintf4zfza2za5
< 
< 
< #define BZ_HDR_h 0x68   
---
> 0x68   
147,152c147
< #define AssertHcondzf
< #define VPrintf4zfza2za5
< 
< 
< #define BZ_HDR_h 0x68   
< #define BZ_HDR_0 0x30   
---
> ##define BZ_HDR_0 0x30   
147,152c147
< #define AssertHcondzf
< #define VPrintf4zfza2za5
< 
< 
< #define BZ_HDR_h 0x68   
< #define BZ_HDR_0 0x30   
---
> #define define BZ_HDR_0 0x30   
148,152c148
< #define VPrintf4zfza2za5
< 
< 
< #define BZ_HDR_h 0x68   
< #define BZ_HDR_0 0x30   
---
> BZ_HDR_0 0x30   
148,152c148
< #define VPrintf4zfza2za5
< 
< 
< #define BZ_HDR_h 0x68   
< #define BZ_HDR_0 0x30   
---
> #0x30   
148,156c148
< #define VPrintf4zfza2za5
< 
< 
< #define BZ_HDR_h 0x68   
< #define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
---
> #define #define BZ_MAX_ALPHA_SIZE 258
151,156c151
< #define BZ_HDR_h 0x68   
< #define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
---
> define BZ_MAX_ALPHA_SIZE 258
151,156c151
< #define BZ_HDR_h 0x68   
< #define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
---
> #BZ_MAX_ALPHA_SIZE 258
151,156c151
< #define BZ_HDR_h 0x68   
< #define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
---
> #define 258
151,157c151
< #define BZ_HDR_h 0x68   
< #define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
---
> #define BZ_HDR_h #define BZ_MAX_CODE_LEN    23
(96.7 %, 6797 bytes)
147,151d146
< #define define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
147,152c147
< #define define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
---
> #define define 23
147,154c147
< #define define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
---
> #define define BZ_HDR_0 #define BZ_RUNA 0
(96.7 %, 6730 bytes)
147,150c147
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
---
> #define 1
147,152c147
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> #define BZ_MAX_CODE_LEN    #define BZ_N_GROUPS 6
149,152c149
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> define BZ_N_GROUPS 6
149,152c149
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> #BZ_N_GROUPS 6
149,152c149
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> #define 6
149,153c149
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define BZ_RUNA #define BZ_G_SIZE   50
(96.7 %, 6689 bytes)
147,149c147
< #define BZ_MAX_CODE_LEN    #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define BZ_MAX_CODE_LEN    define BZ_N_ITERS  4
147,149c147
< #define BZ_MAX_CODE_LEN    #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define BZ_MAX_CODE_LEN    #BZ_N_ITERS  4
(96.8 %, 6643 bytes)
147,149c147
< #define BZ_MAX_CODE_LEN    define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
---
> #define BZ_MAX_CODE_LEN    / BZ_G_SIZE
147,149c147
< #define BZ_MAX_CODE_LEN    define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
---
> #define BZ_MAX_CODE_LEN    define BZ_G_SIZE
(96.8 %, 6585 bytes)
147,156c147
< #define BZ_MAX_CODE_LEN    / BZ_G_SIZE
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_MAX_CODE_LEN    \
147,157c147
< #define BZ_MAX_CODE_LEN    / BZ_G_SIZE
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #define BZ_MAX_CODE_LEN    / Int32 rTPos                                 \
155,157c155
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> rTPos                                 \
(96.8 %, 6470 bytes)
147,152c147
< #define BZ_MAX_CODE_LEN    \
<    Int32 rTPos                                 \
< 
< #\
< 
< #define BZ_RAND_MASK + 2
---
> #define BZ_MAX_CODE_LEN    + 2
148,152c148
<    Int32 rTPos                                 \
< 
< #\
< 
< #define BZ_RAND_MASK + 2
---
>    2
(96.9 %, 6393 bytes)
147,161c147
< #define BZ_MAX_CODE_LEN    + 2
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream;
< 
<       
<       UInt32   ;
<       Int32    state_out_pos[4];
---
> #define BZ_MAX_CODE_LEN    Int32    state_out_pos[4];
147,161c147
< #define BZ_MAX_CODE_LEN    + 2
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream;
< 
<       
<       UInt32   ;
<       Int32    state_out_pos[4];
---
> #define BZ_MAX_CODE_LEN    + state_out_pos[4];
154,161c154
< typedef
<    struct {
<       
<       bz_stream;
< 
<       
<       UInt32   ;
<       Int32    state_out_pos[4];
---
> [4];
155,161c155
<    struct {
<       
<       bz_stream;
< 
<       
<       UInt32   ;
<       Int32    state_out_pos[4];
---
>    4];
155,161c155
<    struct {
<       
<       bz_stream;
< 
<       
<       UInt32   ;
<       Int32    state_out_pos[4];
---
>    struct ];
157,161c157
<       bz_stream;
< 
<       
<       UInt32   ;
<       Int32    state_out_pos[4];
---
>       ;
157,163c157
<       bz_stream;
< 
<       
<       UInt32   ;
<       Int32    state_out_pos[4];
< 
<    }
---
>       bz_stream}
(96.9 %, 6326 bytes)
157,180c157
<       ;
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define #define BZ_X_CCRC_4      50
---
>       #define BZ_X_CCRC_4      50
159,180c159
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define #define BZ_X_CCRC_4      50
---
>    define BZ_X_CCRC_4      50
160,180c160
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define #define BZ_X_CCRC_4      50
---
>    BZ_X_CCRC_4      50
160,180c160
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define #define BZ_X_CCRC_4      50
---
>    EState50
168,185d167
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
170,186c170
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
---
> define MTFA_SIZE 4096
180,186c180
< #define define #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
---
> MTFA_SIZE 4096
180,186c180
< #define define #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
---
> #4096
180,187c180
< #define define #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> #define #define MTFL_SIZE 16
180,187c180
< #define define #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> #define define define MTFL_SIZE 16
180,187c180
< #define define #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> #define define #MTFL_SIZE 16
180,187c180
< #define define #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> #define define #define 16
(96.9 %, 6264 bytes)
168,176c168
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> struct {
168,176c168
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #{
168,178c168
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       Int32    seqToUnseq[256];
---
> #define Int32    seqToUnseq[256];
168,178c168
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       Int32    seqToUnseq[256];
---
> #define MTFA_SIZE seqToUnseq[256];
169,178c169
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       Int32    seqToUnseq[256];
---
> [256];
169,178c169
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       Int32    seqToUnseq[256];
---
> #256];
169,178c169
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       Int32    seqToUnseq[256];
---
> #define ];
169,178c169
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       Int32    seqToUnseq[256];
---
> #define MTFL_SIZE ;
175,181c175
< typedef
<    struct {
<       
<       Int32    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
> UChar    mtfa   [MTFA_SIZE];
176,181c176
<    struct {
<       
<       Int32    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
>    mtfa   [MTFA_SIZE];
176,181c176
<    struct {
<       
<       Int32    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
>    struct [MTFA_SIZE];
178,181c178
<       Int32    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
>       MTFA_SIZE];
178,181c178
<       Int32    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
>       Int32    ];
178,181c178
<       Int32    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
>       Int32    seqToUnseq;
178,182c178
<       Int32    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE]; 
---
>       Int32    seqToUnseq[Int32    mtfbase[256 / MTFL_SIZE]; 
178,182c178
<       Int32    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE]; 
---
>       Int32    seqToUnseq[256mtfbase[256 / MTFL_SIZE]; 
178,182c178
<       Int32    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE]; 
---
>       Int32    seqToUnseq[256][256 / MTFL_SIZE]; 
(97.0 %, 6216 bytes)
179,180d178
<       Int32    mtfbase[256 / MTFL_SIZE]; 
<       ;
179,180d178
<       Int32    mtfbase[256 / MTFL_SIZE]; 
<       ;
(97.0 %, 6166 bytes)
178,182c178
<       Int32    seqToUnseq;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
---
>       Int32    seqToUnseq}
179,183c179
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
---
>       DState;
179,183c179
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
---
>       Int32;
179,189c179
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define \
---
>       Int32*   #define \
179,189c179
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define \
---
>       Int32*   save_gBasedefine \
180,189c180
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define \
---
>       \
180,190c180
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define \
<     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>       Int32cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
(97.0 %, 6106 bytes)
178,186c178
<       Int32    seqToUnseq}
<    DState;
< 
< 
< 
< 
< 
< #define \
<     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>       Int32    seqToUnseqEState* s int BZ_APIBZ2_bzCompressEnd  ( int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
179,186c179
<    DState;
< 
< 
< 
< 
< 
< #define \
<     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>    * s int BZ_APIBZ2_bzCompressEnd  ( int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
179,186c179
<    DState;
< 
< 
< 
< 
< 
< #define \
<     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>    DStates int BZ_APIBZ2_bzCompressEnd  ( int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
185,186c185
< #define \
<     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
> int BZ_APIBZ2_bzCompressEnd  ( int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
185,186c185
< #define \
<     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
> #BZ_APIBZ2_bzCompressEnd  ( int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
185,186c185
< #define \
<     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
> #define ( int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
186c186
<     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>     int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
186c186
<     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>     cccc BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
186c186
<     cccc isempty_RL ( EState* s int BZ_APIBZ2_bzCompressEnd  ( int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
>     cccc isempty_RL ( bz_stream *strm )
(97.0 %, 6048 bytes)
186,194c186
<     cccc BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERReee                    \
---
>     cccc BZ_SETERReee                    \
186,194c186
<     cccc BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERReee                    \
---
>     cccc BZ_APIBZ2_bzDecompressEnd  \
186,197c186
<     cccc BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERReee                    \
< 
< 
< typedef 
---
>     cccc BZ_APIBZ2_bzDecompressEnd  ( typedef 
(97.1 %, 5985 bytes)
186,193c186
<     cccc BZ_SETERReee                    \
< 
< 
< typedef 
<    struct {
<       ;
<       bz_stream strm;
<       Int32     lastErr;
---
>     cccc Int32     lastErr;
186,193c186
<     cccc BZ_SETERReee                    \
< 
< 
< typedef 
<    struct {
<       ;
<       bz_stream strm;
<       Int32     lastErr;
---
>     cccc BZ_SETERReee                    lastErr;
189,193c189
< typedef 
<    struct {
<       ;
<       bz_stream strm;
<       Int32     lastErr;
---
> ;
190,194c190
<    struct {
<       ;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>    Bool      initialisedOk;
190,194c190
<    struct {
<       ;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>    struct initialisedOk;
192,194d191
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
192,195c192
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>       }
(97.1 %, 5907 bytes)
191,202c191
<       ;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>       *  bzerror,      
192,202c192
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>    bzerror,      
193,202c193
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>    ,      
193,203c193
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>    bzFileFILE* f, 
201,203c201
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> * f, 
201,203c201
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILEf, 
201,203c201
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* , 
202,204c202
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     int   blockSize100k, 
202,204c202
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     ( blockSize100k, 
202,204c202
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     ( int, 
202,205c202
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( int*  int   verbosity,
202,205c202
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( int*  bzerrorverbosity,
203,205c203
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       ,
203,206c203
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       FILEint   workFactor )
203,206c203
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       FILE* workFactor )
203,206c203
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       FILE* f)
204,207c204
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
---
>                       ;
204,212c204
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
---
>                       int   void BZ_APIBZ2_bzWrite
204,212c204
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
---
>                       int   blockSize100kBZ_APIBZ2_bzWrite
205,213c205
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>                       ( int*    bzerror, 
205,213c205
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>                       int   int*    bzerror, 
205,213c205
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>                       int   verbosity*    bzerror, 
206,213c206
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>                       bzerror, 
206,213c206
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>                       int   , 
206,214c206
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>                       int   workFactor BZFILE* b, 
207,214c207
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> * b, 
212,214c212
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> b, 
212,214c212
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> void , 
213,215c213
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              void*   buf, 
213,215c213
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( *   buf, 
213,215c213
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( intbuf, 
213,215c213
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( int*    , 
213,216c213
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              ( int*    bzerrorint     len )
214,216c214
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>                len )
214,216c214
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>                BZFILE)
214,217c214
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
---
>                BZFILE* ;
214,221c214
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
---
>                BZFILE* bvoid BZ_APIBZ2_bzWriteClose
215,221c215
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
---
>                BZ_APIBZ2_bzWriteClose
215,222c215
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>                void( int*          bzerror, 
215,222c215
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>                void*   int*          bzerror, 
215,222c215
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>                void*   buf*          bzerror, 
216,222c216
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>                bzerror, 
216,222c216
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>                int     , 
216,223c216
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                int     len BZFILE*       b, 
217,223c217
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> *       b, 
221,223c221
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> b, 
221,223c221
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void , 
222,224c222
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   int           abandon,
222,224c222
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( abandon,
222,224c222
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int,
222,225c222
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( int*          unsigned int* nbytes_in,
222,225c222
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( int*          bzerrorint* nbytes_in,
223,225c223
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     * nbytes_in,
223,225c223
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     BZFILEnbytes_in,
223,225c223
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     BZFILE*       ,
223,226c223
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     BZFILE*       bunsigned int* nbytes_out )
224,226c224
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     int* nbytes_out )
224,226c224
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     int           * nbytes_out )
224,226c224
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     int           abandonnbytes_out )
225,226c225
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     )
225,227c225
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
---
>                     unsigned ;
225,230c225
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
---
>                     unsigned intvoid BZ_APIBZ2_bzWriteClose64
225,230c225
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
---
>                     unsigned int* BZ_APIBZ2_bzWriteClose64
225,231c225
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     unsigned int* nbytes_in( int*          bzerror, 
226,231c226
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     int*          bzerror, 
226,231c226
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     unsigned *          bzerror, 
226,231c226
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     unsigned intbzerror, 
226,231c226
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     unsigned int* , 
226,232c226
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                     unsigned int* nbytes_out BZFILE*       b, 
227,232c227
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> *       b, 
230,232c230
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> b, 
230,232c230
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void , 
231,233c231
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   int           abandon,
231,233c231
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( abandon,
231,233c231
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int,
231,234c231
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( int*          unsigned int* nbytes_in_lo32,
231,234c231
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( int*          bzerrorint* nbytes_in_lo32,
232,234c232
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     * nbytes_in_lo32,
232,234c232
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     BZFILEnbytes_in_lo32,
232,234c232
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     BZFILE*       ,
232,235c232
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     BZFILE*       bunsigned int* nbytes_in_hi32,
233,235c233
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     int* nbytes_in_hi32,
233,235c233
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     int           * nbytes_in_hi32,
233,235c233
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     int           abandonnbytes_in_hi32,
234,235c234
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     ,
234,236c234
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned unsigned int* nbytes_out_lo32,
234,236c234
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned intint* nbytes_out_lo32,
234,236c234
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned int* * nbytes_out_lo32,
234,236c234
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned int* nbytes_in_lo32nbytes_out_lo32,
235,236c235
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     ,
235,237c235
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned unsigned int* nbytes_out_hi32 )
235,237c235
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned intint* nbytes_out_hi32 )
235,237c235
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* * nbytes_out_hi32 )
235,237c235
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_in_hi32nbytes_out_hi32 )
236,237c236
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     )
236,238c236
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
---
>                     unsigned ;
236,242c236
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
---
>                     unsigned intBZFILE* BZ_APIBZ2_bzReadOpen 
236,242c236
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
---
>                     unsigned int* * BZ_APIBZ2_bzReadOpen 
236,242c236
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
---
>                     unsigned int* nbytes_out_lo32BZ_APIBZ2_bzReadOpen 
237,243c237
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     ( int*  bzerror, 
237,243c237
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     unsigned int*  bzerror, 
237,243c237
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     unsigned int*  bzerror, 
237,243c237
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     unsigned int* bzerror, 
237,243c237
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     unsigned int* nbytes_out_hi32 , 
238,244c238
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> FILE* f, 
242,244c242
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> * f, 
242,244c242
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILEf, 
242,244c242
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILE* , 
243,245c243
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    int   verbosity,
243,245c243
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    ( verbosity,
243,245c243
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    ( int,
243,246c243
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    ( int*  int   small,
243,246c243
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    ( int*  bzerrorsmall,
244,246c244
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                      ,
244,247c244
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      FILEvoid* unused,
244,247c244
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      FILE* * unused,
244,247c244
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      FILE* funused,
245,247c245
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      ,
245,248c245
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      int   int   nUnused )
245,248c245
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      int   verbositynUnused )
246,248c246
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      )
246,249c246
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
---
>                      int   ;
246,253c246
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>                      int   smallvoid BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
247,253c247
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>                      BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
247,253c247
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>                      void( int *bzerror, BZFILE *b )
247,253c247
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>                      void* int *bzerror, BZFILE *b )
247,253c247
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>                      void* unused*bzerror, BZFILE *b )
248,253c248
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>                      bzerror, BZFILE *b )
248,253c248
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>                      int   , BZFILE *b )
248,253c248
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>                      int   nUnused BZFILE *b )
249,253c249
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> *b )
253c253
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> b )
253c253
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void )
253,254c253
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
---
> void BZ_APIBZ2_bzReadClose ;
253,258c253
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
---
> void BZ_APIBZ2_bzReadClose ( int BZ_APIBZ2_bzRead 
253,258c253
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
---
> void BZ_APIBZ2_bzReadClose ( int BZ_APIBZ2_bzRead 
253,259c253
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
> void BZ_APIBZ2_bzReadClose ( int *( int*    bzerror, 
253,259c253
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
> void BZ_APIBZ2_bzReadClose ( int *bzerrorint*    bzerror, 
253,259c253
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, *    bzerror, 
253,259c253
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE bzerror, 
253,259c253
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *, 
253,260c253
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b BZFILE* b, 
254,260c254
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> * b, 
258,260c258
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> b, 
258,260c258
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> int , 
259,261c259
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            void*   buf, 
259,261c259
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( *   buf, 
259,261c259
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( intbuf, 
259,261c259
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( int*    , 
259,262c259
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            ( int*    bzerrorint     len )
260,262c260
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>              len )
260,262c260
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>              BZFILE)
260,263c260
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< ;
---
>              BZFILE* ;
260,267c260
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
---
>              BZFILE* bvoid BZ_APIBZ2_bzReadGetUnused 
261,267c261
<              void*   buf, 
<              int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
---
>              BZ_APIBZ2_bzReadGetUnused 
261,268c261
<              void*   buf, 
<              int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>              void( int*    bzerror, 
261,268c261
<              void*   buf, 
<              int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>              void*   int*    bzerror, 
261,268c261
<              void*   buf, 
<              int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>              void*   buf*    bzerror, 
262,268c262
<              int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>              bzerror, 
262,268c262
<              int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>              int     , 
262,269c262
<              int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>              int     len BZFILE* b, 
263,269c263
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> * b, 
267,269c267
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> b, 
267,269c267
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> void , 
268,270c268
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      void**  unused, 
268,270c268
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( **  unused, 
268,270c268
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( int*  unused, 
268,270c268
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( int*    unused, 
269,270d268
<                        BZFILE* b, 
<                        void**  unused, 
269,270d268
<                        BZFILE* b, 
<                        void**  unused, 
269,271c269
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        BZFILE*    nUnused )
269,271c269
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        BZFILE* nUnused )
269,271c269
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        BZFILE* b)
270,272c270
<                        void**  unused, 
<                        int*    nUnused )
< ;
---
>                        ;
270,280c270
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
---
>                        voidint BZ_APIBZ2_bzBuffToBuffCompress 
270,280c270
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
---
>                        void*BZ_APIBZ2_bzBuffToBuffCompress 
270,281c270
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>                        void**  ( char*         dest, 
270,281c270
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>                        void**  unusedchar*         dest, 
271,281c271
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>                        *         dest, 
271,281c271
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>                        intdest, 
271,281c271
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>                        int*    , 
271,282c271
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                        int*    nUnused unsigned int* destLen,
272,282c272
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int* destLen,
280,282c280
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> * destLen,
280,282c280
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int destLen,
281,282c281
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ,
281,283c281
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          ( char*         source, 
281,283c281
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          ( char*         source, 
281,283c281
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          ( char*         source, 
282,283d281
<                            unsigned int* destLen,
<                            char*         source, 
282,283d281
<                            unsigned int* destLen,
<                            char*         source, 
282,283d281
<                            unsigned int* destLen,
<                            char*         source, 
282,284c282
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            unsigned intsourceLen,
282,284c282
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            unsigned int* ,
282,285c282
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned int* destLenint           blockSize100k, 
283,285c283
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            blockSize100k, 
283,285c283
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            char, 
283,286c283
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            char*         int           verbosity, 
283,286c283
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            char*         sourceverbosity, 
284,286c284
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            , 
284,287c284
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            unsigned int           workFactor )
284,287c284
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            unsigned int  workFactor )
284,287c284
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            unsigned int  sourceLen)
285,288c285
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
---
>                            ;
285,292c285
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
---
>                            int           int BZ_APIBZ2_bzBuffToBuffDecompress 
285,292c285
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
---
>                            int           blockSize100kBZ_APIBZ2_bzBuffToBuffDecompress 
286,292d285
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
286,293c286
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            int           char*         dest, 
286,293c286
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            int           verbosity*         dest, 
287,293c287
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            dest, 
287,293c287
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            int           , 
287,294c287
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            int           workFactor unsigned int* destLen,
288,294c288
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int* destLen,
292,294c292
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> * destLen,
292,294c292
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int destLen,
293,294c293
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ,
293,295c293
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( char*         source, 
293,295c293
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( char*         source, 
293,295c293
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( char*         source, 
294,295d293
<                              unsigned int* destLen,
<                              char*         source, 
294,295d293
<                              unsigned int* destLen,
<                              char*         source, 
294,295d293
<                              unsigned int* destLen,
<                              char*         source, 
294,296c294
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              unsigned intsourceLen,
294,296c294
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              unsigned int* ,
294,297c294
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned int* destLenint           small,
295,297c295
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              small,
295,297c295
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              char,
295,298c295
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              char*         int           verbosity )
295,298c295
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              char*         sourceverbosity )
296,298c296
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              )
296,299c296
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
---
>                              unsigned ;
296,308c296
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_APIBZ2_bzlibVersionvoid
---
>                              unsigned int  const char * BZ_APIBZ2_bzlibVersionvoid
296,308c296
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_APIBZ2_bzlibVersionvoid
---
>                              unsigned int  sourceLenchar * BZ_APIBZ2_bzlibVersionvoid
297,308c297
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_APIBZ2_bzlibVersionvoid
---
>                              * BZ_APIBZ2_bzlibVersionvoid
297,308c297
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_APIBZ2_bzlibVersionvoid
---
>                              int           BZ_APIBZ2_bzlibVersionvoid
297,309c297
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_APIBZ2_bzlibVersionvoid
< ;
---
>                              int           small;
298,314c298
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_APIBZ2_bzlibVersionvoid
< ;
< 
< 
< 
< 
< static
---
>                              static
298,315c298
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_APIBZ2_bzlibVersionvoid
< ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
>                              int           BZFILE * bzopen_or_bzdopen
298,315c298
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_APIBZ2_bzlibVersionvoid
< ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
>                              int           verbosity * bzopen_or_bzdopen
299,315c299
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_APIBZ2_bzlibVersionvoid
< ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
> bzopen_or_bzdopen
308,316c308
< const char * BZ_APIBZ2_bzlibVersionvoid
< ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )
---
> ( )
308,316c308
< const char * BZ_APIBZ2_bzlibVersionvoid
< ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )
---
> const )
308,317c308
< const char * BZ_APIBZ2_bzlibVersionvoid
< ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )
< ;
---
> const char ;
308,321c308
< const char * BZ_APIBZ2_bzlibVersionvoid
< ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )
< ;
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzdopen
---
> const char * BZFILE * BZ_APIBZ2_bzdopen
309,321c309
< ;
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )
< ;
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzdopen
---
> * BZ_APIBZ2_bzdopen
314,321c314
< static
< BZFILE * bzopen_or_bzdopen
<                ( )
< ;
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzdopen
---
> BZ_APIBZ2_bzdopen
(97.2 %, 5819 bytes)
308,314c308
< const char ;
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzdopen
<                ( int fd,
<                  const char *mode )
---
> const char char *mode )
312,314c312
< BZFILE * BZ_APIBZ2_bzdopen
<                ( int fd,
<                  const char *mode )
---
> *mode )
312,314c312
< BZFILE * BZ_APIBZ2_bzdopen
<                ( int fd,
<                  const char *mode )
---
> BZFILE mode )
312,314c312
< BZFILE * BZ_APIBZ2_bzdopen
<                ( int fd,
<                  const char *mode )
---
> BZFILE * )
313,315c313
<                ( int fd,
<                  const char *mode )
< ;
---
>                ;
313,319c313
<                ( int fd,
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
---
>                ( int BZ_APIBZ2_bzread_nread;
313,319c313
<                ( int fd,
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
---
>                ( int BZ_APIBZ2_bzread_nread;
313,319c313
<                ( int fd,
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
---
>                ( int fd;
314,320c314
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>                  int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
314,320c314
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>                  const BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
314,320c314
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>                  const char (BZFILE* b, void* buf, int len )
314,320c314
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>                  const char *BZFILE* b, void* buf, int len )
314,320c314
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>                  const char *mode * b, void* buf, int len )
(97.2 %, 5773 bytes)
313,318c313
<                ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>                b, void* buf, int len )
317,318c317
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> , void* buf, int len )
317,318c317
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> int void* buf, int len )
317,318c317
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> int BZ_APIBZ2_bzread_nread* buf, int len )
318c318
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> buf, int len )
318c318
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> int , int len )
318c318
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> int BZ_APIBZ2_bzread int len )
318c318
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> int BZ_APIBZ2_bzread (len )
318c318
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> int BZ_APIBZ2_bzread (BZFILE)
(97.2 %, 5747 bytes)
318,322c318
< int BZ_APIBZ2_bzread (len )
< {
<    int bzerr;
<    0;
<    BZ_APIBZ2_bzread_nread = 0;
---
> int BZ_APIBZ2_bzread (= 0;
318,322c318
< int BZ_APIBZ2_bzread (len )
< {
<    int bzerr;
<    0;
<    BZ_APIBZ2_bzread_nread = 0;
---
> int BZ_APIBZ2_bzread (len 0;
319,322c319
< {
<    int bzerr;
<    0;
<    BZ_APIBZ2_bzread_nread = 0;
---
> ;
320,322d319
<    int bzerr;
<    0;
<    BZ_APIBZ2_bzread_nread = 0;
320,323c320
<    int bzerr;
<    0;
<    BZ_APIBZ2_bzread_nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
320,323c320
<    int bzerr;
<    0;
<    BZ_APIBZ2_bzread_nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerrbzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
321,323c321
<    0;
<    BZ_APIBZ2_bzread_nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
321,323c321
<    0;
<    BZ_APIBZ2_bzread_nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    0BZ_OK || bzerr == BZ_STREAM_END) ; else ;
322,323c322
<    BZ_APIBZ2_bzread_nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    || bzerr == BZ_STREAM_END) ; else ;
322,323c322
<    BZ_APIBZ2_bzread_nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    BZ_APIBZ2_bzread_nread bzerr == BZ_STREAM_END) ; else ;
322,323c322
<    BZ_APIBZ2_bzread_nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    BZ_APIBZ2_bzread_nread = == BZ_STREAM_END) ; else ;
322,323c322
<    BZ_APIBZ2_bzread_nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    BZ_APIBZ2_bzread_nread = 0BZ_STREAM_END) ; else ;
323c323
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    ) ; else ;
323c323
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if ; else ;
323c323
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (else ;
323c323
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (bzerr ;
323,324c323
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
---
>    if (bzerr == }
323,328c323
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< #include <errno.h>
---
>    if (bzerr == BZ_OK #include <errno.h>
323,328c323
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< #include <errno.h>
---
>    if (bzerr == BZ_OK || include <errno.h>
323,328c323
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< #include <errno.h>
---
>    if (bzerr == BZ_OK || bzerr <errno.h>
323,328c323
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< #include <errno.h>
---
>    if (bzerr == BZ_OK || bzerr == errno.h>
323,328c323
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< #include <errno.h>
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END.h>
323,328c323
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< #include <errno.h>
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) h>
323,328c323
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< #include <errno.h>
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; >
323,330c323
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< #include <errno.h>
< 
< #define ERROR_IF_EOFi       
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else #define ERROR_IF_EOFi       
324,330c324
< }
< 
< 
< 
< #include <errno.h>
< 
< #define ERROR_IF_EOFi       
---
> define ERROR_IF_EOFi       
328,330c328
< #include <errno.h>
< 
< #define ERROR_IF_EOFi       
---
> ERROR_IF_EOFi       
328,331c328
< #include <errno.h>
< 
< #define ERROR_IF_EOFi       
< #define ERROR_IF_NOT_ZEROi  
---
> ##define ERROR_IF_NOT_ZEROi  
328,331c328
< #include <errno.h>
< 
< #define ERROR_IF_EOFi       
< #define ERROR_IF_NOT_ZEROi  
---
> #include define ERROR_IF_NOT_ZEROi  
328,331c328
< #include <errno.h>
< 
< #define ERROR_IF_EOFi       
< #define ERROR_IF_NOT_ZEROi  
---
> #include <ERROR_IF_NOT_ZEROi  
328,332c328
< #include <errno.h>
< 
< #define ERROR_IF_EOFi       
< #define ERROR_IF_NOT_ZEROi  
< #define ERROR_IF_MINUS_ONEi 
---
> #include <errno#define ERROR_IF_MINUS_ONEi 
328,332c328
< #include <errno.h>
< 
< #define ERROR_IF_EOFi       
< #define ERROR_IF_NOT_ZEROi  
< #define ERROR_IF_MINUS_ONEi 
---
> #include <errno.define ERROR_IF_MINUS_ONEi 
328,332c328
< #include <errno.h>
< 
< #define ERROR_IF_EOFi       
< #define ERROR_IF_NOT_ZEROi  
< #define ERROR_IF_MINUS_ONEi 
---
> #include <errno.hERROR_IF_MINUS_ONEi 
330,337d329
< #define ERROR_IF_EOFi       
< #define ERROR_IF_NOT_ZEROi  
< #define ERROR_IF_MINUS_ONEi 
< 
< 
< 
< 
< 
330,337d329
< #define ERROR_IF_EOFi       
< #define ERROR_IF_NOT_ZEROi  
< #define ERROR_IF_MINUS_ONEi 
< 
< 
< 
< 
< 
(97.2 %, 5655 bytes)
330,340c330
< #if BZ_UNIX
< define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  Bool1
---
> True  Bool1
330,340c330
< #if BZ_UNIX
< define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  Bool1
---
> #Bool1
330,341c330
< #if BZ_UNIX
< define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  Bool1
< #define False Bool0
---
> #if #define False Bool0
331,341c331
< define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  Bool1
< #define False Bool0
---
> define False Bool0
331,341c331
< define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  Bool1
< #define False Bool0
---
> define False Bool0
333,341c333
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  Bool1
< #define False Bool0
---
> Bool0
333,344c333
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  Bool1
< #define False Bool0
< 
< 
< typedef int IntNative;
---
> #typedef int IntNative;
340,344c340
< #define True  Bool1
< #define False Bool0
< 
< 
< typedef int IntNative;
---
> int IntNative;
340,344c340
< #define True  Bool1
< #define False Bool0
< 
< 
< typedef int IntNative;
---
> #IntNative;
340,344c340
< #define True  Bool1
< #define False Bool0
< 
< 
< typedef int IntNative;
---
> #define ;
340,358c340
< #define True  Bool1
< #define False Bool0
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define OM_UNZ           2
---
> #define True  #define define OM_UNZ           2
(97.3 %, 5605 bytes)
340,355c340
< int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define OM_UNZ           2
< #define OM_TEST          
\ No newline at end of file
---
> define OM_TEST          
\ No newline at end of file
340,355c340
< int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define OM_UNZ           2
< #define OM_TEST          
\ No newline at end of file
---
> int OM_TEST          
\ No newline at end of file
340,355c340
< int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define OM_UNZ           2
< #define OM_TEST          
\ No newline at end of file
---
> int IntNative
\ No newline at end of file
354,355d353
< #define define OM_UNZ           2
< #define OM_TEST          
\ No newline at end of file
354,355c354
< #define define OM_UNZ           2
< #define OM_TEST          
\ No newline at end of file
---
> #
\ No newline at end of file
(97.3 %, 5546 bytes)
Termination check: size was 204936; now 5546
===< pass_balanced :: curly >===
16,23c16
<    struct {
<       ;
< 
<       ;
< 
<       void *state;
<       void ;
<    } 
---
>    struct  
353a347
>  
\ No newline at end of file
155,159c155
<    struct {
<       
<       ;
< 
<    }
---
>    struct 
353a350
>  
\ No newline at end of file
(97.3 %, 5491 bytes)
148,152c148
<    struct {
<       
<       ;
< 
<    }
---
>    struct 
169,171c169
<    struct {
<       
<       Int32    seqToUnseq}
---
>    struct 
183,185c183
<    struct {
<       ;
<    }
---
>    struct 
(97.3 %, 5469 bytes)
165,167c165
<    struct {
<       
<       Int32    seqToUnseq}
---
>    struct 
179,181c179
<    struct {
<       ;
<    }
---
>    struct 
(97.3 %, 5434 bytes)
177,179c177
<    struct {
<       ;
<    }
---
>    struct 
306,311c306
< {
<    int bzerr;
<    0;
<    BZ_APIBZ2_bzread_nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
---
> 
(97.4 %, 5420 bytes)
304,309c304
< {
<    int bzerr;
<    0;
<    BZ_APIBZ2_bzread_nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
---
> 
===< pass_balanced :: curly2 >===
304,309c304
< {
<    int bzerr;
<    0;
<    BZ_APIBZ2_bzread_nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
---
> ;
===< pass_balanced :: curly3 >===
===< pass_clang :: param-to-global >===
37c37
<       int*  bzerror,   
---
>          
38c38
<       FILE* f, 
---
>        
39c39
<       int   verbosity, 
---
>        
40c40
<       int   small,
---
>       
41c41
<       void* unused,    
---
>           
41,42c41
<       void* unused,    
<       int   nUnused 
---
>       void* unused 
46c46
<       int*    bzerror, 
---
>        
238c238
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose (  BZFILE *b )
46,47c46
<       int*    bzerror, 
<       BZFILE* b 
---
>       int*    bzerror 
238c237
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror )
(97.4 %, 5391 bytes)
47c47
<       BZFILE* b 
---
>       void 
238c238
< void BZ_APIBZ2_bzReadClose (  BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose (  void )
51c51
<       int*    bzerror, 
---
>        
253c253
<                      ( int*    bzerror, 
---
>                      (  
(97.4 %, 5381 bytes)
51c51
<       int*    bzerror, 
---
>        
253c253
<                      ( int*    bzerror, 
---
>                      (  
52c52
<       BZFILE* b, 
---
>        
254c254
<                        BZFILE* b, 
---
>                         
(97.4 %, 5349 bytes)
52c52
<       BZFILE* b, 
---
>        
254c254
<                        BZFILE* b, 
---
>                         
53c53
<       void**  unused,  
---
>         
255c255
<                        void**  unused, 
---
>                         
(97.4 %, 5329 bytes)
53c53
<       void**  unused,  
---
>         
255c255
<                        void**  unused, 
---
>                         
53,54c53
<       void**  unused,  
<       int*    nUnused 
---
>       void**  unused 
255,256c254
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  unused )
(97.4 %, 5299 bytes)
54c54
<       int*    nUnused 
---
>       void 
256c256
<                        int*    nUnused )
---
>                        void )
58c58
<       int*    bzerror, 
---
>        
244c244
<            ( int*    bzerror, 
---
>            (  
59c59
<       BZFILE* b, 
---
>        
245c245
<              BZFILE* b, 
---
>               
(97.4 %, 5277 bytes)
58c58
<       int*    bzerror, 
---
>        
244c244
<            ( int*    bzerror, 
---
>            (  
59c59
<       BZFILE* b, 
---
>        
245c245
<              BZFILE* b, 
---
>               
(97.4 %, 5245 bytes)
59c59
<       BZFILE* b, 
---
>        
245c245
<              BZFILE* b, 
---
>               
60c60
<       void*   buf, 
---
>        
246c246
<              void*   buf, 
---
>               
(97.5 %, 5225 bytes)
60c60
<       void*   buf, 
---
>        
246c246
<              void*   buf, 
---
>               
60,61c60
<       void*   buf, 
<       int     len 
---
>       void*   buf 
246,247c245
<              void*   buf, 
<              int     len )
---
>              void*   buf )
(97.5 %, 5201 bytes)
61c61
<       int     len 
---
>       void 
247c247
<              int     len )
---
>              void )
65c65
<       int*  bzerror,      
---
>             
66c66
<       FILE* f, 
---
>        
67c67
<       int   blockSize100k, 
---
>        
68c68
<       int   verbosity, 
---
>        
68,69c68
<       int   verbosity, 
<       int   workFactor 
---
>       int   verbosity 
(97.5 %, 5187 bytes)
65c65
<       int*  bzerror,      
---
>             
66c66
<       FILE* f, 
---
>        
67c67
<       int   blockSize100k, 
---
>        
68c68
<       int   verbosity, 
---
>        
68,69c68
<       int   verbosity, 
<       int   workFactor 
---
>       int   verbosity 
73c73
<       int*    bzerror, 
---
>        
198c198
<              ( int*    bzerror, 
---
>              (  
74c74
<       BZFILE* b, 
---
>        
199c199
<                BZFILE* b, 
---
>                 
(97.5 %, 5155 bytes)
74c74
<       BZFILE* b, 
---
>        
199c199
<                BZFILE* b, 
---
>                 
75c75
<       void*   buf, 
---
>        
200c200
<                void*   buf, 
---
>                 
(97.5 %, 5135 bytes)
75c75
<       void*   buf, 
---
>        
200c200
<                void*   buf, 
---
>                 
75,76c75
<       void*   buf, 
<       int     len 
---
>       void*   buf 
200,201c199
<                void*   buf, 
<                int     len )
---
>                void*   buf )
80c80
<       int*          bzerror, 
---
>        
207c207
<                   ( int*          bzerror, 
---
>                   (  
(97.5 %, 5111 bytes)
76c76
<       int     len 
---
>       void 
201c201
<                int     len )
---
>                void )
80c80
<       int*          bzerror, 
---
>        
207c207
<                   ( int*          bzerror, 
---
>                   (  
(97.5 %, 5097 bytes)
80c80
<       int*          bzerror, 
---
>        
207c207
<                   ( int*          bzerror, 
---
>                   (  
81c81
<       BZFILE*       b, 
---
>        
208c208
<                     BZFILE*       b, 
---
>                      
(97.5 %, 5053 bytes)
81c81
<       BZFILE*       b, 
---
>        
208c208
<                     BZFILE*       b, 
---
>                      
82c82
<       int           abandon, 
---
>        
209c209
<                     int           abandon,
---
>                     
(97.5 %, 5021 bytes)
82c82
<       int           abandon, 
---
>        
209c209
<                     int           abandon,
---
>                     
83c83
<       unsigned int* nbytes_in, 
---
>        
210c210
<                     unsigned int* nbytes_in,
---
>                     
(97.6 %, 4977 bytes)
83c83
<       unsigned int* nbytes_in, 
---
>        
210c210
<                     unsigned int* nbytes_in,
---
>                     
83,84c83
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned int* nbytes_in 
210,211c209
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned int* nbytes_in )
(97.6 %, 4929 bytes)
84c84
<       unsigned int* nbytes_out 
---
>       void 
211c211
<                     unsigned int* nbytes_out )
---
>                     void )
88c88
<       int*          bzerror, 
---
>        
216c216
<                   ( int*          bzerror, 
---
>                   (  
89c89
<       BZFILE*       b, 
---
>        
217c217
<                     BZFILE*       b, 
---
>                      
(97.6 %, 4889 bytes)
88c88
<       int*          bzerror, 
---
>        
216c216
<                   ( int*          bzerror, 
---
>                   (  
89c89
<       BZFILE*       b, 
---
>        
217c217
<                     BZFILE*       b, 
---
>                      
(97.6 %, 4845 bytes)
89c89
<       BZFILE*       b, 
---
>        
217c217
<                     BZFILE*       b, 
---
>                      
90c90
<       int           abandon, 
---
>        
218c218
<                     int           abandon,
---
>                     
91c91
<       unsigned int* nbytes_in_lo32, 
---
>        
219c219
<                     unsigned int* nbytes_in_lo32,
---
>                     
(97.7 %, 4813 bytes)
90c90
<       int           abandon, 
---
>        
218c218
<                     int           abandon,
---
>                     
91c91
<       unsigned int* nbytes_in_lo32, 
---
>        
219c219
<                     unsigned int* nbytes_in_lo32,
---
>                     
(97.7 %, 4769 bytes)
91c91
<       unsigned int* nbytes_in_lo32, 
---
>        
219c219
<                     unsigned int* nbytes_in_lo32,
---
>                     
92c92
<       unsigned int* nbytes_in_hi32, 
---
>        
220c220
<                     unsigned int* nbytes_in_hi32,
---
>                     
93c93
<       unsigned int* nbytes_out_lo32, 
---
>        
221c221
<                     unsigned int* nbytes_out_lo32,
---
>                     
(97.7 %, 4711 bytes)
92c92
<       unsigned int* nbytes_in_hi32, 
---
>        
220c220
<                     unsigned int* nbytes_in_hi32,
---
>                     
93c93
<       unsigned int* nbytes_out_lo32, 
---
>        
221c221
<                     unsigned int* nbytes_out_lo32,
---
>                     
93,94c93
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned int* nbytes_out_lo32
221,222c220
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_out_lo32 )
(97.7 %, 4653 bytes)
93c93
<       unsigned int* nbytes_out_lo32, 
---
>        
221c221
<                     unsigned int* nbytes_out_lo32,
---
>                     
93,94c93
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned int* nbytes_out_lo32
221,222c220
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_out_lo32 )
(97.8 %, 4593 bytes)
94c94
<       unsigned int* nbytes_out_hi32
---
>       void
222c222
<                     unsigned int* nbytes_out_hi32 )
---
>                     void )
101c101
<       char*         dest, 
---
>        
266c266
<                          ( char*         dest, 
---
>                          (  
(97.8 %, 4543 bytes)
101c101
<       char*         dest, 
---
>        
266c266
<                          ( char*         dest, 
---
>                          (  
102c102
<       unsigned int* destLen,
---
>       
267c267
<                            unsigned int* destLen,
---
>                            
(97.8 %, 4505 bytes)
102c102
<       unsigned int* destLen,
---
>       
267c267
<                            unsigned int* destLen,
---
>                            
103c103
<       char*         source, 
---
>        
268c268
<                            char*         source, 
---
>                             
(97.8 %, 4461 bytes)
103c103
<       char*         source, 
---
>        
268c268
<                            char*         source, 
---
>                             
104c104
<       unsigned int  sourceLen,
---
>       
269c269
<                            unsigned int  sourceLen,
---
>                            
(97.8 %, 4419 bytes)
104c104
<       unsigned int  sourceLen,
---
>       
269c269
<                            unsigned int  sourceLen,
---
>                            
105c105
<       int           blockSize100k, 
---
>        
270c270
<                            int           blockSize100k, 
---
>                             
(97.9 %, 4371 bytes)
105c105
<       int           blockSize100k, 
---
>        
270c270
<                            int           blockSize100k, 
---
>                             
106c106
<       int           verbosity, 
---
>        
271c271
<                            int           verbosity, 
---
>                             
(97.9 %, 4315 bytes)
106c106
<       int           verbosity, 
---
>        
271c271
<                            int           verbosity, 
---
>                             
106,107c106
<       int           verbosity, 
<       int           workFactor 
---
>       int           verbosity 
271,272c270
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           verbosity )
(97.9 %, 4267 bytes)
107c107
<       int           workFactor 
---
>       void 
272c272
<                            int           workFactor )
---
>                            void )
111c111
<       char*         dest, 
---
>        
278c278
<                            ( char*         dest, 
---
>                            (  
(97.9 %, 4227 bytes)
111c111
<       char*         dest, 
---
>        
278c278
<                            ( char*         dest, 
---
>                            (  
112c112
<       unsigned int* destLen,
---
>       
279c279
<                              unsigned int* destLen,
---
>                              
(98.0 %, 4189 bytes)
112c112
<       unsigned int* destLen,
---
>       
279c279
<                              unsigned int* destLen,
---
>                              
113c113
<       char*         source, 
---
>        
280c280
<                              char*         source, 
---
>                               
(98.0 %, 4145 bytes)
113c113
<       char*         source, 
---
>        
280c280
<                              char*         source, 
---
>                               
114c114
<       unsigned int  sourceLen,
---
>       
281c281
<                              unsigned int  sourceLen,
---
>                              
(98.0 %, 4103 bytes)
114c114
<       unsigned int  sourceLen,
---
>       
281c281
<                              unsigned int  sourceLen,
---
>                              
115c115
<       int           small, 
---
>        
282c282
<                              int           small,
---
>                              
(98.0 %, 4055 bytes)
115c115
<       int           small, 
---
>        
282c282
<                              int           small,
---
>                              
115,116c115
<       int           small, 
<       int           verbosity 
---
>       int           small 
282,283c281
<                              int           small,
<                              int           verbosity )
---
>                              int           small )
(98.0 %, 4015 bytes)
116c116
<       int           verbosity 
---
>       void 
283c283
<                              int           verbosity )
---
>                              void )
303c303,304
< int BZ_APIBZ2_bzread (len )
---
> int BZ_APIBZ2_bzread_len;
> int BZ_APIBZ2_bzread (void )
(98.1 %, 3977 bytes)
303c303,304
< int BZ_APIBZ2_bzread (len )
---
> int BZ_APIBZ2_bzread_len;
> int BZ_APIBZ2_bzread (void )
(98.0 %, 4004 bytes)
===< pass_clang :: replace-callexpr >===
===< pass_clang :: remove-unused-function >===
36,43c36
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
> BZ_EXTERN 
45,48c45
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<        
<       void 
<    );
---
> BZ_EXTERN 
238,239c235
< void BZ_APIBZ2_bzReadClose (  void )
< ;
---
> 
(98.1 %, 3839 bytes)
38,41c38
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<        
<       void 
<    );
---
> BZ_EXTERN 
231,232c228
< void BZ_APIBZ2_bzReadClose (  void )
< ;
---
> 
43,48c43
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<        
<        
<         
<       void 
<    );
---
> BZ_EXTERN 
245,250c240
< void BZ_APIBZ2_bzReadGetUnused 
<                      (  
<                         
<                         
<                        void )
< ;
---
> 
(98.2 %, 3746 bytes)
40,45c40
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<        
<        
<         
<       void 
<    );
---
> BZ_EXTERN 
241,246c236
< void BZ_APIBZ2_bzReadGetUnused 
<                      (  
<                         
<                         
<                        void )
< ;
---
> 
47,52c47
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<        
<        
<        
<       void 
<    );
---
> BZ_EXTERN 
232,237c227
< int BZ_APIBZ2_bzRead 
<            (  
<               
<               
<              void )
< ;
---
> 
(98.3 %, 3532 bytes)
42,47c42
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<        
<        
<        
<       void 
<    );
---
> BZ_EXTERN 
227,232c222
< int BZ_APIBZ2_bzRead 
<            (  
<               
<               
<              void )
< ;
---
> 
49,55c49
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
> BZ_EXTERN 
(98.4 %, 3379 bytes)
44,50c44
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
> BZ_EXTERN 
52,57c52
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<        
<        
<        
<       void 
<    );
---
> BZ_EXTERN 
177,182c172
< void BZ_APIBZ2_bzWrite
<              (  
<                 
<                 
<                void )
< ;
---
> 
(98.4 %, 3222 bytes)
46,51c46
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<        
<        
<        
<       void 
<    );
---
> BZ_EXTERN 
171,176c166
< void BZ_APIBZ2_bzWrite
<              (  
<                 
<                 
<                void )
< ;
---
> 
53,59c53
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<        
<        
<        
<        
<       void 
<    );
---
> BZ_EXTERN 
180,186c174
< void BZ_APIBZ2_bzWriteClose
<                   (  
<                      
<                     
<                     
<                     void )
< ;
---
> 
(98.5 %, 3058 bytes)
48,54c48
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<        
<        
<        
<        
<       void 
<    );
---
> BZ_EXTERN 
170,176c164
< void BZ_APIBZ2_bzWriteClose
<                   (  
<                      
<                     
<                     
<                     void )
< ;
---
> 
56,64c56
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<        
<        
<        
<        
<        
<        
<       void
<    );
---
> BZ_EXTERN 
179,187c171
< void BZ_APIBZ2_bzWriteClose64
<                   (  
<                      
<                     
<                     
<                     
<                     
<                     void )
< ;
---
> 
(98.6 %, 2836 bytes)
50,58c50
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<        
<        
<        
<        
<        
<        
<       void
<    );
---
> BZ_EXTERN 
167,175c159
< void BZ_APIBZ2_bzWriteClose64
<                   (  
<                      
<                     
<                     
<                     
<                     
<                     void )
< ;
---
> 
63,71c63
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<        
<       
<        
<       
<        
<        
<       void 
<    );
---
> BZ_EXTERN 
206,214c198
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          (  
<                            
<                             
<                            
<                             
<                             
<                            void )
< ;
---
> 
(98.8 %, 2553 bytes)
55,63c55
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<        
<       
<        
<       
<        
<        
<       void 
<    );
---
> BZ_EXTERN 
190,198c182
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          (  
<                            
<                             
<                            
<                             
<                             
<                            void )
< ;
---
> 
65,72c65
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<        
<       
<        
<       
<        
<       void 
<    );
---
> BZ_EXTERN 
202,209c195
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            (  
<                              
<                               
<                              
<                              
<                              void )
< ;
---
> 
(98.9 %, 2209 bytes)
57,64c57
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<        
<       
<        
<       
<        
<       void 
<    );
---
> BZ_EXTERN 
186,193c179
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            (  
<                              
<                               
<                              
<                              
<                              void )
< ;
---
> 
133,139c133
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
---
> 
155,162c155
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
---
> 
(99.1 %, 1887 bytes)
126,132c126
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
---
> 
148,155c148
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
---
> 
(99.2 %, 1656 bytes)
142,149c142
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
---
> 
193,199c193
< int BZ_APIBZ2_bzread (void )
< {
<    int bzerr;
<    0;
<    BZ_APIBZ2_bzread_nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
---
> 
(99.3 %, 1413 bytes)
186,192c186
< int BZ_APIBZ2_bzread (void )
< {
<    int bzerr;
<    0;
<    BZ_APIBZ2_bzread_nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
---
> 
===< pass_clang :: reduce-array-dim >===
===< pass_clang :: replace-simple-typedef >===
75c75
< typedef char            Char;
---
> 
76c76
< typedef unsigned char   Bool;
---
> 
(99.3 %, 1384 bytes)
76c76
< typedef unsigned char   Bool;
---
> 
77c77
< typedef unsigned char   UChar;
---
> 
(99.3 %, 1355 bytes)
77c77
< typedef unsigned char   UChar;
---
> 
78c78
< typedef int             Int32;
---
> 
(99.4 %, 1325 bytes)
78c78
< typedef int             Int32;
---
> 
(99.4 %, 1295 bytes)
===< pass_clang :: reduce-class-template-param >===
===< pass_clang :: class-template-to-class >===
===< pass_clang :: replace-derived-class >===
===< pass_clang :: remove-unresolved-base >===
===< pass_clang :: replace-class-with-base-template-spec >===
===< pass_clang :: remove-pointer >===
179c179
< BZFILE * BZ_APIBZ2_bzdopen
---
> BZFILE  BZ_APIBZ2_bzdopen
===< pass_clang :: remove-array >===
===< pass_clang :: replace-array-index-var >===
===< pass_unifdef :: 0 >===
198d197
< #if BZ_UNIX
200,201d198
< 
< #endif 
198,202d197
< #if BZ_UNIX
< define NORETURN 
< 
< #endif 
< 
(99.4 %, 1256 bytes)
===< pass_comments :: 0 >===
===< pass_special :: b >===
===< pass_ints :: a >===
32c32
< #define BZ_MAX_UNUSED 5000
---
> #define BZ_MAX_UNUSED 000
97c97
< #define MTFA_SIZE 4096
---
> #define MTFA_SIZE 096
(99.4 %, 1255 bytes)
32c32
< #define BZ_MAX_UNUSED 000
---
> #define BZ_MAX_UNUSED 00
97c97
< #define MTFA_SIZE 4096
---
> #define MTFA_SIZE 096
(99.4 %, 1254 bytes)
32c32
< #define BZ_MAX_UNUSED 00
---
> #define BZ_MAX_UNUSED 0
97c97
< #define MTFA_SIZE 4096
---
> #define MTFA_SIZE 096
98c98
< #define MTFL_SIZE 16
---
> #define MTFL_SIZE 6
(99.4 %, 1253 bytes)
97c97
< #define MTFA_SIZE 4096
---
> #define MTFA_SIZE 096
98c98
< #define MTFL_SIZE 16
---
> #define MTFL_SIZE 6
(99.4 %, 1252 bytes)
97c97
< #define MTFA_SIZE 096
---
> #define MTFA_SIZE 06
98c98
< #define MTFL_SIZE 16
---
> #define MTFL_SIZE 6
(99.4 %, 1251 bytes)
97c97
< #define MTFA_SIZE 06
---
> #define MTFA_SIZE 6
98c98
< #define MTFL_SIZE 16
---
> #define MTFL_SIZE 6
(99.4 %, 1250 bytes)
98c98
< #define MTFL_SIZE 16
---
> #define MTFL_SIZE 6
113c113
<     cccc BZ_SETERReee                    \
---
>     ccc BZ_SETERReee                    \
(99.4 %, 1249 bytes)
113c113
<     cccc BZ_SETERReee                    \
---
>     ccc BZ_SETERReee                    \
(99.4 %, 1248 bytes)
113c113
<     ccc BZ_SETERReee                    \
---
>     cc BZ_SETERReee                    \
(99.4 %, 1247 bytes)
113c113
<     cc BZ_SETERReee                    \
---
>     c BZ_SETERReee                    \
(99.4 %, 1246 bytes)
===< pass_ints :: b >===
===< pass_clex :: rm-toks-14 >===
9,12c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> BZ_FINISH_OK         3
9,12c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> #3
9,13c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
---
> #define #define BZ_STREAM_END        9
9,13c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
---
> #define BZ_OK                define BZ_STREAM_END        9
10,13c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
---
> BZ_STREAM_END        9
10,13c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
---
> #9
10,15c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
< 
< typedef 
---
> #define typedef 
10,16c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct  
---
> #define BZ_RUN_OK            struct  
11,17c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct  
<    bz_stream;
---
> bz_stream;
11,17c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct  
<    bz_stream;
---
> #;
11,21c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct  
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
> #define #include <stdio.h>
11,21c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct  
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
> #define BZ_FLUSH_OK          include <stdio.h>
12,21c12
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct  
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
> <stdio.h>
12,21c12
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct  
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
> #stdio.h>
12,21c12
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct  
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
> #define .h>
12,21c12
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct  
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
> #define BZ_FINISH_OK         h>
13,21c13
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct  
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
> >
13,23c13
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct  
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> ##   define BZ_API(func) func
13,23c13
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct  
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #define define BZ_API(func) func
13,23c13
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct  
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #define BZ_STREAM_END        BZ_API(func) func
15,23c15
< typedef 
<    struct  
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> (func) func
16,23c16
<    struct  
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    func) func
17,23c17
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    ) func
17,23c17
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    bz_streamfunc
21,23d20
< #include <stdio.h>
< 
< #   define BZ_API(func) func
(99.4 %, 1197 bytes)
18,28c18
< #   define BZ_EXTERN ;
< 
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
> ;
18,30c18
< #   define BZ_EXTERN ;
< 
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN 
---
> #   BZ_EXTERN 
18,32c18
< #   define BZ_EXTERN ;
< 
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
---
> #   define BZ_EXTERN 
18,34c18
< #   define BZ_EXTERN ;
< 
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
---
> #   define BZ_EXTERN BZ_EXTERN 
20,35d19
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
20,38c20
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
---
> BZ_EXTERN BZ_EXTERN 
20,40c20
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
---
> BZ_EXTERN int BZ_EXTERN 
26,41d25
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
26,44c26
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
---
> #BZ_EXTERN 
26,49c26
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< 
< 
< 
< BZ_EXTERN 
---
> #define BZ_EXTERN 
26,51c26
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< 
< 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
---
> #define BZ_MAX_UNUSED BZ_EXTERN 
28,52d27
< typedef void BZFILE;
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< 
< 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
28,55c28
< typedef void BZFILE;
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< 
< 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< ;
< 
< ;
---
> typedef ;
28,57c28
< typedef void BZFILE;
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< 
< 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< ;
< 
< ;
< 
< BZ_EXTERN int ;
---
> typedef void BZ_EXTERN int ;
28,57c28
< typedef void BZFILE;
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< 
< 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< ;
< 
< ;
< 
< BZ_EXTERN int ;
---
> typedef void BZFILEint ;
30,52d29
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< 
< 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
54,57d30
< 
< ;
< 
< BZ_EXTERN int ;
32,66d31
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< 
< 
< 
< BZ_EXTERN 
< 
< BZ_EXTERN 
< 
< ;
< 
< ;
< 
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
(99.5 %, 1054 bytes)
31,46d30
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< 
< 
< 
< typedef unsigned int    UInt32( int errcode );
40,46d39
< #define define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< 
< 
< 
< typedef unsigned int    UInt32( int errcode );
40,46d39
< #define define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< 
< 
< 
< 
< typedef unsigned int    UInt32( int errcode );
(99.5 %, 945 bytes)
30,48d29
< ;
< #define BZ_MAX_CODE_LEN    + 2
< 
< 
< 
< 
< 
< 
< typedef
<    struct 
<    EState;
< 
< 
< 
< 
< 
< 
< 
< #define MTFA_SIZE 6
31,49c31
< #define BZ_MAX_CODE_LEN    + 2
< 
< 
< 
< 
< 
< 
< typedef
<    struct 
<    EState;
< 
< 
< 
< 
< 
< 
< 
< #define MTFA_SIZE 6
< #define MTFL_SIZE 6
---
> define MTFL_SIZE 6
31,49c31
< #define BZ_MAX_CODE_LEN    + 2
< 
< 
< 
< 
< 
< 
< typedef
<    struct 
<    EState;
< 
< 
< 
< 
< 
< 
< 
< #define MTFA_SIZE 6
< #define MTFL_SIZE 6
---
> #MTFL_SIZE 6
31,49c31
< #define BZ_MAX_CODE_LEN    + 2
< 
< 
< 
< 
< 
< 
< typedef
<    struct 
<    EState;
< 
< 
< 
< 
< 
< 
< 
< #define MTFA_SIZE 6
< #define MTFL_SIZE 6
---
> #define 6
31,55c31
< #define BZ_MAX_CODE_LEN    + 2
< 
< 
< 
< 
< 
< 
< typedef
<    struct 
<    EState;
< 
< 
< 
< 
< 
< 
< 
< #define MTFA_SIZE 6
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
---
> #define BZ_MAX_CODE_LEN    typedef
(99.6 %, 849 bytes)
30,47d29
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct 
<    DState;
< 
< 
< 
< 
< 
< #define \
<     c BZ_SETERReee                    \
< 
< 
30,49c30
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct 
<    DState;
< 
< 
< 
< 
< 
< #define \
<     c BZ_SETERReee                    \
< 
< 
< typedef 
<    struct 
---
> #struct 
30,50c30
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct 
<    DState;
< 
< 
< 
< 
< 
< #define \
<     c BZ_SETERReee                    \
< 
< 
< typedef 
<    struct 
<    bzFile;
---
> #define bzFile;
(99.6 %, 737 bytes)
30,98d29
< typedef 
<    struct 
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< const char ;
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzdopen
<                ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
31,99c31
<    struct 
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< const char ;
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzdopen
<                ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread_len;
---
>    BZ_APIBZ2_bzread_len;
32,99c32
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< const char ;
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzdopen
<                ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread_len;
---
>    ;
32,100c32
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< const char ;
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzdopen
<                ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread_len;
< int BZ_APIBZ2_bzread (void )
---
>    bzFileint BZ_APIBZ2_bzread (void )
89,100c89
< const char ;
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzdopen
<                ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread_len;
< int BZ_APIBZ2_bzread (void )
---
> BZ_APIBZ2_bzread (void )
89,100c89
< const char ;
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzdopen
<                ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread_len;
< int BZ_APIBZ2_bzread (void )
---
> const (void )
89,100c89
< const char ;
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzdopen
<                ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread_len;
< int BZ_APIBZ2_bzread (void )
---
> const char void )
93,100c93
< BZFILE * BZ_APIBZ2_bzdopen
<                ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread_len;
< int BZ_APIBZ2_bzread (void )
---
> )
93,101c93
< BZFILE * BZ_APIBZ2_bzdopen
<                ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread_len;
< int BZ_APIBZ2_bzread (void )
< {
---
> BZFILE {
93,102c93
< BZFILE * BZ_APIBZ2_bzdopen
<                ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread_len;
< int BZ_APIBZ2_bzread (void )
< {
<    int bzerr;
---
> BZFILE * int bzerr;
94,102c94
<                ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread_len;
< int BZ_APIBZ2_bzread (void )
< {
<    int bzerr;
---
>                bzerr;
98,102c98
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread_len;
< int BZ_APIBZ2_bzread (void )
< {
<    int bzerr;
---
> ;
98,103c98
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread_len;
< int BZ_APIBZ2_bzread (void )
< {
<    int bzerr;
<    0;
---
> int 0;
99,103d98
< int BZ_APIBZ2_bzread_len;
< int BZ_APIBZ2_bzread (void )
< {
<    int bzerr;
<    0;
99,104c99
< int BZ_APIBZ2_bzread_len;
< int BZ_APIBZ2_bzread (void )
< {
<    int bzerr;
<    0;
<    BZ_APIBZ2_bzread_nread = 0;
---
> BZ_APIBZ2_bzread_nread = 0;
99,104c99
< int BZ_APIBZ2_bzread_len;
< int BZ_APIBZ2_bzread (void )
< {
<    int bzerr;
<    0;
<    BZ_APIBZ2_bzread_nread = 0;
---
> int = 0;
99,104c99
< int BZ_APIBZ2_bzread_len;
< int BZ_APIBZ2_bzread (void )
< {
<    int bzerr;
<    0;
<    BZ_APIBZ2_bzread_nread = 0;
---
> int BZ_APIBZ2_bzread_len0;
100,104c100
< int BZ_APIBZ2_bzread (void )
< {
<    int bzerr;
<    0;
<    BZ_APIBZ2_bzread_nread = 0;
---
> ;
100,105c100
< int BZ_APIBZ2_bzread (void )
< {
<    int bzerr;
<    0;
<    BZ_APIBZ2_bzread_nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
> int if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
100,105c100
< int BZ_APIBZ2_bzread (void )
< {
<    int bzerr;
<    0;
<    BZ_APIBZ2_bzread_nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
> int BZ_APIBZ2_bzread (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
100,105c100
< int BZ_APIBZ2_bzread (void )
< {
<    int bzerr;
<    0;
<    BZ_APIBZ2_bzread_nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
> int BZ_APIBZ2_bzread (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
100,105c100
< int BZ_APIBZ2_bzread (void )
< {
<    int bzerr;
<    0;
<    BZ_APIBZ2_bzread_nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
> int BZ_APIBZ2_bzread (void == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
101,105c101
< {
<    int bzerr;
<    0;
<    BZ_APIBZ2_bzread_nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
> BZ_OK || bzerr == BZ_STREAM_END) ; else ;
102,105c102
<    int bzerr;
<    0;
<    BZ_APIBZ2_bzread_nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    || bzerr == BZ_STREAM_END) ; else ;
102,105c102
<    int bzerr;
<    0;
<    BZ_APIBZ2_bzread_nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerr == BZ_STREAM_END) ; else ;
102,105c102
<    int bzerr;
<    0;
<    BZ_APIBZ2_bzread_nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerr== BZ_STREAM_END) ; else ;
103,105c103
<    0;
<    BZ_APIBZ2_bzread_nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    BZ_STREAM_END) ; else ;
103,105c103
<    0;
<    BZ_APIBZ2_bzread_nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    0) ; else ;
104,105c104
<    BZ_APIBZ2_bzread_nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    ; else ;
104,105c104
<    BZ_APIBZ2_bzread_nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    BZ_APIBZ2_bzread_nread else ;
104,105c104
<    BZ_APIBZ2_bzread_nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    BZ_APIBZ2_bzread_nread = ;
104,106c104
<    BZ_APIBZ2_bzread_nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
---
>    BZ_APIBZ2_bzread_nread = 0}
105,110c105
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< #include <errno.h>
---
>    #include <errno.h>
105,110c105
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< #include <errno.h>
---
>    if include <errno.h>
105,110c105
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< #include <errno.h>
---
>    if (<errno.h>
105,110c105
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< #include <errno.h>
---
>    if (bzerr errno.h>
105,110c105
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< #include <errno.h>
---
>    if (bzerr == .h>
105,110c105
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< #include <errno.h>
---
>    if (bzerr == BZ_OK h>
105,110c105
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< #include <errno.h>
---
>    if (bzerr == BZ_OK || >
105,117c105
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< #include <errno.h>
< 
< 
< 
< 
< 
<                                        
< int IntNative;
---
>    if (bzerr == BZ_OK || bzerr int IntNative;
105,117c105
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< #include <errno.h>
< 
< 
< 
< 
< 
<                                        
< int IntNative;
---
>    if (bzerr == BZ_OK || bzerr == IntNative;
105,117c105
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< #include <errno.h>
< 
< 
< 
< 
< 
<                                        
< int IntNative;
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END;
105,131c105
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< #include <errno.h>
< 
< 
< 
< 
< 
<                                        
< int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) 
\ No newline at end of file
105,131c105
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< #include <errno.h>
< 
< 
< 
< 
< 
<                                        
< int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; 
\ No newline at end of file
105,131c105
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< #include <errno.h>
< 
< 
< 
< 
< 
<                                        
< int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else 
\ No newline at end of file
106,131d105
< }
< 
< 
< 
< #include <errno.h>
< 
< 
< 
< 
< 
<                                        
< int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<  
\ No newline at end of file
110,131d109
< #include <errno.h>
< 
< 
< 
< 
< 
<                                        
< int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<  
\ No newline at end of file
110,131c110
< #include <errno.h>
< 
< 
< 
< 
< 
<                                        
< int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<  
\ No newline at end of file
---
> #
\ No newline at end of file
110,131c110
< #include <errno.h>
< 
< 
< 
< 
< 
<                                        
< int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<  
\ No newline at end of file
---
> #include 
\ No newline at end of file
(99.7 %, 644 bytes)
===< pass_clex :: rm-toks-7 >===
9,10c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> 1
9,11c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> ##define BZ_FLUSH_OK          2
9,11c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #define define BZ_FLUSH_OK          2
9,11c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #define BZ_OK                BZ_FLUSH_OK          2
10,11c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> 2
10,12c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> ##define BZ_FINISH_OK         3
10,12c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> #define define BZ_FINISH_OK         3
10,12c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> #define BZ_RUN_OK            BZ_FINISH_OK         3
11,12c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> 3
(99.7 %, 589 bytes)
10,13c10
< #define define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
< 
< typedef 
---
> #define typedef 
10,14c10
< #define define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct  
---
> #define define struct  
10,15c10
< #define define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct  
<    bz_streamfunc
---
> #define define BZ_FINISH_OK         bz_streamfunc
11,15d10
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct  
<    bz_streamfunc
11,16c11
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct  
<    bz_streamfunc
< #   define BZ_EXTERN ;
---
> #define BZ_EXTERN ;
11,16c11
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct  
<    bz_streamfunc
< #   define BZ_EXTERN ;
---
> #define BZ_EXTERN ;
11,16c11
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct  
<    bz_streamfunc
< #   define BZ_EXTERN ;
---
> #define BZ_STREAM_END        ;
13,17d12
< typedef 
<    struct  
<    bz_streamfunc
< #   define BZ_EXTERN ;
< 
14,18c14
<    struct  
<    bz_streamfunc
< #   define BZ_EXTERN ;
< 
< BZ_EXTERN int ;
---
>    int ;
15,18c15
<    bz_streamfunc
< #   define BZ_EXTERN ;
< 
< BZ_EXTERN int ;
---
>    ;
16,23d15
< #   define BZ_EXTERN ;
< 
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
16,24c16
< #   define BZ_EXTERN ;
< 
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #   define BZ_MAX_UNUSED 0
16,24c16
< #   define BZ_EXTERN ;
< 
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #   define BZ_MAX_UNUSED 0
16,24c16
< #   define BZ_EXTERN ;
< 
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #   define BZ_EXTERN 0
18,25d17
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
18,26c18
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
> BZ_EXTERN void BZFILE;
18,26c18
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
> BZ_EXTERN int BZFILE;
(99.7 %, 529 bytes)
14,22c14
<    int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
>    void BZFILE;
14,22c14
<    int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
>    int BZFILE;
(99.8 %, 485 bytes)
14,75c14
<    void BZFILE;
< 
< typedef 
<    struct 
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< const char ;
---
>    const char ;
14,75c14
<    void BZFILE;
< 
< typedef 
<    struct 
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< const char ;
---
>    void char ;
16,76d15
< typedef 
<    struct 
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< const char ;
< 
16,78d15
< typedef 
<    struct 
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< const char ;
< 
< 
< 
(99.8 %, 384 bytes)
15,23d14
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzdopen
<                ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
18,23d17
< BZFILE * BZ_APIBZ2_bzdopen
<                ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
18,24c18
< BZFILE * BZ_APIBZ2_bzdopen
<                ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread_len;
---
> BZFILE BZ_APIBZ2_bzread_len;
18,24c18
< BZFILE * BZ_APIBZ2_bzdopen
<                ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread_len;
---
> BZFILE * ;
19,25c19
<                ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread_len;
< int BZ_APIBZ2_bzread (void )
---
>                int BZ_APIBZ2_bzread (void )
23,25c23
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread_len;
< int BZ_APIBZ2_bzread (void )
---
> BZ_APIBZ2_bzread (void )
23,25c23
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread_len;
< int BZ_APIBZ2_bzread (void )
---
> int (void )
23,25c23
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread_len;
< int BZ_APIBZ2_bzread (void )
---
> int BZ_APIBZ2_bzread_nreadvoid )
24,25c24
< int BZ_APIBZ2_bzread_len;
< int BZ_APIBZ2_bzread (void )
---
> )
24,26c24
< int BZ_APIBZ2_bzread_len;
< int BZ_APIBZ2_bzread (void )
< {
---
> int {
24,27c24
< int BZ_APIBZ2_bzread_len;
< int BZ_APIBZ2_bzread (void )
< {
<    int bzerr;
---
> int BZ_APIBZ2_bzread_lenint bzerr;
25,27c25
< int BZ_APIBZ2_bzread (void )
< {
<    int bzerr;
---
> bzerr;
25,27c25
< int BZ_APIBZ2_bzread (void )
< {
<    int bzerr;
---
> int ;
25,28c25
< int BZ_APIBZ2_bzread (void )
< {
<    int bzerr;
<    0;
---
> int BZ_APIBZ2_bzread 0;
25,28c25
< int BZ_APIBZ2_bzread (void )
< {
<    int bzerr;
<    0;
---
> int BZ_APIBZ2_bzread (;
25,29c25
< int BZ_APIBZ2_bzread (void )
< {
<    int bzerr;
<    0;
<    BZ_APIBZ2_bzread_nread = 0;
---
> int BZ_APIBZ2_bzread (void BZ_APIBZ2_bzread_nread = 0;
26,29c26
< {
<    int bzerr;
<    0;
<    BZ_APIBZ2_bzread_nread = 0;
---
> = 0;
27d26
<    int bzerr;
29d27
<    BZ_APIBZ2_bzread_nread = 0;
27,29c27
<    int bzerr;
<    0;
<    BZ_APIBZ2_bzread_nread = 0;
---
>    int ;
27,30c27
<    int bzerr;
<    0;
<    BZ_APIBZ2_bzread_nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerrif (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
28,30c28
<    0;
<    BZ_APIBZ2_bzread_nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
28,30c28
<    0;
<    BZ_APIBZ2_bzread_nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    0bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
29,30c29
<    BZ_APIBZ2_bzread_nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
29,30c29
<    BZ_APIBZ2_bzread_nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    BZ_APIBZ2_bzread_nread BZ_OK || bzerr == BZ_STREAM_END) ; else ;
29,30c29
<    BZ_APIBZ2_bzread_nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    BZ_APIBZ2_bzread_nread = || bzerr == BZ_STREAM_END) ; else ;
29,30c29
<    BZ_APIBZ2_bzread_nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    BZ_APIBZ2_bzread_nread = 0bzerr == BZ_STREAM_END) ; else ;
30c30
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    == BZ_STREAM_END) ; else ;
30c30
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if BZ_STREAM_END) ; else ;
30c30
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if () ; else ;
30c30
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (bzerr ; else ;
30c30
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (bzerr == else ;
30c30
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (bzerr == BZ_OK ;
30,31c30
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
---
>    if (bzerr == BZ_OK || }
30,34c30
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (bzerr == BZ_OK || bzerr 
\ No newline at end of file
30,34c30
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (bzerr == BZ_OK || bzerr == 
\ No newline at end of file
30,34c30
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END
\ No newline at end of file
30,34c30
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) 
\ No newline at end of file
30,34c30
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; 
\ No newline at end of file
30,34c30
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else 
\ No newline at end of file
31,34d30
< }
< 
< 
< 
===< pass_clex :: rm-toks-6 >===
9,10c9
< #define BZ_OK                0
< #define define BZ_FINISH_OK         3
---
> define BZ_FINISH_OK         3
9,10c9
< #define BZ_OK                0
< #define define BZ_FINISH_OK         3
---
> #BZ_FINISH_OK         3
9,10c9
< #define BZ_OK                0
< #define define BZ_FINISH_OK         3
---
> #define 3
9,11c9
< #define BZ_OK                0
< #define define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
---
> #define BZ_OK                #define BZ_STREAM_END        9
10,11c10
< #define define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
---
> define BZ_STREAM_END        9
10,11c10
< #define define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
---
> #BZ_STREAM_END        9
10,11c10
< #define define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
---
> #define 9
10,13c10
< #define define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
< 
< typedef 
---
> #define define typedef 
10,14c10
< #define define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
< 
< typedef 
<    void BZFILE;
---
> #define define BZ_FINISH_OK         void BZFILE;
11,14c11
< #define BZ_STREAM_END        9
< 
< typedef 
<    void BZFILE;
---
> BZFILE;
11,14c11
< #define BZ_STREAM_END        9
< 
< typedef 
<    void BZFILE;
---
> #;
11,18c11
< #define BZ_STREAM_END        9
< 
< typedef 
<    void BZFILE;
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzdopen
---
> #define BZFILE * BZ_APIBZ2_bzdopen
11,18c11
< #define BZ_STREAM_END        9
< 
< typedef 
<    void BZFILE;
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzdopen
---
> #define BZ_STREAM_END        * BZ_APIBZ2_bzdopen
13,18c13
< typedef 
<    void BZFILE;
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzdopen
---
> BZ_APIBZ2_bzdopen
14,19c14
<    void BZFILE;
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzdopen
<                ;
---
>    ;
(99.8 %, 347 bytes)
13,19c13
< BZ_APIBZ2_bzdopen
<                ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread_len;
---
> BZ_APIBZ2_bzread_len;
15,19d14
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread_len;
18,19d17
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread_len;
18,19d17
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread_len;
18,20c18
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread_len;
< int BZ_APIBZ2_bzread (void )
---
> int BZ_APIBZ2_bzread_nread(void )
19,20c19
< int BZ_APIBZ2_bzread_len;
< int BZ_APIBZ2_bzread (void )
---
> void )
19,20c19
< int BZ_APIBZ2_bzread_len;
< int BZ_APIBZ2_bzread (void )
---
> int )
19,21c19
< int BZ_APIBZ2_bzread_len;
< int BZ_APIBZ2_bzread (void )
< {
---
> int BZ_APIBZ2_bzread_len{
20,22c20
< int BZ_APIBZ2_bzread (void )
< {
<    int bzerr;
---
> int bzerr;
20,22c20
< int BZ_APIBZ2_bzread (void )
< {
<    int bzerr;
---
> int bzerr;
20,22c20
< int BZ_APIBZ2_bzread (void )
< {
<    int bzerr;
---
> int BZ_APIBZ2_bzread ;
20,23c20
< int BZ_APIBZ2_bzread (void )
< {
<    int bzerr;
<    0;
---
> int BZ_APIBZ2_bzread (0;
20,23c20
< int BZ_APIBZ2_bzread (void )
< {
<    int bzerr;
<    0;
---
> int BZ_APIBZ2_bzread (void ;
21,24c21
< {
<    int bzerr;
<    0;
<    BZ_APIBZ2_bzread_nread = 0;
---
> BZ_APIBZ2_bzread_nread = 0;
22,24c22
<    int bzerr;
<    0;
<    BZ_APIBZ2_bzread_nread = 0;
---
>    = 0;
22,24c22
<    int bzerr;
<    0;
<    BZ_APIBZ2_bzread_nread = 0;
---
>    int 0;
23,24d22
<    0;
<    BZ_APIBZ2_bzread_nread = 0;
23,24d22
<    0;
<    BZ_APIBZ2_bzread_nread = 0;
(99.8 %, 310 bytes)
22,23c22
<    int bzerr;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerr|| bzerr == BZ_STREAM_END) ; else ;
23c23
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    bzerr == BZ_STREAM_END) ; else ;
23c23
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if == BZ_STREAM_END) ; else ;
23c23
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (BZ_STREAM_END) ; else ;
23c23
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (bzerr ) ; else ;
23c23
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (bzerr == ; else ;
23c23
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (bzerr == BZ_OK else ;
23c23
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (bzerr == BZ_OK || ;
23,24c23
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
---
>    if (bzerr == BZ_OK || bzerr }
23,27c23
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (bzerr == BZ_OK || bzerr == 
\ No newline at end of file
23,27c23
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END
\ No newline at end of file
23,27c23
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) 
\ No newline at end of file
23,27c23
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; 
\ No newline at end of file
23,27c23
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else 
\ No newline at end of file
24,27d23
< }
< 
< 
< 
===< pass_clex :: rm-toks-4 >===
9d8
< #define BZ_OK                0
9d8
< #define BZ_OK                0
9d8
< #define BZ_OK                0
9,10c9
< #define BZ_OK                0
< #define define BZ_FINISH_OK         3
---
> #define BZ_OK                BZ_FINISH_OK         3
10c10
< #define define BZ_FINISH_OK         3
---
> 3
10,11c10
< #define define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
---
> ##define BZ_STREAM_END        9
10,11c10
< #define define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
---
> #define define BZ_STREAM_END        9
10,11c10
< #define define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
---
> #define define BZ_STREAM_END        9
10,11c10
< #define define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
---
> #define define BZ_FINISH_OK         9
11,12d10
< #define BZ_STREAM_END        9
< 
11,14c11
< #define BZ_STREAM_END        9
< 
< BZ_APIBZ2_bzdopen
<                ;
---
> #;
11,18c11
< #define BZ_STREAM_END        9
< 
< BZ_APIBZ2_bzdopen
<                ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
---
> #define int BZ_APIBZ2_bzread_nread;
11,18c11
< #define BZ_STREAM_END        9
< 
< BZ_APIBZ2_bzdopen
<                ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
---
> #define BZ_STREAM_END        BZ_APIBZ2_bzread_nread;
13,18c13
< BZ_APIBZ2_bzdopen
<                ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
---
> ;
14,19c14
<                ;
< 
< 
< 
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread_len;
---
>                int BZ_APIBZ2_bzread_len;
18,19c18
< int BZ_APIBZ2_bzread_nread;
< int BZ_APIBZ2_bzread_len;
---
> BZ_APIBZ2_bzread_len;
(99.9 %, 246 bytes)
13,14d12
< ;
< int BZ_APIBZ2_bzread_len;
14,15c14
< int BZ_APIBZ2_bzread_len;
< int BZ_APIBZ2_bzread (void )
---
> BZ_APIBZ2_bzread (void )
(99.9 %, 218 bytes)
13c13
< int BZ_APIBZ2_bzread (void )
---
> )
13,14c13
< int BZ_APIBZ2_bzread (void )
< {
---
> int {
13,15c13
< int BZ_APIBZ2_bzread (void )
< {
<    int bzerr;
---
> int BZ_APIBZ2_bzread int bzerr;
13,15c13
< int BZ_APIBZ2_bzread (void )
< {
<    int bzerr;
---
> int BZ_APIBZ2_bzread (bzerr;
13,15c13
< int BZ_APIBZ2_bzread (void )
< {
<    int bzerr;
---
> int BZ_APIBZ2_bzread (void ;
14,16c14
< {
<    int bzerr;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
> if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
15,16c15
<    int bzerr;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
15,16c15
<    int bzerr;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
15,16c15
<    int bzerr;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerr== BZ_OK || bzerr == BZ_STREAM_END) ; else ;
16c16
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    BZ_OK || bzerr == BZ_STREAM_END) ; else ;
16c16
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if || bzerr == BZ_STREAM_END) ; else ;
16c16
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (bzerr == BZ_STREAM_END) ; else ;
16c16
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (bzerr == BZ_STREAM_END) ; else ;
(99.9 %, 200 bytes)
16c16
<    if (bzerr == BZ_STREAM_END) ; else ;
---
>    if (; else ;
16c16
<    if (bzerr == BZ_STREAM_END) ; else ;
---
>    if (bzerr else ;
16c16
<    if (bzerr == BZ_STREAM_END) ; else ;
---
>    if (bzerr == ;
16,17c16
<    if (bzerr == BZ_STREAM_END) ; else ;
< }
---
>    if (bzerr == BZ_STREAM_END}
16,20c16
<    if (bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
16,20c16
<    if (bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (bzerr == BZ_STREAM_END) ; 
\ No newline at end of file
16,20c16
<    if (bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (bzerr == BZ_STREAM_END) ; else 
\ No newline at end of file
17,20d16
< }
< 
< 
< 
===< pass_clex :: rm-toks-3 >===
9c9
< #define BZ_OK                0
---
> 0
9,10c9
< #define BZ_OK                0
< #define define BZ_FINISH_OK         3
---
> ##define define BZ_FINISH_OK         3
9,10c9
< #define BZ_OK                0
< #define define BZ_FINISH_OK         3
---
> #define define define BZ_FINISH_OK         3
9,10c9
< #define BZ_OK                0
< #define define BZ_FINISH_OK         3
---
> #define BZ_OK                define BZ_FINISH_OK         3
10c10
< #define define BZ_FINISH_OK         3
---
> BZ_FINISH_OK         3
(99.9 %, 176 bytes)
9c9
< #define define define BZ_FINISH_OK         3
---
> #define 3
9,10c9
< #define define define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
---
> #define define #define BZ_STREAM_END        9
9,10c9
< #define define define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
---
> #define define define define BZ_STREAM_END        9
9,10c9
< #define define define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
---
> #define define define BZ_FINISH_OK         BZ_STREAM_END        9
10c10
< #define BZ_STREAM_END        9
---
> 9
10,12c10
< #define BZ_STREAM_END        9
< 
< int BZ_APIBZ2_bzread (void )
---
> #int BZ_APIBZ2_bzread (void )
10,12c10
< #define BZ_STREAM_END        9
< 
< int BZ_APIBZ2_bzread (void )
---
> #define BZ_APIBZ2_bzread (void )
10,12c10
< #define BZ_STREAM_END        9
< 
< int BZ_APIBZ2_bzread (void )
---
> #define BZ_STREAM_END        (void )
12c12
< int BZ_APIBZ2_bzread (void )
---
> void )
12c12
< int BZ_APIBZ2_bzread (void )
---
> int )
12,13c12
< int BZ_APIBZ2_bzread (void )
< {
---
> int BZ_APIBZ2_bzread {
12,14c12
< int BZ_APIBZ2_bzread (void )
< {
<    int bzerr;
---
> int BZ_APIBZ2_bzread (int bzerr;
12,14c12
< int BZ_APIBZ2_bzread (void )
< {
<    int bzerr;
---
> int BZ_APIBZ2_bzread (void bzerr;
13,14c13
< {
<    int bzerr;
---
> ;
14d13
<    int bzerr;
14,15c14
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; else ;
---
>    int (bzerr == BZ_STREAM_END) ; else ;
14,15c14
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerrbzerr == BZ_STREAM_END) ; else ;
15c15
<    if (bzerr == BZ_STREAM_END) ; else ;
---
>    == BZ_STREAM_END) ; else ;
15c15
<    if (bzerr == BZ_STREAM_END) ; else ;
---
>    if BZ_STREAM_END) ; else ;
15c15
<    if (bzerr == BZ_STREAM_END) ; else ;
---
>    if () ; else ;
15c15
<    if (bzerr == BZ_STREAM_END) ; else ;
---
>    if (bzerr ; else ;
15c15
<    if (bzerr == BZ_STREAM_END) ; else ;
---
>    if (bzerr == else ;
15c15
<    if (bzerr == BZ_STREAM_END) ; else ;
---
>    if (bzerr == BZ_STREAM_END;
15,16c15
<    if (bzerr == BZ_STREAM_END) ; else ;
< }
---
>    if (bzerr == BZ_STREAM_END) }
15,19c15
<    if (bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (bzerr == BZ_STREAM_END) ; 
\ No newline at end of file
15,19c15
<    if (bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (bzerr == BZ_STREAM_END) ; else 
\ No newline at end of file
16,19d15
< }
< 
< 
< 
Termination check: size was 5546; now 176
===< pass_ternary :: c >===
===< pass_clang :: remove-namespace >===
===< pass_clang :: union-to-struct >===
===< pass_clang :: return-void >===
12c12
< int BZ_APIBZ2_bzread (void )
---
> void  BZ_APIBZ2_bzread (void )
(99.9 %, 178 bytes)
===< pass_clang :: copy-propagation >===
===< pass_clang :: simplify-callexpr >===
===< pass_clang :: move-function-body >===
===< pass_clang :: replace-dependent-typedef >===
===< pass_clang :: template-arg-to-int >===
===< pass_clang :: remove-unused-outer-class >===
===< pass_clang :: simplify-struct >===
===< pass_special :: b >===
===< pass_ints :: b >===
Termination check: size was 176; now 178
===< pass_clang :: rename-fun >===
12c12
< void  BZ_APIBZ2_bzread (void )
---
> void  fn1 (void )
(99.9 %, 165 bytes)
===< pass_clang :: rename-param >===
===< pass_clang :: rename-var >===
14,15c14,15
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; else ;
---
>    int a;
>    if (a == BZ_STREAM_END) ; else ;
(99.9 %, 157 bytes)
===< pass_clang :: rename-class >===
===< pass_clang :: rename-cxx-method >===
===< pass_clang :: combine-global-var >===
===< pass_clang :: combine-local-var >===
===< pass_clang :: simplify-struct-union-decl >===
===< pass_clang :: move-global-var >===
===< pass_clang :: unify-function-decl >===
===< pass_clex :: delete-string >===
===< pass_indent :: final >===
1,7d0
<  
< 
< 
< 
< 
< 
< 
12c5,6
< void  fn1 (void )
---
> void
> fn1 ( void )
14,15c8,10
<    int a;
<    if (a == BZ_STREAM_END) ; else ;
---
>   int a;
>   if ( a == BZ_STREAM_END ) ;
>   else;
17,19d11
< 
< 
< 
1c1
<  
---
> 
14,15c14,16
<    int a;
<    if (a == BZ_STREAM_END) ; else ;
---
>     int a;
>     if (a == BZ_STREAM_END) ;
>     else ;
(99.9 %, 147 bytes)
8,10c8,10
<   int a;
<   if ( a == BZ_STREAM_END ) ;
<   else;
---
>     int a;
>     if ( a == BZ_STREAM_END ) ;
>     else;
2,3c2,3
< #define define define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
---
> #define define define BZ_FINISH_OK 3
> #define BZ_STREAM_END 9
5,7c5
< void
< fn1 ( void )
< {
---
> void fn1(void) {
9,10c7,10
<   if ( a == BZ_STREAM_END ) ;
<   else;
---
>   if (a == BZ_STREAM_END)
>     ;
>   else
>     ;
(99.9 %, 153 bytes)
2,3c2,3
< #define define define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
---
> #define define define BZ_FINISH_OK 3
> #define BZ_STREAM_END 9
5,10c5,10
< void
< fn1 ( void )
< {
<     int a;
<     if ( a == BZ_STREAM_END ) ;
<     else;
---
> void fn1(void) {
>   int a;
>   if (a == BZ_STREAM_END)
>     ;
>   else
>     ;
(99.9 %, 136 bytes)
===================== done ====================

pass statistics:
  method pass_balanced :: angles worked 0 times and failed 0 times
  method pass_balanced :: angles-only worked 0 times and failed 0 times
  method pass_balanced :: curly worked 73 times and failed 51 times
  method pass_balanced :: curly-only worked 0 times and failed 0 times
  method pass_balanced :: curly2 worked 27 times and failed 18 times
  method pass_balanced :: curly3 worked 6 times and failed 0 times
  method pass_balanced :: parens worked 0 times and failed 0 times
  method pass_balanced :: parens-only worked 225 times and failed 73 times
  method pass_blank :: 0 worked 0 times and failed 1 times
  method pass_clang :: aggregate-to-scalar worked 0 times and failed 0 times
  method pass_clang :: callexpr-to-value worked 1 times and failed 0 times
  method pass_clang :: class-template-to-class worked 0 times and failed 0 times
  method pass_clang :: combine-global-var worked 0 times and failed 0 times
  method pass_clang :: combine-local-var worked 0 times and failed 0 times
  method pass_clang :: copy-propagation worked 0 times and failed 0 times
  method pass_clang :: empty-struct-to-int worked 0 times and failed 0 times
  method pass_clang :: instantiate-template-param worked 0 times and failed 0 times
  method pass_clang :: instantiate-template-type-param-to-int worked 0 times and failed 0 times
  method pass_clang :: lift-assignment-expr worked 0 times and failed 0 times
  method pass_clang :: local-to-global worked 1 times and failed 1 times
  method pass_clang :: move-function-body worked 0 times and failed 0 times
  method pass_clang :: move-global-var worked 0 times and failed 0 times
  method pass_clang :: param-to-global worked 40 times and failed 11 times
  method pass_clang :: param-to-local worked 0 times and failed 0 times
  method pass_clang :: reduce-array-dim worked 0 times and failed 0 times
  method pass_clang :: reduce-array-size worked 0 times and failed 0 times
  method pass_clang :: reduce-class-template-param worked 0 times and failed 0 times
  method pass_clang :: reduce-pointer-level worked 0 times and failed 0 times
  method pass_clang :: remove-addr-taken worked 0 times and failed 0 times
  method pass_clang :: remove-array worked 0 times and failed 0 times
  method pass_clang :: remove-base-class worked 0 times and failed 0 times
  method pass_clang :: remove-ctor-initializer worked 0 times and failed 0 times
  method pass_clang :: remove-enum-member-value worked 0 times and failed 0 times
  method pass_clang :: remove-namespace worked 0 times and failed 0 times
  method pass_clang :: remove-nested-function worked 0 times and failed 0 times
  method pass_clang :: remove-pointer worked 0 times and failed 1 times
  method pass_clang :: remove-pointer-pairs worked 0 times and failed 0 times
  method pass_clang :: remove-trivial-base-template worked 0 times and failed 0 times
  method pass_clang :: remove-unresolved-base worked 0 times and failed 0 times
  method pass_clang :: remove-unused-enum-member worked 0 times and failed 0 times
  method pass_clang :: remove-unused-field worked 0 times and failed 0 times
  method pass_clang :: remove-unused-function worked 17 times and failed 2 times
  method pass_clang :: remove-unused-outer-class worked 0 times and failed 0 times
  method pass_clang :: remove-unused-var worked 33 times and failed 0 times
  method pass_clang :: rename-class worked 0 times and failed 0 times
  method pass_clang :: rename-cxx-method worked 0 times and failed 0 times
  method pass_clang :: rename-fun worked 1 times and failed 0 times
  method pass_clang :: rename-param worked 0 times and failed 0 times
  method pass_clang :: rename-var worked 1 times and failed 0 times
  method pass_clang :: replace-array-index-var worked 0 times and failed 0 times
  method pass_clang :: replace-callexpr worked 0 times and failed 0 times
  method pass_clang :: replace-class-with-base-template-spec worked 0 times and failed 0 times
  method pass_clang :: replace-dependent-name worked 0 times and failed 0 times
  method pass_clang :: replace-dependent-typedef worked 0 times and failed 0 times
  method pass_clang :: replace-derived-class worked 0 times and failed 0 times
  method pass_clang :: replace-one-level-typedef-type worked 0 times and failed 0 times
  method pass_clang :: replace-simple-typedef worked 4 times and failed 0 times
  method pass_clang :: replace-undefined-function worked 0 times and failed 0 times
  method pass_clang :: return-void worked 1 times and failed 0 times
  method pass_clang :: simple-inliner worked 0 times and failed 0 times
  method pass_clang :: simplify-callexpr worked 0 times and failed 0 times
  method pass_clang :: simplify-comma-expr worked 0 times and failed 0 times
  method pass_clang :: simplify-dependent-typedef worked 0 times and failed 0 times
  method pass_clang :: simplify-if worked 0 times and failed 0 times
  method pass_clang :: simplify-nested-class worked 0 times and failed 0 times
  method pass_clang :: simplify-recursive-template-instantiation worked 0 times and failed 0 times
  method pass_clang :: simplify-struct worked 0 times and failed 0 times
  method pass_clang :: simplify-struct-union-decl worked 0 times and failed 0 times
  method pass_clang :: template-arg-to-int worked 0 times and failed 0 times
  method pass_clang :: template-non-type-arg-to-int worked 0 times and failed 0 times
  method pass_clang :: unify-function-decl worked 0 times and failed 0 times
  method pass_clang :: union-to-struct worked 0 times and failed 0 times
  method pass_clang_binsrch :: remove-unused-function worked 2 times and failed 1 times
  method pass_clang_binsrch :: remove-unused-function worked 2 times and failed 1 times
  method pass_clang_binsrch :: replace-function-def-with-decl worked 4 times and failed 8 times
  method pass_clang_binsrch :: replace-function-def-with-decl worked 4 times and failed 8 times
  method pass_clex :: delete-string worked 0 times and failed 0 times
  method pass_clex :: rm-tok-pattern-4 worked 0 times and failed 0 times
  method pass_clex :: rm-toks-1 worked 0 times and failed 0 times
  method pass_clex :: rm-toks-10 worked 0 times and failed 0 times
  method pass_clex :: rm-toks-11 worked 0 times and failed 0 times
  method pass_clex :: rm-toks-12 worked 0 times and failed 0 times
  method pass_clex :: rm-toks-13 worked 0 times and failed 0 times
  method pass_clex :: rm-toks-14 worked 6 times and failed 84 times
  method pass_clex :: rm-toks-15 worked 134 times and failed 903 times
  method pass_clex :: rm-toks-16 worked 0 times and failed 0 times
  method pass_clex :: rm-toks-2 worked 0 times and failed 0 times
  method pass_clex :: rm-toks-3 worked 1 times and failed 29 times
  method pass_clex :: rm-toks-4 worked 3 times and failed 32 times
  method pass_clex :: rm-toks-5 worked 0 times and failed 0 times
  method pass_clex :: rm-toks-6 worked 2 times and failed 44 times
  method pass_clex :: rm-toks-7 worked 4 times and failed 56 times
  method pass_clex :: rm-toks-8 worked 0 times and failed 0 times
  method pass_clex :: rm-toks-9 worked 25 times and failed 679 times
  method pass_comments :: 0 worked 1 times and failed 0 times
  method pass_include_includes :: 0 worked 0 times and failed 0 times
  method pass_includes :: 0 worked 20 times and failed 6 times
  method pass_indent :: final worked 3 times and failed 0 times
  method pass_indent :: regular worked 0 times and failed 0 times
  method pass_ints :: a worked 10 times and failed 0 times
  method pass_ints :: b worked 0 times and failed 0 times
  method pass_ints :: c worked 0 times and failed 0 times
  method pass_ints :: d worked 0 times and failed 0 times
  method pass_ints :: e worked 0 times and failed 0 times
  method pass_peep :: a worked 0 times and failed 0 times
  method pass_special :: a worked 0 times and failed 0 times
  method pass_special :: b worked 0 times and failed 0 times
  method pass_special :: c worked 0 times and failed 0 times
  method pass_ternary :: b worked 1 times and failed 0 times
  method pass_ternary :: c worked 0 times and failed 0 times
  method pass_unifdef :: 0 worked 14 times and failed 4 times


          '/home/ukoc/mangroveL/sut-bzip2/runs/run-1454555779.98991/bzip2.c' reduced to:

#define define define BZ_FINISH_OK 3
#define BZ_STREAM_END 9

void fn1(void) {
  int a;
  if (a == BZ_STREAM_END)
    ;
  else
    ;
}
1002.81user 127.75system 13:19.00elapsed 141%CPU (0avgtext+0avgdata 61092maxresident)k
72inputs+3427920outputs (1major+49022887minor)pagefaults 0swaps
